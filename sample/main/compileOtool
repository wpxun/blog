compile:
(__TEXT,__text) section
runtime.text:
go.buildid:
0000000001001000	jmpq	*(%rax)
0000000001001002	outsl	(%rsi), %dx
0000000001001004	andb	%ah, 0x75(%rdx)
0000000001001007	imull	$0x203a4449, 0x20(%rsp,%riz,2), %ebp
000000000100100f	andb	(%rdx), %dh
0000000001001011	popq	%rcx
0000000001001013	pushw	%bp
0000000001001015	js	0x1001069
0000000001001017	popq	%rdi
0000000001001019	pushq	%rcx
000000000100101a	pushq	$0x4b696936
000000000100101f	cmpb	%dl, 0x72(%rbp)
0000000001001023	.byte 0x4c #bad opcode
0000000001001024	.byte 0x2f #bad opcode
0000000001001025	pushq	%rsi
0000000001001026	popq	%rdi
0000000001001027	jno	0x100109f
000000000100102a	xorb	%dh, (%rax)
000000000100102c	xorq	$0x7a457151, %rax
0000000001001032	pushq	$0x48
0000000001001034	pushq	$0x6a
0000000001001036	insb	%dx, %es:(%rdi)
0000000001001038	.byte 0x37 #bad opcode
0000000001001039	.byte 0x2f #bad opcode
000000000100103a	jp	0x10010a2
000000000100103d	.byte 0x48 #bad opcode
000000000100103e	xorb	%bl, 0x44(%r15)
0000000001001042	.byte 0x43 #bad opcode
0000000001001043	.byte 0x4b #bad opcode
0000000001001044	jno	0x100107d
0000000001001047	pushq	%rbp
0000000001001049	jbe	0x10010bd
000000000100104b	pushq	$0x612f425f
0000000001001050	popq	%rcx
0000000001001051	jbe	0x1001087
0000000001001053	imull	$0x38363867, (%rcx,%rcx,2), %esi
000000000100105a	.byte 0x46 #bad opcode
000000000100105b	.byte 0x44 #bad opcode
000000000100105c	popq	%rdi
000000000100105e	subl	$0x4d4d6342, %eax
0000000001001063	andb	(%rdx), %cl
0000000001001065	andb	%bh, %bh
0000000001001067	int3
0000000001001068	int3
0000000001001069	int3
000000000100106a	int3
000000000100106b	int3
000000000100106c	int3
000000000100106d	int3
000000000100106e	int3
000000000100106f	int3
internal/cpu.initialize:
0000000001001070	movq	%gs:0x30, %rcx
0000000001001079	cmpq	0x10(%rcx), %rsp
000000000100107d	jbe	0x10010b4
000000000100107f	subq	$0x18, %rsp
0000000001001083	movq	%rbp, 0x10(%rsp)
0000000001001088	leaq	0x10(%rsp), %rbp
000000000100108d	callq	"internal/cpu.doinit"
0000000001001092	movq	0x20(%rsp), %rax
0000000001001097	movq	%rax, (%rsp)
000000000100109b	movq	0x28(%rsp), %rax
00000000010010a0	movq	%rax, 0x8(%rsp)
00000000010010a5	callq	"internal/cpu.processOptions"
00000000010010aa	movq	0x10(%rsp), %rbp
00000000010010af	addq	$0x18, %rsp
00000000010010b3	retq
00000000010010b4	callq	runtime.morestack_noctxt
00000000010010b9	jmp	"internal/cpu.initialize"
00000000010010bb	int3
00000000010010bc	int3
00000000010010bd	int3
00000000010010be	int3
00000000010010bf	int3
internal/cpu.processOptions:
00000000010010c0	movq	%gs:0x30, %rcx
00000000010010c9	cmpq	0x10(%rcx), %rsp
00000000010010cd	jbe	0x10012e0
00000000010010d3	subq	$0x60, %rsp
00000000010010d7	movq	%rbp, 0x58(%rsp)
00000000010010dc	leaq	0x58(%rsp), %rbp
00000000010010e1	movq	0x68(%rsp), %rax
00000000010010e6	movq	0x70(%rsp), %rcx
00000000010010eb	jmp	0x10010f7
00000000010010ed	movq	0x68(%rsp), %rax
00000000010010f2	movq	0x70(%rsp), %rcx
00000000010010f7	testq	%rcx, %rcx
00000000010010fa	je	0x10012c8
0000000001001100	movq	%rax, 0x40(%rsp)
0000000001001105	movq	%rcx, 0x28(%rsp)
000000000100110a	movq	%rax, (%rsp)
000000000100110e	movq	%rcx, 0x8(%rsp)
0000000001001113	movb	$0x2c, 0x10(%rsp)
0000000001001118	callq	"internal/cpu.indexByte"
000000000100111d	movq	0x18(%rsp), %rax
0000000001001122	testq	%rax, %rax
0000000001001125	jge	0x1001291
000000000100112b	xorl	%eax, %eax
000000000100112d	xorl	%ecx, %ecx
000000000100112f	movq	0x28(%rsp), %rdx
0000000001001134	movq	%rdx, 0x28(%rsp)
0000000001001139	movq	%rax, 0x70(%rsp)
000000000100113e	movq	%rcx, 0x68(%rsp)
0000000001001143	movq	0x40(%rsp), %rbx
0000000001001148	movq	%rbx, (%rsp)
000000000100114c	movq	%rdx, 0x8(%rsp)
0000000001001151	movb	$0x3d, 0x10(%rsp)
0000000001001156	callq	"internal/cpu.indexByte"
000000000100115b	movq	0x18(%rsp), %rax
0000000001001160	testq	%rax, %rax
0000000001001163	jl	0x10010ed
0000000001001165	movq	0x28(%rsp), %rcx
000000000100116a	cmpq	%rcx, %rax
000000000100116d	ja	0x10012d2
0000000001001173	leaq	0x1(%rax), %rdx
0000000001001177	cmpq	%rcx, %rdx
000000000100117a	ja	0x10012d2
0000000001001180	subq	%rdx, %rcx
0000000001001183	movq	%rcx, %rbx
0000000001001186	negq	%rcx
0000000001001189	sarq	$0x3f, %rcx
000000000100118d	andq	%rcx, %rdx
0000000001001190	cmpq	$0x1, %rbx
0000000001001194	jne	0x10010ed
000000000100119a	movq	0x40(%rsp), %rcx
000000000100119f	movzbl	(%rcx,%rdx), %edx
00000000010011a3	cmpb	$0x30, %dl
00000000010011a6	jne	0x10010ed
00000000010011ac	cmpq	$0x3, %rax
00000000010011b0	jne	0x10011c3
00000000010011b2	cmpw	$0x6c61, (%rcx)
00000000010011b7	jne	0x10011c3
00000000010011b9	cmpb	$0x6c, 0x2(%rcx)
00000000010011bd	je	0x100125d
00000000010011c3	movq	"internal/cpu.options"(%rip), %rdx
00000000010011ca	movq	0xb7647(%rip), %rbx
00000000010011d1	testq	%rbx, %rbx
00000000010011d4	jle	0x10010ed
00000000010011da	movq	%rax, 0x20(%rsp)
00000000010011df	movq	%rbx, 0x38(%rsp)
00000000010011e4	xorl	%esi, %esi
00000000010011e6	jmp	0x10011ec
00000000010011e8	addq	$0x18, %rdx
00000000010011ec	movq	0x8(%rdx), %rdi
00000000010011f0	movq	(%rdx), %r8
00000000010011f3	movq	0x10(%rdx), %r9
00000000010011f7	cmpq	%rax, %rdi
00000000010011fa	je	0x1001209
00000000010011fc	incq	%rsi
00000000010011ff	cmpq	%rbx, %rsi
0000000001001202	jl	0x10011e8
0000000001001204	jmp	0x10010ed
0000000001001209	movq	%rdx, 0x50(%rsp)
000000000100120e	movq	%rsi, 0x30(%rsp)
0000000001001213	movq	%r9, 0x48(%rsp)
0000000001001218	movq	%r8, (%rsp)
000000000100121c	movq	%rcx, 0x8(%rsp)
0000000001001221	movq	%rdi, 0x10(%rsp)
0000000001001226	callq	runtime.memequal
000000000100122b	leaq	0x18(%rsp), %rax
0000000001001230	cmpb	$0x0, (%rax)
0000000001001233	jne	0x1001250
0000000001001235	movq	0x20(%rsp), %rax
000000000100123a	movq	0x40(%rsp), %rcx
000000000100123f	movq	0x50(%rsp), %rdx
0000000001001244	movq	0x38(%rsp), %rbx
0000000001001249	movq	0x30(%rsp), %rsi
000000000100124e	jmp	0x10011fc
0000000001001250	movq	0x48(%rsp), %rcx
0000000001001255	movb	$0x0, (%rcx)
0000000001001258	jmp	0x10010ed
000000000100125d	movq	0xb75b4(%rip), %rax
0000000001001264	movq	"internal/cpu.options"(%rip), %rcx
000000000100126b	testq	%rax, %rax
000000000100126e	jle	0x1001287
0000000001001270	xorl	%edx, %edx
0000000001001272	jmp	0x1001278
0000000001001274	addq	$0x18, %rcx
0000000001001278	movq	0x10(%rcx), %rbx
000000000100127c	movb	$0x0, (%rbx)
000000000100127f	incq	%rdx
0000000001001282	cmpq	%rax, %rdx
0000000001001285	jl	0x1001274
0000000001001287	movq	0x58(%rsp), %rbp
000000000100128c	addq	$0x60, %rsp
0000000001001290	retq
0000000001001291	movq	0x28(%rsp), %rcx
0000000001001296	cmpq	%rcx, %rax
0000000001001299	ja	0x10012d9
000000000100129b	leaq	0x1(%rax), %rdx
000000000100129f	cmpq	%rcx, %rdx
00000000010012a2	ja	0x10012d9
00000000010012a4	subq	%rdx, %rcx
00000000010012a7	movq	%rcx, %rbx
00000000010012aa	negq	%rcx
00000000010012ad	sarq	$0x3f, %rcx
00000000010012b1	andq	%rcx, %rdx
00000000010012b4	movq	0x40(%rsp), %rsi
00000000010012b9	leaq	(%rsi,%rdx), %rcx
00000000010012bd	movq	%rax, %rdx
00000000010012c0	movq	%rbx, %rax
00000000010012c3	jmp	0x1001134
00000000010012c8	movq	0x58(%rsp), %rbp
00000000010012cd	addq	$0x60, %rsp
00000000010012d1	retq
00000000010012d2	callq	runtime.panicslice
00000000010012d7	ud2
00000000010012d9	callq	runtime.panicslice
00000000010012de	ud2
00000000010012e0	callq	runtime.morestack_noctxt
00000000010012e5	jmp	"internal/cpu.processOptions"
00000000010012ea	int3
00000000010012eb	int3
00000000010012ec	int3
00000000010012ed	int3
00000000010012ee	int3
00000000010012ef	int3
internal/cpu.indexByte:
00000000010012f0	movq	0x10(%rsp), %rax
00000000010012f5	movzbl	0x18(%rsp), %ecx
00000000010012fa	movq	0x8(%rsp), %rdx
00000000010012ff	xorl	%ebx, %ebx
0000000001001301	jmp	0x1001306
0000000001001303	incq	%rbx
0000000001001306	cmpq	%rax, %rbx
0000000001001309	jge	0x100131a
000000000100130b	movzbl	(%rdx,%rbx), %esi
000000000100130f	cmpb	%cl, %sil
0000000001001312	jne	0x1001303
0000000001001314	movq	%rbx, 0x20(%rsp)
0000000001001319	retq
000000000100131a	movq	$-0x1, 0x20(%rsp)
0000000001001323	retq
0000000001001324	int3
0000000001001325	int3
0000000001001326	int3
0000000001001327	int3
0000000001001328	int3
0000000001001329	int3
000000000100132a	int3
000000000100132b	int3
000000000100132c	int3
000000000100132d	int3
000000000100132e	int3
000000000100132f	int3
internal/cpu.doinit:
0000000001001330	movq	%gs:0x30, %rcx
0000000001001339	cmpq	0x10(%rcx), %rsp
000000000100133d	jbe	0x100173b
0000000001001343	subq	$0x38, %rsp
0000000001001347	movq	%rbp, 0x30(%rsp)
000000000100134c	leaq	0x30(%rsp), %rbp
0000000001001351	leaq	0x578e8(%rip), %rax
0000000001001358	movq	%rax, (%rsp)
000000000100135c	callq	runtime.newobject
0000000001001361	movq	0x8(%rsp), %rax
0000000001001366	cmpl	$0x0, 0xd38c3(%rip)
000000000100136d	jne	0x10015f7
0000000001001373	movq	"internal/cpu.statictmp_0"(%rip), %rcx
000000000100137a	movq	%rcx, (%rax)
000000000100137d	leaq	0x8(%rax), %rdi
0000000001001381	leaq	0x75980(%rip), %rsi
0000000001001388	movq	%rbp, -0x10(%rsp)
000000000100138d	leaq	-0x10(%rsp), %rbp
0000000001001392	callq	0x104949c
0000000001001397	movq	(%rbp), %rbp
000000000100139b	leaq	0xd3b3f(%rip), %rcx
00000000010013a2	movq	%rcx, 0x10(%rax)
00000000010013a6	leaq	0xd3b33(%rip), %rcx
00000000010013ad	movq	%rcx, 0x28(%rax)
00000000010013b1	leaq	0xd3b2a(%rip), %rcx
00000000010013b8	movq	%rcx, 0x40(%rax)
00000000010013bc	leaq	0xd3b20(%rip), %rcx
00000000010013c3	movq	%rcx, 0x58(%rax)
00000000010013c7	leaq	0xd3b16(%rip), %rcx
00000000010013ce	movq	%rcx, 0x70(%rax)
00000000010013d2	leaq	0xd3b0c(%rip), %rcx
00000000010013d9	movq	%rcx, 0x88(%rax)
00000000010013e0	leaq	0xd3aff(%rip), %rcx
00000000010013e7	movq	%rcx, 0xa0(%rax)
00000000010013ee	leaq	0xd3af2(%rip), %rcx
00000000010013f5	movq	%rcx, 0xb8(%rax)
00000000010013fc	leaq	0xd3ae6(%rip), %rcx
0000000001001403	movq	%rcx, 0xd0(%rax)
000000000100140a	leaq	0xd3ad9(%rip), %rcx
0000000001001411	movq	%rcx, 0xe8(%rax)
0000000001001418	leaq	0xd3acd(%rip), %rcx
000000000100141f	movq	%rcx, 0x100(%rax)
0000000001001426	leaq	0xd3ac1(%rip), %rcx
000000000100142d	movq	%rcx, 0x118(%rax)
0000000001001434	leaq	0xd3ab4(%rip), %rcx
000000000100143b	movq	%rcx, 0x130(%rax)
0000000001001442	leaq	0xd3aa4(%rip), %rcx
0000000001001449	movq	%rcx, 0x148(%rax)
0000000001001450	leaq	0xd3a94(%rip), %rcx
0000000001001457	movq	%rcx, 0x160(%rax)
000000000100145e	movq	$0xf, 0xb73b7(%rip)
0000000001001469	cmpl	$0x0, 0xd37c0(%rip)
0000000001001470	jne	0x10015e6
0000000001001476	movq	%rax, "internal/cpu.options"(%rip)
000000000100147d	movq	$0xe, 0xb7390(%rip)
0000000001001488	movq	$0x0, (%rsp)
0000000001001490	callq	"internal/cpu.cpuid"
0000000001001495	movl	0x8(%rsp), %eax
0000000001001499	cmpl	$0x1, %eax
000000000100149c	jb	0x10015dc
00000000010014a2	movl	%eax, 0x20(%rsp)
00000000010014a6	movq	$0x1, (%rsp)
00000000010014ae	callq	"internal/cpu.cpuid"
00000000010014b3	movl	0x10(%rsp), %eax
00000000010014b7	movl	0x14(%rsp), %ecx
00000000010014bb	btl	$0x1a, %ecx
00000000010014bf	setb	0xd3a25(%rip)
00000000010014c6	btl	$0x0, %eax
00000000010014ca	setb	0xd3a1b(%rip)
00000000010014d1	btl	$0x1, %eax
00000000010014d5	setb	0xd3a0d(%rip)
00000000010014dc	btl	$0x9, %eax
00000000010014e0	setb	0xd3a06(%rip)
00000000010014e7	btl	$0xc, %eax
00000000010014eb	setb	0xd39f5(%rip)
00000000010014f2	btl	$0x13, %eax
00000000010014f6	setb	0xd39f1(%rip)
00000000010014fd	btl	$0x14, %eax
0000000001001501	setb	0xd39e7(%rip)
0000000001001508	btl	$0x17, %eax
000000000100150c	setb	0xd39d7(%rip)
0000000001001513	btl	$0x19, %eax
0000000001001517	setb	0xd39c2(%rip)
000000000100151e	btl	$0x1b, %eax
0000000001001522	setb	%cl
0000000001001525	movb	%cl, 0xd39bd(%rip)
000000000100152b	jb	0x10015b4
0000000001001531	xorl	%ecx, %ecx
0000000001001533	btl	$0x1c, %eax
0000000001001537	setb	%al
000000000100153a	andl	%ecx, %eax
000000000100153c	movb	%al, 0xd39a0(%rip)
0000000001001542	movl	0x20(%rsp), %eax
0000000001001546	cmpl	$0x7, %eax
0000000001001549	jae	0x1001555
000000000100154b	movq	0x30(%rsp), %rbp
0000000001001550	addq	$0x38, %rsp
0000000001001554	retq
0000000001001555	movb	%cl, 0x1f(%rsp)
0000000001001559	movq	$0x7, (%rsp)
0000000001001561	callq	"internal/cpu.cpuid"
0000000001001566	movl	0xc(%rsp), %eax
000000000100156a	btl	$0x3, %eax
000000000100156e	setb	0xd396f(%rip)
0000000001001575	btl	$0x5, %eax
0000000001001579	setb	%cl
000000000100157c	movzbl	0x1f(%rsp), %edx
0000000001001581	andl	%ecx, %edx
0000000001001583	movb	%dl, 0xd395a(%rip)
0000000001001589	btl	$0x8, %eax
000000000100158d	setb	0xd3951(%rip)
0000000001001594	btl	$0x9, %eax
0000000001001598	setb	0xd3947(%rip)
000000000100159f	btl	$0x13, %eax
00000000010015a3	setb	0xd3937(%rip)
00000000010015aa	movq	0x30(%rsp), %rbp
00000000010015af	addq	$0x38, %rsp
00000000010015b3	retq
00000000010015b4	movl	%eax, 0x24(%rsp)
00000000010015b8	callq	"internal/cpu.xgetbv"
00000000010015bd	movl	(%rsp), %eax
00000000010015c0	btl	$0x1, %eax
00000000010015c4	jae	0x10015d8
00000000010015c6	btl	$0x2, %eax
00000000010015ca	setb	%al
00000000010015cd	movl	%eax, %ecx
00000000010015cf	movl	0x24(%rsp), %eax
00000000010015d3	jmp	0x1001533
00000000010015d8	xorl	%eax, %eax
00000000010015da	jmp	0x10015cd
00000000010015dc	movq	0x30(%rsp), %rbp
00000000010015e1	addq	$0x38, %rsp
00000000010015e5	retq
00000000010015e6	leaq	"internal/cpu.options"(%rip), %rdi
00000000010015ed	callq	runtime.gcWriteBarrier
00000000010015f2	jmp	0x100147d
00000000010015f7	movq	%rax, 0x28(%rsp)
00000000010015fc	leaq	0x5763d(%rip), %rcx
0000000001001603	movq	%rcx, (%rsp)
0000000001001607	movq	%rax, 0x8(%rsp)
000000000100160c	leaq	"internal/cpu.statictmp_0"(%rip), %rcx
0000000001001613	movq	%rcx, 0x10(%rsp)
0000000001001618	callq	runtime.typedmemmove
000000000100161d	movq	0x28(%rsp), %rax
0000000001001622	leaq	0x10(%rax), %rdi
0000000001001626	movq	%rax, %rcx
0000000001001629	leaq	0xd38b1(%rip), %rax
0000000001001630	callq	runtime.gcWriteBarrier
0000000001001635	leaq	0x28(%rcx), %rdi
0000000001001639	leaq	0xd38a0(%rip), %rax
0000000001001640	callq	runtime.gcWriteBarrier
0000000001001645	leaq	0x40(%rcx), %rdi
0000000001001649	leaq	0xd3892(%rip), %rax
0000000001001650	callq	runtime.gcWriteBarrier
0000000001001655	leaq	0x58(%rcx), %rdi
0000000001001659	leaq	0xd3883(%rip), %rax
0000000001001660	callq	runtime.gcWriteBarrier
0000000001001665	leaq	0x70(%rcx), %rdi
0000000001001669	leaq	0xd3874(%rip), %rax
0000000001001670	callq	runtime.gcWriteBarrier
0000000001001675	leaq	0x88(%rcx), %rdi
000000000100167c	leaq	0xd3862(%rip), %rax
0000000001001683	callq	runtime.gcWriteBarrier
0000000001001688	leaq	0xa0(%rcx), %rdi
000000000100168f	leaq	0xd3850(%rip), %rax
0000000001001696	callq	runtime.gcWriteBarrier
000000000100169b	leaq	0xb8(%rcx), %rdi
00000000010016a2	leaq	0xd383e(%rip), %rax
00000000010016a9	callq	runtime.gcWriteBarrier
00000000010016ae	leaq	0xd0(%rcx), %rdi
00000000010016b5	leaq	0xd382d(%rip), %rax
00000000010016bc	callq	runtime.gcWriteBarrier
00000000010016c1	leaq	0xe8(%rcx), %rdi
00000000010016c8	leaq	0xd381b(%rip), %rax
00000000010016cf	callq	runtime.gcWriteBarrier
00000000010016d4	leaq	0x100(%rcx), %rdi
00000000010016db	leaq	0xd380a(%rip), %rax
00000000010016e2	callq	runtime.gcWriteBarrier
00000000010016e7	leaq	0x118(%rcx), %rdi
00000000010016ee	leaq	0xd37f9(%rip), %rax
00000000010016f5	callq	runtime.gcWriteBarrier
00000000010016fa	leaq	0x130(%rcx), %rdi
0000000001001701	leaq	0xd37e7(%rip), %rax
0000000001001708	callq	runtime.gcWriteBarrier
000000000100170d	leaq	0x148(%rcx), %rdi
0000000001001714	leaq	0xd37d2(%rip), %rax
000000000100171b	callq	runtime.gcWriteBarrier
0000000001001720	leaq	0x160(%rcx), %rdi
0000000001001727	leaq	0xd37bd(%rip), %rax
000000000100172e	callq	runtime.gcWriteBarrier
0000000001001733	movq	%rcx, %rax
0000000001001736	jmp	0x100145e
000000000100173b	callq	runtime.morestack_noctxt
0000000001001740	jmp	"internal/cpu.doinit"
0000000001001745	int3
0000000001001746	int3
0000000001001747	int3
0000000001001748	int3
0000000001001749	int3
000000000100174a	int3
000000000100174b	int3
000000000100174c	int3
000000000100174d	int3
000000000100174e	int3
000000000100174f	int3
internal/cpu.cpuid:
0000000001001750	movl	0x8(%rsp), %eax
0000000001001754	movl	0xc(%rsp), %ecx
0000000001001758	cpuid
000000000100175a	movl	%eax, 0x10(%rsp)
000000000100175e	movl	%ebx, 0x14(%rsp)
0000000001001762	movl	%ecx, 0x18(%rsp)
0000000001001766	movl	%edx, 0x1c(%rsp)
000000000100176a	retq
000000000100176b	int3
000000000100176c	int3
000000000100176d	int3
000000000100176e	int3
000000000100176f	int3
internal/cpu.xgetbv:
0000000001001770	movl	$0x0, %ecx
0000000001001775	xgetbv
0000000001001778	movl	%eax, 0x8(%rsp)
000000000100177c	movl	%edx, 0xc(%rsp)
0000000001001780	retq
0000000001001781	int3
0000000001001782	int3
0000000001001783	int3
0000000001001784	int3
0000000001001785	int3
0000000001001786	int3
0000000001001787	int3
0000000001001788	int3
0000000001001789	int3
000000000100178a	int3
000000000100178b	int3
000000000100178c	int3
000000000100178d	int3
000000000100178e	int3
000000000100178f	int3
type..hash.internal/cpu.arm64:
0000000001001790	movq	%gs:0x30, %rcx
0000000001001799	cmpq	0x10(%rcx), %rsp
000000000100179d	jbe	0x10017e6
000000000100179f	subq	$0x28, %rsp
00000000010017a3	movq	%rbp, 0x20(%rsp)
00000000010017a8	leaq	0x20(%rsp), %rbp
00000000010017ad	movq	0x30(%rsp), %rax
00000000010017b2	addq	$0x40, %rax
00000000010017b6	movq	%rax, (%rsp)
00000000010017ba	movq	0x38(%rsp), %rax
00000000010017bf	movq	%rax, 0x8(%rsp)
00000000010017c4	movq	$0x18, 0x10(%rsp)
00000000010017cd	callq	runtime.memhash
00000000010017d2	movq	0x18(%rsp), %rax
00000000010017d7	movq	%rax, 0x40(%rsp)
00000000010017dc	movq	0x20(%rsp), %rbp
00000000010017e1	addq	$0x28, %rsp
00000000010017e5	retq
00000000010017e6	callq	runtime.morestack_noctxt
00000000010017eb	jmp	"type..hash.internal/cpu.arm64"
00000000010017ed	int3
00000000010017ee	int3
00000000010017ef	int3
type..eq.internal/cpu.arm64:
00000000010017f0	movq	%gs:0x30, %rcx
00000000010017f9	cmpq	0x10(%rcx), %rsp
00000000010017fd	jbe	0x1001849
00000000010017ff	subq	$0x28, %rsp
0000000001001803	movq	%rbp, 0x20(%rsp)
0000000001001808	leaq	0x20(%rsp), %rbp
000000000100180d	movq	0x38(%rsp), %rax
0000000001001812	addq	$0x40, %rax
0000000001001816	movq	%rax, 0x8(%rsp)
000000000100181b	movq	0x30(%rsp), %rax
0000000001001820	addq	$0x40, %rax
0000000001001824	movq	%rax, (%rsp)
0000000001001828	movq	$0x18, 0x10(%rsp)
0000000001001831	callq	runtime.memequal
0000000001001836	movzbl	0x18(%rsp), %eax
000000000100183b	movb	%al, 0x40(%rsp)
000000000100183f	movq	0x20(%rsp), %rbp
0000000001001844	addq	$0x28, %rsp
0000000001001848	retq
0000000001001849	callq	runtime.morestack_noctxt
000000000100184e	jmp	"type..eq.internal/cpu.arm64"
type..hash.internal/cpu.option:
0000000001001850	movq	%gs:0x30, %rcx
0000000001001859	cmpq	0x10(%rcx), %rsp
000000000100185d	jbe	0x10018be
000000000100185f	subq	$0x28, %rsp
0000000001001863	movq	%rbp, 0x20(%rsp)
0000000001001868	leaq	0x20(%rsp), %rbp
000000000100186d	movq	0x30(%rsp), %rax
0000000001001872	movq	%rax, (%rsp)
0000000001001876	movq	0x38(%rsp), %rcx
000000000100187b	movq	%rcx, 0x8(%rsp)
0000000001001880	callq	runtime.strhash
0000000001001885	movq	0x10(%rsp), %rax
000000000100188a	movq	0x30(%rsp), %rcx
000000000100188f	addq	$0x10, %rcx
0000000001001893	movq	%rcx, (%rsp)
0000000001001897	movq	%rax, 0x8(%rsp)
000000000100189c	movq	$0x8, 0x10(%rsp)
00000000010018a5	callq	runtime.memhash
00000000010018aa	movq	0x18(%rsp), %rax
00000000010018af	movq	%rax, 0x40(%rsp)
00000000010018b4	movq	0x20(%rsp), %rbp
00000000010018b9	addq	$0x28, %rsp
00000000010018bd	retq
00000000010018be	callq	runtime.morestack_noctxt
00000000010018c3	jmp	"type..hash.internal/cpu.option"
00000000010018c5	int3
00000000010018c6	int3
00000000010018c7	int3
00000000010018c8	int3
00000000010018c9	int3
00000000010018ca	int3
00000000010018cb	int3
00000000010018cc	int3
00000000010018cd	int3
00000000010018ce	int3
00000000010018cf	int3
type..eq.internal/cpu.option:
00000000010018d0	movq	%gs:0x30, %rcx
00000000010018d9	cmpq	0x10(%rcx), %rsp
00000000010018dd	jbe	0x1001951
00000000010018df	subq	$0x28, %rsp
00000000010018e3	movq	%rbp, 0x20(%rsp)
00000000010018e8	leaq	0x20(%rsp), %rbp
00000000010018ed	movq	0x38(%rsp), %rax
00000000010018f2	movq	0x8(%rax), %rcx
00000000010018f6	movq	0x30(%rsp), %rdx
00000000010018fb	movq	0x8(%rdx), %rbx
00000000010018ff	movq	(%rdx), %rsi
0000000001001902	movq	(%rax), %rdi
0000000001001905	cmpq	%rcx, %rbx
0000000001001908	je	0x100192d
000000000100190a	xorl	%ecx, %ecx
000000000100190c	testb	%cl, %cl
000000000100190e	je	0x1001929
0000000001001910	movq	0x10(%rax), %rax
0000000001001914	cmpq	%rax, 0x10(%rdx)
0000000001001918	sete	%al
000000000100191b	movb	%al, 0x40(%rsp)
000000000100191f	movq	0x20(%rsp), %rbp
0000000001001924	addq	$0x28, %rsp
0000000001001928	retq
0000000001001929	xorl	%eax, %eax
000000000100192b	jmp	0x100191b
000000000100192d	movq	%rsi, (%rsp)
0000000001001931	movq	%rdi, 0x8(%rsp)
0000000001001936	movq	%rbx, 0x10(%rsp)
000000000100193b	callq	runtime.memequal
0000000001001940	movzbl	0x18(%rsp), %ecx
0000000001001945	movq	0x38(%rsp), %rax
000000000100194a	movq	0x30(%rsp), %rdx
000000000100194f	jmp	0x100190c
0000000001001951	callq	runtime.morestack_noctxt
0000000001001956	jmp	"type..eq.internal/cpu.option"
000000000100195b	int3
000000000100195c	int3
000000000100195d	int3
000000000100195e	int3
000000000100195f	int3
type..hash.internal/cpu.x86:
0000000001001960	movq	%gs:0x30, %rcx
0000000001001969	cmpq	0x10(%rcx), %rsp
000000000100196d	jbe	0x10019b6
000000000100196f	subq	$0x28, %rsp
0000000001001973	movq	%rbp, 0x20(%rsp)
0000000001001978	leaq	0x20(%rsp), %rbp
000000000100197d	movq	0x30(%rsp), %rax
0000000001001982	addq	$0x40, %rax
0000000001001986	movq	%rax, (%rsp)
000000000100198a	movq	0x38(%rsp), %rax
000000000100198f	movq	%rax, 0x8(%rsp)
0000000001001994	movq	$0x10, 0x10(%rsp)
000000000100199d	callq	runtime.memhash
00000000010019a2	movq	0x18(%rsp), %rax
00000000010019a7	movq	%rax, 0x40(%rsp)
00000000010019ac	movq	0x20(%rsp), %rbp
00000000010019b1	addq	$0x28, %rsp
00000000010019b5	retq
00000000010019b6	callq	runtime.morestack_noctxt
00000000010019bb	jmp	"type..hash.internal/cpu.x86"
00000000010019bd	int3
00000000010019be	int3
00000000010019bf	int3
type..eq.internal/cpu.x86:
00000000010019c0	movq	%gs:0x30, %rcx
00000000010019c9	cmpq	0x10(%rcx), %rsp
00000000010019cd	jbe	0x1001a10
00000000010019cf	subq	$0x20, %rsp
00000000010019d3	movq	%rbp, 0x18(%rsp)
00000000010019d8	leaq	0x18(%rsp), %rbp
00000000010019dd	movq	0x30(%rsp), %rax
00000000010019e2	addq	$0x40, %rax
00000000010019e6	movq	%rax, 0x8(%rsp)
00000000010019eb	movq	0x28(%rsp), %rax
00000000010019f0	addq	$0x40, %rax
00000000010019f4	movq	%rax, (%rsp)
00000000010019f8	callq	runtime.memequal128
00000000010019fd	movzbl	0x10(%rsp), %eax
0000000001001a02	movb	%al, 0x38(%rsp)
0000000001001a06	movq	0x18(%rsp), %rbp
0000000001001a0b	addq	$0x20, %rsp
0000000001001a0f	retq
0000000001001a10	callq	runtime.morestack_noctxt
0000000001001a15	jmp	"type..eq.internal/cpu.x86"
0000000001001a17	int3
0000000001001a18	int3
0000000001001a19	int3
0000000001001a1a	int3
0000000001001a1b	int3
0000000001001a1c	int3
0000000001001a1d	int3
0000000001001a1e	int3
0000000001001a1f	int3
type..hash.[15]internal/cpu.option:
0000000001001a20	movq	%gs:0x30, %rcx
0000000001001a29	cmpq	0x10(%rcx), %rsp
0000000001001a2d	jbe	0x1001a88
0000000001001a2f	subq	$0x28, %rsp
0000000001001a33	movq	%rbp, 0x20(%rsp)
0000000001001a38	leaq	0x20(%rsp), %rbp
0000000001001a3d	xorl	%eax, %eax
0000000001001a3f	movq	0x38(%rsp), %rcx
0000000001001a44	jmp	0x1001a73
0000000001001a46	movq	%rax, 0x18(%rsp)
0000000001001a4b	leaq	(%rax,%rax,2), %rdx
0000000001001a4f	movq	0x30(%rsp), %rbx
0000000001001a54	leaq	(%rbx,%rdx,8), %rdx
0000000001001a58	movq	%rdx, (%rsp)
0000000001001a5c	movq	%rcx, 0x8(%rsp)
0000000001001a61	callq	"type..hash.internal/cpu.option"
0000000001001a66	movq	0x10(%rsp), %rcx
0000000001001a6b	movq	0x18(%rsp), %rax
0000000001001a70	incq	%rax
0000000001001a73	cmpq	$0xf, %rax
0000000001001a77	jl	0x1001a46
0000000001001a79	movq	%rcx, 0x40(%rsp)
0000000001001a7e	movq	0x20(%rsp), %rbp
0000000001001a83	addq	$0x28, %rsp
0000000001001a87	retq
0000000001001a88	callq	runtime.morestack_noctxt
0000000001001a8d	jmp	"type..hash.[15]internal/cpu.option"
0000000001001a8f	int3
type..eq.[15]internal/cpu.option:
0000000001001a90	movq	%gs:0x30, %rcx
0000000001001a99	cmpq	0x10(%rcx), %rsp
0000000001001a9d	jbe	0x1001b55
0000000001001aa3	subq	$0x38, %rsp
0000000001001aa7	movq	%rbp, 0x30(%rsp)
0000000001001aac	leaq	0x30(%rsp), %rbp
0000000001001ab1	movq	0x48(%rsp), %rax
0000000001001ab6	movq	0x40(%rsp), %rcx
0000000001001abb	xorl	%edx, %edx
0000000001001abd	jmp	0x1001ac2
0000000001001abf	incq	%rdx
0000000001001ac2	cmpq	$0xf, %rdx
0000000001001ac6	jge	0x1001b46
0000000001001ac8	leaq	(%rdx,%rdx,2), %rbx
0000000001001acc	movq	0x8(%rax,%rbx,8), %rsi
0000000001001ad1	movq	0x8(%rcx,%rbx,8), %rdi
0000000001001ad6	movq	(%rcx,%rbx,8), %r8
0000000001001ada	movq	(%rax,%rbx,8), %r9
0000000001001ade	cmpq	%rsi, %rdi
0000000001001ae1	je	0x1001b0b
0000000001001ae3	movl	$0x1, %esi
0000000001001ae8	testb	%sil, %sil
0000000001001aeb	jne	0x1001afc
0000000001001aed	movq	0x10(%rcx,%rbx,8), %rsi
0000000001001af2	movq	0x10(%rax,%rbx,8), %rbx
0000000001001af7	cmpq	%rbx, %rsi
0000000001001afa	je	0x1001abf
0000000001001afc	movb	$0x0, 0x50(%rsp)
0000000001001b01	movq	0x30(%rsp), %rbp
0000000001001b06	addq	$0x38, %rsp
0000000001001b0a	retq
0000000001001b0b	movq	%rdx, 0x20(%rsp)
0000000001001b10	movq	%rbx, 0x28(%rsp)
0000000001001b15	movq	%r8, (%rsp)
0000000001001b19	movq	%r9, 0x8(%rsp)
0000000001001b1e	movq	%rdi, 0x10(%rsp)
0000000001001b23	callq	runtime.memequal
0000000001001b28	movzbl	0x18(%rsp), %esi
0000000001001b2d	xorl	$0x1, %esi
0000000001001b30	movq	0x48(%rsp), %rax
0000000001001b35	movq	0x40(%rsp), %rcx
0000000001001b3a	movq	0x20(%rsp), %rdx
0000000001001b3f	movq	0x28(%rsp), %rbx
0000000001001b44	jmp	0x1001ae8
0000000001001b46	movb	$0x1, 0x50(%rsp)
0000000001001b4b	movq	0x30(%rsp), %rbp
0000000001001b50	addq	$0x38, %rsp
0000000001001b54	retq
0000000001001b55	callq	runtime.morestack_noctxt
0000000001001b5a	jmp	"type..eq.[15]internal/cpu.option"
0000000001001b5f	int3
internal/bytealg.init.0:
0000000001001b60	leaq	0xd337c(%rip), %rax
0000000001001b67	cmpb	$0x0, (%rax)
0000000001001b6a	je	0x1001b78
0000000001001b6c	movq	$0x3f, runtime.traceback_env(%rip)
0000000001001b77	retq
0000000001001b78	movq	$0x1f, runtime.traceback_env(%rip)
0000000001001b83	jmp	0x1001b77
0000000001001b85	int3
0000000001001b86	int3
0000000001001b87	int3
0000000001001b88	int3
0000000001001b89	int3
0000000001001b8a	int3
0000000001001b8b	int3
0000000001001b8c	int3
0000000001001b8d	int3
0000000001001b8e	int3
0000000001001b8f	int3
internal/bytealg.init:
0000000001001b90	movq	%gs:0x30, %rcx
0000000001001b99	cmpq	0x10(%rcx), %rsp
0000000001001b9d	jbe	0x1001be5
0000000001001b9f	subq	$0x8, %rsp
0000000001001ba3	movq	%rbp, (%rsp)
0000000001001ba7	leaq	(%rsp), %rbp
0000000001001bab	movzbl	runtime.noptrbss(%rip), %eax
0000000001001bb2	cmpb	$0x1, %al
0000000001001bb5	jbe	0x1001bc0
0000000001001bb7	movq	(%rsp), %rbp
0000000001001bbb	addq	$0x8, %rsp
0000000001001bbf	retq
0000000001001bc0	jne	0x1001bc9
0000000001001bc2	callq	runtime.throwinit
0000000001001bc7	ud2
0000000001001bc9	movb	$0x1, 0xd2ef0(%rip)
0000000001001bd0	callq	"internal/bytealg.init.0"
0000000001001bd5	movb	$0x2, 0xd2ee4(%rip)
0000000001001bdc	movq	(%rsp), %rbp
0000000001001be0	addq	$0x8, %rsp
0000000001001be4	retq
0000000001001be5	callq	runtime.morestack_noctxt
0000000001001bea	jmp	"internal/bytealg.init"
0000000001001bec	int3
0000000001001bed	int3
0000000001001bee	int3
0000000001001bef	int3
runtime.cmpstring:
0000000001001bf0	movq	0x8(%rsp), %rsi
0000000001001bf5	movq	0x10(%rsp), %rbx
0000000001001bfa	movq	0x18(%rsp), %rdi
0000000001001bff	movq	0x20(%rsp), %rdx
0000000001001c04	leaq	0x28(%rsp), %r9
0000000001001c09	jmp	_cmpbody
0000000001001c0e	int3
0000000001001c0f	int3
_cmpbody:
0000000001001c10	cmpq	%rdi, %rsi
0000000001001c13	je	0x1001d44
0000000001001c19	cmpq	%rdx, %rbx
0000000001001c1c	movq	%rdx, %r8
0000000001001c1f	cmovlq	%rbx, %r8
0000000001001c23	cmpq	$0x8, %r8
0000000001001c27	jb	0x1001ce9
0000000001001c2d	cmpq	$0x3f, %r8
0000000001001c31	jbe	0x1001c45
0000000001001c33	cmpb	$0x1, 0xd32a9(%rip)
0000000001001c3a	je	0x1001ded
0000000001001c40	jmp	0x1001d5c
0000000001001c45	cmpq	$0x10, %r8
0000000001001c49	jbe	0x1001ca9
0000000001001c4b	movdqu	(%rsi), %xmm0
0000000001001c4f	movdqu	(%rdi), %xmm1
0000000001001c53	pcmpeqb	%xmm0, %xmm1
0000000001001c57	pmovmskb	%xmm1, %eax
0000000001001c5b	xorq	$0xffff, %rax
0000000001001c61	jne	0x1001c8d
0000000001001c63	addq	$0x10, %rsi
0000000001001c67	addq	$0x10, %rdi
0000000001001c6b	subq	$0x10, %r8
0000000001001c6f	jmp	0x1001c45
0000000001001c71	addq	$0x30, %rsi
0000000001001c75	addq	$0x30, %rdi
0000000001001c79	jmp	0x1001c8d
0000000001001c7b	addq	$0x20, %rsi
0000000001001c7f	addq	$0x20, %rdi
0000000001001c83	jmp	0x1001c8d
0000000001001c85	addq	$0x10, %rsi
0000000001001c89	addq	$0x10, %rdi
0000000001001c8d	bsfq	%rax, %rbx
0000000001001c91	xorq	%rax, %rax
0000000001001c94	movb	(%rsi,%rbx), %cl
0000000001001c97	cmpb	(%rdi,%rbx), %cl
0000000001001c9a	seta	%al
0000000001001c9d	leaq	-0x1(,%rax,2), %rax
0000000001001ca5	movq	%rax, (%r9)
0000000001001ca8	retq
0000000001001ca9	cmpq	$0x8, %r8
0000000001001cad	jbe	0x1001cba
0000000001001caf	movq	(%rsi), %rax
0000000001001cb2	movq	(%rdi), %rcx
0000000001001cb5	cmpq	%rcx, %rax
0000000001001cb8	jne	0x1001cc9
0000000001001cba	movq	-0x8(%rsi,%r8), %rax
0000000001001cbf	movq	-0x8(%rdi,%r8), %rcx
0000000001001cc4	cmpq	%rcx, %rax
0000000001001cc7	je	0x1001d44
0000000001001cc9	bswapq	%rax
0000000001001ccc	bswapq	%rcx
0000000001001ccf	xorq	%rax, %rcx
0000000001001cd2	bsrq	%rcx, %rcx
0000000001001cd6	shrq	%cl, %rax
0000000001001cd9	andq	$0x1, %rax
0000000001001cdd	leaq	-0x1(,%rax,2), %rax
0000000001001ce5	movq	%rax, (%r9)
0000000001001ce8	retq
0000000001001ce9	leaq	(,%r8,8), %rcx
0000000001001cf1	negq	%rcx
0000000001001cf4	je	0x1001d44
0000000001001cf6	cmpb	$-0x8, %sil
0000000001001cfa	ja	0x1001d01
0000000001001cfc	movq	(%rsi), %rsi
0000000001001cff	jmp	0x1001d09
0000000001001d01	movq	-0x8(%rsi,%r8), %rsi
0000000001001d06	shrq	%cl, %rsi
0000000001001d09	shlq	%cl, %rsi
0000000001001d0c	cmpb	$-0x8, %dil
0000000001001d10	ja	0x1001d17
0000000001001d12	movq	(%rdi), %rdi
0000000001001d15	jmp	0x1001d1f
0000000001001d17	movq	-0x8(%rdi,%r8), %rdi
0000000001001d1c	shrq	%cl, %rdi
0000000001001d1f	shlq	%cl, %rdi
0000000001001d22	bswapq	%rsi
0000000001001d25	bswapq	%rdi
0000000001001d28	xorq	%rsi, %rdi
0000000001001d2b	je	0x1001d44
0000000001001d2d	bsrq	%rdi, %rcx
0000000001001d31	shrq	%cl, %rsi
0000000001001d34	andq	$0x1, %rsi
0000000001001d38	leaq	-0x1(,%rsi,2), %rax
0000000001001d40	movq	%rax, (%r9)
0000000001001d43	retq
0000000001001d44	xorq	%rax, %rax
0000000001001d47	xorq	%rcx, %rcx
0000000001001d4a	cmpq	%rdx, %rbx
0000000001001d4d	setg	%al
0000000001001d50	sete	%cl
0000000001001d53	leaq	-0x1(%rcx,%rax,2), %rax
0000000001001d58	movq	%rax, (%r9)
0000000001001d5b	retq
0000000001001d5c	movdqu	(%rsi), %xmm0
0000000001001d60	movdqu	(%rdi), %xmm1
0000000001001d64	pcmpeqb	%xmm0, %xmm1
0000000001001d68	pmovmskb	%xmm1, %eax
0000000001001d6c	xorq	$0xffff, %rax
0000000001001d72	jne	0x1001c8d
0000000001001d78	movdqu	0x10(%rsi), %xmm0
0000000001001d7d	movdqu	0x10(%rdi), %xmm1
0000000001001d82	pcmpeqb	%xmm0, %xmm1
0000000001001d86	pmovmskb	%xmm1, %eax
0000000001001d8a	xorq	$0xffff, %rax
0000000001001d90	jne	0x1001c85
0000000001001d96	movdqu	0x20(%rsi), %xmm0
0000000001001d9b	movdqu	0x20(%rdi), %xmm1
0000000001001da0	pcmpeqb	%xmm0, %xmm1
0000000001001da4	pmovmskb	%xmm1, %eax
0000000001001da8	xorq	$0xffff, %rax
0000000001001dae	jne	0x1001c7b
0000000001001db4	movdqu	0x30(%rsi), %xmm0
0000000001001db9	movdqu	0x30(%rdi), %xmm1
0000000001001dbe	pcmpeqb	%xmm0, %xmm1
0000000001001dc2	pmovmskb	%xmm1, %eax
0000000001001dc6	xorq	$0xffff, %rax
0000000001001dcc	jne	0x1001c71
0000000001001dd2	addq	$0x40, %rsi
0000000001001dd6	addq	$0x40, %rdi
0000000001001dda	subq	$0x40, %r8
0000000001001dde	cmpq	$0x40, %r8
0000000001001de2	jbe	0x1001c45
0000000001001de8	jmp	0x1001d5c
0000000001001ded	vmovdqu	(%rsi), %ymm2
0000000001001df1	vmovdqu	(%rdi), %ymm3
0000000001001df5	vmovdqu	0x20(%rsi), %ymm4
0000000001001dfa	vmovdqu	0x20(%rdi), %ymm5
0000000001001dff	vpcmpeqb	%ymm2, %ymm3, %ymm0
0000000001001e03	vpmovmskb	%ymm0, %eax
0000000001001e07	xorl	$0xffffffff, %eax
0000000001001e0c	jne	0x1001e31
0000000001001e0e	vpcmpeqb	%ymm4, %ymm5, %ymm6
0000000001001e12	vpmovmskb	%ymm6, %eax
0000000001001e16	xorl	$0xffffffff, %eax
0000000001001e1b	jne	0x1001e39
0000000001001e1d	addq	$0x40, %rsi
0000000001001e21	addq	$0x40, %rdi
0000000001001e25	subq	$0x40, %r8
0000000001001e29	cmpq	$0x40, %r8
0000000001001e2d	jb	0x1001e41
0000000001001e2f	jmp	0x1001ded
0000000001001e31	vzeroupper
0000000001001e34	jmp	0x1001c8d
0000000001001e39	vzeroupper
0000000001001e3c	jmp	0x1001c7b
0000000001001e41	vzeroupper
0000000001001e44	jmp	0x1001c45
0000000001001e49	int3
0000000001001e4a	int3
0000000001001e4b	int3
0000000001001e4c	int3
0000000001001e4d	int3
0000000001001e4e	int3
0000000001001e4f	int3
runtime.memequal:
0000000001001e50	movq	0x8(%rsp), %rsi
0000000001001e55	movq	0x10(%rsp), %rdi
0000000001001e5a	cmpq	%rdi, %rsi
0000000001001e5d	je	0x1001e6e
0000000001001e5f	movq	0x18(%rsp), %rbx
0000000001001e64	leaq	0x20(%rsp), %rax
0000000001001e69	jmp	_memeqbody
0000000001001e6e	movb	$0x1, 0x20(%rsp)
0000000001001e73	retq
0000000001001e74	int3
0000000001001e75	int3
0000000001001e76	int3
0000000001001e77	int3
0000000001001e78	int3
0000000001001e79	int3
0000000001001e7a	int3
0000000001001e7b	int3
0000000001001e7c	int3
0000000001001e7d	int3
0000000001001e7e	int3
0000000001001e7f	int3
runtime.memequal_varlen:
0000000001001e80	movq	0x8(%rsp), %rsi
0000000001001e85	movq	0x10(%rsp), %rdi
0000000001001e8a	cmpq	%rdi, %rsi
0000000001001e8d	je	0x1001e9d
0000000001001e8f	movq	0x8(%rdx), %rbx
0000000001001e93	leaq	0x18(%rsp), %rax
0000000001001e98	jmp	_memeqbody
0000000001001e9d	movb	$0x1, 0x18(%rsp)
0000000001001ea2	retq
0000000001001ea3	int3
0000000001001ea4	int3
0000000001001ea5	int3
0000000001001ea6	int3
0000000001001ea7	int3
0000000001001ea8	int3
0000000001001ea9	int3
0000000001001eaa	int3
0000000001001eab	int3
0000000001001eac	int3
0000000001001ead	int3
0000000001001eae	int3
0000000001001eaf	int3
_memeqbody:
0000000001001eb0	cmpq	$0x8, %rbx
0000000001001eb4	jb	0x1001fad
0000000001001eba	cmpq	$0x40, %rbx
0000000001001ebe	jb	0x1001f7b
0000000001001ec4	cmpb	$0x1, 0xd3018(%rip)
0000000001001ecb	je	0x1001f35
0000000001001ecd	cmpq	$0x40, %rbx
0000000001001ed1	jb	0x1001f7b
0000000001001ed7	movdqu	(%rsi), %xmm0
0000000001001edb	movdqu	(%rdi), %xmm1
0000000001001edf	movdqu	0x10(%rsi), %xmm2
0000000001001ee4	movdqu	0x10(%rdi), %xmm3
0000000001001ee9	movdqu	0x20(%rsi), %xmm4
0000000001001eee	movdqu	0x20(%rdi), %xmm5
0000000001001ef3	movdqu	0x30(%rsi), %xmm6
0000000001001ef8	movdqu	0x30(%rdi), %xmm7
0000000001001efd	pcmpeqb	%xmm1, %xmm0
0000000001001f01	pcmpeqb	%xmm3, %xmm2
0000000001001f05	pcmpeqb	%xmm5, %xmm4
0000000001001f09	pcmpeqb	%xmm7, %xmm6
0000000001001f0d	pand	%xmm2, %xmm0
0000000001001f11	pand	%xmm6, %xmm4
0000000001001f15	pand	%xmm4, %xmm0
0000000001001f19	pmovmskb	%xmm0, %edx
0000000001001f1d	addq	$0x40, %rsi
0000000001001f21	addq	$0x40, %rdi
0000000001001f25	subq	$0x40, %rbx
0000000001001f29	cmpl	$0xffff, %edx
0000000001001f2f	je	0x1001ecd
0000000001001f31	movb	$0x0, (%rax)
0000000001001f34	retq
0000000001001f35	cmpq	$0x40, %rbx
0000000001001f39	jb	0x1001f78
0000000001001f3b	vmovdqu	(%rsi), %ymm0
0000000001001f3f	vmovdqu	(%rdi), %ymm1
0000000001001f43	vmovdqu	0x20(%rsi), %ymm2
0000000001001f48	vmovdqu	0x20(%rdi), %ymm3
0000000001001f4d	vpcmpeqb	%ymm1, %ymm0, %ymm4
0000000001001f51	vpcmpeqb	%ymm2, %ymm3, %ymm5
0000000001001f55	vpand	%ymm4, %ymm5, %ymm6
0000000001001f59	vpmovmskb	%ymm6, %edx
0000000001001f5d	addq	$0x40, %rsi
0000000001001f61	addq	$0x40, %rdi
0000000001001f65	subq	$0x40, %rbx
0000000001001f69	cmpl	$0xffffffff, %edx
0000000001001f6f	je	0x1001f35
0000000001001f71	vzeroupper
0000000001001f74	movb	$0x0, (%rax)
0000000001001f77	retq
0000000001001f78	vzeroupper
0000000001001f7b	cmpq	$0x8, %rbx
0000000001001f7f	jbe	0x1001f9c
0000000001001f81	movq	(%rsi), %rcx
0000000001001f84	movq	(%rdi), %rdx
0000000001001f87	addq	$0x8, %rsi
0000000001001f8b	addq	$0x8, %rdi
0000000001001f8f	subq	$0x8, %rbx
0000000001001f93	cmpq	%rdx, %rcx
0000000001001f96	je	0x1001f7b
0000000001001f98	movb	$0x0, (%rax)
0000000001001f9b	retq
0000000001001f9c	movq	-0x8(%rsi,%rbx), %rcx
0000000001001fa1	movq	-0x8(%rdi,%rbx), %rdx
0000000001001fa6	cmpq	%rdx, %rcx
0000000001001fa9	sete	(%rax)
0000000001001fac	retq
0000000001001fad	cmpq	$0x0, %rbx
0000000001001fb1	je	0x1001fea
0000000001001fb3	leaq	(,%rbx,8), %rcx
0000000001001fbb	negq	%rcx
0000000001001fbe	cmpb	$-0x8, %sil
0000000001001fc2	ja	0x1001fc9
0000000001001fc4	movq	(%rsi), %rsi
0000000001001fc7	jmp	0x1001fd1
0000000001001fc9	movq	-0x8(%rsi,%rbx), %rsi
0000000001001fce	shrq	%cl, %rsi
0000000001001fd1	cmpb	$-0x8, %dil
0000000001001fd5	ja	0x1001fdc
0000000001001fd7	movq	(%rdi), %rdi
0000000001001fda	jmp	0x1001fe4
0000000001001fdc	movq	-0x8(%rdi,%rbx), %rdi
0000000001001fe1	shrq	%cl, %rdi
0000000001001fe4	subq	%rsi, %rdi
0000000001001fe7	shlq	%cl, %rdi
0000000001001fea	sete	(%rax)
0000000001001fed	retq
0000000001001fee	int3
0000000001001fef	int3
internal/bytealg.IndexByteString:
0000000001001ff0	movq	0x8(%rsp), %rsi
0000000001001ff5	movq	0x10(%rsp), %rbx
0000000001001ffa	movb	0x18(%rsp), %al
0000000001001ffe	leaq	0x20(%rsp), %r8
0000000001002003	jmp	_indexbytebody
0000000001002008	int3
0000000001002009	int3
000000000100200a	int3
000000000100200b	int3
000000000100200c	int3
000000000100200d	int3
000000000100200e	int3
000000000100200f	int3
_indexbytebody:
0000000001002010	movq	%rax, %xmm0
0000000001002015	punpcklbw	%xmm0, %xmm0
0000000001002019	punpcklbw	%xmm0, %xmm0
000000000100201d	pshufd	$0x0, %xmm0, %xmm0
0000000001002022	cmpq	$0x10, %rbx
0000000001002026	jl	0x100207c
0000000001002028	movq	%rsi, %rdi
000000000100202b	cmpq	$0x20, %rbx
000000000100202f	ja	0x10020c2
0000000001002035	leaq	-0x10(%rsi,%rbx), %rax
000000000100203a	jmp	0x1002051
000000000100203c	movdqu	(%rdi), %xmm1
0000000001002040	pcmpeqb	%xmm0, %xmm1
0000000001002044	pmovmskb	%xmm1, %edx
0000000001002048	bsfl	%edx, %edx
000000000100204b	jne	0x1002072
000000000100204d	addq	$0x10, %rdi
0000000001002051	cmpq	%rax, %rdi
0000000001002054	jb	0x100203c
0000000001002056	movq	%rax, %rdi
0000000001002059	movdqu	(%rax), %xmm1
000000000100205d	pcmpeqb	%xmm0, %xmm1
0000000001002061	pmovmskb	%xmm1, %edx
0000000001002065	bsfl	%edx, %edx
0000000001002068	jne	0x1002072
000000000100206a	movq	$-0x1, (%r8)
0000000001002071	retq
0000000001002072	subq	%rsi, %rdi
0000000001002075	addq	%rdx, %rdi
0000000001002078	movq	%rdi, (%r8)
000000000100207b	retq
000000000100207c	testq	%rbx, %rbx
000000000100207f	je	0x100206a
0000000001002081	leaq	0x10(%rsi), %rax
0000000001002085	testw	$0xff0, %ax
0000000001002089	je	0x10020a4
000000000100208b	movdqu	(%rsi), %xmm1
000000000100208f	pcmpeqb	%xmm0, %xmm1
0000000001002093	pmovmskb	%xmm1, %edx
0000000001002097	bsfl	%edx, %edx
000000000100209a	je	0x100206a
000000000100209c	cmpl	%ebx, %edx
000000000100209e	jae	0x100206a
00000000010020a0	movq	%rdx, (%r8)
00000000010020a3	retq
00000000010020a4	movdqu	-0x10(%rsi,%rbx), %xmm1
00000000010020aa	pcmpeqb	%xmm0, %xmm1
00000000010020ae	pmovmskb	%xmm1, %edx
00000000010020b2	movl	%ebx, %ecx
00000000010020b4	shll	%cl, %edx
00000000010020b6	shrl	$0x10, %edx
00000000010020b9	bsfl	%edx, %edx
00000000010020bc	je	0x100206a
00000000010020be	movq	%rdx, (%r8)
00000000010020c1	retq
00000000010020c2	cmpb	$0x1, 0xd2e1a(%rip)
00000000010020c9	jne	0x1002035
00000000010020cf	movq	%rax, %xmm0
00000000010020d4	leaq	-0x20(%rsi,%rbx), %r11
00000000010020d9	vpbroadcastb	%xmm0, %ymm1
00000000010020de	vmovdqu	(%rdi), %ymm2
00000000010020e2	vpcmpeqb	%ymm1, %ymm2, %ymm3
00000000010020e6	vptest	%ymm3, %ymm3
00000000010020eb	jne	0x1002113
00000000010020ed	addq	$0x20, %rdi
00000000010020f1	cmpq	%r11, %rdi
00000000010020f4	jl	0x10020de
00000000010020f6	movq	%r11, %rdi
00000000010020f9	vmovdqu	(%rdi), %ymm2
00000000010020fd	vpcmpeqb	%ymm1, %ymm2, %ymm3
0000000001002101	vptest	%ymm3, %ymm3
0000000001002106	jne	0x1002113
0000000001002108	vzeroupper
000000000100210b	movq	$-0x1, (%r8)
0000000001002112	retq
0000000001002113	vpmovmskb	%ymm3, %edx
0000000001002117	bsfl	%edx, %edx
000000000100211a	subq	%rsi, %rdi
000000000100211d	addq	%rdi, %rdx
0000000001002120	movq	%rdx, (%r8)
0000000001002123	vzeroupper
0000000001002126	retq
0000000001002127	int3
0000000001002128	int3
0000000001002129	int3
000000000100212a	int3
000000000100212b	int3
000000000100212c	int3
000000000100212d	int3
000000000100212e	int3
000000000100212f	int3
runtime.memhash0:
0000000001002130	movq	0x10(%rsp), %rax
0000000001002135	movq	%rax, 0x18(%rsp)
000000000100213a	retq
000000000100213b	int3
000000000100213c	int3
000000000100213d	int3
000000000100213e	int3
000000000100213f	int3
runtime.memhash8:
0000000001002140	movq	%gs:0x30, %rcx
0000000001002149	cmpq	0x10(%rcx), %rsp
000000000100214d	jbe	0x1002192
000000000100214f	subq	$0x28, %rsp
0000000001002153	movq	%rbp, 0x20(%rsp)
0000000001002158	leaq	0x20(%rsp), %rbp
000000000100215d	movq	0x30(%rsp), %rax
0000000001002162	movq	%rax, (%rsp)
0000000001002166	movq	0x38(%rsp), %rax
000000000100216b	movq	%rax, 0x8(%rsp)
0000000001002170	movq	$0x1, 0x10(%rsp)
0000000001002179	callq	runtime.memhash
000000000100217e	movq	0x18(%rsp), %rax
0000000001002183	movq	%rax, 0x40(%rsp)
0000000001002188	movq	0x20(%rsp), %rbp
000000000100218d	addq	$0x28, %rsp
0000000001002191	retq
0000000001002192	callq	runtime.morestack_noctxt
0000000001002197	jmp	runtime.memhash8
0000000001002199	int3
000000000100219a	int3
000000000100219b	int3
000000000100219c	int3
000000000100219d	int3
000000000100219e	int3
000000000100219f	int3
runtime.memhash16:
00000000010021a0	movq	%gs:0x30, %rcx
00000000010021a9	cmpq	0x10(%rcx), %rsp
00000000010021ad	jbe	0x10021f2
00000000010021af	subq	$0x28, %rsp
00000000010021b3	movq	%rbp, 0x20(%rsp)
00000000010021b8	leaq	0x20(%rsp), %rbp
00000000010021bd	movq	0x30(%rsp), %rax
00000000010021c2	movq	%rax, (%rsp)
00000000010021c6	movq	0x38(%rsp), %rax
00000000010021cb	movq	%rax, 0x8(%rsp)
00000000010021d0	movq	$0x2, 0x10(%rsp)
00000000010021d9	callq	runtime.memhash
00000000010021de	movq	0x18(%rsp), %rax
00000000010021e3	movq	%rax, 0x40(%rsp)
00000000010021e8	movq	0x20(%rsp), %rbp
00000000010021ed	addq	$0x28, %rsp
00000000010021f1	retq
00000000010021f2	callq	runtime.morestack_noctxt
00000000010021f7	jmp	runtime.memhash16
00000000010021f9	int3
00000000010021fa	int3
00000000010021fb	int3
00000000010021fc	int3
00000000010021fd	int3
00000000010021fe	int3
00000000010021ff	int3
runtime.memhash128:
0000000001002200	movq	%gs:0x30, %rcx
0000000001002209	cmpq	0x10(%rcx), %rsp
000000000100220d	jbe	0x1002252
000000000100220f	subq	$0x28, %rsp
0000000001002213	movq	%rbp, 0x20(%rsp)
0000000001002218	leaq	0x20(%rsp), %rbp
000000000100221d	movq	0x30(%rsp), %rax
0000000001002222	movq	%rax, (%rsp)
0000000001002226	movq	0x38(%rsp), %rax
000000000100222b	movq	%rax, 0x8(%rsp)
0000000001002230	movq	$0x10, 0x10(%rsp)
0000000001002239	callq	runtime.memhash
000000000100223e	movq	0x18(%rsp), %rax
0000000001002243	movq	%rax, 0x40(%rsp)
0000000001002248	movq	0x20(%rsp), %rbp
000000000100224d	addq	$0x28, %rsp
0000000001002251	retq
0000000001002252	callq	runtime.morestack_noctxt
0000000001002257	jmp	runtime.memhash128
0000000001002259	int3
000000000100225a	int3
000000000100225b	int3
000000000100225c	int3
000000000100225d	int3
000000000100225e	int3
000000000100225f	int3
runtime.memhash_varlen:
0000000001002260	subq	$0x28, %rsp
0000000001002264	movq	%rbp, 0x20(%rsp)
0000000001002269	leaq	0x20(%rsp), %rbp
000000000100226e	leaq	0x8(%rdx), %rax
0000000001002272	movq	(%rax), %rax
0000000001002275	movq	0x30(%rsp), %rcx
000000000100227a	movq	%rcx, (%rsp)
000000000100227e	movq	0x38(%rsp), %rcx
0000000001002283	movq	%rcx, 0x8(%rsp)
0000000001002288	movq	%rax, 0x10(%rsp)
000000000100228d	callq	runtime.memhash
0000000001002292	movq	0x18(%rsp), %rax
0000000001002297	movq	%rax, 0x40(%rsp)
000000000100229c	movq	0x20(%rsp), %rbp
00000000010022a1	addq	$0x28, %rsp
00000000010022a5	retq
00000000010022a6	int3
00000000010022a7	int3
00000000010022a8	int3
00000000010022a9	int3
00000000010022aa	int3
00000000010022ab	int3
00000000010022ac	int3
00000000010022ad	int3
00000000010022ae	int3
00000000010022af	int3
runtime.strhash:
00000000010022b0	movq	%gs:0x30, %rcx
00000000010022b9	cmpq	0x10(%rcx), %rsp
00000000010022bd	jbe	0x1002305
00000000010022bf	subq	$0x28, %rsp
00000000010022c3	movq	%rbp, 0x20(%rsp)
00000000010022c8	leaq	0x20(%rsp), %rbp
00000000010022cd	movq	0x30(%rsp), %rax
00000000010022d2	movq	(%rax), %rcx
00000000010022d5	movq	0x8(%rax), %rax
00000000010022d9	movq	%rax, 0x10(%rsp)
00000000010022de	movq	%rcx, (%rsp)
00000000010022e2	movq	0x38(%rsp), %rax
00000000010022e7	movq	%rax, 0x8(%rsp)
00000000010022ec	callq	runtime.memhash
00000000010022f1	movq	0x18(%rsp), %rax
00000000010022f6	movq	%rax, 0x40(%rsp)
00000000010022fb	movq	0x20(%rsp), %rbp
0000000001002300	addq	$0x28, %rsp
0000000001002304	retq
0000000001002305	callq	runtime.morestack_noctxt
000000000100230a	jmp	runtime.strhash
000000000100230c	int3
000000000100230d	int3
000000000100230e	int3
000000000100230f	int3
runtime.f32hash:
0000000001002310	movq	%gs:0x30, %rcx
0000000001002319	cmpq	0x10(%rcx), %rsp
000000000100231d	jbe	0x100241f
0000000001002323	subq	$0x28, %rsp
0000000001002327	movq	%rbp, 0x20(%rsp)
000000000100232c	leaq	0x20(%rsp), %rbp
0000000001002331	movq	0x30(%rsp), %rax
0000000001002336	movss	(%rax), %xmm0
000000000100233a	xorps	%xmm1, %xmm1
000000000100233d	ucomiss	%xmm1, %xmm0
0000000001002340	jne	0x1002348
0000000001002342	jnp	0x10023f0
0000000001002348	ucomiss	%xmm0, %xmm0
000000000100234b	jne	0x100234f
000000000100234d	jnp	0x10023c0
000000000100234f	movq	%gs:0x30, %rax
0000000001002358	movq	0x30(%rax), %rax
000000000100235c	movl	0x11c(%rax), %ecx
0000000001002362	movl	0x120(%rax), %edx
0000000001002368	movl	%edx, 0x11c(%rax)
000000000100236e	movl	%ecx, %ebx
0000000001002370	shll	$0x11, %ecx
0000000001002373	xorl	%ecx, %ebx
0000000001002375	movl	%edx, %ecx
0000000001002377	xorl	%ebx, %edx
0000000001002379	shrl	$0x7, %ebx
000000000100237c	xorl	%edx, %ebx
000000000100237e	movl	%ecx, %edx
0000000001002380	shrl	$0x10, %ecx
0000000001002383	xorl	%ebx, %ecx
0000000001002385	movl	%ecx, 0x120(%rax)
000000000100238b	leal	(%rdx,%rcx), %eax
000000000100238e	movq	0x38(%rsp), %rcx
0000000001002393	xorq	%rcx, %rax
0000000001002396	movabsq	$0x756ea16a56a621, %rcx
00000000010023a0	xorq	%rax, %rcx
00000000010023a3	movabsq	$0x52ef6bbb8f63bf, %rax
00000000010023ad	imulq	%rax, %rcx
00000000010023b1	movq	%rcx, 0x40(%rsp)
00000000010023b6	movq	0x20(%rsp), %rbp
00000000010023bb	addq	$0x28, %rsp
00000000010023bf	retq
00000000010023c0	movq	%rax, (%rsp)
00000000010023c4	movq	0x38(%rsp), %rax
00000000010023c9	movq	%rax, 0x8(%rsp)
00000000010023ce	movq	$0x4, 0x10(%rsp)
00000000010023d7	callq	runtime.memhash
00000000010023dc	movq	0x18(%rsp), %rax
00000000010023e1	movq	%rax, 0x40(%rsp)
00000000010023e6	movq	0x20(%rsp), %rbp
00000000010023eb	addq	$0x28, %rsp
00000000010023ef	retq
00000000010023f0	movabsq	$0x756ea16a56a621, %rax
00000000010023fa	movq	0x38(%rsp), %rcx
00000000010023ff	xorq	%rcx, %rax
0000000001002402	movabsq	$0x52ef6bbb8f63bf, %rcx
000000000100240c	imulq	%rcx, %rax
0000000001002410	movq	%rax, 0x40(%rsp)
0000000001002415	movq	0x20(%rsp), %rbp
000000000100241a	addq	$0x28, %rsp
000000000100241e	retq
000000000100241f	callq	runtime.morestack_noctxt
0000000001002424	jmp	runtime.f32hash
0000000001002429	int3
000000000100242a	int3
000000000100242b	int3
000000000100242c	int3
000000000100242d	int3
000000000100242e	int3
000000000100242f	int3
runtime.f64hash:
0000000001002430	movq	%gs:0x30, %rcx
0000000001002439	cmpq	0x10(%rcx), %rsp
000000000100243d	jbe	0x1002541
0000000001002443	subq	$0x28, %rsp
0000000001002447	movq	%rbp, 0x20(%rsp)
000000000100244c	leaq	0x20(%rsp), %rbp
0000000001002451	movq	0x30(%rsp), %rax
0000000001002456	movsd	(%rax), %xmm0
000000000100245a	xorps	%xmm1, %xmm1
000000000100245d	ucomisd	%xmm1, %xmm0
0000000001002461	jne	0x1002469
0000000001002463	jnp	0x1002512
0000000001002469	ucomisd	%xmm0, %xmm0
000000000100246d	jne	0x1002471
000000000100246f	jnp	0x10024e2
0000000001002471	movq	%gs:0x30, %rax
000000000100247a	movq	0x30(%rax), %rax
000000000100247e	movl	0x11c(%rax), %ecx
0000000001002484	movl	0x120(%rax), %edx
000000000100248a	movl	%edx, 0x11c(%rax)
0000000001002490	movl	%ecx, %ebx
0000000001002492	shll	$0x11, %ecx
0000000001002495	xorl	%ecx, %ebx
0000000001002497	movl	%edx, %ecx
0000000001002499	xorl	%ebx, %edx
000000000100249b	shrl	$0x7, %ebx
000000000100249e	xorl	%edx, %ebx
00000000010024a0	movl	%ecx, %edx
00000000010024a2	shrl	$0x10, %ecx
00000000010024a5	xorl	%ebx, %ecx
00000000010024a7	movl	%ecx, 0x120(%rax)
00000000010024ad	leal	(%rdx,%rcx), %eax
00000000010024b0	movq	0x38(%rsp), %rcx
00000000010024b5	xorq	%rcx, %rax
00000000010024b8	movabsq	$0x756ea16a56a621, %rcx
00000000010024c2	xorq	%rax, %rcx
00000000010024c5	movabsq	$0x52ef6bbb8f63bf, %rax
00000000010024cf	imulq	%rax, %rcx
00000000010024d3	movq	%rcx, 0x40(%rsp)
00000000010024d8	movq	0x20(%rsp), %rbp
00000000010024dd	addq	$0x28, %rsp
00000000010024e1	retq
00000000010024e2	movq	%rax, (%rsp)
00000000010024e6	movq	0x38(%rsp), %rax
00000000010024eb	movq	%rax, 0x8(%rsp)
00000000010024f0	movq	$0x8, 0x10(%rsp)
00000000010024f9	callq	runtime.memhash
00000000010024fe	movq	0x18(%rsp), %rax
0000000001002503	movq	%rax, 0x40(%rsp)
0000000001002508	movq	0x20(%rsp), %rbp
000000000100250d	addq	$0x28, %rsp
0000000001002511	retq
0000000001002512	movabsq	$0x756ea16a56a621, %rax
000000000100251c	movq	0x38(%rsp), %rcx
0000000001002521	xorq	%rcx, %rax
0000000001002524	movabsq	$0x52ef6bbb8f63bf, %rcx
000000000100252e	imulq	%rcx, %rax
0000000001002532	movq	%rax, 0x40(%rsp)
0000000001002537	movq	0x20(%rsp), %rbp
000000000100253c	addq	$0x28, %rsp
0000000001002540	retq
0000000001002541	callq	runtime.morestack_noctxt
0000000001002546	jmp	runtime.f64hash
000000000100254b	int3
000000000100254c	int3
000000000100254d	int3
000000000100254e	int3
000000000100254f	int3
runtime.c64hash:
0000000001002550	movq	%gs:0x30, %rcx
0000000001002559	cmpq	0x10(%rcx), %rsp
000000000100255d	jbe	0x10025b7
000000000100255f	subq	$0x20, %rsp
0000000001002563	movq	%rbp, 0x18(%rsp)
0000000001002568	leaq	0x18(%rsp), %rbp
000000000100256d	movq	0x28(%rsp), %rax
0000000001002572	testb	%al, (%rax)
0000000001002574	movq	%rax, (%rsp)
0000000001002578	movq	0x30(%rsp), %rcx
000000000100257d	movq	%rcx, 0x8(%rsp)
0000000001002582	callq	runtime.f32hash
0000000001002587	movq	0x28(%rsp), %rax
000000000100258c	addq	$0x4, %rax
0000000001002590	movq	0x10(%rsp), %rcx
0000000001002595	movq	%rax, (%rsp)
0000000001002599	movq	%rcx, 0x8(%rsp)
000000000100259e	callq	runtime.f32hash
00000000010025a3	movq	0x10(%rsp), %rax
00000000010025a8	movq	%rax, 0x38(%rsp)
00000000010025ad	movq	0x18(%rsp), %rbp
00000000010025b2	addq	$0x20, %rsp
00000000010025b6	retq
00000000010025b7	callq	runtime.morestack_noctxt
00000000010025bc	jmp	runtime.c64hash
00000000010025be	int3
00000000010025bf	int3
runtime.c128hash:
00000000010025c0	movq	%gs:0x30, %rcx
00000000010025c9	cmpq	0x10(%rcx), %rsp
00000000010025cd	jbe	0x1002627
00000000010025cf	subq	$0x20, %rsp
00000000010025d3	movq	%rbp, 0x18(%rsp)
00000000010025d8	leaq	0x18(%rsp), %rbp
00000000010025dd	movq	0x28(%rsp), %rax
00000000010025e2	testb	%al, (%rax)
00000000010025e4	movq	%rax, (%rsp)
00000000010025e8	movq	0x30(%rsp), %rcx
00000000010025ed	movq	%rcx, 0x8(%rsp)
00000000010025f2	callq	runtime.f64hash
00000000010025f7	movq	0x28(%rsp), %rax
00000000010025fc	addq	$0x8, %rax
0000000001002600	movq	0x10(%rsp), %rcx
0000000001002605	movq	%rax, (%rsp)
0000000001002609	movq	%rcx, 0x8(%rsp)
000000000100260e	callq	runtime.f64hash
0000000001002613	movq	0x10(%rsp), %rax
0000000001002618	movq	%rax, 0x38(%rsp)
000000000100261d	movq	0x18(%rsp), %rbp
0000000001002622	addq	$0x20, %rsp
0000000001002626	retq
0000000001002627	callq	runtime.morestack_noctxt
000000000100262c	jmp	runtime.c128hash
000000000100262e	int3
000000000100262f	int3
runtime.interhash:
0000000001002630	movq	%gs:0x30, %rcx
0000000001002639	cmpq	0x10(%rcx), %rsp
000000000100263d	jbe	0x10027a6
0000000001002643	subq	$0x50, %rsp
0000000001002647	movq	%rbp, 0x48(%rsp)
000000000100264c	leaq	0x48(%rsp), %rbp
0000000001002651	movq	0x58(%rsp), %rax
0000000001002656	movq	(%rax), %rcx
0000000001002659	testq	%rcx, %rcx
000000000100265c	je	0x100270b
0000000001002662	movq	0x8(%rcx), %rcx
0000000001002666	movq	0x18(%rcx), %rbx
000000000100266a	movq	(%rbx), %rdx
000000000100266d	testq	%rdx, %rdx
0000000001002670	je	0x100271f
0000000001002676	movzbl	0x17(%rcx), %ecx
000000000100267a	testb	$0x20, %cl
000000000100267d	je	0x10026c5
000000000100267f	addq	$0x8, %rax
0000000001002683	movq	%rax, (%rsp)
0000000001002687	movabsq	$0x756ea16a56a621, %rax
0000000001002691	movq	0x60(%rsp), %rcx
0000000001002696	xorq	%rcx, %rax
0000000001002699	movq	%rax, 0x8(%rsp)
000000000100269e	movq	(%rdx), %rax
00000000010026a1	callq	*%rax
00000000010026a3	movq	0x10(%rsp), %rax
00000000010026a8	movabsq	$0x52ef6bbb8f63bf, %rcx
00000000010026b2	imulq	%rax, %rcx
00000000010026b6	movq	%rcx, 0x68(%rsp)
00000000010026bb	movq	0x48(%rsp), %rbp
00000000010026c0	addq	$0x50, %rsp
00000000010026c4	retq
00000000010026c5	movq	0x8(%rax), %rax
00000000010026c9	movq	%rax, (%rsp)
00000000010026cd	movabsq	$0x756ea16a56a621, %rax
00000000010026d7	movq	0x60(%rsp), %rcx
00000000010026dc	xorq	%rcx, %rax
00000000010026df	movq	%rax, 0x8(%rsp)
00000000010026e4	movq	(%rdx), %rax
00000000010026e7	callq	*%rax
00000000010026e9	movq	0x10(%rsp), %rax
00000000010026ee	movabsq	$0x52ef6bbb8f63bf, %rcx
00000000010026f8	imulq	%rcx, %rax
00000000010026fc	movq	%rax, 0x68(%rsp)
0000000001002701	movq	0x48(%rsp), %rbp
0000000001002706	addq	$0x50, %rsp
000000000100270a	retq
000000000100270b	movq	0x60(%rsp), %rax
0000000001002710	movq	%rax, 0x68(%rsp)
0000000001002715	movq	0x48(%rsp), %rbp
000000000100271a	addq	$0x50, %rsp
000000000100271e	retq
000000000100271f	movq	%rcx, (%rsp)
0000000001002723	callq	"runtime.(*_type).string"
0000000001002728	movq	0x10(%rsp), %rax
000000000100272d	movq	0x8(%rsp), %rcx
0000000001002732	movq	$0x0, (%rsp)
000000000100273a	leaq	0x69eca(%rip), %rdx
0000000001002741	movq	%rdx, 0x8(%rsp)
0000000001002746	movq	$0x18, 0x10(%rsp)
000000000100274f	movq	%rcx, 0x18(%rsp)
0000000001002754	movq	%rax, 0x20(%rsp)
0000000001002759	callq	runtime.concatstring2
000000000100275e	movq	0x30(%rsp), %rax
0000000001002763	movq	0x28(%rsp), %rcx
0000000001002768	movq	%rcx, 0x38(%rsp)
000000000100276d	movq	%rax, 0x40(%rsp)
0000000001002772	leaq	0x59867(%rip), %rax
0000000001002779	movq	%rax, (%rsp)
000000000100277d	leaq	0x38(%rsp), %rax
0000000001002782	movq	%rax, 0x8(%rsp)
0000000001002787	callq	runtime.convT2Estring
000000000100278c	movq	0x18(%rsp), %rax
0000000001002791	movq	0x10(%rsp), %rcx
0000000001002796	movq	%rcx, (%rsp)
000000000100279a	movq	%rax, 0x8(%rsp)
000000000100279f	callq	runtime.gopanic
00000000010027a4	ud2
00000000010027a6	callq	runtime.morestack_noctxt
00000000010027ab	jmp	runtime.interhash
runtime.nilinterhash:
00000000010027b0	movq	%gs:0x30, %rcx
00000000010027b9	cmpq	0x10(%rcx), %rsp
00000000010027bd	jbe	0x1002922
00000000010027c3	subq	$0x50, %rsp
00000000010027c7	movq	%rbp, 0x48(%rsp)
00000000010027cc	leaq	0x48(%rsp), %rbp
00000000010027d1	movq	0x58(%rsp), %rax
00000000010027d6	movq	(%rax), %rcx
00000000010027d9	testq	%rcx, %rcx
00000000010027dc	je	0x1002887
00000000010027e2	movq	0x18(%rcx), %rbx
00000000010027e6	movq	(%rbx), %rdx
00000000010027e9	testq	%rdx, %rdx
00000000010027ec	je	0x100289b
00000000010027f2	movzbl	0x17(%rcx), %ecx
00000000010027f6	testb	$0x20, %cl
00000000010027f9	je	0x1002841
00000000010027fb	addq	$0x8, %rax
00000000010027ff	movq	%rax, (%rsp)
0000000001002803	movabsq	$0x756ea16a56a621, %rax
000000000100280d	movq	0x60(%rsp), %rcx
0000000001002812	xorq	%rcx, %rax
0000000001002815	movq	%rax, 0x8(%rsp)
000000000100281a	movq	(%rdx), %rax
000000000100281d	callq	*%rax
000000000100281f	movq	0x10(%rsp), %rax
0000000001002824	movabsq	$0x52ef6bbb8f63bf, %rcx
000000000100282e	imulq	%rax, %rcx
0000000001002832	movq	%rcx, 0x68(%rsp)
0000000001002837	movq	0x48(%rsp), %rbp
000000000100283c	addq	$0x50, %rsp
0000000001002840	retq
0000000001002841	movq	0x8(%rax), %rax
0000000001002845	movq	%rax, (%rsp)
0000000001002849	movabsq	$0x756ea16a56a621, %rax
0000000001002853	movq	0x60(%rsp), %rcx
0000000001002858	xorq	%rcx, %rax
000000000100285b	movq	%rax, 0x8(%rsp)
0000000001002860	movq	(%rdx), %rax
0000000001002863	callq	*%rax
0000000001002865	movq	0x10(%rsp), %rax
000000000100286a	movabsq	$0x52ef6bbb8f63bf, %rcx
0000000001002874	imulq	%rcx, %rax
0000000001002878	movq	%rax, 0x68(%rsp)
000000000100287d	movq	0x48(%rsp), %rbp
0000000001002882	addq	$0x50, %rsp
0000000001002886	retq
0000000001002887	movq	0x60(%rsp), %rax
000000000100288c	movq	%rax, 0x68(%rsp)
0000000001002891	movq	0x48(%rsp), %rbp
0000000001002896	addq	$0x50, %rsp
000000000100289a	retq
000000000100289b	movq	%rcx, (%rsp)
000000000100289f	callq	"runtime.(*_type).string"
00000000010028a4	movq	0x10(%rsp), %rax
00000000010028a9	movq	0x8(%rsp), %rcx
00000000010028ae	movq	$0x0, (%rsp)
00000000010028b6	leaq	0x69d4e(%rip), %rdx
00000000010028bd	movq	%rdx, 0x8(%rsp)
00000000010028c2	movq	$0x18, 0x10(%rsp)
00000000010028cb	movq	%rcx, 0x18(%rsp)
00000000010028d0	movq	%rax, 0x20(%rsp)
00000000010028d5	callq	runtime.concatstring2
00000000010028da	movq	0x30(%rsp), %rax
00000000010028df	movq	0x28(%rsp), %rcx
00000000010028e4	movq	%rcx, 0x38(%rsp)
00000000010028e9	movq	%rax, 0x40(%rsp)
00000000010028ee	leaq	0x596eb(%rip), %rax
00000000010028f5	movq	%rax, (%rsp)
00000000010028f9	leaq	0x38(%rsp), %rax
00000000010028fe	movq	%rax, 0x8(%rsp)
0000000001002903	callq	runtime.convT2Estring
0000000001002908	movq	0x18(%rsp), %rax
000000000100290d	movq	0x10(%rsp), %rcx
0000000001002912	movq	%rcx, (%rsp)
0000000001002916	movq	%rax, 0x8(%rsp)
000000000100291b	callq	runtime.gopanic
0000000001002920	ud2
0000000001002922	callq	runtime.morestack_noctxt
0000000001002927	jmp	runtime.nilinterhash
000000000100292c	int3
000000000100292d	int3
000000000100292e	int3
000000000100292f	int3
runtime.memequal0:
0000000001002930	movb	$0x1, 0x18(%rsp)
0000000001002935	retq
0000000001002936	int3
0000000001002937	int3
0000000001002938	int3
0000000001002939	int3
000000000100293a	int3
000000000100293b	int3
000000000100293c	int3
000000000100293d	int3
000000000100293e	int3
000000000100293f	int3
runtime.memequal8:
0000000001002940	movq	0x10(%rsp), %rax
0000000001002945	movzbl	(%rax), %eax
0000000001002948	movq	0x8(%rsp), %rcx
000000000100294d	cmpb	%al, (%rcx)
000000000100294f	sete	0x18(%rsp)
0000000001002954	retq
0000000001002955	int3
0000000001002956	int3
0000000001002957	int3
0000000001002958	int3
0000000001002959	int3
000000000100295a	int3
000000000100295b	int3
000000000100295c	int3
000000000100295d	int3
000000000100295e	int3
000000000100295f	int3
runtime.memequal16:
0000000001002960	movq	0x10(%rsp), %rax
0000000001002965	movzwl	(%rax), %eax
0000000001002968	movq	0x8(%rsp), %rcx
000000000100296d	cmpw	%ax, (%rcx)
0000000001002970	sete	0x18(%rsp)
0000000001002975	retq
0000000001002976	int3
0000000001002977	int3
0000000001002978	int3
0000000001002979	int3
000000000100297a	int3
000000000100297b	int3
000000000100297c	int3
000000000100297d	int3
000000000100297e	int3
000000000100297f	int3
runtime.memequal32:
0000000001002980	movq	0x10(%rsp), %rax
0000000001002985	movl	(%rax), %eax
0000000001002987	movq	0x8(%rsp), %rcx
000000000100298c	cmpl	%eax, (%rcx)
000000000100298e	sete	0x18(%rsp)
0000000001002993	retq
0000000001002994	int3
0000000001002995	int3
0000000001002996	int3
0000000001002997	int3
0000000001002998	int3
0000000001002999	int3
000000000100299a	int3
000000000100299b	int3
000000000100299c	int3
000000000100299d	int3
000000000100299e	int3
000000000100299f	int3
runtime.memequal64:
00000000010029a0	movq	0x10(%rsp), %rax
00000000010029a5	movq	(%rax), %rax
00000000010029a8	movq	0x8(%rsp), %rcx
00000000010029ad	cmpq	%rax, (%rcx)
00000000010029b0	sete	0x18(%rsp)
00000000010029b5	retq
00000000010029b6	int3
00000000010029b7	int3
00000000010029b8	int3
00000000010029b9	int3
00000000010029ba	int3
00000000010029bb	int3
00000000010029bc	int3
00000000010029bd	int3
00000000010029be	int3
00000000010029bf	int3
runtime.memequal128:
00000000010029c0	movq	0x10(%rsp), %rax
00000000010029c5	movq	(%rax), %rcx
00000000010029c8	movq	0x8(%rsp), %rdx
00000000010029cd	cmpq	%rcx, (%rdx)
00000000010029d0	jne	0x10029e2
00000000010029d2	movq	0x8(%rdx), %rcx
00000000010029d6	cmpq	%rcx, 0x8(%rax)
00000000010029da	sete	%al
00000000010029dd	movb	%al, 0x18(%rsp)
00000000010029e1	retq
00000000010029e2	xorl	%eax, %eax
00000000010029e4	jmp	0x10029dd
00000000010029e6	int3
00000000010029e7	int3
00000000010029e8	int3
00000000010029e9	int3
00000000010029ea	int3
00000000010029eb	int3
00000000010029ec	int3
00000000010029ed	int3
00000000010029ee	int3
00000000010029ef	int3
runtime.f32equal:
00000000010029f0	movq	0x8(%rsp), %rax
00000000010029f5	movss	(%rax), %xmm0
00000000010029f9	movq	0x10(%rsp), %rax
00000000010029fe	movss	(%rax), %xmm1
0000000001002a02	ucomiss	%xmm1, %xmm0
0000000001002a05	sete	%cl
0000000001002a08	setnp	%al
0000000001002a0b	andl	%eax, %ecx
0000000001002a0d	movb	%cl, 0x18(%rsp)
0000000001002a11	retq
0000000001002a12	int3
0000000001002a13	int3
0000000001002a14	int3
0000000001002a15	int3
0000000001002a16	int3
0000000001002a17	int3
0000000001002a18	int3
0000000001002a19	int3
0000000001002a1a	int3
0000000001002a1b	int3
0000000001002a1c	int3
0000000001002a1d	int3
0000000001002a1e	int3
0000000001002a1f	int3
runtime.f64equal:
0000000001002a20	movq	0x8(%rsp), %rax
0000000001002a25	movsd	(%rax), %xmm0
0000000001002a29	movq	0x10(%rsp), %rax
0000000001002a2e	movsd	(%rax), %xmm1
0000000001002a32	ucomisd	%xmm1, %xmm0
0000000001002a36	sete	%cl
0000000001002a39	setnp	%al
0000000001002a3c	andl	%eax, %ecx
0000000001002a3e	movb	%cl, 0x18(%rsp)
0000000001002a42	retq
0000000001002a43	int3
0000000001002a44	int3
0000000001002a45	int3
0000000001002a46	int3
0000000001002a47	int3
0000000001002a48	int3
0000000001002a49	int3
0000000001002a4a	int3
0000000001002a4b	int3
0000000001002a4c	int3
0000000001002a4d	int3
0000000001002a4e	int3
0000000001002a4f	int3
runtime.c64equal:
0000000001002a50	movq	0x8(%rsp), %rax
0000000001002a55	movss	0x4(%rax), %xmm0
0000000001002a5a	movss	(%rax), %xmm1
0000000001002a5e	movq	0x10(%rsp), %rax
0000000001002a63	movss	0x4(%rax), %xmm2
0000000001002a68	movss	(%rax), %xmm3
0000000001002a6c	ucomiss	%xmm3, %xmm1
0000000001002a6f	sete	%cl
0000000001002a72	setnp	%al
0000000001002a75	andl	%eax, %ecx
0000000001002a77	ucomiss	%xmm2, %xmm0
0000000001002a7a	sete	%dl
0000000001002a7d	setnp	%al
0000000001002a80	andl	%eax, %edx
0000000001002a82	andl	%edx, %ecx
0000000001002a84	movb	%cl, 0x18(%rsp)
0000000001002a88	retq
0000000001002a89	int3
0000000001002a8a	int3
0000000001002a8b	int3
0000000001002a8c	int3
0000000001002a8d	int3
0000000001002a8e	int3
0000000001002a8f	int3
runtime.c128equal:
0000000001002a90	movq	0x8(%rsp), %rax
0000000001002a95	movsd	0x8(%rax), %xmm0
0000000001002a9a	movsd	(%rax), %xmm1
0000000001002a9e	movq	0x10(%rsp), %rax
0000000001002aa3	movsd	0x8(%rax), %xmm2
0000000001002aa8	movsd	(%rax), %xmm3
0000000001002aac	ucomisd	%xmm3, %xmm1
0000000001002ab0	sete	%cl
0000000001002ab3	setnp	%al
0000000001002ab6	andl	%eax, %ecx
0000000001002ab8	ucomisd	%xmm2, %xmm0
0000000001002abc	sete	%dl
0000000001002abf	setnp	%al
0000000001002ac2	andl	%eax, %edx
0000000001002ac4	andl	%edx, %ecx
0000000001002ac6	movb	%cl, 0x18(%rsp)
0000000001002aca	retq
0000000001002acb	int3
0000000001002acc	int3
0000000001002acd	int3
0000000001002ace	int3
0000000001002acf	int3
runtime.strequal:
0000000001002ad0	movq	%gs:0x30, %rcx
0000000001002ad9	cmpq	0x10(%rcx), %rsp
0000000001002add	jbe	0x1002b34
0000000001002adf	subq	$0x28, %rsp
0000000001002ae3	movq	%rbp, 0x20(%rsp)
0000000001002ae8	leaq	0x20(%rsp), %rbp
0000000001002aed	movq	0x30(%rsp), %rax
0000000001002af2	movq	0x8(%rax), %rcx
0000000001002af6	movq	(%rax), %rax
0000000001002af9	movq	0x38(%rsp), %rdx
0000000001002afe	movq	0x8(%rdx), %rbx
0000000001002b02	movq	(%rdx), %rdx
0000000001002b05	cmpq	%rbx, %rcx
0000000001002b08	je	0x1002b1a
0000000001002b0a	xorl	%eax, %eax
0000000001002b0c	movb	%al, 0x40(%rsp)
0000000001002b10	movq	0x20(%rsp), %rbp
0000000001002b15	addq	$0x28, %rsp
0000000001002b19	retq
0000000001002b1a	movq	%rax, (%rsp)
0000000001002b1e	movq	%rdx, 0x8(%rsp)
0000000001002b23	movq	%rcx, 0x10(%rsp)
0000000001002b28	callq	runtime.memequal
0000000001002b2d	movzbl	0x18(%rsp), %eax
0000000001002b32	jmp	0x1002b0c
0000000001002b34	callq	runtime.morestack_noctxt
0000000001002b39	jmp	runtime.strequal
0000000001002b3b	int3
0000000001002b3c	int3
0000000001002b3d	int3
0000000001002b3e	int3
0000000001002b3f	int3
runtime.interequal:
0000000001002b40	movq	%gs:0x30, %rcx
0000000001002b49	cmpq	0x10(%rcx), %rsp
0000000001002b4d	jbe	0x1002ba4
0000000001002b4f	subq	$0x28, %rsp
0000000001002b53	movq	%rbp, 0x20(%rsp)
0000000001002b58	leaq	0x20(%rsp), %rbp
0000000001002b5d	movq	0x30(%rsp), %rax
0000000001002b62	movq	0x8(%rax), %rcx
0000000001002b66	movq	(%rax), %rax
0000000001002b69	movq	0x38(%rsp), %rdx
0000000001002b6e	movq	0x8(%rdx), %rbx
0000000001002b72	movq	(%rdx), %rdx
0000000001002b75	cmpq	%rdx, %rax
0000000001002b78	je	0x1002b8a
0000000001002b7a	xorl	%eax, %eax
0000000001002b7c	movb	%al, 0x40(%rsp)
0000000001002b80	movq	0x20(%rsp), %rbp
0000000001002b85	addq	$0x28, %rsp
0000000001002b89	retq
0000000001002b8a	movq	%rax, (%rsp)
0000000001002b8e	movq	%rcx, 0x8(%rsp)
0000000001002b93	movq	%rbx, 0x10(%rsp)
0000000001002b98	callq	runtime.ifaceeq
0000000001002b9d	movzbl	0x18(%rsp), %eax
0000000001002ba2	jmp	0x1002b7c
0000000001002ba4	callq	runtime.morestack_noctxt
0000000001002ba9	jmp	runtime.interequal
0000000001002bab	int3
0000000001002bac	int3
0000000001002bad	int3
0000000001002bae	int3
0000000001002baf	int3
runtime.nilinterequal:
0000000001002bb0	movq	%gs:0x30, %rcx
0000000001002bb9	cmpq	0x10(%rcx), %rsp
0000000001002bbd	jbe	0x1002c14
0000000001002bbf	subq	$0x28, %rsp
0000000001002bc3	movq	%rbp, 0x20(%rsp)
0000000001002bc8	leaq	0x20(%rsp), %rbp
0000000001002bcd	movq	0x30(%rsp), %rax
0000000001002bd2	movq	0x8(%rax), %rcx
0000000001002bd6	movq	(%rax), %rax
0000000001002bd9	movq	0x38(%rsp), %rdx
0000000001002bde	movq	0x8(%rdx), %rbx
0000000001002be2	movq	(%rdx), %rdx
0000000001002be5	cmpq	%rdx, %rax
0000000001002be8	je	0x1002bfa
0000000001002bea	xorl	%eax, %eax
0000000001002bec	movb	%al, 0x40(%rsp)
0000000001002bf0	movq	0x20(%rsp), %rbp
0000000001002bf5	addq	$0x28, %rsp
0000000001002bf9	retq
0000000001002bfa	movq	%rax, (%rsp)
0000000001002bfe	movq	%rcx, 0x8(%rsp)
0000000001002c03	movq	%rbx, 0x10(%rsp)
0000000001002c08	callq	runtime.efaceeq
0000000001002c0d	movzbl	0x18(%rsp), %eax
0000000001002c12	jmp	0x1002bec
0000000001002c14	callq	runtime.morestack_noctxt
0000000001002c19	jmp	runtime.nilinterequal
0000000001002c1b	int3
0000000001002c1c	int3
0000000001002c1d	int3
0000000001002c1e	int3
0000000001002c1f	int3
runtime.efaceeq:
0000000001002c20	movq	%gs:0x30, %rcx
0000000001002c29	cmpq	0x10(%rcx), %rsp
0000000001002c2d	jbe	0x1002d4c
0000000001002c33	subq	$0x50, %rsp
0000000001002c37	movq	%rbp, 0x48(%rsp)
0000000001002c3c	leaq	0x48(%rsp), %rbp
0000000001002c41	movq	0x58(%rsp), %rax
0000000001002c46	testq	%rax, %rax
0000000001002c49	je	0x1002cb6
0000000001002c4b	movq	0x18(%rax), %rcx
0000000001002c4f	movq	0x8(%rcx), %rdx
0000000001002c53	testq	%rdx, %rdx
0000000001002c56	je	0x1002cc5
0000000001002c58	movzbl	0x17(%rax), %eax
0000000001002c5c	testb	$0x20, %al
0000000001002c5e	je	0x1002c8b
0000000001002c60	leaq	0x60(%rsp), %rax
0000000001002c65	movq	%rax, (%rsp)
0000000001002c69	leaq	0x68(%rsp), %rax
0000000001002c6e	movq	%rax, 0x8(%rsp)
0000000001002c73	movq	(%rdx), %rax
0000000001002c76	callq	*%rax
0000000001002c78	movzbl	0x10(%rsp), %eax
0000000001002c7d	movb	%al, 0x70(%rsp)
0000000001002c81	movq	0x48(%rsp), %rbp
0000000001002c86	addq	$0x50, %rsp
0000000001002c8a	retq
0000000001002c8b	movq	0x60(%rsp), %rax
0000000001002c90	movq	%rax, (%rsp)
0000000001002c94	movq	0x68(%rsp), %rax
0000000001002c99	movq	%rax, 0x8(%rsp)
0000000001002c9e	movq	(%rdx), %rax
0000000001002ca1	callq	*%rax
0000000001002ca3	movzbl	0x10(%rsp), %eax
0000000001002ca8	movb	%al, 0x70(%rsp)
0000000001002cac	movq	0x48(%rsp), %rbp
0000000001002cb1	addq	$0x50, %rsp
0000000001002cb5	retq
0000000001002cb6	movb	$0x1, 0x70(%rsp)
0000000001002cbb	movq	0x48(%rsp), %rbp
0000000001002cc0	addq	$0x50, %rsp
0000000001002cc4	retq
0000000001002cc5	movq	%rax, (%rsp)
0000000001002cc9	callq	"runtime.(*_type).string"
0000000001002cce	movq	0x10(%rsp), %rax
0000000001002cd3	movq	0x8(%rsp), %rcx
0000000001002cd8	movq	$0x0, (%rsp)
0000000001002ce0	leaq	0x6a0cc(%rip), %rdx
0000000001002ce7	movq	%rdx, 0x8(%rsp)
0000000001002cec	movq	$0x1c, 0x10(%rsp)
0000000001002cf5	movq	%rcx, 0x18(%rsp)
0000000001002cfa	movq	%rax, 0x20(%rsp)
0000000001002cff	callq	runtime.concatstring2
0000000001002d04	movq	0x30(%rsp), %rax
0000000001002d09	movq	0x28(%rsp), %rcx
0000000001002d0e	movq	%rcx, 0x38(%rsp)
0000000001002d13	movq	%rax, 0x40(%rsp)
0000000001002d18	leaq	0x592c1(%rip), %rax
0000000001002d1f	movq	%rax, (%rsp)
0000000001002d23	leaq	0x38(%rsp), %rax
0000000001002d28	movq	%rax, 0x8(%rsp)
0000000001002d2d	callq	runtime.convT2Estring
0000000001002d32	movq	0x18(%rsp), %rax
0000000001002d37	movq	0x10(%rsp), %rcx
0000000001002d3c	movq	%rcx, (%rsp)
0000000001002d40	movq	%rax, 0x8(%rsp)
0000000001002d45	callq	runtime.gopanic
0000000001002d4a	ud2
0000000001002d4c	callq	runtime.morestack_noctxt
0000000001002d51	jmp	runtime.efaceeq
0000000001002d56	int3
0000000001002d57	int3
0000000001002d58	int3
0000000001002d59	int3
0000000001002d5a	int3
0000000001002d5b	int3
0000000001002d5c	int3
0000000001002d5d	int3
0000000001002d5e	int3
0000000001002d5f	int3
runtime.ifaceeq:
0000000001002d60	movq	%gs:0x30, %rcx
0000000001002d69	cmpq	0x10(%rcx), %rsp
0000000001002d6d	jbe	0x1002e90
0000000001002d73	subq	$0x50, %rsp
0000000001002d77	movq	%rbp, 0x48(%rsp)
0000000001002d7c	leaq	0x48(%rsp), %rbp
0000000001002d81	movq	0x58(%rsp), %rax
0000000001002d86	testq	%rax, %rax
0000000001002d89	je	0x1002dfa
0000000001002d8b	movq	0x8(%rax), %rax
0000000001002d8f	movq	0x18(%rax), %rcx
0000000001002d93	movq	0x8(%rcx), %rdx
0000000001002d97	testq	%rdx, %rdx
0000000001002d9a	je	0x1002e09
0000000001002d9c	movzbl	0x17(%rax), %eax
0000000001002da0	testb	$0x20, %al
0000000001002da2	je	0x1002dcf
0000000001002da4	leaq	0x60(%rsp), %rax
0000000001002da9	movq	%rax, (%rsp)
0000000001002dad	leaq	0x68(%rsp), %rax
0000000001002db2	movq	%rax, 0x8(%rsp)
0000000001002db7	movq	(%rdx), %rax
0000000001002dba	callq	*%rax
0000000001002dbc	movzbl	0x10(%rsp), %eax
0000000001002dc1	movb	%al, 0x70(%rsp)
0000000001002dc5	movq	0x48(%rsp), %rbp
0000000001002dca	addq	$0x50, %rsp
0000000001002dce	retq
0000000001002dcf	movq	0x60(%rsp), %rax
0000000001002dd4	movq	%rax, (%rsp)
0000000001002dd8	movq	0x68(%rsp), %rax
0000000001002ddd	movq	%rax, 0x8(%rsp)
0000000001002de2	movq	(%rdx), %rax
0000000001002de5	callq	*%rax
0000000001002de7	movzbl	0x10(%rsp), %eax
0000000001002dec	movb	%al, 0x70(%rsp)
0000000001002df0	movq	0x48(%rsp), %rbp
0000000001002df5	addq	$0x50, %rsp
0000000001002df9	retq
0000000001002dfa	movb	$0x1, 0x70(%rsp)
0000000001002dff	movq	0x48(%rsp), %rbp
0000000001002e04	addq	$0x50, %rsp
0000000001002e08	retq
0000000001002e09	movq	%rax, (%rsp)
0000000001002e0d	callq	"runtime.(*_type).string"
0000000001002e12	movq	0x10(%rsp), %rax
0000000001002e17	movq	0x8(%rsp), %rcx
0000000001002e1c	movq	$0x0, (%rsp)
0000000001002e24	leaq	0x69f88(%rip), %rdx
0000000001002e2b	movq	%rdx, 0x8(%rsp)
0000000001002e30	movq	$0x1c, 0x10(%rsp)
0000000001002e39	movq	%rcx, 0x18(%rsp)
0000000001002e3e	movq	%rax, 0x20(%rsp)
0000000001002e43	callq	runtime.concatstring2
0000000001002e48	movq	0x30(%rsp), %rax
0000000001002e4d	movq	0x28(%rsp), %rcx
0000000001002e52	movq	%rcx, 0x38(%rsp)
0000000001002e57	movq	%rax, 0x40(%rsp)
0000000001002e5c	leaq	0x5917d(%rip), %rax
0000000001002e63	movq	%rax, (%rsp)
0000000001002e67	leaq	0x38(%rsp), %rax
0000000001002e6c	movq	%rax, 0x8(%rsp)
0000000001002e71	callq	runtime.convT2Estring
0000000001002e76	movq	0x18(%rsp), %rax
0000000001002e7b	movq	0x10(%rsp), %rcx
0000000001002e80	movq	%rcx, (%rsp)
0000000001002e84	movq	%rax, 0x8(%rsp)
0000000001002e89	callq	runtime.gopanic
0000000001002e8e	ud2
0000000001002e90	callq	runtime.morestack_noctxt
0000000001002e95	jmp	runtime.ifaceeq
0000000001002e9a	int3
0000000001002e9b	int3
0000000001002e9c	int3
0000000001002e9d	int3
0000000001002e9e	int3
0000000001002e9f	int3
runtime.alginit:
0000000001002ea0	movq	%gs:0x30, %rcx
0000000001002ea9	cmpq	0x10(%rcx), %rsp
0000000001002ead	jbe	0x1002f68
0000000001002eb3	subq	$0x20, %rsp
0000000001002eb7	movq	%rbp, 0x18(%rsp)
0000000001002ebc	leaq	0x18(%rsp), %rbp
0000000001002ec1	leaq	0xd2018(%rip), %rax
0000000001002ec8	cmpb	$0x0, (%rax)
0000000001002ecb	je	0x1002ee5
0000000001002ecd	leaq	0xd2019(%rip), %rax
0000000001002ed4	cmpb	$0x0, (%rax)
0000000001002ed7	je	0x1002ee5
0000000001002ed9	leaq	0xd200e(%rip), %rax
0000000001002ee0	cmpb	$0x0, (%rax)
0000000001002ee3	jne	0x1002f59
0000000001002ee5	leaq	runtime.hashkey(%rip), %rax
0000000001002eec	movq	%rax, (%rsp)
0000000001002ef0	movq	$0x20, 0x8(%rsp)
0000000001002ef9	movq	$0x20, 0x10(%rsp)
0000000001002f02	callq	runtime.getRandomData
0000000001002f07	movq	runtime.hashkey(%rip), %rax
0000000001002f0e	orq	$0x1, %rax
0000000001002f12	movq	%rax, runtime.hashkey(%rip)
0000000001002f19	movq	0xd1d28(%rip), %rax
0000000001002f20	orq	$0x1, %rax
0000000001002f24	movq	%rax, 0xd1d1d(%rip)
0000000001002f2b	movq	0xd1d1e(%rip), %rax
0000000001002f32	orq	$0x1, %rax
0000000001002f36	movq	%rax, 0xd1d13(%rip)
0000000001002f3d	movq	0xd1d14(%rip), %rax
0000000001002f44	orq	$0x1, %rax
0000000001002f48	movq	%rax, 0xd1d09(%rip)
0000000001002f4f	movq	0x18(%rsp), %rbp
0000000001002f54	addq	$0x20, %rsp
0000000001002f58	retq
0000000001002f59	callq	runtime.initAlgAES
0000000001002f5e	movq	0x18(%rsp), %rbp
0000000001002f63	addq	$0x20, %rsp
0000000001002f67	retq
0000000001002f68	callq	runtime.morestack_noctxt
0000000001002f6d	jmp	runtime.alginit
0000000001002f72	int3
0000000001002f73	int3
0000000001002f74	int3
0000000001002f75	int3
0000000001002f76	int3
0000000001002f77	int3
0000000001002f78	int3
0000000001002f79	int3
0000000001002f7a	int3
0000000001002f7b	int3
0000000001002f7c	int3
0000000001002f7d	int3
0000000001002f7e	int3
0000000001002f7f	int3
runtime.initAlgAES:
0000000001002f80	movq	%gs:0x30, %rcx
0000000001002f89	cmpq	0x10(%rcx), %rsp
0000000001002f8d	jbe	0x1003042
0000000001002f93	subq	$0x20, %rsp
0000000001002f97	movq	%rbp, 0x18(%rsp)
0000000001002f9c	leaq	0x18(%rsp), %rbp
0000000001002fa1	movb	$0x1, runtime.useAVXmemmove(%rip)
0000000001002fa8	cmpl	$0x0, 0xd1c81(%rip)
0000000001002faf	jne	0x1003007
0000000001002fb1	leaq	0x6bdb8(%rip), %rax
0000000001002fb8	movq	%rax, 0xb40c1(%rip)
0000000001002fbf	leaq	0x6bdb2(%rip), %rax
0000000001002fc6	movq	%rax, 0xb40c3(%rip)
0000000001002fcd	leaq	0x6bdac(%rip), %rax
0000000001002fd4	movq	%rax, 0xb40d5(%rip)
0000000001002fdb	leaq	runtime.aeskeysched(%rip), %rax
0000000001002fe2	movq	%rax, (%rsp)
0000000001002fe6	movq	$0x80, 0x8(%rsp)
0000000001002fef	movq	$0x80, 0x10(%rsp)
0000000001002ff8	callq	runtime.getRandomData
0000000001002ffd	movq	0x18(%rsp), %rbp
0000000001003002	addq	$0x20, %rsp
0000000001003006	retq
0000000001003007	leaq	0xb4072(%rip), %rdi
000000000100300e	leaq	0x6bd5b(%rip), %rax
0000000001003015	callq	runtime.gcWriteBarrier
000000000100301a	leaq	0xb406f(%rip), %rdi
0000000001003021	leaq	0x6bd50(%rip), %rax
0000000001003028	callq	runtime.gcWriteBarrier
000000000100302d	leaq	0xb407c(%rip), %rdi
0000000001003034	leaq	0x6bd45(%rip), %rax
000000000100303b	callq	runtime.gcWriteBarrier
0000000001003040	jmp	0x1002fdb
0000000001003042	callq	runtime.morestack_noctxt
0000000001003047	jmp	runtime.initAlgAES
000000000100304c	int3
000000000100304d	int3
000000000100304e	int3
000000000100304f	int3
runtime.atomicwb:
0000000001003050	subq	$0x18, %rsp
0000000001003054	movq	%rbp, 0x10(%rsp)
0000000001003059	leaq	0x10(%rsp), %rbp
000000000100305e	movq	%gs:0x30, %rax
0000000001003067	movq	0x30(%rax), %rax
000000000100306b	movq	0xd0(%rax), %rax
0000000001003072	testb	%al, (%rax)
0000000001003074	leaq	0x1290(%rax), %rcx
000000000100307b	testb	%al, (%rcx)
000000000100307d	movq	0x1290(%rax), %rcx
0000000001003084	movq	0x20(%rsp), %rdx
0000000001003089	movq	(%rdx), %rbx
000000000100308c	movq	0x28(%rsp), %rsi
0000000001003091	movq	%rsi, %rdi
0000000001003094	movq	%rbx, (%rcx)
0000000001003097	movq	%rsi, 0x8(%rcx)
000000000100309b	movq	0x1290(%rax), %rcx
00000000010030a2	addq	$0x10, %rcx
00000000010030a6	movq	%rcx, 0x1290(%rax)
00000000010030ad	movq	0x1298(%rax), %rax
00000000010030b4	cmpq	%rax, %rcx
00000000010030b7	je	0x10030c3
00000000010030b9	movq	0x10(%rsp), %rbp
00000000010030be	addq	$0x18, %rsp
00000000010030c2	retq
00000000010030c3	movq	%rdx, (%rsp)
00000000010030c7	movq	%rdi, 0x8(%rsp)
00000000010030cc	callq	runtime.wbBufFlush
00000000010030d1	jmp	0x10030b9
00000000010030d3	int3
00000000010030d4	int3
00000000010030d5	int3
00000000010030d6	int3
00000000010030d7	int3
00000000010030d8	int3
00000000010030d9	int3
00000000010030da	int3
00000000010030db	int3
00000000010030dc	int3
00000000010030dd	int3
00000000010030de	int3
00000000010030df	int3
runtime.atomicstorep:
00000000010030e0	subq	$0x18, %rsp
00000000010030e4	movq	%rbp, 0x10(%rsp)
00000000010030e9	leaq	0x10(%rsp), %rbp
00000000010030ee	leaq	runtime.writeBarrier(%rip), %rax
00000000010030f5	cmpb	$0x0, (%rax)
00000000010030f8	jne	0x1003111
00000000010030fa	movq	0x28(%rsp), %rax
00000000010030ff	movq	0x20(%rsp), %rcx
0000000001003104	xchgq	%rax, (%rcx)
0000000001003107	movq	0x10(%rsp), %rbp
000000000100310c	addq	$0x18, %rsp
0000000001003110	retq
0000000001003111	movq	0x20(%rsp), %rax
0000000001003116	movq	%rax, (%rsp)
000000000100311a	movq	0x28(%rsp), %rcx
000000000100311f	movq	%rcx, 0x8(%rsp)
0000000001003124	callq	runtime.atomicwb
0000000001003129	jmp	0x10030fa
000000000100312b	int3
000000000100312c	int3
000000000100312d	int3
000000000100312e	int3
000000000100312f	int3
runtime.casp:
0000000001003130	subq	$0x18, %rsp
0000000001003134	movq	%rbp, 0x10(%rsp)
0000000001003139	leaq	0x10(%rsp), %rbp
000000000100313e	leaq	runtime.writeBarrier(%rip), %rcx
0000000001003145	cmpb	$0x0, (%rcx)
0000000001003148	jne	0x100316f
000000000100314a	movq	0x28(%rsp), %rax
000000000100314f	movq	0x20(%rsp), %rcx
0000000001003154	movq	0x30(%rsp), %rdx
0000000001003159	lock
000000000100315a	cmpxchgq	%rdx, (%rcx)
000000000100315e	sete	%cl
0000000001003161	movb	%cl, 0x38(%rsp)
0000000001003165	movq	0x10(%rsp), %rbp
000000000100316a	addq	$0x18, %rsp
000000000100316e	retq
000000000100316f	movq	0x20(%rsp), %rax
0000000001003174	movq	%rax, (%rsp)
0000000001003178	movq	0x30(%rsp), %rcx
000000000100317d	movq	%rcx, 0x8(%rsp)
0000000001003182	callq	runtime.atomicwb
0000000001003187	jmp	0x100314a
0000000001003189	int3
000000000100318a	int3
000000000100318b	int3
000000000100318c	int3
000000000100318d	int3
000000000100318e	int3
000000000100318f	int3
runtime.cgocall:
0000000001003190	subq	$0x30, %rsp
0000000001003194	movq	%rbp, 0x28(%rsp)
0000000001003199	leaq	0x28(%rsp), %rbp
000000000100319e	leaq	runtime.iscgo(%rip), %rax
00000000010031a5	cmpb	$0x0, (%rax)
00000000010031a8	je	0x100325f
00000000010031ae	movq	0x38(%rsp), %rax
00000000010031b3	testq	%rax, %rax
00000000010031b6	je	0x1003244
00000000010031bc	movq	%gs:0x30, %rax
00000000010031c5	movq	0x30(%rax), %rax
00000000010031c9	movq	%rax, 0x20(%rsp)
00000000010031ce	incq	0x128(%rax)
00000000010031d5	incl	0x130(%rax)
00000000010031db	movq	0x138(%rax), %rcx
00000000010031e2	movq	$0x0, (%rcx)
00000000010031e9	callq	runtime.entersyscall
00000000010031ee	movq	0x20(%rsp), %rax
00000000010031f3	movb	$0x1, 0x115(%rax)
00000000010031fa	movq	0x38(%rsp), %rcx
00000000010031ff	movq	%rcx, (%rsp)
0000000001003203	movq	0x40(%rsp), %rdx
0000000001003208	movq	%rdx, 0x8(%rsp)
000000000100320d	callq	runtime.asmcgocall
0000000001003212	movl	0x10(%rsp), %eax
0000000001003216	movl	%eax, 0x1c(%rsp)
000000000100321a	movq	0x20(%rsp), %rcx
000000000100321f	movb	$0x0, 0x115(%rcx)
0000000001003226	addl	$-0x1, 0x130(%rcx)
000000000100322d	callq	runtime.exitsyscall
0000000001003232	movl	0x1c(%rsp), %eax
0000000001003236	movl	%eax, 0x48(%rsp)
000000000100323a	movq	0x28(%rsp), %rbp
000000000100323f	addq	$0x30, %rsp
0000000001003243	retq
0000000001003244	leaq	0x67f47(%rip), %rax
000000000100324b	movq	%rax, (%rsp)
000000000100324f	movq	$0xb, 0x8(%rsp)
0000000001003258	callq	runtime.throw
000000000100325d	ud2
000000000100325f	leaq	0x6896b(%rip), %rax
0000000001003266	movq	%rax, (%rsp)
000000000100326a	movq	$0x13, 0x8(%rsp)
0000000001003273	callq	runtime.throw
0000000001003278	ud2
000000000100327a	int3
000000000100327b	int3
000000000100327c	int3
000000000100327d	int3
000000000100327e	int3
000000000100327f	int3
runtime.cgoIsGoPointer:
0000000001003280	subq	$0x18, %rsp
0000000001003284	movq	%rbp, 0x10(%rsp)
0000000001003289	leaq	0x10(%rsp), %rbp
000000000100328e	movq	0x20(%rsp), %rax
0000000001003293	testq	%rax, %rax
0000000001003296	je	0x100335f
000000000100329c	movq	%rax, (%rsp)
00000000010032a0	callq	runtime.inHeapOrStack
00000000010032a5	leaq	0x8(%rsp), %rax
00000000010032aa	cmpb	$0x0, (%rax)
00000000010032ad	jne	0x1003350
00000000010032b3	movq	runtime.modulesSlice(%rip), %rax
00000000010032ba	testq	%rax, %rax
00000000010032bd	je	0x1003347
00000000010032c3	movq	0x8(%rax), %rcx
00000000010032c7	movq	(%rax), %rax
00000000010032ca	movq	0x20(%rsp), %rdx
00000000010032cf	xorl	%ebx, %ebx
00000000010032d1	jmp	0x10032d9
00000000010032d3	incq	%rbx
00000000010032d6	movq	%r9, %rdx
00000000010032d9	cmpq	%rcx, %rbx
00000000010032dc	jge	0x1003338
00000000010032de	movq	(%rax,%rbx,8), %rsi
00000000010032e2	movq	0x80(%rsi), %rdi
00000000010032e9	movq	0x88(%rsi), %r8
00000000010032f0	movq	%rdx, %r9
00000000010032f3	cmpq	%rdx, %rdi
00000000010032f6	ja	0x1003334
00000000010032f8	cmpq	%r8, %rdx
00000000010032fb	setb	%dil
00000000010032ff	testb	%dil, %dil
0000000001003302	jne	0x1003321
0000000001003304	movq	0x90(%rsi), %rdi
000000000100330b	movq	0x98(%rsi), %rsi
0000000001003312	cmpq	%rdx, %rdi
0000000001003315	ja	0x1003330
0000000001003317	cmpq	%rsi, %rdx
000000000100331a	setb	%dl
000000000100331d	testb	%dl, %dl
000000000100331f	je	0x10032d3
0000000001003321	movb	$0x1, 0x28(%rsp)
0000000001003326	movq	0x10(%rsp), %rbp
000000000100332b	addq	$0x18, %rsp
000000000100332f	retq
0000000001003330	xorl	%edx, %edx
0000000001003332	jmp	0x100331d
0000000001003334	xorl	%edi, %edi
0000000001003336	jmp	0x10032ff
0000000001003338	movb	$0x0, 0x28(%rsp)
000000000100333d	movq	0x10(%rsp), %rbp
0000000001003342	addq	$0x18, %rsp
0000000001003346	retq
0000000001003347	xorl	%ecx, %ecx
0000000001003349	xorl	%eax, %eax
000000000100334b	jmp	0x10032ca
0000000001003350	movb	$0x1, 0x28(%rsp)
0000000001003355	movq	0x10(%rsp), %rbp
000000000100335a	addq	$0x18, %rsp
000000000100335e	retq
000000000100335f	movb	$0x0, 0x28(%rsp)
0000000001003364	movq	0x10(%rsp), %rbp
0000000001003369	addq	$0x18, %rsp
000000000100336d	retq
000000000100336e	int3
000000000100336f	int3
runtime.cgoCheckWriteBarrier:
0000000001003370	subq	$0x30, %rsp
0000000001003374	movq	%rbp, 0x28(%rsp)
0000000001003379	leaq	0x28(%rsp), %rbp
000000000100337e	movq	0x40(%rsp), %rax
0000000001003383	movq	%rax, (%rsp)
0000000001003387	callq	runtime.cgoIsGoPointer
000000000100338c	leaq	0x8(%rsp), %rax
0000000001003391	cmpb	$0x0, (%rax)
0000000001003394	je	0x1003444
000000000100339a	movq	0x38(%rsp), %rax
000000000100339f	movq	%rax, (%rsp)
00000000010033a3	callq	runtime.cgoIsGoPointer
00000000010033a8	leaq	0x8(%rsp), %rax
00000000010033ad	cmpb	$0x0, (%rax)
00000000010033b0	jne	0x100343a
00000000010033b6	movq	%gs:0x30, %rax
00000000010033bf	movq	0x30(%rax), %rcx
00000000010033c3	movq	(%rcx), %rdx
00000000010033c6	cmpq	%rax, %rdx
00000000010033c9	jne	0x10033d5
00000000010033cb	movq	0x28(%rsp), %rbp
00000000010033d0	addq	$0x30, %rsp
00000000010033d4	retq
00000000010033d5	movq	0x50(%rcx), %rdx
00000000010033d9	cmpq	%rax, %rdx
00000000010033dc	je	0x10033cb
00000000010033de	cmpl	$0x0, 0xe8(%rcx)
00000000010033e5	je	0x10033f1
00000000010033e7	movq	0x28(%rsp), %rbp
00000000010033ec	addq	$0x30, %rsp
00000000010033f0	retq
00000000010033f1	xorps	%xmm0, %xmm0
00000000010033f4	movups	%xmm0, 0x10(%rsp)
00000000010033f9	movq	$0x0, 0x20(%rsp)
0000000001003402	leaq	runtime.cgoCheckWriteBarrier.func1(%rip), %rax
0000000001003409	movq	%rax, 0x10(%rsp)
000000000100340e	movq	0x40(%rsp), %rax
0000000001003413	movq	%rax, 0x18(%rsp)
0000000001003418	movq	0x38(%rsp), %rax
000000000100341d	movq	%rax, 0x20(%rsp)
0000000001003422	leaq	0x10(%rsp), %rax
0000000001003427	movq	%rax, (%rsp)
000000000100342b	callq	runtime.systemstack
0000000001003430	movq	0x28(%rsp), %rbp
0000000001003435	addq	$0x30, %rsp
0000000001003439	retq
000000000100343a	movq	0x28(%rsp), %rbp
000000000100343f	addq	$0x30, %rsp
0000000001003443	retq
0000000001003444	movq	0x28(%rsp), %rbp
0000000001003449	addq	$0x30, %rsp
000000000100344d	retq
000000000100344e	int3
000000000100344f	int3
runtime.cgoCheckMemmove:
0000000001003450	subq	$0x28, %rsp
0000000001003454	movq	%rbp, 0x20(%rsp)
0000000001003459	leaq	0x20(%rsp), %rbp
000000000100345e	movq	0x30(%rsp), %rax
0000000001003463	movzbl	0x17(%rax), %ecx
0000000001003467	testb	$-0x80, %cl
000000000100346a	jne	0x10034e6
000000000100346c	movq	0x40(%rsp), %rax
0000000001003471	movq	%rax, (%rsp)
0000000001003475	callq	runtime.cgoIsGoPointer
000000000100347a	leaq	0x8(%rsp), %rax
000000000100347f	cmpb	$0x0, (%rax)
0000000001003482	je	0x10034dc
0000000001003484	movq	0x38(%rsp), %rax
0000000001003489	movq	%rax, (%rsp)
000000000100348d	callq	runtime.cgoIsGoPointer
0000000001003492	leaq	0x8(%rsp), %rax
0000000001003497	cmpb	$0x0, (%rax)
000000000100349a	je	0x10034a6
000000000100349c	movq	0x20(%rsp), %rbp
00000000010034a1	addq	$0x28, %rsp
00000000010034a5	retq
00000000010034a6	movq	0x30(%rsp), %rax
00000000010034ab	movq	%rax, (%rsp)
00000000010034af	movq	0x40(%rsp), %rax
00000000010034b4	movq	%rax, 0x8(%rsp)
00000000010034b9	movq	0x48(%rsp), %rax
00000000010034be	movq	%rax, 0x10(%rsp)
00000000010034c3	movq	0x50(%rsp), %rax
00000000010034c8	movq	%rax, 0x18(%rsp)
00000000010034cd	callq	runtime.cgoCheckTypedBlock
00000000010034d2	movq	0x20(%rsp), %rbp
00000000010034d7	addq	$0x28, %rsp
00000000010034db	retq
00000000010034dc	movq	0x20(%rsp), %rbp
00000000010034e1	addq	$0x28, %rsp
00000000010034e5	retq
00000000010034e6	movq	0x20(%rsp), %rbp
00000000010034eb	addq	$0x28, %rsp
00000000010034ef	retq
runtime.cgoCheckSliceCopy:
00000000010034f0	subq	$0x38, %rsp
00000000010034f4	movq	%rbp, 0x30(%rsp)
00000000010034f9	leaq	0x30(%rsp), %rbp
00000000010034fe	movq	0x40(%rsp), %rax
0000000001003503	movzbl	0x17(%rax), %ecx
0000000001003507	testb	$-0x80, %cl
000000000100350a	jne	0x10035be
0000000001003510	movq	0x60(%rsp), %rax
0000000001003515	movq	%rax, (%rsp)
0000000001003519	callq	runtime.cgoIsGoPointer
000000000100351e	leaq	0x8(%rsp), %rax
0000000001003523	cmpb	$0x0, (%rax)
0000000001003526	je	0x10035b4
000000000100352c	movq	0x48(%rsp), %rax
0000000001003531	movq	%rax, (%rsp)
0000000001003535	callq	runtime.cgoIsGoPointer
000000000100353a	leaq	0x8(%rsp), %rax
000000000100353f	cmpb	$0x0, (%rax)
0000000001003542	jne	0x10035aa
0000000001003544	xorl	%eax, %eax
0000000001003546	movq	0x60(%rsp), %rcx
000000000100354b	jmp	0x1003596
000000000100354d	movq	%rax, 0x20(%rsp)
0000000001003552	movq	%rcx, 0x28(%rsp)
0000000001003557	movq	0x40(%rsp), %rax
000000000100355c	movq	(%rax), %rdx
000000000100355f	movq	%rdx, 0x18(%rsp)
0000000001003564	movq	%rax, (%rsp)
0000000001003568	movq	%rcx, 0x8(%rsp)
000000000100356d	movq	$0x0, 0x10(%rsp)
0000000001003576	callq	runtime.cgoCheckTypedBlock
000000000100357b	movq	0x20(%rsp), %rax
0000000001003580	incq	%rax
0000000001003583	movq	0x40(%rsp), %rcx
0000000001003588	movq	(%rcx), %rdx
000000000100358b	movq	0x28(%rsp), %rbx
0000000001003590	addq	%rbx, %rdx
0000000001003593	movq	%rdx, %rcx
0000000001003596	movq	0x78(%rsp), %rdx
000000000100359b	cmpq	%rdx, %rax
000000000100359e	jl	0x100354d
00000000010035a0	movq	0x30(%rsp), %rbp
00000000010035a5	addq	$0x38, %rsp
00000000010035a9	retq
00000000010035aa	movq	0x30(%rsp), %rbp
00000000010035af	addq	$0x38, %rsp
00000000010035b3	retq
00000000010035b4	movq	0x30(%rsp), %rbp
00000000010035b9	addq	$0x38, %rsp
00000000010035bd	retq
00000000010035be	movq	0x30(%rsp), %rbp
00000000010035c3	addq	$0x38, %rsp
00000000010035c7	retq
00000000010035c8	int3
00000000010035c9	int3
00000000010035ca	int3
00000000010035cb	int3
00000000010035cc	int3
00000000010035cd	int3
00000000010035ce	int3
00000000010035cf	int3
runtime.cgoCheckTypedBlock:
00000000010035d0	subq	$0x80, %rsp
00000000010035d7	movq	%rbp, 0x78(%rsp)
00000000010035dc	leaq	0x78(%rsp), %rbp
00000000010035e1	movq	0x88(%rsp), %rax
00000000010035e9	movq	0x8(%rax), %rcx
00000000010035ed	movq	0x98(%rsp), %rdx
00000000010035f5	cmpq	%rdx, %rcx
00000000010035f8	jbe	0x1003925
00000000010035fe	subq	%rdx, %rcx
0000000001003601	movzbl	0x17(%rax), %ebx
0000000001003605	movq	0xa0(%rsp), %rsi
000000000100360d	cmpq	%rcx, %rsi
0000000001003610	cmovaq	%rcx, %rsi
0000000001003614	testb	$0x40, %bl
0000000001003617	je	0x10038f4
000000000100361d	movq	runtime.modulesSlice(%rip), %rcx
0000000001003624	testq	%rcx, %rcx
0000000001003627	je	0x10038eb
000000000100362d	movq	0x8(%rcx), %rbx
0000000001003631	movq	(%rcx), %rcx
0000000001003634	movq	0x90(%rsp), %rdi
000000000100363c	xorl	%r8d, %r8d
000000000100363f	jmp	0x1003647
0000000001003641	incq	%r8
0000000001003644	movq	%r12, %rdi
0000000001003647	cmpq	%rbx, %r8
000000000100364a	jge	0x1003720
0000000001003650	movq	(%rcx,%r8,8), %r9
0000000001003654	movq	0x80(%r9), %r10
000000000100365b	movq	0x88(%r9), %r11
0000000001003662	movq	%rdi, %r12
0000000001003665	cmpq	%rdi, %r10
0000000001003668	ja	0x1003718
000000000100366e	cmpq	%r11, %rdi
0000000001003671	setb	%r11b
0000000001003675	testb	%r11b, %r11b
0000000001003678	jne	0x10036db
000000000100367a	movq	0x90(%r9), %r10
0000000001003681	movq	0x98(%r9), %r11
0000000001003688	cmpq	%rdi, %r10
000000000100368b	ja	0x10036d6
000000000100368d	cmpq	%r11, %rdi
0000000001003690	setb	%r11b
0000000001003694	testb	%r11b, %r11b
0000000001003697	je	0x1003641
0000000001003699	movq	0x1a8(%r9), %rax
00000000010036a0	movq	%rax, 0x8(%rsp)
00000000010036a5	movq	%r10, %rax
00000000010036a8	subq	%rdi, %r10
00000000010036ab	leaq	(%r10,%r12), %rcx
00000000010036af	movq	%rcx, (%rsp)
00000000010036b3	subq	%rax, %rdi
00000000010036b6	leaq	(%rdi,%rdx), %rax
00000000010036ba	movq	%rax, 0x10(%rsp)
00000000010036bf	movq	%rsi, 0x18(%rsp)
00000000010036c4	callq	runtime.cgoCheckBits
00000000010036c9	movq	0x78(%rsp), %rbp
00000000010036ce	addq	$0x80, %rsp
00000000010036d5	retq
00000000010036d6	xorl	%r11d, %r11d
00000000010036d9	jmp	0x1003694
00000000010036db	movq	0x198(%r9), %rax
00000000010036e2	movq	%rax, 0x8(%rsp)
00000000010036e7	movq	%r10, %rax
00000000010036ea	subq	%rdi, %r10
00000000010036ed	leaq	(%r10,%r12), %rcx
00000000010036f1	movq	%rcx, (%rsp)
00000000010036f5	subq	%rax, %rdi
00000000010036f8	leaq	(%rdi,%rdx), %rax
00000000010036fc	movq	%rax, 0x10(%rsp)
0000000001003701	movq	%rsi, 0x18(%rsp)
0000000001003706	callq	runtime.cgoCheckBits
000000000100370b	movq	0x78(%rsp), %rbp
0000000001003710	addq	$0x80, %rsp
0000000001003717	retq
0000000001003718	xorl	%r11d, %r11d
000000000100371b	jmp	0x1003675
0000000001003720	movq	0xbb071(%rip), %rcx
0000000001003727	testb	%al, (%rcx)
0000000001003729	movq	%rdi, %rbx
000000000100372c	movabsq	$0x800000000000, %r8
0000000001003736	addq	%rdi, %r8
0000000001003739	shrq	$0x1a, %r8
000000000100373d	cmpq	$0x400000, %r8
0000000001003744	jae	0x100394d
000000000100374a	movq	(%rcx,%r8,8), %rcx
000000000100374e	movq	%rdi, %r9
0000000001003751	shrq	$0xd, %rdi
0000000001003755	andq	$0x1fff, %rdi
000000000100375c	movq	0x200000(%rcx,%rdi,8), %rdi
0000000001003764	testb	%al, (%rcx)
0000000001003766	cmpb	$0x2, 0x64(%rdi)
000000000100376a	je	0x100389a
0000000001003770	movq	%rsi, 0xa0(%rsp)
0000000001003778	movq	%r9, %rax
000000000100377b	shrq	$0x5, %r9
000000000100377f	andq	$0x1fffff, %r9
0000000001003786	leaq	(%rcx,%r9), %rdi
000000000100378a	shrq	$0x3, %rax
000000000100378e	andq	$0x3, %rax
0000000001003792	addq	$0x1fffff, %rcx
0000000001003799	xorl	%r9d, %r9d
000000000100379c	jmp	0x10037a2
000000000100379e	addq	$0x8, %r9
00000000010037a2	leaq	(%rsi,%rdx), %r10
00000000010037a6	cmpq	%r10, %r9
00000000010037a9	jae	0x100388d
00000000010037af	movq	%r9, 0x38(%rsp)
00000000010037b4	movzbl	(%rdi), %r10d
00000000010037b8	cmpq	%rdx, %r9
00000000010037bb	jb	0x10037c3
00000000010037bd	btl	%eax, %r10d
00000000010037c1	jb	0x1003824
00000000010037c3	cmpl	$0x3, %eax
00000000010037c6	jae	0x10037cc
00000000010037c8	incl	%eax
00000000010037ca	jmp	0x100379e
00000000010037cc	cmpq	%rcx, %rdi
00000000010037cf	je	0x10037d8
00000000010037d1	incq	%rdi
00000000010037d4	xorl	%eax, %eax
00000000010037d6	jmp	0x100379e
00000000010037d8	movq	%rdi, (%rsp)
00000000010037dc	movl	%eax, 0x8(%rsp)
00000000010037e0	movl	%r8d, 0xc(%rsp)
00000000010037e5	movq	%rcx, 0x10(%rsp)
00000000010037ea	callq	runtime.heapBits.nextArena
00000000010037ef	movq	0x28(%rsp), %rcx
00000000010037f4	movl	0x24(%rsp), %r8d
00000000010037f9	movl	0x20(%rsp), %eax
00000000010037fd	movq	0x18(%rsp), %rdi
0000000001003802	movq	0x98(%rsp), %rdx
000000000100380a	movq	0x90(%rsp), %rbx
0000000001003812	movq	0xa0(%rsp), %rsi
000000000100381a	movq	0x38(%rsp), %r9
000000000100381f	jmp	0x100379e
0000000001003824	movl	%eax, 0x30(%rsp)
0000000001003828	movq	%rdi, 0x48(%rsp)
000000000100382d	movq	%rcx, 0x40(%rsp)
0000000001003832	movl	%r8d, 0x34(%rsp)
0000000001003837	leaq	(%r9,%rbx), %rax
000000000100383b	testb	%al, (%rax)
000000000100383d	movq	(%r9,%rbx), %rax
0000000001003841	movq	%rax, (%rsp)
0000000001003845	callq	runtime.cgoIsGoPointer
000000000100384a	leaq	0x8(%rsp), %rax
000000000100384f	cmpb	$0x0, (%rax)
0000000001003852	jne	0x1003932
0000000001003858	movl	0x30(%rsp), %eax
000000000100385c	movq	0x40(%rsp), %rcx
0000000001003861	movq	0x98(%rsp), %rdx
0000000001003869	movq	0x90(%rsp), %rbx
0000000001003871	movq	0xa0(%rsp), %rsi
0000000001003879	movq	0x48(%rsp), %rdi
000000000100387e	movl	0x34(%rsp), %r8d
0000000001003883	movq	0x38(%rsp), %r9
0000000001003888	jmp	0x10037c3
000000000100388d	movq	0x78(%rsp), %rbp
0000000001003892	addq	$0x80, %rsp
0000000001003899	retq
000000000100389a	movq	$0x0, 0x50(%rsp)
00000000010038a3	xorps	%xmm0, %xmm0
00000000010038a6	movups	%xmm0, 0x58(%rsp)
00000000010038ab	movups	%xmm0, 0x68(%rsp)
00000000010038b0	leaq	runtime.cgoCheckTypedBlock.func1(%rip), %rcx
00000000010038b7	movq	%rcx, 0x50(%rsp)
00000000010038bc	movq	%rax, 0x58(%rsp)
00000000010038c1	movq	%rbx, 0x60(%rsp)
00000000010038c6	movq	%rdx, 0x68(%rsp)
00000000010038cb	movq	%rsi, 0x70(%rsp)
00000000010038d0	leaq	0x50(%rsp), %rax
00000000010038d5	movq	%rax, (%rsp)
00000000010038d9	callq	runtime.systemstack
00000000010038de	movq	0x78(%rsp), %rbp
00000000010038e3	addq	$0x80, %rsp
00000000010038ea	retq
00000000010038eb	xorl	%ebx, %ebx
00000000010038ed	xorl	%ecx, %ecx
00000000010038ef	jmp	0x1003634
00000000010038f4	movq	0x20(%rax), %rax
00000000010038f8	movq	%rax, 0x8(%rsp)
00000000010038fd	movq	0x90(%rsp), %rax
0000000001003905	movq	%rax, (%rsp)
0000000001003909	movq	%rdx, 0x10(%rsp)
000000000100390e	movq	%rsi, 0x18(%rsp)
0000000001003913	callq	runtime.cgoCheckBits
0000000001003918	movq	0x78(%rsp), %rbp
000000000100391d	addq	$0x80, %rsp
0000000001003924	retq
0000000001003925	movq	0x78(%rsp), %rbp
000000000100392a	addq	$0x80, %rsp
0000000001003931	retq
0000000001003932	leaq	0x6a28f(%rip), %rax
0000000001003939	movq	%rax, (%rsp)
000000000100393d	movq	$0x24, 0x8(%rsp)
0000000001003946	callq	runtime.throw
000000000100394b	ud2
000000000100394d	callq	runtime.panicindex
0000000001003952	ud2
0000000001003954	int3
0000000001003955	int3
0000000001003956	int3
0000000001003957	int3
0000000001003958	int3
0000000001003959	int3
000000000100395a	int3
000000000100395b	int3
000000000100395c	int3
000000000100395d	int3
000000000100395e	int3
000000000100395f	int3
runtime.cgoCheckBits:
0000000001003960	subq	$0x40, %rsp
0000000001003964	movq	%rbp, 0x38(%rsp)
0000000001003969	leaq	0x38(%rsp), %rbp
000000000100396e	movq	0x58(%rsp), %rax
0000000001003973	movq	%rax, %rcx
0000000001003976	shrq	$0x6, %rax
000000000100397a	movq	%rax, %rdx
000000000100397d	shlq	$0x6, %rax
0000000001003981	subq	%rax, %rcx
0000000001003984	movq	0x60(%rsp), %rbx
0000000001003989	addq	%rcx, %rbx
000000000100398c	movq	%rbx, 0x60(%rsp)
0000000001003991	movq	0x50(%rsp), %rsi
0000000001003996	addq	%rsi, %rdx
0000000001003999	movq	0x48(%rsp), %rsi
000000000100399e	addq	%rsi, %rax
00000000010039a1	movq	%rax, 0x30(%rsp)
00000000010039a6	xorl	%esi, %esi
00000000010039a8	xorl	%edi, %edi
00000000010039aa	jmp	0x10039b0
00000000010039ac	addq	$0x8, %rsi
00000000010039b0	cmpq	%rbx, %rsi
00000000010039b3	jae	0x1003a28
00000000010039b5	testq	$0x3f, %rsi
00000000010039bc	jne	0x1003a24
00000000010039be	movzbl	(%rdx), %edi
00000000010039c1	incq	%rdx
00000000010039c4	testq	%rcx, %rcx
00000000010039c7	jbe	0x10039cf
00000000010039c9	addq	$-0x8, %rcx
00000000010039cd	jmp	0x10039ac
00000000010039cf	btl	$0x0, %edi
00000000010039d3	jae	0x10039ac
00000000010039d5	movq	%rsi, 0x18(%rsp)
00000000010039da	movl	%edi, 0x14(%rsp)
00000000010039de	movq	%rcx, 0x20(%rsp)
00000000010039e3	movq	%rdx, 0x28(%rsp)
00000000010039e8	leaq	(%rax,%rsi), %rcx
00000000010039ec	testb	%al, (%rcx)
00000000010039ee	movq	(%rsi,%rax), %rcx
00000000010039f2	movq	%rcx, (%rsp)
00000000010039f6	callq	runtime.cgoIsGoPointer
00000000010039fb	leaq	0x8(%rsp), %rax
0000000001003a00	cmpb	$0x0, (%rax)
0000000001003a03	jne	0x1003a32
0000000001003a05	movq	0x30(%rsp), %rax
0000000001003a0a	movq	0x20(%rsp), %rcx
0000000001003a0f	movq	0x28(%rsp), %rdx
0000000001003a14	movq	0x60(%rsp), %rbx
0000000001003a19	movq	0x18(%rsp), %rsi
0000000001003a1e	movl	0x14(%rsp), %edi
0000000001003a22	jmp	0x10039ac
0000000001003a24	shrl	%edi
0000000001003a26	jmp	0x10039c4
0000000001003a28	movq	0x38(%rsp), %rbp
0000000001003a2d	addq	$0x40, %rsp
0000000001003a31	retq
0000000001003a32	leaq	0x6a18f(%rip), %rax
0000000001003a39	movq	%rax, (%rsp)
0000000001003a3d	movq	$0x24, 0x8(%rsp)
0000000001003a46	callq	runtime.throw
0000000001003a4b	ud2
0000000001003a4d	int3
0000000001003a4e	int3
0000000001003a4f	int3
runtime.cgoCheckUsingType:
0000000001003a50	movq	%gs:0x30, %rcx
0000000001003a59	cmpq	0x18(%rcx), %rsp
0000000001003a5d	jbe	0x1003ca4
0000000001003a63	subq	$0x70, %rsp
0000000001003a67	movq	%rbp, 0x68(%rsp)
0000000001003a6c	leaq	0x68(%rsp), %rbp
0000000001003a71	movq	0x78(%rsp), %rax
0000000001003a76	movzbl	0x17(%rax), %ecx
0000000001003a7a	testb	$-0x80, %cl
0000000001003a7d	jne	0x1003c7f
0000000001003a83	movq	0x8(%rax), %rdx
0000000001003a87	movq	0x88(%rsp), %rbx
0000000001003a8f	cmpq	%rbx, %rdx
0000000001003a92	jbe	0x1003c75
0000000001003a98	subq	%rbx, %rdx
0000000001003a9b	movq	0x90(%rsp), %rsi
0000000001003aa3	cmpq	%rdx, %rsi
0000000001003aa6	cmovaq	%rdx, %rsi
0000000001003aaa	testb	$0x40, %cl
0000000001003aad	je	0x1003c47
0000000001003ab3	andl	$0x1f, %ecx
0000000001003ab6	cmpb	$0x11, %cl
0000000001003ab9	jne	0x1003b70
0000000001003abf	movq	0x80(%rsp), %rcx
0000000001003ac7	xorl	%edx, %edx
0000000001003ac9	jmp	0x1003ad4
0000000001003acb	incq	%rdx
0000000001003ace	subq	%rdi, %rsi
0000000001003ad1	movq	%r8, %rbx
0000000001003ad4	movq	0x40(%rax), %rdi
0000000001003ad8	cmpq	%rdi, %rdx
0000000001003adb	jae	0x1003b66
0000000001003ae1	movq	0x30(%rax), %rdi
0000000001003ae5	movq	(%rdi), %r8
0000000001003ae8	cmpq	%r8, %rbx
0000000001003aeb	jb	0x1003b19
0000000001003aed	movq	0x30(%rax), %rdi
0000000001003af1	movq	(%rdi), %rdi
0000000001003af4	cmpq	%rdi, %rbx
0000000001003af7	movq	%rbx, %r8
0000000001003afa	cmovaq	%rdi, %rbx
0000000001003afe	movq	%rdi, %r9
0000000001003b01	subq	%rbx, %rdi
0000000001003b04	subq	%rbx, %r8
0000000001003b07	addq	%r9, %rcx
0000000001003b0a	cmpq	%rdi, %rsi
0000000001003b0d	ja	0x1003acb
0000000001003b0f	movq	0x68(%rsp), %rbp
0000000001003b14	addq	$0x70, %rsp
0000000001003b18	retq
0000000001003b19	movq	%rdx, 0x30(%rsp)
0000000001003b1e	movq	%rsi, 0x90(%rsp)
0000000001003b26	movq	%rcx, 0x50(%rsp)
0000000001003b2b	movq	%rbx, 0x20(%rsp)
0000000001003b30	movq	%rdi, (%rsp)
0000000001003b34	movq	%rcx, 0x8(%rsp)
0000000001003b39	movq	%rbx, 0x10(%rsp)
0000000001003b3e	movq	%rsi, 0x18(%rsp)
0000000001003b43	callq	runtime.cgoCheckUsingType
0000000001003b48	movq	0x78(%rsp), %rax
0000000001003b4d	movq	0x50(%rsp), %rcx
0000000001003b52	movq	0x30(%rsp), %rdx
0000000001003b57	movq	0x20(%rsp), %rbx
0000000001003b5c	movq	0x90(%rsp), %rsi
0000000001003b64	jmp	0x1003aed
0000000001003b66	movq	0x68(%rsp), %rbp
0000000001003b6b	addq	$0x70, %rsp
0000000001003b6f	retq
0000000001003b70	cmpb	$0x19, %cl
0000000001003b73	jne	0x1003c89
0000000001003b79	movq	0x38(%rax), %rcx
0000000001003b7d	movq	0x40(%rax), %rax
0000000001003b81	testq	%rax, %rax
0000000001003b84	jle	0x1003b66
0000000001003b86	movq	%rax, 0x40(%rsp)
0000000001003b8b	movq	0x80(%rsp), %rdx
0000000001003b93	xorl	%edi, %edi
0000000001003b95	jmp	0x1003ba1
0000000001003b97	addq	$0x18, %rcx
0000000001003b9b	movq	%rbx, %rdi
0000000001003b9e	movq	%r9, %rbx
0000000001003ba1	movq	0x8(%rcx), %r8
0000000001003ba5	movq	(%r8), %r9
0000000001003ba8	cmpq	%r9, %rbx
0000000001003bab	jb	0x1003be3
0000000001003bad	movq	(%r8), %r8
0000000001003bb0	cmpq	%r8, %rbx
0000000001003bb3	movq	%rbx, %r9
0000000001003bb6	cmovaq	%r8, %rbx
0000000001003bba	movq	%r8, %r10
0000000001003bbd	subq	%rbx, %r8
0000000001003bc0	subq	%rbx, %r9
0000000001003bc3	addq	%r10, %rdx
0000000001003bc6	cmpq	%r8, %rsi
0000000001003bc9	jbe	0x1003bd9
0000000001003bcb	leaq	0x1(%rdi), %rbx
0000000001003bcf	subq	%r8, %rsi
0000000001003bd2	cmpq	%rax, %rbx
0000000001003bd5	jl	0x1003b97
0000000001003bd7	jmp	0x1003b66
0000000001003bd9	movq	0x68(%rsp), %rbp
0000000001003bde	addq	$0x70, %rsp
0000000001003be2	retq
0000000001003be3	movq	%rcx, 0x60(%rsp)
0000000001003be8	movq	%rdi, 0x38(%rsp)
0000000001003bed	movq	%rbx, 0x28(%rsp)
0000000001003bf2	movq	%r8, 0x58(%rsp)
0000000001003bf7	movq	%rsi, 0x90(%rsp)
0000000001003bff	movq	%rdx, 0x48(%rsp)
0000000001003c04	movq	%r8, (%rsp)
0000000001003c08	movq	%rdx, 0x8(%rsp)
0000000001003c0d	movq	%rbx, 0x10(%rsp)
0000000001003c12	movq	%rsi, 0x18(%rsp)
0000000001003c17	callq	runtime.cgoCheckUsingType
0000000001003c1c	movq	0x40(%rsp), %rax
0000000001003c21	movq	0x60(%rsp), %rcx
0000000001003c26	movq	0x48(%rsp), %rdx
0000000001003c2b	movq	0x28(%rsp), %rbx
0000000001003c30	movq	0x90(%rsp), %rsi
0000000001003c38	movq	0x38(%rsp), %rdi
0000000001003c3d	movq	0x58(%rsp), %r8
0000000001003c42	jmp	0x1003bad
0000000001003c47	movq	0x20(%rax), %rax
0000000001003c4b	movq	%rax, 0x8(%rsp)
0000000001003c50	movq	0x80(%rsp), %rax
0000000001003c58	movq	%rax, (%rsp)
0000000001003c5c	movq	%rbx, 0x10(%rsp)
0000000001003c61	movq	%rsi, 0x18(%rsp)
0000000001003c66	callq	runtime.cgoCheckBits
0000000001003c6b	movq	0x68(%rsp), %rbp
0000000001003c70	addq	$0x70, %rsp
0000000001003c74	retq
0000000001003c75	movq	0x68(%rsp), %rbp
0000000001003c7a	addq	$0x70, %rsp
0000000001003c7e	retq
0000000001003c7f	movq	0x68(%rsp), %rbp
0000000001003c84	addq	$0x70, %rsp
0000000001003c88	retq
0000000001003c89	leaq	0x6766c(%rip), %rax
0000000001003c90	movq	%rax, (%rsp)
0000000001003c94	movq	$0xc, 0x8(%rsp)
0000000001003c9d	callq	runtime.throw
0000000001003ca2	ud2
0000000001003ca4	callq	runtime.morestackc
0000000001003ca9	jmp	runtime.cgoCheckUsingType
0000000001003cae	int3
0000000001003caf	int3
runtime.makechan:
0000000001003cb0	movq	%gs:0x30, %rcx
0000000001003cb9	cmpq	0x10(%rcx), %rsp
0000000001003cbd	jbe	0x1003f0b
0000000001003cc3	subq	$0x38, %rsp
0000000001003cc7	movq	%rbp, 0x30(%rsp)
0000000001003ccc	leaq	0x30(%rsp), %rbp
0000000001003cd1	movq	0x40(%rsp), %rcx
0000000001003cd6	movq	0x30(%rcx), %rcx
0000000001003cda	movq	(%rcx), %rdx
0000000001003cdd	cmpq	$0x10000, %rdx
0000000001003ce4	jae	0x1003ef0
0000000001003cea	cmpb	$0x8, 0x15(%rcx)
0000000001003cee	ja	0x1003ed5
0000000001003cf4	movq	0x48(%rsp), %rbx
0000000001003cf9	testq	%rbx, %rbx
0000000001003cfc	jl	0x1003eb7
0000000001003d02	cmpq	$0x21, %rdx
0000000001003d06	jae	0x1003e9d
0000000001003d0c	leaq	runtime.maxElems(%rip), %rax
0000000001003d13	movq	(%rax,%rdx,8), %rax
0000000001003d17	cmpq	%rax, %rbx
0000000001003d1a	ja	0x1003eb7
0000000001003d20	movq	%rdx, %rax
0000000001003d23	imulq	%rbx, %rdx
0000000001003d27	movabsq	$0xffffffffffa0, %rsi
0000000001003d31	cmpq	%rsi, %rdx
0000000001003d34	ja	0x1003eb7
0000000001003d3a	movq	%rcx, 0x20(%rsp)
0000000001003d3f	testq	%rbx, %rbx
0000000001003d42	jne	0x1003dd0
0000000001003d48	movq	$0x60, (%rsp)
0000000001003d50	movq	$0x0, 0x8(%rsp)
0000000001003d59	movb	$0x1, 0x10(%rsp)
0000000001003d5e	callq	runtime.mallocgc
0000000001003d63	movq	0x18(%rsp), %rax
0000000001003d68	testb	%al, (%rax)
0000000001003d6a	leaq	0x10(%rax), %rdi
0000000001003d6e	cmpl	$0x0, 0xd0ebb(%rip)
0000000001003d75	jne	0x1003dc0
0000000001003d77	movq	%rdi, 0x10(%rax)
0000000001003d7b	movq	0x20(%rsp), %rcx
0000000001003d80	movq	(%rcx), %rdx
0000000001003d83	movw	%dx, 0x18(%rax)
0000000001003d87	cmpl	$0x0, 0xd0ea2(%rip)
0000000001003d8e	jne	0x1003dac
0000000001003d90	movq	%rcx, 0x20(%rax)
0000000001003d94	movq	0x48(%rsp), %rcx
0000000001003d99	movq	%rcx, 0x8(%rax)
0000000001003d9d	movq	%rax, 0x50(%rsp)
0000000001003da2	movq	0x30(%rsp), %rbp
0000000001003da7	addq	$0x38, %rsp
0000000001003dab	retq
0000000001003dac	leaq	0x20(%rax), %rdi
0000000001003db0	movq	%rax, %rdx
0000000001003db3	movq	%rcx, %rax
0000000001003db6	callq	runtime.gcWriteBarrier
0000000001003dbb	movq	%rdx, %rax
0000000001003dbe	jmp	0x1003d94
0000000001003dc0	movq	%rax, %rcx
0000000001003dc3	movq	%rdi, %rax
0000000001003dc6	callq	runtime.gcWriteBarrier
0000000001003dcb	movq	%rcx, %rax
0000000001003dce	jmp	0x1003d7b
0000000001003dd0	testq	%rax, %rax
0000000001003dd3	je	0x1003d48
0000000001003dd9	movzbl	0x17(%rcx), %eax
0000000001003ddd	testb	$-0x80, %al
0000000001003ddf	je	0x1003e30
0000000001003de1	leaq	0x60(%rdx), %rax
0000000001003de5	movq	%rax, (%rsp)
0000000001003de9	movq	$0x0, 0x8(%rsp)
0000000001003df2	movb	$0x1, 0x10(%rsp)
0000000001003df7	callq	runtime.mallocgc
0000000001003dfc	movq	0x18(%rsp), %rax
0000000001003e01	testb	%al, (%rax)
0000000001003e03	leaq	0x60(%rax), %rcx
0000000001003e07	cmpl	$0x0, 0xd0e22(%rip)
0000000001003e0e	jne	0x1003e19
0000000001003e10	movq	%rcx, 0x10(%rax)
0000000001003e14	jmp	0x1003d7b
0000000001003e19	leaq	0x10(%rax), %rdi
0000000001003e1d	movq	%rax, %rdx
0000000001003e20	movq	%rcx, %rax
0000000001003e23	callq	runtime.gcWriteBarrier
0000000001003e28	movq	%rdx, %rax
0000000001003e2b	jmp	0x1003d7b
0000000001003e30	leaq	0x62969(%rip), %rax
0000000001003e37	movq	%rax, (%rsp)
0000000001003e3b	callq	runtime.newobject
0000000001003e40	movq	0x8(%rsp), %rax
0000000001003e45	movq	%rax, 0x28(%rsp)
0000000001003e4a	movq	0x20(%rsp), %rcx
0000000001003e4f	movq	(%rcx), %rdx
0000000001003e52	movq	0x48(%rsp), %rbx
0000000001003e57	imulq	%rbx, %rdx
0000000001003e5b	movq	%rdx, (%rsp)
0000000001003e5f	movq	%rcx, 0x8(%rsp)
0000000001003e64	movb	$0x1, 0x10(%rsp)
0000000001003e69	callq	runtime.mallocgc
0000000001003e6e	movq	0x18(%rsp), %rax
0000000001003e73	cmpl	$0x0, 0xd0db6(%rip)
0000000001003e7a	jne	0x1003e8d
0000000001003e7c	movq	0x28(%rsp), %rcx
0000000001003e81	movq	%rax, 0x10(%rcx)
0000000001003e85	movq	%rcx, %rax
0000000001003e88	jmp	0x1003d7b
0000000001003e8d	movq	0x28(%rsp), %rcx
0000000001003e92	leaq	0x10(%rcx), %rdi
0000000001003e96	callq	runtime.gcWriteBarrier
0000000001003e9b	jmp	0x1003e85
0000000001003e9d	movabsq	$0x1000000000000, %rax
0000000001003ea7	movq	%rdx, %rsi
0000000001003eaa	xorl	%edx, %edx
0000000001003eac	divq	%rsi
0000000001003eaf	movq	%rsi, %rdx
0000000001003eb2	jmp	0x1003d17
0000000001003eb7	leaq	0x58242(%rip), %rax
0000000001003ebe	movq	%rax, (%rsp)
0000000001003ec2	leaq	runtime.statictmp_1(%rip), %rax
0000000001003ec9	movq	%rax, 0x8(%rsp)
0000000001003ece	callq	runtime.gopanic
0000000001003ed3	ud2
0000000001003ed5	leaq	0x6852f(%rip), %rax
0000000001003edc	movq	%rax, (%rsp)
0000000001003ee0	movq	$0x17, 0x8(%rsp)
0000000001003ee9	callq	runtime.throw
0000000001003eee	ud2
0000000001003ef0	leaq	0x69fd1(%rip), %rax
0000000001003ef7	movq	%rax, (%rsp)
0000000001003efb	movq	$0x26, 0x8(%rsp)
0000000001003f04	callq	runtime.throw
0000000001003f09	ud2
0000000001003f0b	callq	runtime.morestack_noctxt
0000000001003f10	jmp	runtime.makechan
0000000001003f15	int3
0000000001003f16	int3
0000000001003f17	int3
0000000001003f18	int3
0000000001003f19	int3
0000000001003f1a	int3
0000000001003f1b	int3
0000000001003f1c	int3
0000000001003f1d	int3
0000000001003f1e	int3
0000000001003f1f	int3
runtime.chansend1:
0000000001003f20	subq	$0x30, %rsp
0000000001003f24	movq	%rbp, 0x28(%rsp)
0000000001003f29	leaq	0x28(%rsp), %rbp
0000000001003f2e	movq	0x38(%rsp), %rax
0000000001003f33	movq	%rax, (%rsp)
0000000001003f37	movq	0x40(%rsp), %rax
0000000001003f3c	movq	%rax, 0x8(%rsp)
0000000001003f41	movb	$0x1, 0x10(%rsp)
0000000001003f46	movq	0x30(%rsp), %rax
0000000001003f4b	movq	%rax, 0x18(%rsp)
0000000001003f50	callq	runtime.chansend
0000000001003f55	movq	0x28(%rsp), %rbp
0000000001003f5a	addq	$0x30, %rsp
0000000001003f5e	retq
0000000001003f5f	int3
runtime.chansend:
0000000001003f60	movq	%gs:0x30, %rcx
0000000001003f69	cmpq	0x10(%rcx), %rsp
0000000001003f6d	jbe	0x1004540
0000000001003f73	subq	$0x78, %rsp
0000000001003f77	movq	%rbp, 0x70(%rsp)
0000000001003f7c	leaq	0x70(%rsp), %rbp
0000000001003f81	movq	0x80(%rsp), %rax
0000000001003f89	testq	%rax, %rax
0000000001003f8c	je	0x1004467
0000000001003f92	movzbl	0x90(%rsp), %ecx
0000000001003f9a	testb	%cl, %cl
0000000001003f9c	jne	0x1003fd3
0000000001003f9e	cmpl	$0x0, 0x1c(%rax)
0000000001003fa2	jne	0x1003fd3
0000000001003fa4	movq	0x8(%rax), %rdx
0000000001003fa8	testq	%rdx, %rdx
0000000001003fab	jne	0x1003fb7
0000000001003fad	cmpq	$0x0, 0x38(%rax)
0000000001003fb2	je	0x1003fc1
0000000001003fb4	testq	%rdx, %rdx
0000000001003fb7	jbe	0x1003fd3
0000000001003fb9	movq	(%rax), %rbx
0000000001003fbc	cmpq	%rdx, %rbx
0000000001003fbf	jne	0x1003fd3
0000000001003fc1	movb	$0x0, 0xa0(%rsp)
0000000001003fc9	movq	0x70(%rsp), %rbp
0000000001003fce	addq	$0x78, %rsp
0000000001003fd2	retq
0000000001003fd3	cmpq	$0x0, 0xd0b6d(%rip)
0000000001003fdb	ja	0x1004451
0000000001003fe1	xorl	%edx, %edx
0000000001003fe3	movq	%rdx, 0x28(%rsp)
0000000001003fe8	leaq	0x58(%rax), %rcx
0000000001003fec	movq	%rcx, 0x58(%rsp)
0000000001003ff1	movq	%rcx, (%rsp)
0000000001003ff5	callq	runtime.lock
0000000001003ffa	movq	0x80(%rsp), %rax
0000000001004002	cmpl	$0x0, 0x1c(%rax)
0000000001004006	jne	0x10044dd
000000000100400c	leaq	0x38(%rax), %rcx
0000000001004010	movq	%rcx, (%rsp)
0000000001004014	callq	"runtime.(*waitq).dequeue"
0000000001004019	movq	0x8(%rsp), %rax
000000000100401e	testq	%rax, %rax
0000000001004021	jne	0x10043f0
0000000001004027	movq	0x80(%rsp), %rax
000000000100402f	movq	0x8(%rax), %rcx
0000000001004033	cmpq	%rcx, (%rax)
0000000001004036	jb	0x100437a
000000000100403c	movzbl	0x90(%rsp), %ecx
0000000001004044	testb	%cl, %cl
0000000001004046	jne	0x1004068
0000000001004048	movq	0x58(%rsp), %rax
000000000100404d	movq	%rax, (%rsp)
0000000001004051	callq	runtime.unlock
0000000001004056	movb	$0x0, 0xa0(%rsp)
000000000100405e	movq	0x70(%rsp), %rbp
0000000001004063	addq	$0x78, %rsp
0000000001004067	retq
0000000001004068	movq	%gs:0x30, %rax
0000000001004071	movq	%rax, 0x38(%rsp)
0000000001004076	callq	runtime.acquireSudog
000000000100407b	movq	(%rsp), %rax
000000000100407f	movq	$0x0, 0x30(%rax)
0000000001004087	movq	0x28(%rsp), %rcx
000000000100408c	testq	%rcx, %rcx
000000000100408f	je	0x1004099
0000000001004091	movq	$-0x1, 0x30(%rax)
0000000001004099	cmpl	$0x0, 0xd0b90(%rip)
00000000010040a0	jne	0x1004341
00000000010040a6	movq	0x88(%rsp), %rdx
00000000010040ae	movq	%rdx, 0x20(%rax)
00000000010040b2	movq	$0x0, 0x48(%rax)
00000000010040ba	movq	0x38(%rsp), %rdx
00000000010040bf	movq	%rdx, (%rax)
00000000010040c2	movb	$0x0, 0x8(%rax)
00000000010040c6	leaq	0x58(%rax), %rdi
00000000010040ca	cmpl	$0x0, 0xd0b5f(%rip)
00000000010040d1	jne	0x1004321
00000000010040d7	movq	0x80(%rsp), %rbx
00000000010040df	movq	%rbx, 0x58(%rax)
00000000010040e3	testb	%al, (%rdx)
00000000010040e5	leaq	0x138(%rdx), %rsi
00000000010040ec	leaq	0x88(%rdx), %r8
00000000010040f3	cmpl	$0x0, 0xd0b36(%rip)
00000000010040fa	jne	0x10042f0
0000000001004100	movq	%rax, 0x138(%rdx)
0000000001004107	movq	$0x0, 0x88(%rdx)
0000000001004112	movq	$0x0, 0x10(%rax)
000000000100411a	movq	%rax, 0x30(%rsp)
000000000100411f	movq	%rdi, 0x50(%rsp)
0000000001004124	movq	%rsi, 0x48(%rsp)
0000000001004129	movq	%r8, 0x40(%rsp)
000000000100412e	leaq	0x48(%rbx), %r9
0000000001004132	testb	%al, (%r9)
0000000001004135	movq	0x50(%rbx), %r9
0000000001004139	leaq	0x50(%rbx), %r10
000000000100413d	testq	%r9, %r9
0000000001004140	je	0x10042a2
0000000001004146	cmpl	$0x0, 0xd0ae3(%rip)
000000000100414d	jne	0x1004271
0000000001004153	movq	%r9, 0x18(%rax)
0000000001004157	movq	%rax, 0x10(%r9)
000000000100415b	movq	%rax, 0x50(%rbx)
000000000100415f	movq	0x58(%rsp), %rax
0000000001004164	movq	%rax, (%rsp)
0000000001004168	movw	$0x160e, 0x8(%rsp)
000000000100416f	movq	$0x3, 0x10(%rsp)
0000000001004178	callq	runtime.goparkunlock
000000000100417d	movq	0x38(%rsp), %rax
0000000001004182	movq	0x138(%rax), %rcx
0000000001004189	movq	0x30(%rsp), %rdx
000000000100418e	cmpq	%rcx, %rdx
0000000001004191	jne	0x10044c2
0000000001004197	cmpl	$0x0, 0xd0a92(%rip)
000000000100419e	jne	0x100425a
00000000010041a4	movq	$0x0, 0x138(%rax)
00000000010041af	cmpq	$0x0, 0x88(%rax)
00000000010041b7	je	0x1004243
00000000010041bd	cmpl	$0x0, 0xd0a6c(%rip)
00000000010041c4	jne	0x1004235
00000000010041c6	movq	$0x0, 0x88(%rax)
00000000010041d1	movq	0x30(%rdx), %rcx
00000000010041d5	testq	%rcx, %rcx
00000000010041d8	jg	0x1004214
00000000010041da	cmpl	$0x0, 0xd0a4f(%rip)
00000000010041e1	jne	0x1004206
00000000010041e3	movq	$0x0, 0x58(%rdx)
00000000010041eb	movq	%rdx, (%rsp)
00000000010041ef	callq	runtime.releaseSudog
00000000010041f4	movb	$0x1, 0xa0(%rsp)
00000000010041fc	movq	0x70(%rsp), %rbp
0000000001004201	addq	$0x78, %rsp
0000000001004205	retq
0000000001004206	movq	0x50(%rsp), %rdi
000000000100420b	xorl	%eax, %eax
000000000100420d	callq	runtime.gcWriteBarrier
0000000001004212	jmp	0x10041eb
0000000001004214	movq	0x28(%rsp), %rax
0000000001004219	subq	%rax, %rcx
000000000100421c	movq	%rcx, (%rsp)
0000000001004220	movq	$0x2, 0x8(%rsp)
0000000001004229	callq	runtime.blockevent
000000000100422e	movq	0x30(%rsp), %rdx
0000000001004233	jmp	0x10041da
0000000001004235	movq	0x40(%rsp), %rdi
000000000100423a	xorl	%eax, %eax
000000000100423c	callq	runtime.gcWriteBarrier
0000000001004241	jmp	0x10041d1
0000000001004243	movq	0x80(%rsp), %rax
000000000100424b	cmpl	$0x0, 0x1c(%rax)
000000000100424f	je	0x10044a7
0000000001004255	jmp	0x1004489
000000000100425a	movq	0x48(%rsp), %rdi
000000000100425f	movq	%rax, %rcx
0000000001004262	xorl	%eax, %eax
0000000001004264	callq	runtime.gcWriteBarrier
0000000001004269	movq	%rcx, %rax
000000000100426c	jmp	0x10041af
0000000001004271	leaq	0x18(%rax), %r11
0000000001004275	movq	%rdi, %r12
0000000001004278	movq	%r11, %rdi
000000000100427b	movq	%rax, %r13
000000000100427e	movq	%r9, %rax
0000000001004281	callq	runtime.gcWriteBarrier
0000000001004286	leaq	0x10(%rax), %rdi
000000000100428a	movq	%r13, %rax
000000000100428d	callq	runtime.gcWriteBarrier
0000000001004292	movq	%r10, %rdi
0000000001004295	callq	runtime.gcWriteBarrier
000000000100429a	movq	%r12, %rdi
000000000100429d	jmp	0x100415f
00000000010042a2	cmpl	$0x0, 0xd0987(%rip)
00000000010042a9	jne	0x10042c0
00000000010042ab	movq	$0x0, 0x18(%rax)
00000000010042b3	movq	%rax, 0x48(%rbx)
00000000010042b7	movq	%rax, 0x50(%rbx)
00000000010042bb	jmp	0x100415f
00000000010042c0	leaq	0x18(%rax), %r9
00000000010042c4	movq	%rdi, %r11
00000000010042c7	movq	%r9, %rdi
00000000010042ca	movq	%rax, %r12
00000000010042cd	xorl	%eax, %eax
00000000010042cf	callq	runtime.gcWriteBarrier
00000000010042d4	leaq	0x48(%rbx), %rdi
00000000010042d8	movq	%r12, %rax
00000000010042db	callq	runtime.gcWriteBarrier
00000000010042e0	movq	%r10, %rdi
00000000010042e3	callq	runtime.gcWriteBarrier
00000000010042e8	movq	%r11, %rdi
00000000010042eb	jmp	0x100415f
00000000010042f0	movq	%rdi, %r9
00000000010042f3	movq	%rsi, %rdi
00000000010042f6	callq	runtime.gcWriteBarrier
00000000010042fb	movq	%r8, %rdi
00000000010042fe	movq	%rax, %r10
0000000001004301	xorl	%eax, %eax
0000000001004303	callq	runtime.gcWriteBarrier
0000000001004308	leaq	0x10(%r10), %r11
000000000100430c	movq	%r11, %rdi
000000000100430f	xorl	%eax, %eax
0000000001004311	callq	runtime.gcWriteBarrier
0000000001004316	movq	%r10, %rax
0000000001004319	movq	%r9, %rdi
000000000100431c	jmp	0x100411a
0000000001004321	movq	%rax, %rbx
0000000001004324	movq	0x80(%rsp), %rax
000000000100432c	callq	runtime.gcWriteBarrier
0000000001004331	movq	%rbx, %rax
0000000001004334	movq	0x80(%rsp), %rbx
000000000100433c	jmp	0x10040e3
0000000001004341	leaq	0x20(%rax), %rdi
0000000001004345	movq	%rax, %rdx
0000000001004348	movq	0x88(%rsp), %rax
0000000001004350	callq	runtime.gcWriteBarrier
0000000001004355	leaq	0x48(%rdx), %rdi
0000000001004359	xorl	%eax, %eax
000000000100435b	callq	runtime.gcWriteBarrier
0000000001004360	movq	%rdx, %rdi
0000000001004363	movq	0x38(%rsp), %rax
0000000001004368	callq	runtime.gcWriteBarrier
000000000100436d	movq	%rdi, %rax
0000000001004370	movq	0x38(%rsp), %rdx
0000000001004375	jmp	0x10040c2
000000000100437a	movq	0x28(%rax), %rcx
000000000100437e	movq	0x20(%rax), %rdx
0000000001004382	movzwl	0x18(%rax), %ebx
0000000001004386	imulq	%rbx, %rcx
000000000100438a	addq	0x10(%rax), %rcx
000000000100438e	movq	%rdx, (%rsp)
0000000001004392	movq	%rcx, 0x8(%rsp)
0000000001004397	movq	0x88(%rsp), %rcx
000000000100439f	movq	%rcx, 0x10(%rsp)
00000000010043a4	callq	runtime.typedmemmove
00000000010043a9	movq	0x80(%rsp), %rax
00000000010043b1	movq	0x28(%rax), %rcx
00000000010043b5	incq	%rcx
00000000010043b8	movq	%rcx, 0x28(%rax)
00000000010043bc	movq	0x8(%rax), %rdx
00000000010043c0	cmpq	%rdx, %rcx
00000000010043c3	jne	0x10043cd
00000000010043c5	movq	$0x0, 0x28(%rax)
00000000010043cd	incq	(%rax)
00000000010043d0	movq	0x58(%rsp), %rax
00000000010043d5	movq	%rax, (%rsp)
00000000010043d9	callq	runtime.unlock
00000000010043de	movb	$0x1, 0xa0(%rsp)
00000000010043e6	movq	0x70(%rsp), %rbp
00000000010043eb	addq	$0x78, %rsp
00000000010043ef	retq
00000000010043f0	xorps	%xmm0, %xmm0
00000000010043f3	movups	%xmm0, 0x60(%rsp)
00000000010043f8	leaq	runtime.chansend.func1(%rip), %rcx
00000000010043ff	movq	%rcx, 0x60(%rsp)
0000000001004404	movq	0x80(%rsp), %rcx
000000000100440c	movq	%rcx, 0x68(%rsp)
0000000001004411	movq	%rcx, (%rsp)
0000000001004415	movq	%rax, 0x8(%rsp)
000000000100441a	movq	0x88(%rsp), %rax
0000000001004422	movq	%rax, 0x10(%rsp)
0000000001004427	leaq	0x60(%rsp), %rax
000000000100442c	movq	%rax, 0x18(%rsp)
0000000001004431	movq	$0x3, 0x20(%rsp)
000000000100443a	callq	runtime.send
000000000100443f	movb	$0x1, 0xa0(%rsp)
0000000001004447	movq	0x70(%rsp), %rbp
000000000100444c	addq	$0x78, %rsp
0000000001004450	retq
0000000001004451	callq	runtime.cputicks
0000000001004456	movq	(%rsp), %rdx
000000000100445a	movq	0x80(%rsp), %rax
0000000001004462	jmp	0x1003fe3
0000000001004467	movzbl	0x90(%rsp), %eax
000000000100446f	testb	%al, %al
0000000001004471	jne	0x1004509
0000000001004477	movb	$0x0, 0xa0(%rsp)
000000000100447f	movq	0x70(%rsp), %rbp
0000000001004484	addq	$0x78, %rsp
0000000001004488	retq
0000000001004489	leaq	0x57c70(%rip), %rax
0000000001004490	movq	%rax, (%rsp)
0000000001004494	leaq	runtime.statictmp_3(%rip), %rax
000000000100449b	movq	%rax, 0x8(%rsp)
00000000010044a0	callq	runtime.gopanic
00000000010044a5	ud2
00000000010044a7	leaq	0x682b4(%rip), %rax
00000000010044ae	movq	%rax, (%rsp)
00000000010044b2	movq	$0x19, 0x8(%rsp)
00000000010044bb	callq	runtime.throw
00000000010044c0	ud2
00000000010044c2	leaq	0x6852f(%rip), %rax
00000000010044c9	movq	%rax, (%rsp)
00000000010044cd	movq	$0x1b, 0x8(%rsp)
00000000010044d6	callq	runtime.throw
00000000010044db	ud2
00000000010044dd	movq	0x58(%rsp), %rax
00000000010044e2	movq	%rax, (%rsp)
00000000010044e6	callq	runtime.unlock
00000000010044eb	leaq	0x57c0e(%rip), %rax
00000000010044f2	movq	%rax, (%rsp)
00000000010044f6	leaq	runtime.statictmp_2(%rip), %rax
00000000010044fd	movq	%rax, 0x8(%rsp)
0000000001004502	callq	runtime.gopanic
0000000001004507	ud2
0000000001004509	xorps	%xmm0, %xmm0
000000000100450c	movups	%xmm0, (%rsp)
0000000001004510	movw	$0x1004, 0x10(%rsp)
0000000001004517	movq	$0x2, 0x18(%rsp)
0000000001004520	callq	runtime.gopark
0000000001004525	leaq	0x66cc9(%rip), %rax
000000000100452c	movq	%rax, (%rsp)
0000000001004530	movq	$0xb, 0x8(%rsp)
0000000001004539	callq	runtime.throw
000000000100453e	ud2
0000000001004540	callq	runtime.morestack_noctxt
0000000001004545	jmp	runtime.chansend
000000000100454a	int3
000000000100454b	int3
000000000100454c	int3
000000000100454d	int3
000000000100454e	int3
000000000100454f	int3
runtime.send:
0000000001004550	movq	%gs:0x30, %rcx
0000000001004559	cmpq	0x10(%rcx), %rsp
000000000100455d	jbe	0x1004661
0000000001004563	subq	$0x28, %rsp
0000000001004567	movq	%rbp, 0x20(%rsp)
000000000100456c	leaq	0x20(%rsp), %rbp
0000000001004571	movq	0x38(%rsp), %rax
0000000001004576	cmpq	$0x0, 0x20(%rax)
000000000100457b	jne	0x100460d
0000000001004581	movq	(%rax), %rcx
0000000001004584	movq	%rcx, 0x18(%rsp)
0000000001004589	movq	0x48(%rsp), %rdx
000000000100458e	movq	(%rdx), %rbx
0000000001004591	callq	*%rbx
0000000001004593	movq	0x18(%rsp), %rax
0000000001004598	testb	%al, (%rax)
000000000100459a	cmpl	$0x0, 0xd068f(%rip)
00000000010045a1	jne	0x10045ef
00000000010045a3	movq	0x38(%rsp), %rcx
00000000010045a8	movq	%rcx, 0x88(%rax)
00000000010045af	cmpq	$0x0, 0x30(%rcx)
00000000010045b4	jne	0x10045d6
00000000010045b6	movq	%rax, (%rsp)
00000000010045ba	movq	0x50(%rsp), %rax
00000000010045bf	incq	%rax
00000000010045c2	movq	%rax, 0x8(%rsp)
00000000010045c7	callq	runtime.goready
00000000010045cc	movq	0x20(%rsp), %rbp
00000000010045d1	addq	$0x28, %rsp
00000000010045d5	retq
00000000010045d6	callq	runtime.cputicks
00000000010045db	movq	(%rsp), %rax
00000000010045df	movq	0x38(%rsp), %rcx
00000000010045e4	movq	%rax, 0x30(%rcx)
00000000010045e8	movq	0x18(%rsp), %rax
00000000010045ed	jmp	0x10045b6
00000000010045ef	leaq	0x88(%rax), %rdi
00000000010045f6	movq	%rax, %rcx
00000000010045f9	movq	0x38(%rsp), %rax
00000000010045fe	callq	runtime.gcWriteBarrier
0000000001004603	movq	%rcx, %rax
0000000001004606	movq	0x38(%rsp), %rcx
000000000100460b	jmp	0x10045af
000000000100460d	movq	0x30(%rsp), %rcx
0000000001004612	movq	0x20(%rcx), %rcx
0000000001004616	movq	%rcx, (%rsp)
000000000100461a	movq	%rax, 0x8(%rsp)
000000000100461f	movq	0x40(%rsp), %rcx
0000000001004624	movq	%rcx, 0x10(%rsp)
0000000001004629	callq	runtime.sendDirect
000000000100462e	cmpl	$0x0, 0xd05fb(%rip)
0000000001004635	jne	0x1004649
0000000001004637	movq	0x38(%rsp), %rax
000000000100463c	movq	$0x0, 0x20(%rax)
0000000001004644	jmp	0x1004581
0000000001004649	movq	0x38(%rsp), %rcx
000000000100464e	leaq	0x20(%rcx), %rdi
0000000001004652	xorl	%eax, %eax
0000000001004654	callq	runtime.gcWriteBarrier
0000000001004659	movq	%rcx, %rax
000000000100465c	jmp	0x1004581
0000000001004661	callq	runtime.morestack_noctxt
0000000001004666	jmp	runtime.send
000000000100466b	int3
000000000100466c	int3
000000000100466d	int3
000000000100466e	int3
000000000100466f	int3
runtime.sendDirect:
0000000001004670	movq	%gs:0x30, %rcx
0000000001004679	cmpq	0x10(%rcx), %rsp
000000000100467d	jbe	0x10046ef
000000000100467f	subq	$0x30, %rsp
0000000001004683	movq	%rbp, 0x28(%rsp)
0000000001004688	leaq	0x28(%rsp), %rbp
000000000100468d	movq	0x40(%rsp), %rax
0000000001004692	movq	0x20(%rax), %rax
0000000001004696	movq	%rax, 0x20(%rsp)
000000000100469b	movq	0x38(%rsp), %rcx
00000000010046a0	movq	(%rcx), %rdx
00000000010046a3	movq	%rdx, 0x18(%rsp)
00000000010046a8	movq	%rcx, (%rsp)
00000000010046ac	movq	%rax, 0x8(%rsp)
00000000010046b1	movq	0x48(%rsp), %rax
00000000010046b6	movq	%rax, 0x10(%rsp)
00000000010046bb	callq	runtime.typeBitsBulkBarrier
00000000010046c0	movq	0x38(%rsp), %rax
00000000010046c5	movq	(%rax), %rax
00000000010046c8	movq	%rax, 0x10(%rsp)
00000000010046cd	movq	0x20(%rsp), %rax
00000000010046d2	movq	%rax, (%rsp)
00000000010046d6	movq	0x48(%rsp), %rax
00000000010046db	movq	%rax, 0x8(%rsp)
00000000010046e0	callq	runtime.memmove
00000000010046e5	movq	0x28(%rsp), %rbp
00000000010046ea	addq	$0x30, %rsp
00000000010046ee	retq
00000000010046ef	callq	runtime.morestack_noctxt
00000000010046f4	jmp	runtime.sendDirect
00000000010046f9	int3
00000000010046fa	int3
00000000010046fb	int3
00000000010046fc	int3
00000000010046fd	int3
00000000010046fe	int3
00000000010046ff	int3
runtime.recvDirect:
0000000001004700	movq	%gs:0x30, %rcx
0000000001004709	cmpq	0x10(%rcx), %rsp
000000000100470d	jbe	0x100477f
000000000100470f	subq	$0x30, %rsp
0000000001004713	movq	%rbp, 0x28(%rsp)
0000000001004718	leaq	0x28(%rsp), %rbp
000000000100471d	movq	0x40(%rsp), %rax
0000000001004722	movq	0x20(%rax), %rax
0000000001004726	movq	%rax, 0x20(%rsp)
000000000100472b	movq	0x38(%rsp), %rcx
0000000001004730	movq	(%rcx), %rdx
0000000001004733	movq	%rdx, 0x18(%rsp)
0000000001004738	movq	%rcx, (%rsp)
000000000100473c	movq	0x48(%rsp), %rdx
0000000001004741	movq	%rdx, 0x8(%rsp)
0000000001004746	movq	%rax, 0x10(%rsp)
000000000100474b	callq	runtime.typeBitsBulkBarrier
0000000001004750	movq	0x38(%rsp), %rax
0000000001004755	movq	(%rax), %rax
0000000001004758	movq	%rax, 0x10(%rsp)
000000000100475d	movq	0x48(%rsp), %rax
0000000001004762	movq	%rax, (%rsp)
0000000001004766	movq	0x20(%rsp), %rax
000000000100476b	movq	%rax, 0x8(%rsp)
0000000001004770	callq	runtime.memmove
0000000001004775	movq	0x28(%rsp), %rbp
000000000100477a	addq	$0x30, %rsp
000000000100477e	retq
000000000100477f	callq	runtime.morestack_noctxt
0000000001004784	jmp	runtime.recvDirect
0000000001004789	int3
000000000100478a	int3
000000000100478b	int3
000000000100478c	int3
000000000100478d	int3
000000000100478e	int3
000000000100478f	int3
runtime.closechan:
0000000001004790	movq	%gs:0x30, %rcx
0000000001004799	cmpq	0x10(%rcx), %rsp
000000000100479d	jbe	0x1004a0e
00000000010047a3	subq	$0x48, %rsp
00000000010047a7	movq	%rbp, 0x40(%rsp)
00000000010047ac	leaq	0x40(%rsp), %rbp
00000000010047b1	movq	0x50(%rsp), %rax
00000000010047b6	testq	%rax, %rax
00000000010047b9	je	0x10049f0
00000000010047bf	leaq	0x58(%rax), %rcx
00000000010047c3	movq	%rcx, 0x38(%rsp)
00000000010047c8	movq	%rcx, (%rsp)
00000000010047cc	callq	runtime.lock
00000000010047d1	movq	0x50(%rsp), %rax
00000000010047d6	cmpl	$0x0, 0x1c(%rax)
00000000010047da	jne	0x10049c4
00000000010047e0	movl	$0x1, 0x1c(%rax)
00000000010047e7	xorl	%ecx, %ecx
00000000010047e9	jmp	0x1004805
00000000010047eb	leaq	0xa0(%rcx), %rdx
00000000010047f2	testb	%al, (%rdx)
00000000010047f4	movq	0x28(%rsp), %rdx
00000000010047f9	movq	%rdx, 0xa0(%rcx)
0000000001004800	movq	0x50(%rsp), %rax
0000000001004805	movq	%rcx, 0x28(%rsp)
000000000100480a	leaq	0x38(%rax), %rdx
000000000100480e	movq	%rdx, (%rsp)
0000000001004812	callq	"runtime.(*waitq).dequeue"
0000000001004817	movq	0x8(%rsp), %rax
000000000100481c	testq	%rax, %rax
000000000100481f	je	0x10048c0
0000000001004825	movq	%rax, 0x10(%rsp)
000000000100482a	movq	0x20(%rax), %rcx
000000000100482e	testq	%rcx, %rcx
0000000001004831	jne	0x100487c
0000000001004833	cmpq	$0x0, 0x30(%rax)
0000000001004838	jne	0x1004865
000000000100483a	movq	(%rax), %rcx
000000000100483d	testb	%al, (%rcx)
000000000100483f	cmpl	$0x0, 0xd03ea(%rip)
0000000001004846	jne	0x1004855
0000000001004848	movq	$0x0, 0x88(%rcx)
0000000001004853	jmp	0x10047eb
0000000001004855	leaq	0x88(%rcx), %rdi
000000000100485c	xorl	%eax, %eax
000000000100485e	callq	runtime.gcWriteBarrier
0000000001004863	jmp	0x10047eb
0000000001004865	callq	runtime.cputicks
000000000100486a	movq	(%rsp), %rax
000000000100486e	movq	0x10(%rsp), %rcx
0000000001004873	movq	%rax, 0x30(%rcx)
0000000001004877	movq	%rcx, %rax
000000000100487a	jmp	0x100483a
000000000100487c	movq	0x50(%rsp), %rax
0000000001004881	movq	0x20(%rax), %rdx
0000000001004885	movq	%rcx, 0x8(%rsp)
000000000100488a	movq	%rdx, (%rsp)
000000000100488e	callq	runtime.typedmemclr
0000000001004893	cmpl	$0x0, 0xd0396(%rip)
000000000100489a	jne	0x10048ae
000000000100489c	movq	0x10(%rsp), %rcx
00000000010048a1	movq	$0x0, 0x20(%rcx)
00000000010048a9	movq	%rcx, %rax
00000000010048ac	jmp	0x1004833
00000000010048ae	movq	0x10(%rsp), %rcx
00000000010048b3	leaq	0x20(%rcx), %rdi
00000000010048b7	xorl	%eax, %eax
00000000010048b9	callq	runtime.gcWriteBarrier
00000000010048be	jmp	0x10048a9
00000000010048c0	movq	0x28(%rsp), %rax
00000000010048c5	jmp	0x10048df
00000000010048c7	leaq	0xa0(%rcx), %rdx
00000000010048ce	testb	%al, (%rdx)
00000000010048d0	movq	0x20(%rsp), %rdx
00000000010048d5	movq	%rdx, 0xa0(%rcx)
00000000010048dc	movq	%rcx, %rax
00000000010048df	movq	%rax, 0x20(%rsp)
00000000010048e4	movq	0x50(%rsp), %rcx
00000000010048e9	leaq	0x48(%rcx), %rdx
00000000010048ed	movq	%rdx, (%rsp)
00000000010048f1	callq	"runtime.(*waitq).dequeue"
00000000010048f6	movq	0x8(%rsp), %rax
00000000010048fb	testq	%rax, %rax
00000000010048fe	je	0x1004972
0000000001004900	cmpl	$0x0, 0xd0329(%rip)
0000000001004907	jne	0x100495f
0000000001004909	movq	$0x0, 0x20(%rax)
0000000001004911	cmpq	$0x0, 0x30(%rax)
0000000001004916	jne	0x1004943
0000000001004918	movq	(%rax), %rcx
000000000100491b	testb	%al, (%rcx)
000000000100491d	cmpl	$0x0, 0xd030c(%rip)
0000000001004924	jne	0x1004933
0000000001004926	movq	$0x0, 0x88(%rcx)
0000000001004931	jmp	0x10048c7
0000000001004933	leaq	0x88(%rcx), %rdi
000000000100493a	xorl	%eax, %eax
000000000100493c	callq	runtime.gcWriteBarrier
0000000001004941	jmp	0x10048c7
0000000001004943	movq	%rax, 0x18(%rsp)
0000000001004948	callq	runtime.cputicks
000000000100494d	movq	(%rsp), %rax
0000000001004951	movq	0x18(%rsp), %rcx
0000000001004956	movq	%rax, 0x30(%rcx)
000000000100495a	movq	%rcx, %rax
000000000100495d	jmp	0x1004918
000000000100495f	leaq	0x20(%rax), %rdi
0000000001004963	movq	%rax, %rcx
0000000001004966	xorl	%eax, %eax
0000000001004968	callq	runtime.gcWriteBarrier
000000000100496d	movq	%rcx, %rax
0000000001004970	jmp	0x1004911
0000000001004972	movq	0x38(%rsp), %rax
0000000001004977	movq	%rax, (%rsp)
000000000100497b	callq	runtime.unlock
0000000001004980	movq	0x20(%rsp), %rax
0000000001004985	jmp	0x10049b5
0000000001004987	movq	0xa0(%rax), %rcx
000000000100498e	movq	%rcx, 0x30(%rsp)
0000000001004993	movq	$0x0, 0xa0(%rax)
000000000100499e	movq	%rax, (%rsp)
00000000010049a2	movq	$0x3, 0x8(%rsp)
00000000010049ab	callq	runtime.goready
00000000010049b0	movq	0x30(%rsp), %rax
00000000010049b5	testq	%rax, %rax
00000000010049b8	jne	0x1004987
00000000010049ba	movq	0x40(%rsp), %rbp
00000000010049bf	addq	$0x48, %rsp
00000000010049c3	retq
00000000010049c4	movq	0x38(%rsp), %rax
00000000010049c9	movq	%rax, (%rsp)
00000000010049cd	callq	runtime.unlock
00000000010049d2	leaq	0x57727(%rip), %rax
00000000010049d9	movq	%rax, (%rsp)
00000000010049dd	leaq	runtime.statictmp_5(%rip), %rax
00000000010049e4	movq	%rax, 0x8(%rsp)
00000000010049e9	callq	runtime.gopanic
00000000010049ee	ud2
00000000010049f0	leaq	0x57709(%rip), %rax
00000000010049f7	movq	%rax, (%rsp)
00000000010049fb	leaq	runtime.statictmp_4(%rip), %rax
0000000001004a02	movq	%rax, 0x8(%rsp)
0000000001004a07	callq	runtime.gopanic
0000000001004a0c	ud2
0000000001004a0e	callq	runtime.morestack_noctxt
0000000001004a13	jmp	runtime.closechan
0000000001004a18	int3
0000000001004a19	int3
0000000001004a1a	int3
0000000001004a1b	int3
0000000001004a1c	int3
0000000001004a1d	int3
0000000001004a1e	int3
0000000001004a1f	int3
runtime.chanrecv1:
0000000001004a20	subq	$0x28, %rsp
0000000001004a24	movq	%rbp, 0x20(%rsp)
0000000001004a29	leaq	0x20(%rsp), %rbp
0000000001004a2e	movq	0x30(%rsp), %rax
0000000001004a33	movq	%rax, (%rsp)
0000000001004a37	movq	0x38(%rsp), %rax
0000000001004a3c	movq	%rax, 0x8(%rsp)
0000000001004a41	movb	$0x1, 0x10(%rsp)
0000000001004a46	callq	runtime.chanrecv
0000000001004a4b	movq	0x20(%rsp), %rbp
0000000001004a50	addq	$0x28, %rsp
0000000001004a54	retq
0000000001004a55	int3
0000000001004a56	int3
0000000001004a57	int3
0000000001004a58	int3
0000000001004a59	int3
0000000001004a5a	int3
0000000001004a5b	int3
0000000001004a5c	int3
0000000001004a5d	int3
0000000001004a5e	int3
0000000001004a5f	int3
runtime.chanrecv:
0000000001004a60	movq	%gs:0x30, %rcx
0000000001004a69	leaq	-0x8(%rsp), %rax
0000000001004a6e	cmpq	0x10(%rcx), %rax
0000000001004a72	jbe	0x10050be
0000000001004a78	subq	$0x88, %rsp
0000000001004a7f	movq	%rbp, 0x80(%rsp)
0000000001004a87	leaq	0x80(%rsp), %rbp
0000000001004a8f	movq	0x90(%rsp), %rax
0000000001004a97	testq	%rax, %rax
0000000001004a9a	je	0x1005040
0000000001004aa0	movzbl	0xa0(%rsp), %ecx
0000000001004aa8	testb	%cl, %cl
0000000001004aaa	je	0x1004ff0
0000000001004ab0	cmpq	$0x0, 0xd0090(%rip)
0000000001004ab8	ja	0x1004fda
0000000001004abe	xorl	%edx, %edx
0000000001004ac0	movq	%rdx, 0x28(%rsp)
0000000001004ac5	leaq	0x58(%rax), %rcx
0000000001004ac9	movq	%rcx, 0x68(%rsp)
0000000001004ace	movq	%rcx, (%rsp)
0000000001004ad2	callq	runtime.lock
0000000001004ad7	movq	0x90(%rsp), %rax
0000000001004adf	cmpl	$0x0, 0x1c(%rax)
0000000001004ae3	je	0x1004aef
0000000001004ae5	cmpq	$0x0, (%rax)
0000000001004ae9	je	0x1004f83
0000000001004aef	leaq	0x48(%rax), %rcx
0000000001004af3	movq	%rcx, (%rsp)
0000000001004af7	callq	"runtime.(*waitq).dequeue"
0000000001004afc	movq	0x8(%rsp), %rax
0000000001004b01	testq	%rax, %rax
0000000001004b04	jne	0x1004f14
0000000001004b0a	movq	0x90(%rsp), %rax
0000000001004b12	cmpq	$0x0, (%rax)
0000000001004b16	jbe	0x1004bcf
0000000001004b1c	movq	0x30(%rax), %rcx
0000000001004b20	movzwl	0x18(%rax), %edx
0000000001004b24	imulq	%rdx, %rcx
0000000001004b28	addq	0x10(%rax), %rcx
0000000001004b2c	movq	0x98(%rsp), %rdx
0000000001004b34	testq	%rdx, %rdx
0000000001004b37	jne	0x1004ba1
0000000001004b39	movq	0x20(%rax), %rdx
0000000001004b3d	movq	%rdx, (%rsp)
0000000001004b41	movq	%rcx, 0x8(%rsp)
0000000001004b46	callq	runtime.typedmemclr
0000000001004b4b	movq	0x90(%rsp), %rax
0000000001004b53	movq	0x30(%rax), %rcx
0000000001004b57	incq	%rcx
0000000001004b5a	movq	%rcx, 0x30(%rax)
0000000001004b5e	movq	0x8(%rax), %rdx
0000000001004b62	cmpq	%rdx, %rcx
0000000001004b65	jne	0x1004b6f
0000000001004b67	movq	$0x0, 0x30(%rax)
0000000001004b6f	addq	$-0x1, (%rax)
0000000001004b73	movq	0x68(%rsp), %rax
0000000001004b78	movq	%rax, (%rsp)
0000000001004b7c	callq	runtime.unlock
0000000001004b81	movb	$0x1, 0xa8(%rsp)
0000000001004b89	movb	$0x1, 0xa9(%rsp)
0000000001004b91	movq	0x80(%rsp), %rbp
0000000001004b99	addq	$0x88, %rsp
0000000001004ba0	retq
0000000001004ba1	movq	%rcx, 0x40(%rsp)
0000000001004ba6	movq	0x20(%rax), %rbx
0000000001004baa	movq	%rbx, (%rsp)
0000000001004bae	movq	%rdx, 0x8(%rsp)
0000000001004bb3	movq	%rcx, 0x10(%rsp)
0000000001004bb8	callq	runtime.typedmemmove
0000000001004bbd	movq	0x90(%rsp), %rax
0000000001004bc5	movq	0x40(%rsp), %rcx
0000000001004bca	jmp	0x1004b39
0000000001004bcf	movzbl	0xa0(%rsp), %ecx
0000000001004bd7	testb	%cl, %cl
0000000001004bd9	jne	0x1004c09
0000000001004bdb	movq	0x68(%rsp), %rax
0000000001004be0	movq	%rax, (%rsp)
0000000001004be4	callq	runtime.unlock
0000000001004be9	movb	$0x0, 0xa8(%rsp)
0000000001004bf1	movb	$0x0, 0xa9(%rsp)
0000000001004bf9	movq	0x80(%rsp), %rbp
0000000001004c01	addq	$0x88, %rsp
0000000001004c08	retq
0000000001004c09	movq	%gs:0x30, %rax
0000000001004c12	movq	%rax, 0x48(%rsp)
0000000001004c17	callq	runtime.acquireSudog
0000000001004c1c	movq	(%rsp), %rax
0000000001004c20	movq	$0x0, 0x30(%rax)
0000000001004c28	movq	0x28(%rsp), %rcx
0000000001004c2d	testq	%rcx, %rcx
0000000001004c30	je	0x1004c3a
0000000001004c32	movq	$-0x1, 0x30(%rax)
0000000001004c3a	cmpl	$0x0, 0xcffef(%rip)
0000000001004c41	jne	0x1004eed
0000000001004c47	movq	0x98(%rsp), %rdx
0000000001004c4f	movq	%rdx, 0x20(%rax)
0000000001004c53	movq	$0x0, 0x48(%rax)
0000000001004c5b	movq	0x48(%rsp), %rdx
0000000001004c60	testb	%al, (%rdx)
0000000001004c62	leaq	0x138(%rdx), %rdi
0000000001004c69	cmpl	$0x0, 0xcffc0(%rip)
0000000001004c70	jne	0x1004ecf
0000000001004c76	movq	%rax, 0x138(%rdx)
0000000001004c7d	movq	%rdx, (%rax)
0000000001004c80	movb	$0x0, 0x8(%rax)
0000000001004c84	leaq	0x58(%rax), %rbx
0000000001004c88	leaq	0x88(%rdx), %rsi
0000000001004c8f	cmpl	$0x0, 0xcff9a(%rip)
0000000001004c96	jne	0x1004e90
0000000001004c9c	movq	0x90(%rsp), %r8
0000000001004ca4	movq	%r8, 0x58(%rax)
0000000001004ca8	movq	$0x0, 0x88(%rdx)
0000000001004cb3	movq	$0x0, 0x10(%rax)
0000000001004cbb	movq	%rax, 0x38(%rsp)
0000000001004cc0	movq	%rdi, 0x60(%rsp)
0000000001004cc5	movq	%rbx, 0x58(%rsp)
0000000001004cca	movq	%rsi, 0x50(%rsp)
0000000001004ccf	leaq	0x38(%r8), %r9
0000000001004cd3	testb	%al, (%r9)
0000000001004cd6	movq	0x40(%r8), %r9
0000000001004cda	leaq	0x40(%r8), %r10
0000000001004cde	testq	%r9, %r9
0000000001004ce1	je	0x1004e42
0000000001004ce7	cmpl	$0x0, 0xcff42(%rip)
0000000001004cee	jne	0x1004e11
0000000001004cf4	movq	%r9, 0x18(%rax)
0000000001004cf8	movq	%rax, 0x10(%r9)
0000000001004cfc	movq	%rax, 0x40(%r8)
0000000001004d00	movq	0x68(%rsp), %rax
0000000001004d05	movq	%rax, (%rsp)
0000000001004d09	movw	$0x170d, 0x8(%rsp)
0000000001004d10	movq	$0x3, 0x10(%rsp)
0000000001004d19	callq	runtime.goparkunlock
0000000001004d1e	movq	0x48(%rsp), %rax
0000000001004d23	movq	0x138(%rax), %rcx
0000000001004d2a	movq	0x38(%rsp), %rdx
0000000001004d2f	cmpq	%rcx, %rdx
0000000001004d32	jne	0x100506c
0000000001004d38	cmpl	$0x0, 0xcfef1(%rip)
0000000001004d3f	jne	0x1004dfa
0000000001004d45	movq	$0x0, 0x138(%rax)
0000000001004d50	movq	0x30(%rdx), %rcx
0000000001004d54	testq	%rcx, %rcx
0000000001004d57	jg	0x1004dd1
0000000001004d59	movq	0x88(%rax), %rcx
0000000001004d60	movq	%rcx, 0x30(%rsp)
0000000001004d65	cmpq	$0x0, %rcx
0000000001004d69	cmpl	$0x0, 0xcfec0(%rip)
0000000001004d70	jne	0x1004db7
0000000001004d72	movq	$0x0, 0x88(%rax)
0000000001004d7d	movq	$0x0, 0x58(%rdx)
0000000001004d85	movq	%rdx, (%rsp)
0000000001004d89	callq	runtime.releaseSudog
0000000001004d8e	movb	$0x1, 0xa8(%rsp)
0000000001004d96	movq	0x30(%rsp), %rax
0000000001004d9b	cmpq	$0x0, %rax
0000000001004d9f	setne	0xa9(%rsp)
0000000001004da7	movq	0x80(%rsp), %rbp
0000000001004daf	addq	$0x88, %rsp
0000000001004db6	retq
0000000001004db7	movq	0x50(%rsp), %rdi
0000000001004dbc	xorl	%eax, %eax
0000000001004dbe	callq	runtime.gcWriteBarrier
0000000001004dc3	movq	0x58(%rsp), %rdi
0000000001004dc8	xorl	%eax, %eax
0000000001004dca	callq	runtime.gcWriteBarrier
0000000001004dcf	jmp	0x1004d85
0000000001004dd1	movq	0x28(%rsp), %rax
0000000001004dd6	subq	%rax, %rcx
0000000001004dd9	movq	%rcx, (%rsp)
0000000001004ddd	movq	$0x2, 0x8(%rsp)
0000000001004de6	callq	runtime.blockevent
0000000001004deb	movq	0x48(%rsp), %rax
0000000001004df0	movq	0x38(%rsp), %rdx
0000000001004df5	jmp	0x1004d59
0000000001004dfa	movq	0x60(%rsp), %rdi
0000000001004dff	movq	%rax, %rcx
0000000001004e02	xorl	%eax, %eax
0000000001004e04	callq	runtime.gcWriteBarrier
0000000001004e09	movq	%rcx, %rax
0000000001004e0c	jmp	0x1004d50
0000000001004e11	leaq	0x18(%rax), %r8
0000000001004e15	movq	%rdi, %r11
0000000001004e18	movq	%r8, %rdi
0000000001004e1b	movq	%rax, %r12
0000000001004e1e	movq	%r9, %rax
0000000001004e21	callq	runtime.gcWriteBarrier
0000000001004e26	leaq	0x10(%rax), %rdi
0000000001004e2a	movq	%r12, %rax
0000000001004e2d	callq	runtime.gcWriteBarrier
0000000001004e32	movq	%r10, %rdi
0000000001004e35	callq	runtime.gcWriteBarrier
0000000001004e3a	movq	%r11, %rdi
0000000001004e3d	jmp	0x1004d00
0000000001004e42	cmpl	$0x0, 0xcfde7(%rip)
0000000001004e49	jne	0x1004e60
0000000001004e4b	movq	$0x0, 0x18(%rax)
0000000001004e53	movq	%rax, 0x38(%r8)
0000000001004e57	movq	%rax, 0x40(%r8)
0000000001004e5b	jmp	0x1004d00
0000000001004e60	leaq	0x18(%rax), %r9
0000000001004e64	movq	%rdi, %r11
0000000001004e67	movq	%r9, %rdi
0000000001004e6a	movq	%rax, %r12
0000000001004e6d	xorl	%eax, %eax
0000000001004e6f	callq	runtime.gcWriteBarrier
0000000001004e74	leaq	0x38(%r8), %rdi
0000000001004e78	movq	%r12, %rax
0000000001004e7b	callq	runtime.gcWriteBarrier
0000000001004e80	movq	%r10, %rdi
0000000001004e83	callq	runtime.gcWriteBarrier
0000000001004e88	movq	%r11, %rdi
0000000001004e8b	jmp	0x1004d00
0000000001004e90	movq	%rdi, %r8
0000000001004e93	movq	%rbx, %rdi
0000000001004e96	movq	%rax, %r9
0000000001004e99	movq	0x90(%rsp), %rax
0000000001004ea1	callq	runtime.gcWriteBarrier
0000000001004ea6	movq	%rsi, %rdi
0000000001004ea9	movq	%rax, %r10
0000000001004eac	xorl	%eax, %eax
0000000001004eae	callq	runtime.gcWriteBarrier
0000000001004eb3	leaq	0x10(%r9), %r11
0000000001004eb7	movq	%r11, %rdi
0000000001004eba	xorl	%eax, %eax
0000000001004ebc	callq	runtime.gcWriteBarrier
0000000001004ec1	movq	%r9, %rax
0000000001004ec4	movq	%r8, %rdi
0000000001004ec7	movq	%r10, %r8
0000000001004eca	jmp	0x1004cbb
0000000001004ecf	callq	runtime.gcWriteBarrier
0000000001004ed4	movq	%rdi, %rbx
0000000001004ed7	movq	%rax, %rdi
0000000001004eda	movq	%rdx, %rax
0000000001004edd	callq	runtime.gcWriteBarrier
0000000001004ee2	movq	%rdi, %rax
0000000001004ee5	movq	%rbx, %rdi
0000000001004ee8	jmp	0x1004c80
0000000001004eed	leaq	0x20(%rax), %rdi
0000000001004ef1	movq	%rax, %rdx
0000000001004ef4	movq	0x98(%rsp), %rax
0000000001004efc	callq	runtime.gcWriteBarrier
0000000001004f01	leaq	0x48(%rdx), %rdi
0000000001004f05	xorl	%eax, %eax
0000000001004f07	callq	runtime.gcWriteBarrier
0000000001004f0c	movq	%rdx, %rax
0000000001004f0f	jmp	0x1004c5b
0000000001004f14	xorps	%xmm0, %xmm0
0000000001004f17	movups	%xmm0, 0x70(%rsp)
0000000001004f1c	leaq	runtime.chanrecv.func1(%rip), %rcx
0000000001004f23	movq	%rcx, 0x70(%rsp)
0000000001004f28	movq	0x90(%rsp), %rcx
0000000001004f30	movq	%rcx, 0x78(%rsp)
0000000001004f35	movq	%rcx, (%rsp)
0000000001004f39	movq	%rax, 0x8(%rsp)
0000000001004f3e	movq	0x98(%rsp), %rax
0000000001004f46	movq	%rax, 0x10(%rsp)
0000000001004f4b	leaq	0x70(%rsp), %rax
0000000001004f50	movq	%rax, 0x18(%rsp)
0000000001004f55	movq	$0x3, 0x20(%rsp)
0000000001004f5e	callq	runtime.recv
0000000001004f63	movb	$0x1, 0xa8(%rsp)
0000000001004f6b	movb	$0x1, 0xa9(%rsp)
0000000001004f73	movq	0x80(%rsp), %rbp
0000000001004f7b	addq	$0x88, %rsp
0000000001004f82	retq
0000000001004f83	movq	0x68(%rsp), %rax
0000000001004f88	movq	%rax, (%rsp)
0000000001004f8c	callq	runtime.unlock
0000000001004f91	movq	0x98(%rsp), %rax
0000000001004f99	testq	%rax, %rax
0000000001004f9c	jne	0x1004fbe
0000000001004f9e	movb	$0x1, 0xa8(%rsp)
0000000001004fa6	movb	$0x0, 0xa9(%rsp)
0000000001004fae	movq	0x80(%rsp), %rbp
0000000001004fb6	addq	$0x88, %rsp
0000000001004fbd	retq
0000000001004fbe	movq	0x90(%rsp), %rcx
0000000001004fc6	movq	0x20(%rcx), %rcx
0000000001004fca	movq	%rcx, (%rsp)
0000000001004fce	movq	%rax, 0x8(%rsp)
0000000001004fd3	callq	runtime.typedmemclr
0000000001004fd8	jmp	0x1004f9e
0000000001004fda	callq	runtime.cputicks
0000000001004fdf	movq	(%rsp), %rdx
0000000001004fe3	movq	0x90(%rsp), %rax
0000000001004feb	jmp	0x1004ac0
0000000001004ff0	movq	0x8(%rax), %rdx
0000000001004ff4	testq	%rdx, %rdx
0000000001004ff7	jne	0x1005003
0000000001004ff9	cmpq	$0x0, 0x48(%rax)
0000000001004ffe	je	0x1005015
0000000001005000	testq	%rdx, %rdx
0000000001005003	jbe	0x1004ab0
0000000001005009	movq	(%rax), %rdx
000000000100500c	testq	%rdx, %rdx
000000000100500f	jne	0x1004ab0
0000000001005015	movl	0x1c(%rax), %edx
0000000001005018	testl	%edx, %edx
000000000100501a	jne	0x1004ab0
0000000001005020	movb	$0x0, 0xa8(%rsp)
0000000001005028	movb	$0x0, 0xa9(%rsp)
0000000001005030	movq	0x80(%rsp), %rbp
0000000001005038	addq	$0x88, %rsp
000000000100503f	retq
0000000001005040	movzbl	0xa0(%rsp), %eax
0000000001005048	testb	%al, %al
000000000100504a	jne	0x1005087
000000000100504c	movb	$0x0, 0xa8(%rsp)
0000000001005054	movb	$0x0, 0xa9(%rsp)
000000000100505c	movq	0x80(%rsp), %rbp
0000000001005064	addq	$0x88, %rsp
000000000100506b	retq
000000000100506c	leaq	0x67985(%rip), %rax
0000000001005073	movq	%rax, (%rsp)
0000000001005077	movq	$0x1b, 0x8(%rsp)
0000000001005080	callq	runtime.throw
0000000001005085	ud2
0000000001005087	xorps	%xmm0, %xmm0
000000000100508a	movups	%xmm0, (%rsp)
000000000100508e	movw	$0x1003, 0x10(%rsp)
0000000001005095	movq	$0x2, 0x18(%rsp)
000000000100509e	callq	runtime.gopark
00000000010050a3	leaq	0x6614b(%rip), %rax
00000000010050aa	movq	%rax, (%rsp)
00000000010050ae	movq	$0xb, 0x8(%rsp)
00000000010050b7	callq	runtime.throw
00000000010050bc	ud2
00000000010050be	callq	runtime.morestack_noctxt
00000000010050c3	jmp	runtime.chanrecv
00000000010050c8	int3
00000000010050c9	int3
00000000010050ca	int3
00000000010050cb	int3
00000000010050cc	int3
00000000010050cd	int3
00000000010050ce	int3
00000000010050cf	int3
runtime.recv:
00000000010050d0	movq	%gs:0x30, %rcx
00000000010050d9	cmpq	0x10(%rcx), %rsp
00000000010050dd	jbe	0x1005278
00000000010050e3	subq	$0x30, %rsp
00000000010050e7	movq	%rbp, 0x28(%rsp)
00000000010050ec	leaq	0x28(%rsp), %rbp
00000000010050f1	movq	0x38(%rsp), %rcx
00000000010050f6	cmpq	$0x0, 0x8(%rcx)
00000000010050fb	jne	0x10051e8
0000000001005101	movq	0x48(%rsp), %rbx
0000000001005106	testq	%rbx, %rbx
0000000001005109	jne	0x10051c7
000000000100510f	movq	0x40(%rsp), %rcx
0000000001005114	testb	%al, (%rcx)
0000000001005116	cmpl	$0x0, 0xcfb13(%rip)
000000000100511d	jne	0x10051b7
0000000001005123	movq	$0x0, 0x20(%rcx)
000000000100512b	movq	(%rcx), %rax
000000000100512e	movq	%rax, 0x20(%rsp)
0000000001005133	movq	0x50(%rsp), %rdx
0000000001005138	movq	(%rdx), %rbx
000000000100513b	callq	*%rbx
000000000100513d	movq	0x20(%rsp), %rax
0000000001005142	testb	%al, (%rax)
0000000001005144	cmpl	$0x0, 0xcfae5(%rip)
000000000100514b	jne	0x1005199
000000000100514d	movq	0x40(%rsp), %rcx
0000000001005152	movq	%rcx, 0x88(%rax)
0000000001005159	cmpq	$0x0, 0x30(%rcx)
000000000100515e	jne	0x1005180
0000000001005160	movq	%rax, (%rsp)
0000000001005164	movq	0x58(%rsp), %rax
0000000001005169	incq	%rax
000000000100516c	movq	%rax, 0x8(%rsp)
0000000001005171	callq	runtime.goready
0000000001005176	movq	0x28(%rsp), %rbp
000000000100517b	addq	$0x30, %rsp
000000000100517f	retq
0000000001005180	callq	runtime.cputicks
0000000001005185	movq	(%rsp), %rax
0000000001005189	movq	0x40(%rsp), %rcx
000000000100518e	movq	%rax, 0x30(%rcx)
0000000001005192	movq	0x20(%rsp), %rax
0000000001005197	jmp	0x1005160
0000000001005199	leaq	0x88(%rax), %rdi
00000000010051a0	movq	%rax, %rcx
00000000010051a3	movq	0x40(%rsp), %rax
00000000010051a8	callq	runtime.gcWriteBarrier
00000000010051ad	movq	%rcx, %rax
00000000010051b0	movq	0x40(%rsp), %rcx
00000000010051b5	jmp	0x1005159
00000000010051b7	leaq	0x20(%rcx), %rdi
00000000010051bb	xorl	%eax, %eax
00000000010051bd	callq	runtime.gcWriteBarrier
00000000010051c2	jmp	0x100512b
00000000010051c7	movq	0x20(%rcx), %rax
00000000010051cb	movq	%rax, (%rsp)
00000000010051cf	movq	0x40(%rsp), %rax
00000000010051d4	movq	%rax, 0x8(%rsp)
00000000010051d9	movq	%rbx, 0x10(%rsp)
00000000010051de	callq	runtime.recvDirect
00000000010051e3	jmp	0x100510f
00000000010051e8	movq	0x30(%rcx), %rax
00000000010051ec	movzwl	0x18(%rcx), %edx
00000000010051f0	imulq	%rdx, %rax
00000000010051f4	addq	0x10(%rcx), %rax
00000000010051f8	movq	0x48(%rsp), %rdx
00000000010051fd	testq	%rdx, %rdx
0000000001005200	jne	0x1005250
0000000001005202	movq	0x20(%rcx), %rdx
0000000001005206	movq	0x40(%rsp), %rbx
000000000100520b	movq	0x20(%rbx), %rsi
000000000100520f	movq	%rsi, 0x10(%rsp)
0000000001005214	movq	%rdx, (%rsp)
0000000001005218	movq	%rax, 0x8(%rsp)
000000000100521d	callq	runtime.typedmemmove
0000000001005222	movq	0x38(%rsp), %rax
0000000001005227	movq	0x30(%rax), %rcx
000000000100522b	incq	%rcx
000000000100522e	movq	%rcx, 0x30(%rax)
0000000001005232	movq	0x8(%rax), %rdx
0000000001005236	cmpq	%rdx, %rcx
0000000001005239	jne	0x1005243
000000000100523b	movq	$0x0, 0x30(%rax)
0000000001005243	movq	0x30(%rax), %rcx
0000000001005247	movq	%rcx, 0x28(%rax)
000000000100524b	jmp	0x100510f
0000000001005250	movq	%rax, 0x18(%rsp)
0000000001005255	movq	0x20(%rcx), %rbx
0000000001005259	movq	%rbx, (%rsp)
000000000100525d	movq	%rdx, 0x8(%rsp)
0000000001005262	movq	%rax, 0x10(%rsp)
0000000001005267	callq	runtime.typedmemmove
000000000100526c	movq	0x18(%rsp), %rax
0000000001005271	movq	0x38(%rsp), %rcx
0000000001005276	jmp	0x1005202
0000000001005278	callq	runtime.morestack_noctxt
000000000100527d	jmp	runtime.recv
0000000001005282	int3
0000000001005283	int3
0000000001005284	int3
0000000001005285	int3
0000000001005286	int3
0000000001005287	int3
0000000001005288	int3
0000000001005289	int3
000000000100528a	int3
000000000100528b	int3
000000000100528c	int3
000000000100528d	int3
000000000100528e	int3
000000000100528f	int3
runtime.(*waitq).dequeue:
0000000001005290	movq	%gs:0x30, %rcx
0000000001005299	cmpq	0x10(%rcx), %rsp
000000000100529d	jbe	0x1005376
00000000010052a3	subq	$0x8, %rsp
00000000010052a7	movq	%rbp, (%rsp)
00000000010052ab	leaq	(%rsp), %rbp
00000000010052af	movq	0x10(%rsp), %rcx
00000000010052b4	movq	(%rcx), %rdx
00000000010052b7	testq	%rdx, %rdx
00000000010052ba	je	0x1005364
00000000010052c0	movq	0x10(%rdx), %rbx
00000000010052c4	testq	%rbx, %rbx
00000000010052c7	je	0x100533b
00000000010052c9	cmpl	$0x0, 0xcf960(%rip)
00000000010052d0	jne	0x1005315
00000000010052d2	movq	$0x0, 0x18(%rbx)
00000000010052da	movq	%rbx, (%rcx)
00000000010052dd	movq	$0x0, 0x10(%rdx)
00000000010052e5	leaq	0x8(%rdx), %rbx
00000000010052e9	cmpb	$0x0, (%rbx)
00000000010052ec	je	0x1005307
00000000010052ee	movq	(%rdx), %rbx
00000000010052f1	xorl	%eax, %eax
00000000010052f3	movl	$0x1, %esi
00000000010052f8	lock
00000000010052f9	cmpxchgl	%esi, 0x168(%rbx)
0000000001005300	sete	%bl
0000000001005303	testb	%bl, %bl
0000000001005305	je	0x10052b4
0000000001005307	movq	%rdx, 0x18(%rsp)
000000000100530c	movq	(%rsp), %rbp
0000000001005310	addq	$0x8, %rsp
0000000001005314	retq
0000000001005315	leaq	0x18(%rbx), %rdi
0000000001005319	xorl	%eax, %eax
000000000100531b	callq	runtime.gcWriteBarrier
0000000001005320	movq	%rcx, %rdi
0000000001005323	movq	%rbx, %rax
0000000001005326	callq	runtime.gcWriteBarrier
000000000100532b	leaq	0x10(%rdx), %rbx
000000000100532f	movq	%rbx, %rdi
0000000001005332	xorl	%eax, %eax
0000000001005334	callq	runtime.gcWriteBarrier
0000000001005339	jmp	0x10052e5
000000000100533b	cmpl	$0x0, 0xcf8ee(%rip)
0000000001005342	jne	0x100534c
0000000001005344	xorps	%xmm0, %xmm0
0000000001005347	movups	%xmm0, (%rcx)
000000000100534a	jmp	0x10052e5
000000000100534c	movq	%rcx, %rdi
000000000100534f	xorl	%eax, %eax
0000000001005351	callq	runtime.gcWriteBarrier
0000000001005356	leaq	0x8(%rcx), %rbx
000000000100535a	movq	%rbx, %rdi
000000000100535d	callq	runtime.gcWriteBarrier
0000000001005362	jmp	0x10052e5
0000000001005364	movq	$0x0, 0x18(%rsp)
000000000100536d	movq	(%rsp), %rbp
0000000001005371	addq	$0x8, %rsp
0000000001005375	retq
0000000001005376	callq	runtime.morestack_noctxt
000000000100537b	jmp	"runtime.(*waitq).dequeue"
runtime.init.0:
0000000001005380	movl	runtime.processorVersionInfo(%rip), %eax
0000000001005386	andl	$0xfff3ff0, %eax
000000000100538b	leaq	runtime.isIntel(%rip), %rcx
0000000001005392	cmpb	$0x0, (%rcx)
0000000001005395	je	0x10053bd
0000000001005397	cmpl	$0x206a0, %eax
000000000100539c	jne	0x10053bd
000000000100539e	movl	$0x1, %eax
00000000010053a3	leaq	0xcfb38(%rip), %rcx
00000000010053aa	cmpb	$0x0, (%rcx)
00000000010053ad	je	0x10053b9
00000000010053af	xorl	$0x1, %eax
00000000010053b2	movb	%al, runtime.useAVXmemmove(%rip)
00000000010053b8	retq
00000000010053b9	xorl	%eax, %eax
00000000010053bb	jmp	0x10053b2
00000000010053bd	cmpl	$0x206d0, %eax
00000000010053c2	jne	0x10053cb
00000000010053c4	movl	$0x1, %eax
00000000010053c9	jmp	0x10053a3
00000000010053cb	cmpl	$0x306a0, %eax
00000000010053d0	jne	0x10053d9
00000000010053d2	movl	$0x1, %eax
00000000010053d7	jmp	0x10053a3
00000000010053d9	cmpl	$0x306e0, %eax
00000000010053de	sete	%al
00000000010053e1	jmp	0x10053a3
00000000010053e3	int3
00000000010053e4	int3
00000000010053e5	int3
00000000010053e6	int3
00000000010053e7	int3
00000000010053e8	int3
00000000010053e9	int3
00000000010053ea	int3
00000000010053eb	int3
00000000010053ec	int3
00000000010053ed	int3
00000000010053ee	int3
00000000010053ef	int3
runtime.(*cpuProfile).add:
00000000010053f0	movq	%gs:0x30, %rcx
00000000010053f9	cmpq	0x10(%rcx), %rsp
00000000010053fd	jbe	0x1005503
0000000001005403	subq	$0x58, %rsp
0000000001005407	movq	%rbp, 0x50(%rsp)
000000000100540c	leaq	0x50(%rsp), %rbp
0000000001005411	jmp	0x1005418
0000000001005413	callq	runtime.osyield
0000000001005418	xorl	%eax, %eax
000000000100541a	leaq	runtime.prof(%rip), %rcx
0000000001005421	movl	$0x1, %edx
0000000001005426	lock
0000000001005427	cmpxchgl	%edx, (%rcx)
000000000100542a	sete	%bl
000000000100542d	testb	%bl, %bl
000000000100542f	je	0x1005413
0000000001005431	cmpl	$0x0, 0xcf794(%rip)
0000000001005438	je	0x10054db
000000000100543e	movq	0x60(%rsp), %rax
0000000001005443	testb	%al, (%rax)
0000000001005445	cmpq	$0x0, 0x1f58(%rax)
000000000100544d	jle	0x10054f0
0000000001005453	movq	%rax, (%rsp)
0000000001005457	callq	"runtime.(*cpuProfile).addExtra"
000000000100545c	movq	$0x0, 0x48(%rsp)
0000000001005465	movq	$0x1, 0x48(%rsp)
000000000100546e	callq	runtime.nanotime
0000000001005473	movq	0x68(%rsp), %rax
0000000001005478	testb	%al, (%rax)
000000000100547a	addq	$0x158, %rax
0000000001005480	movq	(%rsp), %rcx
0000000001005484	movq	%rax, 0x8(%rsp)
0000000001005489	movq	0xb40a0(%rip), %rax
0000000001005490	movq	%rax, (%rsp)
0000000001005494	movq	%rcx, 0x10(%rsp)
0000000001005499	leaq	0x48(%rsp), %rax
000000000100549e	movq	%rax, 0x18(%rsp)
00000000010054a3	movq	$0x1, 0x20(%rsp)
00000000010054ac	movq	$0x1, 0x28(%rsp)
00000000010054b5	movq	0x70(%rsp), %rax
00000000010054ba	movq	%rax, 0x30(%rsp)
00000000010054bf	movq	0x78(%rsp), %rax
00000000010054c4	movq	%rax, 0x38(%rsp)
00000000010054c9	movq	0x80(%rsp), %rax
00000000010054d1	movq	%rax, 0x40(%rsp)
00000000010054d6	callq	"runtime.(*profBuf).write"
00000000010054db	xorl	%eax, %eax
00000000010054dd	leaq	runtime.prof(%rip), %rcx
00000000010054e4	xchgl	%eax, (%rcx)
00000000010054e6	movq	0x50(%rsp), %rbp
00000000010054eb	addq	$0x58, %rsp
00000000010054ef	retq
00000000010054f0	cmpq	$0x0, 0x1f60(%rax)
00000000010054f8	ja	0x1005453
00000000010054fe	jmp	0x100545c
0000000001005503	callq	runtime.morestack_noctxt
0000000001005508	jmp	"runtime.(*cpuProfile).add"
000000000100550d	int3
000000000100550e	int3
000000000100550f	int3
runtime.(*cpuProfile).addNonGo:
0000000001005510	subq	$0x20, %rsp
0000000001005514	movq	%rbp, 0x18(%rsp)
0000000001005519	leaq	0x18(%rsp), %rbp
000000000100551e	jmp	0x1005525
0000000001005520	callq	runtime.osyield
0000000001005525	xorl	%eax, %eax
0000000001005527	leaq	runtime.prof(%rip), %rcx
000000000100552e	movl	$0x1, %edx
0000000001005533	lock
0000000001005534	cmpxchgl	%edx, (%rcx)
0000000001005537	sete	%bl
000000000100553a	testb	%bl, %bl
000000000100553c	je	0x1005520
000000000100553e	movq	0xb5f33(%rip), %rax
0000000001005545	movq	0x38(%rsp), %rdx
000000000100554a	leaq	0x1(%rdx,%rax), %rbx
000000000100554f	cmpq	$0x3e8, %rbx
0000000001005556	jge	0x10055ee
000000000100555c	cmpq	$0x3e8, %rax
0000000001005562	jae	0x10055f7
0000000001005568	leaq	0x1(%rdx), %rbx
000000000100556c	leaq	0xb3fc5(%rip), %rsi
0000000001005573	movq	%rbx, (%rsi,%rax,8)
0000000001005577	testb	%al, (%rsi)
0000000001005579	leaq	-0x3e7(%rax), %rbx
0000000001005580	movq	%rbx, %rdi
0000000001005583	negq	%rbx
0000000001005586	cmpq	%rdx, %rbx
0000000001005589	cmovgq	%rdx, %rbx
000000000100558d	incq	%rax
0000000001005590	shlq	$0x3, %rax
0000000001005594	sarq	$0x3f, %rdi
0000000001005598	andq	%rdi, %rax
000000000100559b	addq	%rsi, %rax
000000000100559e	movq	0x30(%rsp), %rsi
00000000010055a3	cmpq	%rsi, %rax
00000000010055a6	jne	0x10055c9
00000000010055a8	movq	0xb5ec9(%rip), %rax
00000000010055af	leaq	0x1(%rax,%rdx), %rax
00000000010055b4	movq	%rax, 0xb5ebd(%rip)
00000000010055bb	xorl	%eax, %eax
00000000010055bd	xchgl	%eax, (%rcx)
00000000010055bf	movq	0x18(%rsp), %rbp
00000000010055c4	addq	$0x20, %rsp
00000000010055c8	retq
00000000010055c9	movq	%rax, (%rsp)
00000000010055cd	movq	%rsi, 0x8(%rsp)
00000000010055d2	shlq	$0x3, %rbx
00000000010055d6	movq	%rbx, 0x10(%rsp)
00000000010055db	callq	runtime.memmove
00000000010055e0	leaq	runtime.prof(%rip), %rcx
00000000010055e7	movq	0x38(%rsp), %rdx
00000000010055ec	jmp	0x10055a8
00000000010055ee	incq	0xb5e8b(%rip)
00000000010055f5	jmp	0x10055bb
00000000010055f7	callq	runtime.panicindex
00000000010055fc	ud2
00000000010055fe	int3
00000000010055ff	int3
runtime.(*cpuProfile).addExtra:
0000000001005600	movq	%gs:0x30, %rcx
0000000001005609	leaq	-0x18(%rsp), %rax
000000000100560e	cmpq	0x10(%rcx), %rax
0000000001005612	jbe	0x1005837
0000000001005618	subq	$0x98, %rsp
000000000100561f	movq	%rbp, 0x90(%rsp)
0000000001005627	leaq	0x90(%rsp), %rbp
000000000100562f	movq	$0x0, 0x58(%rsp)
0000000001005638	movq	$0x1, 0x58(%rsp)
0000000001005641	movq	0xa0(%rsp), %rax
0000000001005649	xorl	%ecx, %ecx
000000000100564b	jmp	0x10056d8
0000000001005650	movq	%rcx, 0x48(%rsp)
0000000001005655	movq	0x10(%rax), %rsi
0000000001005659	movq	%rsi, (%rsp)
000000000100565d	xorps	%xmm0, %xmm0
0000000001005660	movups	%xmm0, 0x8(%rsp)
0000000001005665	leaq	0x58(%rsp), %rsi
000000000100566a	movq	%rsi, 0x18(%rsp)
000000000100566f	movq	$0x1, 0x20(%rsp)
0000000001005678	movq	$0x1, 0x28(%rsp)
0000000001005681	leaq	-0x3e7(%rcx), %rdi
0000000001005688	movq	%rdi, %r8
000000000100568b	sarq	$0x3f, %rdi
000000000100568f	movq	%rdx, %r9
0000000001005692	shlq	$0x3, %rdx
0000000001005696	andq	%rdi, %rdx
0000000001005699	leaq	0x18(%rax,%rdx), %rdx
000000000100569e	movq	%rdx, 0x30(%rsp)
00000000010056a3	subq	%r9, %rbx
00000000010056a6	movq	%rbx, 0x38(%rsp)
00000000010056ab	negq	%r8
00000000010056ae	movq	%r8, 0x40(%rsp)
00000000010056b3	callq	"runtime.(*profBuf).write"
00000000010056b8	movq	0x48(%rsp), %rax
00000000010056bd	movq	0xa0(%rsp), %rcx
00000000010056c5	movq	0x18(%rcx,%rax,8), %rdx
00000000010056ca	addq	%rdx, %rax
00000000010056cd	movq	%rax, %rcx
00000000010056d0	movq	0xa0(%rsp), %rax
00000000010056d8	testb	%al, (%rax)
00000000010056da	movq	0x1f58(%rax), %rdx
00000000010056e1	cmpq	%rdx, %rcx
00000000010056e4	jge	0x1005720
00000000010056e6	cmpq	$0x3e8, %rcx
00000000010056ed	jae	0x1005829
00000000010056f3	leaq	0x18(%rax), %rdx
00000000010056f7	testb	%al, (%rdx)
00000000010056f9	leaq	0x1(%rcx), %rdx
00000000010056fd	movq	0x18(%rax,%rcx,8), %rbx
0000000001005702	addq	%rcx, %rbx
0000000001005705	cmpq	%rbx, %rdx
0000000001005708	ja	0x1005830
000000000100570e	cmpq	$0x3e8, %rbx
0000000001005715	jbe	0x1005650
000000000100571b	jmp	0x1005830
0000000001005720	movq	$0x0, 0x1f58(%rax)
000000000100572b	cmpq	$0x0, 0x1f60(%rax)
0000000001005733	ja	0x1005745
0000000001005735	movq	0x90(%rsp), %rbp
000000000100573d	addq	$0x98, %rsp
0000000001005744	retq
0000000001005745	movq	$0x0, 0x50(%rsp)
000000000100574e	movq	0x1f60(%rax), %rcx
0000000001005755	movq	%rcx, 0x50(%rsp)
000000000100575a	leaq	0x51f1f(%rip), %rcx
0000000001005761	movq	%rcx, 0x80(%rsp)
0000000001005769	leaq	0x695e0(%rip), %rdx
0000000001005770	movq	%rdx, 0x88(%rsp)
0000000001005778	testb	%al, (%rdx)
000000000100577a	leaq	0x88(%rsp), %rdx
0000000001005782	testb	%al, (%rdx)
0000000001005784	movq	0x695c5(%rip), %rdx
000000000100578b	movq	%rcx, 0x70(%rsp)
0000000001005790	leaq	0x695a9(%rip), %rcx
0000000001005797	movq	%rcx, 0x78(%rsp)
000000000100579c	testb	%al, (%rcx)
000000000100579e	leaq	0x78(%rsp), %rcx
00000000010057a3	testb	%al, (%rcx)
00000000010057a5	movq	0x69594(%rip), %rcx
00000000010057ac	xorps	%xmm0, %xmm0
00000000010057af	movups	%xmm0, 0x60(%rsp)
00000000010057b4	incq	%rdx
00000000010057b7	movq	%rdx, 0x60(%rsp)
00000000010057bc	incq	%rcx
00000000010057bf	movq	%rcx, 0x68(%rsp)
00000000010057c4	movq	0xb3d65(%rip), %rcx
00000000010057cb	movq	%rcx, (%rsp)
00000000010057cf	movups	%xmm0, 0x8(%rsp)
00000000010057d4	leaq	0x50(%rsp), %rcx
00000000010057d9	movq	%rcx, 0x18(%rsp)
00000000010057de	movq	$0x1, 0x20(%rsp)
00000000010057e7	movq	$0x1, 0x28(%rsp)
00000000010057f0	leaq	0x60(%rsp), %rcx
00000000010057f5	movq	%rcx, 0x30(%rsp)
00000000010057fa	movq	$0x2, 0x38(%rsp)
0000000001005803	movq	$0x2, 0x40(%rsp)
000000000100580c	callq	"runtime.(*profBuf).write"
0000000001005811	movq	0xa0(%rsp), %rax
0000000001005819	movq	$0x0, 0x1f60(%rax)
0000000001005824	jmp	0x1005735
0000000001005829	callq	runtime.panicindex
000000000100582e	ud2
0000000001005830	callq	runtime.panicslice
0000000001005835	ud2
0000000001005837	callq	runtime.morestack_noctxt
000000000100583c	jmp	"runtime.(*cpuProfile).addExtra"
0000000001005841	int3
0000000001005842	int3
0000000001005843	int3
0000000001005844	int3
0000000001005845	int3
0000000001005846	int3
0000000001005847	int3
0000000001005848	int3
0000000001005849	int3
000000000100584a	int3
000000000100584b	int3
000000000100584c	int3
000000000100584d	int3
000000000100584e	int3
000000000100584f	int3
runtime.debugCallCheck:
0000000001005850	subq	$0x38, %rsp
0000000001005854	movq	%rbp, 0x30(%rsp)
0000000001005859	leaq	0x30(%rsp), %rbp
000000000100585e	movq	%gs:0x30, %rax
0000000001005867	movq	0x30(%rax), %rcx
000000000100586b	movq	0xc0(%rcx), %rcx
0000000001005872	cmpq	%rcx, %rax
0000000001005875	jne	0x1005912
000000000100587b	movq	(%rax), %rcx
000000000100587e	leaq	0x40(%rsp), %rdx
0000000001005883	cmpq	%rdx, %rcx
0000000001005886	jae	0x1005891
0000000001005888	movq	0x8(%rax), %rax
000000000100588c	cmpq	%rax, %rdx
000000000100588f	jbe	0x10058b0
0000000001005891	leaq	0x676f9(%rip), %rax
0000000001005898	movq	%rax, 0x48(%rsp)
000000000100589d	movq	$0x1d, 0x50(%rsp)
00000000010058a6	movq	0x30(%rsp), %rbp
00000000010058ab	addq	$0x38, %rsp
00000000010058af	retq
00000000010058b0	xorps	%xmm0, %xmm0
00000000010058b3	movups	%xmm0, 0x8(%rsp)
00000000010058b8	movups	%xmm0, 0x18(%rsp)
00000000010058bd	movq	$0x0, 0x28(%rsp)
00000000010058c6	leaq	runtime.debugCallCheck.func1(%rip), %rax
00000000010058cd	movq	%rax, 0x18(%rsp)
00000000010058d2	leaq	0x40(%rsp), %rax
00000000010058d7	movq	%rax, 0x20(%rsp)
00000000010058dc	leaq	0x8(%rsp), %rax
00000000010058e1	movq	%rax, 0x28(%rsp)
00000000010058e6	leaq	0x18(%rsp), %rax
00000000010058eb	movq	%rax, (%rsp)
00000000010058ef	callq	runtime.systemstack
00000000010058f4	movq	0x8(%rsp), %rax
00000000010058f9	movq	0x10(%rsp), %rcx
00000000010058fe	movq	%rax, 0x48(%rsp)
0000000001005903	movq	%rcx, 0x50(%rsp)
0000000001005908	movq	0x30(%rsp), %rbp
000000000100590d	addq	$0x38, %rsp
0000000001005911	retq
0000000001005912	leaq	0x67678(%rip), %rax
0000000001005919	movq	%rax, 0x48(%rsp)
000000000100591e	movq	$0x1d, 0x50(%rsp)
0000000001005927	movq	0x30(%rsp), %rbp
000000000100592c	addq	$0x38, %rsp
0000000001005930	retq
0000000001005931	int3
0000000001005932	int3
0000000001005933	int3
0000000001005934	int3
0000000001005935	int3
0000000001005936	int3
0000000001005937	int3
0000000001005938	int3
0000000001005939	int3
000000000100593a	int3
000000000100593b	int3
000000000100593c	int3
000000000100593d	int3
000000000100593e	int3
000000000100593f	int3
runtime.debugCallWrap:
0000000001005940	movq	%gs:0x30, %rcx
0000000001005949	cmpq	0x10(%rcx), %rsp
000000000100594d	jbe	0x10059e1
0000000001005953	subq	$0x38, %rsp
0000000001005957	movq	%rbp, 0x30(%rsp)
000000000100595c	leaq	0x30(%rsp), %rbp
0000000001005961	movq	$0x0, 0x28(%rsp)
000000000100596a	movq	$0x0, 0x20(%rsp)
0000000001005973	movq	0x40(%rsp), %rax
0000000001005978	movq	%rax, 0x20(%rsp)
000000000100597d	leaq	0x20(%rsp), %rax
0000000001005982	movq	%rax, 0x28(%rsp)
0000000001005987	movb	$0x0, 0x1f(%rsp)
000000000100598c	leaq	0x1f(%rsp), %rax
0000000001005991	movq	%rax, 0x10(%rsp)
0000000001005996	movl	$0x8, (%rsp)
000000000100599d	leaq	0x69444(%rip), %rax
00000000010059a4	movq	%rax, 0x8(%rsp)
00000000010059a9	callq	runtime.deferproc
00000000010059ae	testl	%eax, %eax
00000000010059b0	jne	0x10059d1
00000000010059b2	movq	0x28(%rsp), %rdx
00000000010059b7	movq	(%rdx), %rax
00000000010059ba	callq	*%rax
00000000010059bc	movb	$0x1, 0x1f(%rsp)
00000000010059c1	nop
00000000010059c2	callq	runtime.deferreturn
00000000010059c7	movq	0x30(%rsp), %rbp
00000000010059cc	addq	$0x38, %rsp
00000000010059d0	retq
00000000010059d1	nop
00000000010059d2	callq	runtime.deferreturn
00000000010059d7	movq	0x30(%rsp), %rbp
00000000010059dc	addq	$0x38, %rsp
00000000010059e0	retq
00000000010059e1	callq	runtime.morestack_noctxt
00000000010059e6	jmp	runtime.debugCallWrap
00000000010059eb	int3
00000000010059ec	int3
00000000010059ed	int3
00000000010059ee	int3
00000000010059ef	int3
runtime.gogetenv:
00000000010059f0	movq	%gs:0x30, %rcx
00000000010059f9	cmpq	0x10(%rcx), %rsp
00000000010059fd	jbe	0x1005b10
0000000001005a03	subq	$0x50, %rsp
0000000001005a07	movq	%rbp, 0x48(%rsp)
0000000001005a0c	leaq	0x48(%rsp), %rbp
0000000001005a11	movq	0xb2e80(%rip), %rax
0000000001005a18	movq	runtime.envs(%rip), %rcx
0000000001005a1f	testq	%rcx, %rcx
0000000001005a22	je	0x1005af5
0000000001005a28	testq	%rax, %rax
0000000001005a2b	jle	0x1005a5e
0000000001005a2d	movq	%rax, 0x28(%rsp)
0000000001005a32	movq	0x60(%rsp), %rdx
0000000001005a37	xorl	%ebx, %ebx
0000000001005a39	jmp	0x1005a3f
0000000001005a3b	addq	$0x10, %rcx
0000000001005a3f	movq	0x8(%rcx), %rsi
0000000001005a43	movq	(%rcx), %rdi
0000000001005a46	cmpq	%rdx, %rsi
0000000001005a49	jle	0x1005a56
0000000001005a4b	movzbl	(%rdi,%rdx), %r8d
0000000001005a50	cmpb	$0x3d, %r8b
0000000001005a54	je	0x1005a70
0000000001005a56	incq	%rbx
0000000001005a59	cmpq	%rax, %rbx
0000000001005a5c	jl	0x1005a3b
0000000001005a5e	xorps	%xmm0, %xmm0
0000000001005a61	movups	%xmm0, 0x68(%rsp)
0000000001005a66	movq	0x48(%rsp), %rbp
0000000001005a6b	addq	$0x50, %rsp
0000000001005a6f	retq
0000000001005a70	movq	%rsi, 0x20(%rsp)
0000000001005a75	movq	%rcx, 0x40(%rsp)
0000000001005a7a	movq	%rbx, 0x30(%rsp)
0000000001005a7f	movq	%rdi, 0x38(%rsp)
0000000001005a84	movq	%rdi, (%rsp)
0000000001005a88	movq	0x58(%rsp), %rax
0000000001005a8d	movq	%rax, 0x8(%rsp)
0000000001005a92	movq	%rdx, 0x10(%rsp)
0000000001005a97	callq	runtime.memequal
0000000001005a9c	leaq	0x18(%rsp), %rax
0000000001005aa1	cmpb	$0x0, (%rax)
0000000001005aa4	jne	0x1005abc
0000000001005aa6	movq	0x28(%rsp), %rax
0000000001005aab	movq	0x40(%rsp), %rcx
0000000001005ab0	movq	0x60(%rsp), %rdx
0000000001005ab5	movq	0x30(%rsp), %rbx
0000000001005aba	jmp	0x1005a56
0000000001005abc	movq	0x60(%rsp), %rax
0000000001005ac1	incq	%rax
0000000001005ac4	movq	0x20(%rsp), %rcx
0000000001005ac9	subq	%rax, %rcx
0000000001005acc	movq	%rcx, %rdx
0000000001005acf	negq	%rcx
0000000001005ad2	sarq	$0x3f, %rcx
0000000001005ad6	andq	%rcx, %rax
0000000001005ad9	movq	0x38(%rsp), %rcx
0000000001005ade	addq	%rcx, %rax
0000000001005ae1	movq	%rax, 0x68(%rsp)
0000000001005ae6	movq	%rdx, 0x70(%rsp)
0000000001005aeb	movq	0x48(%rsp), %rbp
0000000001005af0	addq	$0x50, %rsp
0000000001005af4	retq
0000000001005af5	leaq	0x66659(%rip), %rax
0000000001005afc	movq	%rax, (%rsp)
0000000001005b00	movq	$0x16, 0x8(%rsp)
0000000001005b09	callq	runtime.throw
0000000001005b0e	ud2
0000000001005b10	callq	runtime.morestack_noctxt
0000000001005b15	jmp	runtime.gogetenv
0000000001005b1a	int3
0000000001005b1b	int3
0000000001005b1c	int3
0000000001005b1d	int3
0000000001005b1e	int3
0000000001005b1f	int3
runtime.(*TypeAssertionError).Error:
0000000001005b20	movq	%gs:0x30, %rcx
0000000001005b29	leaq	-0xf0(%rsp), %rax
0000000001005b31	cmpq	0x10(%rcx), %rax
0000000001005b35	jbe	0x1005f64
0000000001005b3b	subq	$0x170, %rsp
0000000001005b42	movq	%rbp, 0x168(%rsp)
0000000001005b4a	leaq	0x168(%rsp), %rbp
0000000001005b52	movq	0x178(%rsp), %rax
0000000001005b5a	movq	(%rax), %rcx
0000000001005b5d	testq	%rcx, %rcx
0000000001005b60	jne	0x1005f44
0000000001005b66	movl	$0x9, %ecx
0000000001005b6b	leaq	0x653ff(%rip), %rdx
0000000001005b72	movq	%rcx, 0x60(%rsp)
0000000001005b77	movq	%rdx, 0x88(%rsp)
0000000001005b7f	movq	0x10(%rax), %rbx
0000000001005b83	movq	%rbx, (%rsp)
0000000001005b87	callq	"runtime.(*_type).string"
0000000001005b8c	movq	0x8(%rsp), %rax
0000000001005b91	movq	0x10(%rsp), %rcx
0000000001005b96	movq	0x178(%rsp), %rdx
0000000001005b9e	movq	0x8(%rdx), %rbx
0000000001005ba2	testq	%rbx, %rbx
0000000001005ba5	je	0x1005ec2
0000000001005bab	movq	%rax, 0x98(%rsp)
0000000001005bb3	movq	%rcx, 0x70(%rsp)
0000000001005bb8	movq	%rbx, (%rsp)
0000000001005bbc	callq	"runtime.(*_type).string"
0000000001005bc1	movq	0x10(%rsp), %rax
0000000001005bc6	movq	0x8(%rsp), %rcx
0000000001005bcb	movq	0x178(%rsp), %rdx
0000000001005bd3	cmpq	$0x0, 0x20(%rdx)
0000000001005bd8	jne	0x1005e05
0000000001005bde	movq	%rax, 0x68(%rsp)
0000000001005be3	movq	%rcx, 0x90(%rsp)
0000000001005beb	leaq	0x108(%rsp), %rdi
0000000001005bf3	leaq	runtime.statictmp_7(%rip), %rsi
0000000001005bfa	movq	%rbp, -0x10(%rsp)
0000000001005bff	leaq	-0x10(%rsp), %rbp
0000000001005c04	callq	0x104957c
0000000001005c09	movq	(%rbp), %rbp
0000000001005c0d	movq	0x88(%rsp), %rdx
0000000001005c15	movq	%rdx, 0x118(%rsp)
0000000001005c1d	movq	0x60(%rsp), %rdx
0000000001005c22	movq	%rdx, 0x120(%rsp)
0000000001005c2a	movq	%rcx, 0x138(%rsp)
0000000001005c32	movq	%rax, 0x140(%rsp)
0000000001005c3a	movq	0x98(%rsp), %rdx
0000000001005c42	movq	%rdx, 0x158(%rsp)
0000000001005c4a	movq	0x70(%rsp), %rbx
0000000001005c4f	movq	%rbx, 0x160(%rsp)
0000000001005c57	movq	$0x0, (%rsp)
0000000001005c5f	leaq	0x108(%rsp), %r8
0000000001005c67	movq	%r8, 0x8(%rsp)
0000000001005c6c	movq	$0x6, 0x10(%rsp)
0000000001005c75	movq	$0x6, 0x18(%rsp)
0000000001005c7e	callq	runtime.concatstrings
0000000001005c83	movq	0x20(%rsp), %rax
0000000001005c88	movq	0x28(%rsp), %rcx
0000000001005c8d	movq	0x68(%rsp), %rdx
0000000001005c92	movq	0x70(%rsp), %rbx
0000000001005c97	cmpq	%rbx, %rdx
0000000001005c9a	je	0x1005cbc
0000000001005c9c	movq	%rax, 0x180(%rsp)
0000000001005ca4	movq	%rcx, 0x188(%rsp)
0000000001005cac	movq	0x168(%rsp), %rbp
0000000001005cb4	addq	$0x170, %rsp
0000000001005cbb	retq
0000000001005cbc	movq	%rax, 0x80(%rsp)
0000000001005cc4	movq	%rcx, 0x58(%rsp)
0000000001005cc9	movq	0x90(%rsp), %rax
0000000001005cd1	movq	%rax, (%rsp)
0000000001005cd5	movq	0x98(%rsp), %rax
0000000001005cdd	movq	%rax, 0x8(%rsp)
0000000001005ce2	movq	%rdx, 0x10(%rsp)
0000000001005ce7	callq	runtime.memequal
0000000001005cec	leaq	0x18(%rsp), %rax
0000000001005cf1	cmpb	$0x0, (%rax)
0000000001005cf4	jne	0x1005d05
0000000001005cf6	movq	0x58(%rsp), %rcx
0000000001005cfb	movq	0x80(%rsp), %rax
0000000001005d03	jmp	0x1005c9c
0000000001005d05	movq	0x178(%rsp), %rax
0000000001005d0d	movq	0x8(%rax), %rcx
0000000001005d11	movq	%rcx, (%rsp)
0000000001005d15	callq	"runtime.(*_type).pkgpath"
0000000001005d1a	movq	0x8(%rsp), %rax
0000000001005d1f	movq	%rax, 0xa0(%rsp)
0000000001005d27	movq	0x10(%rsp), %rcx
0000000001005d2c	movq	%rcx, 0x78(%rsp)
0000000001005d31	movq	0x178(%rsp), %rdx
0000000001005d39	movq	0x10(%rdx), %rdx
0000000001005d3d	movq	%rdx, (%rsp)
0000000001005d41	callq	"runtime.(*_type).pkgpath"
0000000001005d46	movq	0x10(%rsp), %rax
0000000001005d4b	movq	0x78(%rsp), %rcx
0000000001005d50	cmpq	%rax, %rcx
0000000001005d53	je	0x1005d9d
0000000001005d55	movq	$0x0, (%rsp)
0000000001005d5d	movq	0x80(%rsp), %rax
0000000001005d65	movq	%rax, 0x8(%rsp)
0000000001005d6a	movq	0x58(%rsp), %rax
0000000001005d6f	movq	%rax, 0x10(%rsp)
0000000001005d74	leaq	0x677d4(%rip), %rax
0000000001005d7b	movq	%rax, 0x18(%rsp)
0000000001005d80	movq	$0x20, 0x20(%rsp)
0000000001005d89	callq	runtime.concatstring2
0000000001005d8e	movq	0x28(%rsp), %rax
0000000001005d93	movq	0x30(%rsp), %rcx
0000000001005d98	jmp	0x1005c9c
0000000001005d9d	movq	0xa0(%rsp), %rax
0000000001005da5	movq	%rax, (%rsp)
0000000001005da9	movq	%rcx, 0x10(%rsp)
0000000001005dae	callq	runtime.memequal
0000000001005db3	leaq	0x18(%rsp), %rax
0000000001005db8	cmpb	$0x0, (%rax)
0000000001005dbb	je	0x1005d55
0000000001005dbd	movq	$0x0, (%rsp)
0000000001005dc5	movq	0x80(%rsp), %rax
0000000001005dcd	movq	%rax, 0x8(%rsp)
0000000001005dd2	movq	0x58(%rsp), %rax
0000000001005dd7	movq	%rax, 0x10(%rsp)
0000000001005ddc	leaq	0x67361(%rip), %rax
0000000001005de3	movq	%rax, 0x18(%rsp)
0000000001005de8	movq	$0x1e, 0x20(%rsp)
0000000001005df1	callq	runtime.concatstring2
0000000001005df6	movq	0x28(%rsp), %rax
0000000001005dfb	movq	0x30(%rsp), %rcx
0000000001005e00	jmp	0x1005c9c
0000000001005e05	leaq	0xa8(%rsp), %rdi
0000000001005e0d	leaq	runtime.statictmp_8(%rip), %rsi
0000000001005e14	movq	%rbp, -0x10(%rsp)
0000000001005e19	leaq	-0x10(%rsp), %rbp
0000000001005e1e	callq	0x104957c
0000000001005e23	movq	(%rbp), %rbp
0000000001005e27	movq	%rcx, 0xb8(%rsp)
0000000001005e2f	movq	%rax, 0xc0(%rsp)
0000000001005e37	movq	0x98(%rsp), %rax
0000000001005e3f	movq	%rax, 0xd8(%rsp)
0000000001005e47	movq	0x70(%rsp), %rax
0000000001005e4c	movq	%rax, 0xe0(%rsp)
0000000001005e54	movq	0x20(%rdx), %rax
0000000001005e58	movq	0x18(%rdx), %rcx
0000000001005e5c	movq	%rcx, 0xf8(%rsp)
0000000001005e64	movq	%rax, 0x100(%rsp)
0000000001005e6c	movq	$0x0, (%rsp)
0000000001005e74	leaq	0xa8(%rsp), %rax
0000000001005e7c	movq	%rax, 0x8(%rsp)
0000000001005e81	movq	$0x6, 0x10(%rsp)
0000000001005e8a	movq	$0x6, 0x18(%rsp)
0000000001005e93	callq	runtime.concatstrings
0000000001005e98	movq	0x28(%rsp), %rax
0000000001005e9d	movq	0x20(%rsp), %rcx
0000000001005ea2	movq	%rcx, 0x180(%rsp)
0000000001005eaa	movq	%rax, 0x188(%rsp)
0000000001005eb2	movq	0x168(%rsp), %rbp
0000000001005eba	addq	$0x170, %rsp
0000000001005ec1	retq
0000000001005ec2	movq	$0x0, (%rsp)
0000000001005eca	leaq	0x662b0(%rip), %rdx
0000000001005ed1	movq	%rdx, 0x8(%rsp)
0000000001005ed6	movq	$0x16, 0x10(%rsp)
0000000001005edf	movq	0x88(%rsp), %rdx
0000000001005ee7	movq	%rdx, 0x18(%rsp)
0000000001005eec	movq	0x60(%rsp), %rdx
0000000001005ef1	movq	%rdx, 0x20(%rsp)
0000000001005ef6	leaq	0x654d2(%rip), %rdx
0000000001005efd	movq	%rdx, 0x28(%rsp)
0000000001005f02	movq	$0xd, 0x30(%rsp)
0000000001005f0b	movq	%rax, 0x38(%rsp)
0000000001005f10	movq	%rcx, 0x40(%rsp)
0000000001005f15	callq	runtime.concatstring4
0000000001005f1a	movq	0x50(%rsp), %rax
0000000001005f1f	movq	0x48(%rsp), %rcx
0000000001005f24	movq	%rcx, 0x180(%rsp)
0000000001005f2c	movq	%rax, 0x188(%rsp)
0000000001005f34	movq	0x168(%rsp), %rbp
0000000001005f3c	addq	$0x170, %rsp
0000000001005f43	retq
0000000001005f44	movq	%rcx, (%rsp)
0000000001005f48	callq	"runtime.(*_type).string"
0000000001005f4d	movq	0x8(%rsp), %rdx
0000000001005f52	movq	0x10(%rsp), %rcx
0000000001005f57	movq	0x178(%rsp), %rax
0000000001005f5f	jmp	0x1005b72
0000000001005f64	callq	runtime.morestack_noctxt
0000000001005f69	jmp	"runtime.(*TypeAssertionError).Error"
0000000001005f6e	int3
0000000001005f6f	int3
runtime.errorString.Error:
0000000001005f70	movq	%gs:0x30, %rcx
0000000001005f79	cmpq	0x10(%rcx), %rsp
0000000001005f7d	jbe	0x1005fe1
0000000001005f7f	subq	$0x40, %rsp
0000000001005f83	movq	%rbp, 0x38(%rsp)
0000000001005f88	leaq	0x38(%rsp), %rbp
0000000001005f8d	movq	$0x0, (%rsp)
0000000001005f95	leaq	0x65743(%rip), %rax
0000000001005f9c	movq	%rax, 0x8(%rsp)
0000000001005fa1	movq	$0xf, 0x10(%rsp)
0000000001005faa	movq	0x48(%rsp), %rax
0000000001005faf	movq	%rax, 0x18(%rsp)
0000000001005fb4	movq	0x50(%rsp), %rax
0000000001005fb9	movq	%rax, 0x20(%rsp)
0000000001005fbe	callq	runtime.concatstring2
0000000001005fc3	movq	0x28(%rsp), %rax
0000000001005fc8	movq	0x30(%rsp), %rcx
0000000001005fcd	movq	%rax, 0x58(%rsp)
0000000001005fd2	movq	%rcx, 0x60(%rsp)
0000000001005fd7	movq	0x38(%rsp), %rbp
0000000001005fdc	addq	$0x40, %rsp
0000000001005fe0	retq
0000000001005fe1	callq	runtime.morestack_noctxt
0000000001005fe6	jmp	runtime.errorString.Error
0000000001005fe8	int3
0000000001005fe9	int3
0000000001005fea	int3
0000000001005feb	int3
0000000001005fec	int3
0000000001005fed	int3
0000000001005fee	int3
0000000001005fef	int3
runtime.plainError.Error:
0000000001005ff0	movq	0x8(%rsp), %rax
0000000001005ff5	movq	%rax, 0x18(%rsp)
0000000001005ffa	movq	0x10(%rsp), %rax
0000000001005fff	movq	%rax, 0x20(%rsp)
0000000001006004	retq
0000000001006005	int3
0000000001006006	int3
0000000001006007	int3
0000000001006008	int3
0000000001006009	int3
000000000100600a	int3
000000000100600b	int3
000000000100600c	int3
000000000100600d	int3
000000000100600e	int3
000000000100600f	int3
runtime.typestring:
0000000001006010	movq	%gs:0x30, %rcx
0000000001006019	cmpq	0x10(%rcx), %rsp
000000000100601d	jbe	0x1006059
000000000100601f	subq	$0x20, %rsp
0000000001006023	movq	%rbp, 0x18(%rsp)
0000000001006028	leaq	0x18(%rsp), %rbp
000000000100602d	movq	0x28(%rsp), %rax
0000000001006032	movq	%rax, (%rsp)
0000000001006036	callq	"runtime.(*_type).string"
000000000100603b	movq	0x10(%rsp), %rax
0000000001006040	movq	0x8(%rsp), %rcx
0000000001006045	movq	%rcx, 0x38(%rsp)
000000000100604a	movq	%rax, 0x40(%rsp)
000000000100604f	movq	0x18(%rsp), %rbp
0000000001006054	addq	$0x20, %rsp
0000000001006058	retq
0000000001006059	callq	runtime.morestack_noctxt
000000000100605e	jmp	runtime.typestring
runtime.printany:
0000000001006060	movq	%gs:0x30, %rcx
0000000001006069	leaq	-0x28(%rsp), %rax
000000000100606e	cmpq	0x10(%rcx), %rax
0000000001006072	jbe	0x100683e
0000000001006078	subq	$0xa8, %rsp
000000000100607f	movq	%rbp, 0xa0(%rsp)
0000000001006087	leaq	0xa0(%rsp), %rbp
000000000100608f	movq	0xb0(%rsp), %rax
0000000001006097	testq	%rax, %rax
000000000100609a	je	0x1006816
00000000010060a0	movl	0x10(%rax), %ecx
00000000010060a3	cmpl	$0xb31a546d, %ecx
00000000010060a9	ja	0x10064ad
00000000010060af	cmpl	$0x7925028c, %ecx
00000000010060b5	ja	0x1006312
00000000010060bb	cmpl	$0x2ea27ffb, %ecx
00000000010060c1	ja	0x1006232
00000000010060c7	cmpl	$0x13ff06c5, %ecx
00000000010060cd	jne	0x100621f
00000000010060d3	leaq	0x51946(%rip), %rdx
00000000010060da	cmpq	%rax, %rdx
00000000010060dd	jne	0x100620d
00000000010060e3	movq	0xb8(%rsp), %rdx
00000000010060eb	movzbl	(%rdx), %ebx
00000000010060ee	je	0x10061f0
00000000010060f4	cmpl	$0x2ea27ffb, %ecx
00000000010060fa	jne	0x1006116
00000000010060fc	leaq	0x51a9d(%rip), %rcx
0000000001006103	cmpq	%rax, %rcx
0000000001006106	jne	0x10061e8
000000000100610c	movsd	(%rdx), %xmm0
0000000001006110	je	0x10061c6
0000000001006116	movq	%rax, (%rsp)
000000000100611a	movq	%rdx, 0x8(%rsp)
000000000100611f	callq	runtime.typestring
0000000001006124	movq	0x18(%rsp), %rax
0000000001006129	movq	%rax, 0x88(%rsp)
0000000001006131	movq	0x10(%rsp), %rcx
0000000001006136	movq	%rcx, 0x98(%rsp)
000000000100613e	callq	runtime.printlock
0000000001006143	leaq	0x64937(%rip), %rax
000000000100614a	movq	%rax, (%rsp)
000000000100614e	movq	$0x1, 0x8(%rsp)
0000000001006157	callq	runtime.printstring
000000000100615c	movq	0x98(%rsp), %rax
0000000001006164	movq	%rax, (%rsp)
0000000001006168	movq	0x88(%rsp), %rax
0000000001006170	movq	%rax, 0x8(%rsp)
0000000001006175	callq	runtime.printstring
000000000100617a	leaq	0x64917(%rip), %rax
0000000001006181	movq	%rax, (%rsp)
0000000001006185	movq	$0x2, 0x8(%rsp)
000000000100618e	callq	runtime.printstring
0000000001006193	movq	0xb0(%rsp), %rax
000000000100619b	movq	%rax, (%rsp)
000000000100619f	movq	0xb8(%rsp), %rax
00000000010061a7	movq	%rax, 0x8(%rsp)
00000000010061ac	callq	runtime.printeface
00000000010061b1	callq	runtime.printunlock
00000000010061b6	movq	0xa0(%rsp), %rbp
00000000010061be	addq	$0xa8, %rsp
00000000010061c5	retq
00000000010061c6	movsd	%xmm0, 0x58(%rsp)
00000000010061cc	callq	runtime.printlock
00000000010061d1	movsd	0x58(%rsp), %xmm0
00000000010061d7	movsd	%xmm0, (%rsp)
00000000010061dc	callq	runtime.printfloat
00000000010061e1	callq	runtime.printunlock
00000000010061e6	jmp	0x10061b6
00000000010061e8	xorps	%xmm0, %xmm0
00000000010061eb	jmp	0x1006110
00000000010061f0	movb	%bl, 0x25(%rsp)
00000000010061f4	callq	runtime.printlock
00000000010061f9	movzbl	0x25(%rsp), %eax
00000000010061fe	movb	%al, (%rsp)
0000000001006201	callq	runtime.printbool
0000000001006206	callq	runtime.printunlock
000000000100620b	jmp	0x10061b6
000000000100620d	movq	0xb8(%rsp), %rdx
0000000001006215	movl	$0x0, %ebx
000000000100621a	jmp	0x10060ee
000000000100621f	cmpl	$0x2ea27ffb, %ecx
0000000001006225	movq	0xb8(%rsp), %rdx
000000000100622d	jmp	0x10060fa
0000000001006232	cmpl	$0x663e425f, %ecx
0000000001006238	jne	0x10062ff
000000000100623e	leaq	0x5221b(%rip), %rdx
0000000001006245	cmpq	%rax, %rdx
0000000001006248	jne	0x10062ed
000000000100624e	movq	0xb8(%rsp), %rdx
0000000001006256	movzbl	(%rdx), %ebx
0000000001006259	je	0x10062c9
000000000100625b	cmpl	$0x7925028c, %ecx
0000000001006261	jne	0x1006116
0000000001006267	leaq	0x518b2(%rip), %rcx
000000000100626e	cmpq	%rax, %rcx
0000000001006271	jne	0x10062c1
0000000001006273	movss	(%rdx), %xmm0
0000000001006277	movss	0x4(%rdx), %xmm1
000000000100627c	jne	0x1006116
0000000001006282	movss	%xmm0, 0x2c(%rsp)
0000000001006288	movss	%xmm1, 0x30(%rsp)
000000000100628e	callq	runtime.printlock
0000000001006293	movss	0x2c(%rsp), %xmm0
0000000001006299	cvtss2sd	%xmm0, %xmm0
000000000100629d	movsd	%xmm0, (%rsp)
00000000010062a2	movss	0x30(%rsp), %xmm0
00000000010062a8	cvtss2sd	%xmm0, %xmm0
00000000010062ac	movsd	%xmm0, 0x8(%rsp)
00000000010062b2	callq	runtime.printcomplex
00000000010062b7	callq	runtime.printunlock
00000000010062bc	jmp	0x10061b6
00000000010062c1	xorps	%xmm0, %xmm0
00000000010062c4	xorps	%xmm1, %xmm1
00000000010062c7	jmp	0x100627c
00000000010062c9	movb	%bl, 0x27(%rsp)
00000000010062cd	callq	runtime.printlock
00000000010062d2	movzbl	0x27(%rsp), %eax
00000000010062d7	movzbl	%al, %eax
00000000010062da	movq	%rax, (%rsp)
00000000010062de	callq	runtime.printuint
00000000010062e3	callq	runtime.printunlock
00000000010062e8	jmp	0x10061b6
00000000010062ed	movq	0xb8(%rsp), %rdx
00000000010062f5	movl	$0x0, %ebx
00000000010062fa	jmp	0x1006259
00000000010062ff	cmpl	$0x7925028c, %ecx
0000000001006305	movq	0xb8(%rsp), %rdx
000000000100630d	jmp	0x1006261
0000000001006312	cmpl	$0x963f9bff, %ecx
0000000001006318	ja	0x10063d1
000000000100631e	cmpl	$0x86318d2e, %ecx
0000000001006324	jne	0x10063be
000000000100632a	leaq	0x520ef(%rip), %rdx
0000000001006331	cmpq	%rax, %rdx
0000000001006334	jne	0x10063af
0000000001006336	movq	0xb8(%rsp), %rdx
000000000100633e	movq	(%rdx), %rbx
0000000001006341	je	0x100638d
0000000001006343	cmpl	$0x963f9bff, %ecx
0000000001006349	jne	0x1006116
000000000100634f	leaq	0x51aca(%rip), %rcx
0000000001006356	cmpq	%rax, %rcx
0000000001006359	jne	0x1006386
000000000100635b	movq	(%rdx), %rcx
000000000100635e	jne	0x1006116
0000000001006364	movq	%rcx, 0x68(%rsp)
0000000001006369	callq	runtime.printlock
000000000100636e	movq	0x68(%rsp), %rax
0000000001006373	movq	%rax, (%rsp)
0000000001006377	callq	runtime.printint
000000000100637c	callq	runtime.printunlock
0000000001006381	jmp	0x10061b6
0000000001006386	movl	$0x0, %ecx
000000000100638b	jmp	0x100635e
000000000100638d	movq	%rbx, 0x70(%rsp)
0000000001006392	callq	runtime.printlock
0000000001006397	movq	0x70(%rsp), %rax
000000000100639c	movq	%rax, (%rsp)
00000000010063a0	callq	runtime.printuint
00000000010063a5	callq	runtime.printunlock
00000000010063aa	jmp	0x10061b6
00000000010063af	movq	0xb8(%rsp), %rdx
00000000010063b7	movl	$0x0, %ebx
00000000010063bc	jmp	0x1006341
00000000010063be	cmpl	$0x963f9bff, %ecx
00000000010063c4	movq	0xb8(%rsp), %rdx
00000000010063cc	jmp	0x1006349
00000000010063d1	cmpl	$0xb0c23ed3, %ecx
00000000010063d7	jne	0x100649a
00000000010063dd	leaq	0x5177c(%rip), %rdx
00000000010063e4	cmpq	%rax, %rdx
00000000010063e7	jne	0x100648a
00000000010063ed	movq	0xb8(%rsp), %rdx
00000000010063f5	movss	(%rdx), %xmm0
00000000010063f9	je	0x1006461
00000000010063fb	cmpl	$0xb31a546d, %ecx
0000000001006401	jne	0x1006116
0000000001006407	leaq	0x516d2(%rip), %rcx
000000000100640e	cmpq	%rax, %rcx
0000000001006411	jne	0x1006459
0000000001006413	movsd	(%rdx), %xmm0
0000000001006417	movsd	0x8(%rdx), %xmm1
000000000100641c	jne	0x1006116
0000000001006422	movsd	%xmm0, 0x40(%rsp)
0000000001006428	movsd	%xmm1, 0x50(%rsp)
000000000100642e	callq	runtime.printlock
0000000001006433	movsd	0x40(%rsp), %xmm0
0000000001006439	movsd	%xmm0, (%rsp)
000000000100643e	movsd	0x50(%rsp), %xmm0
0000000001006444	movsd	%xmm0, 0x8(%rsp)
000000000100644a	callq	runtime.printcomplex
000000000100644f	callq	runtime.printunlock
0000000001006454	jmp	0x10061b6
0000000001006459	xorps	%xmm0, %xmm0
000000000100645c	xorps	%xmm1, %xmm1
000000000100645f	jmp	0x100641c
0000000001006461	movss	%xmm0, 0x34(%rsp)
0000000001006467	callq	runtime.printlock
000000000100646c	movss	0x34(%rsp), %xmm0
0000000001006472	cvtss2sd	%xmm0, %xmm0
0000000001006476	movsd	%xmm0, (%rsp)
000000000100647b	callq	runtime.printfloat
0000000001006480	callq	runtime.printunlock
0000000001006485	jmp	0x10061b6
000000000100648a	movq	0xb8(%rsp), %rdx
0000000001006492	xorps	%xmm0, %xmm0
0000000001006495	jmp	0x10063f9
000000000100649a	cmpl	$0xb31a546d, %ecx
00000000010064a0	movq	0xb8(%rsp), %rdx
00000000010064a8	jmp	0x1006401
00000000010064ad	cmpl	$0xd04ae83d, %ecx
00000000010064b3	ja	0x100662b
00000000010064b9	cmpl	$0xbd4ad792, %ecx
00000000010064bf	ja	0x1006578
00000000010064c5	cmpl	$0xbbad4102, %ecx
00000000010064cb	jne	0x1006565
00000000010064d1	leaq	0x51908(%rip), %rdx
00000000010064d8	cmpq	%rax, %rdx
00000000010064db	jne	0x1006556
00000000010064dd	movq	0xb8(%rsp), %rdx
00000000010064e5	movl	(%rdx), %ebx
00000000010064e7	je	0x1006533
00000000010064e9	cmpl	$0xbd4ad792, %ecx
00000000010064ef	jne	0x1006116
00000000010064f5	leaq	0x51fa4(%rip), %rcx
00000000010064fc	cmpq	%rax, %rcx
00000000010064ff	jne	0x100652c
0000000001006501	movq	(%rdx), %rcx
0000000001006504	jne	0x1006116
000000000100650a	movq	%rcx, 0x78(%rsp)
000000000100650f	callq	runtime.printlock
0000000001006514	movq	0x78(%rsp), %rax
0000000001006519	movq	%rax, (%rsp)
000000000100651d	callq	runtime.printuint
0000000001006522	callq	runtime.printunlock
0000000001006527	jmp	0x10061b6
000000000100652c	movl	$0x0, %ecx
0000000001006531	jmp	0x1006504
0000000001006533	movl	%ebx, 0x38(%rsp)
0000000001006537	callq	runtime.printlock
000000000100653c	movl	0x38(%rsp), %eax
0000000001006540	movslq	%eax, %rax
0000000001006543	movq	%rax, (%rsp)
0000000001006547	callq	runtime.printint
000000000100654c	callq	runtime.printunlock
0000000001006551	jmp	0x10061b6
0000000001006556	movq	0xb8(%rsp), %rdx
000000000100655e	movl	$0x0, %ebx
0000000001006563	jmp	0x10064e7
0000000001006565	cmpl	$0xbd4ad792, %ecx
000000000100656b	movq	0xb8(%rsp), %rdx
0000000001006573	jmp	0x10064ef
0000000001006578	cmpl	$0xcc06c027, %ecx
000000000100657e	jne	0x1006618
0000000001006584	leaq	0x518d5(%rip), %rdx
000000000100658b	cmpq	%rax, %rdx
000000000100658e	jne	0x1006609
0000000001006590	movq	0xb8(%rsp), %rdx
0000000001006598	movzbl	(%rdx), %ebx
000000000100659b	je	0x10065e4
000000000100659d	cmpl	$0xd04ae83d, %ecx
00000000010065a3	jne	0x1006116
00000000010065a9	leaq	0x51e30(%rip), %rcx
00000000010065b0	cmpq	%rax, %rcx
00000000010065b3	jne	0x10065dd
00000000010065b5	movl	(%rdx), %ecx
00000000010065b7	jne	0x1006116
00000000010065bd	movl	%ecx, 0x3c(%rsp)
00000000010065c1	callq	runtime.printlock
00000000010065c6	movl	0x3c(%rsp), %eax
00000000010065ca	movq	%rax, (%rsp)
00000000010065ce	callq	runtime.printuint
00000000010065d3	callq	runtime.printunlock
00000000010065d8	jmp	0x10061b6
00000000010065dd	movl	$0x0, %ecx
00000000010065e2	jmp	0x10065b7
00000000010065e4	movb	%bl, 0x26(%rsp)
00000000010065e8	callq	runtime.printlock
00000000010065ed	movzbl	0x26(%rsp), %eax
00000000010065f2	movsbq	%al, %rax
00000000010065f6	movq	%rax, (%rsp)
00000000010065fa	callq	runtime.printint
00000000010065ff	callq	runtime.printunlock
0000000001006604	jmp	0x10061b6
0000000001006609	movq	0xb8(%rsp), %rdx
0000000001006611	movl	$0x0, %ebx
0000000001006616	jmp	0x100659b
0000000001006618	cmpl	$0xd04ae83d, %ecx
000000000100661e	movq	0xb8(%rsp), %rdx
0000000001006626	jmp	0x10065a3
000000000100662b	cmpl	$0xe0ff5cb4, %ecx
0000000001006631	ja	0x100670f
0000000001006637	cmpl	$0xd5b87712, %ecx
000000000100663d	jne	0x10066fc
0000000001006643	leaq	0x51d16(%rip), %rdx
000000000100664a	cmpq	%rax, %rdx
000000000100664d	jne	0x10066ea
0000000001006653	movq	0xb8(%rsp), %rdx
000000000100665b	movq	(%rdx), %rbx
000000000100665e	je	0x10066c8
0000000001006660	cmpl	$0xe0ff5cb4, %ecx
0000000001006666	jne	0x1006116
000000000100666c	leaq	0x51cad(%rip), %rcx
0000000001006673	cmpq	%rax, %rcx
0000000001006676	jne	0x10066bc
0000000001006678	movq	(%rdx), %rcx
000000000100667b	movq	0x8(%rdx), %rbx
000000000100667f	jne	0x1006116
0000000001006685	movq	%rbx, 0x48(%rsp)
000000000100668a	movq	%rcx, 0x90(%rsp)
0000000001006692	callq	runtime.printlock
0000000001006697	movq	0x90(%rsp), %rax
000000000100669f	movq	%rax, (%rsp)
00000000010066a3	movq	0x48(%rsp), %rax
00000000010066a8	movq	%rax, 0x8(%rsp)
00000000010066ad	callq	runtime.printstring
00000000010066b2	callq	runtime.printunlock
00000000010066b7	jmp	0x10061b6
00000000010066bc	movl	$0x0, %ebx
00000000010066c1	movl	$0x0, %ecx
00000000010066c6	jmp	0x100667f
00000000010066c8	movq	%rbx, 0x60(%rsp)
00000000010066cd	callq	runtime.printlock
00000000010066d2	movq	0x60(%rsp), %rax
00000000010066d7	movq	%rax, (%rsp)
00000000010066db	callq	runtime.printuint
00000000010066e0	callq	runtime.printunlock
00000000010066e5	jmp	0x10061b6
00000000010066ea	movq	0xb8(%rsp), %rdx
00000000010066f2	movl	$0x0, %ebx
00000000010066f7	jmp	0x100665e
00000000010066fc	cmpl	$0xe0ff5cb4, %ecx
0000000001006702	movq	0xb8(%rsp), %rdx
000000000100670a	jmp	0x1006666
000000000100670f	cmpl	$0xecd580ce, %ecx
0000000001006715	jne	0x1006809
000000000100671b	leaq	0x5167e(%rip), %rdx
0000000001006722	cmpq	%rax, %rdx
0000000001006725	jne	0x10067f7
000000000100672b	movq	0xb8(%rsp), %rdx
0000000001006733	movzwl	(%rdx), %ebx
0000000001006736	je	0x10067d1
000000000100673c	cmpl	$0xeff20ea0, %ecx
0000000001006742	jne	0x1006755
0000000001006744	leaq	0x51c55(%rip), %rbx
000000000100674b	cmpq	%rax, %rbx
000000000100674e	jne	0x10067ca
0000000001006750	movzwl	(%rdx), %ebx
0000000001006753	je	0x10067a5
0000000001006755	cmpl	$0xf75371fa, %ecx
000000000100675b	jne	0x1006116
0000000001006761	leaq	0x515f8(%rip), %rcx
0000000001006768	cmpq	%rax, %rcx
000000000100676b	jne	0x100679e
000000000100676d	movq	(%rdx), %rcx
0000000001006770	jne	0x1006116
0000000001006776	movq	%rcx, 0x80(%rsp)
000000000100677e	callq	runtime.printlock
0000000001006783	movq	0x80(%rsp), %rax
000000000100678b	movq	%rax, (%rsp)
000000000100678f	callq	runtime.printint
0000000001006794	callq	runtime.printunlock
0000000001006799	jmp	0x10061b6
000000000100679e	movl	$0x0, %ecx
00000000010067a3	jmp	0x1006770
00000000010067a5	movw	%bx, 0x2a(%rsp)
00000000010067aa	callq	runtime.printlock
00000000010067af	movzwl	0x2a(%rsp), %eax
00000000010067b4	movzwl	%ax, %eax
00000000010067b7	movq	%rax, (%rsp)
00000000010067bb	callq	runtime.printuint
00000000010067c0	callq	runtime.printunlock
00000000010067c5	jmp	0x10061b6
00000000010067ca	movl	$0x0, %ebx
00000000010067cf	jmp	0x1006753
00000000010067d1	movw	%bx, 0x28(%rsp)
00000000010067d6	callq	runtime.printlock
00000000010067db	movzwl	0x28(%rsp), %eax
00000000010067e0	movswq	%ax, %rax
00000000010067e4	movq	%rax, (%rsp)
00000000010067e8	callq	runtime.printint
00000000010067ed	callq	runtime.printunlock
00000000010067f2	jmp	0x10061b6
00000000010067f7	movq	0xb8(%rsp), %rdx
00000000010067ff	movl	$0x0, %ebx
0000000001006804	jmp	0x1006736
0000000001006809	movq	0xb8(%rsp), %rdx
0000000001006811	jmp	0x100673c
0000000001006816	callq	runtime.printlock
000000000100681b	leaq	0x642c8(%rip), %rax
0000000001006822	movq	%rax, (%rsp)
0000000001006826	movq	$0x3, 0x8(%rsp)
000000000100682f	callq	runtime.printstring
0000000001006834	callq	runtime.printunlock
0000000001006839	jmp	0x10061b6
000000000100683e	callq	runtime.morestack_noctxt
0000000001006843	jmp	runtime.printany
0000000001006848	int3
0000000001006849	int3
000000000100684a	int3
000000000100684b	int3
000000000100684c	int3
000000000100684d	int3
000000000100684e	int3
000000000100684f	int3
runtime.panicwrap:
0000000001006850	movq	%gs:0x30, %rcx
0000000001006859	leaq	-0xc0(%rsp), %rax
0000000001006861	cmpq	0x10(%rcx), %rax
0000000001006865	jbe	0x1006c3c
000000000100686b	subq	$0x140, %rsp
0000000001006872	movq	%rbp, 0x138(%rsp)
000000000100687a	leaq	0x138(%rsp), %rbp
0000000001006882	movq	0x140(%rsp), %rax
000000000100688a	movq	%rax, (%rsp)
000000000100688e	callq	runtime.findfunc
0000000001006893	movq	0x10(%rsp), %rax
0000000001006898	movq	0x8(%rsp), %rcx
000000000100689d	movq	%rcx, (%rsp)
00000000010068a1	movq	%rax, 0x8(%rsp)
00000000010068a6	callq	runtime.funcname
00000000010068ab	movq	0x18(%rsp), %rax
00000000010068b0	movq	%rax, 0x40(%rsp)
00000000010068b5	movq	0x10(%rsp), %rcx
00000000010068ba	movq	%rcx, 0x90(%rsp)
00000000010068c2	movq	%rcx, (%rsp)
00000000010068c6	movq	%rax, 0x8(%rsp)
00000000010068cb	movb	$0x28, 0x10(%rsp)
00000000010068d0	callq	"internal/bytealg.IndexByteString"
00000000010068d5	movq	0x18(%rsp), %rax
00000000010068da	testq	%rax, %rax
00000000010068dd	jl	0x1006be8
00000000010068e3	leaq	-0x1(%rax), %rcx
00000000010068e7	movq	0x40(%rsp), %rdx
00000000010068ec	cmpq	%rdx, %rcx
00000000010068ef	ja	0x1006be1
00000000010068f5	addq	$0x2, %rax
00000000010068f9	cmpq	%rdx, %rax
00000000010068fc	jl	0x100690b
00000000010068fe	movq	0x90(%rsp), %rsi
0000000001006906	jmp	0x1006b9b
000000000100690b	cmpq	%rax, %rcx
000000000100690e	ja	0x1006b94
0000000001006914	cmpq	%rdx, %rax
0000000001006917	ja	0x1006b94
000000000100691d	movq	%rax, %rbx
0000000001006920	subq	%rcx, %rax
0000000001006923	movq	%rax, %rsi
0000000001006926	negq	%rax
0000000001006929	sarq	$0x3f, %rax
000000000100692d	andq	%rcx, %rax
0000000001006930	cmpq	$0x3, %rsi
0000000001006934	je	0x1006943
0000000001006936	movq	0x90(%rsp), %rsi
000000000100693e	jmp	0x1006b9b
0000000001006943	movq	0x90(%rsp), %rsi
000000000100694b	movzwl	(%rsi,%rax), %edi
000000000100694f	cmpw	$0x282e, %di
0000000001006954	jne	0x1006b9b
000000000100695a	movzbl	0x2(%rsi,%rax), %eax
000000000100695f	cmpb	$0x2a, %al
0000000001006961	jne	0x1006b9b
0000000001006967	movq	%rcx, 0x38(%rsp)
000000000100696c	subq	%rbx, %rdx
000000000100696f	movq	%rdx, 0x40(%rsp)
0000000001006974	movq	%rdx, %rax
0000000001006977	negq	%rdx
000000000100697a	sarq	$0x3f, %rdx
000000000100697e	andq	%rdx, %rbx
0000000001006981	leaq	(%rsi,%rbx), %rcx
0000000001006985	movq	%rcx, 0x88(%rsp)
000000000100698d	movq	%rcx, (%rsp)
0000000001006991	movq	%rax, 0x8(%rsp)
0000000001006996	movb	$0x29, 0x10(%rsp)
000000000100699b	callq	"internal/bytealg.IndexByteString"
00000000010069a0	movq	0x18(%rsp), %rax
00000000010069a5	testq	%rax, %rax
00000000010069a8	jl	0x1006b40
00000000010069ae	leaq	0x2(%rax), %rcx
00000000010069b2	movq	0x40(%rsp), %rdx
00000000010069b7	cmpq	%rdx, %rcx
00000000010069ba	jl	0x10069c9
00000000010069bc	movq	0x88(%rsp), %rbx
00000000010069c4	jmp	0x1006afa
00000000010069c9	cmpq	%rcx, %rax
00000000010069cc	ja	0x1006af3
00000000010069d2	cmpq	%rdx, %rcx
00000000010069d5	ja	0x1006af3
00000000010069db	movq	0x88(%rsp), %rbx
00000000010069e3	movzwl	(%rax,%rbx), %r8d
00000000010069e8	cmpw	$0x2e29, %r8w
00000000010069ee	jne	0x1006afa
00000000010069f4	leaq	0xa8(%rsp), %rdi
00000000010069fc	leaq	runtime.statictmp_9(%rip), %rsi
0000000001006a03	movq	%rbp, -0x10(%rsp)
0000000001006a08	leaq	-0x10(%rsp), %rbp
0000000001006a0d	callq	0x1049552
0000000001006a12	movq	(%rbp), %rbp
0000000001006a16	movq	0x90(%rsp), %r8
0000000001006a1e	movq	%r8, 0xb8(%rsp)
0000000001006a26	movq	0x38(%rsp), %r8
0000000001006a2b	movq	%r8, 0xc0(%rsp)
0000000001006a33	movq	%rbx, 0xd8(%rsp)
0000000001006a3b	movq	%rax, 0xe0(%rsp)
0000000001006a43	subq	%rcx, %rdx
0000000001006a46	movq	%rdx, %r8
0000000001006a49	negq	%rdx
0000000001006a4c	sarq	$0x3f, %rdx
0000000001006a50	andq	%rdx, %rcx
0000000001006a53	addq	%rbx, %rcx
0000000001006a56	movq	%rcx, 0xf8(%rsp)
0000000001006a5e	movq	%r8, 0x100(%rsp)
0000000001006a66	movq	%rbx, 0x118(%rsp)
0000000001006a6e	movq	%rax, 0x120(%rsp)
0000000001006a76	movq	$0x0, (%rsp)
0000000001006a7e	leaq	0xa8(%rsp), %rax
0000000001006a86	movq	%rax, 0x8(%rsp)
0000000001006a8b	movq	$0x9, 0x10(%rsp)
0000000001006a94	movq	$0x9, 0x18(%rsp)
0000000001006a9d	callq	runtime.concatstrings
0000000001006aa2	movq	0x20(%rsp), %rax
0000000001006aa7	movq	0x28(%rsp), %rcx
0000000001006aac	movq	%rax, 0x98(%rsp)
0000000001006ab4	movq	%rcx, 0xa0(%rsp)
0000000001006abc	leaq	0x5563d(%rip), %rax
0000000001006ac3	movq	%rax, (%rsp)
0000000001006ac7	leaq	0x98(%rsp), %rax
0000000001006acf	movq	%rax, 0x8(%rsp)
0000000001006ad4	callq	runtime.convT2Estring
0000000001006ad9	movq	0x18(%rsp), %rax
0000000001006ade	movq	0x10(%rsp), %rcx
0000000001006ae3	movq	%rcx, (%rsp)
0000000001006ae7	movq	%rax, 0x8(%rsp)
0000000001006aec	callq	runtime.gopanic
0000000001006af1	ud2
0000000001006af3	callq	runtime.panicslice
0000000001006af8	ud2
0000000001006afa	movq	$0x0, (%rsp)
0000000001006b02	leaq	0x67a5f(%rip), %rax
0000000001006b09	movq	%rax, 0x8(%rsp)
0000000001006b0e	movq	$0x2e, 0x10(%rsp)
0000000001006b17	movq	%rbx, 0x18(%rsp)
0000000001006b1c	movq	%rdx, 0x20(%rsp)
0000000001006b21	callq	runtime.concatstring2
0000000001006b26	movq	0x30(%rsp), %rax
0000000001006b2b	movq	0x28(%rsp), %rcx
0000000001006b30	movq	%rcx, (%rsp)
0000000001006b34	movq	%rax, 0x8(%rsp)
0000000001006b39	callq	runtime.throw
0000000001006b3e	ud2
0000000001006b40	leaq	0x48(%rsp), %rax
0000000001006b45	movq	%rax, (%rsp)
0000000001006b49	leaq	0x6513f(%rip), %rax
0000000001006b50	movq	%rax, 0x8(%rsp)
0000000001006b55	movq	$0x13, 0x10(%rsp)
0000000001006b5e	movq	0x88(%rsp), %rax
0000000001006b66	movq	%rax, 0x18(%rsp)
0000000001006b6b	movq	0x40(%rsp), %rax
0000000001006b70	movq	%rax, 0x20(%rsp)
0000000001006b75	callq	runtime.concatstring2
0000000001006b7a	movq	0x28(%rsp), %rax
0000000001006b7f	movq	0x30(%rsp), %rcx
0000000001006b84	movq	%rax, (%rsp)
0000000001006b88	movq	%rcx, 0x8(%rsp)
0000000001006b8d	callq	runtime.throw
0000000001006b92	ud2
0000000001006b94	callq	runtime.panicslice
0000000001006b99	ud2
0000000001006b9b	movq	$0x0, (%rsp)
0000000001006ba3	leaq	0x67bf1(%rip), %rax
0000000001006baa	movq	%rax, 0x8(%rsp)
0000000001006baf	movq	$0x31, 0x10(%rsp)
0000000001006bb8	movq	%rsi, 0x18(%rsp)
0000000001006bbd	movq	%rdx, 0x20(%rsp)
0000000001006bc2	callq	runtime.concatstring2
0000000001006bc7	movq	0x30(%rsp), %rax
0000000001006bcc	movq	0x28(%rsp), %rcx
0000000001006bd1	movq	%rcx, (%rsp)
0000000001006bd5	movq	%rax, 0x8(%rsp)
0000000001006bda	callq	runtime.throw
0000000001006bdf	ud2
0000000001006be1	callq	runtime.panicslice
0000000001006be6	ud2
0000000001006be8	leaq	0x68(%rsp), %rax
0000000001006bed	movq	%rax, (%rsp)
0000000001006bf1	leaq	0x65084(%rip), %rax
0000000001006bf8	movq	%rax, 0x8(%rsp)
0000000001006bfd	movq	$0x13, 0x10(%rsp)
0000000001006c06	movq	0x90(%rsp), %rax
0000000001006c0e	movq	%rax, 0x18(%rsp)
0000000001006c13	movq	0x40(%rsp), %rax
0000000001006c18	movq	%rax, 0x20(%rsp)
0000000001006c1d	callq	runtime.concatstring2
0000000001006c22	movq	0x28(%rsp), %rax
0000000001006c27	movq	0x30(%rsp), %rcx
0000000001006c2c	movq	%rax, (%rsp)
0000000001006c30	movq	%rcx, 0x8(%rsp)
0000000001006c35	callq	runtime.throw
0000000001006c3a	ud2
0000000001006c3c	callq	runtime.morestack_noctxt
0000000001006c41	jmp	runtime.panicwrap
0000000001006c46	int3
0000000001006c47	int3
0000000001006c48	int3
0000000001006c49	int3
0000000001006c4a	int3
0000000001006c4b	int3
0000000001006c4c	int3
0000000001006c4d	int3
0000000001006c4e	int3
0000000001006c4f	int3
runtime.float64frombits:
0000000001006c50	movsd	0x8(%rsp), %xmm0
0000000001006c56	movsd	%xmm0, 0x10(%rsp)
0000000001006c5c	retq
0000000001006c5d	int3
0000000001006c5e	int3
0000000001006c5f	int3
runtime.memhash:
0000000001006c60	movq	%gs:0x30, %rcx
0000000001006c69	cmpq	0x10(%rcx), %rsp
0000000001006c6d	jbe	0x1006f56
0000000001006c73	subq	$0x28, %rsp
0000000001006c77	movq	%rbp, 0x20(%rsp)
0000000001006c7c	leaq	0x20(%rsp), %rbp
0000000001006c81	leaq	runtime.useAeshash(%rip), %rax
0000000001006c88	cmpb	$0x0, (%rax)
0000000001006c8b	jne	0x1006f20
0000000001006c91	movq	runtime.hashkey(%rip), %rax
0000000001006c98	movq	0x40(%rsp), %rcx
0000000001006c9d	imulq	%rcx, %rax
0000000001006ca1	movq	0x38(%rsp), %rdx
0000000001006ca6	addq	%rdx, %rax
0000000001006ca9	movq	0x30(%rsp), %rbx
0000000001006cae	jmp	0x1006d56
0000000001006cb3	leaq	0x8(%rbx), %r9
0000000001006cb7	testb	%al, (%r9)
0000000001006cba	leaq	0x10(%rbx), %r9
0000000001006cbe	testb	%al, (%r9)
0000000001006cc1	leaq	0x18(%rbx), %r9
0000000001006cc5	testb	%al, (%r9)
0000000001006cc8	movq	(%rbx), %r9
0000000001006ccb	xorq	%r9, %rax
0000000001006cce	movabsq	$-0x15c7136f860feabf, %r9
0000000001006cd8	imulq	%r9, %rax
0000000001006cdc	rolq	$0x1f, %rax
0000000001006ce0	movabsq	$0x2723a30d96da1399, %r10
0000000001006cea	imulq	%r10, %rax
0000000001006cee	movq	0x8(%rbx), %r11
0000000001006cf2	xorq	%r11, %rsi
0000000001006cf5	imulq	%r10, %rsi
0000000001006cf9	rolq	$0x1f, %rsi
0000000001006cfd	movabsq	$-0x7c30715207892d29, %r11
0000000001006d07	imulq	%r11, %rsi
0000000001006d0b	movq	0x10(%rbx), %r12
0000000001006d0f	xorq	%r12, %rdi
0000000001006d12	imulq	%r11, %rdi
0000000001006d16	rolq	$0x1f, %rdi
0000000001006d1a	movabsq	$-0x24303d849bc2096d, %r12
0000000001006d24	imulq	%r12, %rdi
0000000001006d28	movq	0x18(%rbx), %r13
0000000001006d2c	xorq	%r13, %r8
0000000001006d2f	imulq	%r12, %r8
0000000001006d33	rolq	$0x1f, %r8
0000000001006d37	imulq	%r9, %r8
0000000001006d3b	addq	$-0x20, %rcx
0000000001006d3f	addq	$0x20, %rbx
0000000001006d43	cmpq	$0x20, %rcx
0000000001006d47	jae	0x1006cb3
0000000001006d4d	xorq	%rsi, %rax
0000000001006d50	xorq	%rdi, %rax
0000000001006d53	xorq	%r8, %rax
0000000001006d56	testq	%rcx, %rcx
0000000001006d59	je	0x1006e21
0000000001006d5f	cmpq	$0x4, %rcx
0000000001006d63	jb	0x1006ecc
0000000001006d69	cmpq	$0x8, %rcx
0000000001006d6d	jbe	0x1006e91
0000000001006d73	cmpq	$0x10, %rcx
0000000001006d77	jbe	0x1006e52
0000000001006d7d	cmpq	$0x20, %rcx
0000000001006d81	jbe	0x1006da6
0000000001006d83	movq	0xcdebe(%rip), %rsi
0000000001006d8a	imulq	%rdx, %rsi
0000000001006d8e	movq	0xcdebb(%rip), %rdi
0000000001006d95	imulq	%rdx, %rdi
0000000001006d99	movq	0xcdeb8(%rip), %r8
0000000001006da0	imulq	%rdx, %r8
0000000001006da4	jmp	0x1006d43
0000000001006da6	leaq	0x8(%rbx), %rdx
0000000001006daa	testb	%al, (%rdx)
0000000001006dac	movq	%rbx, %rdx
0000000001006daf	leaq	-0x10(%rcx,%rbx), %rsi
0000000001006db4	leaq	-0x8(%rcx,%rbx), %rcx
0000000001006db9	movq	(%rdx), %rbx
0000000001006dbc	xorq	%rbx, %rax
0000000001006dbf	movabsq	$-0x15c7136f860feabf, %rbx
0000000001006dc9	imulq	%rax, %rbx
0000000001006dcd	rolq	$0x1f, %rbx
0000000001006dd1	movabsq	$0x2723a30d96da1399, %rax
0000000001006ddb	imulq	%rbx, %rax
0000000001006ddf	xorq	0x8(%rdx), %rax
0000000001006de3	movabsq	$-0x15c7136f860feabf, %rdx
0000000001006ded	imulq	%rdx, %rax
0000000001006df1	rolq	$0x1f, %rax
0000000001006df5	movabsq	$0x2723a30d96da1399, %rbx
0000000001006dff	imulq	%rbx, %rax
0000000001006e03	xorq	(%rsi), %rax
0000000001006e06	imulq	%rdx, %rax
0000000001006e0a	rolq	$0x1f, %rax
0000000001006e0e	imulq	%rbx, %rax
0000000001006e12	xorq	(%rcx), %rax
0000000001006e15	imulq	%rdx, %rax
0000000001006e19	rolq	$0x1f, %rax
0000000001006e1d	imulq	%rbx, %rax
0000000001006e21	movq	%rax, %rcx
0000000001006e24	shrq	$0x1d, %rax
0000000001006e28	xorq	%rax, %rcx
0000000001006e2b	movabsq	$-0x7c30715207892d29, %rax
0000000001006e35	imulq	%rax, %rcx
0000000001006e39	movq	%rcx, %rax
0000000001006e3c	shrq	$0x20, %rcx
0000000001006e40	xorq	%rax, %rcx
0000000001006e43	movq	%rcx, 0x48(%rsp)
0000000001006e48	movq	0x20(%rsp), %rbp
0000000001006e4d	addq	$0x28, %rsp
0000000001006e51	retq
0000000001006e52	movq	%rbx, %rdx
0000000001006e55	leaq	-0x8(%rcx,%rbx), %rcx
0000000001006e5a	movq	(%rdx), %rdx
0000000001006e5d	xorq	%rdx, %rax
0000000001006e60	movabsq	$-0x15c7136f860feabf, %rdx
0000000001006e6a	imulq	%rdx, %rax
0000000001006e6e	rolq	$0x1f, %rax
0000000001006e72	movabsq	$0x2723a30d96da1399, %rbx
0000000001006e7c	imulq	%rbx, %rax
0000000001006e80	xorq	(%rcx), %rax
0000000001006e83	imulq	%rdx, %rax
0000000001006e87	rolq	$0x1f, %rax
0000000001006e8b	imulq	%rbx, %rax
0000000001006e8f	jmp	0x1006e21
0000000001006e91	movq	%rbx, %rdx
0000000001006e94	leaq	-0x4(%rcx,%rbx), %rcx
0000000001006e99	movl	(%rdx), %edx
0000000001006e9b	xorq	%rdx, %rax
0000000001006e9e	movl	(%rcx), %ecx
0000000001006ea0	shlq	$0x20, %rcx
0000000001006ea4	xorq	%rcx, %rax
0000000001006ea7	movabsq	$-0x15c7136f860feabf, %rcx
0000000001006eb1	imulq	%rcx, %rax
0000000001006eb5	rolq	$0x1f, %rax
0000000001006eb9	movabsq	$0x2723a30d96da1399, %rcx
0000000001006ec3	imulq	%rcx, %rax
0000000001006ec7	jmp	0x1006e21
0000000001006ecc	movq	%rcx, %rdx
0000000001006ecf	shrq	%rcx
0000000001006ed2	leaq	(%rbx,%rcx), %rsi
0000000001006ed6	testb	%al, (%rsi)
0000000001006ed8	movq	%rbx, %rsi
0000000001006edb	leaq	-0x1(%rdx,%rbx), %rdx
0000000001006ee0	movzbl	(%rsi), %ebx
0000000001006ee3	xorq	%rbx, %rax
0000000001006ee6	movzbl	(%rsi,%rcx), %ecx
0000000001006eea	shlq	$0x8, %rcx
0000000001006eee	xorq	%rcx, %rax
0000000001006ef1	movzbl	(%rdx), %ecx
0000000001006ef4	shlq	$0x10, %rcx
0000000001006ef8	xorq	%rcx, %rax
0000000001006efb	movabsq	$-0x15c7136f860feabf, %rcx
0000000001006f05	imulq	%rcx, %rax
0000000001006f09	rolq	$0x1f, %rax
0000000001006f0d	movabsq	$0x2723a30d96da1399, %rcx
0000000001006f17	imulq	%rcx, %rax
0000000001006f1b	jmp	0x1006e21
0000000001006f20	movq	0x30(%rsp), %rax
0000000001006f25	movq	%rax, (%rsp)
0000000001006f29	movq	0x38(%rsp), %rax
0000000001006f2e	movq	%rax, 0x8(%rsp)
0000000001006f33	movq	0x40(%rsp), %rax
0000000001006f38	movq	%rax, 0x10(%rsp)
0000000001006f3d	callq	runtime.aeshash
0000000001006f42	movq	0x18(%rsp), %rax
0000000001006f47	movq	%rax, 0x48(%rsp)
0000000001006f4c	movq	0x20(%rsp), %rbp
0000000001006f51	addq	$0x28, %rsp
0000000001006f55	retq
0000000001006f56	callq	runtime.morestack_noctxt
0000000001006f5b	jmp	runtime.memhash
runtime.memhash32:
0000000001006f60	movq	runtime.hashkey(%rip), %rax
0000000001006f67	movq	0x8(%rsp), %rcx
0000000001006f6c	movl	(%rcx), %ecx
0000000001006f6e	movq	0x10(%rsp), %rdx
0000000001006f73	leaq	(%rdx,%rax,4), %rax
0000000001006f77	xorq	%rcx, %rax
0000000001006f7a	shlq	$0x20, %rcx
0000000001006f7e	xorq	%rax, %rcx
0000000001006f81	movabsq	$-0x15c7136f860feabf, %rax
0000000001006f8b	imulq	%rcx, %rax
0000000001006f8f	rolq	$0x1f, %rax
0000000001006f93	movabsq	$0x2723a30d96da1399, %rcx
0000000001006f9d	imulq	%rax, %rcx
0000000001006fa1	movq	%rcx, %rax
0000000001006fa4	shrq	$0x1d, %rcx
0000000001006fa8	xorq	%rcx, %rax
0000000001006fab	movabsq	$-0x7c30715207892d29, %rcx
0000000001006fb5	imulq	%rax, %rcx
0000000001006fb9	movq	%rcx, %rax
0000000001006fbc	shrq	$0x20, %rcx
0000000001006fc0	xorq	%rcx, %rax
0000000001006fc3	movq	%rax, 0x18(%rsp)
0000000001006fc8	retq
0000000001006fc9	int3
0000000001006fca	int3
0000000001006fcb	int3
0000000001006fcc	int3
0000000001006fcd	int3
0000000001006fce	int3
0000000001006fcf	int3
runtime.memhash64:
0000000001006fd0	movq	0x8(%rsp), %rax
0000000001006fd5	leaq	0x4(%rax), %rcx
0000000001006fd9	testb	%al, (%rcx)
0000000001006fdb	movq	runtime.hashkey(%rip), %rcx
0000000001006fe2	movq	0x10(%rsp), %rdx
0000000001006fe7	leaq	(%rdx,%rcx,8), %rcx
0000000001006feb	xorq	(%rax), %rcx
0000000001006fee	movabsq	$-0x15c7136f860feabf, %rax
0000000001006ff8	imulq	%rcx, %rax
0000000001006ffc	rolq	$0x1f, %rax
0000000001007000	movabsq	$0x2723a30d96da1399, %rcx
000000000100700a	imulq	%rax, %rcx
000000000100700e	movq	%rcx, %rax
0000000001007011	shrq	$0x1d, %rcx
0000000001007015	xorq	%rcx, %rax
0000000001007018	movabsq	$-0x7c30715207892d29, %rcx
0000000001007022	imulq	%rax, %rcx
0000000001007026	movq	%rcx, %rax
0000000001007029	shrq	$0x20, %rcx
000000000100702d	xorq	%rcx, %rax
0000000001007030	movq	%rax, 0x18(%rsp)
0000000001007035	retq
0000000001007036	int3
0000000001007037	int3
0000000001007038	int3
0000000001007039	int3
000000000100703a	int3
000000000100703b	int3
000000000100703c	int3
000000000100703d	int3
000000000100703e	int3
000000000100703f	int3
runtime.getitab:
0000000001007040	movq	%gs:0x30, %rcx
0000000001007049	cmpq	0x10(%rcx), %rsp
000000000100704d	jbe	0x10073bb
0000000001007053	subq	$0x48, %rsp
0000000001007057	movq	%rbp, 0x40(%rsp)
000000000100705c	leaq	0x40(%rsp), %rbp
0000000001007061	movq	0x50(%rsp), %rax
0000000001007066	movq	0x38(%rax), %rcx
000000000100706a	cmpq	$0x0, 0x40(%rax)
000000000100706f	je	0x10073a0
0000000001007075	movq	0x58(%rsp), %rdx
000000000100707a	movzbl	0x14(%rdx), %ebx
000000000100707e	testb	$0x1, %bl
0000000001007081	jne	0x1007161
0000000001007087	movzbl	0x60(%rsp), %ebx
000000000100708c	testb	%bl, %bl
000000000100708e	je	0x10070a3
0000000001007090	movq	$0x0, 0x68(%rsp)
0000000001007099	movq	0x40(%rsp), %rbp
000000000100709e	addq	$0x48, %rsp
00000000010070a2	retq
00000000010070a3	movl	(%rcx), %ecx
00000000010070a5	movl	%ecx, 0x8(%rsp)
00000000010070a9	movq	%rax, (%rsp)
00000000010070ad	callq	"runtime.(*_type).nameOff"
00000000010070b2	movq	0x10(%rsp), %rax
00000000010070b7	movq	%rax, (%rsp)
00000000010070bb	callq	runtime.name.name
00000000010070c0	movq	0x10(%rsp), %rax
00000000010070c5	movq	%rax, 0x20(%rsp)
00000000010070ca	movq	0x8(%rsp), %rcx
00000000010070cf	movq	%rcx, 0x38(%rsp)
00000000010070d4	leaq	0x5b865(%rip), %rdx
00000000010070db	movq	%rdx, (%rsp)
00000000010070df	callq	runtime.newobject
00000000010070e4	movq	0x8(%rsp), %rax
00000000010070e9	cmpl	$0x0, 0xcdb40(%rip)
00000000010070f0	jne	0x100713d
00000000010070f2	movq	0x58(%rsp), %rcx
00000000010070f7	movq	%rcx, 0x8(%rax)
00000000010070fb	movq	0x50(%rsp), %rcx
0000000001007100	movq	%rcx, 0x10(%rax)
0000000001007104	movq	0x20(%rsp), %rcx
0000000001007109	movq	%rcx, 0x20(%rax)
000000000100710d	cmpl	$0x0, 0xcdb1c(%rip)
0000000001007114	jne	0x1007127
0000000001007116	movq	0x38(%rsp), %rcx
000000000100711b	movq	%rcx, 0x18(%rax)
000000000100711f	movq	%rax, %rcx
0000000001007122	jmp	0x1007389
0000000001007127	leaq	0x18(%rax), %rdi
000000000100712b	movq	%rax, %rcx
000000000100712e	movq	0x38(%rsp), %rax
0000000001007133	callq	runtime.gcWriteBarrier
0000000001007138	jmp	0x1007389
000000000100713d	leaq	0x8(%rax), %rdi
0000000001007141	movq	%rax, %rcx
0000000001007144	movq	0x58(%rsp), %rax
0000000001007149	callq	runtime.gcWriteBarrier
000000000100714e	leaq	0x10(%rcx), %rdi
0000000001007152	movq	0x50(%rsp), %rax
0000000001007157	callq	runtime.gcWriteBarrier
000000000100715c	movq	%rcx, %rax
000000000100715f	jmp	0x1007104
0000000001007161	movq	runtime.itabTable(%rip), %rcx
0000000001007168	movq	%rcx, (%rsp)
000000000100716c	movq	%rax, 0x8(%rsp)
0000000001007171	movq	%rdx, 0x10(%rsp)
0000000001007176	callq	"runtime.(*itabTableType).find"
000000000100717b	movq	0x18(%rsp), %rax
0000000001007180	testq	%rax, %rax
0000000001007183	je	0x1007269
0000000001007189	cmpq	$0x0, 0x18(%rax)
000000000100718e	jne	0x100725a
0000000001007194	movzbl	0x60(%rsp), %ecx
0000000001007199	testb	%cl, %cl
000000000100719b	je	0x10071b0
000000000100719d	movq	$0x0, 0x68(%rsp)
00000000010071a6	movq	0x40(%rsp), %rbp
00000000010071ab	addq	$0x48, %rsp
00000000010071af	retq
00000000010071b0	movq	%rax, (%rsp)
00000000010071b4	callq	"runtime.(*itab).init"
00000000010071b9	movq	0x10(%rsp), %rax
00000000010071be	movq	%rax, 0x20(%rsp)
00000000010071c3	movq	0x8(%rsp), %rcx
00000000010071c8	movq	%rcx, 0x38(%rsp)
00000000010071cd	leaq	0x5b76c(%rip), %rdx
00000000010071d4	movq	%rdx, (%rsp)
00000000010071d8	callq	runtime.newobject
00000000010071dd	movq	0x8(%rsp), %rax
00000000010071e2	cmpl	$0x0, 0xcda47(%rip)
00000000010071e9	jne	0x1007236
00000000010071eb	movq	0x58(%rsp), %rcx
00000000010071f0	movq	%rcx, 0x8(%rax)
00000000010071f4	movq	0x50(%rsp), %rcx
00000000010071f9	movq	%rcx, 0x10(%rax)
00000000010071fd	movq	0x20(%rsp), %rcx
0000000001007202	movq	%rcx, 0x20(%rax)
0000000001007206	cmpl	$0x0, 0xcda23(%rip)
000000000100720d	jne	0x1007220
000000000100720f	movq	0x38(%rsp), %rcx
0000000001007214	movq	%rcx, 0x18(%rax)
0000000001007218	movq	%rax, %rcx
000000000100721b	jmp	0x1007372
0000000001007220	leaq	0x18(%rax), %rdi
0000000001007224	movq	%rax, %rcx
0000000001007227	movq	0x38(%rsp), %rax
000000000100722c	callq	runtime.gcWriteBarrier
0000000001007231	jmp	0x1007372
0000000001007236	leaq	0x8(%rax), %rdi
000000000100723a	movq	%rax, %rcx
000000000100723d	movq	0x58(%rsp), %rax
0000000001007242	callq	runtime.gcWriteBarrier
0000000001007247	leaq	0x10(%rcx), %rdi
000000000100724b	movq	0x50(%rsp), %rax
0000000001007250	callq	runtime.gcWriteBarrier
0000000001007255	movq	%rcx, %rax
0000000001007258	jmp	0x10071fd
000000000100725a	movq	%rax, 0x68(%rsp)
000000000100725f	movq	0x40(%rsp), %rbp
0000000001007264	addq	$0x48, %rsp
0000000001007268	retq
0000000001007269	leaq	runtime.itabLock(%rip), %rax
0000000001007270	movq	%rax, (%rsp)
0000000001007274	callq	runtime.lock
0000000001007279	movq	runtime.itabTable(%rip), %rax
0000000001007280	movq	%rax, (%rsp)
0000000001007284	movq	0x50(%rsp), %rax
0000000001007289	movq	%rax, 0x8(%rsp)
000000000100728e	movq	0x58(%rsp), %rcx
0000000001007293	movq	%rcx, 0x10(%rsp)
0000000001007298	callq	"runtime.(*itabTableType).find"
000000000100729d	movq	0x18(%rsp), %rax
00000000010072a2	testq	%rax, %rax
00000000010072a5	je	0x10072c6
00000000010072a7	movq	%rax, 0x28(%rsp)
00000000010072ac	leaq	runtime.itabLock(%rip), %rax
00000000010072b3	movq	%rax, (%rsp)
00000000010072b7	callq	runtime.unlock
00000000010072bc	movq	0x28(%rsp), %rax
00000000010072c1	jmp	0x1007189
00000000010072c6	movq	0x50(%rsp), %rax
00000000010072cb	movq	0x40(%rax), %rcx
00000000010072cf	decq	%rcx
00000000010072d2	shlq	$0x3, %rcx
00000000010072d6	addq	$0x20, %rcx
00000000010072da	movq	%rcx, (%rsp)
00000000010072de	movq	$0x0, 0x8(%rsp)
00000000010072e7	leaq	0xce632(%rip), %rcx
00000000010072ee	movq	%rcx, 0x10(%rsp)
00000000010072f3	callq	runtime.persistentalloc
00000000010072f8	movq	0x18(%rsp), %rdi
00000000010072fd	testb	%al, (%rdi)
00000000010072ff	cmpl	$0x0, 0xcd92a(%rip)
0000000001007306	jne	0x100734f
0000000001007308	movq	0x50(%rsp), %rax
000000000100730d	movq	%rax, (%rdi)
0000000001007310	movq	0x58(%rsp), %rcx
0000000001007315	movq	%rcx, 0x8(%rdi)
0000000001007319	movq	%rdi, 0x30(%rsp)
000000000100731e	movq	%rdi, (%rsp)
0000000001007322	callq	"runtime.(*itab).init"
0000000001007327	movq	0x30(%rsp), %rax
000000000100732c	movq	%rax, (%rsp)
0000000001007330	callq	runtime.itabAdd
0000000001007335	leaq	runtime.itabLock(%rip), %rax
000000000100733c	movq	%rax, (%rsp)
0000000001007340	callq	runtime.unlock
0000000001007345	movq	0x30(%rsp), %rax
000000000100734a	jmp	0x1007189
000000000100734f	movq	0x50(%rsp), %rax
0000000001007354	callq	runtime.gcWriteBarrier
0000000001007359	leaq	0x8(%rdi), %rcx
000000000100735d	movq	%rdi, %rdx
0000000001007360	movq	%rcx, %rdi
0000000001007363	movq	0x58(%rsp), %rax
0000000001007368	callq	runtime.gcWriteBarrier
000000000100736d	movq	%rdx, %rdi
0000000001007370	jmp	0x1007319
0000000001007372	leaq	0x54f27(%rip), %rax
0000000001007379	movq	%rax, (%rsp)
000000000100737d	movq	%rcx, 0x8(%rsp)
0000000001007382	callq	runtime.gopanic
0000000001007387	ud2
0000000001007389	leaq	0x54f10(%rip), %rax
0000000001007390	movq	%rax, (%rsp)
0000000001007394	movq	%rcx, 0x8(%rsp)
0000000001007399	callq	runtime.gopanic
000000000100739e	ud2
00000000010073a0	leaq	0x660ee(%rip), %rax
00000000010073a7	movq	%rax, (%rsp)
00000000010073ab	movq	$0x1f, 0x8(%rsp)
00000000010073b4	callq	runtime.throw
00000000010073b9	ud2
00000000010073bb	callq	runtime.morestack_noctxt
00000000010073c0	jmp	runtime.getitab
00000000010073c5	int3
00000000010073c6	int3
00000000010073c7	int3
00000000010073c8	int3
00000000010073c9	int3
00000000010073ca	int3
00000000010073cb	int3
00000000010073cc	int3
00000000010073cd	int3
00000000010073ce	int3
00000000010073cf	int3
runtime.(*itabTableType).find:
00000000010073d0	movq	0x8(%rsp), %rax
00000000010073d5	movq	(%rax), %rcx
00000000010073d8	decq	%rcx
00000000010073db	movq	0x10(%rsp), %rdx
00000000010073e0	movl	0x10(%rdx), %ebx
00000000010073e3	movq	0x18(%rsp), %rsi
00000000010073e8	xorl	0x10(%rsi), %ebx
00000000010073eb	andq	%rcx, %rbx
00000000010073ee	movl	$0x1, %edi
00000000010073f3	jmp	0x1007402
00000000010073f5	leaq	0x1(%rdi), %r8
00000000010073f9	addq	%rdi, %rbx
00000000010073fc	andq	%rcx, %rbx
00000000010073ff	movq	%r8, %rdi
0000000001007402	leaq	0x10(%rax,%rbx,8), %r8
0000000001007407	movq	(%r8), %r8
000000000100740a	testq	%r8, %r8
000000000100740d	je	0x1007426
000000000100740f	movq	(%r8), %r9
0000000001007412	cmpq	%rdx, %r9
0000000001007415	jne	0x10073f5
0000000001007417	movq	0x8(%r8), %r9
000000000100741b	cmpq	%rsi, %r9
000000000100741e	jne	0x10073f5
0000000001007420	movq	%r8, 0x20(%rsp)
0000000001007425	retq
0000000001007426	movq	$0x0, 0x20(%rsp)
000000000100742f	retq
runtime.itabAdd:
0000000001007430	movq	%gs:0x30, %rcx
0000000001007439	cmpq	0x10(%rcx), %rsp
000000000100743d	jbe	0x1007572
0000000001007443	subq	$0x48, %rsp
0000000001007447	movq	%rbp, 0x40(%rsp)
000000000100744c	leaq	0x40(%rsp), %rbp
0000000001007451	movq	%gs:0x30, %rax
000000000100745a	movq	0x30(%rax), %rax
000000000100745e	cmpl	$0x0, 0xe8(%rax)
0000000001007465	jne	0x1007557
000000000100746b	movq	runtime.itabTable(%rip), %rax
0000000001007472	movq	(%rax), %rcx
0000000001007475	movq	%rcx, %rdx
0000000001007478	shrq	$0x2, %rcx
000000000100747c	leaq	(%rcx,%rcx,2), %rcx
0000000001007480	cmpq	%rcx, 0x8(%rax)
0000000001007484	jae	0x10074a3
0000000001007486	movq	%rax, (%rsp)
000000000100748a	movq	0x50(%rsp), %rax
000000000100748f	movq	%rax, 0x8(%rsp)
0000000001007494	callq	"runtime.(*itabTableType).add"
0000000001007499	movq	0x40(%rsp), %rbp
000000000100749e	addq	$0x48, %rsp
00000000010074a2	retq
00000000010074a3	movq	%rax, 0x20(%rsp)
00000000010074a8	leaq	0x2(%rdx,%rdx), %rax
00000000010074ad	shlq	$0x3, %rax
00000000010074b1	movq	%rax, (%rsp)
00000000010074b5	movq	$0x0, 0x8(%rsp)
00000000010074be	movb	$0x1, 0x10(%rsp)
00000000010074c3	callq	runtime.mallocgc
00000000010074c8	movq	0x18(%rsp), %rax
00000000010074cd	movq	%rax, 0x28(%rsp)
00000000010074d2	movq	0x20(%rsp), %rcx
00000000010074d7	movq	(%rcx), %rdx
00000000010074da	shlq	%rdx
00000000010074dd	movq	%rdx, (%rax)
00000000010074e0	xorps	%xmm0, %xmm0
00000000010074e3	movups	%xmm0, 0x30(%rsp)
00000000010074e8	leaq	"runtime.(*itabTableType).add-fm"(%rip), %rdx
00000000010074ef	movq	%rdx, 0x30(%rsp)
00000000010074f4	movq	%rax, 0x38(%rsp)
00000000010074f9	leaq	0x30(%rsp), %rdx
00000000010074fe	movq	%rdx, (%rsp)
0000000001007502	callq	runtime.iterate_itabs
0000000001007507	movq	0x20(%rsp), %rax
000000000100750c	movq	0x8(%rax), %rax
0000000001007510	movq	0x28(%rsp), %rcx
0000000001007515	cmpq	%rax, 0x8(%rcx)
0000000001007519	jne	0x100753c
000000000100751b	leaq	runtime.itabTable(%rip), %rax
0000000001007522	movq	%rax, (%rsp)
0000000001007526	movq	%rcx, 0x8(%rsp)
000000000100752b	callq	runtime.atomicstorep
0000000001007530	movq	runtime.itabTable(%rip), %rax
0000000001007537	jmp	0x1007486
000000000100753c	leaq	0x66a1f(%rip), %rax
0000000001007543	movq	%rax, (%rsp)
0000000001007547	movq	$0x27, 0x8(%rsp)
0000000001007550	callq	runtime.throw
0000000001007555	ud2
0000000001007557	leaq	0x64145(%rip), %rax
000000000100755e	movq	%rax, (%rsp)
0000000001007562	movq	$0xf, 0x8(%rsp)
000000000100756b	callq	runtime.throw
0000000001007570	ud2
0000000001007572	callq	runtime.morestack_noctxt
0000000001007577	jmp	runtime.itabAdd
000000000100757c	int3
000000000100757d	int3
000000000100757e	int3
000000000100757f	int3
runtime.(*itabTableType).add:
0000000001007580	movq	0x10(%rsp), %rax
0000000001007585	movq	(%rax), %rcx
0000000001007588	movq	0x8(%rax), %rdx
000000000100758c	movq	0x8(%rsp), %rbx
0000000001007591	movq	(%rbx), %rsi
0000000001007594	decq	%rsi
0000000001007597	movl	0x10(%rcx), %ecx
000000000100759a	xorl	0x10(%rdx), %ecx
000000000100759d	andq	%rsi, %rcx
00000000010075a0	movl	$0x1, %edx
00000000010075a5	jmp	0x10075b4
00000000010075a7	leaq	0x1(%rdx), %rdi
00000000010075ab	addq	%rdx, %rcx
00000000010075ae	andq	%rsi, %rcx
00000000010075b1	movq	%rdi, %rdx
00000000010075b4	leaq	0x10(%rbx,%rcx,8), %rdi
00000000010075b9	testb	%al, (%rdi)
00000000010075bb	movq	0x10(%rbx,%rcx,8), %r8
00000000010075c0	cmpq	%rax, %r8
00000000010075c3	je	0x10075d2
00000000010075c5	testq	%r8, %r8
00000000010075c8	jne	0x10075a7
00000000010075ca	xchgq	%rax, (%rdi)
00000000010075cd	incq	0x8(%rbx)
00000000010075d1	retq
00000000010075d2	retq
00000000010075d3	int3
00000000010075d4	int3
00000000010075d5	int3
00000000010075d6	int3
00000000010075d7	int3
00000000010075d8	int3
00000000010075d9	int3
00000000010075da	int3
00000000010075db	int3
00000000010075dc	int3
00000000010075dd	int3
00000000010075de	int3
00000000010075df	int3
runtime.(*itab).init:
00000000010075e0	movq	%gs:0x30, %rcx
00000000010075e9	leaq	-0x28(%rsp), %rax
00000000010075ee	cmpq	0x10(%rcx), %rax
00000000010075f2	jbe	0x1007a28
00000000010075f8	subq	$0xa8, %rsp
00000000010075ff	movq	%rbp, 0xa0(%rsp)
0000000001007607	leaq	0xa0(%rsp), %rbp
000000000100760f	movq	0xb0(%rsp), %rax
0000000001007617	movq	(%rax), %rcx
000000000100761a	movq	%rcx, 0x70(%rsp)
000000000100761f	movq	0x8(%rax), %rdx
0000000001007623	movq	%rdx, 0x58(%rsp)
0000000001007628	movq	%rdx, (%rsp)
000000000100762c	callq	"runtime.(*_type).uncommon"
0000000001007631	movq	0x8(%rsp), %rax
0000000001007636	movl	0x8(%rax), %ecx
0000000001007639	addq	%rax, %rcx
000000000100763c	testb	%al, (%rcx)
000000000100763e	movq	0x70(%rsp), %rdx
0000000001007643	movq	0x40(%rdx), %rbx
0000000001007647	movzwl	0x4(%rax), %esi
000000000100764b	cmpq	$0x10000, %rsi
0000000001007652	ja	0x1007a21
0000000001007658	movq	%rax, 0x98(%rsp)
0000000001007660	movq	%rbx, 0x50(%rsp)
0000000001007665	movq	%rcx, 0x90(%rsp)
000000000100766d	movq	%rsi, 0x48(%rsp)
0000000001007672	xorl	%edi, %edi
0000000001007674	xorl	%r8d, %r8d
0000000001007677	jmp	0x1007860
000000000100767c	movq	0x28(%rsp), %r8
0000000001007681	leaq	0x1(%r8), %rdi
0000000001007685	movq	0x58(%rsp), %r8
000000000100768a	movq	0x90(%rsp), %r9
0000000001007692	movq	0x48(%rsp), %r10
0000000001007697	movq	0x30(%rsp), %rax
000000000100769c	movq	0x68(%rsp), %rcx
00000000010076a1	movq	%r8, %rdx
00000000010076a4	movq	%r9, %rbx
00000000010076a7	movq	%r10, %rsi
00000000010076aa	cmpq	%rsi, %rdi
00000000010076ad	jge	0x100798a
00000000010076b3	jae	0x1007a13
00000000010076b9	movq	%rdi, 0x28(%rsp)
00000000010076be	shlq	$0x4, %rdi
00000000010076c2	movq	%rdi, 0x40(%rsp)
00000000010076c7	movl	(%rbx,%rdi), %ecx
00000000010076ca	movl	%ecx, 0x8(%rsp)
00000000010076ce	movq	%rdx, (%rsp)
00000000010076d2	callq	"runtime.(*_type).nameOff"
00000000010076d7	movq	0x10(%rsp), %rax
00000000010076dc	movq	%rax, 0x80(%rsp)
00000000010076e4	movq	0x40(%rsp), %rcx
00000000010076e9	movq	0x90(%rsp), %rdx
00000000010076f1	movl	0x4(%rdx,%rcx), %ebx
00000000010076f5	movl	%ebx, 0x8(%rsp)
00000000010076f9	movq	0x58(%rsp), %rbx
00000000010076fe	movq	%rbx, (%rsp)
0000000001007702	callq	"runtime.(*_type).typeOff"
0000000001007707	movq	0x10(%rsp), %rax
000000000100770c	movq	0x60(%rsp), %rcx
0000000001007711	cmpq	%rcx, %rax
0000000001007714	jne	0x100767c
000000000100771a	movq	0x80(%rsp), %rax
0000000001007722	movq	%rax, (%rsp)
0000000001007726	callq	runtime.name.name
000000000100772b	movq	0x10(%rsp), %rax
0000000001007730	movq	0x8(%rsp), %rcx
0000000001007735	movq	0x38(%rsp), %rdx
000000000100773a	cmpq	%rdx, %rax
000000000100773d	je	0x1007749
000000000100773f	movq	0x60(%rsp), %rcx
0000000001007744	jmp	0x100767c
0000000001007749	movq	%rcx, (%rsp)
000000000100774d	movq	0x78(%rsp), %rax
0000000001007752	movq	%rax, 0x8(%rsp)
0000000001007757	callq	runtime.memequal
000000000100775c	leaq	0x18(%rsp), %rax
0000000001007761	cmpb	$0x0, (%rax)
0000000001007764	jne	0x1007770
0000000001007766	movq	0x60(%rsp), %rcx
000000000100776b	jmp	0x100767c
0000000001007770	movq	0x80(%rsp), %rax
0000000001007778	movq	%rax, (%rsp)
000000000100777c	callq	runtime.name.pkgPath
0000000001007781	movq	0x10(%rsp), %rax
0000000001007786	movq	0x8(%rsp), %rcx
000000000100778b	testq	%rax, %rax
000000000100778e	je	0x1007951
0000000001007794	movq	0x80(%rsp), %rdx
000000000100779c	movzbl	(%rdx), %edx
000000000100779f	testb	$0x1, %dl
00000000010077a2	jne	0x10077e1
00000000010077a4	movq	0x30(%rsp), %rdx
00000000010077a9	cmpq	%rax, %rdx
00000000010077ac	je	0x10077b8
00000000010077ae	movq	0x60(%rsp), %rcx
00000000010077b3	jmp	0x100767c
00000000010077b8	movq	%rcx, (%rsp)
00000000010077bc	movq	0x68(%rsp), %rcx
00000000010077c1	movq	%rcx, 0x8(%rsp)
00000000010077c6	movq	%rax, 0x10(%rsp)
00000000010077cb	callq	runtime.memequal
00000000010077d0	leaq	0x18(%rsp), %rax
00000000010077d5	cmpb	$0x0, (%rax)
00000000010077d8	jne	0x10077e1
00000000010077da	movq	0x30(%rsp), %rdx
00000000010077df	jmp	0x10077ae
00000000010077e1	movq	0x40(%rsp), %rax
00000000010077e6	movq	0x90(%rsp), %rcx
00000000010077ee	movl	0x8(%rcx,%rax), %eax
00000000010077f2	movl	%eax, 0x8(%rsp)
00000000010077f6	movq	0x58(%rsp), %rax
00000000010077fb	movq	%rax, (%rsp)
00000000010077ff	callq	"runtime.(*_type).textOff"
0000000001007804	movq	0x20(%rsp), %rax
0000000001007809	movq	0xb0(%rsp), %rcx
0000000001007811	leaq	0x18(%rcx,%rax,8), %rdi
0000000001007816	testb	%al, (%rdi)
0000000001007818	movq	0x10(%rsp), %rdx
000000000100781d	cmpl	$0x0, 0xcd40c(%rip)
0000000001007824	jne	0x100793e
000000000100782a	movq	%rdx, 0x18(%rcx,%rax,8)
000000000100782f	leaq	0x1(%rax), %rdi
0000000001007833	movq	0x50(%rsp), %r9
0000000001007838	movq	0x70(%rsp), %r10
000000000100783d	movq	0x28(%rsp), %r11
0000000001007842	movq	0x98(%rsp), %rax
000000000100784a	movq	0x90(%rsp), %rcx
0000000001007852	movq	%r10, %rdx
0000000001007855	movq	%r9, %rbx
0000000001007858	movq	0x48(%rsp), %rsi
000000000100785d	movq	%r11, %r8
0000000001007860	cmpq	%rbx, %rdi
0000000001007863	jge	0x10079e5
0000000001007869	movq	0x38(%rdx), %r9
000000000100786d	movq	0x40(%rdx), %r10
0000000001007871	cmpq	%r10, %rdi
0000000001007874	jae	0x1007a1a
000000000100787a	movq	%rdi, 0x20(%rsp)
000000000100787f	movq	%r9, 0x88(%rsp)
0000000001007887	movq	%r8, 0x28(%rsp)
000000000100788c	movl	0x4(%r9,%rdi,8), %eax
0000000001007891	movl	%eax, 0x8(%rsp)
0000000001007895	movq	%rdx, (%rsp)
0000000001007899	callq	"runtime.(*_type).typeOff"
000000000100789e	movq	0x10(%rsp), %rax
00000000010078a3	movq	%rax, 0x60(%rsp)
00000000010078a8	movq	0x20(%rsp), %rcx
00000000010078ad	movq	0x88(%rsp), %rdx
00000000010078b5	movl	(%rdx,%rcx,8), %edx
00000000010078b8	movl	%edx, 0x8(%rsp)
00000000010078bc	movq	0x70(%rsp), %rdx
00000000010078c1	movq	%rdx, (%rsp)
00000000010078c5	callq	"runtime.(*_type).nameOff"
00000000010078ca	movq	0x10(%rsp), %rax
00000000010078cf	movq	%rax, 0x80(%rsp)
00000000010078d7	movq	%rax, (%rsp)
00000000010078db	callq	runtime.name.name
00000000010078e0	movq	0x10(%rsp), %rax
00000000010078e5	movq	%rax, 0x38(%rsp)
00000000010078ea	movq	0x8(%rsp), %rcx
00000000010078ef	movq	%rcx, 0x78(%rsp)
00000000010078f4	movq	0x80(%rsp), %rdx
00000000010078fc	movq	%rdx, (%rsp)
0000000001007900	callq	runtime.name.pkgPath
0000000001007905	movq	0x10(%rsp), %rax
000000000100790a	movq	0x8(%rsp), %rcx
000000000100790f	testq	%rax, %rax
0000000001007912	je	0x10079c4
0000000001007918	movq	%rax, 0x30(%rsp)
000000000100791d	movq	%rcx, 0x68(%rsp)
0000000001007922	movq	0x58(%rsp), %rdx
0000000001007927	movq	0x90(%rsp), %rbx
000000000100792f	movq	0x48(%rsp), %rsi
0000000001007934	movq	0x28(%rsp), %rdi
0000000001007939	jmp	0x10076aa
000000000100793e	movq	%rax, %rbx
0000000001007941	movq	%rdx, %rax
0000000001007944	callq	runtime.gcWriteBarrier
0000000001007949	movq	%rbx, %rax
000000000100794c	jmp	0x100782f
0000000001007951	movq	0x98(%rsp), %rax
0000000001007959	movl	(%rax), %ecx
000000000100795b	movl	%ecx, 0x8(%rsp)
000000000100795f	movq	0x58(%rsp), %rcx
0000000001007964	movq	%rcx, (%rsp)
0000000001007968	callq	"runtime.(*_type).nameOff"
000000000100796d	movq	0x10(%rsp), %rax
0000000001007972	movq	%rax, (%rsp)
0000000001007976	callq	runtime.name.name
000000000100797b	movq	0x8(%rsp), %rcx
0000000001007980	movq	0x10(%rsp), %rax
0000000001007985	jmp	0x1007794
000000000100798a	movq	0xb0(%rsp), %rax
0000000001007992	movq	$0x0, 0x18(%rax)
000000000100799a	movq	0x78(%rsp), %rax
000000000100799f	movq	%rax, 0xb8(%rsp)
00000000010079a7	movq	0x38(%rsp), %rax
00000000010079ac	movq	%rax, 0xc0(%rsp)
00000000010079b4	movq	0xa0(%rsp), %rbp
00000000010079bc	addq	$0xa8, %rsp
00000000010079c3	retq
00000000010079c4	movq	0x70(%rsp), %rax
00000000010079c9	movq	0x30(%rax), %rcx
00000000010079cd	movq	%rcx, (%rsp)
00000000010079d1	callq	runtime.name.name
00000000010079d6	movq	0x8(%rsp), %rcx
00000000010079db	movq	0x10(%rsp), %rax
00000000010079e0	jmp	0x1007918
00000000010079e5	movq	0x58(%rsp), %rax
00000000010079ea	movl	0x10(%rax), %eax
00000000010079ed	movq	0xb0(%rsp), %rcx
00000000010079f5	movl	%eax, 0x10(%rcx)
00000000010079f8	xorps	%xmm0, %xmm0
00000000010079fb	movups	%xmm0, 0xb8(%rsp)
0000000001007a03	movq	0xa0(%rsp), %rbp
0000000001007a0b	addq	$0xa8, %rsp
0000000001007a12	retq
0000000001007a13	callq	runtime.panicindex
0000000001007a18	ud2
0000000001007a1a	callq	runtime.panicindex
0000000001007a1f	ud2
0000000001007a21	callq	runtime.panicslice
0000000001007a26	ud2
0000000001007a28	callq	runtime.morestack_noctxt
0000000001007a2d	jmp	"runtime.(*itab).init"
0000000001007a32	int3
0000000001007a33	int3
0000000001007a34	int3
0000000001007a35	int3
0000000001007a36	int3
0000000001007a37	int3
0000000001007a38	int3
0000000001007a39	int3
0000000001007a3a	int3
0000000001007a3b	int3
0000000001007a3c	int3
0000000001007a3d	int3
0000000001007a3e	int3
0000000001007a3f	int3
runtime.itabsinit:
0000000001007a40	movq	%gs:0x30, %rcx
0000000001007a49	cmpq	0x10(%rcx), %rsp
0000000001007a4d	jbe	0x1007b1f
0000000001007a53	subq	$0x40, %rsp
0000000001007a57	movq	%rbp, 0x38(%rsp)
0000000001007a5c	leaq	0x38(%rsp), %rbp
0000000001007a61	leaq	runtime.itabLock(%rip), %rax
0000000001007a68	movq	%rax, (%rsp)
0000000001007a6c	callq	runtime.lock
0000000001007a71	movq	runtime.modulesSlice(%rip), %rax
0000000001007a78	testq	%rax, %rax
0000000001007a7b	je	0x1007b16
0000000001007a81	movq	0x8(%rax), %rcx
0000000001007a85	movq	(%rax), %rax
0000000001007a88	movq	%rax, 0x30(%rsp)
0000000001007a8d	movq	%rcx, 0x8(%rsp)
0000000001007a92	xorl	%edx, %edx
0000000001007a94	jmp	0x1007ad2
0000000001007a96	movq	%rdi, 0x10(%rsp)
0000000001007a9b	movq	(%rbx,%rdi,8), %rax
0000000001007a9f	movq	%rax, (%rsp)
0000000001007aa3	callq	runtime.itabAdd
0000000001007aa8	movq	0x10(%rsp), %rax
0000000001007aad	leaq	0x1(%rax), %rdi
0000000001007ab1	movq	0x30(%rsp), %rax
0000000001007ab6	movq	0x8(%rsp), %rcx
0000000001007abb	movq	0x20(%rsp), %rdx
0000000001007ac0	movq	0x28(%rsp), %rbx
0000000001007ac5	movq	0x18(%rsp), %rsi
0000000001007aca	cmpq	%rsi, %rdi
0000000001007acd	jl	0x1007a96
0000000001007acf	incq	%rdx
0000000001007ad2	cmpq	%rcx, %rdx
0000000001007ad5	jge	0x1007afc
0000000001007ad7	movq	%rdx, 0x20(%rsp)
0000000001007adc	movq	(%rax,%rdx,8), %rbx
0000000001007ae0	movq	0x110(%rbx), %rsi
0000000001007ae7	movq	%rsi, 0x18(%rsp)
0000000001007aec	movq	0x108(%rbx), %rbx
0000000001007af3	movq	%rbx, 0x28(%rsp)
0000000001007af8	xorl	%edi, %edi
0000000001007afa	jmp	0x1007aca
0000000001007afc	leaq	runtime.itabLock(%rip), %rax
0000000001007b03	movq	%rax, (%rsp)
0000000001007b07	callq	runtime.unlock
0000000001007b0c	movq	0x38(%rsp), %rbp
0000000001007b11	addq	$0x40, %rsp
0000000001007b15	retq
0000000001007b16	xorl	%eax, %eax
0000000001007b18	xorl	%ecx, %ecx
0000000001007b1a	jmp	0x1007a88
0000000001007b1f	callq	runtime.morestack_noctxt
0000000001007b24	jmp	runtime.itabsinit
0000000001007b29	int3
0000000001007b2a	int3
0000000001007b2b	int3
0000000001007b2c	int3
0000000001007b2d	int3
0000000001007b2e	int3
0000000001007b2f	int3
runtime.panicdottypeI:
0000000001007b30	movq	%gs:0x30, %rcx
0000000001007b39	cmpq	0x10(%rcx), %rsp
0000000001007b3d	jbe	0x1007c26
0000000001007b43	subq	$0x20, %rsp
0000000001007b47	movq	%rbp, 0x18(%rsp)
0000000001007b4c	leaq	0x18(%rsp), %rbp
0000000001007b51	movq	0x28(%rsp), %rax
0000000001007b56	testq	%rax, %rax
0000000001007b59	je	0x1007c08
0000000001007b5f	movq	0x8(%rax), %rax
0000000001007b63	movq	%rax, 0x10(%rsp)
0000000001007b68	leaq	0x5add1(%rip), %rcx
0000000001007b6f	movq	%rcx, (%rsp)
0000000001007b73	callq	runtime.newobject
0000000001007b78	movq	0x8(%rsp), %rdi
0000000001007b7d	cmpl	$0x0, 0xcd0ac(%rip)
0000000001007b84	jne	0x1007bd4
0000000001007b86	movq	0x38(%rsp), %rcx
0000000001007b8b	movq	%rcx, (%rdi)
0000000001007b8e	movq	0x10(%rsp), %rcx
0000000001007b93	movq	%rcx, 0x8(%rdi)
0000000001007b97	movq	0x30(%rsp), %rcx
0000000001007b9c	movq	%rcx, 0x10(%rdi)
0000000001007ba0	movq	$0x0, 0x20(%rdi)
0000000001007ba8	cmpl	$0x0, 0xcd081(%rip)
0000000001007baf	jne	0x1007bbe
0000000001007bb1	movq	$0x0, 0x18(%rdi)
0000000001007bb9	movq	%rdi, %rdx
0000000001007bbc	jmp	0x1007c0f
0000000001007bbe	leaq	0x18(%rdi), %rcx
0000000001007bc2	movq	%rdi, %rax
0000000001007bc5	movq	%rcx, %rdi
0000000001007bc8	movq	%rax, %rdx
0000000001007bcb	xorl	%eax, %eax
0000000001007bcd	callq	runtime.gcWriteBarrier
0000000001007bd2	jmp	0x1007c0f
0000000001007bd4	movq	0x38(%rsp), %rax
0000000001007bd9	callq	runtime.gcWriteBarrier
0000000001007bde	leaq	0x8(%rdi), %rcx
0000000001007be2	movq	%rdi, %rax
0000000001007be5	movq	%rcx, %rdi
0000000001007be8	movq	%rax, %rdx
0000000001007beb	movq	0x10(%rsp), %rax
0000000001007bf0	callq	runtime.gcWriteBarrier
0000000001007bf5	leaq	0x10(%rdx), %rdi
0000000001007bf9	movq	0x30(%rsp), %rax
0000000001007bfe	callq	runtime.gcWriteBarrier
0000000001007c03	movq	%rdx, %rdi
0000000001007c06	jmp	0x1007ba0
0000000001007c08	xorl	%eax, %eax
0000000001007c0a	jmp	0x1007b63
0000000001007c0f	leaq	0x5468a(%rip), %rax
0000000001007c16	movq	%rax, (%rsp)
0000000001007c1a	movq	%rdx, 0x8(%rsp)
0000000001007c1f	callq	runtime.gopanic
0000000001007c24	ud2
0000000001007c26	callq	runtime.morestack_noctxt
0000000001007c2b	jmp	runtime.panicdottypeI
runtime.convT2Estring:
0000000001007c30	movq	%gs:0x30, %rcx
0000000001007c39	cmpq	0x10(%rcx), %rsp
0000000001007c3d	jbe	0x1007cc5
0000000001007c43	subq	$0x28, %rsp
0000000001007c47	movq	%rbp, 0x20(%rsp)
0000000001007c4c	leaq	0x20(%rsp), %rbp
0000000001007c51	movq	0x38(%rsp), %rax
0000000001007c56	cmpq	$0x0, 0x8(%rax)
0000000001007c5b	jne	0x1007c7d
0000000001007c5d	leaq	runtime.zeroVal(%rip), %rax
0000000001007c64	movq	0x30(%rsp), %rcx
0000000001007c69	movq	%rcx, 0x40(%rsp)
0000000001007c6e	movq	%rax, 0x48(%rsp)
0000000001007c73	movq	0x20(%rsp), %rbp
0000000001007c78	addq	$0x28, %rsp
0000000001007c7c	retq
0000000001007c7d	movq	0x30(%rsp), %rax
0000000001007c82	movq	(%rax), %rcx
0000000001007c85	movq	%rcx, (%rsp)
0000000001007c89	movq	%rax, 0x8(%rsp)
0000000001007c8e	movb	$0x1, 0x10(%rsp)
0000000001007c93	callq	runtime.mallocgc
0000000001007c98	movq	0x18(%rsp), %rdi
0000000001007c9d	movq	0x38(%rsp), %rax
0000000001007ca2	movq	0x8(%rax), %rcx
0000000001007ca6	movq	(%rax), %rax
0000000001007ca9	movq	%rcx, 0x8(%rdi)
0000000001007cad	cmpl	$0x0, 0xccf7c(%rip)
0000000001007cb4	jne	0x1007cbe
0000000001007cb6	movq	%rax, (%rdi)
0000000001007cb9	movq	%rdi, %rax
0000000001007cbc	jmp	0x1007c64
0000000001007cbe	callq	runtime.gcWriteBarrier
0000000001007cc3	jmp	0x1007cb9
0000000001007cc5	callq	runtime.morestack_noctxt
0000000001007cca	jmp	runtime.convT2Estring
0000000001007ccf	int3
runtime.assertE2I2:
0000000001007cd0	movq	%gs:0x30, %rcx
0000000001007cd9	cmpq	0x10(%rcx), %rsp
0000000001007cdd	jbe	0x1007d69
0000000001007ce3	subq	$0x28, %rsp
0000000001007ce7	movq	%rbp, 0x20(%rsp)
0000000001007cec	leaq	0x20(%rsp), %rbp
0000000001007cf1	movq	0x38(%rsp), %rax
0000000001007cf6	testq	%rax, %rax
0000000001007cf9	je	0x1007d52
0000000001007cfb	movq	0x30(%rsp), %rcx
0000000001007d00	movq	%rcx, (%rsp)
0000000001007d04	movq	%rax, 0x8(%rsp)
0000000001007d09	movb	$0x1, 0x10(%rsp)
0000000001007d0e	callq	runtime.getitab
0000000001007d13	movq	0x18(%rsp), %rax
0000000001007d18	testq	%rax, %rax
0000000001007d1b	je	0x1007d3b
0000000001007d1d	movq	%rax, 0x48(%rsp)
0000000001007d22	movq	0x40(%rsp), %rax
0000000001007d27	movq	%rax, 0x50(%rsp)
0000000001007d2c	movb	$0x1, 0x58(%rsp)
0000000001007d31	movq	0x20(%rsp), %rbp
0000000001007d36	addq	$0x28, %rsp
0000000001007d3a	retq
0000000001007d3b	xorps	%xmm0, %xmm0
0000000001007d3e	movups	%xmm0, 0x48(%rsp)
0000000001007d43	movb	$0x0, 0x58(%rsp)
0000000001007d48	movq	0x20(%rsp), %rbp
0000000001007d4d	addq	$0x28, %rsp
0000000001007d51	retq
0000000001007d52	xorps	%xmm0, %xmm0
0000000001007d55	movups	%xmm0, 0x48(%rsp)
0000000001007d5a	movb	$0x0, 0x58(%rsp)
0000000001007d5f	movq	0x20(%rsp), %rbp
0000000001007d64	addq	$0x28, %rsp
0000000001007d68	retq
0000000001007d69	callq	runtime.morestack_noctxt
0000000001007d6e	jmp	runtime.assertE2I2
0000000001007d73	int3
0000000001007d74	int3
0000000001007d75	int3
0000000001007d76	int3
0000000001007d77	int3
0000000001007d78	int3
0000000001007d79	int3
0000000001007d7a	int3
0000000001007d7b	int3
0000000001007d7c	int3
0000000001007d7d	int3
0000000001007d7e	int3
0000000001007d7f	int3
runtime.iterate_itabs:
0000000001007d80	movq	%gs:0x30, %rcx
0000000001007d89	cmpq	0x10(%rcx), %rsp
0000000001007d8d	jbe	0x1007df2
0000000001007d8f	subq	$0x20, %rsp
0000000001007d93	movq	%rbp, 0x18(%rsp)
0000000001007d98	leaq	0x18(%rsp), %rbp
0000000001007d9d	movq	runtime.itabTable(%rip), %rax
0000000001007da4	movq	%rax, 0x10(%rsp)
0000000001007da9	xorl	%ecx, %ecx
0000000001007dab	jmp	0x1007db0
0000000001007dad	incq	%rcx
0000000001007db0	movq	(%rax), %rbx
0000000001007db3	cmpq	%rbx, %rcx
0000000001007db6	jae	0x1007de8
0000000001007db8	leaq	0x10(%rax,%rcx,8), %rbx
0000000001007dbd	testb	%al, (%rbx)
0000000001007dbf	movq	0x10(%rax,%rcx,8), %rbx
0000000001007dc4	testq	%rbx, %rbx
0000000001007dc7	je	0x1007dad
0000000001007dc9	movq	%rcx, 0x8(%rsp)
0000000001007dce	movq	%rbx, (%rsp)
0000000001007dd2	movq	0x28(%rsp), %rdx
0000000001007dd7	movq	(%rdx), %rax
0000000001007dda	callq	*%rax
0000000001007ddc	movq	0x10(%rsp), %rax
0000000001007de1	movq	0x8(%rsp), %rcx
0000000001007de6	jmp	0x1007dad
0000000001007de8	movq	0x18(%rsp), %rbp
0000000001007ded	addq	$0x20, %rsp
0000000001007df1	retq
0000000001007df2	callq	runtime.morestack_noctxt
0000000001007df7	jmp	runtime.iterate_itabs
0000000001007df9	int3
0000000001007dfa	int3
0000000001007dfb	int3
0000000001007dfc	int3
0000000001007dfd	int3
0000000001007dfe	int3
0000000001007dff	int3
runtime.(*lfstack).push:
0000000001007e00	movq	%gs:0x30, %rcx
0000000001007e09	cmpq	0x10(%rcx), %rsp
0000000001007e0d	jbe	0x1007f50
0000000001007e13	subq	$0x30, %rsp
0000000001007e17	movq	%rbp, 0x28(%rsp)
0000000001007e1c	leaq	0x28(%rsp), %rbp
0000000001007e21	movq	0x40(%rsp), %rcx
0000000001007e26	movq	0x8(%rcx), %rdx
0000000001007e2a	incq	%rdx
0000000001007e2d	movq	%rdx, 0x8(%rcx)
0000000001007e31	movq	%rcx, %rbx
0000000001007e34	shlq	$0x10, %rcx
0000000001007e38	movq	%rdx, %rsi
0000000001007e3b	andq	$0x7ffff, %rdx
0000000001007e42	orq	%rdx, %rcx
0000000001007e45	movq	%rcx, %rdx
0000000001007e48	sarq	$0x13, %rcx
0000000001007e4c	shlq	$0x3, %rcx
0000000001007e50	cmpq	%rbx, %rcx
0000000001007e53	jne	0x1007e7b
0000000001007e55	movq	0x38(%rsp), %rcx
0000000001007e5a	movq	(%rcx), %rsi
0000000001007e5d	movq	%rsi, (%rbx)
0000000001007e60	movq	%rsi, %rax
0000000001007e63	lock
0000000001007e64	cmpxchgq	%rdx, (%rcx)
0000000001007e68	sete	%sil
0000000001007e6c	testb	%sil, %sil
0000000001007e6f	je	0x1007e5a
0000000001007e71	movq	0x28(%rsp), %rbp
0000000001007e76	addq	$0x30, %rsp
0000000001007e7a	retq
0000000001007e7b	movq	%rsi, 0x18(%rsp)
0000000001007e80	movq	%rdx, 0x10(%rsp)
0000000001007e85	movq	%rcx, 0x20(%rsp)
0000000001007e8a	callq	runtime.printlock
0000000001007e8f	leaq	0x665f1(%rip), %rax
0000000001007e96	movq	%rax, (%rsp)
0000000001007e9a	movq	$0x2c, 0x8(%rsp)
0000000001007ea3	callq	runtime.printstring
0000000001007ea8	movq	0x40(%rsp), %rax
0000000001007ead	movq	%rax, (%rsp)
0000000001007eb1	callq	runtime.printpointer
0000000001007eb6	leaq	0x62ced(%rip), %rax
0000000001007ebd	movq	%rax, (%rsp)
0000000001007ec1	movq	$0x5, 0x8(%rsp)
0000000001007eca	callq	runtime.printstring
0000000001007ecf	movq	0x18(%rsp), %rax
0000000001007ed4	movq	%rax, (%rsp)
0000000001007ed8	callq	runtime.printhex
0000000001007edd	leaq	0x62f3d(%rip), %rax
0000000001007ee4	movq	%rax, (%rsp)
0000000001007ee8	movq	$0x8, 0x8(%rsp)
0000000001007ef1	callq	runtime.printstring
0000000001007ef6	movq	0x10(%rsp), %rax
0000000001007efb	movq	%rax, (%rsp)
0000000001007eff	callq	runtime.printhex
0000000001007f04	leaq	0x62f97(%rip), %rax
0000000001007f0b	movq	%rax, (%rsp)
0000000001007f0f	movq	$0x9, 0x8(%rsp)
0000000001007f18	callq	runtime.printstring
0000000001007f1d	movq	0x20(%rsp), %rax
0000000001007f22	movq	%rax, (%rsp)
0000000001007f26	callq	runtime.printpointer
0000000001007f2b	callq	runtime.printnl
0000000001007f30	callq	runtime.printunlock
0000000001007f35	leaq	0x63414(%rip), %rax
0000000001007f3c	movq	%rax, (%rsp)
0000000001007f40	movq	$0xc, 0x8(%rsp)
0000000001007f49	callq	runtime.throw
0000000001007f4e	ud2
0000000001007f50	callq	runtime.morestack_noctxt
0000000001007f55	jmp	"runtime.(*lfstack).push"
0000000001007f5a	int3
0000000001007f5b	int3
0000000001007f5c	int3
0000000001007f5d	int3
0000000001007f5e	int3
0000000001007f5f	int3
runtime.(*lfstack).pop:
0000000001007f60	movq	0x8(%rsp), %rcx
0000000001007f65	movq	(%rcx), %rdx
0000000001007f68	testq	%rdx, %rdx
0000000001007f6b	je	0x1007f8d
0000000001007f6d	movq	%rdx, %rax
0000000001007f70	sarq	$0x13, %rdx
0000000001007f74	shlq	$0x3, %rdx
0000000001007f78	movq	(%rdx), %rbx
0000000001007f7b	lock
0000000001007f7c	cmpxchgq	%rbx, (%rcx)
0000000001007f80	sete	%bl
0000000001007f83	testb	%bl, %bl
0000000001007f85	je	0x1007f65
0000000001007f87	movq	%rdx, 0x10(%rsp)
0000000001007f8c	retq
0000000001007f8d	movq	$0x0, 0x10(%rsp)
0000000001007f96	retq
0000000001007f97	int3
0000000001007f98	int3
0000000001007f99	int3
0000000001007f9a	int3
0000000001007f9b	int3
0000000001007f9c	int3
0000000001007f9d	int3
0000000001007f9e	int3
0000000001007f9f	int3
runtime.lfnodeValidate:
0000000001007fa0	movq	%gs:0x30, %rcx
0000000001007fa9	cmpq	0x10(%rcx), %rsp
0000000001007fad	jbe	0x100804a
0000000001007fb3	subq	$0x20, %rsp
0000000001007fb7	movq	%rbp, 0x18(%rsp)
0000000001007fbc	leaq	0x18(%rsp), %rbp
0000000001007fc1	movq	0x28(%rsp), %rax
0000000001007fc6	movq	%rax, %rcx
0000000001007fc9	shlq	$0x10, %rax
0000000001007fcd	orq	$0x7ffff, %rax
0000000001007fd3	sarq	$0x13, %rax
0000000001007fd7	shlq	$0x3, %rax
0000000001007fdb	cmpq	%rcx, %rax
0000000001007fde	jne	0x1007fea
0000000001007fe0	movq	0x18(%rsp), %rbp
0000000001007fe5	addq	$0x20, %rsp
0000000001007fe9	retq
0000000001007fea	callq	runtime.printlock
0000000001007fef	movq	0x28(%rsp), %rax
0000000001007ff4	movq	%rax, 0x10(%rsp)
0000000001007ff9	callq	runtime.printlock
0000000001007ffe	leaq	0x64ee2(%rip), %rax
0000000001008005	movq	%rax, (%rsp)
0000000001008009	movq	$0x1c, 0x8(%rsp)
0000000001008012	callq	runtime.printstring
0000000001008017	movq	0x10(%rsp), %rax
000000000100801c	movq	%rax, (%rsp)
0000000001008020	callq	runtime.printhex
0000000001008025	callq	runtime.printnl
000000000100802a	callq	runtime.printunlock
000000000100802f	leaq	0x63a73(%rip), %rax
0000000001008036	movq	%rax, (%rsp)
000000000100803a	movq	$0x12, 0x8(%rsp)
0000000001008043	callq	runtime.throw
0000000001008048	ud2
000000000100804a	callq	runtime.morestack_noctxt
000000000100804f	jmp	runtime.lfnodeValidate
0000000001008054	int3
0000000001008055	int3
0000000001008056	int3
0000000001008057	int3
0000000001008058	int3
0000000001008059	int3
000000000100805a	int3
000000000100805b	int3
000000000100805c	int3
000000000100805d	int3
000000000100805e	int3
000000000100805f	int3
runtime.lock:
0000000001008060	movq	%gs:0x30, %rcx
0000000001008069	cmpq	0x10(%rcx), %rsp
000000000100806d	jbe	0x1008223
0000000001008073	subq	$0x30, %rsp
0000000001008077	movq	%rbp, 0x28(%rsp)
000000000100807c	leaq	0x28(%rsp), %rbp
0000000001008081	movq	%gs:0x30, %rcx
000000000100808a	movq	0x30(%rcx), %rdx
000000000100808e	movl	0x100(%rdx), %ebx
0000000001008094	testl	%ebx, %ebx
0000000001008096	jl	0x1008208
000000000100809c	incl	%ebx
000000000100809e	movl	%ebx, 0x100(%rdx)
00000000010080a4	xorl	%eax, %eax
00000000010080a6	movq	0x38(%rsp), %rdx
00000000010080ab	movl	$0x1, %ebx
00000000010080b0	lock
00000000010080b1	cmpxchgq	%rbx, (%rdx)
00000000010080b5	sete	%bl
00000000010080b8	testb	%bl, %bl
00000000010080ba	jne	0x10081fe
00000000010080c0	movq	%rcx, 0x20(%rsp)
00000000010080c5	movq	0x30(%rcx), %rax
00000000010080c9	movq	%rax, (%rsp)
00000000010080cd	callq	runtime.semacreate
00000000010080d2	cmpl	$0x1, 0xcca2b(%rip)
00000000010080d9	movl	$0x0, %eax
00000000010080de	movl	$0x4, %ecx
00000000010080e3	cmovgq	%rcx, %rax
00000000010080e7	movq	%rax, 0x10(%rsp)
00000000010080ec	movq	0x20(%rsp), %rcx
00000000010080f1	movq	0x38(%rsp), %rdx
00000000010080f6	xorl	%ebx, %ebx
00000000010080f8	jmp	0x1008139
00000000010080fa	movq	%rsi, %rax
00000000010080fd	movq	0x30(%rcx), %rsi
0000000001008101	movq	%rbx, %r8
0000000001008104	andq	$-0x2, %rbx
0000000001008108	movq	%rbx, 0x270(%rsi)
000000000100810f	movq	0x30(%rcx), %rbx
0000000001008113	orq	$0x1, %rbx
0000000001008117	movq	%rax, %rsi
000000000100811a	movq	%r8, %rax
000000000100811d	lock
000000000100811e	cmpxchgq	%rbx, (%rdx)
0000000001008122	sete	%bl
0000000001008125	testb	%bl, %bl
0000000001008127	jne	0x100817c
0000000001008129	movq	(%rdx), %rbx
000000000100812c	btl	$0x0, %ebx
0000000001008130	jb	0x10080fa
0000000001008132	leaq	0x1(%rsi), %rbx
0000000001008136	movq	%rdi, %rax
0000000001008139	movq	(%rdx), %rsi
000000000100813c	btl	$0x0, %esi
0000000001008140	jb	0x10081f0
0000000001008146	movq	%rsi, %rbx
0000000001008149	orq	$0x1, %rsi
000000000100814d	movq	%rax, %rdi
0000000001008150	movq	%rbx, %rax
0000000001008153	lock
0000000001008154	cmpxchgq	%rsi, (%rdx)
0000000001008158	sete	%sil
000000000100815c	testb	%sil, %sil
000000000100815f	jne	0x10081e6
0000000001008165	xorl	%eax, %eax
0000000001008167	movq	%rax, 0x18(%rsp)
000000000100816c	cmpq	%rdi, %rax
000000000100816f	jl	0x10081c1
0000000001008171	leaq	0x1(%rdi), %rsi
0000000001008175	cmpq	%rsi, %rax
0000000001008178	jge	0x10080fd
000000000100817a	jmp	0x10081a3
000000000100817c	btl	$0x0, %r8d
0000000001008181	jae	0x1008132
0000000001008183	movq	$-0x1, (%rsp)
000000000100818b	callq	runtime.semasleep
0000000001008190	movq	0x20(%rsp), %rcx
0000000001008195	movq	0x38(%rsp), %rdx
000000000100819a	movq	0x10(%rsp), %rdi
000000000100819f	xorl	%esi, %esi
00000000010081a1	jmp	0x1008132
00000000010081a3	callq	runtime.osyield
00000000010081a8	movq	0x20(%rsp), %rcx
00000000010081ad	movq	0x38(%rsp), %rdx
00000000010081b2	movq	0x10(%rsp), %rdi
00000000010081b7	movq	0x18(%rsp), %rsi
00000000010081bc	jmp	0x1008132
00000000010081c1	movl	$0x1e, (%rsp)
00000000010081c8	callq	runtime.procyield
00000000010081cd	movq	0x20(%rsp), %rcx
00000000010081d2	movq	0x38(%rsp), %rdx
00000000010081d7	movq	0x10(%rsp), %rdi
00000000010081dc	movq	0x18(%rsp), %rsi
00000000010081e1	jmp	0x1008132
00000000010081e6	movq	0x28(%rsp), %rbp
00000000010081eb	addq	$0x30, %rsp
00000000010081ef	retq
00000000010081f0	movq	%rax, %rdi
00000000010081f3	movq	%rbx, %rax
00000000010081f6	movq	%rsi, %rbx
00000000010081f9	jmp	0x1008167
00000000010081fe	movq	0x28(%rsp), %rbp
0000000001008203	addq	$0x30, %rsp
0000000001008207	retq
0000000001008208	leaq	0x64634(%rip), %rax
000000000100820f	movq	%rax, (%rsp)
0000000001008213	movq	$0x19, 0x8(%rsp)
000000000100821c	callq	runtime.throw
0000000001008221	ud2
0000000001008223	callq	runtime.morestack_noctxt
0000000001008228	jmp	runtime.lock
000000000100822d	int3
000000000100822e	int3
000000000100822f	int3
runtime.unlock:
0000000001008230	movq	%gs:0x30, %rcx
0000000001008239	cmpq	0x10(%rcx), %rsp
000000000100823d	jbe	0x1008306
0000000001008243	subq	$0x20, %rsp
0000000001008247	movq	%rbp, 0x18(%rsp)
000000000100824c	leaq	0x18(%rsp), %rbp
0000000001008251	movq	%gs:0x30, %rcx
000000000100825a	movq	0x28(%rsp), %rdx
000000000100825f	movq	(%rdx), %rbx
0000000001008262	cmpq	$0x1, %rbx
0000000001008266	jne	0x10082b6
0000000001008268	movl	$0x1, %eax
000000000100826d	xorl	%ebx, %ebx
000000000100826f	lock
0000000001008270	cmpxchgq	%rbx, (%rdx)
0000000001008274	sete	%sil
0000000001008278	testb	%sil, %sil
000000000100827b	je	0x100825f
000000000100827d	movq	0x30(%rcx), %rax
0000000001008281	addl	$-0x1, 0x100(%rax)
0000000001008288	movq	0x30(%rcx), %rax
000000000100828c	movl	0x100(%rax), %eax
0000000001008292	testl	%eax, %eax
0000000001008294	jl	0x10082eb
0000000001008296	jne	0x10082ac
0000000001008298	leaq	0xb1(%rcx), %rax
000000000100829f	cmpb	$0x0, (%rax)
00000000010082a2	je	0x10082ac
00000000010082a4	movq	$-0x522, 0x10(%rcx)
00000000010082ac	movq	0x18(%rsp), %rbp
00000000010082b1	addq	$0x20, %rsp
00000000010082b5	retq
00000000010082b6	movq	%rbx, %rax
00000000010082b9	andq	$-0x2, %rbx
00000000010082bd	movq	0x270(%rbx), %rsi
00000000010082c4	lock
00000000010082c5	cmpxchgq	%rsi, (%rdx)
00000000010082c9	sete	%sil
00000000010082cd	testb	%sil, %sil
00000000010082d0	jne	0x10082d6
00000000010082d2	xorl	%ebx, %ebx
00000000010082d4	jmp	0x100825f
00000000010082d6	movq	%rcx, 0x10(%rsp)
00000000010082db	movq	%rbx, (%rsp)
00000000010082df	callq	runtime.semawakeup
00000000010082e4	movq	0x10(%rsp), %rcx
00000000010082e9	jmp	0x100827d
00000000010082eb	leaq	0x648ec(%rip), %rax
00000000010082f2	movq	%rax, (%rsp)
00000000010082f6	movq	$0x1b, 0x8(%rsp)
00000000010082ff	callq	runtime.throw
0000000001008304	ud2
0000000001008306	callq	runtime.morestack_noctxt
000000000100830b	jmp	runtime.unlock
runtime.notewakeup:
0000000001008310	movq	%gs:0x30, %rcx
0000000001008319	cmpq	0x10(%rcx), %rsp
000000000100831d	jbe	0x1008386
000000000100831f	subq	$0x18, %rsp
0000000001008323	movq	%rbp, 0x10(%rsp)
0000000001008328	leaq	0x10(%rsp), %rbp
000000000100832d	movq	0x20(%rsp), %rcx
0000000001008332	movq	(%rcx), %rdx
0000000001008335	movq	%rdx, %rax
0000000001008338	movl	$0x1, %ebx
000000000100833d	lock
000000000100833e	cmpxchgq	%rbx, (%rcx)
0000000001008342	sete	%sil
0000000001008346	testb	%sil, %sil
0000000001008349	je	0x1008332
000000000100834b	testq	%rdx, %rdx
000000000100834e	jne	0x100835a
0000000001008350	movq	0x10(%rsp), %rbp
0000000001008355	addq	$0x18, %rsp
0000000001008359	retq
000000000100835a	cmpq	$0x1, %rdx
000000000100835e	je	0x100836b
0000000001008360	movq	%rdx, (%rsp)
0000000001008364	callq	runtime.semawakeup
0000000001008369	jmp	0x1008350
000000000100836b	leaq	0x64604(%rip), %rax
0000000001008372	movq	%rax, (%rsp)
0000000001008376	movq	$0x1a, 0x8(%rsp)
000000000100837f	callq	runtime.throw
0000000001008384	ud2
0000000001008386	callq	runtime.morestack_noctxt
000000000100838b	jmp	runtime.notewakeup
000000000100838d	int3
000000000100838e	int3
000000000100838f	int3
runtime.notesleep:
0000000001008390	movq	%gs:0x30, %rcx
0000000001008399	cmpq	0x10(%rcx), %rsp
000000000100839d	jbe	0x10084c0
00000000010083a3	subq	$0x30, %rsp
00000000010083a7	movq	%rbp, 0x28(%rsp)
00000000010083ac	leaq	0x28(%rsp), %rbp
00000000010083b1	movq	%gs:0x30, %rax
00000000010083ba	movq	0x30(%rax), %rcx
00000000010083be	movq	(%rcx), %rdx
00000000010083c1	cmpq	%rdx, %rax
00000000010083c4	jne	0x10084a5
00000000010083ca	movq	%rax, 0x18(%rsp)
00000000010083cf	movq	%rcx, (%rsp)
00000000010083d3	callq	runtime.semacreate
00000000010083d8	movq	0x18(%rsp), %rax
00000000010083dd	movq	0x30(%rax), %rcx
00000000010083e1	movq	%rcx, 0x20(%rsp)
00000000010083e6	movq	%rax, %rdx
00000000010083e9	xorl	%eax, %eax
00000000010083eb	movq	0x38(%rsp), %rbx
00000000010083f0	lock
00000000010083f1	cmpxchgq	%rcx, (%rbx)
00000000010083f5	sete	%al
00000000010083f8	testb	%al, %al
00000000010083fa	je	0x100847a
00000000010083fc	movq	0x30(%rdx), %rax
0000000001008400	movb	$0x1, 0x111(%rax)
0000000001008407	movq	runtime.cgo_yield(%rip), %rax
000000000100840e	cmpq	$0x0, (%rax)
0000000001008412	jne	0x1008449
0000000001008414	jmp	0x1008466
0000000001008416	movq	$0x989680, (%rsp)
000000000100841e	callq	runtime.semasleep
0000000001008423	movq	runtime.cgo_yield(%rip), %rax
000000000100842a	movq	(%rax), %rax
000000000100842d	movq	%rax, (%rsp)
0000000001008431	movq	$0x0, 0x8(%rsp)
000000000100843a	callq	runtime.asmcgocall
000000000100843f	movq	0x18(%rsp), %rdx
0000000001008444	movq	0x38(%rsp), %rbx
0000000001008449	movq	(%rbx), %rax
000000000100844c	testq	%rax, %rax
000000000100844f	je	0x1008416
0000000001008451	movq	0x30(%rdx), %rax
0000000001008455	movb	$0x0, 0x111(%rax)
000000000100845c	movq	0x28(%rsp), %rbp
0000000001008461	addq	$0x30, %rsp
0000000001008465	retq
0000000001008466	movq	$-0x1, (%rsp)
000000000100846e	callq	runtime.semasleep
0000000001008473	movq	0x18(%rsp), %rdx
0000000001008478	jmp	0x1008451
000000000100847a	cmpq	$0x1, (%rbx)
000000000100847e	jne	0x100848a
0000000001008480	movq	0x28(%rsp), %rbp
0000000001008485	addq	$0x30, %rsp
0000000001008489	retq
000000000100848a	leaq	0x64b74(%rip), %rax
0000000001008491	movq	%rax, (%rsp)
0000000001008495	movq	$0x1d, 0x8(%rsp)
000000000100849e	callq	runtime.throw
00000000010084a3	ud2
00000000010084a5	leaq	0x63771(%rip), %rax
00000000010084ac	movq	%rax, (%rsp)
00000000010084b0	movq	$0x13, 0x8(%rsp)
00000000010084b9	callq	runtime.throw
00000000010084be	ud2
00000000010084c0	callq	runtime.morestack_noctxt
00000000010084c5	jmp	runtime.notesleep
00000000010084ca	int3
00000000010084cb	int3
00000000010084cc	int3
00000000010084cd	int3
00000000010084ce	int3
00000000010084cf	int3
runtime.notetsleep_internal:
00000000010084d0	subq	$0x28, %rsp
00000000010084d4	movq	%rbp, 0x20(%rsp)
00000000010084d9	leaq	0x20(%rsp), %rbp
00000000010084de	movq	%gs:0x30, %rcx
00000000010084e7	movq	0x30(%rcx), %rdx
00000000010084eb	movq	%rdx, 0x18(%rsp)
00000000010084f0	xorl	%eax, %eax
00000000010084f2	movq	0x30(%rsp), %rbx
00000000010084f7	lock
00000000010084f8	cmpxchgq	%rdx, (%rbx)
00000000010084fc	sete	%dl
00000000010084ff	testb	%dl, %dl
0000000001008501	je	0x10086d7
0000000001008507	movq	%rcx, 0x40(%rsp)
000000000100850c	movq	0x38(%rsp), %rax
0000000001008511	testq	%rax, %rax
0000000001008514	jge	0x100858e
0000000001008516	movq	0x30(%rcx), %rax
000000000100851a	movb	$0x1, 0x111(%rax)
0000000001008521	movq	runtime.cgo_yield(%rip), %rax
0000000001008528	cmpq	$0x0, (%rax)
000000000100852c	jne	0x100854c
000000000100852e	jmp	0x100857f
0000000001008530	movq	runtime.cgo_yield(%rip), %rax
0000000001008537	movq	(%rax), %rax
000000000100853a	movq	%rax, (%rsp)
000000000100853e	movq	$0x0, 0x8(%rsp)
0000000001008547	callq	runtime.asmcgocall
000000000100854c	movq	$0x989680, (%rsp)
0000000001008554	callq	runtime.semasleep
0000000001008559	cmpl	$0x0, 0x8(%rsp)
000000000100855e	jl	0x1008530
0000000001008560	movq	0x40(%rsp), %rax
0000000001008565	movq	0x30(%rax), %rax
0000000001008569	movb	$0x0, 0x111(%rax)
0000000001008570	movb	$0x1, 0x50(%rsp)
0000000001008575	movq	0x20(%rsp), %rbp
000000000100857a	addq	$0x28, %rsp
000000000100857e	retq
000000000100857f	movq	$-0x1, (%rsp)
0000000001008587	callq	runtime.semasleep
000000000100858c	jmp	0x1008560
000000000100858e	callq	runtime.nanotime
0000000001008593	movq	(%rsp), %rax
0000000001008597	movq	0x38(%rsp), %rcx
000000000100859c	addq	%rcx, %rax
000000000100859f	movq	%rax, 0x48(%rsp)
00000000010085a4	jmp	0x10085a9
00000000010085a6	movq	%rdx, %rax
00000000010085a9	movq	0x40(%rsp), %rdx
00000000010085ae	movq	0x30(%rdx), %rbx
00000000010085b2	movb	$0x1, 0x111(%rbx)
00000000010085b9	movq	runtime.cgo_yield(%rip), %rbx
00000000010085c0	cmpq	$0x0, (%rbx)
00000000010085c4	je	0x10085d4
00000000010085c6	cmpq	$0x989680, %rcx
00000000010085cd	jle	0x10085d4
00000000010085cf	movl	$0x989680, %ecx
00000000010085d4	movq	%rcx, (%rsp)
00000000010085d8	callq	runtime.semasleep
00000000010085dd	cmpl	$0x0, 0x8(%rsp)
00000000010085e2	jge	0x10086b8
00000000010085e8	movq	runtime.cgo_yield(%rip), %rax
00000000010085ef	movq	(%rax), %rax
00000000010085f2	testq	%rax, %rax
00000000010085f5	jne	0x10086a1
00000000010085fb	movq	0x40(%rsp), %rax
0000000001008600	movq	0x30(%rax), %rcx
0000000001008604	movb	$0x0, 0x111(%rcx)
000000000100860b	callq	runtime.nanotime
0000000001008610	movq	(%rsp), %rax
0000000001008614	movq	0x48(%rsp), %rcx
0000000001008619	movq	%rcx, %rdx
000000000100861c	subq	%rax, %rcx
000000000100861f	testq	%rcx, %rcx
0000000001008622	jg	0x10085a6
0000000001008624	movq	0x30(%rsp), %rcx
0000000001008629	movq	0x40(%rsp), %rdx
000000000100862e	movq	(%rcx), %rbx
0000000001008631	movq	0x30(%rdx), %rsi
0000000001008635	movq	%rsi, %rdi
0000000001008638	cmpq	%rbx, %rsi
000000000100863b	jne	0x100865d
000000000100863d	movq	%rbx, %rax
0000000001008640	xorl	%esi, %esi
0000000001008642	lock
0000000001008643	cmpxchgq	%rsi, (%rcx)
0000000001008647	sete	%bl
000000000100864a	testb	%bl, %bl
000000000100864c	je	0x100862e
000000000100864e	movb	$0x0, 0x50(%rsp)
0000000001008653	movq	0x20(%rsp), %rbp
0000000001008658	addq	$0x28, %rsp
000000000100865c	retq
000000000100865d	cmpq	$0x1, %rbx
0000000001008661	jne	0x1008707
0000000001008667	movb	$0x1, 0x111(%rdi)
000000000100866e	movq	$-0x1, (%rsp)
0000000001008676	callq	runtime.semasleep
000000000100867b	cmpl	$0x0, 0x8(%rsp)
0000000001008680	jl	0x10086ec
0000000001008682	movq	0x40(%rsp), %rax
0000000001008687	movq	0x30(%rax), %rax
000000000100868b	movb	$0x0, 0x111(%rax)
0000000001008692	movb	$0x1, 0x50(%rsp)
0000000001008697	movq	0x20(%rsp), %rbp
000000000100869c	addq	$0x28, %rsp
00000000010086a0	retq
00000000010086a1	movq	%rax, (%rsp)
00000000010086a5	movq	$0x0, 0x8(%rsp)
00000000010086ae	callq	runtime.asmcgocall
00000000010086b3	jmp	0x10085fb
00000000010086b8	movq	0x40(%rsp), %rax
00000000010086bd	movq	0x30(%rax), %rax
00000000010086c1	movb	$0x0, 0x111(%rax)
00000000010086c8	movb	$0x1, 0x50(%rsp)
00000000010086cd	movq	0x20(%rsp), %rbp
00000000010086d2	addq	$0x28, %rsp
00000000010086d6	retq
00000000010086d7	cmpq	$0x1, (%rbx)
00000000010086db	jne	0x1008722
00000000010086dd	movb	$0x1, 0x50(%rsp)
00000000010086e2	movq	0x20(%rsp), %rbp
00000000010086e7	addq	$0x28, %rsp
00000000010086eb	retq
00000000010086ec	leaq	0x661d1(%rip), %rax
00000000010086f3	movq	%rax, (%rsp)
00000000010086f7	movq	$0x32, 0x8(%rsp)
0000000001008700	callq	runtime.throw
0000000001008705	ud2
0000000001008707	leaq	0x660be(%rip), %rax
000000000100870e	movq	%rax, (%rsp)
0000000001008712	movq	$0x31, 0x8(%rsp)
000000000100871b	callq	runtime.throw
0000000001008720	ud2
0000000001008722	leaq	0x64bbf(%rip), %rax
0000000001008729	movq	%rax, (%rsp)
000000000100872d	movq	$0x1e, 0x8(%rsp)
0000000001008736	callq	runtime.throw
000000000100873b	ud2
000000000100873d	int3
000000000100873e	int3
000000000100873f	int3
runtime.notetsleep:
0000000001008740	movq	%gs:0x30, %rcx
0000000001008749	cmpq	0x10(%rcx), %rsp
000000000100874d	jbe	0x10087d7
0000000001008753	subq	$0x30, %rsp
0000000001008757	movq	%rbp, 0x28(%rsp)
000000000100875c	leaq	0x28(%rsp), %rbp
0000000001008761	movq	%gs:0x30, %rax
000000000100876a	movq	0x30(%rax), %rcx
000000000100876e	movq	(%rcx), %rdx
0000000001008771	cmpq	%rdx, %rax
0000000001008774	je	0x1008780
0000000001008776	cmpq	$0x0, 0xf8(%rcx)
000000000100877e	jne	0x10087bc
0000000001008780	movq	%rcx, (%rsp)
0000000001008784	callq	runtime.semacreate
0000000001008789	movq	0x38(%rsp), %rax
000000000100878e	movq	%rax, (%rsp)
0000000001008792	movq	0x40(%rsp), %rax
0000000001008797	movq	%rax, 0x8(%rsp)
000000000100879c	xorps	%xmm0, %xmm0
000000000100879f	movups	%xmm0, 0x10(%rsp)
00000000010087a4	callq	runtime.notetsleep_internal
00000000010087a9	movzbl	0x20(%rsp), %eax
00000000010087ae	movb	%al, 0x48(%rsp)
00000000010087b2	movq	0x28(%rsp), %rbp
00000000010087b7	addq	$0x30, %rsp
00000000010087bb	retq
00000000010087bc	leaq	0x636e1(%rip), %rax
00000000010087c3	movq	%rax, (%rsp)
00000000010087c7	movq	$0x14, 0x8(%rsp)
00000000010087d0	callq	runtime.throw
00000000010087d5	ud2
00000000010087d7	callq	runtime.morestack_noctxt
00000000010087dc	jmp	runtime.notetsleep
00000000010087e1	int3
00000000010087e2	int3
00000000010087e3	int3
00000000010087e4	int3
00000000010087e5	int3
00000000010087e6	int3
00000000010087e7	int3
00000000010087e8	int3
00000000010087e9	int3
00000000010087ea	int3
00000000010087eb	int3
00000000010087ec	int3
00000000010087ed	int3
00000000010087ee	int3
00000000010087ef	int3
runtime.notetsleepg:
00000000010087f0	movq	%gs:0x30, %rcx
00000000010087f9	cmpq	0x10(%rcx), %rsp
00000000010087fd	jbe	0x1008890
0000000001008803	subq	$0x38, %rsp
0000000001008807	movq	%rbp, 0x30(%rsp)
000000000100880c	leaq	0x30(%rsp), %rbp
0000000001008811	movq	%gs:0x30, %rax
000000000100881a	movq	0x30(%rax), %rcx
000000000100881e	movq	(%rcx), %rdx
0000000001008821	cmpq	%rdx, %rax
0000000001008824	je	0x1008875
0000000001008826	movq	%rcx, (%rsp)
000000000100882a	callq	runtime.semacreate
000000000100882f	callq	runtime.entersyscallblock
0000000001008834	movq	0x40(%rsp), %rax
0000000001008839	movq	%rax, (%rsp)
000000000100883d	movq	0x48(%rsp), %rax
0000000001008842	movq	%rax, 0x8(%rsp)
0000000001008847	xorps	%xmm0, %xmm0
000000000100884a	movups	%xmm0, 0x10(%rsp)
000000000100884f	callq	runtime.notetsleep_internal
0000000001008854	movzbl	0x20(%rsp), %eax
0000000001008859	movb	%al, 0x2f(%rsp)
000000000100885d	callq	runtime.exitsyscall
0000000001008862	movzbl	0x2f(%rsp), %eax
0000000001008867	movb	%al, 0x50(%rsp)
000000000100886b	movq	0x30(%rsp), %rbp
0000000001008870	addq	$0x38, %rsp
0000000001008874	retq
0000000001008875	leaq	0x63109(%rip), %rax
000000000100887c	movq	%rax, (%rsp)
0000000001008880	movq	$0x11, 0x8(%rsp)
0000000001008889	callq	runtime.throw
000000000100888e	ud2
0000000001008890	callq	runtime.morestack_noctxt
0000000001008895	jmp	runtime.notetsleepg
000000000100889a	int3
000000000100889b	int3
000000000100889c	int3
000000000100889d	int3
000000000100889e	int3
000000000100889f	int3
runtime.mallocinit:
00000000010088a0	movq	%gs:0x30, %rcx
00000000010088a9	cmpq	0x10(%rcx), %rsp
00000000010088ad	jbe	0x1008ae6
00000000010088b3	subq	$0x28, %rsp
00000000010088b7	movq	%rbp, 0x20(%rsp)
00000000010088bc	leaq	0x20(%rsp), %rbp
00000000010088c1	cmpw	$0x10, 0xada5b(%rip)
00000000010088c9	jne	0x1008acb
00000000010088cf	callq	runtime.testdefersizes
00000000010088d4	xorl	%eax, %eax
00000000010088d6	jmp	0x10088f4
00000000010088d8	leaq	(%rax,%rax,2), %rcx
00000000010088dc	leaq	runtime.class_to_size(%rip), %rdx
00000000010088e3	movzwl	(%rdx,%rax,2), %ebx
00000000010088e7	leaq	0xce06a(%rip), %rsi
00000000010088ee	movl	%ebx, (%rsi,%rcx,8)
00000000010088f1	incq	%rax
00000000010088f4	cmpq	$0x43, %rax
00000000010088f8	jl	0x10088d8
00000000010088fa	movq	runtime.physPageSize(%rip), %rax
0000000001008901	testq	%rax, %rax
0000000001008904	je	0x1008ab0
000000000100890a	cmpq	$0x1000, %rax
0000000001008910	jb	0x1008a23
0000000001008916	leaq	-0x1(%rax), %rcx
000000000100891a	testq	%rcx, %rax
000000000100891d	jne	0x10089bc
0000000001008923	leaq	runtime.mheap_(%rip), %rax
000000000100892a	movq	%rax, (%rsp)
000000000100892e	callq	"runtime.(*mheap).init"
0000000001008933	movq	%gs:0x30, %rax
000000000100893c	movq	%rax, 0x18(%rsp)
0000000001008941	callq	runtime.allocmcache
0000000001008946	movq	0x18(%rsp), %rax
000000000100894b	movq	0x30(%rax), %rax
000000000100894f	movq	(%rsp), %rcx
0000000001008953	movq	%rcx, 0x158(%rax)
000000000100895a	movl	$0x7f, %eax
000000000100895f	jmp	0x10089ad
0000000001008961	movq	%rax, 0x10(%rsp)
0000000001008966	leaq	0xb815b(%rip), %rax
000000000100896d	movq	%rax, (%rsp)
0000000001008971	callq	"runtime.(*fixalloc).alloc"
0000000001008976	movq	0x8(%rsp), %rax
000000000100897b	movq	0x10(%rsp), %rcx
0000000001008980	movq	%rcx, %rdx
0000000001008983	shlq	$0x28, %rcx
0000000001008987	movabsq	$0xc000000000, %rbx
0000000001008991	orq	%rbx, %rcx
0000000001008994	movq	%rcx, (%rax)
0000000001008997	movq	0xb5e1a(%rip), %rcx
000000000100899e	movq	%rcx, 0x10(%rax)
00000000010089a2	movq	%rax, 0xb5e0f(%rip)
00000000010089a9	leaq	-0x1(%rdx), %rax
00000000010089ad	testq	%rax, %rax
00000000010089b0	jge	0x1008961
00000000010089b2	movq	0x20(%rsp), %rbp
00000000010089b7	addq	$0x28, %rsp
00000000010089bb	retq
00000000010089bc	callq	runtime.printlock
00000000010089c1	leaq	0x6314d(%rip), %rax
00000000010089c8	movq	%rax, (%rsp)
00000000010089cc	movq	$0x12, 0x8(%rsp)
00000000010089d5	callq	runtime.printstring
00000000010089da	movq	runtime.physPageSize(%rip), %rax
00000000010089e1	movq	%rax, (%rsp)
00000000010089e5	callq	runtime.printuint
00000000010089ea	leaq	0x63906(%rip), %rax
00000000010089f1	movq	%rax, (%rsp)
00000000010089f5	movq	$0x17, 0x8(%rsp)
00000000010089fe	callq	runtime.printstring
0000000001008a03	callq	runtime.printunlock
0000000001008a08	leaq	0x633a5(%rip), %rax
0000000001008a0f	movq	%rax, (%rsp)
0000000001008a13	movq	$0x14, 0x8(%rsp)
0000000001008a1c	callq	runtime.throw
0000000001008a21	ud2
0000000001008a23	callq	runtime.printlock
0000000001008a28	leaq	0x630e6(%rip), %rax
0000000001008a2f	movq	%rax, (%rsp)
0000000001008a33	movq	$0x12, 0x8(%rsp)
0000000001008a3c	callq	runtime.printstring
0000000001008a41	movq	runtime.physPageSize(%rip), %rax
0000000001008a48	movq	%rax, (%rsp)
0000000001008a4c	callq	runtime.printuint
0000000001008a51	leaq	0x652fc(%rip), %rax
0000000001008a58	movq	%rax, (%rsp)
0000000001008a5c	movq	$0x25, 0x8(%rsp)
0000000001008a65	callq	runtime.printstring
0000000001008a6a	movq	$0x1000, (%rsp)
0000000001008a72	callq	runtime.printint
0000000001008a77	leaq	0x6201c(%rip), %rax
0000000001008a7e	movq	%rax, (%rsp)
0000000001008a82	movq	$0x2, 0x8(%rsp)
0000000001008a8b	callq	runtime.printstring
0000000001008a90	callq	runtime.printunlock
0000000001008a95	leaq	0x63318(%rip), %rax
0000000001008a9c	movq	%rax, (%rsp)
0000000001008aa0	movq	$0x14, 0x8(%rsp)
0000000001008aa9	callq	runtime.throw
0000000001008aae	ud2
0000000001008ab0	leaq	0x647b9(%rip), %rax
0000000001008ab7	movq	%rax, (%rsp)
0000000001008abb	movq	$0x1e, 0x8(%rsp)
0000000001008ac4	callq	runtime.throw
0000000001008ac9	ud2
0000000001008acb	leaq	0x62e5e(%rip), %rax
0000000001008ad2	movq	%rax, (%rsp)
0000000001008ad6	movq	$0x11, 0x8(%rsp)
0000000001008adf	callq	runtime.throw
0000000001008ae4	ud2
0000000001008ae6	callq	runtime.morestack_noctxt
0000000001008aeb	jmp	runtime.mallocinit
runtime.(*mheap).sysAlloc:
0000000001008af0	movq	%gs:0x30, %rcx
0000000001008af9	cmpq	0x10(%rcx), %rsp
0000000001008afd	jbe	0x1009163
0000000001008b03	subq	$0x80, %rsp
0000000001008b0a	movq	%rbp, 0x78(%rsp)
0000000001008b0f	leaq	0x78(%rsp), %rbp
0000000001008b14	movq	0x88(%rsp), %rax
0000000001008b1c	testb	%al, (%rax)
0000000001008b1e	leaq	0x1320(%rax), %rcx
0000000001008b25	movq	%rcx, (%rsp)
0000000001008b29	movq	0x90(%rsp), %rcx
0000000001008b31	addq	$0x3ffffff, %rcx
0000000001008b38	andq	$-0x4000000, %rcx
0000000001008b3f	movq	%rcx, 0x90(%rsp)
0000000001008b47	movq	%rcx, 0x8(%rsp)
0000000001008b4c	movq	$0x4000000, 0x10(%rsp)
0000000001008b55	leaq	0xccd5c(%rip), %rdx
0000000001008b5c	movq	%rdx, 0x18(%rsp)
0000000001008b61	callq	"runtime.(*linearAlloc).alloc"
0000000001008b66	movq	0x20(%rsp), %rax
0000000001008b6b	testq	%rax, %rax
0000000001008b6e	jne	0x1009026
0000000001008b74	movq	0x88(%rsp), %rcx
0000000001008b7c	movq	0x90(%rsp), %rdx
0000000001008b84	jmp	0x1008bc3
0000000001008b86	movq	0x10(%rbx), %rsi
0000000001008b8a	movq	%rsi, 0x1318(%rcx)
0000000001008b91	leaq	0x3628(%rcx), %rsi
0000000001008b98	testb	%al, (%rsi)
0000000001008b9a	movq	0x3658(%rcx), %rsi
0000000001008ba1	subq	0x3628(%rcx), %rsi
0000000001008ba8	movq	%rsi, 0x3658(%rcx)
0000000001008baf	movq	0x3640(%rcx), %rsi
0000000001008bb6	movq	%rsi, (%rbx)
0000000001008bb9	movq	%rbx, 0x3640(%rcx)
0000000001008bc0	movq	%r8, %rax
0000000001008bc3	movq	0x1318(%rcx), %rbx
0000000001008bca	testq	%rbx, %rbx
0000000001008bcd	je	0x1009019
0000000001008bd3	movq	%rbx, 0x70(%rsp)
0000000001008bd8	movq	(%rbx), %rax
0000000001008bdb	movq	%rax, %rsi
0000000001008bde	subq	%rdx, %rax
0000000001008be1	movzbl	0x8(%rbx), %edi
0000000001008be5	testq	%rdi, %rdi
0000000001008be8	cmovneq	%rax, %rsi
0000000001008bec	leaq	(%rdx,%rsi), %rax
0000000001008bf0	cmpq	%rsi, %rax
0000000001008bf3	jae	0x1008fab
0000000001008bf9	xorl	%edi, %edi
0000000001008bfb	movq	%rdi, %r8
0000000001008bfe	cmpq	%rdi, %rsi
0000000001008c01	je	0x1008c47
0000000001008c03	testq	%r8, %r8
0000000001008c06	je	0x1008b86
0000000001008c0c	movq	%r8, 0x68(%rsp)
0000000001008c11	movq	%r8, (%rsp)
0000000001008c15	movq	%rdx, 0x8(%rsp)
0000000001008c1a	movq	$0x0, 0x10(%rsp)
0000000001008c23	callq	runtime.sysFree
0000000001008c28	movq	0x88(%rsp), %rcx
0000000001008c30	movq	0x90(%rsp), %rdx
0000000001008c38	movq	0x70(%rsp), %rbx
0000000001008c3d	movq	0x68(%rsp), %r8
0000000001008c42	jmp	0x1008b86
0000000001008c47	movzbl	0x8(%rbx), %edi
0000000001008c4b	testq	%rdi, %rdi
0000000001008c4e	cmovneq	%rsi, %rax
0000000001008c52	movq	%rax, (%rbx)
0000000001008c55	movq	%rdx, %rax
0000000001008c58	testq	%rdx, %rdx
0000000001008c5b	je	0x1008ec6
0000000001008c61	movq	%r8, %rax
0000000001008c64	leaq	(%rdx,%r8), %rbx
0000000001008c68	cmpq	%r8, %rbx
0000000001008c6b	jae	0x1008e59
0000000001008c71	movl	$0x1c, %esi
0000000001008c76	leaq	0x6424e(%rip), %rdi
0000000001008c7d	testq	%rsi, %rsi
0000000001008c80	jne	0x10090a6
0000000001008c86	testq	$0x3ffffff, %r8
0000000001008c8d	jne	0x100908b
0000000001008c93	movq	%rax, 0x68(%rsp)
0000000001008c98	movq	%rdx, 0x48(%rsp)
0000000001008c9d	movq	%rax, (%rsp)
0000000001008ca1	movq	%rdx, 0x8(%rsp)
0000000001008ca6	leaq	0xccc0b(%rip), %rcx
0000000001008cad	movq	%rcx, 0x10(%rsp)
0000000001008cb2	callq	runtime.sysMap
0000000001008cb7	movq	0x68(%rsp), %rax
0000000001008cbc	movq	0x48(%rsp), %rcx
0000000001008cc1	movq	%rax, 0x68(%rsp)
0000000001008cc6	movq	%rcx, 0x48(%rsp)
0000000001008ccb	movq	%rax, %rdx
0000000001008cce	movabsq	$0x800000000000, %rbx
0000000001008cd8	addq	%rbx, %rax
0000000001008cdb	shrq	$0x1a, %rax
0000000001008cdf	movq	0x88(%rsp), %rbx
0000000001008ce7	jmp	0x1008d15
0000000001008ce9	movq	0x60(%rsp), %rsi
0000000001008cee	xchgq	%rax, (%rsi)
0000000001008cf1	movq	0x40(%rsp), %rsi
0000000001008cf6	leaq	0x1(%rsi), %rax
0000000001008cfa	movq	0x88(%rsp), %rsi
0000000001008d02	movq	0x48(%rsp), %rdi
0000000001008d07	movq	0x68(%rsp), %r8
0000000001008d0c	movq	%rdi, %rcx
0000000001008d0f	movq	%r8, %rdx
0000000001008d12	movq	%rsi, %rbx
0000000001008d15	movq	%rdx, %rsi
0000000001008d18	addq	%rcx, %rdx
0000000001008d1b	movabsq	$0x7fffffffffff, %rdi
0000000001008d25	addq	%rdi, %rdx
0000000001008d28	shrq	$0x1a, %rdx
0000000001008d2c	cmpq	%rdx, %rax
0000000001008d2f	ja	0x1008e3c
0000000001008d35	movq	%rax, 0x40(%rsp)
0000000001008d3a	movq	0x12f8(%rbx), %rdx
0000000001008d41	testq	%rdx, %rdx
0000000001008d44	je	0x1008ddf
0000000001008d4a	testb	%al, (%rdx)
0000000001008d4c	cmpq	$0x400000, %rax
0000000001008d52	jae	0x100904e
0000000001008d58	movq	(%rdx,%rax,8), %r8
0000000001008d5c	leaq	(%rdx,%rax,8), %rdx
0000000001008d60	testq	%r8, %r8
0000000001008d63	jne	0x1009055
0000000001008d69	movq	%rdx, 0x60(%rsp)
0000000001008d6e	leaq	0x1300(%rbx), %rax
0000000001008d75	movq	%rax, (%rsp)
0000000001008d79	movq	$0x210000, 0x8(%rsp)
0000000001008d82	movq	$0x8, 0x10(%rsp)
0000000001008d8b	leaq	0xccb86(%rip), %rax
0000000001008d92	movq	%rax, 0x18(%rsp)
0000000001008d97	callq	"runtime.(*linearAlloc).alloc"
0000000001008d9c	movq	0x20(%rsp), %rax
0000000001008da1	testq	%rax, %rax
0000000001008da4	jne	0x1008ce9
0000000001008daa	movq	$0x210000, (%rsp)
0000000001008db2	movq	$0x8, 0x8(%rsp)
0000000001008dbb	leaq	0xccb56(%rip), %rax
0000000001008dc2	movq	%rax, 0x10(%rsp)
0000000001008dc7	callq	runtime.persistentalloc
0000000001008dcc	movq	0x18(%rsp), %rax
0000000001008dd1	testq	%rax, %rax
0000000001008dd4	jne	0x1008ce9
0000000001008dda	jmp	0x1009033
0000000001008ddf	movq	$0x2000000, (%rsp)
0000000001008de7	movq	$0x8, 0x8(%rsp)
0000000001008df0	movq	$0x0, 0x10(%rsp)
0000000001008df9	callq	runtime.persistentalloc
0000000001008dfe	movq	0x18(%rsp), %rax
0000000001008e03	testq	%rax, %rax
0000000001008e06	je	0x1009070
0000000001008e0c	movq	0x88(%rsp), %rbx
0000000001008e14	movq	%rax, %rdx
0000000001008e17	xchgq	%rax, 0x12f8(%rbx)
0000000001008e1e	movq	0x40(%rsp), %rax
0000000001008e23	movq	0x48(%rsp), %rcx
0000000001008e28	movq	0x68(%rsp), %rsi
0000000001008e2d	movabsq	$0x7fffffffffff, %rdi
0000000001008e37	jmp	0x1008d4a
0000000001008e3c	movq	%rsi, 0x98(%rsp)
0000000001008e44	movq	%rcx, 0xa0(%rsp)
0000000001008e4c	movq	0x78(%rsp), %rbp
0000000001008e51	addq	$0x80, %rsp
0000000001008e58	retq
0000000001008e59	movabsq	$0x800000000000, %rsi
0000000001008e63	leaq	(%r8,%rsi), %rdi
0000000001008e67	shrq	$0x1a, %rdi
0000000001008e6b	cmpq	$0x400000, %rdi
0000000001008e72	jb	0x1008e8b
0000000001008e74	movl	$0x21, %edi
0000000001008e79	leaq	0x64912(%rip), %r9
0000000001008e80	movq	%rdi, %rsi
0000000001008e83	movq	%r9, %rdi
0000000001008e86	jmp	0x1008c7d
0000000001008e8b	movabsq	$0x7fffffffffff, %r10
0000000001008e95	leaq	(%r10,%rbx), %r11
0000000001008e99	shrq	$0x1a, %r11
0000000001008e9d	cmpq	$0x400000, %r11
0000000001008ea4	movl	$0x0, %edi
0000000001008ea9	movl	$0x20, %r11d
0000000001008eaf	cmovaeq	%r11, %rdi
0000000001008eb3	movl	$0x0, %r9d
0000000001008eb9	leaq	0x646ef(%rip), %r11
0000000001008ec0	cmovaeq	%r11, %r9
0000000001008ec4	jmp	0x1008e80
0000000001008ec6	movq	$0x0, (%rsp)
0000000001008ece	movq	%rax, 0x8(%rsp)
0000000001008ed3	movq	$0x4000000, 0x10(%rsp)
0000000001008edc	callq	runtime.sysReserveAligned
0000000001008ee1	movq	0x18(%rsp), %rax
0000000001008ee6	movq	0x20(%rsp), %rcx
0000000001008eeb	testq	%rax, %rax
0000000001008eee	je	0x1008f86
0000000001008ef4	movq	%rax, 0x68(%rsp)
0000000001008ef9	movq	%rcx, 0x48(%rsp)
0000000001008efe	movq	0x88(%rsp), %rax
0000000001008f06	leaq	0x3628(%rax), %rcx
0000000001008f0d	movq	%rcx, 0x58(%rsp)
0000000001008f12	movq	%rcx, (%rsp)
0000000001008f16	callq	"runtime.(*fixalloc).alloc"
0000000001008f1b	movq	0x8(%rsp), %rax
0000000001008f20	movq	0x68(%rsp), %rcx
0000000001008f25	movq	%rcx, (%rax)
0000000001008f28	movb	$0x1, 0x8(%rax)
0000000001008f2c	movq	0xb5885(%rip), %rcx
0000000001008f33	movq	%rcx, 0x10(%rax)
0000000001008f37	movq	%rax, 0xb587a(%rip)
0000000001008f3e	movq	0x58(%rsp), %rax
0000000001008f43	movq	%rax, (%rsp)
0000000001008f47	callq	"runtime.(*fixalloc).alloc"
0000000001008f4c	movq	0x8(%rsp), %rax
0000000001008f51	movq	0x68(%rsp), %r8
0000000001008f56	movq	0x48(%rsp), %rdx
0000000001008f5b	leaq	(%rdx,%r8), %rbx
0000000001008f5f	movq	%rbx, (%rax)
0000000001008f62	movq	0xb584f(%rip), %rbx
0000000001008f69	movq	%rbx, 0x10(%rax)
0000000001008f6d	movq	%rax, 0xb5844(%rip)
0000000001008f74	movq	0x88(%rsp), %rcx
0000000001008f7c	movq	0x68(%rsp), %r8
0000000001008f81	jmp	0x1008c61
0000000001008f86	movq	$0x0, 0x98(%rsp)
0000000001008f92	movq	$0x0, 0xa0(%rsp)
0000000001008f9e	movq	0x78(%rsp), %rbp
0000000001008fa3	addq	$0x80, %rsp
0000000001008faa	retq
0000000001008fab	movabsq	$0x7fffffffffff, %rdi
0000000001008fb5	leaq	(%rdi,%rax), %r8
0000000001008fb9	shrq	$0x1a, %r8
0000000001008fbd	cmpq	$0x400000, %r8
0000000001008fc4	jb	0x1008fd1
0000000001008fc6	xorl	%r8d, %r8d
0000000001008fc9	movq	%r8, %rdi
0000000001008fcc	jmp	0x1008bfb
0000000001008fd1	movq	%rsi, 0x28(%rsp)
0000000001008fd6	movq	%rax, 0x48(%rsp)
0000000001008fdb	movq	%rsi, (%rsp)
0000000001008fdf	movq	%rdx, 0x8(%rsp)
0000000001008fe4	callq	runtime.sysReserve
0000000001008fe9	movq	0x10(%rsp), %r8
0000000001008fee	movq	0x48(%rsp), %rax
0000000001008ff3	movq	0x88(%rsp), %rcx
0000000001008ffb	movq	0x90(%rsp), %rdx
0000000001009003	movq	0x70(%rsp), %rbx
0000000001009008	movq	0x28(%rsp), %rsi
000000000100900d	movabsq	$0x7fffffffffff, %rdi
0000000001009017	jmp	0x1008fc9
0000000001009019	movq	%rax, %r8
000000000100901c	movq	%rdx, %rax
000000000100901f	xorl	%edx, %edx
0000000001009021	jmp	0x1008c58
0000000001009026	movq	0x90(%rsp), %rcx
000000000100902e	jmp	0x1008cc1
0000000001009033	leaq	0x65421(%rip), %rax
000000000100903a	movq	%rax, (%rsp)
000000000100903e	movq	$0x2c, 0x8(%rsp)
0000000001009047	callq	runtime.throw
000000000100904c	ud2
000000000100904e	callq	runtime.panicindex
0000000001009053	ud2
0000000001009055	leaq	0x636bb(%rip), %rax
000000000100905c	movq	%rax, (%rsp)
0000000001009060	movq	$0x19, 0x8(%rsp)
0000000001009069	callq	runtime.throw
000000000100906e	ud2
0000000001009070	leaq	0x64f12(%rip), %rax
0000000001009077	movq	%rax, (%rsp)
000000000100907b	movq	$0x27, 0x8(%rsp)
0000000001009084	callq	runtime.throw
0000000001009089	ud2
000000000100908b	leaq	0x647a5(%rip), %rax
0000000001009092	movq	%rax, (%rsp)
0000000001009096	movq	$0x21, 0x8(%rsp)
000000000100909f	callq	runtime.throw
00000000010090a4	ud2
00000000010090a6	movq	%r8, 0x30(%rsp)
00000000010090ab	movq	%rbx, 0x48(%rsp)
00000000010090b0	movq	%rsi, 0x38(%rsp)
00000000010090b5	movq	%rdi, 0x50(%rsp)
00000000010090ba	callq	runtime.printlock
00000000010090bf	leaq	0x647f5(%rip), %rax
00000000010090c6	movq	%rax, (%rsp)
00000000010090ca	movq	$0x21, 0x8(%rsp)
00000000010090d3	callq	runtime.printstring
00000000010090d8	movq	0x30(%rsp), %rax
00000000010090dd	movq	%rax, (%rsp)
00000000010090e1	callq	runtime.printhex
00000000010090e6	leaq	0x619af(%rip), %rax
00000000010090ed	movq	%rax, (%rsp)
00000000010090f1	movq	$0x2, 0x8(%rsp)
00000000010090fa	callq	runtime.printstring
00000000010090ff	movq	0x48(%rsp), %rax
0000000001009104	movq	%rax, (%rsp)
0000000001009108	callq	runtime.printhex
000000000100910d	leaq	0x6426a(%rip), %rax
0000000001009114	movq	%rax, (%rsp)
0000000001009118	movq	$0x1f, 0x8(%rsp)
0000000001009121	callq	runtime.printstring
0000000001009126	movq	0x50(%rsp), %rax
000000000100912b	movq	%rax, (%rsp)
000000000100912f	movq	0x38(%rsp), %rax
0000000001009134	movq	%rax, 0x8(%rsp)
0000000001009139	callq	runtime.printstring
000000000100913e	callq	runtime.printnl
0000000001009143	callq	runtime.printunlock
0000000001009148	leaq	0x653eb(%rip), %rax
000000000100914f	movq	%rax, (%rsp)
0000000001009153	movq	$0x2e, 0x8(%rsp)
000000000100915c	callq	runtime.throw
0000000001009161	ud2
0000000001009163	callq	runtime.morestack_noctxt
0000000001009168	jmp	"runtime.(*mheap).sysAlloc"
000000000100916d	int3
000000000100916e	int3
000000000100916f	int3
runtime.sysReserveAligned:
0000000001009170	movq	%gs:0x30, %rcx
0000000001009179	cmpq	0x10(%rcx), %rsp
000000000100917d	jbe	0x100929b
0000000001009183	subq	$0x38, %rsp
0000000001009187	movq	%rbp, 0x30(%rsp)
000000000100918c	leaq	0x30(%rsp), %rbp
0000000001009191	movq	0x40(%rsp), %rax
0000000001009196	movq	%rax, (%rsp)
000000000100919a	movq	0x48(%rsp), %rax
000000000100919f	movq	0x50(%rsp), %rcx
00000000010091a4	leaq	(%rcx,%rax), %rdx
00000000010091a8	movq	%rdx, 0x28(%rsp)
00000000010091ad	movq	%rdx, 0x8(%rsp)
00000000010091b2	callq	runtime.sysReserve
00000000010091b7	movq	0x10(%rsp), %rax
00000000010091bc	movq	%rax, %rcx
00000000010091bf	testq	%rax, %rax
00000000010091c2	je	0x100927f
00000000010091c8	movq	0x50(%rsp), %rdx
00000000010091cd	leaq	-0x1(%rdx), %rbx
00000000010091d1	testq	%rbx, %rax
00000000010091d4	je	0x1009266
00000000010091da	movq	%rax, 0x20(%rsp)
00000000010091df	movq	%rcx, (%rsp)
00000000010091e3	leaq	-0x1(%rax,%rdx), %rcx
00000000010091e8	notq	%rbx
00000000010091eb	andq	%rcx, %rbx
00000000010091ee	movq	%rbx, 0x18(%rsp)
00000000010091f3	subq	%rax, %rbx
00000000010091f6	movq	%rbx, 0x8(%rsp)
00000000010091fb	movq	$0x0, 0x10(%rsp)
0000000001009204	callq	runtime.sysFree
0000000001009209	movq	0x18(%rsp), %rax
000000000100920e	movq	0x48(%rsp), %rcx
0000000001009213	leaq	(%rcx,%rax), %rdx
0000000001009217	movq	0x20(%rsp), %rbx
000000000100921c	addq	%rcx, %rbx
000000000100921f	movq	0x50(%rsp), %rsi
0000000001009224	addq	%rsi, %rbx
0000000001009227	subq	%rdx, %rbx
000000000100922a	testq	%rbx, %rbx
000000000100922d	ja	0x1009243
000000000100922f	movq	%rax, 0x58(%rsp)
0000000001009234	movq	%rcx, 0x60(%rsp)
0000000001009239	movq	0x30(%rsp), %rbp
000000000100923e	addq	$0x38, %rsp
0000000001009242	retq
0000000001009243	movq	%rdx, (%rsp)
0000000001009247	movq	%rbx, 0x8(%rsp)
000000000100924c	movq	$0x0, 0x10(%rsp)
0000000001009255	callq	runtime.sysFree
000000000100925a	movq	0x18(%rsp), %rax
000000000100925f	movq	0x48(%rsp), %rcx
0000000001009264	jmp	0x100922f
0000000001009266	movq	%rcx, 0x58(%rsp)
000000000100926b	movq	0x28(%rsp), %rax
0000000001009270	movq	%rax, 0x60(%rsp)
0000000001009275	movq	0x30(%rsp), %rbp
000000000100927a	addq	$0x38, %rsp
000000000100927e	retq
000000000100927f	movq	$0x0, 0x58(%rsp)
0000000001009288	movq	$0x0, 0x60(%rsp)
0000000001009291	movq	0x30(%rsp), %rbp
0000000001009296	addq	$0x38, %rsp
000000000100929a	retq
000000000100929b	callq	runtime.morestack_noctxt
00000000010092a0	jmp	runtime.sysReserveAligned
00000000010092a5	int3
00000000010092a6	int3
00000000010092a7	int3
00000000010092a8	int3
00000000010092a9	int3
00000000010092aa	int3
00000000010092ab	int3
00000000010092ac	int3
00000000010092ad	int3
00000000010092ae	int3
00000000010092af	int3
runtime.(*mcache).nextFree:
00000000010092b0	movq	%gs:0x30, %rcx
00000000010092b9	cmpq	0x10(%rcx), %rsp
00000000010092bd	jbe	0x1009509
00000000010092c3	subq	$0x50, %rsp
00000000010092c7	movq	%rbp, 0x48(%rsp)
00000000010092cc	leaq	0x48(%rsp), %rbp
00000000010092d1	movq	0x58(%rsp), %rax
00000000010092d6	testb	%al, (%rax)
00000000010092d8	movzbl	0x60(%rsp), %ecx
00000000010092dd	movzbl	%cl, %edx
00000000010092e0	cmpq	$0x86, %rdx
00000000010092e7	jae	0x1009502
00000000010092ed	movq	%rdx, 0x20(%rsp)
00000000010092f2	movq	0x28(%rax,%rdx,8), %rcx
00000000010092f7	movq	%rcx, 0x28(%rsp)
00000000010092fc	movq	%rcx, (%rsp)
0000000001009300	callq	"runtime.(*mspan).nextFreeIndex"
0000000001009305	movq	0x8(%rsp), %rax
000000000100930a	movq	0x28(%rsp), %rcx
000000000100930f	movq	0x38(%rcx), %rdx
0000000001009313	cmpq	%rdx, %rax
0000000001009316	jne	0x10093d9
000000000100931c	movzwl	0x60(%rcx), %eax
0000000001009320	movzwl	%ax, %ecx
0000000001009323	cmpq	%rdx, %rcx
0000000001009326	jne	0x100947d
000000000100932c	xorps	%xmm0, %xmm0
000000000100932f	movups	%xmm0, 0x30(%rsp)
0000000001009334	movb	$0x0, 0x40(%rsp)
0000000001009339	leaq	"runtime.(*mcache).nextFree.func1"(%rip), %rax
0000000001009340	movq	%rax, 0x30(%rsp)
0000000001009345	movq	0x58(%rsp), %rax
000000000100934a	movq	%rax, 0x38(%rsp)
000000000100934f	movzbl	0x60(%rsp), %ecx
0000000001009354	movb	%cl, 0x40(%rsp)
0000000001009358	leaq	0x30(%rsp), %rcx
000000000100935d	movq	%rcx, (%rsp)
0000000001009361	callq	runtime.systemstack
0000000001009366	movq	0x20(%rsp), %rax
000000000100936b	movq	0x58(%rsp), %rcx
0000000001009370	movq	0x28(%rcx,%rax,8), %rax
0000000001009375	movq	%rax, 0x28(%rsp)
000000000100937a	movq	%rax, (%rsp)
000000000100937e	callq	"runtime.(*mspan).nextFreeIndex"
0000000001009383	movq	0x8(%rsp), %rax
0000000001009388	movq	0x28(%rsp), %rcx
000000000100938d	movl	$0x1, %edx
0000000001009392	movq	0x38(%rcx), %rbx
0000000001009396	cmpq	%rbx, %rax
0000000001009399	jae	0x1009462
000000000100939f	movq	0x68(%rcx), %rbx
00000000010093a3	imulq	%rbx, %rax
00000000010093a7	addq	0x18(%rcx), %rax
00000000010093ab	movzwl	0x60(%rcx), %ebx
00000000010093af	incl	%ebx
00000000010093b1	movw	%bx, 0x60(%rcx)
00000000010093b5	movzwl	%bx, %esi
00000000010093b8	movq	0x38(%rcx), %rdi
00000000010093bc	cmpq	%rdi, %rsi
00000000010093bf	ja	0x10093dd
00000000010093c1	movq	%rax, 0x68(%rsp)
00000000010093c6	movq	%rcx, 0x70(%rsp)
00000000010093cb	movb	%dl, 0x78(%rsp)
00000000010093cf	movq	0x48(%rsp), %rbp
00000000010093d4	addq	$0x50, %rsp
00000000010093d8	retq
00000000010093d9	xorl	%edx, %edx
00000000010093db	jmp	0x1009392
00000000010093dd	movw	%bx, 0x16(%rsp)
00000000010093e2	movq	%rdi, 0x18(%rsp)
00000000010093e7	callq	runtime.printlock
00000000010093ec	leaq	0x62203(%rip), %rax
00000000010093f3	movq	%rax, (%rsp)
00000000010093f7	movq	$0xe, 0x8(%rsp)
0000000001009400	callq	runtime.printstring
0000000001009405	movzwl	0x16(%rsp), %eax
000000000100940a	movzwl	%ax, %eax
000000000100940d	movq	%rax, (%rsp)
0000000001009411	callq	runtime.printuint
0000000001009416	leaq	0x61d1d(%rip), %rax
000000000100941d	movq	%rax, (%rsp)
0000000001009421	movq	$0xb, 0x8(%rsp)
000000000100942a	callq	runtime.printstring
000000000100942f	movq	0x18(%rsp), %rax
0000000001009434	movq	%rax, (%rsp)
0000000001009438	callq	runtime.printuint
000000000100943d	callq	runtime.printnl
0000000001009442	callq	runtime.printunlock
0000000001009447	leaq	0x630a3(%rip), %rax
000000000100944e	movq	%rax, (%rsp)
0000000001009452	movq	$0x17, 0x8(%rsp)
000000000100945b	callq	runtime.throw
0000000001009460	ud2
0000000001009462	leaq	0x62cd6(%rip), %rax
0000000001009469	movq	%rax, (%rsp)
000000000100946d	movq	$0x16, 0x8(%rsp)
0000000001009476	callq	runtime.throw
000000000100947b	ud2
000000000100947d	movq	%rdx, 0x18(%rsp)
0000000001009482	movw	%ax, 0x16(%rsp)
0000000001009487	callq	runtime.printlock
000000000100948c	leaq	0x63047(%rip), %rax
0000000001009493	movq	%rax, (%rsp)
0000000001009497	movq	$0x17, 0x8(%rsp)
00000000010094a0	callq	runtime.printstring
00000000010094a5	movzwl	0x16(%rsp), %eax
00000000010094aa	movzwl	%ax, %eax
00000000010094ad	movq	%rax, (%rsp)
00000000010094b1	callq	runtime.printuint
00000000010094b6	leaq	0x61c7d(%rip), %rax
00000000010094bd	movq	%rax, (%rsp)
00000000010094c1	movq	$0xb, 0x8(%rsp)
00000000010094ca	callq	runtime.printstring
00000000010094cf	movq	0x18(%rsp), %rax
00000000010094d4	movq	%rax, (%rsp)
00000000010094d8	callq	runtime.printuint
00000000010094dd	callq	runtime.printnl
00000000010094e2	callq	runtime.printunlock
00000000010094e7	leaq	0x6530f(%rip), %rax
00000000010094ee	movq	%rax, (%rsp)
00000000010094f2	movq	$0x31, 0x8(%rsp)
00000000010094fb	callq	runtime.throw
0000000001009500	ud2
0000000001009502	callq	runtime.panicindex
0000000001009507	ud2
0000000001009509	callq	runtime.morestack_noctxt
000000000100950e	jmp	"runtime.(*mcache).nextFree"
0000000001009513	int3
0000000001009514	int3
0000000001009515	int3
0000000001009516	int3
0000000001009517	int3
0000000001009518	int3
0000000001009519	int3
000000000100951a	int3
000000000100951b	int3
000000000100951c	int3
000000000100951d	int3
000000000100951e	int3
000000000100951f	int3
runtime.mallocgc:
0000000001009520	movq	%gs:0x30, %rcx
0000000001009529	leaq	-0x18(%rsp), %rax
000000000100952e	cmpq	0x10(%rcx), %rax
0000000001009532	jbe	0x1009ec6
0000000001009538	subq	$0x98, %rsp
000000000100953f	movq	%rbp, 0x90(%rsp)
0000000001009547	leaq	0x90(%rsp), %rbp
000000000100954f	movq	$0x0, %rax
0000000001009556	movq	%rax, 0x48(%rsp)
000000000100955b	cmpl	$0x2, 0xcb596(%rip)
0000000001009562	je	0x1009eab
0000000001009568	movq	0xa0(%rsp), %rax
0000000001009570	testq	%rax, %rax
0000000001009573	je	0x1009e3a
0000000001009579	cmpl	$0x0, 0xcb7c8(%rip)
0000000001009580	je	0x10095d1
0000000001009582	movq	0xa8(%rsp), %rcx
000000000100958a	testq	%rcx, %rcx
000000000100958d	je	0x10095ca
000000000100958f	movzbl	0x15(%rcx), %ecx
0000000001009593	movq	%rax, (%rsp)
0000000001009597	movq	%rcx, 0x8(%rsp)
000000000100959c	leaq	0xcc37d(%rip), %rax
00000000010095a3	movq	%rax, 0x10(%rsp)
00000000010095a8	callq	runtime.persistentalloc
00000000010095ad	movq	0x18(%rsp), %rax
00000000010095b2	movq	%rax, 0xb8(%rsp)
00000000010095ba	movq	0x90(%rsp), %rbp
00000000010095c2	addq	$0x98, %rsp
00000000010095c9	retq
00000000010095ca	movl	$0x10, %ecx
00000000010095cf	jmp	0x1009593
00000000010095d1	cmpl	$0x0, 0xcb518(%rip)
00000000010095d8	je	0x1009e33
00000000010095de	movq	%gs:0x30, %rdx
00000000010095e7	movq	0x30(%rdx), %rbx
00000000010095eb	movq	0xc0(%rbx), %rbx
00000000010095f2	testq	%rbx, %rbx
00000000010095f5	cmovneq	%rbx, %rdx
00000000010095f9	movq	0x170(%rdx), %rbx
0000000001009600	subq	%rax, %rbx
0000000001009603	movq	%rbx, 0x170(%rdx)
000000000100960a	testq	%rbx, %rbx
000000000100960d	jl	0x1009e1b
0000000001009613	movq	%gs:0x30, %rax
000000000100961c	movq	0x30(%rax), %rbx
0000000001009620	incl	0x100(%rbx)
0000000001009626	movq	0x30(%rax), %rbx
000000000100962a	testb	%al, (%rax)
000000000100962c	cmpl	$0x0, 0xe8(%rbx)
0000000001009633	jne	0x1009e90
0000000001009639	movq	%gs:0x30, %rax
0000000001009642	cmpq	%rax, 0x50(%rbx)
0000000001009646	je	0x1009e75
000000000100964c	movl	$0x1, 0xe8(%rbx)
0000000001009656	movq	%gs:0x30, %rax
000000000100965f	movq	0x30(%rax), %rax
0000000001009663	movq	0xa0(%rsp), %rsi
000000000100966b	movq	0x158(%rax), %rax
0000000001009672	movq	0xa8(%rsp), %rdi
000000000100967a	testq	%rdi, %rdi
000000000100967d	je	0x1009e10
0000000001009683	movzbl	0x17(%rdi), %r8d
0000000001009688	testb	$-0x80, %r8b
000000000100968c	setne	%r8b
0000000001009690	movq	%rbx, 0x50(%rsp)
0000000001009695	movq	%rsi, 0x38(%rsp)
000000000100969a	movq	%rax, 0x60(%rsp)
000000000100969f	movb	%r8b, 0x2f(%rsp)
00000000010096a4	movq	%rdx, 0x68(%rsp)
00000000010096a9	cmpq	$0x8000, %rsi
00000000010096b0	ja	0x1009d52
00000000010096b6	testb	%r8b, %r8b
00000000010096b9	je	0x1009b70
00000000010096bf	cmpq	$0x10, %rsi
00000000010096c3	jae	0x1009b70
00000000010096c9	movq	0x18(%rax), %r9
00000000010096cd	testq	$0x7, %rsi
00000000010096d4	jne	0x1009b44
00000000010096da	addq	$0x7, %r9
00000000010096de	andq	$-0x8, %r9
00000000010096e2	leaq	(%r9,%rsi), %r10
00000000010096e6	cmpq	$0x10, %r10
00000000010096ea	ja	0x1009756
00000000010096ec	movq	0x10(%rax), %r11
00000000010096f0	testq	%r11, %r11
00000000010096f3	je	0x1009756
00000000010096f5	leaq	(%r11,%r9), %rcx
00000000010096f9	movq	%r10, 0x18(%rax)
00000000010096fd	incq	0x20(%rax)
0000000001009701	movl	$0x0, 0xe8(%rbx)
000000000100970b	movq	%gs:0x30, %rax
0000000001009714	movl	0x100(%rbx), %edx
000000000100971a	leal	-0x1(%rdx), %esi
000000000100971d	movl	%esi, 0x100(%rbx)
0000000001009723	cmpl	$0x1, %edx
0000000001009726	jne	0x100973e
0000000001009728	testb	%al, (%rax)
000000000100972a	leaq	0xb1(%rax), %rdx
0000000001009731	cmpb	$0x0, (%rdx)
0000000001009734	je	0x100973e
0000000001009736	movq	$-0x522, 0x10(%rax)
000000000100973e	movq	%rcx, 0xb8(%rsp)
0000000001009746	movq	0x90(%rsp), %rbp
000000000100974e	addq	$0x98, %rsp
0000000001009755	retq
0000000001009756	movq	0x50(%rax), %r9
000000000100975a	movq	0x40(%r9), %r10
000000000100975e	bsfq	%r10, %r11
0000000001009762	movl	$0x40, %r12d
0000000001009768	cmoveq	%r12, %r11
000000000100976c	cmpq	$0x40, %r11
0000000001009770	jge	0x1009b3d
0000000001009776	movq	0x30(%r9), %r12
000000000100977a	leaq	(%r12,%r11), %r13
000000000100977e	movq	0x38(%r9), %r14
0000000001009782	cmpq	%r14, %r13
0000000001009785	jae	0x1009b3d
000000000100978b	leaq	0x1(%r12,%r11), %r12
0000000001009790	testq	$0x3f, %r12
0000000001009797	jne	0x1009b06
000000000100979d	cmpq	%r14, %r12
00000000010097a0	je	0x1009b06
00000000010097a6	xorl	%ecx, %ecx
00000000010097a8	testq	%rcx, %rcx
00000000010097ab	je	0x1009ac6
00000000010097b1	xorl	%r9d, %r9d
00000000010097b4	xorps	%xmm0, %xmm0
00000000010097b7	movups	%xmm0, (%rcx)
00000000010097ba	movq	0x18(%rax), %r10
00000000010097be	cmpq	%r10, 0xa0(%rsp)
00000000010097c6	jae	0x1009ab3
00000000010097cc	movq	%rcx, %r10
00000000010097cf	movq	%rcx, 0x10(%rax)
00000000010097d3	movq	0xa0(%rsp), %rcx
00000000010097db	movq	%rcx, 0x18(%rax)
00000000010097df	movq	$0x10, 0xa0(%rsp)
00000000010097eb	movq	%r10, 0x40(%rsp)
00000000010097f0	movb	%r9b, 0x2e(%rsp)
00000000010097f5	testb	%r8b, %r8b
00000000010097f8	je	0x1009a28
00000000010097fe	xorl	%ecx, %ecx
0000000001009800	movq	%rsi, 0x38(%rsp)
0000000001009805	movq	%rcx, 0x30(%rsp)
000000000100980a	callq	runtime.publicationBarrier
000000000100980f	cmpl	$0x0, 0xcb2e2(%rip)
0000000001009816	jne	0x10099fe
000000000100981c	movq	0x50(%rsp), %rax
0000000001009821	movl	$0x0, 0xe8(%rax)
000000000100982b	movq	%gs:0x30, %rcx
0000000001009834	movl	0x100(%rax), %edx
000000000100983a	leal	-0x1(%rdx), %ebx
000000000100983d	movl	%ebx, 0x100(%rax)
0000000001009843	cmpl	$0x1, %edx
0000000001009846	jne	0x100985e
0000000001009848	testb	%al, (%rcx)
000000000100984a	leaq	0xb1(%rcx), %rax
0000000001009851	cmpb	$0x0, (%rax)
0000000001009854	je	0x100985e
0000000001009856	movq	$-0x522, 0x10(%rcx)
000000000100985e	cmpl	$0x0, 0xcb4bb(%rip)
0000000001009865	jne	0x10099d1
000000000100986b	movq	runtime.MemProfileRate(%rip), %rax
0000000001009872	testq	%rax, %rax
0000000001009875	jle	0x100989b
0000000001009877	movq	0xa0(%rsp), %rcx
000000000100987f	cmpq	%rax, %rcx
0000000001009882	jae	0x1009950
0000000001009888	movq	0x60(%rsp), %rax
000000000100988d	movl	(%rax), %edx
000000000100988f	cmpl	%edx, %ecx
0000000001009891	jge	0x1009950
0000000001009897	subl	%ecx, %edx
0000000001009899	movl	%edx, (%rax)
000000000100989b	movq	0x68(%rsp), %rax
00000000010098a0	testq	%rax, %rax
00000000010098a3	je	0x10098c6
00000000010098a5	movq	0x170(%rax), %rcx
00000000010098ac	movq	0xa0(%rsp), %rdx
00000000010098b4	movq	0x38(%rsp), %rbx
00000000010098b9	subq	%rbx, %rdx
00000000010098bc	subq	%rdx, %rcx
00000000010098bf	movq	%rcx, 0x170(%rax)
00000000010098c6	movzbl	0x2e(%rsp), %eax
00000000010098cb	testb	%al, %al
00000000010098cd	je	0x10098ea
00000000010098cf	leaq	0xcd07a(%rip), %rax
00000000010098d6	cmpb	$0x0, (%rax)
00000000010098d9	je	0x10098e4
00000000010098db	cmpl	$0x0, 0xcb232(%rip)
00000000010098e2	je	0x1009930
00000000010098e4	xorl	%eax, %eax
00000000010098e6	testb	%al, %al
00000000010098e8	jne	0x1009907
00000000010098ea	movq	0x40(%rsp), %rax
00000000010098ef	movq	%rax, 0xb8(%rsp)
00000000010098f7	movq	0x90(%rsp), %rbp
00000000010098ff	addq	$0x98, %rsp
0000000001009906	retq
0000000001009907	movq	$0x0, (%rsp)
000000000100990f	movq	$0x1, 0x8(%rsp)
0000000001009918	movq	$0x0, 0x10(%rsp)
0000000001009921	movl	$0x0, 0x18(%rsp)
0000000001009929	callq	runtime.gcStart
000000000100992e	jmp	0x10098ea
0000000001009930	cmpl	$0x0, 0xcb1c1(%rip)
0000000001009937	je	0x100993d
0000000001009939	xorl	%eax, %eax
000000000100993b	jmp	0x10098e6
000000000100993d	movq	0xcd674(%rip), %rcx
0000000001009944	cmpq	%rcx, 0xcd675(%rip)
000000000100994b	setae	%al
000000000100994e	jmp	0x10098e6
0000000001009950	movq	%gs:0x30, %rax
0000000001009959	movq	0x30(%rax), %rcx
000000000100995d	incl	0x100(%rcx)
0000000001009963	movq	0x30(%rax), %rax
0000000001009967	movq	%rax, 0x58(%rsp)
000000000100996c	movq	%rax, (%rsp)
0000000001009970	movq	0x40(%rsp), %rcx
0000000001009975	movq	%rcx, 0x8(%rsp)
000000000100997a	movq	0xa0(%rsp), %rdx
0000000001009982	movq	%rdx, 0x10(%rsp)
0000000001009987	callq	runtime.profilealloc
000000000100998c	movq	%gs:0x30, %rax
0000000001009995	movq	0x58(%rsp), %rcx
000000000100999a	movl	0x100(%rcx), %edx
00000000010099a0	leal	-0x1(%rdx), %ebx
00000000010099a3	movl	%ebx, 0x100(%rcx)
00000000010099a9	cmpl	$0x1, %edx
00000000010099ac	jne	0x100989b
00000000010099b2	testb	%al, (%rax)
00000000010099b4	leaq	0xb1(%rax), %rcx
00000000010099bb	cmpb	$0x0, (%rcx)
00000000010099be	je	0x100989b
00000000010099c4	movq	$-0x522, 0x10(%rax)
00000000010099cc	jmp	0x100989b
00000000010099d1	movq	0x40(%rsp), %rax
00000000010099d6	movq	%rax, (%rsp)
00000000010099da	movq	0xa0(%rsp), %rcx
00000000010099e2	movq	%rcx, 0x8(%rsp)
00000000010099e7	movq	0xa8(%rsp), %rcx
00000000010099ef	movq	%rcx, 0x10(%rsp)
00000000010099f4	callq	runtime.tracealloc
00000000010099f9	jmp	0x100986b
00000000010099fe	movq	0x40(%rsp), %rax
0000000001009a03	movq	%rax, (%rsp)
0000000001009a07	movq	0xa0(%rsp), %rax
0000000001009a0f	movq	%rax, 0x8(%rsp)
0000000001009a14	movq	0x30(%rsp), %rax
0000000001009a19	movq	%rax, 0x10(%rsp)
0000000001009a1e	callq	runtime.gcmarknewobject
0000000001009a23	jmp	0x100981c
0000000001009a28	movq	runtime.deferType(%rip), %rax
0000000001009a2f	movq	%r10, (%rsp)
0000000001009a33	movq	0xa0(%rsp), %rdx
0000000001009a3b	movq	%rdx, 0x8(%rsp)
0000000001009a40	cmpq	%rdi, %rax
0000000001009a43	movl	$0x30, %eax
0000000001009a48	cmoveq	%rax, %rsi
0000000001009a4c	movq	%rsi, 0x38(%rsp)
0000000001009a51	movq	%rsi, 0x10(%rsp)
0000000001009a56	movq	%rdi, 0x18(%rsp)
0000000001009a5b	callq	runtime.heapBitsSetType
0000000001009a60	movq	0xa8(%rsp), %rax
0000000001009a68	movq	(%rax), %rcx
0000000001009a6b	movq	0x38(%rsp), %rdx
0000000001009a70	cmpq	%rcx, %rdx
0000000001009a73	jbe	0x1009aa7
0000000001009a75	movq	0x8(%rax), %rbx
0000000001009a79	movq	%rdx, %rsi
0000000001009a7c	subq	%rcx, %rdx
0000000001009a7f	leaq	(%rdx,%rbx), %rcx
0000000001009a83	testq	%rbx, %rbx
0000000001009a86	movl	$0x0, %edx
0000000001009a8b	cmovneq	%rcx, %rdx
0000000001009a8f	movq	0x60(%rsp), %rbx
0000000001009a94	movq	0x8(%rbx), %rdi
0000000001009a98	addq	%rdx, %rdi
0000000001009a9b	movq	%rdi, 0x8(%rbx)
0000000001009a9f	movq	%rdx, %rcx
0000000001009aa2	jmp	0x1009800
0000000001009aa7	movq	0x8(%rax), %rcx
0000000001009aab	movq	%rdx, %rsi
0000000001009aae	movq	%rcx, %rdx
0000000001009ab1	jmp	0x1009a8f
0000000001009ab3	cmpq	$0x0, 0x10(%rax)
0000000001009ab8	je	0x10097cc
0000000001009abe	movq	%rcx, %r10
0000000001009ac1	jmp	0x10097df
0000000001009ac6	movq	%rax, (%rsp)
0000000001009aca	movb	$0x5, 0x8(%rsp)
0000000001009acf	callq	"runtime.(*mcache).nextFree"
0000000001009ad4	movq	0x10(%rsp), %rcx
0000000001009ad9	movzbl	0x20(%rsp), %r9d
0000000001009adf	movq	0x60(%rsp), %rax
0000000001009ae4	movq	0x68(%rsp), %rdx
0000000001009ae9	movq	0x50(%rsp), %rbx
0000000001009aee	movq	0x38(%rsp), %rsi
0000000001009af3	movq	0xa8(%rsp), %rdi
0000000001009afb	movzbl	0x2f(%rsp), %r8d
0000000001009b01	jmp	0x10097b4
0000000001009b06	leaq	0x1(%r11), %rcx
0000000001009b0a	shrq	%cl, %r10
0000000001009b0d	cmpq	$0x40, %rcx
0000000001009b11	sbbq	%r11, %r11
0000000001009b14	andq	%r11, %r10
0000000001009b17	movq	%r10, 0x40(%r9)
0000000001009b1b	movq	%r12, 0x30(%r9)
0000000001009b1f	movzwl	0x60(%r9), %r10d
0000000001009b24	incl	%r10d
0000000001009b27	movw	%r10w, 0x60(%r9)
0000000001009b2c	movq	0x68(%r9), %rcx
0000000001009b30	imulq	%r13, %rcx
0000000001009b34	addq	0x18(%r9), %rcx
0000000001009b38	jmp	0x10097a8
0000000001009b3d	xorl	%ecx, %ecx
0000000001009b3f	jmp	0x10097a8
0000000001009b44	testq	$0x3, %rsi
0000000001009b4b	jne	0x1009b5a
0000000001009b4d	addq	$0x3, %r9
0000000001009b51	andq	$-0x4, %r9
0000000001009b55	jmp	0x10096e2
0000000001009b5a	btl	$0x0, %esi
0000000001009b5e	jb	0x10096e2
0000000001009b64	incq	%r9
0000000001009b67	andq	$-0x2, %r9
0000000001009b6b	jmp	0x10096e2
0000000001009b70	cmpq	$0x3f8, %rsi
0000000001009b77	ja	0x1009d29
0000000001009b7d	leaq	0x7(%rsi), %r9
0000000001009b81	shrq	$0x3, %r9
0000000001009b85	cmpq	$0x81, %r9
0000000001009b8c	jae	0x1009e6e
0000000001009b92	leaq	runtime.size_to_class8(%rip), %r10
0000000001009b99	movzbl	(%r10,%r9), %r9d
0000000001009b9e	movzbl	%r9b, %r10d
0000000001009ba2	cmpq	$0x43, %r10
0000000001009ba6	jae	0x1009e60
0000000001009bac	leaq	runtime.class_to_size(%rip), %r11
0000000001009bb3	movzwl	(%r11,%r10,2), %r10d
0000000001009bb8	movq	%r10, 0xa0(%rsp)
0000000001009bc0	testb	%al, (%rax)
0000000001009bc2	shll	%r9d
0000000001009bc5	movzbl	%r8b, %r10d
0000000001009bc9	orl	%r10d, %r9d
0000000001009bcc	movzbl	%r9b, %r10d
0000000001009bd0	cmpq	$0x86, %r10
0000000001009bd7	jae	0x1009e59
0000000001009bdd	movq	0x28(%rax,%r10,8), %r10
0000000001009be2	movq	0x40(%r10), %r11
0000000001009be6	bsfq	%r11, %r12
0000000001009bea	movl	$0x40, %r13d
0000000001009bf0	cmoveq	%r13, %r12
0000000001009bf4	cmpq	$0x40, %r12
0000000001009bf8	jge	0x1009d22
0000000001009bfe	movq	0x30(%r10), %r13
0000000001009c02	leaq	(%r13,%r12), %r14
0000000001009c07	movq	0x38(%r10), %r15
0000000001009c0b	cmpq	%r15, %r14
0000000001009c0e	jae	0x1009d22
0000000001009c14	leaq	0x1(%r13,%r12), %r13
0000000001009c19	testq	$0x3f, %r13
0000000001009c20	jne	0x1009cea
0000000001009c26	cmpq	%r15, %r13
0000000001009c29	je	0x1009cea
0000000001009c2f	xorl	%ecx, %ecx
0000000001009c31	testq	%rcx, %rcx
0000000001009c34	je	0x1009ca5
0000000001009c36	xorl	%r9d, %r9d
0000000001009c39	movzbl	0xb0(%rsp), %r11d
0000000001009c42	testb	%r11b, %r11b
0000000001009c45	je	0x1009c4e
0000000001009c47	cmpb	$0x0, 0x65(%r10)
0000000001009c4c	jne	0x1009c56
0000000001009c4e	movq	%rcx, %r10
0000000001009c51	jmp	0x10097eb
0000000001009c56	movq	%rcx, 0x40(%rsp)
0000000001009c5b	movb	%r9b, 0x2e(%rsp)
0000000001009c60	movq	%rcx, (%rsp)
0000000001009c64	movq	0xa0(%rsp), %rax
0000000001009c6c	movq	%rax, 0x8(%rsp)
0000000001009c71	callq	runtime.memclrNoHeapPointers
0000000001009c76	movq	0x60(%rsp), %rax
0000000001009c7b	movq	0x40(%rsp), %rcx
0000000001009c80	movq	0x68(%rsp), %rdx
0000000001009c85	movq	0x50(%rsp), %rbx
0000000001009c8a	movq	0x38(%rsp), %rsi
0000000001009c8f	movq	0xa8(%rsp), %rdi
0000000001009c97	movzbl	0x2f(%rsp), %r8d
0000000001009c9d	movzbl	0x2e(%rsp), %r9d
0000000001009ca3	jmp	0x1009c4e
0000000001009ca5	movq	%rax, (%rsp)
0000000001009ca9	movb	%r9b, 0x8(%rsp)
0000000001009cae	callq	"runtime.(*mcache).nextFree"
0000000001009cb3	movq	0x10(%rsp), %rcx
0000000001009cb8	movq	0x18(%rsp), %r10
0000000001009cbd	movzbl	0x20(%rsp), %r9d
0000000001009cc3	movq	0x60(%rsp), %rax
0000000001009cc8	movq	0x68(%rsp), %rdx
0000000001009ccd	movq	0x50(%rsp), %rbx
0000000001009cd2	movq	0x38(%rsp), %rsi
0000000001009cd7	movq	0xa8(%rsp), %rdi
0000000001009cdf	movzbl	0x2f(%rsp), %r8d
0000000001009ce5	jmp	0x1009c39
0000000001009cea	leaq	0x1(%r12), %rcx
0000000001009cef	shrq	%cl, %r11
0000000001009cf2	cmpq	$0x40, %rcx
0000000001009cf6	sbbq	%r12, %r12
0000000001009cf9	andq	%r12, %r11
0000000001009cfc	movq	%r11, 0x40(%r10)
0000000001009d00	movq	%r13, 0x30(%r10)
0000000001009d04	movzwl	0x60(%r10), %r11d
0000000001009d09	incl	%r11d
0000000001009d0c	movw	%r11w, 0x60(%r10)
0000000001009d11	movq	0x68(%r10), %rcx
0000000001009d15	imulq	%r14, %rcx
0000000001009d19	addq	0x18(%r10), %rcx
0000000001009d1d	jmp	0x1009c31
0000000001009d22	xorl	%ecx, %ecx
0000000001009d24	jmp	0x1009c31
0000000001009d29	leaq	-0x381(%rsi), %r9
0000000001009d30	shrq	$0x7, %r9
0000000001009d34	cmpq	$0xf9, %r9
0000000001009d3b	jae	0x1009e67
0000000001009d41	leaq	runtime.size_to_class128(%rip), %r10
0000000001009d48	movzbl	(%r9,%r10), %r9d
0000000001009d4d	jmp	0x1009b9e
0000000001009d52	movq	$0x0, 0x48(%rsp)
0000000001009d5b	xorps	%xmm0, %xmm0
0000000001009d5e	movups	%xmm0, 0x70(%rsp)
0000000001009d63	movups	%xmm0, 0x80(%rsp)
0000000001009d6b	leaq	runtime.mallocgc.func1(%rip), %rax
0000000001009d72	movq	%rax, 0x70(%rsp)
0000000001009d77	leaq	0xa0(%rsp), %rax
0000000001009d7f	movq	%rax, 0x78(%rsp)
0000000001009d84	movzbl	0xb0(%rsp), %eax
0000000001009d8c	movb	%al, 0x80(%rsp)
0000000001009d93	movb	%r8b, 0x81(%rsp)
0000000001009d9b	leaq	0x48(%rsp), %rax
0000000001009da0	movq	%rax, 0x88(%rsp)
0000000001009da8	leaq	0x70(%rsp), %rax
0000000001009dad	movq	%rax, (%rsp)
0000000001009db1	callq	runtime.systemstack
0000000001009db6	movq	0x48(%rsp), %rax
0000000001009dbb	movq	$0x1, 0x30(%rax)
0000000001009dc3	movq	0x48(%rsp), %rax
0000000001009dc8	movw	$0x1, 0x60(%rax)
0000000001009dce	movq	0x48(%rsp), %rax
0000000001009dd3	movq	0x18(%rax), %r10
0000000001009dd7	movq	0x68(%rax), %rax
0000000001009ddb	movq	%rax, 0xa0(%rsp)
0000000001009de3	movq	0x60(%rsp), %rax
0000000001009de8	movq	0x68(%rsp), %rdx
0000000001009ded	movq	0x50(%rsp), %rbx
0000000001009df2	movq	0x38(%rsp), %rsi
0000000001009df7	movq	0xa8(%rsp), %rdi
0000000001009dff	movzbl	0x2f(%rsp), %r8d
0000000001009e05	movl	$0x1, %r9d
0000000001009e0b	jmp	0x10097eb
0000000001009e10	movl	$0x1, %r8d
0000000001009e16	jmp	0x1009690
0000000001009e1b	movq	%rdx, 0x68(%rsp)
0000000001009e20	movq	%rdx, (%rsp)
0000000001009e24	callq	runtime.gcAssistAlloc
0000000001009e29	movq	0x68(%rsp), %rdx
0000000001009e2e	jmp	0x1009613
0000000001009e33	xorl	%edx, %edx
0000000001009e35	jmp	0x1009613
0000000001009e3a	leaq	runtime.zerobase(%rip), %rax
0000000001009e41	movq	%rax, 0xb8(%rsp)
0000000001009e49	movq	0x90(%rsp), %rbp
0000000001009e51	addq	$0x98, %rsp
0000000001009e58	retq
0000000001009e59	callq	runtime.panicindex
0000000001009e5e	ud2
0000000001009e60	callq	runtime.panicindex
0000000001009e65	ud2
0000000001009e67	callq	runtime.panicindex
0000000001009e6c	ud2
0000000001009e6e	callq	runtime.panicindex
0000000001009e73	ud2
0000000001009e75	leaq	0x62000(%rip), %rax
0000000001009e7c	movq	%rax, (%rsp)
0000000001009e80	movq	$0x14, 0x8(%rsp)
0000000001009e89	callq	runtime.throw
0000000001009e8e	ud2
0000000001009e90	leaq	0x6180c(%rip), %rax
0000000001009e97	movq	%rax, (%rsp)
0000000001009e9b	movq	$0xf, 0x8(%rsp)
0000000001009ea4	callq	runtime.throw
0000000001009ea9	ud2
0000000001009eab	leaq	0x649ae(%rip), %rax
0000000001009eb2	movq	%rax, (%rsp)
0000000001009eb6	movq	$0x32, 0x8(%rsp)
0000000001009ebf	callq	runtime.throw
0000000001009ec4	ud2
0000000001009ec6	callq	runtime.morestack_noctxt
0000000001009ecb	jmp	runtime.mallocgc
runtime.largeAlloc:
0000000001009ed0	movq	%gs:0x30, %rcx
0000000001009ed9	cmpq	0x10(%rcx), %rsp
0000000001009edd	jbe	0x100a053
0000000001009ee3	subq	$0x38, %rsp
0000000001009ee7	movq	%rbp, 0x30(%rsp)
0000000001009eec	leaq	0x30(%rsp), %rbp
0000000001009ef1	movq	0x40(%rsp), %rax
0000000001009ef6	leaq	0x2000(%rax), %rcx
0000000001009efd	cmpq	%rax, %rcx
0000000001009f00	jb	0x100a038
0000000001009f06	movq	%rax, %rcx
0000000001009f09	shrq	$0xd, %rax
0000000001009f0d	leaq	0x1(%rax), %rdx
0000000001009f11	testq	$0x1fff, %rcx
0000000001009f18	cmovneq	%rdx, %rax
0000000001009f1c	movq	%rax, 0x20(%rsp)
0000000001009f21	movq	%rax, %rdx
0000000001009f24	shlq	$0xd, %rax
0000000001009f28	movq	%rax, (%rsp)
0000000001009f2c	movq	%rdx, 0x8(%rsp)
0000000001009f31	callq	runtime.deductSweepCredit
0000000001009f36	leaq	runtime.mheap_(%rip), %rax
0000000001009f3d	movq	%rax, (%rsp)
0000000001009f41	movq	0x20(%rsp), %rax
0000000001009f46	movq	%rax, 0x8(%rsp)
0000000001009f4b	movzbl	0x49(%rsp), %eax
0000000001009f50	movb	%al, 0x10(%rsp)
0000000001009f54	movb	$0x1, 0x11(%rsp)
0000000001009f59	movzbl	0x48(%rsp), %eax
0000000001009f5e	movb	%al, 0x12(%rsp)
0000000001009f62	callq	"runtime.(*mheap).alloc"
0000000001009f67	movq	0x18(%rsp), %rax
0000000001009f6c	testq	%rax, %rax
0000000001009f6f	je	0x100a01d
0000000001009f75	movq	0x18(%rax), %rcx
0000000001009f79	movq	0x40(%rsp), %rdx
0000000001009f7e	addq	%rdx, %rcx
0000000001009f81	movq	%rcx, 0x80(%rax)
0000000001009f88	movq	0xb4809(%rip), %rcx
0000000001009f8f	testb	%al, (%rcx)
0000000001009f91	movq	0x18(%rax), %rdx
0000000001009f95	movabsq	$0x800000000000, %rbx
0000000001009f9f	addq	%rdx, %rbx
0000000001009fa2	shrq	$0x1a, %rbx
0000000001009fa6	cmpq	$0x400000, %rbx
0000000001009fad	jae	0x100a016
0000000001009faf	movq	(%rcx,%rbx,8), %rcx
0000000001009fb3	testq	%rcx, %rcx
0000000001009fb6	je	0x100a00c
0000000001009fb8	movq	%rdx, %rsi
0000000001009fbb	shrq	$0x5, %rdx
0000000001009fbf	andq	$0x1fffff, %rdx
0000000001009fc6	addq	%rcx, %rdx
0000000001009fc9	shrq	$0x3, %rsi
0000000001009fcd	andq	$0x3, %rsi
0000000001009fd1	addq	$0x1fffff, %rcx
0000000001009fd8	movq	%rax, 0x28(%rsp)
0000000001009fdd	movq	%rdx, (%rsp)
0000000001009fe1	movl	%esi, 0x8(%rsp)
0000000001009fe5	movl	%ebx, 0xc(%rsp)
0000000001009fe9	movq	%rcx, 0x10(%rsp)
0000000001009fee	movq	%rax, 0x18(%rsp)
0000000001009ff3	callq	runtime.heapBits.initSpan
0000000001009ff8	movq	0x28(%rsp), %rax
0000000001009ffd	movq	%rax, 0x50(%rsp)
000000000100a002	movq	0x30(%rsp), %rbp
000000000100a007	addq	$0x38, %rsp
000000000100a00b	retq
000000000100a00c	xorl	%ecx, %ecx
000000000100a00e	xorl	%ebx, %ebx
000000000100a010	xorl	%esi, %esi
000000000100a012	xorl	%edx, %edx
000000000100a014	jmp	0x1009fd8
000000000100a016	callq	runtime.panicindex
000000000100a01b	ud2
000000000100a01d	leaq	0x6147b(%rip), %rax
000000000100a024	movq	%rax, (%rsp)
000000000100a028	movq	$0xd, 0x8(%rsp)
000000000100a031	callq	runtime.throw
000000000100a036	ud2
000000000100a038	leaq	0x61460(%rip), %rax
000000000100a03f	movq	%rax, (%rsp)
000000000100a043	movq	$0xd, 0x8(%rsp)
000000000100a04c	callq	runtime.throw
000000000100a051	ud2
000000000100a053	callq	runtime.morestack_noctxt
000000000100a058	jmp	runtime.largeAlloc
000000000100a05d	int3
000000000100a05e	int3
000000000100a05f	int3
runtime.newobject:
000000000100a060	movq	%gs:0x30, %rcx
000000000100a069	cmpq	0x10(%rcx), %rsp
000000000100a06d	jbe	0x100a0ac
000000000100a06f	subq	$0x28, %rsp
000000000100a073	movq	%rbp, 0x20(%rsp)
000000000100a078	leaq	0x20(%rsp), %rbp
000000000100a07d	movq	0x30(%rsp), %rax
000000000100a082	movq	(%rax), %rcx
000000000100a085	movq	%rcx, (%rsp)
000000000100a089	movq	%rax, 0x8(%rsp)
000000000100a08e	movb	$0x1, 0x10(%rsp)
000000000100a093	callq	runtime.mallocgc
000000000100a098	movq	0x18(%rsp), %rax
000000000100a09d	movq	%rax, 0x38(%rsp)
000000000100a0a2	movq	0x20(%rsp), %rbp
000000000100a0a7	addq	$0x28, %rsp
000000000100a0ab	retq
000000000100a0ac	callq	runtime.morestack_noctxt
000000000100a0b1	jmp	runtime.newobject
000000000100a0b3	int3
000000000100a0b4	int3
000000000100a0b5	int3
000000000100a0b6	int3
000000000100a0b7	int3
000000000100a0b8	int3
000000000100a0b9	int3
000000000100a0ba	int3
000000000100a0bb	int3
000000000100a0bc	int3
000000000100a0bd	int3
000000000100a0be	int3
000000000100a0bf	int3
runtime.newarray:
000000000100a0c0	movq	%gs:0x30, %rcx
000000000100a0c9	cmpq	0x10(%rcx), %rsp
000000000100a0cd	jbe	0x100a1a2
000000000100a0d3	subq	$0x28, %rsp
000000000100a0d7	movq	%rbp, 0x20(%rsp)
000000000100a0dc	leaq	0x20(%rsp), %rbp
000000000100a0e1	movq	0x38(%rsp), %rcx
000000000100a0e6	cmpq	$0x1, %rcx
000000000100a0ea	je	0x100a155
000000000100a0ec	testq	%rcx, %rcx
000000000100a0ef	jl	0x100a184
000000000100a0f5	movq	0x30(%rsp), %rdx
000000000100a0fa	movq	(%rdx), %rbx
000000000100a0fd	cmpq	$0x21, %rbx
000000000100a101	jae	0x100a13e
000000000100a103	leaq	runtime.maxElems(%rip), %rax
000000000100a10a	movq	(%rax,%rbx,8), %rax
000000000100a10e	cmpq	%rax, %rcx
000000000100a111	ja	0x100a184
000000000100a113	imulq	%rcx, %rbx
000000000100a117	movq	%rbx, (%rsp)
000000000100a11b	movq	%rdx, 0x8(%rsp)
000000000100a120	movb	$0x1, 0x10(%rsp)
000000000100a125	callq	runtime.mallocgc
000000000100a12a	movq	0x18(%rsp), %rax
000000000100a12f	movq	%rax, 0x40(%rsp)
000000000100a134	movq	0x20(%rsp), %rbp
000000000100a139	addq	$0x28, %rsp
000000000100a13d	retq
000000000100a13e	movabsq	$0x1000000000000, %rax
000000000100a148	movq	%rdx, %rsi
000000000100a14b	xorl	%edx, %edx
000000000100a14d	divq	%rbx
000000000100a150	movq	%rsi, %rdx
000000000100a153	jmp	0x100a10e
000000000100a155	movq	0x30(%rsp), %rax
000000000100a15a	movq	(%rax), %rcx
000000000100a15d	movq	%rcx, (%rsp)
000000000100a161	movq	%rax, 0x8(%rsp)
000000000100a166	movb	$0x1, 0x10(%rsp)
000000000100a16b	callq	runtime.mallocgc
000000000100a170	movq	0x18(%rsp), %rax
000000000100a175	movq	%rax, 0x40(%rsp)
000000000100a17a	movq	0x20(%rsp), %rbp
000000000100a17f	addq	$0x28, %rsp
000000000100a183	retq
000000000100a184	leaq	0x51f75(%rip), %rax
000000000100a18b	movq	%rax, (%rsp)
000000000100a18f	leaq	runtime.statictmp_10(%rip), %rax
000000000100a196	movq	%rax, 0x8(%rsp)
000000000100a19b	callq	runtime.gopanic
000000000100a1a0	ud2
000000000100a1a2	callq	runtime.morestack_noctxt
000000000100a1a7	jmp	runtime.newarray
000000000100a1ac	int3
000000000100a1ad	int3
000000000100a1ae	int3
000000000100a1af	int3
runtime.profilealloc:
000000000100a1b0	movq	%gs:0x30, %rcx
000000000100a1b9	cmpq	0x10(%rcx), %rsp
000000000100a1bd	jbe	0x100a205
000000000100a1bf	subq	$0x18, %rsp
000000000100a1c3	movq	%rbp, 0x10(%rsp)
000000000100a1c8	leaq	0x10(%rsp), %rbp
000000000100a1cd	callq	runtime.nextSample
000000000100a1d2	movq	0x20(%rsp), %rax
000000000100a1d7	movq	0x158(%rax), %rax
000000000100a1de	movl	(%rsp), %ecx
000000000100a1e1	movl	%ecx, (%rax)
000000000100a1e3	movq	0x28(%rsp), %rax
000000000100a1e8	movq	%rax, (%rsp)
000000000100a1ec	movq	0x30(%rsp), %rax
000000000100a1f1	movq	%rax, 0x8(%rsp)
000000000100a1f6	callq	runtime.mProf_Malloc
000000000100a1fb	movq	0x10(%rsp), %rbp
000000000100a200	addq	$0x18, %rsp
000000000100a204	retq
000000000100a205	callq	runtime.morestack_noctxt
000000000100a20a	jmp	runtime.profilealloc
000000000100a20c	int3
000000000100a20d	int3
000000000100a20e	int3
000000000100a20f	int3
runtime.nextSample:
000000000100a210	movq	%gs:0x30, %rcx
000000000100a219	cmpq	0x10(%rcx), %rsp
000000000100a21d	jbe	0x100a24f
000000000100a21f	subq	$0x18, %rsp
000000000100a223	movq	%rbp, 0x10(%rsp)
000000000100a228	leaq	0x10(%rsp), %rbp
000000000100a22d	movq	runtime.MemProfileRate(%rip), %rax
000000000100a234	movq	%rax, (%rsp)
000000000100a238	callq	runtime.fastexprand
000000000100a23d	movl	0x8(%rsp), %eax
000000000100a241	movl	%eax, 0x20(%rsp)
000000000100a245	movq	0x10(%rsp), %rbp
000000000100a24a	addq	$0x18, %rsp
000000000100a24e	retq
000000000100a24f	callq	runtime.morestack_noctxt
000000000100a254	jmp	runtime.nextSample
000000000100a256	int3
000000000100a257	int3
000000000100a258	int3
000000000100a259	int3
000000000100a25a	int3
000000000100a25b	int3
000000000100a25c	int3
000000000100a25d	int3
000000000100a25e	int3
000000000100a25f	int3
runtime.fastexprand:
000000000100a260	subq	$0x8, %rsp
000000000100a264	movq	%rbp, (%rsp)
000000000100a268	leaq	(%rsp), %rbp
000000000100a26c	movq	0x10(%rsp), %rax
000000000100a271	cmpq	$0x7000000, %rax
000000000100a277	jle	0x100a3b9
000000000100a27d	movl	$0x7000000, %eax
000000000100a282	movq	%gs:0x30, %rcx
000000000100a28b	movq	0x30(%rcx), %rcx
000000000100a28f	movl	0x11c(%rcx), %edx
000000000100a295	movl	0x120(%rcx), %ebx
000000000100a29b	movl	%ebx, 0x11c(%rcx)
000000000100a2a1	movl	%edx, %esi
000000000100a2a3	shll	$0x11, %edx
000000000100a2a6	xorl	%esi, %edx
000000000100a2a8	movl	%ebx, %esi
000000000100a2aa	xorl	%edx, %ebx
000000000100a2ac	shrl	$0x7, %edx
000000000100a2af	xorl	%ebx, %edx
000000000100a2b1	movl	%esi, %ebx
000000000100a2b3	shrl	$0x10, %esi
000000000100a2b6	xorl	%edx, %esi
000000000100a2b8	movl	%esi, 0x120(%rcx)
000000000100a2be	leal	(%rsi,%rbx), %ecx
000000000100a2c1	andl	$0x3ffffff, %ecx
000000000100a2c7	incl	%ecx
000000000100a2c9	xorps	%xmm0, %xmm0
000000000100a2cc	cvtsi2sdq	%rcx, %xmm0
000000000100a2d1	movq	%xmm0, %rcx
000000000100a2d6	movq	%rcx, %rdx
000000000100a2d9	shrq	$0x2f, %rcx
000000000100a2dd	andq	$0x1f, %rcx
000000000100a2e1	leaq	0x1(%rcx), %rbx
000000000100a2e5	cmpq	$0x21, %rbx
000000000100a2e9	jae	0x100a3d3
000000000100a2ef	movq	%rdx, %rbx
000000000100a2f2	shrq	$0x34, %rdx
000000000100a2f6	andq	$0x7ff, %rdx
000000000100a2fd	addq	$-0x3ff, %rdx
000000000100a304	shrq	$0x1b, %rbx
000000000100a308	movq	%rbx, %rsi
000000000100a30b	andq	$0xfffff, %rbx
000000000100a312	leaq	runtime.fastlog2Table(%rip), %rdi
000000000100a319	movsd	(%rdi,%rcx,8), %xmm0
000000000100a31e	movsd	0x8(%rdi,%rcx,8), %xmm1
000000000100a324	xorps	%xmm2, %xmm2
000000000100a327	cvtsi2sdq	%rdx, %xmm2
000000000100a32c	addsd	%xmm0, %xmm2
000000000100a330	subsd	%xmm0, %xmm1
000000000100a334	testq	$0xfffff, %rsi
000000000100a33b	jl	0x100a3a1
000000000100a33d	xorps	%xmm0, %xmm0
000000000100a340	cvtsi2sdq	%rbx, %xmm0
000000000100a345	mulsd	%xmm1, %xmm0
000000000100a349	movsd	($f64.3eb0000000000000)(%rip), %xmm1
000000000100a351	mulsd	%xmm0, %xmm1
000000000100a355	addsd	%xmm1, %xmm2
000000000100a359	movsd	($f64.403a000000000000)(%rip), %xmm0
000000000100a361	subsd	%xmm0, %xmm2
000000000100a365	xorps	%xmm0, %xmm0
000000000100a368	ucomisd	%xmm0, %xmm2
000000000100a36c	jbe	0x100a39c
000000000100a36e	xorps	%xmm0, %xmm0
000000000100a371	xorps	%xmm1, %xmm1
000000000100a374	cvtsi2sdq	%rax, %xmm1
000000000100a379	movsd	($f64.bfe62e42fefa39ef)(%rip), %xmm2
000000000100a381	mulsd	%xmm1, %xmm2
000000000100a385	mulsd	%xmm2, %xmm0
000000000100a389	cvttsd2si	%xmm0, %eax
000000000100a38d	incl	%eax
000000000100a38f	movl	%eax, 0x18(%rsp)
000000000100a393	movq	(%rsp), %rbp
000000000100a397	addq	$0x8, %rsp
000000000100a39b	retq
000000000100a39c	movups	%xmm2, %xmm0
000000000100a39f	jmp	0x100a371
000000000100a3a1	shrq	%rbx
000000000100a3a4	andq	$0x1, %rsi
000000000100a3a8	orq	%rsi, %rbx
000000000100a3ab	xorps	%xmm0, %xmm0
000000000100a3ae	cvtsi2sdq	%rbx, %xmm0
000000000100a3b3	addsd	%xmm0, %xmm0
000000000100a3b7	jmp	0x100a345
000000000100a3b9	testq	%rax, %rax
000000000100a3bc	jne	0x100a282
000000000100a3c2	movl	$0x0, 0x18(%rsp)
000000000100a3ca	movq	(%rsp), %rbp
000000000100a3ce	addq	$0x8, %rsp
000000000100a3d2	retq
000000000100a3d3	callq	runtime.panicindex
000000000100a3d8	ud2
000000000100a3da	int3
000000000100a3db	int3
000000000100a3dc	int3
000000000100a3dd	int3
000000000100a3de	int3
000000000100a3df	int3
runtime.persistentalloc:
000000000100a3e0	movq	%gs:0x30, %rcx
000000000100a3e9	cmpq	0x10(%rcx), %rsp
000000000100a3ed	jbe	0x100a476
000000000100a3f3	subq	$0x40, %rsp
000000000100a3f7	movq	%rbp, 0x38(%rsp)
000000000100a3fc	leaq	0x38(%rsp), %rbp
000000000100a401	movq	$0x0, 0x8(%rsp)
000000000100a40a	movq	$0x0, 0x10(%rsp)
000000000100a413	xorps	%xmm0, %xmm0
000000000100a416	movups	%xmm0, 0x18(%rsp)
000000000100a41b	movups	%xmm0, 0x28(%rsp)
000000000100a420	leaq	runtime.persistentalloc.func1(%rip), %rax
000000000100a427	movq	%rax, 0x10(%rsp)
000000000100a42c	movq	0x48(%rsp), %rax
000000000100a431	movq	%rax, 0x18(%rsp)
000000000100a436	movq	0x50(%rsp), %rax
000000000100a43b	movq	%rax, 0x20(%rsp)
000000000100a440	movq	0x58(%rsp), %rax
000000000100a445	movq	%rax, 0x28(%rsp)
000000000100a44a	leaq	0x8(%rsp), %rax
000000000100a44f	movq	%rax, 0x30(%rsp)
000000000100a454	leaq	0x10(%rsp), %rax
000000000100a459	movq	%rax, (%rsp)
000000000100a45d	callq	runtime.systemstack
000000000100a462	movq	0x8(%rsp), %rax
000000000100a467	movq	%rax, 0x60(%rsp)
000000000100a46c	movq	0x38(%rsp), %rbp
000000000100a471	addq	$0x40, %rsp
000000000100a475	retq
000000000100a476	callq	runtime.morestack_noctxt
000000000100a47b	jmp	runtime.persistentalloc
runtime.persistentalloc1:
000000000100a480	movq	%gs:0x30, %rcx
000000000100a489	cmpq	0x18(%rcx), %rsp
000000000100a48d	jbe	0x100a753
000000000100a493	subq	$0x40, %rsp
000000000100a497	movq	%rbp, 0x38(%rsp)
000000000100a49c	leaq	0x38(%rsp), %rbp
000000000100a4a1	movq	0x48(%rsp), %rax
000000000100a4a6	testq	%rax, %rax
000000000100a4a9	je	0x100a738
000000000100a4af	movq	0x50(%rsp), %rcx
000000000100a4b4	testq	%rcx, %rcx
000000000100a4b7	je	0x100a6dd
000000000100a4bd	leaq	-0x1(%rcx), %rdx
000000000100a4c1	testq	%rdx, %rcx
000000000100a4c4	jne	0x100a71d
000000000100a4ca	cmpq	$0x2000, %rcx
000000000100a4d1	ja	0x100a702
000000000100a4d7	cmpq	$0x10000, %rax
000000000100a4dd	jae	0x100a6b6
000000000100a4e3	movq	%rcx, 0x18(%rsp)
000000000100a4e8	movq	%gs:0x30, %rdx
000000000100a4f1	movq	0x30(%rdx), %rbx
000000000100a4f5	incl	0x100(%rbx)
000000000100a4fb	movq	0x30(%rdx), %rdx
000000000100a4ff	movq	%rdx, 0x28(%rsp)
000000000100a504	testq	%rdx, %rdx
000000000100a507	je	0x100a68b
000000000100a50d	movq	0xd0(%rdx), %rbx
000000000100a514	testq	%rbx, %rbx
000000000100a517	je	0x100a68b
000000000100a51d	testb	%al, (%rbx)
000000000100a51f	addq	$0x1238, %rbx
000000000100a526	movq	%rbx, 0x20(%rsp)
000000000100a52b	movq	0x8(%rbx), %rsi
000000000100a52f	leaq	-0x1(%rcx,%rsi), %rsi
000000000100a534	decq	%rcx
000000000100a537	notq	%rcx
000000000100a53a	andq	%rsi, %rcx
000000000100a53d	movq	%rcx, 0x8(%rbx)
000000000100a541	addq	%rax, %rcx
000000000100a544	cmpq	$0x40000, %rcx
000000000100a54b	jbe	0x100a679
000000000100a551	movq	$0x40000, (%rsp)
000000000100a559	leaq	0xcb3c0(%rip), %rax
000000000100a560	movq	%rax, 0x8(%rsp)
000000000100a565	callq	runtime.sysAlloc
000000000100a56a	movq	0x10(%rsp), %rax
000000000100a56f	movq	0x20(%rsp), %rcx
000000000100a574	movq	%rax, (%rcx)
000000000100a577	testq	%rax, %rax
000000000100a57a	je	0x100a657
000000000100a580	movq	$0x0, 0x8(%rcx)
000000000100a588	movq	(%rcx), %rax
000000000100a58b	movq	0x8(%rcx), %rdx
000000000100a58f	movq	0x48(%rsp), %rbx
000000000100a594	leaq	(%rbx,%rdx), %rsi
000000000100a598	movq	%rsi, 0x8(%rcx)
000000000100a59c	movq	%gs:0x30, %rsi
000000000100a5a5	movq	0x28(%rsp), %rdi
000000000100a5aa	movl	0x100(%rdi), %r8d
000000000100a5b1	leal	-0x1(%r8), %r9d
000000000100a5b5	movl	%r9d, 0x100(%rdi)
000000000100a5bc	addq	%rdx, %rax
000000000100a5bf	cmpl	$0x1, %r8d
000000000100a5c3	jne	0x100a5db
000000000100a5c5	testb	%al, (%rsi)
000000000100a5c7	leaq	0xb1(%rsi), %rdx
000000000100a5ce	cmpb	$0x0, (%rdx)
000000000100a5d1	je	0x100a5db
000000000100a5d3	movq	$-0x522, 0x10(%rsi)
000000000100a5db	movq	%rax, 0x30(%rsp)
000000000100a5e0	leaq	0xae2f1(%rip), %rdx
000000000100a5e7	cmpq	%rdx, %rcx
000000000100a5ea	je	0x100a63b
000000000100a5ec	movq	0x58(%rsp), %rcx
000000000100a5f1	leaq	0xcb328(%rip), %rdx
000000000100a5f8	cmpq	%rdx, %rcx
000000000100a5fb	jne	0x100a60c
000000000100a5fd	movq	%rax, 0x60(%rsp)
000000000100a602	movq	0x38(%rsp), %rbp
000000000100a607	addq	$0x40, %rsp
000000000100a60b	retq
000000000100a60c	movq	%rcx, (%rsp)
000000000100a610	movq	%rbx, 0x8(%rsp)
000000000100a615	callq	runtime.mSysStatInc
000000000100a61a	leaq	0xcb2ff(%rip), %rax
000000000100a621	movq	%rax, (%rsp)
000000000100a625	movq	0x48(%rsp), %rax
000000000100a62a	movq	%rax, 0x8(%rsp)
000000000100a62f	callq	runtime.mSysStatDec
000000000100a634	movq	0x30(%rsp), %rax
000000000100a639	jmp	0x100a5fd
000000000100a63b	leaq	runtime.globalAlloc(%rip), %rax
000000000100a642	movq	%rax, (%rsp)
000000000100a646	callq	runtime.unlock
000000000100a64b	movq	0x30(%rsp), %rax
000000000100a650	movq	0x48(%rsp), %rbx
000000000100a655	jmp	0x100a5ec
000000000100a657	leaq	0xae27a(%rip), %rax
000000000100a65e	cmpq	%rax, %rcx
000000000100a661	jne	0x100a6e7
000000000100a667	leaq	runtime.globalAlloc(%rip), %rax
000000000100a66e	movq	%rax, (%rsp)
000000000100a672	callq	runtime.unlock
000000000100a677	jmp	0x100a6e7
000000000100a679	cmpq	$0x0, (%rbx)
000000000100a67d	je	0x100a551
000000000100a683	movq	%rbx, %rcx
000000000100a686	jmp	0x100a588
000000000100a68b	leaq	runtime.globalAlloc(%rip), %rax
000000000100a692	movq	%rax, (%rsp)
000000000100a696	callq	runtime.lock
000000000100a69b	movq	0x48(%rsp), %rax
000000000100a6a0	movq	0x18(%rsp), %rcx
000000000100a6a5	movq	0x28(%rsp), %rdx
000000000100a6aa	leaq	0xae227(%rip), %rbx
000000000100a6b1	jmp	0x100a526
000000000100a6b6	movq	%rax, (%rsp)
000000000100a6ba	movq	0x58(%rsp), %rax
000000000100a6bf	movq	%rax, 0x8(%rsp)
000000000100a6c4	callq	runtime.sysAlloc
000000000100a6c9	movq	0x10(%rsp), %rax
000000000100a6ce	movq	%rax, 0x60(%rsp)
000000000100a6d3	movq	0x38(%rsp), %rbp
000000000100a6d8	addq	$0x40, %rsp
000000000100a6dc	retq
000000000100a6dd	movl	$0x8, %ecx
000000000100a6e2	jmp	0x100a4d7
000000000100a6e7	leaq	0x62e23(%rip), %rax
000000000100a6ee	movq	%rax, (%rsp)
000000000100a6f2	movq	$0x1f, 0x8(%rsp)
000000000100a6fb	callq	runtime.throw
000000000100a700	ud2
000000000100a702	leaq	0x63456(%rip), %rax
000000000100a709	movq	%rax, (%rsp)
000000000100a70d	movq	$0x23, 0x8(%rsp)
000000000100a716	callq	runtime.throw
000000000100a71b	ud2
000000000100a71d	leaq	0x63bb5(%rip), %rax
000000000100a724	movq	%rax, (%rsp)
000000000100a728	movq	$0x2a, 0x8(%rsp)
000000000100a731	callq	runtime.throw
000000000100a736	ud2
000000000100a738	leaq	0x6226b(%rip), %rax
000000000100a73f	movq	%rax, (%rsp)
000000000100a743	movq	$0x1a, 0x8(%rsp)
000000000100a74c	callq	runtime.throw
000000000100a751	ud2
000000000100a753	callq	runtime.morestackc
000000000100a758	jmp	runtime.persistentalloc1
000000000100a75d	int3
000000000100a75e	int3
000000000100a75f	int3
runtime.(*linearAlloc).alloc:
000000000100a760	movq	%gs:0x30, %rcx
000000000100a769	cmpq	0x10(%rcx), %rsp
000000000100a76d	jbe	0x100a82d
000000000100a773	subq	$0x30, %rsp
000000000100a777	movq	%rbp, 0x28(%rsp)
000000000100a77c	leaq	0x28(%rsp), %rbp
000000000100a781	movq	0x38(%rsp), %rax
000000000100a786	movq	(%rax), %rcx
000000000100a789	movq	0x48(%rsp), %rdx
000000000100a78e	leaq	-0x1(%rdx,%rcx), %rcx
000000000100a793	decq	%rdx
000000000100a796	notq	%rdx
000000000100a799	andq	%rcx, %rdx
000000000100a79c	movq	0x40(%rsp), %rcx
000000000100a7a1	addq	%rdx, %rcx
000000000100a7a4	movq	0x10(%rax), %rbx
000000000100a7a8	cmpq	%rbx, %rcx
000000000100a7ab	ja	0x100a81a
000000000100a7ad	movq	%rcx, (%rax)
000000000100a7b0	movq	runtime.physPageSize(%rip), %rbx
000000000100a7b7	movq	0x8(%rax), %rsi
000000000100a7bb	leaq	-0x2(%rcx,%rbx), %rcx
000000000100a7c0	decq	%rbx
000000000100a7c3	notq	%rbx
000000000100a7c6	andq	%rcx, %rbx
000000000100a7c9	cmpq	%rsi, %rbx
000000000100a7cc	ja	0x100a7dd
000000000100a7ce	movq	%rdx, 0x58(%rsp)
000000000100a7d3	movq	0x28(%rsp), %rbp
000000000100a7d8	addq	$0x30, %rsp
000000000100a7dc	retq
000000000100a7dd	movq	%rdx, 0x20(%rsp)
000000000100a7e2	movq	%rbx, 0x18(%rsp)
000000000100a7e7	movq	%rsi, %rax
000000000100a7ea	subq	%rax, %rbx
000000000100a7ed	movq	%rbx, 0x8(%rsp)
000000000100a7f2	movq	%rsi, (%rsp)
000000000100a7f6	movq	0x50(%rsp), %rax
000000000100a7fb	movq	%rax, 0x10(%rsp)
000000000100a800	callq	runtime.sysMap
000000000100a805	movq	0x18(%rsp), %rax
000000000100a80a	movq	0x38(%rsp), %rcx
000000000100a80f	movq	%rax, 0x8(%rcx)
000000000100a813	movq	0x20(%rsp), %rdx
000000000100a818	jmp	0x100a7ce
000000000100a81a	movq	$0x0, 0x58(%rsp)
000000000100a823	movq	0x28(%rsp), %rbp
000000000100a828	addq	$0x30, %rsp
000000000100a82c	retq
000000000100a82d	callq	runtime.morestack_noctxt
000000000100a832	jmp	"runtime.(*linearAlloc).alloc"
000000000100a837	int3
000000000100a838	int3
000000000100a839	int3
000000000100a83a	int3
000000000100a83b	int3
000000000100a83c	int3
000000000100a83d	int3
000000000100a83e	int3
000000000100a83f	int3
runtime.(*hmap).incrnoverflow:
000000000100a840	movq	0x8(%rsp), %rax
000000000100a845	movzbl	0x9(%rax), %edx
000000000100a849	cmpb	$0x10, %dl
000000000100a84c	jb	0x100a8b7
000000000100a84e	movq	%gs:0x30, %rbx
000000000100a857	movq	0x30(%rbx), %rbx
000000000100a85b	movl	0x11c(%rbx), %esi
000000000100a861	movl	0x120(%rbx), %edi
000000000100a867	movl	%edi, 0x11c(%rbx)
000000000100a86d	movl	%esi, %r8d
000000000100a870	shll	$0x11, %esi
000000000100a873	xorl	%r8d, %esi
000000000100a876	movl	%edi, %r8d
000000000100a879	xorl	%esi, %edi
000000000100a87b	shrl	$0x7, %esi
000000000100a87e	xorl	%edi, %esi
000000000100a880	movl	%r8d, %edi
000000000100a883	shrl	$0x10, %r8d
000000000100a887	xorl	%esi, %r8d
000000000100a88a	movl	%r8d, 0x120(%rbx)
000000000100a891	leal	-0xf(%rdx), %ecx
000000000100a894	movl	$0x1, %edx
000000000100a899	shll	%cl, %edx
000000000100a89b	cmpb	$0x20, %cl
000000000100a89e	sbbl	%ebx, %ebx
000000000100a8a0	andl	%ebx, %edx
000000000100a8a2	decl	%edx
000000000100a8a4	leal	(%r8,%rdi), %ebx
000000000100a8a8	testl	%ebx, %edx
000000000100a8aa	jne	0x100a8b6
000000000100a8ac	movzwl	0xa(%rax), %ecx
000000000100a8b0	incl	%ecx
000000000100a8b2	movw	%cx, 0xa(%rax)
000000000100a8b6	retq
000000000100a8b7	movzwl	0xa(%rax), %ecx
000000000100a8bb	incl	%ecx
000000000100a8bd	movw	%cx, 0xa(%rax)
000000000100a8c1	retq
000000000100a8c2	int3
000000000100a8c3	int3
000000000100a8c4	int3
000000000100a8c5	int3
000000000100a8c6	int3
000000000100a8c7	int3
000000000100a8c8	int3
000000000100a8c9	int3
000000000100a8ca	int3
000000000100a8cb	int3
000000000100a8cc	int3
000000000100a8cd	int3
000000000100a8ce	int3
000000000100a8cf	int3
runtime.(*hmap).newoverflow:
000000000100a8d0	movq	%gs:0x30, %rcx
000000000100a8d9	cmpq	0x10(%rcx), %rsp
000000000100a8dd	jbe	0x100ab7d
000000000100a8e3	subq	$0x58, %rsp
000000000100a8e7	movq	%rbp, 0x50(%rsp)
000000000100a8ec	leaq	0x50(%rsp), %rbp
000000000100a8f1	movq	0x60(%rsp), %rcx
000000000100a8f6	movq	0x28(%rcx), %rdx
000000000100a8fa	testq	%rdx, %rdx
000000000100a8fd	je	0x100ab5c
000000000100a903	movq	0x10(%rdx), %rbx
000000000100a907	testq	%rbx, %rbx
000000000100a90a	je	0x100ab5c
000000000100a910	movq	0x68(%rsp), %rsi
000000000100a915	movzwl	0x4c(%rsi), %r8d
000000000100a91a	movq	%rbx, %r9
000000000100a91d	leaq	-0x8(%r8,%rbx), %rdi
000000000100a922	testb	%al, (%rsi)
000000000100a924	cmpq	$0x0, (%rdi)
000000000100a928	je	0x100ab38
000000000100a92e	cmpl	$0x0, 0xca2fb(%rip)
000000000100a935	jne	0x100ab2c
000000000100a93b	movq	$0x0, (%rdi)
000000000100a942	movq	0x28(%rcx), %rdx
000000000100a946	testb	%al, (%rdx)
000000000100a948	cmpl	$0x0, 0xca2e1(%rip)
000000000100a94f	jne	0x100ab1c
000000000100a955	movq	$0x0, 0x10(%rdx)
000000000100a95d	movq	%r9, 0x40(%rsp)
000000000100a962	movq	%rcx, (%rsp)
000000000100a966	callq	"runtime.(*hmap).incrnoverflow"
000000000100a96b	movq	0x68(%rsp), %rax
000000000100a970	movq	0x40(%rax), %rcx
000000000100a974	movzbl	0x17(%rcx), %ecx
000000000100a978	testb	$-0x80, %cl
000000000100a97b	je	0x100ab12
000000000100a981	movq	0x60(%rsp), %rcx
000000000100a986	cmpq	$0x0, 0x28(%rcx)
000000000100a98b	je	0x100aad1
000000000100a991	movq	0x28(%rcx), %rdx
000000000100a995	cmpq	$0x0, (%rdx)
000000000100a999	je	0x100aa88
000000000100a99f	movq	0x28(%rcx), %rcx
000000000100a9a3	movq	(%rcx), %rdx
000000000100a9a6	testb	%al, (%rcx)
000000000100a9a8	movq	0x8(%rdx), %rcx
000000000100a9ac	movq	(%rdx), %rbx
000000000100a9af	leaq	0x1(%rcx), %rsi
000000000100a9b3	movq	0x10(%rdx), %r8
000000000100a9b7	cmpq	%r8, %rsi
000000000100a9ba	jg	0x100aa24
000000000100a9bc	leaq	0x1(%rcx), %rsi
000000000100a9c0	movq	%rsi, 0x8(%rdx)
000000000100a9c4	leaq	(%rbx,%rcx,8), %rdi
000000000100a9c8	cmpl	$0x0, 0xca261(%rip)
000000000100a9cf	jne	0x100aa0f
000000000100a9d1	movq	0x40(%rsp), %rdx
000000000100a9d6	movq	%rdx, (%rbx,%rcx,8)
000000000100a9da	movzwl	0x4c(%rax), %ecx
000000000100a9de	movq	0x70(%rsp), %rbx
000000000100a9e3	leaq	-0x8(%rbx,%rcx), %rdi
000000000100a9e8	testb	%al, (%rdi)
000000000100a9ea	cmpl	$0x0, 0xca23f(%rip)
000000000100a9f1	jne	0x100aa05
000000000100a9f3	movq	%rdx, (%rdi)
000000000100a9f6	movq	%rdx, 0x78(%rsp)
000000000100a9fb	movq	0x50(%rsp), %rbp
000000000100aa00	addq	$0x58, %rsp
000000000100aa04	retq
000000000100aa05	movq	%rdx, %rax
000000000100aa08	callq	runtime.gcWriteBarrier
000000000100aa0d	jmp	0x100a9f6
000000000100aa0f	movq	%rax, %rcx
000000000100aa12	movq	0x40(%rsp), %rax
000000000100aa17	callq	runtime.gcWriteBarrier
000000000100aa1c	movq	%rax, %rdx
000000000100aa1f	movq	%rcx, %rax
000000000100aa22	jmp	0x100a9da
000000000100aa24	movq	%rdx, 0x48(%rsp)
000000000100aa29	leaq	0x52490(%rip), %rax
000000000100aa30	movq	%rax, (%rsp)
000000000100aa34	movq	%rbx, 0x8(%rsp)
000000000100aa39	movq	%rcx, 0x10(%rsp)
000000000100aa3e	movq	%r8, 0x18(%rsp)
000000000100aa43	movq	%rsi, 0x20(%rsp)
000000000100aa48	callq	runtime.growslice
000000000100aa4d	movq	0x28(%rsp), %rax
000000000100aa52	movq	0x30(%rsp), %rcx
000000000100aa57	movq	0x38(%rsp), %rdx
000000000100aa5c	movq	0x48(%rsp), %rdi
000000000100aa61	movq	%rdx, 0x10(%rdi)
000000000100aa65	cmpl	$0x0, 0xca1c4(%rip)
000000000100aa6c	jne	0x100aa81
000000000100aa6e	movq	%rax, (%rdi)
000000000100aa71	movq	%rdi, %rdx
000000000100aa74	movq	%rax, %rbx
000000000100aa77	movq	0x68(%rsp), %rax
000000000100aa7c	jmp	0x100a9bc
000000000100aa81	callq	runtime.gcWriteBarrier
000000000100aa86	jmp	0x100aa71
000000000100aa88	leaq	0x4be71(%rip), %rax
000000000100aa8f	movq	%rax, (%rsp)
000000000100aa93	callq	runtime.newobject
000000000100aa98	movq	0x60(%rsp), %rax
000000000100aa9d	movq	0x28(%rax), %rdi
000000000100aaa1	testb	%al, (%rdi)
000000000100aaa3	movq	0x8(%rsp), %rcx
000000000100aaa8	cmpl	$0x0, 0xca181(%rip)
000000000100aaaf	jne	0x100aac1
000000000100aab1	movq	%rcx, (%rdi)
000000000100aab4	movq	%rax, %rcx
000000000100aab7	movq	0x68(%rsp), %rax
000000000100aabc	jmp	0x100a99f
000000000100aac1	movq	%rax, %rdx
000000000100aac4	movq	%rcx, %rax
000000000100aac7	callq	runtime.gcWriteBarrier
000000000100aacc	movq	%rdx, %rax
000000000100aacf	jmp	0x100aab4
000000000100aad1	leaq	0x568a8(%rip), %rax
000000000100aad8	movq	%rax, (%rsp)
000000000100aadc	callq	runtime.newobject
000000000100aae1	movq	0x8(%rsp), %rax
000000000100aae6	cmpl	$0x0, 0xca143(%rip)
000000000100aaed	jne	0x100ab02
000000000100aaef	movq	0x60(%rsp), %rcx
000000000100aaf4	movq	%rax, 0x28(%rcx)
000000000100aaf8	movq	0x68(%rsp), %rax
000000000100aafd	jmp	0x100a991
000000000100ab02	movq	0x60(%rsp), %rcx
000000000100ab07	leaq	0x28(%rcx), %rdi
000000000100ab0b	callq	runtime.gcWriteBarrier
000000000100ab10	jmp	0x100aaf8
000000000100ab12	movq	0x40(%rsp), %rdx
000000000100ab17	jmp	0x100a9da
000000000100ab1c	leaq	0x10(%rdx), %rdi
000000000100ab20	xorl	%eax, %eax
000000000100ab22	callq	runtime.gcWriteBarrier
000000000100ab27	jmp	0x100a95d
000000000100ab2c	xorl	%eax, %eax
000000000100ab2e	callq	runtime.gcWriteBarrier
000000000100ab33	jmp	0x100a942
000000000100ab38	leaq	(%r9,%r8), %rax
000000000100ab3c	cmpl	$0x0, 0xca0ed(%rip)
000000000100ab43	jne	0x100ab4e
000000000100ab45	movq	%rax, 0x10(%rdx)
000000000100ab49	jmp	0x100a95d
000000000100ab4e	leaq	0x10(%rdx), %rdi
000000000100ab52	callq	runtime.gcWriteBarrier
000000000100ab57	jmp	0x100a95d
000000000100ab5c	movq	0x68(%rsp), %rax
000000000100ab61	movq	0x40(%rax), %rcx
000000000100ab65	movq	%rcx, (%rsp)
000000000100ab69	callq	runtime.newobject
000000000100ab6e	movq	0x8(%rsp), %r9
000000000100ab73	movq	0x60(%rsp), %rcx
000000000100ab78	jmp	0x100a95d
000000000100ab7d	callq	runtime.morestack_noctxt
000000000100ab82	jmp	"runtime.(*hmap).newoverflow"
000000000100ab87	int3
000000000100ab88	int3
000000000100ab89	int3
000000000100ab8a	int3
000000000100ab8b	int3
000000000100ab8c	int3
000000000100ab8d	int3
000000000100ab8e	int3
000000000100ab8f	int3
runtime.makemap:
000000000100ab90	movq	%gs:0x30, %rcx
000000000100ab99	cmpq	0x10(%rcx), %rsp
000000000100ab9d	jbe	0x100ad78
000000000100aba3	subq	$0x40, %rsp
000000000100aba7	movq	%rbp, 0x38(%rsp)
000000000100abac	leaq	0x38(%rsp), %rbp
000000000100abb1	movq	0x50(%rsp), %rdx
000000000100abb6	testq	%rdx, %rdx
000000000100abb9	jge	0x100ad33
000000000100abbf	xorl	%eax, %eax
000000000100abc1	movq	0x58(%rsp), %rdx
000000000100abc6	testq	%rdx, %rdx
000000000100abc9	je	0x100ad0f
000000000100abcf	movq	%gs:0x30, %rbx
000000000100abd8	movq	0x30(%rbx), %rbx
000000000100abdc	movl	0x11c(%rbx), %esi
000000000100abe2	movl	0x120(%rbx), %edi
000000000100abe8	movl	%edi, 0x11c(%rbx)
000000000100abee	movl	%esi, %r8d
000000000100abf1	shll	$0x11, %esi
000000000100abf4	xorl	%r8d, %esi
000000000100abf7	movl	%edi, %r8d
000000000100abfa	xorl	%esi, %edi
000000000100abfc	shrl	$0x7, %esi
000000000100abff	xorl	%edi, %esi
000000000100ac01	movl	%r8d, %edi
000000000100ac04	shrl	$0x10, %r8d
000000000100ac08	xorl	%esi, %r8d
000000000100ac0b	movl	%r8d, 0x120(%rbx)
000000000100ac12	leal	(%rdi,%r8), %ebx
000000000100ac16	movl	%ebx, 0xc(%rdx)
000000000100ac19	xorl	%ecx, %ecx
000000000100ac1b	jmp	0x100ac1f
000000000100ac1d	incl	%ecx
000000000100ac1f	cmpq	$0x8, %rax
000000000100ac23	jle	0x100ad08
000000000100ac29	movl	$0x1, %ebx
000000000100ac2e	shlq	%cl, %rbx
000000000100ac31	shrq	%rbx
000000000100ac34	leaq	(%rbx,%rbx,2), %rsi
000000000100ac38	leaq	(%rbx,%rsi,4), %rbx
000000000100ac3c	cmpq	%rbx, %rax
000000000100ac3f	seta	%bl
000000000100ac42	testb	%bl, %bl
000000000100ac44	jne	0x100ac1d
000000000100ac46	movb	%cl, 0x9(%rdx)
000000000100ac49	testb	%cl, %cl
000000000100ac4b	jne	0x100ac5c
000000000100ac4d	movq	%rdx, 0x60(%rsp)
000000000100ac52	movq	0x38(%rsp), %rbp
000000000100ac57	addq	$0x40, %rsp
000000000100ac5b	retq
000000000100ac5c	movq	%rdx, 0x58(%rsp)
000000000100ac61	movb	%cl, 0x8(%rsp)
000000000100ac65	movq	0x48(%rsp), %rax
000000000100ac6a	movq	%rax, (%rsp)
000000000100ac6e	movq	$0x0, 0x10(%rsp)
000000000100ac77	callq	runtime.makeBucketArray
000000000100ac7c	movq	0x18(%rsp), %rax
000000000100ac81	movq	0x20(%rsp), %rcx
000000000100ac86	cmpl	$0x0, 0xc9fa3(%rip)
000000000100ac8d	jne	0x100acf8
000000000100ac8f	movq	0x58(%rsp), %rdx
000000000100ac94	movq	%rax, 0x10(%rdx)
000000000100ac98	testq	%rcx, %rcx
000000000100ac9b	je	0x100ac4d
000000000100ac9d	movq	%rcx, 0x30(%rsp)
000000000100aca2	leaq	0x566d7(%rip), %rax
000000000100aca9	movq	%rax, (%rsp)
000000000100acad	callq	runtime.newobject
000000000100acb2	movq	0x8(%rsp), %rax
000000000100acb7	cmpl	$0x0, 0xc9f72(%rip)
000000000100acbe	jne	0x100acda
000000000100acc0	movq	0x58(%rsp), %rcx
000000000100acc5	movq	%rax, 0x28(%rcx)
000000000100acc9	movq	0x30(%rsp), %rdx
000000000100acce	movq	%rdx, 0x10(%rax)
000000000100acd2	movq	%rcx, %rdx
000000000100acd5	jmp	0x100ac4d
000000000100acda	movq	0x58(%rsp), %rcx
000000000100acdf	leaq	0x28(%rcx), %rdi
000000000100ace3	callq	runtime.gcWriteBarrier
000000000100ace8	leaq	0x10(%rax), %rdi
000000000100acec	movq	0x30(%rsp), %rax
000000000100acf1	callq	runtime.gcWriteBarrier
000000000100acf6	jmp	0x100acd2
000000000100acf8	movq	0x58(%rsp), %rdx
000000000100acfd	leaq	0x10(%rdx), %rdi
000000000100ad01	callq	runtime.gcWriteBarrier
000000000100ad06	jmp	0x100ac98
000000000100ad08	xorl	%ebx, %ebx
000000000100ad0a	jmp	0x100ac42
000000000100ad0f	movq	%rax, 0x28(%rsp)
000000000100ad14	leaq	0x5b3a5(%rip), %rax
000000000100ad1b	movq	%rax, (%rsp)
000000000100ad1f	callq	runtime.newobject
000000000100ad24	movq	0x8(%rsp), %rdx
000000000100ad29	movq	0x28(%rsp), %rax
000000000100ad2e	jmp	0x100abcf
000000000100ad33	movq	0x48(%rsp), %rbx
000000000100ad38	movq	0x40(%rbx), %rsi
000000000100ad3c	movq	(%rsi), %rsi
000000000100ad3f	cmpq	$0x21, %rsi
000000000100ad43	jae	0x100ad61
000000000100ad45	leaq	runtime.maxElems(%rip), %rax
000000000100ad4c	movq	(%rax,%rsi,8), %rax
000000000100ad50	cmpq	%rax, %rdx
000000000100ad53	jg	0x100abbf
000000000100ad59	movq	%rdx, %rax
000000000100ad5c	jmp	0x100abc1
000000000100ad61	movabsq	$0x1000000000000, %rax
000000000100ad6b	movq	%rdx, %rcx
000000000100ad6e	xorl	%edx, %edx
000000000100ad70	divq	%rsi
000000000100ad73	movq	%rcx, %rdx
000000000100ad76	jmp	0x100ad50
000000000100ad78	callq	runtime.morestack_noctxt
000000000100ad7d	jmp	runtime.makemap
000000000100ad82	int3
000000000100ad83	int3
000000000100ad84	int3
000000000100ad85	int3
000000000100ad86	int3
000000000100ad87	int3
000000000100ad88	int3
000000000100ad89	int3
000000000100ad8a	int3
000000000100ad8b	int3
000000000100ad8c	int3
000000000100ad8d	int3
000000000100ad8e	int3
000000000100ad8f	int3
runtime.makeBucketArray:
000000000100ad90	movq	%gs:0x30, %rcx
000000000100ad99	cmpq	0x10(%rcx), %rsp
000000000100ad9d	jbe	0x100afac
000000000100ada3	subq	$0x30, %rsp
000000000100ada7	movq	%rbp, 0x28(%rsp)
000000000100adac	leaq	0x28(%rsp), %rbp
000000000100adb1	movzbl	0x40(%rsp), %ecx
000000000100adb6	movl	$0x1, %edx
000000000100adbb	shlq	%cl, %rdx
000000000100adbe	cmpb	$0x4, %cl
000000000100adc1	jb	0x100af87
000000000100adc7	movq	0x38(%rsp), %rbx
000000000100adcc	movq	0x40(%rbx), %rsi
000000000100add0	addl	$-0x4, %ecx
000000000100add3	movl	$0x1, %edi
000000000100add8	shlq	%cl, %rdi
000000000100addb	addq	%rdx, %rdi
000000000100adde	movq	(%rsi), %rsi
000000000100ade1	movq	%rdi, %r8
000000000100ade4	imulq	%rsi, %rdi
000000000100ade8	cmpq	$0x8000, %rdi
000000000100adef	jae	0x100af60
000000000100adf5	cmpq	$0x3f8, %rdi
000000000100adfc	ja	0x100af29
000000000100ae02	leaq	0x7(%rdi), %rcx
000000000100ae06	shrq	$0x3, %rcx
000000000100ae0a	cmpq	$0x81, %rcx
000000000100ae11	jae	0x100afa5
000000000100ae17	leaq	runtime.size_to_class8(%rip), %r9
000000000100ae1e	movzbl	(%rcx,%r9), %ecx
000000000100ae23	cmpq	$0x43, %rcx
000000000100ae27	jae	0x100afa5
000000000100ae2d	leaq	runtime.class_to_size(%rip), %r9
000000000100ae34	movzwl	(%r9,%rcx,2), %ecx
000000000100ae39	cmpq	%rdi, %rcx
000000000100ae3c	je	0x100af1e
000000000100ae42	testq	%rsi, %rsi
000000000100ae45	je	0x100af97
000000000100ae4b	movq	%rcx, %rax
000000000100ae4e	movq	%rdx, %rcx
000000000100ae51	xorl	%edx, %edx
000000000100ae53	divq	%rsi
000000000100ae56	movq	%rcx, 0x20(%rsp)
000000000100ae5b	movq	%rax, 0x18(%rsp)
000000000100ae60	movq	0x48(%rsp), %rdx
000000000100ae65	testq	%rdx, %rdx
000000000100ae68	je	0x100af02
000000000100ae6e	movq	0x40(%rbx), %rsi
000000000100ae72	movq	(%rsi), %rdi
000000000100ae75	imulq	%rax, %rdi
000000000100ae79	movzbl	0x17(%rsi), %esi
000000000100ae7d	testb	$-0x80, %sil
000000000100ae81	jne	0x100aef2
000000000100ae83	movq	%rdx, (%rsp)
000000000100ae87	movq	%rdi, 0x8(%rsp)
000000000100ae8c	callq	runtime.memclrHasPointers
000000000100ae91	movq	0x48(%rsp), %rax
000000000100ae96	movq	0x18(%rsp), %rcx
000000000100ae9b	movq	0x20(%rsp), %rdx
000000000100aea0	cmpq	%rdx, %rcx
000000000100aea3	je	0x100aeee
000000000100aea5	movq	0x38(%rsp), %rbx
000000000100aeaa	movzwl	0x4c(%rbx), %ebx
000000000100aeae	decq	%rcx
000000000100aeb1	imulq	%rbx, %rcx
000000000100aeb5	addq	%rax, %rcx
000000000100aeb8	leaq	-0x8(%rcx,%rbx), %rdi
000000000100aebd	testb	%al, (%rdi)
000000000100aebf	imulq	%rdx, %rbx
000000000100aec3	leaq	(%rax,%rbx), %rcx
000000000100aec7	cmpl	$0x0, 0xc9d62(%rip)
000000000100aece	jne	0x100aee7
000000000100aed0	movq	%rax, (%rdi)
000000000100aed3	movq	%rax, 0x50(%rsp)
000000000100aed8	movq	%rcx, 0x58(%rsp)
000000000100aedd	movq	0x28(%rsp), %rbp
000000000100aee2	addq	$0x30, %rsp
000000000100aee6	retq
000000000100aee7	callq	runtime.gcWriteBarrier
000000000100aeec	jmp	0x100aed3
000000000100aeee	xorl	%ecx, %ecx
000000000100aef0	jmp	0x100aed3
000000000100aef2	movq	%rdx, (%rsp)
000000000100aef6	movq	%rdi, 0x8(%rsp)
000000000100aefb	callq	runtime.memclrNoHeapPointers
000000000100af00	jmp	0x100ae91
000000000100af02	movq	0x40(%rbx), %rcx
000000000100af06	movq	%rcx, (%rsp)
000000000100af0a	movq	%rax, 0x8(%rsp)
000000000100af0f	callq	runtime.newarray
000000000100af14	movq	0x10(%rsp), %rax
000000000100af19	jmp	0x100ae96
000000000100af1e	movq	%rdx, %rcx
000000000100af21	movq	%r8, %rax
000000000100af24	jmp	0x100ae56
000000000100af29	leaq	-0x381(%rdi), %rcx
000000000100af30	shrq	$0x7, %rcx
000000000100af34	cmpq	$0xf9, %rcx
000000000100af3b	jae	0x100af9e
000000000100af3d	leaq	runtime.size_to_class128(%rip), %r9
000000000100af44	movzbl	(%rcx,%r9), %ecx
000000000100af49	cmpq	$0x43, %rcx
000000000100af4d	jae	0x100af9e
000000000100af4f	leaq	runtime.class_to_size(%rip), %r9
000000000100af56	movzwl	(%r9,%rcx,2), %ecx
000000000100af5b	jmp	0x100ae39
000000000100af60	leaq	0x2000(%rdi), %rcx
000000000100af67	cmpq	%rdi, %rcx
000000000100af6a	jae	0x100af74
000000000100af6c	movq	%rdi, %rcx
000000000100af6f	jmp	0x100ae39
000000000100af74	leaq	0x1fff(%rdi), %rcx
000000000100af7b	andq	$-0x2000, %rcx
000000000100af82	jmp	0x100ae39
000000000100af87	movq	%rdx, %rcx
000000000100af8a	movq	0x38(%rsp), %rbx
000000000100af8f	movq	%rcx, %rax
000000000100af92	jmp	0x100ae56
000000000100af97	callq	runtime.panicdivide
000000000100af9c	ud2
000000000100af9e	callq	runtime.panicindex
000000000100afa3	ud2
000000000100afa5	callq	runtime.panicindex
000000000100afaa	ud2
000000000100afac	callq	runtime.morestack_noctxt
000000000100afb1	jmp	runtime.makeBucketArray
000000000100afb6	int3
000000000100afb7	int3
000000000100afb8	int3
000000000100afb9	int3
000000000100afba	int3
000000000100afbb	int3
000000000100afbc	int3
000000000100afbd	int3
000000000100afbe	int3
000000000100afbf	int3
runtime.mapaccess2:
000000000100afc0	movq	%gs:0x30, %rcx
000000000100afc9	cmpq	0x10(%rcx), %rsp
000000000100afcd	jbe	0x100b1e5
000000000100afd3	subq	$0x40, %rsp
000000000100afd7	movq	%rbp, 0x38(%rsp)
000000000100afdc	leaq	0x38(%rsp), %rbp
000000000100afe1	movq	0x50(%rsp), %rax
000000000100afe6	testq	%rax, %rax
000000000100afe9	je	0x100b1af
000000000100afef	cmpq	$0x0, (%rax)
000000000100aff3	je	0x100b1af
000000000100aff9	movzbl	0x8(%rax), %ecx
000000000100affd	testb	$0x4, %cl
000000000100b000	jne	0x100b1ca
000000000100b006	movq	0x48(%rsp), %rcx
000000000100b00b	movq	0x30(%rcx), %rbx
000000000100b00f	movq	0x18(%rbx), %rbx
000000000100b013	movq	%rbx, 0x28(%rsp)
000000000100b018	movq	(%rbx), %rdx
000000000100b01b	movl	0xc(%rax), %esi
000000000100b01e	movq	%rsi, 0x8(%rsp)
000000000100b023	movq	0x58(%rsp), %rsi
000000000100b028	movq	%rsi, (%rsp)
000000000100b02c	movq	(%rdx), %rdi
000000000100b02f	callq	*%rdi
000000000100b031	movq	0x10(%rsp), %rax
000000000100b036	movq	0x50(%rsp), %rcx
000000000100b03b	movzbl	0x9(%rcx), %ebx
000000000100b03f	movq	%rcx, %rdx
000000000100b042	movl	%ebx, %ecx
000000000100b044	movl	$0x1, %esi
000000000100b049	shlq	%cl, %rsi
000000000100b04c	leaq	-0x1(%rsi), %rcx
000000000100b050	movq	%rcx, %rbx
000000000100b053	andq	%rax, %rcx
000000000100b056	movq	0x48(%rsp), %rsi
000000000100b05b	movzwl	0x4c(%rsi), %edi
000000000100b05f	imulq	%rdi, %rcx
000000000100b063	addq	0x10(%rdx), %rcx
000000000100b067	movq	0x18(%rdx), %r8
000000000100b06b	testq	%r8, %r8
000000000100b06e	je	0x100b1a7
000000000100b074	movq	%rbx, %r9
000000000100b077	shrq	%rbx
000000000100b07a	movzbl	0x8(%rdx), %r10d
000000000100b07f	testb	$0x8, %r10b
000000000100b083	cmovneq	%r9, %rbx
000000000100b087	andq	%rax, %rbx
000000000100b08a	imulq	%rdi, %rbx
000000000100b08e	leaq	(%r8,%rbx), %rdi
000000000100b092	testb	%al, (%rdi)
000000000100b094	movzbl	(%rbx,%r8), %ebx
000000000100b099	decl	%ebx
000000000100b09b	cmpb	$0x3, %bl
000000000100b09e	cmovbq	%rcx, %rdi
000000000100b0a2	shrq	$0x38, %rax
000000000100b0a6	cmpb	$0x4, %al
000000000100b0a8	jae	0x100b0ad
000000000100b0aa	addl	$0x4, %eax
000000000100b0ad	movb	%al, 0x1f(%rsp)
000000000100b0b1	jmp	0x100b17b
000000000100b0b6	incq	%rcx
000000000100b0b9	cmpq	$0x8, %rcx
000000000100b0bd	jae	0x100b16f
000000000100b0c3	movzbl	(%rcx,%rdi), %ebx
000000000100b0c7	cmpb	%bl, %al
000000000100b0c9	jne	0x100b0b6
000000000100b0cb	movq	%rcx, 0x20(%rsp)
000000000100b0d0	movzbl	0x48(%rsi), %ebx
000000000100b0d4	imulq	%rcx, %rbx
000000000100b0d8	leaq	0x49(%rsi), %r8
000000000100b0dc	leaq	0x8(%rbx,%rdi), %rbx
000000000100b0e1	cmpb	$0x0, (%r8)
000000000100b0e5	je	0x100b0ea
000000000100b0e7	movq	(%rbx), %rbx
000000000100b0ea	movq	0x28(%rsp), %rax
000000000100b0ef	movq	0x8(%rax), %rdx
000000000100b0f3	movq	0x58(%rsp), %rcx
000000000100b0f8	movq	%rcx, (%rsp)
000000000100b0fc	movq	%rbx, 0x8(%rsp)
000000000100b101	movq	(%rdx), %rbx
000000000100b104	callq	*%rbx
000000000100b106	leaq	0x10(%rsp), %rax
000000000100b10b	cmpb	$0x0, (%rax)
000000000100b10e	jne	0x100b126
000000000100b110	movzbl	0x1f(%rsp), %eax
000000000100b115	movq	0x20(%rsp), %rcx
000000000100b11a	movq	0x48(%rsp), %rsi
000000000100b11f	movq	0x30(%rsp), %rdi
000000000100b124	jmp	0x100b0b6
000000000100b126	movq	0x48(%rsp), %rax
000000000100b12b	movzbl	0x48(%rax), %ecx
000000000100b12f	movzbl	0x4a(%rax), %edx
000000000100b133	movq	0x20(%rsp), %rbx
000000000100b138	imulq	%rbx, %rdx
000000000100b13c	leaq	(%rdx,%rcx,8), %rcx
000000000100b140	addq	$0x4b, %rax
000000000100b144	movq	0x30(%rsp), %rdx
000000000100b149	leaq	0x8(%rdx,%rcx), %rcx
000000000100b14e	cmpb	$0x0, (%rax)
000000000100b151	je	0x100b16a
000000000100b153	movq	(%rcx), %rax
000000000100b156	movq	%rax, 0x60(%rsp)
000000000100b15b	movb	$0x1, 0x68(%rsp)
000000000100b160	movq	0x38(%rsp), %rbp
000000000100b165	addq	$0x40, %rsp
000000000100b169	retq
000000000100b16a	movq	%rcx, %rax
000000000100b16d	jmp	0x100b156
000000000100b16f	movzwl	0x4c(%rsi), %ecx
000000000100b173	leaq	-0x8(%rdi,%rcx), %rcx
000000000100b178	movq	(%rcx), %rdi
000000000100b17b	testq	%rdi, %rdi
000000000100b17e	je	0x100b18c
000000000100b180	movq	%rdi, 0x30(%rsp)
000000000100b185	xorl	%ecx, %ecx
000000000100b187	jmp	0x100b0b9
000000000100b18c	leaq	runtime.zeroVal(%rip), %rax
000000000100b193	movq	%rax, 0x60(%rsp)
000000000100b198	movb	$0x0, 0x68(%rsp)
000000000100b19d	movq	0x38(%rsp), %rbp
000000000100b1a2	addq	$0x40, %rsp
000000000100b1a6	retq
000000000100b1a7	movq	%rcx, %rdi
000000000100b1aa	jmp	0x100b0a2
000000000100b1af	leaq	runtime.zeroVal(%rip), %rax
000000000100b1b6	movq	%rax, 0x60(%rsp)
000000000100b1bb	movb	$0x0, 0x68(%rsp)
000000000100b1c0	movq	0x38(%rsp), %rbp
000000000100b1c5	addq	$0x40, %rsp
000000000100b1c9	retq
000000000100b1ca	leaq	0x625e2(%rip), %rax
000000000100b1d1	movq	%rax, (%rsp)
000000000100b1d5	movq	$0x21, 0x8(%rsp)
000000000100b1de	callq	runtime.throw
000000000100b1e3	ud2
000000000100b1e5	callq	runtime.morestack_noctxt
000000000100b1ea	jmp	runtime.mapaccess2
000000000100b1ef	int3
runtime.mapassign:
000000000100b1f0	movq	%gs:0x30, %rcx
000000000100b1f9	cmpq	0x10(%rcx), %rsp
000000000100b1fd	jbe	0x100b770
000000000100b203	subq	$0x80, %rsp
000000000100b20a	movq	%rbp, 0x78(%rsp)
000000000100b20f	leaq	0x78(%rsp), %rbp
000000000100b214	movq	0x90(%rsp), %rax
000000000100b21c	testq	%rax, %rax
000000000100b21f	je	0x100b752
000000000100b225	movzbl	0x8(%rax), %ecx
000000000100b229	testb	$0x4, %cl
000000000100b22c	jne	0x100b737
000000000100b232	movq	0x88(%rsp), %rcx
000000000100b23a	movq	0x30(%rcx), %rbx
000000000100b23e	movq	0x18(%rbx), %rbx
000000000100b242	movq	%rbx, 0x60(%rsp)
000000000100b247	movq	(%rbx), %rdx
000000000100b24a	movl	0xc(%rax), %esi
000000000100b24d	movq	%rsi, 0x8(%rsp)
000000000100b252	movq	0x98(%rsp), %rsi
000000000100b25a	movq	%rsi, (%rsp)
000000000100b25e	movq	(%rdx), %rdi
000000000100b261	callq	*%rdi
000000000100b263	movq	0x10(%rsp), %rax
000000000100b268	movq	%rax, 0x30(%rsp)
000000000100b26d	movq	0x90(%rsp), %rcx
000000000100b275	movzbl	0x8(%rcx), %ebx
000000000100b279	orl	$0x4, %ebx
000000000100b27c	movb	%bl, 0x8(%rcx)
000000000100b27f	cmpq	$0x0, 0x10(%rcx)
000000000100b284	je	0x100b6cd
000000000100b28a	movq	0x88(%rsp), %rbx
000000000100b292	jmp	0x100b4bf
000000000100b297	incq	%r10
000000000100b29a	cmpq	$0x8, %r10
000000000100b29e	jae	0x100b427
000000000100b2a4	testb	%al, (%rsi)
000000000100b2a6	movzbl	(%rsi,%r10), %r11d
000000000100b2ab	leaq	(%rsi,%r10), %r12
000000000100b2af	cmpb	%r11b, %al
000000000100b2b2	je	0x100b2ef
000000000100b2b4	testb	%r11b, %r11b
000000000100b2b7	jne	0x100b297
000000000100b2b9	testq	%rcx, %rcx
000000000100b2bc	jne	0x100b297
000000000100b2be	movzbl	0x48(%rbx), %r11d
000000000100b2c3	movq	%r10, %r13
000000000100b2c6	imulq	%r11, %r10
000000000100b2ca	movzbl	0x4a(%rbx), %r14d
000000000100b2cf	imulq	%r13, %r14
000000000100b2d3	leaq	(%r14,%r11,8), %r11
000000000100b2d7	movq	%rsi, %r14
000000000100b2da	leaq	0x8(%r10,%rsi), %r8
000000000100b2df	leaq	0x8(%r11,%rsi), %r9
000000000100b2e4	movq	%r14, %rsi
000000000100b2e7	movq	%r13, %r10
000000000100b2ea	movq	%r12, %rcx
000000000100b2ed	jmp	0x100b297
000000000100b2ef	movq	%r10, 0x28(%rsp)
000000000100b2f4	movq	%r9, 0x40(%rsp)
000000000100b2f9	movq	%r8, 0x50(%rsp)
000000000100b2fe	movq	%rcx, 0x58(%rsp)
000000000100b303	movzbl	0x48(%rbx), %r11d
000000000100b308	imulq	%r10, %r11
000000000100b30c	leaq	0x49(%rbx), %r12
000000000100b310	leaq	0x8(%r11,%rsi), %rsi
000000000100b315	cmpb	$0x0, (%r12)
000000000100b31a	je	0x100b31f
000000000100b31c	movq	(%rsi), %rsi
000000000100b31f	movq	%rsi, 0x48(%rsp)
000000000100b324	movq	0x60(%rsp), %rax
000000000100b329	movq	0x8(%rax), %rdx
000000000100b32d	movq	0x98(%rsp), %rcx
000000000100b335	movq	%rcx, (%rsp)
000000000100b339	movq	%rsi, 0x8(%rsp)
000000000100b33e	movq	(%rdx), %rbx
000000000100b341	callq	*%rbx
000000000100b343	leaq	0x10(%rsp), %rax
000000000100b348	cmpb	$0x0, (%rax)
000000000100b34b	jne	0x100b385
000000000100b34d	movzbl	0x27(%rsp), %eax
000000000100b352	movq	0x90(%rsp), %rdx
000000000100b35a	movq	0x88(%rsp), %rbx
000000000100b362	movq	0x70(%rsp), %rsi
000000000100b367	movq	0x30(%rsp), %rdi
000000000100b36c	movq	0x28(%rsp), %r10
000000000100b371	movq	0x58(%rsp), %rcx
000000000100b376	movq	0x50(%rsp), %r8
000000000100b37b	movq	0x40(%rsp), %r9
000000000100b380	jmp	0x100b297
000000000100b385	movq	0x88(%rsp), %rax
000000000100b38d	leaq	0x4f(%rax), %rcx
000000000100b391	cmpb	$0x0, (%rcx)
000000000100b394	jne	0x100b3f6
000000000100b396	movzbl	0x48(%rax), %ecx
000000000100b39a	movzbl	0x4a(%rax), %edx
000000000100b39e	movq	0x28(%rsp), %rbx
000000000100b3a3	imulq	%rbx, %rdx
000000000100b3a7	leaq	(%rdx,%rcx,8), %rcx
000000000100b3ab	movq	0x70(%rsp), %rdx
000000000100b3b0	leaq	0x8(%rdx,%rcx), %rcx
000000000100b3b5	movq	0x90(%rsp), %rdx
000000000100b3bd	movzbl	0x8(%rdx), %ebx
000000000100b3c1	testb	$0x4, %bl
000000000100b3c4	je	0x100b71c
000000000100b3ca	andl	$-0x5, %ebx
000000000100b3cd	movb	%bl, 0x8(%rdx)
000000000100b3d0	addq	$0x4b, %rax
000000000100b3d4	cmpb	$0x0, (%rax)
000000000100b3d7	je	0x100b3f1
000000000100b3d9	movq	(%rcx), %rax
000000000100b3dc	movq	%rax, 0xa0(%rsp)
000000000100b3e4	movq	0x78(%rsp), %rbp
000000000100b3e9	addq	$0x80, %rsp
000000000100b3f0	retq
000000000100b3f1	movq	%rcx, %rax
000000000100b3f4	jmp	0x100b3dc
000000000100b3f6	movq	0x30(%rax), %rcx
000000000100b3fa	movq	%rcx, (%rsp)
000000000100b3fe	movq	0x48(%rsp), %rcx
000000000100b403	movq	%rcx, 0x8(%rsp)
000000000100b408	movq	0x98(%rsp), %rcx
000000000100b410	movq	%rcx, 0x10(%rsp)
000000000100b415	callq	runtime.typedmemmove
000000000100b41a	movq	0x88(%rsp), %rax
000000000100b422	jmp	0x100b396
000000000100b427	movzwl	0x4c(%rbx), %r10d
000000000100b42c	movq	%rsi, %r11
000000000100b42f	leaq	-0x8(%rsi,%r10), %rsi
000000000100b434	movq	(%rsi), %rsi
000000000100b437	testq	%rsi, %rsi
000000000100b43a	je	0x100b449
000000000100b43c	movq	%rsi, 0x70(%rsp)
000000000100b441	xorl	%r10d, %r10d
000000000100b444	jmp	0x100b29a
000000000100b449	cmpq	$0x0, 0x18(%rdx)
000000000100b44e	jne	0x100b68e
000000000100b454	movq	(%rdx), %rsi
000000000100b457	incq	%rsi
000000000100b45a	movzbl	0x9(%rdx), %r10d
000000000100b45f	cmpq	$0x8, %rsi
000000000100b463	jle	0x100b681
000000000100b469	movq	%rcx, %r12
000000000100b46c	movl	%r10d, %ecx
000000000100b46f	movl	$0x1, %r13d
000000000100b475	shlq	%cl, %r13
000000000100b478	shrq	%r13
000000000100b47b	leaq	(%r13,%r13,2), %r14
000000000100b480	leaq	(%r13,%r14,4), %r13
000000000100b485	cmpq	%r13, %rsi
000000000100b488	seta	%sil
000000000100b48c	testb	%sil, %sil
000000000100b48f	je	0x100b50d
000000000100b491	movq	%rbx, (%rsp)
000000000100b495	movq	%rdx, 0x8(%rsp)
000000000100b49a	callq	runtime.hashGrow
000000000100b49f	movq	0x30(%rsp), %rax
000000000100b4a4	movq	0x88(%rsp), %rcx
000000000100b4ac	movq	0x90(%rsp), %rdx
000000000100b4b4	movq	%rdx, %rcx
000000000100b4b7	movq	0x88(%rsp), %rbx
000000000100b4bf	movzbl	0x9(%rcx), %esi
000000000100b4c3	movq	%rcx, %rdx
000000000100b4c6	movl	%esi, %ecx
000000000100b4c8	movl	$0x1, %edi
000000000100b4cd	shlq	%cl, %rdi
000000000100b4d0	leaq	-0x1(%rdi), %rsi
000000000100b4d4	andq	%rax, %rsi
000000000100b4d7	cmpq	$0x0, 0x18(%rdx)
000000000100b4dc	jne	0x100b696
000000000100b4e2	movzwl	0x4c(%rbx), %edi
000000000100b4e6	imulq	%rdi, %rsi
000000000100b4ea	addq	0x10(%rdx), %rsi
000000000100b4ee	movq	%rax, %rdi
000000000100b4f1	shrq	$0x38, %rax
000000000100b4f5	cmpb	$0x4, %al
000000000100b4f7	jae	0x100b4fc
000000000100b4f9	addl	$0x4, %eax
000000000100b4fc	movb	%al, 0x27(%rsp)
000000000100b500	xorl	%ecx, %ecx
000000000100b502	xorl	%r8d, %r8d
000000000100b505	xorl	%r9d, %r9d
000000000100b508	jmp	0x100b43c
000000000100b50d	movzwl	0xa(%rdx), %esi
000000000100b511	cmpb	$0xf, %cl
000000000100b514	jbe	0x100b51b
000000000100b516	movl	$0xf, %ecx
000000000100b51b	andl	$0xf, %ecx
000000000100b51e	movl	$0x1, %r10d
000000000100b524	shll	%cl, %r10d
000000000100b527	cmpw	%r10w, %si
000000000100b52b	jae	0x100b491
000000000100b531	testq	%r12, %r12
000000000100b534	je	0x100b63d
000000000100b53a	movq	%r9, 0x40(%rsp)
000000000100b53f	movq	%r12, 0x58(%rsp)
000000000100b544	leaq	0x49(%rbx), %rcx
000000000100b548	cmpb	$0x0, (%rcx)
000000000100b54b	jne	0x100b5e5
000000000100b551	leaq	0x4b(%rbx), %rcx
000000000100b555	cmpb	$0x0, (%rcx)
000000000100b558	jne	0x100b5a2
000000000100b55a	movq	0x30(%rbx), %rax
000000000100b55e	movq	%rax, (%rsp)
000000000100b562	movq	%r8, 0x8(%rsp)
000000000100b567	movq	0x98(%rsp), %rax
000000000100b56f	movq	%rax, 0x10(%rsp)
000000000100b574	callq	runtime.typedmemmove
000000000100b579	movzbl	0x27(%rsp), %eax
000000000100b57e	movq	0x58(%rsp), %rcx
000000000100b583	movb	%al, (%rcx)
000000000100b585	movq	0x90(%rsp), %rax
000000000100b58d	incq	(%rax)
000000000100b590	movq	0x88(%rsp), %rax
000000000100b598	movq	0x40(%rsp), %rcx
000000000100b59d	jmp	0x100b3b5
000000000100b5a2	movq	%r8, 0x50(%rsp)
000000000100b5a7	movq	0x38(%rbx), %rax
000000000100b5ab	movq	%rax, (%rsp)
000000000100b5af	callq	runtime.newobject
000000000100b5b4	movq	0x40(%rsp), %rdi
000000000100b5b9	testb	%al, (%rdi)
000000000100b5bb	movq	0x8(%rsp), %rax
000000000100b5c0	cmpl	$0x0, 0xc9669(%rip)
000000000100b5c7	jne	0x100b5de
000000000100b5c9	movq	%rax, (%rdi)
000000000100b5cc	movq	0x88(%rsp), %rbx
000000000100b5d4	movq	0x50(%rsp), %r8
000000000100b5d9	jmp	0x100b55a
000000000100b5de	callq	runtime.gcWriteBarrier
000000000100b5e3	jmp	0x100b5cc
000000000100b5e5	movq	%r8, 0x68(%rsp)
000000000100b5ea	movq	0x30(%rbx), %rax
000000000100b5ee	movq	%rax, (%rsp)
000000000100b5f2	callq	runtime.newobject
000000000100b5f7	movq	0x68(%rsp), %rdi
000000000100b5fc	testb	%al, (%rdi)
000000000100b5fe	movq	0x8(%rsp), %rax
000000000100b603	cmpl	$0x0, 0xc9626(%rip)
000000000100b60a	jne	0x100b636
000000000100b60c	movq	%rax, (%rdi)
000000000100b60f	movq	0x90(%rsp), %rdx
000000000100b617	movq	0x88(%rsp), %rbx
000000000100b61f	movq	0x40(%rsp), %r9
000000000100b624	movq	0x58(%rsp), %r12
000000000100b629	movq	%rax, %r8
000000000100b62c	movzbl	0x27(%rsp), %eax
000000000100b631	jmp	0x100b551
000000000100b636	callq	runtime.gcWriteBarrier
000000000100b63b	jmp	0x100b60f
000000000100b63d	movq	%rdx, (%rsp)
000000000100b641	movq	%rbx, 0x8(%rsp)
000000000100b646	movq	%r11, 0x10(%rsp)
000000000100b64b	callq	"runtime.(*hmap).newoverflow"
000000000100b650	movq	0x18(%rsp), %r12
000000000100b655	testb	%al, (%r12)
000000000100b659	movq	0x88(%rsp), %rbx
000000000100b661	movzbl	0x48(%rbx), %eax
000000000100b665	leaq	0x8(%r12), %r8
000000000100b66a	leaq	0x8(%r12,%rax,8), %r9
000000000100b66f	movzbl	0x27(%rsp), %eax
000000000100b674	movq	0x90(%rsp), %rdx
000000000100b67c	jmp	0x100b53a
000000000100b681	movq	%rcx, %r12
000000000100b684	xorl	%esi, %esi
000000000100b686	movl	%r10d, %ecx
000000000100b689	jmp	0x100b48c
000000000100b68e	movq	%rcx, %r12
000000000100b691	jmp	0x100b531
000000000100b696	movq	%rsi, 0x38(%rsp)
000000000100b69b	movq	%rbx, (%rsp)
000000000100b69f	movq	%rdx, 0x8(%rsp)
000000000100b6a4	movq	%rsi, 0x10(%rsp)
000000000100b6a9	callq	runtime.growWork
000000000100b6ae	movq	0x30(%rsp), %rax
000000000100b6b3	movq	0x90(%rsp), %rdx
000000000100b6bb	movq	0x88(%rsp), %rbx
000000000100b6c3	movq	0x38(%rsp), %rsi
000000000100b6c8	jmp	0x100b4e2
000000000100b6cd	movq	0x88(%rsp), %rax
000000000100b6d5	movq	0x40(%rax), %rcx
000000000100b6d9	movq	%rcx, (%rsp)
000000000100b6dd	callq	runtime.newobject
000000000100b6e2	movq	0x8(%rsp), %rax
000000000100b6e7	cmpl	$0x0, 0xc9542(%rip)
000000000100b6ee	jne	0x100b709
000000000100b6f0	movq	0x90(%rsp), %rbx
000000000100b6f8	movq	%rax, 0x10(%rbx)
000000000100b6fc	movq	0x30(%rsp), %rax
000000000100b701	movq	%rbx, %rcx
000000000100b704	jmp	0x100b28a
000000000100b709	movq	0x90(%rsp), %rbx
000000000100b711	leaq	0x10(%rbx), %rdi
000000000100b715	callq	runtime.gcWriteBarrier
000000000100b71a	jmp	0x100b6fc
000000000100b71c	leaq	0x6089d(%rip), %rax
000000000100b723	movq	%rax, (%rsp)
000000000100b727	movq	$0x15, 0x8(%rsp)
000000000100b730	callq	runtime.throw
000000000100b735	ud2
000000000100b737	leaq	0x60882(%rip), %rax
000000000100b73e	movq	%rax, (%rsp)
000000000100b742	movq	$0x15, 0x8(%rsp)
000000000100b74b	callq	runtime.throw
000000000100b750	ud2
000000000100b752	leaq	0x509a7(%rip), %rax
000000000100b759	movq	%rax, (%rsp)
000000000100b75d	leaq	runtime.statictmp_11(%rip), %rax
000000000100b764	movq	%rax, 0x8(%rsp)
000000000100b769	callq	runtime.gopanic
000000000100b76e	ud2
000000000100b770	callq	runtime.morestack_noctxt
000000000100b775	jmp	runtime.mapassign
000000000100b77a	int3
000000000100b77b	int3
000000000100b77c	int3
000000000100b77d	int3
000000000100b77e	int3
000000000100b77f	int3
runtime.hashGrow:
000000000100b780	movq	%gs:0x30, %rcx
000000000100b789	cmpq	0x10(%rcx), %rsp
000000000100b78d	jbe	0x100b997
000000000100b793	subq	$0x48, %rsp
000000000100b797	movq	%rbp, 0x40(%rsp)
000000000100b79c	leaq	0x40(%rsp), %rbp
000000000100b7a1	movq	0x58(%rsp), %rax
000000000100b7a6	movq	(%rax), %rdx
000000000100b7a9	incq	%rdx
000000000100b7ac	movzbl	0x9(%rax), %ecx
000000000100b7b0	cmpq	$0x8, %rdx
000000000100b7b4	jle	0x100b975
000000000100b7ba	movl	$0x1, %ebx
000000000100b7bf	shlq	%cl, %rbx
000000000100b7c2	shrq	%rbx
000000000100b7c5	leaq	(%rbx,%rbx,2), %rsi
000000000100b7c9	leaq	(%rbx,%rsi,4), %rbx
000000000100b7cd	cmpq	%rbx, %rdx
000000000100b7d0	seta	%dl
000000000100b7d3	testb	%dl, %dl
000000000100b7d5	je	0x100b966
000000000100b7db	movb	%dl, 0x2f(%rsp)
000000000100b7df	movq	0x10(%rax), %rcx
000000000100b7e3	movq	%rcx, 0x30(%rsp)
000000000100b7e8	movzbl	0x9(%rax), %ebx
000000000100b7ec	addl	%edx, %ebx
000000000100b7ee	movb	%bl, 0x8(%rsp)
000000000100b7f2	movq	0x50(%rsp), %rbx
000000000100b7f7	movq	%rbx, (%rsp)
000000000100b7fb	movq	$0x0, 0x10(%rsp)
000000000100b804	callq	runtime.makeBucketArray
000000000100b809	movq	0x18(%rsp), %rax
000000000100b80e	movq	0x20(%rsp), %rcx
000000000100b813	movq	0x58(%rsp), %rdx
000000000100b818	movzbl	0x8(%rdx), %ebx
000000000100b81c	movl	%ebx, %esi
000000000100b81e	andl	$-0x4, %ebx
000000000100b821	testb	$0x1, %sil
000000000100b825	je	0x100b82a
000000000100b827	orl	$0x2, %ebx
000000000100b82a	movzbl	0x9(%rdx), %esi
000000000100b82e	movzbl	0x2f(%rsp), %r8d
000000000100b834	addl	%r8d, %esi
000000000100b837	movb	%sil, 0x9(%rdx)
000000000100b83b	movb	%bl, 0x8(%rdx)
000000000100b83e	cmpl	$0x0, 0xc93eb(%rip)
000000000100b845	jne	0x100b944
000000000100b84b	movq	0x30(%rsp), %rbx
000000000100b850	movq	%rbx, 0x18(%rdx)
000000000100b854	movq	%rax, 0x10(%rdx)
000000000100b858	movq	$0x0, 0x20(%rdx)
000000000100b860	movw	$0x0, 0xa(%rdx)
000000000100b866	movq	0x28(%rdx), %rbx
000000000100b86a	testq	%rbx, %rbx
000000000100b86d	je	0x100b8ad
000000000100b86f	movq	(%rbx), %rax
000000000100b872	testq	%rax, %rax
000000000100b875	je	0x100b8ad
000000000100b877	cmpq	$0x0, 0x8(%rbx)
000000000100b87c	jne	0x100b97c
000000000100b882	cmpl	$0x0, 0xc93a7(%rip)
000000000100b889	jne	0x100b936
000000000100b88f	movq	%rax, 0x8(%rbx)
000000000100b893	movq	0x28(%rdx), %rdi
000000000100b897	testb	%al, (%rdi)
000000000100b899	cmpl	$0x0, 0xc9390(%rip)
000000000100b8a0	jne	0x100b92a
000000000100b8a6	movq	$0x0, (%rdi)
000000000100b8ad	testq	%rcx, %rcx
000000000100b8b0	je	0x100b8cc
000000000100b8b2	cmpq	$0x0, 0x28(%rdx)
000000000100b8b7	je	0x100b8e4
000000000100b8b9	movq	0x28(%rdx), %rdx
000000000100b8bd	testb	%al, (%rdx)
000000000100b8bf	cmpl	$0x0, 0xc936a(%rip)
000000000100b8c6	jne	0x100b8d6
000000000100b8c8	movq	%rcx, 0x10(%rdx)
000000000100b8cc	movq	0x40(%rsp), %rbp
000000000100b8d1	addq	$0x48, %rsp
000000000100b8d5	retq
000000000100b8d6	leaq	0x10(%rdx), %rdi
000000000100b8da	movq	%rcx, %rax
000000000100b8dd	callq	runtime.gcWriteBarrier
000000000100b8e2	jmp	0x100b8cc
000000000100b8e4	movq	%rcx, 0x38(%rsp)
000000000100b8e9	leaq	0x55a90(%rip), %rax
000000000100b8f0	movq	%rax, (%rsp)
000000000100b8f4	callq	runtime.newobject
000000000100b8f9	movq	0x8(%rsp), %rax
000000000100b8fe	cmpl	$0x0, 0xc932b(%rip)
000000000100b905	jne	0x100b91a
000000000100b907	movq	0x58(%rsp), %rcx
000000000100b90c	movq	%rax, 0x28(%rcx)
000000000100b910	movq	%rcx, %rdx
000000000100b913	movq	0x38(%rsp), %rcx
000000000100b918	jmp	0x100b8b9
000000000100b91a	movq	0x58(%rsp), %rcx
000000000100b91f	leaq	0x28(%rcx), %rdi
000000000100b923	callq	runtime.gcWriteBarrier
000000000100b928	jmp	0x100b910
000000000100b92a	xorl	%eax, %eax
000000000100b92c	callq	runtime.gcWriteBarrier
000000000100b931	jmp	0x100b8ad
000000000100b936	leaq	0x8(%rbx), %rdi
000000000100b93a	callq	runtime.gcWriteBarrier
000000000100b93f	jmp	0x100b893
000000000100b944	leaq	0x18(%rdx), %rdi
000000000100b948	movq	%rax, %rbx
000000000100b94b	movq	0x30(%rsp), %rax
000000000100b950	callq	runtime.gcWriteBarrier
000000000100b955	leaq	0x10(%rdx), %rdi
000000000100b959	movq	%rbx, %rax
000000000100b95c	callq	runtime.gcWriteBarrier
000000000100b961	jmp	0x100b858
000000000100b966	movzbl	0x8(%rax), %ecx
000000000100b96a	orl	$0x8, %ecx
000000000100b96d	movb	%cl, 0x8(%rax)
000000000100b970	jmp	0x100b7db
000000000100b975	xorl	%edx, %edx
000000000100b977	jmp	0x100b7d3
000000000100b97c	leaq	0x60840(%rip), %rax
000000000100b983	movq	%rax, (%rsp)
000000000100b987	movq	$0x16, 0x8(%rsp)
000000000100b990	callq	runtime.throw
000000000100b995	ud2
000000000100b997	callq	runtime.morestack_noctxt
000000000100b99c	jmp	runtime.hashGrow
000000000100b9a1	int3
000000000100b9a2	int3
000000000100b9a3	int3
000000000100b9a4	int3
000000000100b9a5	int3
000000000100b9a6	int3
000000000100b9a7	int3
000000000100b9a8	int3
000000000100b9a9	int3
000000000100b9aa	int3
000000000100b9ab	int3
000000000100b9ac	int3
000000000100b9ad	int3
000000000100b9ae	int3
000000000100b9af	int3
runtime.growWork:
000000000100b9b0	movq	%gs:0x30, %rcx
000000000100b9b9	cmpq	0x10(%rcx), %rsp
000000000100b9bd	jbe	0x100ba49
000000000100b9c3	subq	$0x20, %rsp
000000000100b9c7	movq	%rbp, 0x18(%rsp)
000000000100b9cc	leaq	0x18(%rsp), %rbp
000000000100b9d1	movq	0x30(%rsp), %rax
000000000100b9d6	movzbl	0x9(%rax), %edx
000000000100b9da	movzbl	0x8(%rax), %ebx
000000000100b9de	testb	$0x8, %bl
000000000100b9e1	je	0x100ba45
000000000100b9e3	movq	0x28(%rsp), %rbx
000000000100b9e8	movq	%rbx, (%rsp)
000000000100b9ec	movq	%rax, 0x8(%rsp)
000000000100b9f1	movl	%edx, %ecx
000000000100b9f3	movl	$0x1, %esi
000000000100b9f8	shlq	%cl, %rsi
000000000100b9fb	leaq	-0x1(%rsi), %rdx
000000000100b9ff	movq	0x38(%rsp), %rsi
000000000100ba04	andq	%rdx, %rsi
000000000100ba07	movq	%rsi, 0x10(%rsp)
000000000100ba0c	callq	runtime.evacuate
000000000100ba11	movq	0x30(%rsp), %rax
000000000100ba16	cmpq	$0x0, 0x18(%rax)
000000000100ba1b	jne	0x100ba27
000000000100ba1d	movq	0x18(%rsp), %rbp
000000000100ba22	addq	$0x20, %rsp
000000000100ba26	retq
000000000100ba27	movq	0x20(%rax), %rcx
000000000100ba2b	movq	%rcx, 0x10(%rsp)
000000000100ba30	movq	0x28(%rsp), %rcx
000000000100ba35	movq	%rcx, (%rsp)
000000000100ba39	movq	%rax, 0x8(%rsp)
000000000100ba3e	callq	runtime.evacuate
000000000100ba43	jmp	0x100ba1d
000000000100ba45	decl	%edx
000000000100ba47	jmp	0x100b9e3
000000000100ba49	callq	runtime.morestack_noctxt
000000000100ba4e	jmp	runtime.growWork
000000000100ba53	int3
000000000100ba54	int3
000000000100ba55	int3
000000000100ba56	int3
000000000100ba57	int3
000000000100ba58	int3
000000000100ba59	int3
000000000100ba5a	int3
000000000100ba5b	int3
000000000100ba5c	int3
000000000100ba5d	int3
000000000100ba5e	int3
000000000100ba5f	int3
runtime.evacuate:
000000000100ba60	movq	%gs:0x30, %rcx
000000000100ba69	leaq	-0x38(%rsp), %rax
000000000100ba6e	cmpq	0x10(%rcx), %rax
000000000100ba72	jbe	0x100c0b9
000000000100ba78	subq	$0xb8, %rsp
000000000100ba7f	movq	%rbp, 0xb0(%rsp)
000000000100ba87	leaq	0xb0(%rsp), %rbp
000000000100ba8f	xorps	%xmm0, %xmm0
000000000100ba92	movups	%xmm0, 0x70(%rsp)
000000000100ba97	movups	%xmm0, 0x80(%rsp)
000000000100ba9f	movups	%xmm0, 0x90(%rsp)
000000000100baa7	movups	%xmm0, 0xa0(%rsp)
000000000100baaf	movq	0xc0(%rsp), %rbx
000000000100bab7	movzwl	0x4c(%rbx), %esi
000000000100babb	movq	0xd0(%rsp), %r8
000000000100bac3	imulq	%r8, %rsi
000000000100bac7	movq	0xc8(%rsp), %r9
000000000100bacf	addq	0x18(%r9), %rsi
000000000100bad3	movzbl	0x9(%r9), %r10d
000000000100bad8	movzbl	0x8(%r9), %r11d
000000000100badd	testb	$0x8, %r11b
000000000100bae1	je	0x100c08f
000000000100bae7	movl	%r10d, %ecx
000000000100baea	movl	$0x1, %r11d
000000000100baf0	shlq	%cl, %r11
000000000100baf3	movzbl	(%rsi), %r12d
000000000100baf7	decl	%r12d
000000000100bafa	cmpb	$0x3, %r12b
000000000100bafe	jb	0x100bfd4
000000000100bb04	xorps	%xmm0, %xmm0
000000000100bb07	movups	%xmm0, 0x70(%rsp)
000000000100bb0c	movups	%xmm0, 0x80(%rsp)
000000000100bb14	movups	%xmm0, 0x90(%rsp)
000000000100bb1c	movups	%xmm0, 0xa0(%rsp)
000000000100bb24	leaq	0x70(%rsp), %r12
000000000100bb29	testb	%al, (%r12)
000000000100bb2d	movzwl	0x4c(%rbx), %r12d
000000000100bb32	imulq	%r8, %r12
000000000100bb36	addq	0x10(%r9), %r12
000000000100bb3a	movq	%r12, 0x70(%rsp)
000000000100bb3f	leaq	0x8(%r12), %r13
000000000100bb44	movq	%r13, 0x80(%rsp)
000000000100bb4c	movzbl	0x48(%rbx), %r13d
000000000100bb51	leaq	0x8(%r12,%r13,8), %r12
000000000100bb56	movq	%r12, 0x88(%rsp)
000000000100bb5e	movzbl	0x8(%r9), %r12d
000000000100bb63	testb	$0x8, %r12b
000000000100bb67	je	0x100c046
000000000100bb6d	movb	%cl, 0x27(%rsp)
000000000100bb71	movq	%r11, 0x40(%rsp)
000000000100bb76	jmp	0x100bfa0
000000000100bb7b	incq	%rax
000000000100bb7e	movzbl	0x48(%rbx), %r14d
000000000100bb83	movzbl	0x4a(%rbx), %r15d
000000000100bb88	addq	%r14, %r13
000000000100bb8b	addq	%r15, %r12
000000000100bb8e	cmpq	$0x8, %rax
000000000100bb92	jge	0x100bf92
000000000100bb98	movzbl	(%rsi,%rax), %r14d
000000000100bb9d	testb	%r14b, %r14b
000000000100bba0	jne	0x100bba8
000000000100bba2	movb	$0x1, (%rsi,%rax)
000000000100bba6	jmp	0x100bb7b
000000000100bba8	cmpb	$0x4, %r14b
000000000100bbac	jb	0x100c09e
000000000100bbb2	leaq	0x49(%rbx), %r15
000000000100bbb6	cmpb	$0x0, (%r15)
000000000100bbba	je	0x100bf87
000000000100bbc0	movq	%r11, %rdx
000000000100bbc3	movq	(%r13), %r11
000000000100bbc7	movq	%rax, 0x28(%rsp)
000000000100bbcc	movq	%r15, 0x60(%rsp)
000000000100bbd1	movq	%r12, 0x48(%rsp)
000000000100bbd6	movq	%r11, 0x58(%rsp)
000000000100bbdb	movq	%r13, 0x50(%rsp)
000000000100bbe0	movq	%r8, %rdi
000000000100bbe3	movzbl	0x8(%r9), %r8d
000000000100bbe8	testb	$0x8, %r8b
000000000100bbec	je	0x100be5c
000000000100bbf2	xorl	%r8d, %r8d
000000000100bbf5	leal	0x2(%r8), %ecx
000000000100bbf9	movb	%cl, (%rsi,%rax)
000000000100bbfc	movzbl	%r8b, %ecx
000000000100bc00	cmpq	$0x2, %rcx
000000000100bc04	jae	0x100c097
000000000100bc0a	shlq	$0x5, %rcx
000000000100bc0e	movq	%rcx, 0x38(%rsp)
000000000100bc13	movq	0x78(%rsp,%rcx), %r8
000000000100bc18	cmpq	$0x8, %r8
000000000100bc1c	je	0x100bdbe
000000000100bc22	movq	0x70(%rsp,%rcx), %r8
000000000100bc27	testb	%al, (%r8)
000000000100bc2a	movq	0x78(%rsp,%rcx), %r10
000000000100bc2f	andq	$0x7, %r10
000000000100bc33	movb	%r14b, (%r8,%r10)
000000000100bc37	cmpb	$0x0, (%r15)
000000000100bc3b	je	0x100bd64
000000000100bc41	movq	0x80(%rsp,%rcx), %r8
000000000100bc49	testb	%al, (%r8)
000000000100bc4c	cmpl	$0x0, 0xc8fdd(%rip)
000000000100bc53	jne	0x100bd48
000000000100bc59	movq	%r11, (%r8)
000000000100bc5c	leaq	0x4b(%rbx), %r8
000000000100bc60	cmpb	$0x0, (%r8)
000000000100bc64	je	0x100bcee
000000000100bc6a	movq	0x88(%rsp,%rcx), %r8
000000000100bc72	testb	%al, (%r8)
000000000100bc75	movq	(%r12), %r10
000000000100bc79	cmpl	$0x0, 0xc8fb0(%rip)
000000000100bc80	jne	0x100bcd5
000000000100bc82	movq	%r10, (%r8)
000000000100bc85	movq	0x78(%rsp,%rcx), %r14
000000000100bc8a	incq	%r14
000000000100bc8d	movq	%r14, 0x78(%rsp,%rcx)
000000000100bc92	movq	0x80(%rsp,%rcx), %r14
000000000100bc9a	movzbl	0x48(%rbx), %r15d
000000000100bc9f	addq	%r15, %r14
000000000100bca2	movq	%r14, 0x80(%rsp,%rcx)
000000000100bcaa	movq	0x88(%rsp,%rcx), %r14
000000000100bcb2	movzbl	0x4a(%rbx), %r15d
000000000100bcb7	addq	%r15, %r14
000000000100bcba	movq	%r14, 0x88(%rsp,%rcx)
000000000100bcc2	movzbl	0x27(%rsp), %ecx
000000000100bcc7	movq	%rdi, %r8
000000000100bcca	movl	%ecx, %r10d
000000000100bccd	movq	%rdx, %r11
000000000100bcd0	jmp	0x100bb7b
000000000100bcd5	movq	%rdi, %r11
000000000100bcd8	movq	%r8, %rdi
000000000100bcdb	movq	%rax, %r14
000000000100bcde	movq	%r10, %rax
000000000100bce1	callq	runtime.gcWriteBarrier
000000000100bce6	movq	%r14, %rax
000000000100bce9	movq	%r11, %rdi
000000000100bcec	jmp	0x100bc85
000000000100bcee	movq	0x38(%rbx), %rax
000000000100bcf2	movq	0x88(%rsp,%rcx), %rdx
000000000100bcfa	movq	%rdx, 0x8(%rsp)
000000000100bcff	movq	%rax, (%rsp)
000000000100bd03	movq	%r12, 0x10(%rsp)
000000000100bd08	callq	runtime.typedmemmove
000000000100bd0d	movq	0x28(%rsp), %rax
000000000100bd12	movq	0x38(%rsp), %rcx
000000000100bd17	movq	0x40(%rsp), %rdx
000000000100bd1c	movq	0xc0(%rsp), %rbx
000000000100bd24	movq	0x68(%rsp), %rsi
000000000100bd29	movq	0xd0(%rsp), %rdi
000000000100bd31	movq	0xc8(%rsp), %r9
000000000100bd39	movq	0x48(%rsp), %r12
000000000100bd3e	movq	0x50(%rsp), %r13
000000000100bd43	jmp	0x100bc85
000000000100bd48	movq	%rdi, %r10
000000000100bd4b	movq	%r8, %rdi
000000000100bd4e	movq	%rax, %r14
000000000100bd51	movq	%r11, %rax
000000000100bd54	callq	runtime.gcWriteBarrier
000000000100bd59	movq	%r14, %rax
000000000100bd5c	movq	%r10, %rdi
000000000100bd5f	jmp	0x100bc5c
000000000100bd64	movq	0x30(%rbx), %rax
000000000100bd68	movq	0x80(%rsp,%rcx), %rdx
000000000100bd70	movq	%rdx, 0x8(%rsp)
000000000100bd75	movq	%rax, (%rsp)
000000000100bd79	movq	%r13, 0x10(%rsp)
000000000100bd7e	callq	runtime.typedmemmove
000000000100bd83	movq	0x28(%rsp), %rax
000000000100bd88	movq	0x38(%rsp), %rcx
000000000100bd8d	movq	0x40(%rsp), %rdx
000000000100bd92	movq	0xc0(%rsp), %rbx
000000000100bd9a	movq	0x68(%rsp), %rsi
000000000100bd9f	movq	0xd0(%rsp), %rdi
000000000100bda7	movq	0xc8(%rsp), %r9
000000000100bdaf	movq	0x48(%rsp), %r12
000000000100bdb4	movq	0x50(%rsp), %r13
000000000100bdb9	jmp	0x100bc5c
000000000100bdbe	movb	%r14b, 0x25(%rsp)
000000000100bdc3	movq	0x70(%rsp,%rcx), %rax
000000000100bdc8	movq	%rax, 0x10(%rsp)
000000000100bdcd	movq	%r9, (%rsp)
000000000100bdd1	movq	%rbx, 0x8(%rsp)
000000000100bdd6	callq	"runtime.(*hmap).newoverflow"
000000000100bddb	movq	0x18(%rsp), %rax
000000000100bde0	movq	0x38(%rsp), %rcx
000000000100bde5	movq	%rax, 0x70(%rsp,%rcx)
000000000100bdea	movq	$0x0, 0x78(%rsp,%rcx)
000000000100bdf3	leaq	0x8(%rax), %rdx
000000000100bdf7	movq	%rdx, 0x80(%rsp,%rcx)
000000000100bdff	movq	0xc0(%rsp), %rbx
000000000100be07	movzbl	0x48(%rbx), %edx
000000000100be0b	leaq	0x8(%rax,%rdx,8), %rax
000000000100be10	movq	%rax, 0x88(%rsp,%rcx)
000000000100be18	movq	0x28(%rsp), %rax
000000000100be1d	movq	0x40(%rsp), %rdx
000000000100be22	movq	0x68(%rsp), %rsi
000000000100be27	movq	0xd0(%rsp), %rdi
000000000100be2f	movq	0xc8(%rsp), %r9
000000000100be37	movzbl	0x27(%rsp), %r10d
000000000100be3d	movq	0x58(%rsp), %r11
000000000100be42	movq	0x48(%rsp), %r12
000000000100be47	movq	0x50(%rsp), %r13
000000000100be4c	movzbl	0x25(%rsp), %r14d
000000000100be52	movq	0x60(%rsp), %r15
000000000100be57	jmp	0x100bc22
000000000100be5c	movb	%r14b, 0x26(%rsp)
000000000100be61	movq	0x30(%rbx), %rax
000000000100be65	movq	0x18(%rax), %rax
000000000100be69	movq	(%rax), %rdx
000000000100be6c	movl	0xc(%r9), %eax
000000000100be70	movq	%rax, 0x8(%rsp)
000000000100be75	movq	%r11, (%rsp)
000000000100be79	movq	(%rdx), %rax
000000000100be7c	callq	*%rax
000000000100be7e	movq	0x10(%rsp), %rax
000000000100be83	movq	0xc8(%rsp), %rcx
000000000100be8b	movzbl	0x8(%rcx), %ebx
000000000100be8f	testb	$0x1, %bl
000000000100be92	je	0x100bf7a
000000000100be98	movq	0xc0(%rsp), %rbx
000000000100bea0	leaq	0x4e(%rbx), %rsi
000000000100bea4	cmpb	$0x0, (%rsi)
000000000100bea7	je	0x100befb
000000000100bea9	movzbl	0x27(%rsp), %esi
000000000100beae	btq	%rsi, %rax
000000000100beb2	setb	%r8b
000000000100beb6	movzbl	0x26(%rsp), %eax
000000000100bebb	movl	%esi, %ecx
000000000100bebd	movq	0x40(%rsp), %rdx
000000000100bec2	movq	0x68(%rsp), %rsi
000000000100bec7	movq	0xd0(%rsp), %rdi
000000000100becf	movq	0xc8(%rsp), %r9
000000000100bed7	movl	%ecx, %r10d
000000000100beda	movq	0x58(%rsp), %r11
000000000100bedf	movq	0x48(%rsp), %r12
000000000100bee4	movq	0x50(%rsp), %r13
000000000100bee9	movq	0x60(%rsp), %r15
000000000100beee	movl	%eax, %r14d
000000000100bef1	movq	0x28(%rsp), %rax
000000000100bef6	jmp	0x100bbf5
000000000100befb	movq	%rax, 0x30(%rsp)
000000000100bf00	movq	0x30(%rbx), %rax
000000000100bf04	movq	0x18(%rax), %rax
000000000100bf08	movq	0x8(%rax), %rdx
000000000100bf0c	movq	0x58(%rsp), %rax
000000000100bf11	movq	%rax, (%rsp)
000000000100bf15	movq	%rax, 0x8(%rsp)
000000000100bf1a	movq	(%rdx), %rcx
000000000100bf1d	callq	*%rcx
000000000100bf1f	leaq	0x10(%rsp), %rax
000000000100bf24	cmpb	$0x0, (%rax)
000000000100bf27	je	0x100bf43
000000000100bf29	movq	0x30(%rsp), %rax
000000000100bf2e	movq	0xc8(%rsp), %rcx
000000000100bf36	movq	0xc0(%rsp), %rbx
000000000100bf3e	jmp	0x100bea9
000000000100bf43	movq	0x30(%rsp), %rcx
000000000100bf48	shrq	$0x38, %rcx
000000000100bf4c	cmpb	$0x4, %cl
000000000100bf4f	jae	0x100bf54
000000000100bf51	addl	$0x4, %ecx
000000000100bf54	movzbl	0x26(%rsp), %r8d
000000000100bf5a	andl	$0x1, %r8d
000000000100bf5e	movq	0xc0(%rsp), %rbx
000000000100bf66	movzbl	0x27(%rsp), %esi
000000000100bf6b	movl	%ecx, %eax
000000000100bf6d	movq	0xc8(%rsp), %rcx
000000000100bf75	jmp	0x100bebb
000000000100bf7a	movq	0xc0(%rsp), %rbx
000000000100bf82	jmp	0x100bea9
000000000100bf87	movq	%r11, %rdx
000000000100bf8a	movq	%r13, %r11
000000000100bf8d	jmp	0x100bbc7
000000000100bf92	movzwl	0x4c(%rbx), %r12d
000000000100bf97	leaq	-0x8(%rsi,%r12), %r12
000000000100bf9c	movq	(%r12), %rsi
000000000100bfa0	testq	%rsi, %rsi
000000000100bfa3	je	0x100bfbf
000000000100bfa5	movq	%rsi, 0x68(%rsp)
000000000100bfaa	movzbl	0x48(%rbx), %r12d
000000000100bfaf	leaq	0x8(%rsi), %r13
000000000100bfb3	leaq	0x8(%rsi,%r12,8), %r12
000000000100bfb8	xorl	%eax, %eax
000000000100bfba	jmp	0x100bb8e
000000000100bfbf	movzbl	0x8(%r9), %eax
000000000100bfc4	testb	$0x2, %al
000000000100bfc6	jne	0x100bfd4
000000000100bfc8	movq	0x40(%rbx), %rax
000000000100bfcc	movzbl	0x17(%rax), %eax
000000000100bfd0	testb	$-0x80, %al
000000000100bfd2	je	0x100c002
000000000100bfd4	movq	0x20(%r9), %rax
000000000100bfd8	cmpq	%rax, %r8
000000000100bfdb	je	0x100bfed
000000000100bfdd	movq	0xb0(%rsp), %rbp
000000000100bfe5	addq	$0xb8, %rsp
000000000100bfec	retq
000000000100bfed	movq	%r9, (%rsp)
000000000100bff1	movq	%rbx, 0x8(%rsp)
000000000100bff6	movq	%r11, 0x10(%rsp)
000000000100bffb	callq	runtime.advanceEvacuationMark
000000000100c000	jmp	0x100bfdd
000000000100c002	movzwl	0x4c(%rbx), %eax
000000000100c006	movq	%rax, %rcx
000000000100c009	imulq	%r8, %rax
000000000100c00d	addq	0x18(%r9), %rax
000000000100c011	addq	$0x8, %rax
000000000100c015	movq	%rax, (%rsp)
000000000100c019	leaq	-0x8(%rcx), %rax
000000000100c01d	movq	%rax, 0x8(%rsp)
000000000100c022	callq	runtime.memclrHasPointers
000000000100c027	movq	0xc0(%rsp), %rbx
000000000100c02f	movq	0xd0(%rsp), %r8
000000000100c037	movq	0xc8(%rsp), %r9
000000000100c03f	movq	0x40(%rsp), %r11
000000000100c044	jmp	0x100bfd4
000000000100c046	leaq	0x90(%rsp), %r12
000000000100c04e	testb	%al, (%r12)
000000000100c052	leaq	(%r11,%r8), %r12
000000000100c056	movzwl	0x4c(%rbx), %r13d
000000000100c05b	imulq	%r13, %r12
000000000100c05f	addq	0x10(%r9), %r12
000000000100c063	movq	%r12, 0x90(%rsp)
000000000100c06b	leaq	0x8(%r12), %r13
000000000100c070	movq	%r13, 0xa0(%rsp)
000000000100c078	movzbl	0x48(%rbx), %r13d
000000000100c07d	leaq	0x8(%r12,%r13,8), %r12
000000000100c082	movq	%r12, 0xa8(%rsp)
000000000100c08a	jmp	0x100bb6d
000000000100c08f	decl	%r10d
000000000100c092	jmp	0x100bae7
000000000100c097	callq	runtime.panicindex
000000000100c09c	ud2
000000000100c09e	leaq	0x5f3c6(%rip), %rax
000000000100c0a5	movq	%rax, (%rsp)
000000000100c0a9	movq	$0xd, 0x8(%rsp)
000000000100c0b2	callq	runtime.throw
000000000100c0b7	ud2
000000000100c0b9	callq	runtime.morestack_noctxt
000000000100c0be	jmp	runtime.evacuate
000000000100c0c3	int3
000000000100c0c4	int3
000000000100c0c5	int3
000000000100c0c6	int3
000000000100c0c7	int3
000000000100c0c8	int3
000000000100c0c9	int3
000000000100c0ca	int3
000000000100c0cb	int3
000000000100c0cc	int3
000000000100c0cd	int3
000000000100c0ce	int3
000000000100c0cf	int3
runtime.advanceEvacuationMark:
000000000100c0d0	movq	%gs:0x30, %rcx
000000000100c0d9	cmpq	0x10(%rcx), %rsp
000000000100c0dd	jbe	0x100c1a1
000000000100c0e3	subq	$0x8, %rsp
000000000100c0e7	movq	%rbp, (%rsp)
000000000100c0eb	leaq	(%rsp), %rbp
000000000100c0ef	movq	0x10(%rsp), %rcx
000000000100c0f4	movq	0x20(%rcx), %rdx
000000000100c0f8	leaq	0x1(%rdx), %rbx
000000000100c0fc	movq	%rbx, 0x20(%rcx)
000000000100c100	addq	$0x401, %rdx
000000000100c107	movq	0x20(%rsp), %rbx
000000000100c10c	cmpq	%rbx, %rdx
000000000100c10f	cmovaq	%rbx, %rdx
000000000100c113	movq	0x18(%rsp), %rsi
000000000100c118	jmp	0x100c121
000000000100c11a	incq	%r8
000000000100c11d	movq	%r8, 0x20(%rcx)
000000000100c121	movq	0x20(%rcx), %r8
000000000100c125	cmpq	%rdx, %r8
000000000100c128	je	0x100c144
000000000100c12a	movzwl	0x4c(%rsi), %r9d
000000000100c12f	imulq	%r8, %r9
000000000100c133	addq	0x18(%rcx), %r9
000000000100c137	movzbl	(%r9), %r9d
000000000100c13b	decl	%r9d
000000000100c13e	cmpb	$0x3, %r9b
000000000100c142	jb	0x100c11a
000000000100c144	cmpq	%rbx, %r8
000000000100c147	jne	0x100c17e
000000000100c149	cmpl	$0x0, 0xc8ae0(%rip)
000000000100c150	jne	0x100c194
000000000100c152	movq	$0x0, 0x18(%rcx)
000000000100c15a	movq	0x28(%rcx), %rdx
000000000100c15e	testq	%rdx, %rdx
000000000100c161	je	0x100c174
000000000100c163	cmpl	$0x0, 0xc8ac6(%rip)
000000000100c16a	jne	0x100c187
000000000100c16c	movq	$0x0, 0x8(%rdx)
000000000100c174	movzbl	0x8(%rcx), %eax
000000000100c178	andl	$-0x9, %eax
000000000100c17b	movb	%al, 0x8(%rcx)
000000000100c17e	movq	(%rsp), %rbp
000000000100c182	addq	$0x8, %rsp
000000000100c186	retq
000000000100c187	leaq	0x8(%rdx), %rdi
000000000100c18b	xorl	%eax, %eax
000000000100c18d	callq	runtime.gcWriteBarrier
000000000100c192	jmp	0x100c174
000000000100c194	leaq	0x18(%rcx), %rdi
000000000100c198	xorl	%eax, %eax
000000000100c19a	callq	runtime.gcWriteBarrier
000000000100c19f	jmp	0x100c15a
000000000100c1a1	callq	runtime.morestack_noctxt
000000000100c1a6	jmp	runtime.advanceEvacuationMark
000000000100c1ab	int3
000000000100c1ac	int3
000000000100c1ad	int3
000000000100c1ae	int3
000000000100c1af	int3
runtime.mapaccess1_fast32:
000000000100c1b0	movq	%gs:0x30, %rcx
000000000100c1b9	cmpq	0x10(%rcx), %rsp
000000000100c1bd	jbe	0x100c345
000000000100c1c3	subq	$0x20, %rsp
000000000100c1c7	movq	%rbp, 0x18(%rsp)
000000000100c1cc	leaq	0x18(%rsp), %rbp
000000000100c1d1	movq	0x30(%rsp), %rax
000000000100c1d6	testq	%rax, %rax
000000000100c1d9	je	0x100c314
000000000100c1df	cmpq	$0x0, (%rax)
000000000100c1e3	je	0x100c314
000000000100c1e9	movzbl	0x8(%rax), %ecx
000000000100c1ed	testb	$0x4, %cl
000000000100c1f0	jne	0x100c32a
000000000100c1f6	cmpb	$0x0, 0x9(%rax)
000000000100c1fa	jne	0x100c276
000000000100c1fc	movq	0x10(%rax), %rax
000000000100c200	jmp	0x100c253
000000000100c202	incq	%rdx
000000000100c205	addq	$0x4, %rcx
000000000100c209	cmpq	$0x8, %rdx
000000000100c20d	jae	0x100c240
000000000100c20f	movl	0x38(%rsp), %ebx
000000000100c213	cmpl	%ebx, (%rcx)
000000000100c215	jne	0x100c202
000000000100c217	movzbl	(%rdx,%rax), %ebx
000000000100c21b	testb	%bl, %bl
000000000100c21d	je	0x100c202
000000000100c21f	movq	0x28(%rsp), %rcx
000000000100c224	movzbl	0x4a(%rcx), %ecx
000000000100c228	imulq	%rdx, %rcx
000000000100c22c	leaq	0x28(%rcx,%rax), %rax
000000000100c231	movq	%rax, 0x40(%rsp)
000000000100c236	movq	0x18(%rsp), %rbp
000000000100c23b	addq	$0x20, %rsp
000000000100c23f	retq
000000000100c240	movq	0x28(%rsp), %rcx
000000000100c245	movzwl	0x4c(%rcx), %edx
000000000100c249	leaq	-0x8(%rax,%rdx), %rdx
000000000100c24e	testb	%al, (%rcx)
000000000100c250	movq	(%rdx), %rax
000000000100c253	testq	%rax, %rax
000000000100c256	je	0x100c260
000000000100c258	leaq	0x8(%rax), %rcx
000000000100c25c	xorl	%edx, %edx
000000000100c25e	jmp	0x100c209
000000000100c260	leaq	runtime.zeroVal(%rip), %rax
000000000100c267	movq	%rax, 0x40(%rsp)
000000000100c26c	movq	0x18(%rsp), %rbp
000000000100c271	addq	$0x20, %rsp
000000000100c275	retq
000000000100c276	movq	0x28(%rsp), %rcx
000000000100c27b	movq	0x30(%rcx), %rbx
000000000100c27f	movq	0x18(%rbx), %rbx
000000000100c283	movq	(%rbx), %rdx
000000000100c286	movl	0xc(%rax), %ebx
000000000100c289	movq	%rbx, 0x8(%rsp)
000000000100c28e	leaq	0x38(%rsp), %rbx
000000000100c293	movq	%rbx, (%rsp)
000000000100c297	movq	(%rdx), %rbx
000000000100c29a	callq	*%rbx
000000000100c29c	movq	0x10(%rsp), %rax
000000000100c2a1	movq	0x30(%rsp), %rcx
000000000100c2a6	movzbl	0x9(%rcx), %ebx
000000000100c2aa	movq	%rcx, %rdx
000000000100c2ad	movl	%ebx, %ecx
000000000100c2af	movl	$0x1, %esi
000000000100c2b4	shlq	%cl, %rsi
000000000100c2b7	leaq	-0x1(%rsi), %rcx
000000000100c2bb	movq	%rcx, %rbx
000000000100c2be	andq	%rax, %rcx
000000000100c2c1	movq	0x28(%rsp), %rsi
000000000100c2c6	movzwl	0x4c(%rsi), %edi
000000000100c2ca	imulq	%rdi, %rcx
000000000100c2ce	movq	0x18(%rdx), %r8
000000000100c2d2	addq	0x10(%rdx), %rcx
000000000100c2d6	testq	%r8, %r8
000000000100c2d9	je	0x100c30c
000000000100c2db	movq	%rbx, %r9
000000000100c2de	shrq	%rbx
000000000100c2e1	movzbl	0x8(%rdx), %edx
000000000100c2e5	testb	$0x8, %dl
000000000100c2e8	cmovneq	%r9, %rbx
000000000100c2ec	andq	%rax, %rbx
000000000100c2ef	imulq	%rdi, %rbx
000000000100c2f3	leaq	(%r8,%rbx), %rax
000000000100c2f7	testb	%al, (%rax)
000000000100c2f9	movzbl	(%rbx,%r8), %edx
000000000100c2fe	decl	%edx
000000000100c300	cmpb	$0x3, %dl
000000000100c303	cmovbq	%rcx, %rax
000000000100c307	jmp	0x100c253
000000000100c30c	movq	%rcx, %rax
000000000100c30f	jmp	0x100c253
000000000100c314	leaq	runtime.zeroVal(%rip), %rax
000000000100c31b	movq	%rax, 0x40(%rsp)
000000000100c320	movq	0x18(%rsp), %rbp
000000000100c325	addq	$0x20, %rsp
000000000100c329	retq
000000000100c32a	leaq	0x61482(%rip), %rax
000000000100c331	movq	%rax, (%rsp)
000000000100c335	movq	$0x21, 0x8(%rsp)
000000000100c33e	callq	runtime.throw
000000000100c343	ud2
000000000100c345	callq	runtime.morestack_noctxt
000000000100c34a	jmp	runtime.mapaccess1_fast32
000000000100c34f	int3
runtime.mapaccess2_fast32:
000000000100c350	movq	%gs:0x30, %rcx
000000000100c359	cmpq	0x10(%rcx), %rsp
000000000100c35d	jbe	0x100c4f8
000000000100c363	subq	$0x20, %rsp
000000000100c367	movq	%rbp, 0x18(%rsp)
000000000100c36c	leaq	0x18(%rsp), %rbp
000000000100c371	movq	0x30(%rsp), %rax
000000000100c376	testq	%rax, %rax
000000000100c379	je	0x100c4c2
000000000100c37f	cmpq	$0x0, (%rax)
000000000100c383	je	0x100c4c2
000000000100c389	movzbl	0x8(%rax), %ecx
000000000100c38d	testb	$0x4, %cl
000000000100c390	jne	0x100c4dd
000000000100c396	cmpb	$0x0, 0x9(%rax)
000000000100c39a	jne	0x100c424
000000000100c3a0	movq	0x10(%rax), %rax
000000000100c3a4	jmp	0x100c3fc
000000000100c3a6	incq	%rdx
000000000100c3a9	addq	$0x4, %rcx
000000000100c3ad	cmpq	$0x8, %rdx
000000000100c3b1	jae	0x100c3e9
000000000100c3b3	movl	0x38(%rsp), %ebx
000000000100c3b7	cmpl	%ebx, (%rcx)
000000000100c3b9	jne	0x100c3a6
000000000100c3bb	movzbl	(%rdx,%rax), %ebx
000000000100c3bf	testb	%bl, %bl
000000000100c3c1	je	0x100c3a6
000000000100c3c3	movq	0x28(%rsp), %rcx
000000000100c3c8	movzbl	0x4a(%rcx), %ecx
000000000100c3cc	imulq	%rdx, %rcx
000000000100c3d0	leaq	0x28(%rcx,%rax), %rax
000000000100c3d5	movq	%rax, 0x40(%rsp)
000000000100c3da	movb	$0x1, 0x48(%rsp)
000000000100c3df	movq	0x18(%rsp), %rbp
000000000100c3e4	addq	$0x20, %rsp
000000000100c3e8	retq
000000000100c3e9	movq	0x28(%rsp), %rcx
000000000100c3ee	movzwl	0x4c(%rcx), %edx
000000000100c3f2	leaq	-0x8(%rax,%rdx), %rdx
000000000100c3f7	testb	%al, (%rcx)
000000000100c3f9	movq	(%rdx), %rax
000000000100c3fc	testq	%rax, %rax
000000000100c3ff	je	0x100c409
000000000100c401	leaq	0x8(%rax), %rcx
000000000100c405	xorl	%edx, %edx
000000000100c407	jmp	0x100c3ad
000000000100c409	leaq	runtime.zeroVal(%rip), %rax
000000000100c410	movq	%rax, 0x40(%rsp)
000000000100c415	movb	$0x0, 0x48(%rsp)
000000000100c41a	movq	0x18(%rsp), %rbp
000000000100c41f	addq	$0x20, %rsp
000000000100c423	retq
000000000100c424	movq	0x28(%rsp), %rcx
000000000100c429	movq	0x30(%rcx), %rbx
000000000100c42d	movq	0x18(%rbx), %rbx
000000000100c431	movq	(%rbx), %rdx
000000000100c434	movl	0xc(%rax), %ebx
000000000100c437	movq	%rbx, 0x8(%rsp)
000000000100c43c	leaq	0x38(%rsp), %rbx
000000000100c441	movq	%rbx, (%rsp)
000000000100c445	movq	(%rdx), %rbx
000000000100c448	callq	*%rbx
000000000100c44a	movq	0x10(%rsp), %rax
000000000100c44f	movq	0x30(%rsp), %rcx
000000000100c454	movzbl	0x9(%rcx), %ebx
000000000100c458	movq	%rcx, %rdx
000000000100c45b	movl	%ebx, %ecx
000000000100c45d	movl	$0x1, %esi
000000000100c462	shlq	%cl, %rsi
000000000100c465	leaq	-0x1(%rsi), %rcx
000000000100c469	movq	%rcx, %rbx
000000000100c46c	andq	%rax, %rcx
000000000100c46f	movq	0x28(%rsp), %rsi
000000000100c474	movzwl	0x4c(%rsi), %edi
000000000100c478	imulq	%rdi, %rcx
000000000100c47c	movq	0x18(%rdx), %r8
000000000100c480	addq	0x10(%rdx), %rcx
000000000100c484	testq	%r8, %r8
000000000100c487	je	0x100c4ba
000000000100c489	movq	%rbx, %r9
000000000100c48c	shrq	%rbx
000000000100c48f	movzbl	0x8(%rdx), %edx
000000000100c493	testb	$0x8, %dl
000000000100c496	cmovneq	%r9, %rbx
000000000100c49a	andq	%rax, %rbx
000000000100c49d	imulq	%rdi, %rbx
000000000100c4a1	leaq	(%r8,%rbx), %rax
000000000100c4a5	testb	%al, (%rax)
000000000100c4a7	movzbl	(%rbx,%r8), %edx
000000000100c4ac	decl	%edx
000000000100c4ae	cmpb	$0x3, %dl
000000000100c4b1	cmovbq	%rcx, %rax
000000000100c4b5	jmp	0x100c3fc
000000000100c4ba	movq	%rcx, %rax
000000000100c4bd	jmp	0x100c3fc
000000000100c4c2	leaq	runtime.zeroVal(%rip), %rax
000000000100c4c9	movq	%rax, 0x40(%rsp)
000000000100c4ce	movb	$0x0, 0x48(%rsp)
000000000100c4d3	movq	0x18(%rsp), %rbp
000000000100c4d8	addq	$0x20, %rsp
000000000100c4dc	retq
000000000100c4dd	leaq	0x612cf(%rip), %rax
000000000100c4e4	movq	%rax, (%rsp)
000000000100c4e8	movq	$0x21, 0x8(%rsp)
000000000100c4f1	callq	runtime.throw
000000000100c4f6	ud2
000000000100c4f8	callq	runtime.morestack_noctxt
000000000100c4fd	jmp	runtime.mapaccess2_fast32
000000000100c502	int3
000000000100c503	int3
000000000100c504	int3
000000000100c505	int3
000000000100c506	int3
000000000100c507	int3
000000000100c508	int3
000000000100c509	int3
000000000100c50a	int3
000000000100c50b	int3
000000000100c50c	int3
000000000100c50d	int3
000000000100c50e	int3
000000000100c50f	int3
runtime.mapassign_fast32:
000000000100c510	movq	%gs:0x30, %rcx
000000000100c519	cmpq	0x10(%rcx), %rsp
000000000100c51d	jbe	0x100c833
000000000100c523	subq	$0x38, %rsp
000000000100c527	movq	%rbp, 0x30(%rsp)
000000000100c52c	leaq	0x30(%rsp), %rbp
000000000100c531	movq	0x48(%rsp), %rax
000000000100c536	testq	%rax, %rax
000000000100c539	je	0x100c815
000000000100c53f	movzbl	0x8(%rax), %ecx
000000000100c543	testb	$0x4, %cl
000000000100c546	jne	0x100c7fa
000000000100c54c	movq	0x40(%rsp), %rcx
000000000100c551	movq	0x30(%rcx), %rbx
000000000100c555	movq	0x18(%rbx), %rbx
000000000100c559	movq	(%rbx), %rdx
000000000100c55c	movl	0xc(%rax), %ebx
000000000100c55f	movq	%rbx, 0x8(%rsp)
000000000100c564	leaq	0x50(%rsp), %rbx
000000000100c569	movq	%rbx, (%rsp)
000000000100c56d	movq	(%rdx), %rbx
000000000100c570	callq	*%rbx
000000000100c572	movq	0x10(%rsp), %rax
000000000100c577	movq	%rax, 0x20(%rsp)
000000000100c57c	movq	0x48(%rsp), %rcx
000000000100c581	movzbl	0x8(%rcx), %ebx
000000000100c585	orl	$0x4, %ebx
000000000100c588	movb	%bl, 0x8(%rcx)
000000000100c58b	cmpq	$0x0, 0x10(%rcx)
000000000100c590	je	0x100c799
000000000100c596	movq	0x40(%rsp), %rdx
000000000100c59b	jmp	0x100c69e
000000000100c5a0	incq	%r11
000000000100c5a3	movq	%rbx, %rcx
000000000100c5a6	movq	%r9, %r8
000000000100c5a9	movq	%r10, %rbx
000000000100c5ac	movq	%r11, %r9
000000000100c5af	cmpq	$0x8, %r9
000000000100c5b3	jae	0x100c61f
000000000100c5b5	testb	%al, (%rbx)
000000000100c5b7	movzbl	(%rbx,%r9), %r10d
000000000100c5bc	testb	%r10b, %r10b
000000000100c5bf	jne	0x100c5d4
000000000100c5c1	testq	%rcx, %rcx
000000000100c5c4	movq	%rbx, %r10
000000000100c5c7	cmovneq	%rcx, %rbx
000000000100c5cb	movq	%r9, %r11
000000000100c5ce	cmovneq	%r8, %r9
000000000100c5d2	jmp	0x100c5a0
000000000100c5d4	movq	%rbx, %r10
000000000100c5d7	leaq	0x8(%rbx,%r9,4), %rbx
000000000100c5dc	movl	0x50(%rsp), %r11d
000000000100c5e1	cmpl	%r11d, (%rbx)
000000000100c5e4	je	0x100c5f1
000000000100c5e6	movq	%r9, %r11
000000000100c5e9	movq	%rcx, %rbx
000000000100c5ec	movq	%r8, %r9
000000000100c5ef	jmp	0x100c5a0
000000000100c5f1	movzbl	0x4a(%rdx), %eax
000000000100c5f5	imulq	%rax, %r9
000000000100c5f9	movzbl	0x8(%rsi), %eax
000000000100c5fd	leaq	0x28(%r9,%r10), %rcx
000000000100c602	testb	$0x4, %al
000000000100c604	je	0x100c7df
000000000100c60a	andl	$-0x5, %eax
000000000100c60d	movb	%al, 0x8(%rsi)
000000000100c610	movq	%rcx, 0x58(%rsp)
000000000100c615	movq	0x30(%rsp), %rbp
000000000100c61a	addq	$0x38, %rsp
000000000100c61e	retq
000000000100c61f	movq	%rbx, %r9
000000000100c622	leaq	-0x8(%rbx,%rdi), %rbx
000000000100c627	movq	(%rbx), %rbx
000000000100c62a	testq	%rbx, %rbx
000000000100c62d	je	0x100c637
000000000100c62f	xorl	%r9d, %r9d
000000000100c632	jmp	0x100c5af
000000000100c637	cmpq	$0x0, 0x18(%rsi)
000000000100c63c	jne	0x100c763
000000000100c642	movq	(%rsi), %rbx
000000000100c645	incq	%rbx
000000000100c648	movzbl	0x9(%rsi), %edi
000000000100c64c	cmpq	$0x8, %rbx
000000000100c650	jle	0x100c757
000000000100c656	movq	%rcx, %r10
000000000100c659	movl	%edi, %ecx
000000000100c65b	movl	$0x1, %r11d
000000000100c661	shlq	%cl, %r11
000000000100c664	shrq	%r11
000000000100c667	leaq	(%r11,%r11,2), %r12
000000000100c66b	leaq	(%r11,%r12,4), %r11
000000000100c66f	cmpq	%r11, %rbx
000000000100c672	seta	%bl
000000000100c675	testb	%bl, %bl
000000000100c677	je	0x100c6d7
000000000100c679	movq	%rdx, (%rsp)
000000000100c67d	movq	%rsi, 0x8(%rsp)
000000000100c682	callq	runtime.hashGrow
000000000100c687	movq	0x48(%rsp), %rax
000000000100c68c	movq	0x20(%rsp), %rcx
000000000100c691	movq	0x40(%rsp), %rdx
000000000100c696	movq	%rcx, %rax
000000000100c699	movq	0x48(%rsp), %rcx
000000000100c69e	movzbl	0x9(%rcx), %ebx
000000000100c6a2	movq	%rcx, %rsi
000000000100c6a5	movl	%ebx, %ecx
000000000100c6a7	movl	$0x1, %edi
000000000100c6ac	shlq	%cl, %rdi
000000000100c6af	leaq	-0x1(%rdi), %rbx
000000000100c6b3	andq	%rax, %rbx
000000000100c6b6	cmpq	$0x0, 0x18(%rsi)
000000000100c6bb	jne	0x100c768
000000000100c6c1	movzwl	0x4c(%rdx), %edi
000000000100c6c5	imulq	%rdi, %rbx
000000000100c6c9	addq	0x10(%rsi), %rbx
000000000100c6cd	xorl	%ecx, %ecx
000000000100c6cf	xorl	%r8d, %r8d
000000000100c6d2	jmp	0x100c62f
000000000100c6d7	movzwl	0xa(%rsi), %ebx
000000000100c6db	cmpb	$0xf, %cl
000000000100c6de	jbe	0x100c6e5
000000000100c6e0	movl	$0xf, %ecx
000000000100c6e5	andl	$0xf, %ecx
000000000100c6e8	movl	$0x1, %edi
000000000100c6ed	shll	%cl, %edi
000000000100c6ef	cmpw	%di, %bx
000000000100c6f2	jae	0x100c679
000000000100c6f4	testq	%r10, %r10
000000000100c6f7	je	0x100c72b
000000000100c6f9	shrq	$0x38, %rax
000000000100c6fd	cmpb	$0x4, %al
000000000100c6ff	jae	0x100c704
000000000100c701	addl	$0x4, %eax
000000000100c704	testb	%al, (%r10)
000000000100c707	movq	%r8, %r9
000000000100c70a	andq	$0x7, %r8
000000000100c70e	movb	%al, (%r10,%r8)
000000000100c712	movq	%r10, %rax
000000000100c715	leaq	0x8(%r10,%r9,4), %rcx
000000000100c71a	movl	0x50(%rsp), %ebx
000000000100c71e	movl	%ebx, (%rcx)
000000000100c720	incq	(%rsi)
000000000100c723	movq	%rax, %r10
000000000100c726	jmp	0x100c5f1
000000000100c72b	movq	%rsi, (%rsp)
000000000100c72f	movq	%rdx, 0x8(%rsp)
000000000100c734	movq	%r9, 0x10(%rsp)
000000000100c739	callq	"runtime.(*hmap).newoverflow"
000000000100c73e	movq	0x18(%rsp), %r10
000000000100c743	movq	0x20(%rsp), %rax
000000000100c748	movq	0x40(%rsp), %rdx
000000000100c74d	movq	0x48(%rsp), %rsi
000000000100c752	xorl	%r8d, %r8d
000000000100c755	jmp	0x100c6f9
000000000100c757	movq	%rcx, %r10
000000000100c75a	xorl	%ebx, %ebx
000000000100c75c	movl	%edi, %ecx
000000000100c75e	jmp	0x100c675
000000000100c763	movq	%rcx, %r10
000000000100c766	jmp	0x100c6f4
000000000100c768	movq	%rbx, 0x28(%rsp)
000000000100c76d	movq	%rdx, (%rsp)
000000000100c771	movq	%rsi, 0x8(%rsp)
000000000100c776	movq	%rbx, 0x10(%rsp)
000000000100c77b	callq	runtime.growWork_fast32
000000000100c780	movq	0x20(%rsp), %rax
000000000100c785	movq	0x40(%rsp), %rdx
000000000100c78a	movq	0x28(%rsp), %rbx
000000000100c78f	movq	0x48(%rsp), %rsi
000000000100c794	jmp	0x100c6c1
000000000100c799	movq	0x40(%rsp), %rax
000000000100c79e	movq	0x40(%rax), %rcx
000000000100c7a2	movq	%rcx, (%rsp)
000000000100c7a6	callq	runtime.newobject
000000000100c7ab	movq	0x8(%rsp), %rax
000000000100c7b0	cmpl	$0x0, 0xc8479(%rip)
000000000100c7b7	jne	0x100c7cf
000000000100c7b9	movq	0x48(%rsp), %rdx
000000000100c7be	movq	%rax, 0x10(%rdx)
000000000100c7c2	movq	0x20(%rsp), %rax
000000000100c7c7	movq	%rdx, %rcx
000000000100c7ca	jmp	0x100c596
000000000100c7cf	movq	0x48(%rsp), %rdx
000000000100c7d4	leaq	0x10(%rdx), %rdi
000000000100c7d8	callq	runtime.gcWriteBarrier
000000000100c7dd	jmp	0x100c7c2
000000000100c7df	leaq	0x5f7da(%rip), %rax
000000000100c7e6	movq	%rax, (%rsp)
000000000100c7ea	movq	$0x15, 0x8(%rsp)
000000000100c7f3	callq	runtime.throw
000000000100c7f8	ud2
000000000100c7fa	leaq	0x5f7bf(%rip), %rax
000000000100c801	movq	%rax, (%rsp)
000000000100c805	movq	$0x15, 0x8(%rsp)
000000000100c80e	callq	runtime.throw
000000000100c813	ud2
000000000100c815	leaq	0x4f8e4(%rip), %rax
000000000100c81c	movq	%rax, (%rsp)
000000000100c820	leaq	runtime.statictmp_12(%rip), %rax
000000000100c827	movq	%rax, 0x8(%rsp)
000000000100c82c	callq	runtime.gopanic
000000000100c831	ud2
000000000100c833	callq	runtime.morestack_noctxt
000000000100c838	jmp	runtime.mapassign_fast32
000000000100c83d	int3
000000000100c83e	int3
000000000100c83f	int3
runtime.growWork_fast32:
000000000100c840	movq	%gs:0x30, %rcx
000000000100c849	cmpq	0x10(%rcx), %rsp
000000000100c84d	jbe	0x100c8d9
000000000100c853	subq	$0x20, %rsp
000000000100c857	movq	%rbp, 0x18(%rsp)
000000000100c85c	leaq	0x18(%rsp), %rbp
000000000100c861	movq	0x30(%rsp), %rax
000000000100c866	movzbl	0x9(%rax), %edx
000000000100c86a	movzbl	0x8(%rax), %ebx
000000000100c86e	testb	$0x8, %bl
000000000100c871	je	0x100c8d5
000000000100c873	movq	0x28(%rsp), %rbx
000000000100c878	movq	%rbx, (%rsp)
000000000100c87c	movq	%rax, 0x8(%rsp)
000000000100c881	movl	%edx, %ecx
000000000100c883	movl	$0x1, %esi
000000000100c888	shlq	%cl, %rsi
000000000100c88b	leaq	-0x1(%rsi), %rdx
000000000100c88f	movq	0x38(%rsp), %rsi
000000000100c894	andq	%rdx, %rsi
000000000100c897	movq	%rsi, 0x10(%rsp)
000000000100c89c	callq	runtime.evacuate_fast32
000000000100c8a1	movq	0x30(%rsp), %rax
000000000100c8a6	cmpq	$0x0, 0x18(%rax)
000000000100c8ab	jne	0x100c8b7
000000000100c8ad	movq	0x18(%rsp), %rbp
000000000100c8b2	addq	$0x20, %rsp
000000000100c8b6	retq
000000000100c8b7	movq	0x20(%rax), %rcx
000000000100c8bb	movq	%rcx, 0x10(%rsp)
000000000100c8c0	movq	0x28(%rsp), %rcx
000000000100c8c5	movq	%rcx, (%rsp)
000000000100c8c9	movq	%rax, 0x8(%rsp)
000000000100c8ce	callq	runtime.evacuate_fast32
000000000100c8d3	jmp	0x100c8ad
000000000100c8d5	decl	%edx
000000000100c8d7	jmp	0x100c873
000000000100c8d9	callq	runtime.morestack_noctxt
000000000100c8de	jmp	runtime.growWork_fast32
000000000100c8e3	int3
000000000100c8e4	int3
000000000100c8e5	int3
000000000100c8e6	int3
000000000100c8e7	int3
000000000100c8e8	int3
000000000100c8e9	int3
000000000100c8ea	int3
000000000100c8eb	int3
000000000100c8ec	int3
000000000100c8ed	int3
000000000100c8ee	int3
000000000100c8ef	int3
runtime.evacuate_fast32:
000000000100c8f0	movq	%gs:0x30, %rcx
000000000100c8f9	leaq	-0x20(%rsp), %rax
000000000100c8fe	cmpq	0x10(%rcx), %rax
000000000100c902	jbe	0x100cd04
000000000100c908	subq	$0xa0, %rsp
000000000100c90f	movq	%rbp, 0x98(%rsp)
000000000100c917	leaq	0x98(%rsp), %rbp
000000000100c91f	xorps	%xmm0, %xmm0
000000000100c922	movups	%xmm0, 0x58(%rsp)
000000000100c927	movups	%xmm0, 0x68(%rsp)
000000000100c92c	movups	%xmm0, 0x78(%rsp)
000000000100c931	movups	%xmm0, 0x88(%rsp)
000000000100c939	movq	0xa8(%rsp), %rax
000000000100c941	movzwl	0x4c(%rax), %ebx
000000000100c945	movq	0xb8(%rsp), %rsi
000000000100c94d	imulq	%rsi, %rbx
000000000100c951	movq	0xb0(%rsp), %rdi
000000000100c959	addq	0x18(%rdi), %rbx
000000000100c95d	movzbl	0x9(%rdi), %r8d
000000000100c962	movzbl	0x8(%rdi), %r9d
000000000100c967	testb	$0x8, %r9b
000000000100c96b	je	0x100ccda
000000000100c971	movl	%r8d, %ecx
000000000100c974	movl	$0x1, %r9d
000000000100c97a	shlq	%cl, %r9
000000000100c97d	movzbl	(%rbx), %r10d
000000000100c981	decl	%r10d
000000000100c984	cmpb	$0x3, %r10b
000000000100c988	jb	0x100cc2d
000000000100c98e	xorps	%xmm0, %xmm0
000000000100c991	movups	%xmm0, 0x58(%rsp)
000000000100c996	movups	%xmm0, 0x68(%rsp)
000000000100c99b	movups	%xmm0, 0x78(%rsp)
000000000100c9a0	movups	%xmm0, 0x88(%rsp)
000000000100c9a8	leaq	0x58(%rsp), %r10
000000000100c9ad	testb	%al, (%r10)
000000000100c9b0	movzwl	0x4c(%rax), %r10d
000000000100c9b5	imulq	%rsi, %r10
000000000100c9b9	addq	0x10(%rdi), %r10
000000000100c9bd	movq	%r10, 0x58(%rsp)
000000000100c9c2	leaq	0x8(%r10), %r11
000000000100c9c6	movq	%r11, 0x68(%rsp)
000000000100c9cb	addq	$0x28, %r10
000000000100c9cf	movq	%r10, 0x70(%rsp)
000000000100c9d4	movzbl	0x8(%rdi), %r10d
000000000100c9d9	testb	$0x8, %r10b
000000000100c9dd	je	0x100cc9f
000000000100c9e3	movb	%cl, 0x27(%rsp)
000000000100c9e7	movq	%r9, 0x38(%rsp)
000000000100c9ec	jmp	0x100cbfe
000000000100c9f1	incq	%rdx
000000000100c9f4	movzbl	0x4a(%rax), %r12d
000000000100c9f9	addq	$0x4, %r10
000000000100c9fd	addq	%r12, %r11
000000000100ca00	cmpq	$0x8, %rdx
000000000100ca04	jge	0x100cbf1
000000000100ca0a	movzbl	(%rbx,%rdx), %r12d
000000000100ca0f	testb	%r12b, %r12b
000000000100ca12	jne	0x100ca1a
000000000100ca14	movb	$0x1, (%rbx,%rdx)
000000000100ca18	jmp	0x100c9f1
000000000100ca1a	cmpb	$0x4, %r12b
000000000100ca1e	jb	0x100cce9
000000000100ca24	movq	%rdx, 0x28(%rsp)
000000000100ca29	movb	%r12b, 0x26(%rsp)
000000000100ca2e	movq	%r11, 0x48(%rsp)
000000000100ca33	movq	%r10, 0x40(%rsp)
000000000100ca38	movzbl	0x8(%rdi), %r13d
000000000100ca3d	testb	$0x8, %r13b
000000000100ca41	je	0x100cb83
000000000100ca47	xorl	%r13d, %r13d
000000000100ca4a	leal	0x2(%r13), %r14d
000000000100ca4e	movb	%r14b, (%rbx,%rdx)
000000000100ca52	movzbl	%r13b, %r13d
000000000100ca56	cmpq	$0x2, %r13
000000000100ca5a	jae	0x100cce2
000000000100ca60	shlq	$0x5, %r13
000000000100ca64	movq	%r13, 0x30(%rsp)
000000000100ca69	movq	0x60(%rsp,%r13), %r14
000000000100ca6e	cmpq	$0x8, %r14
000000000100ca72	je	0x100cb24
000000000100ca78	movq	0x58(%rsp,%r13), %rcx
000000000100ca7d	testb	%al, (%rcx)
000000000100ca7f	movq	0x60(%rsp,%r13), %rdx
000000000100ca84	andq	$0x7, %rdx
000000000100ca88	movb	%r12b, (%rcx,%rdx)
000000000100ca8c	movq	0x68(%rsp,%r13), %rcx
000000000100ca91	movl	(%r10), %edx
000000000100ca94	movl	%edx, (%rcx)
000000000100ca96	movq	0x38(%rax), %rcx
000000000100ca9a	movq	0x70(%rsp,%r13), %rdx
000000000100ca9f	movq	%rdx, 0x8(%rsp)
000000000100caa4	movq	%rcx, (%rsp)
000000000100caa8	movq	%r11, 0x10(%rsp)
000000000100caad	callq	runtime.typedmemmove
000000000100cab2	movq	0x30(%rsp), %rax
000000000100cab7	movq	0x60(%rsp,%rax), %rcx
000000000100cabc	incq	%rcx
000000000100cabf	movq	%rcx, 0x60(%rsp,%rax)
000000000100cac4	movq	0x68(%rsp,%rax), %rcx
000000000100cac9	addq	$0x4, %rcx
000000000100cacd	movq	%rcx, 0x68(%rsp,%rax)
000000000100cad2	movq	0x70(%rsp,%rax), %rcx
000000000100cad7	movq	0xa8(%rsp), %rdx
000000000100cadf	movzbl	0x4a(%rdx), %ebx
000000000100cae3	addq	%rbx, %rcx
000000000100cae6	movq	%rcx, 0x70(%rsp,%rax)
000000000100caeb	movq	%rdx, %rax
000000000100caee	movzbl	0x27(%rsp), %ecx
000000000100caf3	movq	0x28(%rsp), %rdx
000000000100caf8	movq	0x50(%rsp), %rbx
000000000100cafd	movq	0xb8(%rsp), %rsi
000000000100cb05	movq	0xb0(%rsp), %rdi
000000000100cb0d	movl	%ecx, %r8d
000000000100cb10	movq	0x38(%rsp), %r9
000000000100cb15	movq	0x40(%rsp), %r10
000000000100cb1a	movq	0x48(%rsp), %r11
000000000100cb1f	jmp	0x100c9f1
000000000100cb24	movq	0x58(%rsp,%r13), %rcx
000000000100cb29	movq	%rcx, 0x10(%rsp)
000000000100cb2e	movq	%rdi, (%rsp)
000000000100cb32	movq	%rax, 0x8(%rsp)
000000000100cb37	callq	"runtime.(*hmap).newoverflow"
000000000100cb3c	movq	0x18(%rsp), %rax
000000000100cb41	movq	0x30(%rsp), %r13
000000000100cb46	movq	%rax, 0x58(%rsp,%r13)
000000000100cb4b	movq	$0x0, 0x60(%rsp,%r13)
000000000100cb54	leaq	0x8(%rax), %rcx
000000000100cb58	movq	%rcx, 0x68(%rsp,%r13)
000000000100cb5d	addq	$0x28, %rax
000000000100cb61	movq	%rax, 0x70(%rsp,%r13)
000000000100cb66	movq	0xa8(%rsp), %rax
000000000100cb6e	movq	0x40(%rsp), %r10
000000000100cb73	movq	0x48(%rsp), %r11
000000000100cb78	movzbl	0x26(%rsp), %r12d
000000000100cb7e	jmp	0x100ca78
000000000100cb83	movq	0x30(%rax), %rcx
000000000100cb87	movq	0x18(%rcx), %rcx
000000000100cb8b	movq	(%rcx), %rdx
000000000100cb8e	movl	0xc(%rdi), %ecx
000000000100cb91	movq	%rcx, 0x8(%rsp)
000000000100cb96	movq	%r10, (%rsp)
000000000100cb9a	movq	(%rdx), %rcx
000000000100cb9d	callq	*%rcx
000000000100cb9f	movq	0x10(%rsp), %rax
000000000100cba4	movzbl	0x27(%rsp), %r8d
000000000100cbaa	btq	%r8, %rax
000000000100cbae	setb	%r13b
000000000100cbb2	movq	0xa8(%rsp), %rax
000000000100cbba	movl	%r8d, %ecx
000000000100cbbd	movq	0x28(%rsp), %rdx
000000000100cbc2	movq	0x50(%rsp), %rbx
000000000100cbc7	movq	0xb8(%rsp), %rsi
000000000100cbcf	movq	0xb0(%rsp), %rdi
000000000100cbd7	movq	0x38(%rsp), %r9
000000000100cbdc	movq	0x40(%rsp), %r10
000000000100cbe1	movq	0x48(%rsp), %r11
000000000100cbe6	movzbl	0x26(%rsp), %r12d
000000000100cbec	jmp	0x100ca4a
000000000100cbf1	movzwl	0x4c(%rax), %r10d
000000000100cbf6	leaq	-0x8(%rbx,%r10), %r10
000000000100cbfb	movq	(%r10), %rbx
000000000100cbfe	testq	%rbx, %rbx
000000000100cc01	je	0x100cc17
000000000100cc03	movq	%rbx, 0x50(%rsp)
000000000100cc08	leaq	0x8(%rbx), %r10
000000000100cc0c	leaq	0x28(%rbx), %r11
000000000100cc10	xorl	%edx, %edx
000000000100cc12	jmp	0x100ca00
000000000100cc17	movzbl	0x8(%rdi), %ecx
000000000100cc1b	testb	$0x2, %cl
000000000100cc1e	jne	0x100cc2d
000000000100cc20	movq	0x40(%rax), %rcx
000000000100cc24	movzbl	0x17(%rcx), %ecx
000000000100cc28	testb	$-0x80, %cl
000000000100cc2b	je	0x100cc5b
000000000100cc2d	movq	0x20(%rdi), %rcx
000000000100cc31	cmpq	%rcx, %rsi
000000000100cc34	je	0x100cc46
000000000100cc36	movq	0x98(%rsp), %rbp
000000000100cc3e	addq	$0xa0, %rsp
000000000100cc45	retq
000000000100cc46	movq	%rdi, (%rsp)
000000000100cc4a	movq	%rax, 0x8(%rsp)
000000000100cc4f	movq	%r9, 0x10(%rsp)
000000000100cc54	callq	runtime.advanceEvacuationMark
000000000100cc59	jmp	0x100cc36
000000000100cc5b	movzwl	0x4c(%rax), %ecx
000000000100cc5f	movq	%rcx, %rdx
000000000100cc62	imulq	%rsi, %rcx
000000000100cc66	addq	0x18(%rdi), %rcx
000000000100cc6a	addq	$0x8, %rcx
000000000100cc6e	movq	%rcx, (%rsp)
000000000100cc72	leaq	-0x8(%rdx), %rcx
000000000100cc76	movq	%rcx, 0x8(%rsp)
000000000100cc7b	callq	runtime.memclrHasPointers
000000000100cc80	movq	0xa8(%rsp), %rax
000000000100cc88	movq	0xb8(%rsp), %rsi
000000000100cc90	movq	0xb0(%rsp), %rdi
000000000100cc98	movq	0x38(%rsp), %r9
000000000100cc9d	jmp	0x100cc2d
000000000100cc9f	leaq	0x78(%rsp), %r10
000000000100cca4	testb	%al, (%r10)
000000000100cca7	leaq	(%r9,%rsi), %r10
000000000100ccab	movzwl	0x4c(%rax), %r11d
000000000100ccb0	imulq	%r10, %r11
000000000100ccb4	addq	0x10(%rdi), %r11
000000000100ccb8	movq	%r11, 0x78(%rsp)
000000000100ccbd	leaq	0x8(%r11), %r10
000000000100ccc1	movq	%r10, 0x88(%rsp)
000000000100ccc9	leaq	0x28(%r11), %r10
000000000100cccd	movq	%r10, 0x90(%rsp)
000000000100ccd5	jmp	0x100c9e3
000000000100ccda	decl	%r8d
000000000100ccdd	jmp	0x100c971
000000000100cce2	callq	runtime.panicindex
000000000100cce7	ud2
000000000100cce9	leaq	0x5e77b(%rip), %rax
000000000100ccf0	movq	%rax, (%rsp)
000000000100ccf4	movq	$0xd, 0x8(%rsp)
000000000100ccfd	callq	runtime.throw
000000000100cd02	ud2
000000000100cd04	callq	runtime.morestack_noctxt
000000000100cd09	jmp	runtime.evacuate_fast32
000000000100cd0e	int3
000000000100cd0f	int3
runtime.typedmemmove:
000000000100cd10	subq	$0x30, %rsp
000000000100cd14	movq	%rbp, 0x28(%rsp)
000000000100cd19	leaq	0x28(%rsp), %rbp
000000000100cd1e	movq	0x40(%rsp), %rax
000000000100cd23	movq	0x48(%rsp), %rcx
000000000100cd28	cmpq	%rcx, %rax
000000000100cd2b	je	0x100cdca
000000000100cd31	movq	0x38(%rsp), %rdx
000000000100cd36	movzbl	0x17(%rdx), %ebx
000000000100cd3a	testb	$-0x80, %bl
000000000100cd3d	je	0x100cda0
000000000100cd3f	movq	(%rdx), %rbx
000000000100cd42	movq	%rbx, 0x10(%rsp)
000000000100cd47	movq	%rax, (%rsp)
000000000100cd4b	movq	%rcx, 0x8(%rsp)
000000000100cd50	callq	runtime.memmove
000000000100cd55	leaq	0xc7ed9(%rip), %rax
000000000100cd5c	cmpb	$0x0, (%rax)
000000000100cd5f	jne	0x100cd6b
000000000100cd61	movq	0x28(%rsp), %rbp
000000000100cd66	addq	$0x30, %rsp
000000000100cd6a	retq
000000000100cd6b	movq	0x38(%rsp), %rax
000000000100cd70	movq	(%rax), %rcx
000000000100cd73	movq	%rcx, 0x20(%rsp)
000000000100cd78	movq	%rax, (%rsp)
000000000100cd7c	movq	0x40(%rsp), %rax
000000000100cd81	movq	%rax, 0x8(%rsp)
000000000100cd86	movq	0x48(%rsp), %rax
000000000100cd8b	movq	%rax, 0x10(%rsp)
000000000100cd90	movq	$0x0, 0x18(%rsp)
000000000100cd99	callq	runtime.cgoCheckMemmove
000000000100cd9e	jmp	0x100cd61
000000000100cda0	movq	(%rdx), %rbx
000000000100cda3	movq	%rbx, 0x10(%rsp)
000000000100cda8	movq	%rax, (%rsp)
000000000100cdac	movq	%rcx, 0x8(%rsp)
000000000100cdb1	callq	runtime.bulkBarrierPreWrite
000000000100cdb6	movq	0x40(%rsp), %rax
000000000100cdbb	movq	0x48(%rsp), %rcx
000000000100cdc0	movq	0x38(%rsp), %rdx
000000000100cdc5	jmp	0x100cd3f
000000000100cdca	movq	0x28(%rsp), %rbp
000000000100cdcf	addq	$0x30, %rsp
000000000100cdd3	retq
000000000100cdd4	int3
000000000100cdd5	int3
000000000100cdd6	int3
000000000100cdd7	int3
000000000100cdd8	int3
000000000100cdd9	int3
000000000100cdda	int3
000000000100cddb	int3
000000000100cddc	int3
000000000100cddd	int3
000000000100cdde	int3
000000000100cddf	int3
runtime.reflectcallmove:
000000000100cde0	subq	$0x20, %rsp
000000000100cde4	movq	%rbp, 0x18(%rsp)
000000000100cde9	leaq	0x18(%rsp), %rbp
000000000100cdee	leaq	0xc7e3f(%rip), %rax
000000000100cdf5	cmpb	$0x0, (%rax)
000000000100cdf8	je	0x100ce71
000000000100cdfa	movq	0x28(%rsp), %rax
000000000100cdff	testq	%rax, %rax
000000000100ce02	je	0x100ce6a
000000000100ce04	movzbl	0x17(%rax), %eax
000000000100ce08	testb	$-0x80, %al
000000000100ce0b	jne	0x100ce63
000000000100ce0d	movq	0x40(%rsp), %rax
000000000100ce12	cmpq	$0x8, %rax
000000000100ce16	jae	0x100ce3f
000000000100ce18	movq	0x30(%rsp), %rcx
000000000100ce1d	movq	%rcx, (%rsp)
000000000100ce21	movq	0x38(%rsp), %rcx
000000000100ce26	movq	%rcx, 0x8(%rsp)
000000000100ce2b	movq	%rax, 0x10(%rsp)
000000000100ce30	callq	runtime.memmove
000000000100ce35	movq	0x18(%rsp), %rbp
000000000100ce3a	addq	$0x20, %rsp
000000000100ce3e	retq
000000000100ce3f	movq	0x30(%rsp), %rcx
000000000100ce44	movq	%rcx, (%rsp)
000000000100ce48	movq	0x38(%rsp), %rcx
000000000100ce4d	movq	%rcx, 0x8(%rsp)
000000000100ce52	movq	%rax, 0x10(%rsp)
000000000100ce57	callq	runtime.bulkBarrierPreWrite
000000000100ce5c	movq	0x40(%rsp), %rax
000000000100ce61	jmp	0x100ce18
000000000100ce63	movq	0x40(%rsp), %rax
000000000100ce68	jmp	0x100ce18
000000000100ce6a	movq	0x40(%rsp), %rax
000000000100ce6f	jmp	0x100ce18
000000000100ce71	movq	0x40(%rsp), %rax
000000000100ce76	jmp	0x100ce18
000000000100ce78	int3
000000000100ce79	int3
000000000100ce7a	int3
000000000100ce7b	int3
000000000100ce7c	int3
000000000100ce7d	int3
000000000100ce7e	int3
000000000100ce7f	int3
runtime.typedslicecopy:
000000000100ce80	subq	$0x58, %rsp
000000000100ce84	movq	%rbp, 0x50(%rsp)
000000000100ce89	leaq	0x50(%rsp), %rbp
000000000100ce8e	movq	0x70(%rsp), %rax
000000000100ce93	movq	0x88(%rsp), %rcx
000000000100ce9b	cmpq	%rcx, %rax
000000000100ce9e	movq	%rax, %rdx
000000000100cea1	cmovgq	%rcx, %rax
000000000100cea5	testq	%rax, %rax
000000000100cea8	je	0x100cfaa
000000000100ceae	movq	%rax, 0x48(%rsp)
000000000100ceb3	leaq	0xc7d7b(%rip), %rbx
000000000100ceba	cmpb	$0x0, (%rbx)
000000000100cebd	jne	0x100cf55
000000000100cec3	movq	0x68(%rsp), %rcx
000000000100cec8	movq	0x80(%rsp), %rdx
000000000100ced0	cmpq	%rdx, %rcx
000000000100ced3	je	0x100cf43
000000000100ced5	movq	0x60(%rsp), %rbx
000000000100ceda	movq	(%rbx), %rbx
000000000100cedd	imulq	%rax, %rbx
000000000100cee1	leaq	0xc7d4c(%rip), %rsi
000000000100cee8	cmpb	$0x0, (%rsi)
000000000100ceeb	jne	0x100cf17
000000000100ceed	movq	%rcx, (%rsp)
000000000100cef1	movq	%rdx, 0x8(%rsp)
000000000100cef6	movq	%rbx, 0x10(%rsp)
000000000100cefb	callq	runtime.memmove
000000000100cf00	movq	0x48(%rsp), %rax
000000000100cf05	movq	%rax, 0x98(%rsp)
000000000100cf0d	movq	0x50(%rsp), %rbp
000000000100cf12	addq	$0x58, %rsp
000000000100cf16	retq
000000000100cf17	movq	%rbx, 0x40(%rsp)
000000000100cf1c	movq	%rcx, (%rsp)
000000000100cf20	movq	%rdx, 0x8(%rsp)
000000000100cf25	movq	%rbx, 0x10(%rsp)
000000000100cf2a	callq	runtime.bulkBarrierPreWrite
000000000100cf2f	movq	0x68(%rsp), %rcx
000000000100cf34	movq	0x80(%rsp), %rdx
000000000100cf3c	movq	0x40(%rsp), %rbx
000000000100cf41	jmp	0x100ceed
000000000100cf43	movq	%rax, 0x98(%rsp)
000000000100cf4b	movq	0x50(%rsp), %rbp
000000000100cf50	addq	$0x58, %rsp
000000000100cf54	retq
000000000100cf55	movq	0x60(%rsp), %rbx
000000000100cf5a	movq	%rbx, (%rsp)
000000000100cf5e	movq	0x68(%rsp), %rsi
000000000100cf63	movq	%rsi, 0x8(%rsp)
000000000100cf68	movq	%rdx, 0x10(%rsp)
000000000100cf6d	movq	0x78(%rsp), %rdx
000000000100cf72	movq	%rdx, 0x18(%rsp)
000000000100cf77	movq	0x80(%rsp), %rdx
000000000100cf7f	movq	%rdx, 0x20(%rsp)
000000000100cf84	movq	%rcx, 0x28(%rsp)
000000000100cf89	movq	0x90(%rsp), %rcx
000000000100cf91	movq	%rcx, 0x30(%rsp)
000000000100cf96	movq	%rax, 0x38(%rsp)
000000000100cf9b	callq	runtime.cgoCheckSliceCopy
000000000100cfa0	movq	0x48(%rsp), %rax
000000000100cfa5	jmp	0x100cec3
000000000100cfaa	movq	$0x0, 0x98(%rsp)
000000000100cfb6	movq	0x50(%rsp), %rbp
000000000100cfbb	addq	$0x58, %rsp
000000000100cfbf	retq
runtime.typedmemclr:
000000000100cfc0	subq	$0x20, %rsp
000000000100cfc4	movq	%rbp, 0x18(%rsp)
000000000100cfc9	leaq	0x18(%rsp), %rbp
000000000100cfce	movq	0x28(%rsp), %rax
000000000100cfd3	movzbl	0x17(%rax), %ecx
000000000100cfd7	testb	$-0x80, %cl
000000000100cfda	je	0x100cffc
000000000100cfdc	movq	(%rax), %rax
000000000100cfdf	movq	%rax, 0x8(%rsp)
000000000100cfe4	movq	0x30(%rsp), %rax
000000000100cfe9	movq	%rax, (%rsp)
000000000100cfed	callq	runtime.memclrNoHeapPointers
000000000100cff2	movq	0x18(%rsp), %rbp
000000000100cff7	addq	$0x20, %rsp
000000000100cffb	retq
000000000100cffc	movq	(%rax), %rcx
000000000100cfff	movq	%rcx, 0x10(%rsp)
000000000100d004	movq	0x30(%rsp), %rcx
000000000100d009	movq	%rcx, (%rsp)
000000000100d00d	movq	$0x0, 0x8(%rsp)
000000000100d016	callq	runtime.bulkBarrierPreWrite
000000000100d01b	movq	0x28(%rsp), %rax
000000000100d020	jmp	0x100cfdc
000000000100d022	int3
000000000100d023	int3
000000000100d024	int3
000000000100d025	int3
000000000100d026	int3
000000000100d027	int3
000000000100d028	int3
000000000100d029	int3
000000000100d02a	int3
000000000100d02b	int3
000000000100d02c	int3
000000000100d02d	int3
000000000100d02e	int3
000000000100d02f	int3
runtime.memclrHasPointers:
000000000100d030	subq	$0x20, %rsp
000000000100d034	movq	%rbp, 0x18(%rsp)
000000000100d039	leaq	0x18(%rsp), %rbp
000000000100d03e	movq	0x28(%rsp), %rax
000000000100d043	movq	%rax, (%rsp)
000000000100d047	movq	$0x0, 0x8(%rsp)
000000000100d050	movq	0x30(%rsp), %rax
000000000100d055	movq	%rax, 0x10(%rsp)
000000000100d05a	callq	runtime.bulkBarrierPreWrite
000000000100d05f	movq	0x28(%rsp), %rax
000000000100d064	movq	%rax, (%rsp)
000000000100d068	movq	0x30(%rsp), %rax
000000000100d06d	movq	%rax, 0x8(%rsp)
000000000100d072	callq	runtime.memclrNoHeapPointers
000000000100d077	movq	0x18(%rsp), %rbp
000000000100d07c	addq	$0x20, %rsp
000000000100d080	retq
000000000100d081	int3
000000000100d082	int3
000000000100d083	int3
000000000100d084	int3
000000000100d085	int3
000000000100d086	int3
000000000100d087	int3
000000000100d088	int3
000000000100d089	int3
000000000100d08a	int3
000000000100d08b	int3
000000000100d08c	int3
000000000100d08d	int3
000000000100d08e	int3
000000000100d08f	int3
runtime.(*mspan).refillAllocCache:
000000000100d090	movq	0x10(%rsp), %rax
000000000100d095	movq	0x8(%rsp), %rcx
000000000100d09a	addq	0x48(%rcx), %rax
000000000100d09e	movq	(%rax), %rax
000000000100d0a1	notq	%rax
000000000100d0a4	movq	%rax, 0x40(%rcx)
000000000100d0a8	retq
000000000100d0a9	int3
000000000100d0aa	int3
000000000100d0ab	int3
000000000100d0ac	int3
000000000100d0ad	int3
000000000100d0ae	int3
000000000100d0af	int3
runtime.(*mspan).nextFreeIndex:
000000000100d0b0	movq	%gs:0x30, %rcx
000000000100d0b9	cmpq	0x10(%rcx), %rsp
000000000100d0bd	jbe	0x100d222
000000000100d0c3	subq	$0x30, %rsp
000000000100d0c7	movq	%rbp, 0x28(%rsp)
000000000100d0cc	leaq	0x28(%rsp), %rbp
000000000100d0d1	movq	0x38(%rsp), %rax
000000000100d0d6	movq	0x30(%rax), %rdx
000000000100d0da	movq	0x38(%rax), %rbx
000000000100d0de	cmpq	%rdx, %rbx
000000000100d0e1	je	0x100d1f8
000000000100d0e7	cmpq	%rbx, %rdx
000000000100d0ea	ja	0x100d207
000000000100d0f0	movq	%rbx, 0x10(%rsp)
000000000100d0f5	movq	0x40(%rax), %rsi
000000000100d0f9	bsfq	%rsi, %rsi
000000000100d0fd	movl	$0x40, %edi
000000000100d102	cmoveq	%rdi, %rsi
000000000100d106	jmp	0x100d14a
000000000100d108	movq	%rcx, 0x18(%rsp)
000000000100d10d	movq	%rax, (%rsp)
000000000100d111	shrq	$0x3, %rcx
000000000100d115	movq	%rcx, 0x8(%rsp)
000000000100d11a	callq	"runtime.(*mspan).refillAllocCache"
000000000100d11f	movq	0x38(%rsp), %rax
000000000100d124	movq	0x40(%rax), %rcx
000000000100d128	bsfq	%rcx, %rcx
000000000100d12c	movl	$0x40, %edi
000000000100d131	cmoveq	%rdi, %rcx
000000000100d135	movq	0x10(%rsp), %rdx
000000000100d13a	movq	0x18(%rsp), %rbx
000000000100d13f	movq	%rdx, %rbx
000000000100d142	movq	%rcx, %rsi
000000000100d145	movq	0x18(%rsp), %rdx
000000000100d14a	cmpq	$0x40, %rsi
000000000100d14e	jne	0x100d170
000000000100d150	leaq	0x40(%rdx), %rcx
000000000100d154	andq	$-0x40, %rcx
000000000100d158	cmpq	%rbx, %rcx
000000000100d15b	jb	0x100d108
000000000100d15d	movq	%rbx, 0x30(%rax)
000000000100d161	movq	%rbx, 0x40(%rsp)
000000000100d166	movq	0x28(%rsp), %rbp
000000000100d16b	addq	$0x30, %rsp
000000000100d16f	retq
000000000100d170	leaq	(%rdx,%rsi), %rdi
000000000100d174	cmpq	%rbx, %rdi
000000000100d177	jae	0x100d1e5
000000000100d179	movq	0x40(%rax), %r8
000000000100d17d	leaq	0x1(%rsi), %rcx
000000000100d181	shrq	%cl, %r8
000000000100d184	cmpq	$0x40, %rcx
000000000100d188	sbbq	%r9, %r9
000000000100d18b	andq	%r9, %r8
000000000100d18e	movq	%r8, 0x40(%rax)
000000000100d192	leaq	0x1(%rdx,%rsi), %rdx
000000000100d197	testq	$0x3f, %rdx
000000000100d19e	jne	0x100d1a5
000000000100d1a0	cmpq	%rbx, %rdx
000000000100d1a3	jne	0x100d1b8
000000000100d1a5	movq	%rdx, 0x30(%rax)
000000000100d1a9	movq	%rdi, 0x40(%rsp)
000000000100d1ae	movq	0x28(%rsp), %rbp
000000000100d1b3	addq	$0x30, %rsp
000000000100d1b7	retq
000000000100d1b8	movq	%rdi, 0x20(%rsp)
000000000100d1bd	movq	%rdx, 0x18(%rsp)
000000000100d1c2	movq	%rax, (%rsp)
000000000100d1c6	shrq	$0x3, %rdx
000000000100d1ca	movq	%rdx, 0x8(%rsp)
000000000100d1cf	callq	"runtime.(*mspan).refillAllocCache"
000000000100d1d4	movq	0x38(%rsp), %rax
000000000100d1d9	movq	0x18(%rsp), %rdx
000000000100d1de	movq	0x20(%rsp), %rdi
000000000100d1e3	jmp	0x100d1a5
000000000100d1e5	movq	%rbx, 0x30(%rax)
000000000100d1e9	movq	%rbx, 0x40(%rsp)
000000000100d1ee	movq	0x28(%rsp), %rbp
000000000100d1f3	addq	$0x30, %rsp
000000000100d1f7	retq
000000000100d1f8	movq	%rdx, 0x40(%rsp)
000000000100d1fd	movq	0x28(%rsp), %rbp
000000000100d202	addq	$0x30, %rsp
000000000100d206	retq
000000000100d207	leaq	0x5f039(%rip), %rax
000000000100d20e	movq	%rax, (%rsp)
000000000100d212	movq	$0x16, 0x8(%rsp)
000000000100d21b	callq	runtime.throw
000000000100d220	ud2
000000000100d222	callq	runtime.morestack_noctxt
000000000100d227	jmp	"runtime.(*mspan).nextFreeIndex"
000000000100d22c	int3
000000000100d22d	int3
000000000100d22e	int3
000000000100d22f	int3
runtime.markBitsForAddr:
000000000100d230	movabsq	$0x800000000000, %rax
000000000100d23a	movq	0x8(%rsp), %rdx
000000000100d23f	addq	%rdx, %rax
000000000100d242	shrq	$0x1a, %rax
000000000100d246	cmpq	$0x400000, %rax
000000000100d24c	jb	0x100d2d2
000000000100d252	xorl	%eax, %eax
000000000100d254	movq	0x18(%rax), %rbx
000000000100d258	subq	%rbx, %rdx
000000000100d25b	testq	%rdx, %rdx
000000000100d25e	jne	0x100d28a
000000000100d260	xorl	%ecx, %ecx
000000000100d262	movq	%rcx, %rdx
000000000100d265	shrq	$0x3, %rcx
000000000100d269	addq	0x50(%rax), %rcx
000000000100d26d	movq	%rcx, 0x10(%rsp)
000000000100d272	movq	%rdx, %rcx
000000000100d275	andq	$0x7, %rcx
000000000100d279	movl	$0x1, %eax
000000000100d27e	shll	%cl, %eax
000000000100d280	movb	%al, 0x18(%rsp)
000000000100d284	movq	%rdx, 0x20(%rsp)
000000000100d289	retq
000000000100d28a	cmpw	$0x0, 0x5e(%rax)
000000000100d28f	je	0x100d2a3
000000000100d291	movzbl	0x66(%rax), %ecx
000000000100d295	shrq	%cl, %rdx
000000000100d298	cmpb	$0x40, %cl
000000000100d29b	sbbq	%rcx, %rcx
000000000100d29e	andq	%rdx, %rcx
000000000100d2a1	jmp	0x100d262
000000000100d2a3	movzbl	0x66(%rax), %ecx
000000000100d2a7	shrq	%cl, %rdx
000000000100d2aa	cmpb	$0x40, %cl
000000000100d2ad	sbbq	%rcx, %rcx
000000000100d2b0	andq	%rdx, %rcx
000000000100d2b3	movzwl	0x5c(%rax), %edx
000000000100d2b7	imulq	%rdx, %rcx
000000000100d2bb	movzbl	0x67(%rax), %edx
000000000100d2bf	movq	%rcx, %rbx
000000000100d2c2	movl	%edx, %ecx
000000000100d2c4	shrq	%cl, %rbx
000000000100d2c7	cmpb	$0x40, %cl
000000000100d2ca	sbbq	%rcx, %rcx
000000000100d2cd	andq	%rbx, %rcx
000000000100d2d0	jmp	0x100d262
000000000100d2d2	movq	0xb14bf(%rip), %rbx
000000000100d2d9	testb	%al, (%rbx)
000000000100d2db	movq	(%rbx,%rax,8), %rax
000000000100d2df	testq	%rax, %rax
000000000100d2e2	je	0x100d302
000000000100d2e4	movq	%rdx, %rbx
000000000100d2e7	shrq	$0xd, %rdx
000000000100d2eb	andq	$0x1fff, %rdx
000000000100d2f2	movq	0x200000(%rax,%rdx,8), %rax
000000000100d2fa	movq	%rbx, %rdx
000000000100d2fd	jmp	0x100d254
000000000100d302	xorl	%eax, %eax
000000000100d304	jmp	0x100d254
000000000100d309	int3
000000000100d30a	int3
000000000100d30b	int3
000000000100d30c	int3
000000000100d30d	int3
000000000100d30e	int3
000000000100d30f	int3
runtime.findObject:
000000000100d310	movq	%gs:0x30, %rcx
000000000100d319	cmpq	0x10(%rcx), %rsp
000000000100d31d	jbe	0x100d6c8
000000000100d323	subq	$0x48, %rsp
000000000100d327	movq	%rbp, 0x40(%rsp)
000000000100d32c	leaq	0x40(%rsp), %rbp
000000000100d331	movq	0x50(%rsp), %rax
000000000100d336	movabsq	$0x800000000000, %rdx
000000000100d340	addq	%rax, %rdx
000000000100d343	shrq	$0x1a, %rdx
000000000100d347	cmpq	$0x400000, %rdx
000000000100d34e	jb	0x100d663
000000000100d354	xorl	%ecx, %ecx
000000000100d356	testq	%rcx, %rcx
000000000100d359	je	0x100d36b
000000000100d35b	movq	0x18(%rcx), %rdx
000000000100d35f	cmpq	%rdx, %rax
000000000100d362	jae	0x100d5ab
000000000100d368	testq	%rcx, %rcx
000000000100d36b	je	0x100d373
000000000100d36d	cmpb	$0x2, 0x64(%rcx)
000000000100d371	jne	0x100d394
000000000100d373	movq	$0x0, 0x68(%rsp)
000000000100d37c	movq	%rcx, 0x70(%rsp)
000000000100d381	movq	$0x0, 0x78(%rsp)
000000000100d38a	movq	0x40(%rsp), %rbp
000000000100d38f	addq	$0x48, %rsp
000000000100d393	retq
000000000100d394	cmpl	$0x0, 0xc79a9(%rip)
000000000100d39b	jne	0x100d3be
000000000100d39d	movq	$0x0, 0x68(%rsp)
000000000100d3a6	movq	%rcx, 0x70(%rsp)
000000000100d3ab	movq	$0x0, 0x78(%rsp)
000000000100d3b4	movq	0x40(%rsp), %rbp
000000000100d3b9	addq	$0x48, %rsp
000000000100d3bd	retq
000000000100d3be	movq	%rcx, 0x38(%rsp)
000000000100d3c3	callq	runtime.printlock
000000000100d3c8	callq	runtime.printlock
000000000100d3cd	leaq	0x5e606(%rip), %rax
000000000100d3d4	movq	%rax, (%rsp)
000000000100d3d8	movq	$0x11, 0x8(%rsp)
000000000100d3e1	callq	runtime.printstring
000000000100d3e6	movq	0x50(%rsp), %rax
000000000100d3eb	movq	%rax, (%rsp)
000000000100d3ef	callq	runtime.printhex
000000000100d3f4	callq	runtime.printunlock
000000000100d3f9	movq	0x38(%rsp), %rax
000000000100d3fe	cmpb	$0x1, 0x64(%rax)
000000000100d402	je	0x100d583
000000000100d408	callq	runtime.printlock
000000000100d40d	leaq	0x5e928(%rip), %rax
000000000100d414	movq	%rax, (%rsp)
000000000100d418	movq	$0x14, 0x8(%rsp)
000000000100d421	callq	runtime.printstring
000000000100d426	callq	runtime.printunlock
000000000100d42b	movq	0x38(%rsp), %rax
000000000100d430	movzbl	0x64(%rax), %ecx
000000000100d434	movq	%rcx, 0x30(%rsp)
000000000100d439	movq	0x80(%rax), %rdx
000000000100d440	movq	%rdx, 0x28(%rsp)
000000000100d445	movq	0x18(%rax), %rax
000000000100d449	movq	%rax, 0x20(%rsp)
000000000100d44e	callq	runtime.printlock
000000000100d453	leaq	0x5df8f(%rip), %rax
000000000100d45a	movq	%rax, (%rsp)
000000000100d45e	movq	$0xd, 0x8(%rsp)
000000000100d467	callq	runtime.printstring
000000000100d46c	movq	0x20(%rsp), %rax
000000000100d471	movq	%rax, (%rsp)
000000000100d475	callq	runtime.printhex
000000000100d47a	leaq	0x5ddf7(%rip), %rax
000000000100d481	movq	%rax, (%rsp)
000000000100d485	movq	$0xc, 0x8(%rsp)
000000000100d48e	callq	runtime.printstring
000000000100d493	movq	0x28(%rsp), %rax
000000000100d498	movq	%rax, (%rsp)
000000000100d49c	callq	runtime.printhex
000000000100d4a1	leaq	0x5dddc(%rip), %rax
000000000100d4a8	movq	%rax, (%rsp)
000000000100d4ac	movq	$0xc, 0x8(%rsp)
000000000100d4b5	callq	runtime.printstring
000000000100d4ba	movq	0x30(%rsp), %rax
000000000100d4bf	movq	%rax, (%rsp)
000000000100d4c3	callq	runtime.printuint
000000000100d4c8	callq	runtime.printnl
000000000100d4cd	callq	runtime.printunlock
000000000100d4d2	movq	0x58(%rsp), %rax
000000000100d4d7	testq	%rax, %rax
000000000100d4da	je	0x100d699
000000000100d4e0	callq	runtime.printlock
000000000100d4e5	leaq	0x5fe56(%rip), %rax
000000000100d4ec	movq	%rax, (%rsp)
000000000100d4f0	movq	$0x1e, 0x8(%rsp)
000000000100d4f9	callq	runtime.printstring
000000000100d4fe	movq	0x58(%rsp), %rax
000000000100d503	movq	%rax, (%rsp)
000000000100d507	callq	runtime.printhex
000000000100d50c	leaq	0x5d570(%rip), %rax
000000000100d513	movq	%rax, (%rsp)
000000000100d517	movq	$0x1, 0x8(%rsp)
000000000100d520	callq	runtime.printstring
000000000100d525	movq	0x60(%rsp), %rax
000000000100d52a	movq	%rax, (%rsp)
000000000100d52e	callq	runtime.printhex
000000000100d533	leaq	0x5d560(%rip), %rax
000000000100d53a	movq	%rax, (%rsp)
000000000100d53e	movq	$0x2, 0x8(%rsp)
000000000100d547	callq	runtime.printstring
000000000100d54c	callq	runtime.printunlock
000000000100d551	leaq	0x5d735(%rip), %rax
000000000100d558	movq	%rax, (%rsp)
000000000100d55c	movq	$0x6, 0x8(%rsp)
000000000100d565	movq	0x58(%rsp), %rax
000000000100d56a	movq	%rax, 0x10(%rsp)
000000000100d56f	movq	0x60(%rsp), %rax
000000000100d574	movq	%rax, 0x18(%rsp)
000000000100d579	callq	runtime.gcDumpObject
000000000100d57e	jmp	0x100d699
000000000100d583	callq	runtime.printlock
000000000100d588	leaq	0x5f124(%rip), %rax
000000000100d58f	movq	%rax, (%rsp)
000000000100d593	movq	$0x19, 0x8(%rsp)
000000000100d59c	callq	runtime.printstring
000000000100d5a1	callq	runtime.printunlock
000000000100d5a6	jmp	0x100d42b
000000000100d5ab	movq	0x80(%rcx), %rbx
000000000100d5b2	cmpq	%rbx, %rax
000000000100d5b5	jb	0x100d5bf
000000000100d5b7	testq	%rcx, %rcx
000000000100d5ba	jmp	0x100d36b
000000000100d5bf	cmpb	$0x1, 0x64(%rcx)
000000000100d5c3	je	0x100d5cd
000000000100d5c5	testq	%rcx, %rcx
000000000100d5c8	jmp	0x100d36b
000000000100d5cd	movzwl	0x5e(%rcx), %ebx
000000000100d5d1	testw	%bx, %bx
000000000100d5d4	je	0x100d611
000000000100d5d6	subq	%rdx, %rax
000000000100d5d9	movzwl	%bx, %ebx
000000000100d5dc	andq	%rax, %rbx
000000000100d5df	leaq	(%rbx,%rdx), %rax
000000000100d5e3	movzbl	0x66(%rcx), %edx
000000000100d5e7	movq	%rcx, %rsi
000000000100d5ea	movl	%edx, %ecx
000000000100d5ec	shrq	%cl, %rbx
000000000100d5ef	cmpb	$0x40, %cl
000000000100d5f2	sbbq	%rdx, %rdx
000000000100d5f5	andq	%rdx, %rbx
000000000100d5f8	movq	%rax, 0x68(%rsp)
000000000100d5fd	movq	%rsi, 0x70(%rsp)
000000000100d602	movq	%rbx, 0x78(%rsp)
000000000100d607	movq	0x40(%rsp), %rbp
000000000100d60c	addq	$0x48, %rsp
000000000100d610	retq
000000000100d611	subq	%rdx, %rax
000000000100d614	movq	0x68(%rcx), %rbx
000000000100d618	cmpq	%rbx, %rax
000000000100d61b	jb	0x100d65c
000000000100d61d	movzbl	0x66(%rcx), %esi
000000000100d621	movq	%rcx, %rdi
000000000100d624	movl	%esi, %ecx
000000000100d626	shrq	%cl, %rax
000000000100d629	cmpb	$0x40, %cl
000000000100d62c	sbbq	%rsi, %rsi
000000000100d62f	andq	%rsi, %rax
000000000100d632	movzwl	0x5c(%rdi), %esi
000000000100d636	imulq	%rax, %rsi
000000000100d63a	movzbl	0x67(%rdi), %ecx
000000000100d63e	shrq	%cl, %rsi
000000000100d641	cmpb	$0x40, %cl
000000000100d644	sbbq	%rax, %rax
000000000100d647	andq	%rsi, %rax
000000000100d64a	imulq	%rax, %rbx
000000000100d64e	addq	%rbx, %rdx
000000000100d651	movq	%rdi, %rsi
000000000100d654	movq	%rax, %rbx
000000000100d657	movq	%rdx, %rax
000000000100d65a	jmp	0x100d5f8
000000000100d65c	movq	%rcx, %rdi
000000000100d65f	xorl	%eax, %eax
000000000100d661	jmp	0x100d651
000000000100d663	movq	0xb112e(%rip), %rbx
000000000100d66a	testb	%al, (%rbx)
000000000100d66c	movq	(%rbx,%rdx,8), %rdx
000000000100d670	testq	%rdx, %rdx
000000000100d673	je	0x100d692
000000000100d675	movq	%rax, %rbx
000000000100d678	shrq	$0xd, %rax
000000000100d67c	andq	$0x1fff, %rax
000000000100d682	movq	0x200000(%rdx,%rax,8), %rcx
000000000100d68a	movq	%rbx, %rax
000000000100d68d	jmp	0x100d356
000000000100d692	xorl	%ecx, %ecx
000000000100d694	jmp	0x100d356
000000000100d699	movq	%gs:0x30, %rax
000000000100d6a2	movq	0x30(%rax), %rax
000000000100d6a6	movb	$0x2, 0x125(%rax)
000000000100d6ad	leaq	0x6153c(%rip), %rax
000000000100d6b4	movq	%rax, (%rsp)
000000000100d6b8	movq	$0x3e, 0x8(%rsp)
000000000100d6c1	callq	runtime.throw
000000000100d6c6	ud2
000000000100d6c8	callq	runtime.morestack_noctxt
000000000100d6cd	jmp	runtime.findObject
000000000100d6d2	int3
000000000100d6d3	int3
000000000100d6d4	int3
000000000100d6d5	int3
000000000100d6d6	int3
000000000100d6d7	int3
000000000100d6d8	int3
000000000100d6d9	int3
000000000100d6da	int3
000000000100d6db	int3
000000000100d6dc	int3
000000000100d6dd	int3
000000000100d6de	int3
000000000100d6df	int3
runtime.heapBits.nextArena:
000000000100d6e0	movq	0xb10b1(%rip), %rax
000000000100d6e7	testq	%rax, %rax
000000000100d6ea	je	0x100d733
000000000100d6ec	movl	0x14(%rsp), %ecx
000000000100d6f0	incl	%ecx
000000000100d6f2	cmpq	$0x400000, %rcx
000000000100d6f9	jae	0x100d745
000000000100d6fb	movq	(%rax,%rcx,8), %rax
000000000100d6ff	testq	%rax, %rax
000000000100d702	je	0x100d721
000000000100d704	movq	%rax, 0x20(%rsp)
000000000100d709	movl	$0x0, 0x28(%rsp)
000000000100d711	movl	%ecx, 0x2c(%rsp)
000000000100d715	addq	$0x1fffff, %rax
000000000100d71b	movq	%rax, 0x30(%rsp)
000000000100d720	retq
000000000100d721	movq	$0x0, 0x20(%rsp)
000000000100d72a	xorps	%xmm0, %xmm0
000000000100d72d	movups	%xmm0, 0x28(%rsp)
000000000100d732	retq
000000000100d733	movq	$0x0, 0x20(%rsp)
000000000100d73c	xorps	%xmm0, %xmm0
000000000100d73f	movups	%xmm0, 0x28(%rsp)
000000000100d744	retq
000000000100d745	callq	runtime.panicindex
000000000100d74a	ud2
000000000100d74c	int3
000000000100d74d	int3
000000000100d74e	int3
000000000100d74f	int3
runtime.heapBits.forward:
000000000100d750	movq	0x20(%rsp), %rax
000000000100d755	movl	0x10(%rsp), %ecx
000000000100d759	addq	%rcx, %rax
000000000100d75c	movq	0x8(%rsp), %rcx
000000000100d761	movq	%rcx, %rdx
000000000100d764	movq	%rax, %rbx
000000000100d767	shrq	$0x2, %rax
000000000100d76b	addq	%rax, %rcx
000000000100d76e	andq	$0x3, %rbx
000000000100d772	movq	0x18(%rsp), %rsi
000000000100d777	movq	%rsi, %rdi
000000000100d77a	cmpq	%rsi, %rcx
000000000100d77d	jbe	0x100d7dc
000000000100d77f	leaq	0x1(%rsi), %rax
000000000100d783	subq	%rax, %rcx
000000000100d786	movq	%rcx, %rax
000000000100d789	shrq	$0x15, %rcx
000000000100d78d	movl	0x14(%rsp), %edx
000000000100d791	leal	0x1(%rdx,%rcx), %ecx
000000000100d795	movq	0xb0ffc(%rip), %rdx
000000000100d79c	testq	%rdx, %rdx
000000000100d79f	je	0x100d7d6
000000000100d7a1	cmpq	$0x400000, %rcx
000000000100d7a8	jae	0x100d7f6
000000000100d7aa	movq	(%rdx,%rcx,8), %rdx
000000000100d7ae	testq	%rdx, %rdx
000000000100d7b1	je	0x100d7d6
000000000100d7b3	andq	$0x1fffff, %rax
000000000100d7b9	addq	%rdx, %rax
000000000100d7bc	addq	$0x1fffff, %rdx
000000000100d7c3	movq	%rax, 0x28(%rsp)
000000000100d7c8	movl	%ebx, 0x30(%rsp)
000000000100d7cc	movl	%ecx, 0x34(%rsp)
000000000100d7d0	movq	%rdx, 0x38(%rsp)
000000000100d7d5	retq
000000000100d7d6	xorl	%eax, %eax
000000000100d7d8	xorl	%edx, %edx
000000000100d7da	jmp	0x100d7c3
000000000100d7dc	addq	%rdx, %rax
000000000100d7df	movq	%rax, 0x28(%rsp)
000000000100d7e4	movl	%ebx, 0x30(%rsp)
000000000100d7e8	movl	0x14(%rsp), %eax
000000000100d7ec	movl	%eax, 0x34(%rsp)
000000000100d7f0	movq	%rdi, 0x38(%rsp)
000000000100d7f5	retq
000000000100d7f6	callq	runtime.panicindex
000000000100d7fb	ud2
000000000100d7fd	int3
000000000100d7fe	int3
000000000100d7ff	int3
runtime.heapBits.forwardOrBoundary:
000000000100d800	movq	%gs:0x30, %rcx
000000000100d809	cmpq	0x10(%rcx), %rsp
000000000100d80d	jbe	0x100d8aa
000000000100d813	subq	$0x40, %rsp
000000000100d817	movq	%rbp, 0x38(%rsp)
000000000100d81c	leaq	0x38(%rsp), %rbp
000000000100d821	movq	0x58(%rsp), %rax
000000000100d826	movq	%rax, %rcx
000000000100d829	movq	0x48(%rsp), %rdx
000000000100d82e	movq	%rdx, %rbx
000000000100d831	movq	%rbx, (%rsp)
000000000100d835	movl	0x50(%rsp), %ebx
000000000100d839	movl	%ebx, 0x8(%rsp)
000000000100d83d	movl	0x54(%rsp), %ebx
000000000100d841	movl	%ebx, 0xc(%rsp)
000000000100d845	movq	%rcx, 0x10(%rsp)
000000000100d84a	incq	%rax
000000000100d84d	subq	%rdx, %rax
000000000100d850	shlq	$0x2, %rax
000000000100d854	movq	0x60(%rsp), %rcx
000000000100d859	cmpq	%rax, %rcx
000000000100d85c	cmovaq	%rax, %rcx
000000000100d860	movq	%rcx, 0x60(%rsp)
000000000100d865	movq	%rcx, 0x18(%rsp)
000000000100d86a	callq	runtime.heapBits.forward
000000000100d86f	movl	0x28(%rsp), %eax
000000000100d873	movl	0x2c(%rsp), %ecx
000000000100d877	movq	0x30(%rsp), %rdx
000000000100d87c	movq	0x20(%rsp), %rbx
000000000100d881	movq	%rbx, 0x68(%rsp)
000000000100d886	movl	%eax, 0x70(%rsp)
000000000100d88a	movl	%ecx, 0x74(%rsp)
000000000100d88e	movq	%rdx, 0x78(%rsp)
000000000100d893	movq	0x60(%rsp), %rax
000000000100d898	movq	%rax, 0x80(%rsp)
000000000100d8a0	movq	0x38(%rsp), %rbp
000000000100d8a5	addq	$0x40, %rsp
000000000100d8a9	retq
000000000100d8aa	callq	runtime.morestack_noctxt
000000000100d8af	jmp	runtime.heapBits.forwardOrBoundary
000000000100d8b4	int3
000000000100d8b5	int3
000000000100d8b6	int3
000000000100d8b7	int3
000000000100d8b8	int3
000000000100d8b9	int3
000000000100d8ba	int3
000000000100d8bb	int3
000000000100d8bc	int3
000000000100d8bd	int3
000000000100d8be	int3
000000000100d8bf	int3
runtime.bulkBarrierPreWrite:
000000000100d8c0	subq	$0x88, %rsp
000000000100d8c7	movq	%rbp, 0x80(%rsp)
000000000100d8cf	leaq	0x80(%rsp), %rbp
000000000100d8d7	movq	0x98(%rsp), %rax
000000000100d8df	movq	0x90(%rsp), %rcx
000000000100d8e7	movq	%rax, %rdx
000000000100d8ea	orq	%rcx, %rax
000000000100d8ed	movq	0xa0(%rsp), %rbx
000000000100d8f5	orq	%rbx, %rax
000000000100d8f8	testq	$0x7, %rax
000000000100d8fe	jne	0x100dda0
000000000100d904	leaq	0xc7329(%rip), %rax
000000000100d90b	cmpb	$0x0, (%rax)
000000000100d90e	je	0x100dd89
000000000100d914	movabsq	$0x800000000000, %rax
000000000100d91e	addq	%rcx, %rax
000000000100d921	shrq	$0x1a, %rax
000000000100d925	cmpq	$0x400000, %rax
000000000100d92b	jb	0x100dd52
000000000100d931	xorl	%esi, %esi
000000000100d933	testq	%rsi, %rsi
000000000100d936	je	0x100dc4b
000000000100d93c	cmpb	$0x1, 0x64(%rsi)
000000000100d940	jne	0x100dc3b
000000000100d946	movq	0x18(%rsi), %rdi
000000000100d94a	cmpq	%rdi, %rcx
000000000100d94d	jb	0x100dc3b
000000000100d953	movq	0x80(%rsi), %rsi
000000000100d95a	cmpq	%rcx, %rsi
000000000100d95d	jbe	0x100dc3b
000000000100d963	movq	%gs:0x30, %rsi
000000000100d96c	movq	0x30(%rsi), %rsi
000000000100d970	movq	0xd0(%rsi), %rdi
000000000100d977	testb	%al, (%rdi)
000000000100d979	testb	%al, (%rsi)
000000000100d97b	movq	0xb0e16(%rip), %rsi
000000000100d982	testb	%al, (%rsi)
000000000100d984	cmpq	$0x400000, %rax
000000000100d98a	jae	0x100dd99
000000000100d990	movq	(%rsi,%rax,8), %rsi
000000000100d994	testq	%rsi, %rsi
000000000100d997	je	0x100dc2a
000000000100d99d	movq	%rcx, %r8
000000000100d9a0	shrq	$0x5, %rcx
000000000100d9a4	andq	$0x1fffff, %rcx
000000000100d9ab	addq	%rsi, %rcx
000000000100d9ae	movq	%r8, %r9
000000000100d9b1	shrq	$0x3, %r8
000000000100d9b5	andq	$0x3, %r8
000000000100d9b9	addq	$0x1fffff, %rsi
000000000100d9c0	movq	%rdi, 0x78(%rsp)
000000000100d9c5	leaq	0x1290(%rdi), %r10
000000000100d9cc	movq	%r10, 0x70(%rsp)
000000000100d9d1	testq	%rdx, %rdx
000000000100d9d4	jne	0x100db02
000000000100d9da	xorl	%edx, %edx
000000000100d9dc	jmp	0x100d9e2
000000000100d9de	addq	$0x8, %rdx
000000000100d9e2	cmpq	%rbx, %rdx
000000000100d9e5	jae	0x100daf2
000000000100d9eb	movq	%rdx, 0x48(%rsp)
000000000100d9f0	movzbl	(%rcx), %r11d
000000000100d9f4	btl	%r8d, %r11d
000000000100d9f8	jae	0x100da36
000000000100d9fa	leaq	(%rdx,%r9), %r11
000000000100d9fe	testb	%al, (%r10)
000000000100da01	movq	0x1290(%rdi), %r12
000000000100da08	movq	(%r11), %r11
000000000100da0b	movq	%r11, (%r12)
000000000100da0f	movq	$0x0, 0x8(%r12)
000000000100da18	movq	0x1290(%rdi), %r11
000000000100da1f	addq	$0x10, %r11
000000000100da23	movq	%r11, 0x1290(%rdi)
000000000100da2a	movq	0x1298(%rdi), %r12
000000000100da31	cmpq	%r11, %r12
000000000100da34	je	0x100da9c
000000000100da36	cmpl	$0x3, %r8d
000000000100da3a	jae	0x100da41
000000000100da3c	incl	%r8d
000000000100da3f	jmp	0x100d9de
000000000100da41	cmpq	%rsi, %rcx
000000000100da44	je	0x100da4e
000000000100da46	incq	%rcx
000000000100da49	xorl	%r8d, %r8d
000000000100da4c	jmp	0x100d9de
000000000100da4e	movq	%rcx, (%rsp)
000000000100da52	movl	%r8d, 0x8(%rsp)
000000000100da57	movl	%eax, 0xc(%rsp)
000000000100da5b	movq	%rsi, 0x10(%rsp)
000000000100da60	callq	runtime.heapBits.nextArena
000000000100da65	movl	0x24(%rsp), %eax
000000000100da69	movl	0x20(%rsp), %r8d
000000000100da6e	movq	0x28(%rsp), %rsi
000000000100da73	movq	0x18(%rsp), %rcx
000000000100da78	movq	0x48(%rsp), %rdx
000000000100da7d	movq	0xa0(%rsp), %rbx
000000000100da85	movq	0x78(%rsp), %rdi
000000000100da8a	movq	0x90(%rsp), %r9
000000000100da92	movq	0x70(%rsp), %r10
000000000100da97	jmp	0x100d9de
000000000100da9c	movq	%rsi, 0x58(%rsp)
000000000100daa1	movl	%eax, 0x3c(%rsp)
000000000100daa5	movl	%r8d, 0x34(%rsp)
000000000100daaa	movq	%rcx, 0x68(%rsp)
000000000100daaf	xorps	%xmm0, %xmm0
000000000100dab2	movups	%xmm0, (%rsp)
000000000100dab6	callq	runtime.wbBufFlush
000000000100dabb	movl	0x3c(%rsp), %eax
000000000100dabf	movq	0x68(%rsp), %rcx
000000000100dac4	movq	0x48(%rsp), %rdx
000000000100dac9	movq	0xa0(%rsp), %rbx
000000000100dad1	movq	0x58(%rsp), %rsi
000000000100dad6	movq	0x78(%rsp), %rdi
000000000100dadb	movl	0x34(%rsp), %r8d
000000000100dae0	movq	0x90(%rsp), %r9
000000000100dae8	movq	0x70(%rsp), %r10
000000000100daed	jmp	0x100da36
000000000100daf2	movq	0x80(%rsp), %rbp
000000000100dafa	addq	$0x88, %rsp
000000000100db01	retq
000000000100db02	xorl	%r11d, %r11d
000000000100db05	jmp	0x100db0b
000000000100db07	addq	$0x8, %r11
000000000100db0b	cmpq	%rbx, %r11
000000000100db0e	jae	0x100daf2
000000000100db10	movq	%r11, 0x40(%rsp)
000000000100db15	movzbl	(%rcx), %r12d
000000000100db19	btl	%r8d, %r12d
000000000100db1d	jae	0x100db5e
000000000100db1f	leaq	(%r11,%r9), %r12
000000000100db23	leaq	(%r11,%rdx), %r13
000000000100db27	testb	%al, (%r10)
000000000100db2a	movq	0x1290(%rdi), %r14
000000000100db31	movq	(%r12), %r12
000000000100db35	movq	(%r13), %r13
000000000100db39	movq	%r12, (%r14)
000000000100db3c	movq	%r13, 0x8(%r14)
000000000100db40	movq	0x1290(%rdi), %r12
000000000100db47	addq	$0x10, %r12
000000000100db4b	movq	%r12, 0x1290(%rdi)
000000000100db52	movq	0x1298(%rdi), %r13
000000000100db59	cmpq	%r12, %r13
000000000100db5c	je	0x100dbcc
000000000100db5e	cmpl	$0x3, %r8d
000000000100db62	jae	0x100db69
000000000100db64	incl	%r8d
000000000100db67	jmp	0x100db07
000000000100db69	cmpq	%rsi, %rcx
000000000100db6c	je	0x100db76
000000000100db6e	incq	%rcx
000000000100db71	xorl	%r8d, %r8d
000000000100db74	jmp	0x100db07
000000000100db76	movq	%rcx, (%rsp)
000000000100db7a	movl	%r8d, 0x8(%rsp)
000000000100db7f	movl	%eax, 0xc(%rsp)
000000000100db83	movq	%rsi, 0x10(%rsp)
000000000100db88	callq	runtime.heapBits.nextArena
000000000100db8d	movq	0x28(%rsp), %rsi
000000000100db92	movl	0x24(%rsp), %eax
000000000100db96	movl	0x20(%rsp), %r8d
000000000100db9b	movq	0x18(%rsp), %rcx
000000000100dba0	movq	0x98(%rsp), %rdx
000000000100dba8	movq	0xa0(%rsp), %rbx
000000000100dbb0	movq	0x78(%rsp), %rdi
000000000100dbb5	movq	0x90(%rsp), %r9
000000000100dbbd	movq	0x70(%rsp), %r10
000000000100dbc2	movq	0x40(%rsp), %r11
000000000100dbc7	jmp	0x100db07
000000000100dbcc	movq	%rsi, 0x50(%rsp)
000000000100dbd1	movl	%r8d, 0x30(%rsp)
000000000100dbd6	movq	%rcx, 0x60(%rsp)
000000000100dbdb	movl	%eax, 0x38(%rsp)
000000000100dbdf	xorps	%xmm0, %xmm0
000000000100dbe2	movups	%xmm0, (%rsp)
000000000100dbe6	callq	runtime.wbBufFlush
000000000100dbeb	movl	0x38(%rsp), %eax
000000000100dbef	movq	0x60(%rsp), %rcx
000000000100dbf4	movq	0x98(%rsp), %rdx
000000000100dbfc	movq	0xa0(%rsp), %rbx
000000000100dc04	movq	0x50(%rsp), %rsi
000000000100dc09	movq	0x78(%rsp), %rdi
000000000100dc0e	movl	0x30(%rsp), %r8d
000000000100dc13	movq	0x90(%rsp), %r9
000000000100dc1b	movq	0x70(%rsp), %r10
000000000100dc20	movq	0x40(%rsp), %r11
000000000100dc25	jmp	0x100db5e
000000000100dc2a	movq	%rcx, %r9
000000000100dc2d	xorl	%esi, %esi
000000000100dc2f	xorl	%eax, %eax
000000000100dc31	xorl	%r8d, %r8d
000000000100dc34	xorl	%ecx, %ecx
000000000100dc36	jmp	0x100d9c0
000000000100dc3b	movq	0x80(%rsp), %rbp
000000000100dc43	addq	$0x88, %rsp
000000000100dc4a	retq
000000000100dc4b	movq	runtime.modulesSlice(%rip), %rax
000000000100dc52	testq	%rax, %rax
000000000100dc55	je	0x100dd49
000000000100dc5b	movq	0x8(%rax), %rsi
000000000100dc5f	movq	(%rax), %rax
000000000100dc62	xorl	%edi, %edi
000000000100dc64	jmp	0x100dc69
000000000100dc66	incq	%rdi
000000000100dc69	cmpq	%rsi, %rdi
000000000100dc6c	jge	0x100dcc1
000000000100dc6e	movq	(%rax,%rdi,8), %r8
000000000100dc72	movq	0x80(%r8), %r9
000000000100dc79	cmpq	%rcx, %r9
000000000100dc7c	ja	0x100dc66
000000000100dc7e	movq	0x88(%r8), %r10
000000000100dc85	cmpq	%r10, %rcx
000000000100dc88	jae	0x100dc66
000000000100dc8a	movq	0x198(%r8), %rax
000000000100dc91	movq	%rax, 0x20(%rsp)
000000000100dc96	movq	%rcx, (%rsp)
000000000100dc9a	movq	%rdx, 0x8(%rsp)
000000000100dc9f	movq	%rbx, 0x10(%rsp)
000000000100dca4	subq	%r9, %rcx
000000000100dca7	movq	%rcx, 0x18(%rsp)
000000000100dcac	callq	runtime.bulkBarrierBitmap
000000000100dcb1	movq	0x80(%rsp), %rbp
000000000100dcb9	addq	$0x88, %rsp
000000000100dcc0	retq
000000000100dcc1	movq	runtime.modulesSlice(%rip), %rax
000000000100dcc8	testq	%rax, %rax
000000000100dccb	je	0x100dd43
000000000100dccd	movq	0x8(%rax), %rsi
000000000100dcd1	movq	(%rax), %rax
000000000100dcd4	xorl	%edi, %edi
000000000100dcd6	jmp	0x100dcdb
000000000100dcd8	incq	%rdi
000000000100dcdb	cmpq	%rsi, %rdi
000000000100dcde	jge	0x100dd33
000000000100dce0	movq	(%rax,%rdi,8), %r8
000000000100dce4	movq	0x90(%r8), %r9
000000000100dceb	cmpq	%rcx, %r9
000000000100dcee	ja	0x100dcd8
000000000100dcf0	movq	0x98(%r8), %r10
000000000100dcf7	cmpq	%r10, %rcx
000000000100dcfa	jae	0x100dcd8
000000000100dcfc	movq	0x1a8(%r8), %rax
000000000100dd03	movq	%rax, 0x20(%rsp)
000000000100dd08	movq	%rcx, (%rsp)
000000000100dd0c	movq	%rdx, 0x8(%rsp)
000000000100dd11	movq	%rbx, 0x10(%rsp)
000000000100dd16	subq	%r9, %rcx
000000000100dd19	movq	%rcx, 0x18(%rsp)
000000000100dd1e	callq	runtime.bulkBarrierBitmap
000000000100dd23	movq	0x80(%rsp), %rbp
000000000100dd2b	addq	$0x88, %rsp
000000000100dd32	retq
000000000100dd33	movq	0x80(%rsp), %rbp
000000000100dd3b	addq	$0x88, %rsp
000000000100dd42	retq
000000000100dd43	xorl	%esi, %esi
000000000100dd45	xorl	%eax, %eax
000000000100dd47	jmp	0x100dcd4
000000000100dd49	xorl	%esi, %esi
000000000100dd4b	xorl	%eax, %eax
000000000100dd4d	jmp	0x100dc62
000000000100dd52	movq	0xb0a3f(%rip), %rsi
000000000100dd59	testb	%al, (%rsi)
000000000100dd5b	movq	(%rsi,%rax,8), %rsi
000000000100dd5f	testq	%rsi, %rsi
000000000100dd62	je	0x100dd82
000000000100dd64	movq	%rcx, %rdi
000000000100dd67	shrq	$0xd, %rcx
000000000100dd6b	andq	$0x1fff, %rcx
000000000100dd72	movq	0x200000(%rsi,%rcx,8), %rsi
000000000100dd7a	movq	%rdi, %rcx
000000000100dd7d	jmp	0x100d933
000000000100dd82	xorl	%esi, %esi
000000000100dd84	jmp	0x100d933
000000000100dd89	movq	0x80(%rsp), %rbp
000000000100dd91	addq	$0x88, %rsp
000000000100dd98	retq
000000000100dd99	callq	runtime.panicindex
000000000100dd9e	ud2
000000000100dda0	leaq	0x602a5(%rip), %rax
000000000100dda7	movq	%rax, (%rsp)
000000000100ddab	movq	$0x28, 0x8(%rsp)
000000000100ddb4	callq	runtime.throw
000000000100ddb9	ud2
000000000100ddbb	int3
000000000100ddbc	int3
000000000100ddbd	int3
000000000100ddbe	int3
000000000100ddbf	int3
runtime.bulkBarrierBitmap:
000000000100ddc0	subq	$0x40, %rsp
000000000100ddc4	movq	%rbp, 0x38(%rsp)
000000000100ddc9	leaq	0x38(%rsp), %rbp
000000000100ddce	movq	%gs:0x30, %rax
000000000100ddd7	movq	0x30(%rax), %rax
000000000100dddb	movq	0xd0(%rax), %rdx
000000000100dde2	movq	%rdx, 0x30(%rsp)
000000000100dde7	testb	%al, (%rdx)
000000000100dde9	testb	%al, (%rax)
000000000100ddeb	movq	0x60(%rsp), %rcx
000000000100ddf0	movq	%rcx, %rax
000000000100ddf3	shrq	$0x3, %rcx
000000000100ddf7	shrq	$0x6, %rax
000000000100ddfb	andq	$0x7, %rcx
000000000100ddff	movl	$0x1, %ebx
000000000100de04	shll	%cl, %ebx
000000000100de06	leaq	0x1290(%rdx), %rsi
000000000100de0d	movq	%rsi, 0x20(%rsp)
000000000100de12	movq	0x68(%rsp), %rdi
000000000100de17	addq	%rdi, %rax
000000000100de1a	movq	0x58(%rsp), %rdi
000000000100de1f	movq	0x50(%rsp), %r8
000000000100de24	movq	0x48(%rsp), %r9
000000000100de29	xorl	%ecx, %ecx
000000000100de2b	jmp	0x100de34
000000000100de2d	leaq	0x8(%rax), %rcx
000000000100de31	movq	%r10, %rax
000000000100de34	cmpq	%rdi, %rcx
000000000100de37	jae	0x100df70
000000000100de3d	testb	%bl, %bl
000000000100de3f	jne	0x100df66
000000000100de45	leaq	0x1(%rax), %r10
000000000100de49	testb	%al, (%r10)
000000000100de4c	cmpb	$0x0, 0x1(%rax)
000000000100de50	jne	0x100de58
000000000100de52	leaq	0x38(%rcx), %rax
000000000100de56	jmp	0x100de2d
000000000100de58	movl	$0x1, %eax
000000000100de5d	movzbl	(%r10), %ebx
000000000100de61	testb	%al, %bl
000000000100de63	je	0x100deb1
000000000100de65	movq	%rcx, 0x18(%rsp)
000000000100de6a	movq	%r10, 0x28(%rsp)
000000000100de6f	movb	%al, 0x17(%rsp)
000000000100de73	leaq	(%rcx,%r9), %rbx
000000000100de77	testq	%r8, %r8
000000000100de7a	jne	0x100def3
000000000100de7c	testb	%al, (%rsi)
000000000100de7e	movq	0x1290(%rdx), %r11
000000000100de85	movq	(%rbx), %rbx
000000000100de88	movq	%rbx, (%r11)
000000000100de8b	movq	$0x0, 0x8(%r11)
000000000100de93	movq	0x1290(%rdx), %rbx
000000000100de9a	addq	$0x10, %rbx
000000000100de9e	movq	%rbx, 0x1290(%rdx)
000000000100dea5	movq	0x1298(%rdx), %r11
000000000100deac	cmpq	%rbx, %r11
000000000100deaf	je	0x100debd
000000000100deb1	shll	%eax
000000000100deb3	movl	%eax, %ebx
000000000100deb5	movq	%rcx, %rax
000000000100deb8	jmp	0x100de2d
000000000100debd	xorps	%xmm0, %xmm0
000000000100dec0	movups	%xmm0, (%rsp)
000000000100dec4	callq	runtime.wbBufFlush
000000000100dec9	movzbl	0x17(%rsp), %eax
000000000100dece	movq	0x18(%rsp), %rcx
000000000100ded3	movq	0x30(%rsp), %rdx
000000000100ded8	movq	0x20(%rsp), %rsi
000000000100dedd	movq	0x58(%rsp), %rdi
000000000100dee2	movq	0x50(%rsp), %r8
000000000100dee7	movq	0x48(%rsp), %r9
000000000100deec	movq	0x28(%rsp), %r10
000000000100def1	jmp	0x100deb1
000000000100def3	leaq	(%rcx,%r8), %r11
000000000100def7	testb	%al, (%rsi)
000000000100def9	movq	0x1290(%rdx), %r12
000000000100df00	movq	(%rbx), %rbx
000000000100df03	movq	(%r11), %r11
000000000100df06	movq	%rbx, (%r12)
000000000100df0a	movq	%r11, 0x8(%r12)
000000000100df0f	movq	0x1290(%rdx), %rbx
000000000100df16	addq	$0x10, %rbx
000000000100df1a	movq	%rbx, 0x1290(%rdx)
000000000100df21	movq	0x1298(%rdx), %r11
000000000100df28	cmpq	%rbx, %r11
000000000100df2b	jne	0x100deb1
000000000100df2d	xorps	%xmm0, %xmm0
000000000100df30	movups	%xmm0, (%rsp)
000000000100df34	callq	runtime.wbBufFlush
000000000100df39	movzbl	0x17(%rsp), %eax
000000000100df3e	movq	0x18(%rsp), %rcx
000000000100df43	movq	0x30(%rsp), %rdx
000000000100df48	movq	0x20(%rsp), %rsi
000000000100df4d	movq	0x58(%rsp), %rdi
000000000100df52	movq	0x50(%rsp), %r8
000000000100df57	movq	0x48(%rsp), %r9
000000000100df5c	movq	0x28(%rsp), %r10
000000000100df61	jmp	0x100deb1
000000000100df66	movq	%rax, %r10
000000000100df69	movl	%ebx, %eax
000000000100df6b	jmp	0x100de5d
000000000100df70	movq	0x38(%rsp), %rbp
000000000100df75	addq	$0x40, %rsp
000000000100df79	retq
000000000100df7a	int3
000000000100df7b	int3
000000000100df7c	int3
000000000100df7d	int3
000000000100df7e	int3
000000000100df7f	int3
runtime.typeBitsBulkBarrier:
000000000100df80	subq	$0x60, %rsp
000000000100df84	movq	%rbp, 0x58(%rsp)
000000000100df89	leaq	0x58(%rsp), %rbp
000000000100df8e	movq	0x68(%rsp), %rax
000000000100df93	testq	%rax, %rax
000000000100df96	je	0x100e23c
000000000100df9c	movq	(%rax), %rcx
000000000100df9f	movq	0x80(%rsp), %rdx
000000000100dfa7	cmpq	%rcx, %rdx
000000000100dfaa	jne	0x100e166
000000000100dfb0	movzbl	0x17(%rax), %ecx
000000000100dfb4	testb	$0x40, %cl
000000000100dfb7	jne	0x100e0da
000000000100dfbd	leaq	0xc6c70(%rip), %rcx
000000000100dfc4	cmpb	$0x0, (%rcx)
000000000100dfc7	je	0x100e0d0
000000000100dfcd	movq	%gs:0x30, %rcx
000000000100dfd6	movq	0x30(%rcx), %rcx
000000000100dfda	movq	0xd0(%rcx), %rdx
000000000100dfe1	movq	%rdx, 0x50(%rsp)
000000000100dfe6	testb	%al, (%rdx)
000000000100dfe8	testb	%al, (%rcx)
000000000100dfea	movq	0x20(%rax), %rcx
000000000100dfee	leaq	0x1290(%rdx), %rbx
000000000100dff5	movq	%rbx, 0x40(%rsp)
000000000100dffa	movq	0x78(%rsp), %rsi
000000000100dfff	movq	0x70(%rsp), %rdi
000000000100e004	xorl	%r8d, %r8d
000000000100e007	xorl	%r9d, %r9d
000000000100e00a	jmp	0x100e010
000000000100e00c	addq	$0x8, %r8
000000000100e010	movq	0x8(%rax), %r10
000000000100e014	cmpq	%r10, %r8
000000000100e017	jae	0x100e0c6
000000000100e01d	testq	$0x3f, %r8
000000000100e024	jne	0x100e0be
000000000100e02a	movzbl	(%rcx), %r9d
000000000100e02e	incq	%rcx
000000000100e031	btl	$0x0, %r9d
000000000100e036	jae	0x100e00c
000000000100e038	leaq	(%r8,%rdi), %r10
000000000100e03c	leaq	(%r8,%rsi), %r11
000000000100e040	testb	%al, (%rbx)
000000000100e042	movq	0x1290(%rdx), %r12
000000000100e049	movq	(%r10), %r10
000000000100e04c	movq	(%r11), %r11
000000000100e04f	movq	%r10, (%r12)
000000000100e053	movq	%r11, 0x8(%r12)
000000000100e058	movq	0x1290(%rdx), %r10
000000000100e05f	addq	$0x10, %r10
000000000100e063	movq	%r10, 0x1290(%rdx)
000000000100e06a	movq	0x1298(%rdx), %r11
000000000100e071	cmpq	%r11, %r10
000000000100e074	jne	0x100e00c
000000000100e076	movq	%r8, 0x20(%rsp)
000000000100e07b	movl	%r9d, 0x1c(%rsp)
000000000100e080	movq	%rcx, 0x38(%rsp)
000000000100e085	xorps	%xmm0, %xmm0
000000000100e088	movups	%xmm0, (%rsp)
000000000100e08c	callq	runtime.wbBufFlush
000000000100e091	movq	0x68(%rsp), %rax
000000000100e096	movq	0x38(%rsp), %rcx
000000000100e09b	movq	0x50(%rsp), %rdx
000000000100e0a0	movq	0x40(%rsp), %rbx
000000000100e0a5	movq	0x78(%rsp), %rsi
000000000100e0aa	movq	0x70(%rsp), %rdi
000000000100e0af	movq	0x20(%rsp), %r8
000000000100e0b4	movl	0x1c(%rsp), %r9d
000000000100e0b9	jmp	0x100e00c
000000000100e0be	shrl	%r9d
000000000100e0c1	jmp	0x100e031
000000000100e0c6	movq	0x58(%rsp), %rbp
000000000100e0cb	addq	$0x60, %rsp
000000000100e0cf	retq
000000000100e0d0	movq	0x58(%rsp), %rbp
000000000100e0d5	addq	$0x60, %rsp
000000000100e0d9	retq
000000000100e0da	movq	%rax, (%rsp)
000000000100e0de	callq	"runtime.(*_type).string"
000000000100e0e3	movq	0x10(%rsp), %rax
000000000100e0e8	movq	%rax, 0x30(%rsp)
000000000100e0ed	movq	0x8(%rsp), %rcx
000000000100e0f2	movq	%rcx, 0x48(%rsp)
000000000100e0f7	callq	runtime.printlock
000000000100e0fc	leaq	0x60011(%rip), %rax
000000000100e103	movq	%rax, (%rsp)
000000000100e107	movq	$0x28, 0x8(%rsp)
000000000100e110	callq	runtime.printstring
000000000100e115	movq	0x48(%rsp), %rax
000000000100e11a	movq	%rax, (%rsp)
000000000100e11e	movq	0x30(%rsp), %rax
000000000100e123	movq	%rax, 0x8(%rsp)
000000000100e128	callq	runtime.printstring
000000000100e12d	leaq	0x5d524(%rip), %rax
000000000100e134	movq	%rax, (%rsp)
000000000100e138	movq	$0xf, 0x8(%rsp)
000000000100e141	callq	runtime.printstring
000000000100e146	callq	runtime.printunlock
000000000100e14b	leaq	0x5fb2a(%rip), %rax
000000000100e152	movq	%rax, (%rsp)
000000000100e156	movq	$0x24, 0x8(%rsp)
000000000100e15f	callq	runtime.throw
000000000100e164	ud2
000000000100e166	movq	%rax, (%rsp)
000000000100e16a	callq	"runtime.(*_type).string"
000000000100e16f	movq	0x10(%rsp), %rax
000000000100e174	movq	%rax, 0x30(%rsp)
000000000100e179	movq	0x8(%rsp), %rcx
000000000100e17e	movq	%rcx, 0x48(%rsp)
000000000100e183	movq	0x68(%rsp), %rdx
000000000100e188	movq	(%rdx), %rdx
000000000100e18b	movq	%rdx, 0x28(%rsp)
000000000100e190	callq	runtime.printlock
000000000100e195	leaq	0x5ff78(%rip), %rax
000000000100e19c	movq	%rax, (%rsp)
000000000100e1a0	movq	$0x28, 0x8(%rsp)
000000000100e1a9	callq	runtime.printstring
000000000100e1ae	movq	0x48(%rsp), %rax
000000000100e1b3	movq	%rax, (%rsp)
000000000100e1b7	movq	0x30(%rsp), %rax
000000000100e1bc	movq	%rax, 0x8(%rsp)
000000000100e1c1	callq	runtime.printstring
000000000100e1c6	leaq	0x5cee9(%rip), %rax
000000000100e1cd	movq	%rax, (%rsp)
000000000100e1d1	movq	$0xb, 0x8(%rsp)
000000000100e1da	callq	runtime.printstring
000000000100e1df	movq	0x28(%rsp), %rax
000000000100e1e4	movq	%rax, (%rsp)
000000000100e1e8	callq	runtime.printuint
000000000100e1ed	leaq	0x5d87f(%rip), %rax
000000000100e1f4	movq	%rax, (%rsp)
000000000100e1f8	movq	$0x12, 0x8(%rsp)
000000000100e201	callq	runtime.printstring
000000000100e206	movq	0x80(%rsp), %rax
000000000100e20e	movq	%rax, (%rsp)
000000000100e212	callq	runtime.printuint
000000000100e217	callq	runtime.printnl
000000000100e21c	callq	runtime.printunlock
000000000100e221	leaq	0x5fa54(%rip), %rax
000000000100e228	movq	%rax, (%rsp)
000000000100e22c	movq	$0x24, 0x8(%rsp)
000000000100e235	callq	runtime.throw
000000000100e23a	ud2
000000000100e23c	leaq	0x5ff9d(%rip), %rax
000000000100e243	movq	%rax, (%rsp)
000000000100e247	movq	$0x29, 0x8(%rsp)
000000000100e250	callq	runtime.throw
000000000100e255	ud2
000000000100e257	int3
000000000100e258	int3
000000000100e259	int3
000000000100e25a	int3
000000000100e25b	int3
000000000100e25c	int3
000000000100e25d	int3
000000000100e25e	int3
000000000100e25f	int3
runtime.heapBits.initSpan:
000000000100e260	movq	%gs:0x30, %rcx
000000000100e269	cmpq	0x10(%rcx), %rsp
000000000100e26d	jbe	0x100e45e
000000000100e273	subq	$0x78, %rsp
000000000100e277	movq	%rbp, 0x70(%rsp)
000000000100e27c	leaq	0x70(%rsp), %rbp
000000000100e281	movq	0x98(%rsp), %rcx
000000000100e289	movq	0x20(%rcx), %rax
000000000100e28d	shlq	$0xd, %rax
000000000100e291	movq	%rax, 0x58(%rsp)
000000000100e296	movq	0x68(%rcx), %rdx
000000000100e29a	movq	%rdx, 0x48(%rsp)
000000000100e29f	testq	%rdx, %rdx
000000000100e2a2	jbe	0x100e421
000000000100e2a8	movq	%rdx, %rbx
000000000100e2ab	xorl	%edx, %edx
000000000100e2ad	divq	%rbx
000000000100e2b0	movq	$0x0, 0x30(%rcx)
000000000100e2b8	movq	$-0x1, 0x40(%rcx)
000000000100e2c0	movq	%rax, 0x38(%rcx)
000000000100e2c4	xorps	%xmm0, %xmm0
000000000100e2c7	movups	%xmm0, 0x48(%rcx)
000000000100e2cb	movq	%rax, (%rsp)
000000000100e2cf	callq	runtime.newMarkBits
000000000100e2d4	movq	0x8(%rsp), %rax
000000000100e2d9	movq	0x98(%rsp), %rcx
000000000100e2e1	movq	%rax, 0x50(%rcx)
000000000100e2e5	movq	0x38(%rcx), %rax
000000000100e2e9	movq	%rax, (%rsp)
000000000100e2ed	callq	runtime.newAllocBits
000000000100e2f2	movq	0x8(%rsp), %rax
000000000100e2f7	movq	0x98(%rsp), %rcx
000000000100e2ff	movq	%rax, 0x48(%rcx)
000000000100e303	movq	0x58(%rsp), %rax
000000000100e308	shrq	$0x3, %rax
000000000100e30c	testq	$0x3, %rax
000000000100e312	jne	0x100e443
000000000100e318	movl	0x88(%rsp), %ecx
000000000100e31f	testl	%ecx, %ecx
000000000100e321	jne	0x100e428
000000000100e327	movq	0x90(%rsp), %rdx
000000000100e32f	movq	0x80(%rsp), %rbx
000000000100e337	movl	0x8c(%rsp), %esi
000000000100e33e	jmp	0x100e362
000000000100e340	movb	$-0x1, (%r9)
000000000100e344	incq	%r10
000000000100e347	incq	%r9
000000000100e34a	cmpq	%rdx, %r10
000000000100e34d	jb	0x100e340
000000000100e34f	movq	0x50(%rsp), %r9
000000000100e354	subq	%rdi, %r9
000000000100e357	movq	%rbx, %rdx
000000000100e35a	movq	%rsi, %rbx
000000000100e35d	movl	%eax, %esi
000000000100e35f	movq	%r9, %rax
000000000100e362	testq	%rax, %rax
000000000100e365	jbe	0x100e417
000000000100e36b	movq	%rax, 0x50(%rsp)
000000000100e370	movq	%rbx, 0x80(%rsp)
000000000100e378	movq	%rbx, (%rsp)
000000000100e37c	movl	%ecx, 0x8(%rsp)
000000000100e380	movl	%esi, 0xc(%rsp)
000000000100e384	movq	%rdx, 0x10(%rsp)
000000000100e389	movq	%rax, 0x18(%rsp)
000000000100e38e	callq	runtime.heapBits.forwardOrBoundary
000000000100e393	movl	0x2c(%rsp), %eax
000000000100e397	movl	0x28(%rsp), %ecx
000000000100e39b	movq	0x38(%rsp), %rdx
000000000100e3a0	movq	0x30(%rsp), %rbx
000000000100e3a5	movq	0x20(%rsp), %rsi
000000000100e3aa	movq	%rdx, %rdi
000000000100e3ad	shrq	$0x2, %rdx
000000000100e3b1	movq	0x48(%rsp), %r8
000000000100e3b6	cmpq	$0x8, %r8
000000000100e3ba	jne	0x100e3c9
000000000100e3bc	movq	0x80(%rsp), %r9
000000000100e3c4	xorl	%r10d, %r10d
000000000100e3c7	jmp	0x100e34a
000000000100e3c9	movl	%eax, 0x44(%rsp)
000000000100e3cd	movl	%ecx, 0x40(%rsp)
000000000100e3d1	movq	%rsi, 0x68(%rsp)
000000000100e3d6	movq	%rdi, 0x58(%rsp)
000000000100e3db	movq	%rbx, 0x60(%rsp)
000000000100e3e0	movq	0x80(%rsp), %rax
000000000100e3e8	movq	%rax, (%rsp)
000000000100e3ec	movq	%rdx, 0x8(%rsp)
000000000100e3f1	callq	runtime.memclrNoHeapPointers
000000000100e3f6	movl	0x44(%rsp), %eax
000000000100e3fa	movl	0x40(%rsp), %ecx
000000000100e3fe	movq	0x60(%rsp), %rbx
000000000100e403	movq	0x68(%rsp), %rsi
000000000100e408	movq	0x58(%rsp), %rdi
000000000100e40d	movq	0x48(%rsp), %r8
000000000100e412	jmp	0x100e34f
000000000100e417	movq	0x70(%rsp), %rbp
000000000100e41c	addq	$0x78, %rsp
000000000100e420	retq
000000000100e421	xorl	%eax, %eax
000000000100e423	jmp	0x100e2b0
000000000100e428	leaq	0x5e1f4(%rip), %rax
000000000100e42f	movq	%rax, (%rsp)
000000000100e433	movq	$0x18, 0x8(%rsp)
000000000100e43c	callq	runtime.throw
000000000100e441	ud2
000000000100e443	leaq	0x5e512(%rip), %rax
000000000100e44a	movq	%rax, (%rsp)
000000000100e44e	movq	$0x1a, 0x8(%rsp)
000000000100e457	callq	runtime.throw
000000000100e45c	ud2
000000000100e45e	callq	runtime.morestack_noctxt
000000000100e463	jmp	runtime.heapBits.initSpan
000000000100e468	int3
000000000100e469	int3
000000000100e46a	int3
000000000100e46b	int3
000000000100e46c	int3
000000000100e46d	int3
000000000100e46e	int3
000000000100e46f	int3
runtime.heapBits.initCheckmarkSpan:
000000000100e470	movq	%gs:0x30, %rcx
000000000100e479	cmpq	0x10(%rcx), %rsp
000000000100e47d	jbe	0x100e59d
000000000100e483	subq	$0x50, %rsp
000000000100e487	movq	%rbp, 0x48(%rsp)
000000000100e48c	leaq	0x48(%rsp), %rbp
000000000100e491	movq	0x70(%rsp), %rax
000000000100e496	cmpq	$0x8, %rax
000000000100e49a	jne	0x100e50d
000000000100e49c	xorl	%eax, %eax
000000000100e49e	movq	0x68(%rsp), %rcx
000000000100e4a3	movl	0x64(%rsp), %edx
000000000100e4a7	movl	0x60(%rsp), %ebx
000000000100e4ab	movq	0x58(%rsp), %rsi
000000000100e4b0	jmp	0x100e4f9
000000000100e4b2	movq	%rax, 0x40(%rsp)
000000000100e4b7	movzbl	(%rsi), %eax
000000000100e4ba	andl	$-0x10, %eax
000000000100e4bd	movb	%al, (%rsi)
000000000100e4bf	movq	%rsi, (%rsp)
000000000100e4c3	movl	%ebx, 0x8(%rsp)
000000000100e4c7	movl	%edx, 0xc(%rsp)
000000000100e4cb	movq	%rcx, 0x10(%rsp)
000000000100e4d0	movq	$0x4, 0x18(%rsp)
000000000100e4d9	callq	runtime.heapBits.forward
000000000100e4de	movq	0x40(%rsp), %rax
000000000100e4e3	addq	$0x4, %rax
000000000100e4e7	movl	0x28(%rsp), %ebx
000000000100e4eb	movl	0x2c(%rsp), %edx
000000000100e4ef	movq	0x30(%rsp), %rcx
000000000100e4f4	movq	0x20(%rsp), %rsi
000000000100e4f9	movq	0x78(%rsp), %rdi
000000000100e4fe	cmpq	%rdi, %rax
000000000100e501	jb	0x100e4b2
000000000100e503	movq	0x48(%rsp), %rbp
000000000100e508	addq	$0x50, %rsp
000000000100e50c	retq
000000000100e50d	xorl	%ecx, %ecx
000000000100e50f	movq	0x68(%rsp), %rdx
000000000100e514	movl	0x64(%rsp), %ebx
000000000100e518	movl	0x60(%rsp), %esi
000000000100e51c	movq	0x58(%rsp), %rdi
000000000100e521	jmp	0x100e589
000000000100e523	movq	%rcx, 0x38(%rsp)
000000000100e528	movzbl	(%rdi), %r8d
000000000100e52c	leal	0x1(%rsi), %ecx
000000000100e52f	movl	$0x10, %r9d
000000000100e535	shll	%cl, %r9d
000000000100e538	cmpl	$0x20, %ecx
000000000100e53b	sbbl	%r10d, %r10d
000000000100e53e	andl	%r10d, %r9d
000000000100e541	notl	%r9d
000000000100e544	andl	%r8d, %r9d
000000000100e547	movb	%r9b, (%rdi)
000000000100e54a	shrq	$0x3, %rax
000000000100e54e	movq	%rax, 0x18(%rsp)
000000000100e553	movq	%rdi, (%rsp)
000000000100e557	movl	%esi, 0x8(%rsp)
000000000100e55b	movl	%ebx, 0xc(%rsp)
000000000100e55f	movq	%rdx, 0x10(%rsp)
000000000100e564	callq	runtime.heapBits.forward
000000000100e569	movq	0x38(%rsp), %rax
000000000100e56e	leaq	0x1(%rax), %rcx
000000000100e572	movq	0x20(%rsp), %rdi
000000000100e577	movl	0x28(%rsp), %esi
000000000100e57b	movl	0x2c(%rsp), %ebx
000000000100e57f	movq	0x30(%rsp), %rdx
000000000100e584	movq	0x70(%rsp), %rax
000000000100e589	movq	0x78(%rsp), %r8
000000000100e58e	cmpq	%r8, %rcx
000000000100e591	jb	0x100e523
000000000100e593	movq	0x48(%rsp), %rbp
000000000100e598	addq	$0x50, %rsp
000000000100e59c	retq
000000000100e59d	callq	runtime.morestack_noctxt
000000000100e5a2	jmp	runtime.heapBits.initCheckmarkSpan
000000000100e5a7	int3
000000000100e5a8	int3
000000000100e5a9	int3
000000000100e5aa	int3
000000000100e5ab	int3
000000000100e5ac	int3
000000000100e5ad	int3
000000000100e5ae	int3
000000000100e5af	int3
runtime.heapBits.clearCheckmarkSpan:
000000000100e5b0	movq	%gs:0x30, %rcx
000000000100e5b9	cmpq	0x10(%rcx), %rsp
000000000100e5bd	jbe	0x100e64d
000000000100e5c3	subq	$0x48, %rsp
000000000100e5c7	movq	%rbp, 0x40(%rsp)
000000000100e5cc	leaq	0x40(%rsp), %rbp
000000000100e5d1	movq	0x68(%rsp), %rax
000000000100e5d6	cmpq	$0x8, %rax
000000000100e5da	jne	0x100e643
000000000100e5dc	xorl	%eax, %eax
000000000100e5de	movq	0x60(%rsp), %rcx
000000000100e5e3	movl	0x5c(%rsp), %edx
000000000100e5e7	movl	0x58(%rsp), %ebx
000000000100e5eb	movq	0x50(%rsp), %rsi
000000000100e5f0	jmp	0x100e639
000000000100e5f2	movq	%rax, 0x38(%rsp)
000000000100e5f7	movzbl	(%rsi), %eax
000000000100e5fa	orl	$0xf, %eax
000000000100e5fd	movb	%al, (%rsi)
000000000100e5ff	movq	%rsi, (%rsp)
000000000100e603	movl	%ebx, 0x8(%rsp)
000000000100e607	movl	%edx, 0xc(%rsp)
000000000100e60b	movq	%rcx, 0x10(%rsp)
000000000100e610	movq	$0x4, 0x18(%rsp)
000000000100e619	callq	runtime.heapBits.forward
000000000100e61e	movq	0x38(%rsp), %rax
000000000100e623	addq	$0x4, %rax
000000000100e627	movl	0x28(%rsp), %ebx
000000000100e62b	movl	0x2c(%rsp), %edx
000000000100e62f	movq	0x30(%rsp), %rcx
000000000100e634	movq	0x20(%rsp), %rsi
000000000100e639	movq	0x70(%rsp), %rdi
000000000100e63e	cmpq	%rdi, %rax
000000000100e641	jb	0x100e5f2
000000000100e643	movq	0x40(%rsp), %rbp
000000000100e648	addq	$0x48, %rsp
000000000100e64c	retq
000000000100e64d	callq	runtime.morestack_noctxt
000000000100e652	jmp	runtime.heapBits.clearCheckmarkSpan
000000000100e657	int3
000000000100e658	int3
000000000100e659	int3
000000000100e65a	int3
000000000100e65b	int3
000000000100e65c	int3
000000000100e65d	int3
000000000100e65e	int3
000000000100e65f	int3
runtime.(*mspan).countAlloc:
000000000100e660	movq	0x8(%rsp), %rax
000000000100e665	movq	0x38(%rax), %rcx
000000000100e669	movq	%rcx, %rdx
000000000100e66c	shrq	$0x3, %rcx
000000000100e670	xorl	%ebx, %ebx
000000000100e672	xorl	%esi, %esi
000000000100e674	jmp	0x100e69b
000000000100e676	movq	0x50(%rax), %rdi
000000000100e67a	leaq	(%rbx,%rdi), %r8
000000000100e67e	testb	%al, (%r8)
000000000100e681	leaq	0x1(%rbx), %r8
000000000100e685	movzbl	(%rbx,%rdi), %edi
000000000100e689	leaq	runtime.oneBitCount(%rip), %r9
000000000100e690	movzbl	(%r9,%rdi), %edi
000000000100e695	addq	%rdi, %rsi
000000000100e698	movq	%r8, %rbx
000000000100e69b	cmpq	%rcx, %rbx
000000000100e69e	jb	0x100e676
000000000100e6a0	testq	$0x7, %rdx
000000000100e6a7	je	0x100e6e1
000000000100e6a9	movq	0x50(%rax), %rax
000000000100e6ad	leaq	(%rcx,%rax), %rbx
000000000100e6b1	testb	%al, (%rbx)
000000000100e6b3	andq	$0x7, %rdx
000000000100e6b7	movzbl	(%rcx,%rax), %eax
000000000100e6bb	movq	%rdx, %rcx
000000000100e6be	movl	$0x1, %ebx
000000000100e6c3	shll	%cl, %ebx
000000000100e6c5	leal	-0x1(%rbx), %edx
000000000100e6c8	andl	%edx, %eax
000000000100e6ca	movzbl	%al, %eax
000000000100e6cd	leaq	runtime.oneBitCount(%rip), %rdx
000000000100e6d4	movzbl	(%rax,%rdx), %eax
000000000100e6d8	addq	%rsi, %rax
000000000100e6db	movq	%rax, 0x10(%rsp)
000000000100e6e0	retq
000000000100e6e1	movq	%rsi, %rax
000000000100e6e4	jmp	0x100e6db
000000000100e6e6	int3
000000000100e6e7	int3
000000000100e6e8	int3
000000000100e6e9	int3
000000000100e6ea	int3
000000000100e6eb	int3
000000000100e6ec	int3
000000000100e6ed	int3
000000000100e6ee	int3
000000000100e6ef	int3
runtime.heapBitsSetType:
000000000100e6f0	movq	%gs:0x30, %rcx
000000000100e6f9	leaq	-0x50(%rsp), %rax
000000000100e6fe	cmpq	0x10(%rcx), %rax
000000000100e702	jbe	0x100f11b
000000000100e708	subq	$0xd0, %rsp
000000000100e70f	movq	%rbp, 0xc8(%rsp)
000000000100e717	leaq	0xc8(%rsp), %rbp
000000000100e71f	movq	0xe0(%rsp), %rdx
000000000100e727	cmpq	$0x8, %rdx
000000000100e72b	je	0x100f05d
000000000100e731	movq	0xb0060(%rip), %rbx
000000000100e738	testb	%al, (%rbx)
000000000100e73a	movq	0xd8(%rsp), %rsi
000000000100e742	movabsq	$0x800000000000, %rdi
000000000100e74c	addq	%rsi, %rdi
000000000100e74f	shrq	$0x1a, %rdi
000000000100e753	cmpq	$0x400000, %rdi
000000000100e75a	jae	0x100f114
000000000100e760	movq	(%rbx,%rdi,8), %rbx
000000000100e764	testq	%rbx, %rbx
000000000100e767	je	0x100f049
000000000100e76d	movq	%rsi, %r8
000000000100e770	shrq	$0x5, %rsi
000000000100e774	andq	$0x1fffff, %rsi
000000000100e77b	addq	%rbx, %rsi
000000000100e77e	movq	%r8, %r9
000000000100e781	shrq	$0x3, %r8
000000000100e785	andq	$0x3, %r8
000000000100e789	addq	$0x1fffff, %rbx
000000000100e790	movq	%rdi, %rax
000000000100e793	movq	0xf0(%rsp), %r10
000000000100e79b	movq	0x20(%r10), %r11
000000000100e79f	cmpq	$0x10, %rdx
000000000100e7a3	je	0x100efdc
000000000100e7a9	leaq	(%rdx,%r9), %r12
000000000100e7ad	movl	%edi, %r13d
000000000100e7b0	movabsq	$0x7fffffffffff, %r14
000000000100e7ba	addq	%r14, %r12
000000000100e7bd	shrq	$0x1a, %r12
000000000100e7c1	cmpq	%r12, %r13
000000000100e7c4	je	0x100efc9
000000000100e7ca	movq	%r9, %rbx
000000000100e7cd	xorl	%ecx, %ecx
000000000100e7cf	movq	%r12, 0x98(%rsp)
000000000100e7d7	movq	%rax, 0x90(%rsp)
000000000100e7df	movzbl	0x17(%r10), %esi
000000000100e7e4	testb	$0x40, %sil
000000000100e7e8	jne	0x100ef5c
000000000100e7ee	movq	(%r10), %rcx
000000000100e7f1	movq	0xe8(%rsp), %rsi
000000000100e7f9	cmpq	%rsi, %rcx
000000000100e7fc	jae	0x100ef3e
000000000100e802	movq	0x8(%r10), %rdi
000000000100e806	shrq	$0x3, %rdi
000000000100e80a	cmpq	$0x39, %rdi
000000000100e80e	ja	0x100ef03
000000000100e814	movq	%rcx, 0x88(%rsp)
000000000100e81c	movq	%r11, %r14
000000000100e81f	xorl	%r15d, %r15d
000000000100e822	xorl	%r11d, %r11d
000000000100e825	movq	%r11, 0x50(%rsp)
000000000100e82a	movq	%r14, %r11
000000000100e82d	jmp	0x100e872
000000000100e82f	leaq	0x8(%r15), %rbx
000000000100e833	movzbl	(%r11), %eax
000000000100e837	movq	%r15, %rcx
000000000100e83a	shlq	%cl, %rax
000000000100e83d	cmpq	$0x40, %rcx
000000000100e841	sbbq	%rcx, %rcx
000000000100e844	andq	%rcx, %rax
000000000100e847	movq	0x50(%rsp), %rcx
000000000100e84c	orq	%rax, %rcx
000000000100e84f	incq	%r11
000000000100e852	movq	0x90(%rsp), %rax
000000000100e85a	movq	%rbx, %r15
000000000100e85d	movq	%rcx, 0x50(%rsp)
000000000100e862	movq	0x88(%rsp), %rcx
000000000100e86a	movq	0xd8(%rsp), %rbx
000000000100e872	cmpq	%rdi, %r15
000000000100e875	jb	0x100e82f
000000000100e877	movq	%rcx, %rdi
000000000100e87a	shrq	$0x3, %rcx
000000000100e87e	leaq	(%rcx,%rcx), %r11
000000000100e882	cmpq	$0x39, %r11
000000000100e886	ja	0x100eef3
000000000100e88c	movq	0x50(%rsp), %r11
000000000100e891	movq	%rcx, %r15
000000000100e894	jmp	0x100e8bb
000000000100e896	movq	%r11, 0x50(%rsp)
000000000100e89b	shlq	%cl, %r11
000000000100e89e	cmpq	$0x40, %rcx
000000000100e8a2	sbbq	%rbx, %rbx
000000000100e8a5	andq	%rbx, %r11
000000000100e8a8	movq	0x50(%rsp), %rbx
000000000100e8ad	orq	%rbx, %r11
000000000100e8b0	addq	%rcx, %rcx
000000000100e8b3	movq	0xd8(%rsp), %rbx
000000000100e8bb	cmpq	$0x40, %rcx
000000000100e8bf	jbe	0x100e896
000000000100e8c1	testb	%r15b, %r15b
000000000100e8c4	je	0x100f10d
000000000100e8ca	movq	%rbx, %rcx
000000000100e8cd	movzbl	%r15b, %ebx
000000000100e8d1	movl	$0x39, %r12d
000000000100e8d7	movzbl	%r12b, %r12d
000000000100e8db	movl	%r12d, %eax
000000000100e8de	movq	%rdx, %r12
000000000100e8e1	xorl	%edx, %edx
000000000100e8e3	divw	%bx
000000000100e8e6	movzbl	%al, %edx
000000000100e8e9	imulq	%r15, %rdx
000000000100e8ed	movq	%rcx, %rax
000000000100e8f0	movq	%rdx, %rcx
000000000100e8f3	movl	$0x1, %ebx
000000000100e8f8	shlq	%cl, %rbx
000000000100e8fb	cmpq	$0x40, %rcx
000000000100e8ff	sbbq	%r15, %r15
000000000100e902	andq	%r15, %rbx
000000000100e905	decq	%rbx
000000000100e908	andq	%rbx, %r11
000000000100e90b	xorl	%edx, %edx
000000000100e90d	xorl	%ebx, %ebx
000000000100e90f	movq	%rcx, %r15
000000000100e912	testq	%rdx, %rdx
000000000100e915	je	0x100eee3
000000000100e91b	movq	%r13, %rcx
000000000100e91e	movzbl	(%rdx), %r13d
000000000100e922	incq	%rdx
000000000100e925	movq	%rax, 0x68(%rsp)
000000000100e92a	movl	$0x8, %eax
000000000100e92f	movq	%rax, 0x58(%rsp)
000000000100e934	movq	0x68(%rsp), %rax
000000000100e939	cmpq	%rdi, %rsi
000000000100e93c	jne	0x100eea9
000000000100e942	movq	0x8(%r10), %rsi
000000000100e946	shrq	$0x3, %rsi
000000000100e94a	testq	%rsi, %rsi
000000000100e94d	je	0x100f088
000000000100e953	cmpq	$0x2, %rsi
000000000100e957	movl	$0x2, %edi
000000000100e95c	cmovbq	%rdi, %rsi
000000000100e960	testl	%r8d, %r8d
000000000100e963	jne	0x100ee4a
000000000100e969	movq	%r13, %rdi
000000000100e96c	andq	$0xf, %r13
000000000100e970	orq	$0xd0, %r13
000000000100e977	cmpq	$0x4, %rsi
000000000100e97b	ja	0x100ecec
000000000100e981	movl	$0x4, %edx
000000000100e986	cmpq	%rsi, %rdx
000000000100e989	jbe	0x100ece1
000000000100e98f	movq	%rdx, %rbx
000000000100e992	subq	%rsi, %rdx
000000000100e995	addq	$-0x4, %rdx
000000000100e999	negq	%rdx
000000000100e99c	movq	%rcx, %rsi
000000000100e99f	movq	%rdx, %rcx
000000000100e9a2	movl	$0x1, %edi
000000000100e9a7	shlq	%cl, %rdi
000000000100e9aa	cmpq	$0x40, %rcx
000000000100e9ae	sbbq	%rdx, %rdx
000000000100e9b1	andq	%rdx, %rdi
000000000100e9b4	leaq	-0x1(%rdi), %rdx
000000000100e9b8	movq	%rdx, %rdi
000000000100e9bb	shlq	$0x4, %rdx
000000000100e9bf	orq	%rdi, %rdx
000000000100e9c2	andq	%rdx, %r13
000000000100e9c5	movq	%r12, %rcx
000000000100e9c8	shrq	$0x3, %r12
000000000100e9cc	cmpq	%r12, %rbx
000000000100e9cf	ja	0x100ecd3
000000000100e9d5	movb	%r13b, (%r9)
000000000100e9d8	leaq	0x4(%rbx), %rdx
000000000100e9dc	leaq	0x1(%r9), %rbx
000000000100e9e0	jmp	0x100e9ec
000000000100e9e2	movb	$0x0, (%rbx)
000000000100e9e5	addq	$0x4, %rdx
000000000100e9e9	incq	%rbx
000000000100e9ec	cmpq	%r12, %rdx
000000000100e9ef	jbe	0x100e9e2
000000000100e9f1	xorl	%edi, %edi
000000000100e9f3	leaq	0x2(%r12), %r8
000000000100e9f8	cmpq	%rdx, %r8
000000000100e9fb	jne	0x100ecc3
000000000100ea01	movzbl	(%rbx), %edx
000000000100ea04	andl	$-0x34, %edx
000000000100ea07	orl	%edx, %edi
000000000100ea09	movb	%dil, (%rbx)
000000000100ea0c	movq	0x98(%rsp), %rdx
000000000100ea14	cmpq	%rdx, %rsi
000000000100ea17	je	0x100ebc0
000000000100ea1d	movq	0xafd74(%rip), %rdx
000000000100ea24	testb	%al, (%rdx)
000000000100ea26	movq	0x90(%rsp), %rbx
000000000100ea2e	movq	(%rdx,%rbx,8), %rdx
000000000100ea32	testq	%rdx, %rdx
000000000100ea35	je	0x100ecb3
000000000100ea3b	movq	%rax, %rsi
000000000100ea3e	shrq	$0x5, %rax
000000000100ea42	andq	$0x1fffff, %rax
000000000100ea48	addq	%rdx, %rax
000000000100ea4b	movq	%rsi, %rdi
000000000100ea4e	shrq	$0x3, %rsi
000000000100ea52	andq	$0x3, %rsi
000000000100ea56	addq	$0x1fffff, %rdx
000000000100ea5d	shrq	$0x3, %rcx
000000000100ea61	movq	%rdi, %r8
000000000100ea64	cmpl	$0x2, %esi
000000000100ea67	jne	0x100eb70
000000000100ea6d	movzbl	(%rax), %r9d
000000000100ea71	andl	$0x33, %r9d
000000000100ea75	movzbl	(%rdi), %r10d
000000000100ea79	orl	%r10d, %r9d
000000000100ea7c	movb	%r9b, (%rax)
000000000100ea7f	leal	0x1(%rsi), %r9d
000000000100ea83	cmpl	$0x3, %r9d
000000000100ea87	jae	0x100ec4e
000000000100ea8d	addl	$0x2, %esi
000000000100ea90	addq	$-0x2, %rcx
000000000100ea94	incq	%rdi
000000000100ea97	jmp	0x100eb70
000000000100ea9c	movq	%rax, 0xa8(%rsp)
000000000100eaa4	movq	%rcx, 0x60(%rsp)
000000000100eaa9	shrq	$0x2, %rcx
000000000100eaad	shlq	$0x2, %rcx
000000000100eab1	movq	%rcx, 0x18(%rsp)
000000000100eab6	movq	%rax, (%rsp)
000000000100eaba	movl	%esi, 0x8(%rsp)
000000000100eabe	movl	%ebx, 0xc(%rsp)
000000000100eac2	movq	%rdx, 0x10(%rsp)
000000000100eac7	callq	runtime.heapBits.forwardOrBoundary
000000000100eacc	movq	0x20(%rsp), %rax
000000000100ead1	movq	%rax, 0xc0(%rsp)
000000000100ead9	movq	0x38(%rsp), %rcx
000000000100eade	movq	%rcx, 0x48(%rsp)
000000000100eae3	movq	0x30(%rsp), %rdx
000000000100eae8	movq	%rdx, 0xb8(%rsp)
000000000100eaf0	movl	0x2c(%rsp), %ebx
000000000100eaf4	movl	%ebx, 0x44(%rsp)
000000000100eaf8	movl	0x28(%rsp), %esi
000000000100eafc	movl	%esi, 0x40(%rsp)
000000000100eb00	movq	0xa8(%rsp), %rdi
000000000100eb08	movq	%rdi, (%rsp)
000000000100eb0c	movq	0xa0(%rsp), %rdi
000000000100eb14	movq	%rdi, 0x8(%rsp)
000000000100eb19	shrq	$0x2, %rcx
000000000100eb1d	movq	%rcx, 0x98(%rsp)
000000000100eb25	movq	%rcx, 0x10(%rsp)
000000000100eb2a	callq	runtime.memmove
000000000100eb2f	movq	0x60(%rsp), %rcx
000000000100eb34	movq	0x48(%rsp), %rax
000000000100eb39	subq	%rax, %rcx
000000000100eb3c	movq	0xa0(%rsp), %rax
000000000100eb44	movq	0x98(%rsp), %rdx
000000000100eb4c	leaq	(%rdx,%rax), %rdi
000000000100eb50	movq	0xd8(%rsp), %r8
000000000100eb58	movq	0xb8(%rsp), %rdx
000000000100eb60	movl	0x44(%rsp), %ebx
000000000100eb64	movl	0x40(%rsp), %esi
000000000100eb68	movq	0xc0(%rsp), %rax
000000000100eb70	movq	%rdi, 0xa0(%rsp)
000000000100eb78	cmpq	$0x4, %rcx
000000000100eb7c	jae	0x100ea9c
000000000100eb82	cmpq	$0x2, %rcx
000000000100eb86	jne	0x100ec46
000000000100eb8c	movzbl	(%rax), %ecx
000000000100eb8f	andl	$-0x34, %ecx
000000000100eb92	movzbl	(%rdi), %r9d
000000000100eb96	orl	%r9d, %ecx
000000000100eb99	movb	%cl, (%rax)
000000000100eb9b	cmpl	$0x3, %esi
000000000100eb9e	jae	0x100ebfd
000000000100eba0	leal	0x1(%rsi), %ecx
000000000100eba3	cmpl	$0x3, %ecx
000000000100eba6	jae	0x100ebd0
000000000100eba8	leaq	0x1(%rdi), %rax
000000000100ebac	movq	%r8, %rcx
000000000100ebaf	movq	%r8, (%rsp)
000000000100ebb3	subq	%rcx, %rax
000000000100ebb6	movq	%rax, 0x8(%rsp)
000000000100ebbb	callq	runtime.memclrNoHeapPointers
000000000100ebc0	movq	0xc8(%rsp), %rbp
000000000100ebc8	addq	$0xd0, %rsp
000000000100ebcf	retq
000000000100ebd0	cmpq	%rdx, %rax
000000000100ebd3	jne	0x100eba8
000000000100ebd5	movq	%rax, (%rsp)
000000000100ebd9	movl	%ecx, 0x8(%rsp)
000000000100ebdd	movl	%ebx, 0xc(%rsp)
000000000100ebe1	movq	%rdx, 0x10(%rsp)
000000000100ebe6	callq	runtime.heapBits.nextArena
000000000100ebeb	movq	0xa0(%rsp), %rdi
000000000100ebf3	movq	0xd8(%rsp), %r8
000000000100ebfb	jmp	0x100eba8
000000000100ebfd	cmpq	%rdx, %rax
000000000100ec00	je	0x100ec09
000000000100ec02	incq	%rax
000000000100ec05	xorl	%ecx, %ecx
000000000100ec07	jmp	0x100eba3
000000000100ec09	movq	%rax, (%rsp)
000000000100ec0d	movl	%esi, 0x8(%rsp)
000000000100ec11	movl	%ebx, 0xc(%rsp)
000000000100ec15	movq	%rdx, 0x10(%rsp)
000000000100ec1a	callq	runtime.heapBits.nextArena
000000000100ec1f	movl	0x24(%rsp), %ebx
000000000100ec23	movl	0x20(%rsp), %ecx
000000000100ec27	movq	0x28(%rsp), %rdx
000000000100ec2c	movq	0x18(%rsp), %rax
000000000100ec31	movq	0xa0(%rsp), %rdi
000000000100ec39	movq	0xd8(%rsp), %r8
000000000100ec41	jmp	0x100eba3
000000000100ec46	movq	%rdi, %rax
000000000100ec49	jmp	0x100ebac
000000000100ec4e	cmpq	%rdx, %rax
000000000100ec51	je	0x100ec5d
000000000100ec53	incq	%rax
000000000100ec56	xorl	%esi, %esi
000000000100ec58	jmp	0x100ea90
000000000100ec5d	movq	%rcx, 0x80(%rsp)
000000000100ec65	movq	%rdi, 0xb0(%rsp)
000000000100ec6d	movq	%rax, (%rsp)
000000000100ec71	movl	%r9d, 0x8(%rsp)
000000000100ec76	movl	%ebx, 0xc(%rsp)
000000000100ec7a	movq	%rdx, 0x10(%rsp)
000000000100ec7f	callq	runtime.heapBits.nextArena
000000000100ec84	movq	0x28(%rsp), %rdx
000000000100ec89	movl	0x24(%rsp), %ebx
000000000100ec8d	movl	0x20(%rsp), %esi
000000000100ec91	movq	0x18(%rsp), %rax
000000000100ec96	movq	0x80(%rsp), %rcx
000000000100ec9e	movq	0xb0(%rsp), %rdi
000000000100eca6	movq	0xd8(%rsp), %r8
000000000100ecae	jmp	0x100ea90
000000000100ecb3	movq	%rax, %rdi
000000000100ecb6	xorl	%edx, %edx
000000000100ecb8	xorl	%ebx, %ebx
000000000100ecba	xorl	%esi, %esi
000000000100ecbc	xorl	%eax, %eax
000000000100ecbe	jmp	0x100ea5d
000000000100ecc3	movq	0x98(%rsp), %rdx
000000000100eccb	cmpq	%rdx, %rsi
000000000100ecce	jmp	0x100ea17
000000000100ecd3	movq	%rbx, %rdx
000000000100ecd6	movq	%r9, %rbx
000000000100ecd9	movq	%r13, %rdi
000000000100ecdc	jmp	0x100e9f3
000000000100ece1	movq	%rdx, %rbx
000000000100ece4	movq	%rcx, %rsi
000000000100ece7	jmp	0x100e9c5
000000000100ecec	movb	%r13b, (%r9)
000000000100ecef	shrq	$0x4, %rdi
000000000100ecf3	movq	0x58(%rsp), %r8
000000000100ecf8	addq	$-0x4, %r8
000000000100ecfc	incq	%r9
000000000100ecff	movl	$0x4, %r10d
000000000100ed05	addq	$-0x4, %r8
000000000100ed09	jmp	0x100ed31
000000000100ed0b	testb	%al, (%r10)
000000000100ed0e	movb	%r13b, 0x1(%r9)
000000000100ed12	shrq	$0x4, %rdx
000000000100ed16	addq	$0x2, %r9
000000000100ed1a	movq	%r8, %r10
000000000100ed1d	movq	%rcx, %r8
000000000100ed20	movq	%rdi, %rcx
000000000100ed23	movq	%rdx, %rdi
000000000100ed26	movq	%rax, %rdx
000000000100ed29	movq	0xd8(%rsp), %rax
000000000100ed31	movq	%rdi, %r13
000000000100ed34	andq	$0xf, %rdi
000000000100ed38	orq	$0xf0, %rdi
000000000100ed3f	leaq	0x4(%r10), %rax
000000000100ed43	cmpq	%rsi, %rax
000000000100ed46	jae	0x100ee39
000000000100ed4c	movb	%dil, (%r9)
000000000100ed4f	shrq	$0x4, %r13
000000000100ed53	cmpq	%rdx, %rbx
000000000100ed56	je	0x100edb5
000000000100ed58	cmpq	$0x8, %r8
000000000100ed5c	jae	0x100eda6
000000000100ed5e	movzbl	(%rdx), %eax
000000000100ed61	movq	%rcx, %rdi
000000000100ed64	movq	%r8, %rcx
000000000100ed67	shlq	%cl, %rax
000000000100ed6a	orq	%rax, %r13
000000000100ed6d	leaq	0x1(%rdx), %rax
000000000100ed71	movq	%r13, %rdx
000000000100ed74	andq	$0xf, %r13
000000000100ed78	orq	$0xf0, %r13
000000000100ed7f	leaq	0x8(%r10), %r8
000000000100ed83	leaq	0x1(%r9), %r10
000000000100ed87	cmpq	%rsi, %r8
000000000100ed8a	jb	0x100ed0b
000000000100ed90	movq	0xd8(%rsp), %rax
000000000100ed98	movq	%rdi, %rcx
000000000100ed9b	movq	%r8, %rdx
000000000100ed9e	movq	%r10, %r9
000000000100eda1	jmp	0x100e986
000000000100eda6	addq	$-0x8, %r8
000000000100edaa	movq	%rcx, %rdi
000000000100edad	movq	%rdx, %rax
000000000100edb0	movq	%r8, %rcx
000000000100edb3	jmp	0x100ed71
000000000100edb5	testq	%rdx, %rdx
000000000100edb8	je	0x100ee06
000000000100edba	movzbl	(%rdx), %eax
000000000100edbd	movq	%rcx, %rdx
000000000100edc0	movq	%r8, %rcx
000000000100edc3	shlq	%cl, %rax
000000000100edc6	cmpq	$0x40, %rcx
000000000100edca	sbbq	%rdi, %rdi
000000000100edcd	andq	%rax, %rdi
000000000100edd0	orq	%rdi, %r13
000000000100edd3	leaq	(%rcx,%r15), %rax
000000000100edd7	cmpq	$0x8, %rax
000000000100eddb	jae	0x100edfc
000000000100eddd	movzbl	(%r14), %edi
000000000100ede1	movq	%rax, %rcx
000000000100ede4	shlq	%cl, %rdi
000000000100ede7	orq	%rdi, %r13
000000000100edea	leaq	0x1(%r14), %rdi
000000000100edee	movq	%rax, %rcx
000000000100edf1	movq	%rdi, %rax
000000000100edf4	movq	%rdx, %rdi
000000000100edf7	jmp	0x100ed71
000000000100edfc	leaq	-0x8(%rcx,%r15), %rax
000000000100ee01	movq	%r14, %rdi
000000000100ee04	jmp	0x100edee
000000000100ee06	cmpq	$0x8, %r8
000000000100ee0a	jae	0x100ee31
000000000100ee0c	movq	%rcx, %rax
000000000100ee0f	movq	%r8, %rcx
000000000100ee12	movq	%r11, %rdi
000000000100ee15	shlq	%cl, %r11
000000000100ee18	orq	%r11, %r13
000000000100ee1b	leaq	(%rcx,%r15), %r8
000000000100ee1f	addq	$-0x8, %r8
000000000100ee23	movq	%rdi, %r11
000000000100ee26	movq	%rdx, %rdi
000000000100ee29	movq	%rax, %rdx
000000000100ee2c	movq	%r8, %rax
000000000100ee2f	jmp	0x100edee
000000000100ee31	movq	%rcx, %rax
000000000100ee34	movq	%r11, %rdi
000000000100ee37	jmp	0x100ee1f
000000000100ee39	movq	%rax, %r8
000000000100ee3c	movq	%r9, %r10
000000000100ee3f	movq	%rdi, %r13
000000000100ee42	movq	%rcx, %rdi
000000000100ee45	jmp	0x100ed90
000000000100ee4a	cmpl	$0x2, %r8d
000000000100ee4e	jne	0x100f06d
000000000100ee54	movq	%r13, %rdi
000000000100ee57	andq	$0x3, %r13
000000000100ee5b	shlq	$0x2, %r13
000000000100ee5f	orq	$0x40, %r13
000000000100ee63	movzbl	(%r9), %r8d
000000000100ee67	andl	$-0x4d, %r8d
000000000100ee6b	orl	%r13d, %r8d
000000000100ee6e	movb	%r8b, (%r9)
000000000100ee71	leaq	0x1(%r9), %r8
000000000100ee75	cmpq	$0x2, %rsi
000000000100ee79	ja	0x100ee8b
000000000100ee7b	movl	$0x6, %edx
000000000100ee80	movq	%r8, %r9
000000000100ee83	xorl	%r13d, %r13d
000000000100ee86	jmp	0x100e986
000000000100ee8b	shrq	$0x2, %rdi
000000000100ee8f	movq	0x58(%rsp), %r13
000000000100ee94	addq	$-0x2, %r13
000000000100ee98	movl	$0x2, %r10d
000000000100ee9e	movq	%r8, %r9
000000000100eea1	movq	%r13, %r8
000000000100eea4	jmp	0x100ed05
000000000100eea9	testq	%rdi, %rdi
000000000100eeac	je	0x100f106
000000000100eeb2	movq	%rsi, %rax
000000000100eeb5	movq	%rdx, %rsi
000000000100eeb8	xorl	%edx, %edx
000000000100eeba	divq	%rdi
000000000100eebd	movq	%rdi, %rdx
000000000100eec0	leaq	-0x1(%rax), %rdi
000000000100eec4	imulq	%rdx, %rdi
000000000100eec8	addq	0x8(%r10), %rdi
000000000100eecc	shrq	$0x3, %rdi
000000000100eed0	movq	0xd8(%rsp), %rax
000000000100eed8	movq	%rsi, %rdx
000000000100eedb	movq	%rdi, %rsi
000000000100eede	jmp	0x100e94a
000000000100eee3	movq	%rcx, 0x58(%rsp)
000000000100eee8	movq	%r13, %rcx
000000000100eeeb	movq	%r11, %r13
000000000100eeee	jmp	0x100e939
000000000100eef3	movq	%rbx, %rax
000000000100eef6	movq	%rdx, %r12
000000000100eef9	movq	0x50(%rsp), %r11
000000000100eefe	jmp	0x100e90b
000000000100ef03	addq	$0x7, %rdi
000000000100ef07	shrq	$0x3, %rdi
000000000100ef0b	leaq	-0x1(%rdi), %r14
000000000100ef0f	movq	%rcx, %r15
000000000100ef12	shrq	$0x3, %r15
000000000100ef16	shlq	$0x3, %r14
000000000100ef1a	subq	%r14, %r15
000000000100ef1d	movq	%r11, %r14
000000000100ef20	leaq	-0x1(%rdi,%r11), %rdi
000000000100ef25	movq	%rbx, %rax
000000000100ef28	movq	%rdx, %r12
000000000100ef2b	movq	%r14, %rdx
000000000100ef2e	movq	%rdi, %rbx
000000000100ef31	xorl	%r11d, %r11d
000000000100ef34	movq	%rcx, %rdi
000000000100ef37	xorl	%ecx, %ecx
000000000100ef39	jmp	0x100e912
000000000100ef3e	movq	%rbx, %rax
000000000100ef41	movq	%rcx, %rdi
000000000100ef44	movq	%rdx, %r12
000000000100ef47	movq	%r11, %r14
000000000100ef4a	movq	%r14, %rdx
000000000100ef4d	xorl	%ecx, %ecx
000000000100ef4f	xorl	%ebx, %ebx
000000000100ef51	xorl	%r11d, %r11d
000000000100ef54	xorl	%r15d, %r15d
000000000100ef57	jmp	0x100e912
000000000100ef5c	movq	%r13, 0x78(%rsp)
000000000100ef61	movq	0x8(%r10), %rax
000000000100ef65	movq	(%r10), %rbx
000000000100ef68	movq	%rbx, 0x20(%rsp)
000000000100ef6d	movq	%r9, (%rsp)
000000000100ef71	movl	%r8d, 0x8(%rsp)
000000000100ef76	movl	%edi, 0xc(%rsp)
000000000100ef7a	movq	%rcx, 0x10(%rsp)
000000000100ef7f	movq	%rax, 0x18(%rsp)
000000000100ef84	movq	0xe8(%rsp), %rax
000000000100ef8c	movq	%rax, 0x28(%rsp)
000000000100ef91	movq	%rdx, 0x30(%rsp)
000000000100ef96	leaq	0x4(%r11), %rax
000000000100ef9a	movq	%rax, 0x38(%rsp)
000000000100ef9f	callq	runtime.heapBitsSetTypeGCProg
000000000100efa4	movq	0x78(%rsp), %rax
000000000100efa9	movq	0x98(%rsp), %rcx
000000000100efb1	cmpq	%rcx, %rax
000000000100efb4	movq	0xd8(%rsp), %rax
000000000100efbc	movq	0xe0(%rsp), %rcx
000000000100efc4	jmp	0x100ea17
000000000100efc9	movq	%rbx, %rcx
000000000100efcc	movq	%rsi, %r9
000000000100efcf	movq	0xd8(%rsp), %rbx
000000000100efd7	jmp	0x100e7cf
000000000100efdc	cmpq	$0x8, (%r10)
000000000100efe0	jne	0x100f00a
000000000100efe2	movzbl	(%rsi), %eax
000000000100efe5	movl	%r8d, %ecx
000000000100efe8	movl	$0x13, %edx
000000000100efed	shll	%cl, %edx
000000000100efef	cmpl	$0x20, %ecx
000000000100eff2	sbbl	%ebx, %ebx
000000000100eff4	andl	%ebx, %edx
000000000100eff6	orl	%edx, %eax
000000000100eff8	movb	%al, (%rsi)
000000000100effa	movq	0xc8(%rsp), %rbp
000000000100f002	addq	$0xd0, %rsp
000000000100f009	retq
000000000100f00a	movzbl	(%r11), %eax
000000000100f00e	andl	$0x3, %eax
000000000100f011	orl	$0x10, %eax
000000000100f014	movzbl	(%rsi), %edx
000000000100f017	movl	%r8d, %ecx
000000000100f01a	movl	$0x33, %ebx
000000000100f01f	shll	%cl, %ebx
000000000100f021	cmpl	$0x20, %ecx
000000000100f024	sbbl	%edi, %edi
000000000100f026	andl	%edi, %ebx
000000000100f028	notl	%ebx
000000000100f02a	andl	%edx, %ebx
000000000100f02c	shll	%cl, %eax
000000000100f02e	cmpl	$0x20, %ecx
000000000100f031	sbbl	%edx, %edx
000000000100f033	andl	%edx, %eax
000000000100f035	orl	%ebx, %eax
000000000100f037	movb	%al, (%rsi)
000000000100f039	movq	0xc8(%rsp), %rbp
000000000100f041	addq	$0xd0, %rsp
000000000100f048	retq
000000000100f049	movq	%rdi, %rax
000000000100f04c	movq	%rsi, %r9
000000000100f04f	xorl	%ebx, %ebx
000000000100f051	xorl	%edi, %edi
000000000100f053	xorl	%r8d, %r8d
000000000100f056	xorl	%esi, %esi
000000000100f058	jmp	0x100e793
000000000100f05d	movq	0xc8(%rsp), %rbp
000000000100f065	addq	$0xd0, %rsp
000000000100f06c	retq
000000000100f06d	leaq	0x5e7a2(%rip), %rax
000000000100f074	movq	%rax, (%rsp)
000000000100f078	movq	$0x21, 0x8(%rsp)
000000000100f081	callq	runtime.throw
000000000100f086	ud2
000000000100f088	movq	%r10, (%rsp)
000000000100f08c	callq	"runtime.(*_type).string"
000000000100f091	movq	0x10(%rsp), %rax
000000000100f096	movq	%rax, 0x70(%rsp)
000000000100f09b	movq	0x8(%rsp), %rcx
000000000100f0a0	movq	%rcx, 0xc0(%rsp)
000000000100f0a8	callq	runtime.printlock
000000000100f0ad	leaq	0x5d3f8(%rip), %rax
000000000100f0b4	movq	%rax, (%rsp)
000000000100f0b8	movq	$0x17, 0x8(%rsp)
000000000100f0c1	callq	runtime.printstring
000000000100f0c6	movq	0xc0(%rsp), %rax
000000000100f0ce	movq	%rax, (%rsp)
000000000100f0d2	movq	0x70(%rsp), %rax
000000000100f0d7	movq	%rax, 0x8(%rsp)
000000000100f0dc	callq	runtime.printstring
000000000100f0e1	callq	runtime.printnl
000000000100f0e6	callq	runtime.printunlock
000000000100f0eb	leaq	0x5f3ee(%rip), %rax
000000000100f0f2	movq	%rax, (%rsp)
000000000100f0f6	movq	$0x2d, 0x8(%rsp)
000000000100f0ff	callq	runtime.throw
000000000100f104	ud2
000000000100f106	callq	runtime.panicdivide
000000000100f10b	ud2
000000000100f10d	callq	runtime.panicdivide
000000000100f112	ud2
000000000100f114	callq	runtime.panicindex
000000000100f119	ud2
000000000100f11b	callq	runtime.morestack_noctxt
000000000100f120	jmp	runtime.heapBitsSetType
000000000100f125	int3
000000000100f126	int3
000000000100f127	int3
000000000100f128	int3
000000000100f129	int3
000000000100f12a	int3
000000000100f12b	int3
000000000100f12c	int3
000000000100f12d	int3
000000000100f12e	int3
000000000100f12f	int3
runtime.heapBitsSetTypeGCProg:
000000000100f130	movq	%gs:0x30, %rcx
000000000100f139	cmpq	0x10(%rcx), %rsp
000000000100f13d	jbe	0x100f48e
000000000100f143	subq	$0x60, %rsp
000000000100f147	movq	%rbp, 0x58(%rsp)
000000000100f14c	leaq	0x58(%rsp), %rbp
000000000100f151	movq	0x98(%rsp), %rcx
000000000100f159	testq	$0x1f, %rcx
000000000100f160	jne	0x100f473
000000000100f166	movq	0x88(%rsp), %rdx
000000000100f16e	movq	0x90(%rsp), %rax
000000000100f176	cmpq	%rax, %rdx
000000000100f179	je	0x100f366
000000000100f17f	testq	%rdx, %rdx
000000000100f182	je	0x100f3ec
000000000100f188	movq	%rdx, %rbx
000000000100f18b	xorl	%edx, %edx
000000000100f18d	divq	%rbx
000000000100f190	movq	$0x0, 0x30(%rsp)
000000000100f199	xorps	%xmm0, %xmm0
000000000100f19c	movups	%xmm0, 0x38(%rsp)
000000000100f1a1	movups	%xmm0, 0x48(%rsp)
000000000100f1a6	movq	%rbx, %rdx
000000000100f1a9	shrq	$0x3, %rbx
000000000100f1ad	movq	0x80(%rsp), %rsi
000000000100f1b5	movq	%rsi, %rdi
000000000100f1b8	shrq	$0x3, %rsi
000000000100f1bc	movq	%rbx, %r8
000000000100f1bf	subq	%rsi, %rbx
000000000100f1c2	testq	%rbx, %rbx
000000000100f1c5	jbe	0x100f35f
000000000100f1cb	movb	$0x1, 0x30(%rsp)
000000000100f1d0	cmpq	$0x1, %rbx
000000000100f1d4	jbe	0x100f355
000000000100f1da	movb	$-0x7f, 0x32(%rsp)
000000000100f1df	decq	%rbx
000000000100f1e2	movl	$0x3, %esi
000000000100f1e7	jmp	0x100f1ff
000000000100f1e9	movq	%rbx, %r9
000000000100f1ec	btsq	$0x7, %rbx
000000000100f1f1	movb	%bl, 0x30(%rsp,%rsi)
000000000100f1f5	shrq	$0x7, %r9
000000000100f1f9	incq	%rsi
000000000100f1fc	movq	%r9, %rbx
000000000100f1ff	cmpq	$0x80, %rbx
000000000100f206	jb	0x100f213
000000000100f208	cmpq	$0x28, %rsi
000000000100f20c	jb	0x100f1e9
000000000100f20e	jmp	0x100f3e5
000000000100f213	cmpq	$0x28, %rsi
000000000100f217	jae	0x100f3de
000000000100f21d	movb	%bl, 0x30(%rsp,%rsi)
000000000100f221	leaq	0x1(%rsi), %rbx
000000000100f225	cmpq	$0x28, %rbx
000000000100f229	jae	0x100f3d7
000000000100f22f	movb	$-0x80, 0x30(%rsp,%rbx)
000000000100f234	incq	%rbx
000000000100f237	jmp	0x100f250
000000000100f239	movq	%r8, %rsi
000000000100f23c	btsq	$0x7, %r8
000000000100f241	movb	%r8b, 0x30(%rsp,%rbx)
000000000100f246	shrq	$0x7, %rsi
000000000100f24a	incq	%rbx
000000000100f24d	movq	%rsi, %r8
000000000100f250	cmpq	$0x80, %r8
000000000100f257	jb	0x100f264
000000000100f259	cmpq	$0x28, %rbx
000000000100f25d	jb	0x100f239
000000000100f25f	jmp	0x100f3d0
000000000100f264	cmpq	$0x28, %rbx
000000000100f268	jae	0x100f3c9
000000000100f26e	movb	%r8b, 0x30(%rsp,%rbx)
000000000100f273	incq	%rbx
000000000100f276	decq	%rax
000000000100f279	movq	%rax, %rsi
000000000100f27c	jmp	0x100f294
000000000100f27e	movq	%rax, %r8
000000000100f281	btsq	$0x7, %rax
000000000100f286	movb	%al, 0x30(%rsp,%rbx)
000000000100f28a	shrq	$0x7, %r8
000000000100f28e	incq	%rbx
000000000100f291	movq	%r8, %rax
000000000100f294	cmpq	$0x80, %rax
000000000100f29a	jb	0x100f2a7
000000000100f29c	cmpq	$0x28, %rbx
000000000100f2a0	jb	0x100f27e
000000000100f2a2	jmp	0x100f3c2
000000000100f2a7	cmpq	$0x28, %rbx
000000000100f2ab	jae	0x100f3bb
000000000100f2b1	movb	%al, 0x30(%rsp,%rbx)
000000000100f2b5	leaq	0x1(%rbx), %rax
000000000100f2b9	cmpq	$0x28, %rax
000000000100f2bd	jae	0x100f3b4
000000000100f2c3	movq	%rsi, 0x28(%rsp)
000000000100f2c8	movb	$0x0, 0x31(%rsp,%rbx)
000000000100f2cd	leaq	0x30(%rsp), %rax
000000000100f2d2	movq	%rax, 0x8(%rsp)
000000000100f2d7	movq	0xa0(%rsp), %rax
000000000100f2df	movq	%rax, (%rsp)
000000000100f2e3	movq	0x68(%rsp), %rax
000000000100f2e8	movq	%rax, 0x10(%rsp)
000000000100f2ed	movq	$0x2, 0x18(%rsp)
000000000100f2f6	callq	runtime.runGCProg
000000000100f2fb	movq	0x88(%rsp), %rax
000000000100f303	movq	0x28(%rsp), %rcx
000000000100f308	imulq	%rcx, %rax
000000000100f30c	movq	0x80(%rsp), %rcx
000000000100f314	addq	%rcx, %rax
000000000100f317	shrq	$0x3, %rax
000000000100f31b	addq	$0x3, %rax
000000000100f31f	shrq	$0x2, %rax
000000000100f323	movq	0x68(%rsp), %rcx
000000000100f328	addq	%rcx, %rax
000000000100f32b	movq	%rax, (%rsp)
000000000100f32f	movq	0x98(%rsp), %rdx
000000000100f337	shrq	$0x5, %rdx
000000000100f33b	addq	%rdx, %rcx
000000000100f33e	subq	%rax, %rcx
000000000100f341	movq	%rcx, 0x8(%rsp)
000000000100f346	callq	runtime.memclrNoHeapPointers
000000000100f34b	movq	0x58(%rsp), %rbp
000000000100f350	addq	$0x60, %rsp
000000000100f354	retq
000000000100f355	movl	$0x2, %ebx
000000000100f35a	jmp	0x100f225
000000000100f35f	xorl	%ebx, %ebx
000000000100f361	jmp	0x100f225
000000000100f366	movq	0xa0(%rsp), %rax
000000000100f36e	movq	%rax, (%rsp)
000000000100f372	movq	$0x0, 0x8(%rsp)
000000000100f37b	movq	0x68(%rsp), %rax
000000000100f380	movq	%rax, 0x10(%rsp)
000000000100f385	movq	$0x2, 0x18(%rsp)
000000000100f38e	callq	runtime.runGCProg
000000000100f393	movq	0x20(%rsp), %rax
000000000100f398	movq	%rax, %rcx
000000000100f39b	shlq	$0x3, %rax
000000000100f39f	movq	0x80(%rsp), %rdx
000000000100f3a7	cmpq	%rdx, %rax
000000000100f3aa	jne	0x100f3f3
000000000100f3ac	movq	%rcx, %rax
000000000100f3af	jmp	0x100f31b
000000000100f3b4	callq	runtime.panicindex
000000000100f3b9	ud2
000000000100f3bb	callq	runtime.panicindex
000000000100f3c0	ud2
000000000100f3c2	callq	runtime.panicindex
000000000100f3c7	ud2
000000000100f3c9	callq	runtime.panicindex
000000000100f3ce	ud2
000000000100f3d0	callq	runtime.panicindex
000000000100f3d5	ud2
000000000100f3d7	callq	runtime.panicindex
000000000100f3dc	ud2
000000000100f3de	callq	runtime.panicindex
000000000100f3e3	ud2
000000000100f3e5	callq	runtime.panicindex
000000000100f3ea	ud2
000000000100f3ec	callq	runtime.panicdivide
000000000100f3f1	ud2
000000000100f3f3	movq	%rcx, 0x28(%rsp)
000000000100f3f8	callq	runtime.printlock
000000000100f3fd	leaq	0x5efaa(%rip), %rax
000000000100f404	movq	%rax, (%rsp)
000000000100f408	movq	$0x2b, 0x8(%rsp)
000000000100f411	callq	runtime.printstring
000000000100f416	movq	0x28(%rsp), %rax
000000000100f41b	movq	%rax, (%rsp)
000000000100f41f	callq	runtime.printuint
000000000100f424	leaq	0x5c0cf(%rip), %rax
000000000100f42b	movq	%rax, (%rsp)
000000000100f42f	movq	$0xe, 0x8(%rsp)
000000000100f438	callq	runtime.printstring
000000000100f43d	movq	0x80(%rsp), %rax
000000000100f445	movq	%rax, (%rsp)
000000000100f449	callq	runtime.printuint
000000000100f44e	callq	runtime.printnl
000000000100f453	callq	runtime.printunlock
000000000100f458	leaq	0x5eef9(%rip), %rax
000000000100f45f	movq	%rax, (%rsp)
000000000100f463	movq	$0x2b, 0x8(%rsp)
000000000100f46c	callq	runtime.throw
000000000100f471	ud2
000000000100f473	leaq	0x5eac1(%rip), %rax
000000000100f47a	movq	%rax, (%rsp)
000000000100f47e	movq	$0x27, 0x8(%rsp)
000000000100f487	callq	runtime.throw
000000000100f48c	ud2
000000000100f48e	callq	runtime.morestack_noctxt
000000000100f493	jmp	runtime.heapBitsSetTypeGCProg
000000000100f498	int3
000000000100f499	int3
000000000100f49a	int3
000000000100f49b	int3
000000000100f49c	int3
000000000100f49d	int3
000000000100f49e	int3
000000000100f49f	int3
runtime.progToPointerMask:
000000000100f4a0	movq	%gs:0x30, %rcx
000000000100f4a9	cmpq	0x10(%rcx), %rsp
000000000100f4ad	jbe	0x100f5b3
000000000100f4b3	subq	$0x48, %rsp
000000000100f4b7	movq	%rbp, 0x40(%rsp)
000000000100f4bc	leaq	0x40(%rsp), %rbp
000000000100f4c1	movq	0x58(%rsp), %rax
000000000100f4c6	shrq	$0x3, %rax
000000000100f4ca	addq	$0x7, %rax
000000000100f4ce	shrq	$0x3, %rax
000000000100f4d2	movq	%rax, 0x30(%rsp)
000000000100f4d7	leaq	0x1(%rax), %rcx
000000000100f4db	movq	%rcx, 0x28(%rsp)
000000000100f4e0	movq	%rcx, (%rsp)
000000000100f4e4	movq	$0x1, 0x8(%rsp)
000000000100f4ed	leaq	0xc641c(%rip), %rdx
000000000100f4f4	movq	%rdx, 0x10(%rsp)
000000000100f4f9	callq	runtime.persistentalloc
000000000100f4fe	movq	0x18(%rsp), %rax
000000000100f503	testb	%al, (%rax)
000000000100f505	movq	0x28(%rsp), %rcx
000000000100f50a	cmpq	$0x40000000, %rcx
000000000100f511	ja	0x100f5ac
000000000100f517	movq	0x30(%rsp), %rdx
000000000100f51c	cmpq	%rcx, %rdx
000000000100f51f	jae	0x100f5a5
000000000100f525	movb	$-0x5f, (%rdx,%rax)
000000000100f529	testq	%rcx, %rcx
000000000100f52c	jbe	0x100f59e
000000000100f52e	movq	%rax, 0x38(%rsp)
000000000100f533	movq	%rax, 0x10(%rsp)
000000000100f538	movq	0x50(%rsp), %rcx
000000000100f53d	movq	%rcx, (%rsp)
000000000100f541	movq	$0x0, 0x8(%rsp)
000000000100f54a	movq	$0x1, 0x18(%rsp)
000000000100f553	callq	runtime.runGCProg
000000000100f558	movq	0x20(%rsp), %rax
000000000100f55d	movq	0x38(%rsp), %rcx
000000000100f562	movq	0x30(%rsp), %rdx
000000000100f567	movzbl	(%rdx,%rcx), %edx
000000000100f56b	cmpb	$-0x5f, %dl
000000000100f56e	jne	0x100f583
000000000100f570	movl	%eax, 0x60(%rsp)
000000000100f574	movq	%rcx, 0x68(%rsp)
000000000100f579	movq	0x40(%rsp), %rbp
000000000100f57e	addq	$0x48, %rsp
000000000100f582	retq
000000000100f583	leaq	0x5d5b2(%rip), %rax
000000000100f58a	movq	%rax, (%rsp)
000000000100f58e	movq	$0x1b, 0x8(%rsp)
000000000100f597	callq	runtime.throw
000000000100f59c	ud2
000000000100f59e	callq	runtime.panicindex
000000000100f5a3	ud2
000000000100f5a5	callq	runtime.panicindex
000000000100f5aa	ud2
000000000100f5ac	callq	runtime.panicslice
000000000100f5b1	ud2
000000000100f5b3	callq	runtime.morestack_noctxt
000000000100f5b8	jmp	runtime.progToPointerMask
000000000100f5bd	int3
000000000100f5be	int3
000000000100f5bf	int3
runtime.runGCProg:
000000000100f5c0	subq	$0x8, %rsp
000000000100f5c4	movq	%rbp, (%rsp)
000000000100f5c8	leaq	(%rsp), %rbp
000000000100f5cc	xorl	%eax, %eax
000000000100f5ce	movq	0x10(%rsp), %rcx
000000000100f5d3	movq	0x18(%rsp), %rdx
000000000100f5d8	movq	0x20(%rsp), %rbx
000000000100f5dd	xorl	%esi, %esi
000000000100f5df	jmp	0x100f66f
000000000100f5e4	addq	$-0x8, %rax
000000000100f5e8	cmpq	$0x8, %rax
000000000100f5ec	jb	0x100f638
000000000100f5ee	cmpq	$0x1, %rdi
000000000100f5f2	jne	0x100f600
000000000100f5f4	movb	%sil, (%rbx)
000000000100f5f7	shrq	$0x8, %rsi
000000000100f5fb	incq	%rbx
000000000100f5fe	jmp	0x100f5e4
000000000100f600	movq	%rsi, %r8
000000000100f603	andq	$0xf, %rsi
000000000100f607	orq	$0xf0, %rsi
000000000100f60e	movb	%sil, (%rbx)
000000000100f611	leaq	0x1(%rbx), %r9
000000000100f615	testb	%al, (%r9)
000000000100f618	movq	%r8, %rsi
000000000100f61b	shrq	$0x4, %r8
000000000100f61f	andq	$0xf, %r8
000000000100f623	orq	$0xf0, %r8
000000000100f62a	movb	%r8b, 0x1(%rbx)
000000000100f62e	shrq	$0x8, %rsi
000000000100f632	addq	$0x2, %rbx
000000000100f636	jmp	0x100f5e4
000000000100f638	movzbl	(%rcx), %r8d
000000000100f63c	movq	%r8, %r9
000000000100f63f	andq	$0x7f, %r8
000000000100f643	leaq	0x1(%rcx), %r10
000000000100f647	btl	$0x7, %r9d
000000000100f64c	jb	0x100f7ad
000000000100f652	testq	$0x7f, %r9
000000000100f659	jne	0x100f702
000000000100f65f	testq	%rdx, %rdx
000000000100f662	je	0x100f679
000000000100f664	xorl	%ecx, %ecx
000000000100f666	movq	%rcx, %r8
000000000100f669	movq	%rdx, %rcx
000000000100f66c	movq	%r8, %rdx
000000000100f66f	movq	0x28(%rsp), %rdi
000000000100f674	jmp	0x100f5e8
000000000100f679	cmpq	$0x1, %rdi
000000000100f67d	jne	0x100f6be
000000000100f67f	movq	%rbx, %rcx
000000000100f682	movq	0x20(%rsp), %rdx
000000000100f687	subq	%rdx, %rbx
000000000100f68a	leaq	(%rax,%rbx,8), %rdx
000000000100f68e	movq	%rax, %rbx
000000000100f691	negq	%rax
000000000100f694	andq	$0x7, %rax
000000000100f698	addq	%rbx, %rax
000000000100f69b	jmp	0x100f6ab
000000000100f69d	movb	%sil, (%rcx)
000000000100f6a0	addq	$-0x8, %rax
000000000100f6a4	shrq	$0x8, %rsi
000000000100f6a8	incq	%rcx
000000000100f6ab	testq	%rax, %rax
000000000100f6ae	ja	0x100f69d
000000000100f6b0	movq	%rdx, 0x30(%rsp)
000000000100f6b5	movq	(%rsp), %rbp
000000000100f6b9	addq	$0x8, %rsp
000000000100f6bd	retq
000000000100f6be	movq	%rbx, %rcx
000000000100f6c1	movq	0x20(%rsp), %rdx
000000000100f6c6	subq	%rdx, %rbx
000000000100f6c9	leaq	(%rax,%rbx,4), %rdx
000000000100f6cd	movq	%rax, %rbx
000000000100f6d0	negq	%rax
000000000100f6d3	andq	$0x3, %rax
000000000100f6d7	addq	%rbx, %rax
000000000100f6da	jmp	0x100f6fb
000000000100f6dc	movq	%rsi, %rbx
000000000100f6df	andq	$0xf, %rsi
000000000100f6e3	orq	$0xf0, %rsi
000000000100f6ea	movb	%sil, (%rcx)
000000000100f6ed	addq	$-0x4, %rax
000000000100f6f1	shrq	$0x4, %rbx
000000000100f6f5	incq	%rcx
000000000100f6f8	movq	%rbx, %rsi
000000000100f6fb	testq	%rax, %rax
000000000100f6fe	ja	0x100f6dc
000000000100f700	jmp	0x100f6b0
000000000100f702	shrq	$0x3, %r8
000000000100f706	xorl	%ecx, %ecx
000000000100f708	jmp	0x100f715
000000000100f70a	leaq	0x1(%r12), %r11
000000000100f70f	incq	%r10
000000000100f712	movq	%r11, %rcx
000000000100f715	cmpq	%r8, %rcx
000000000100f718	jae	0x100f775
000000000100f71a	movzbl	(%r10), %r11d
000000000100f71e	movq	%rcx, %r12
000000000100f721	movq	%rax, %rcx
000000000100f724	shlq	%cl, %r11
000000000100f727	orq	%r11, %rsi
000000000100f72a	cmpq	$0x1, %rdi
000000000100f72e	jne	0x100f73c
000000000100f730	movb	%sil, (%rbx)
000000000100f733	shrq	$0x8, %rsi
000000000100f737	incq	%rbx
000000000100f73a	jmp	0x100f70a
000000000100f73c	movq	%rsi, %r11
000000000100f73f	andq	$0xf, %rsi
000000000100f743	orq	$0xf0, %rsi
000000000100f74a	movb	%sil, (%rbx)
000000000100f74d	leaq	0x1(%rbx), %r13
000000000100f751	testb	%al, (%r13)
000000000100f755	movq	%r11, %rsi
000000000100f758	shrq	$0x4, %r11
000000000100f75c	andq	$0xf, %r11
000000000100f760	orq	$0xf0, %r11
000000000100f767	movb	%r11b, 0x1(%rbx)
000000000100f76b	shrq	$0x8, %rsi
000000000100f76f	addq	$0x2, %rbx
000000000100f773	jmp	0x100f70a
000000000100f775	testq	$0x7, %r9
000000000100f77c	jbe	0x100f7a5
000000000100f77e	andq	$0x7, %r9
000000000100f782	movzbl	(%r10), %r8d
000000000100f786	movq	%rax, %rcx
000000000100f789	shlq	%cl, %r8
000000000100f78c	orq	%r8, %rsi
000000000100f78f	leaq	(%r9,%rax), %r8
000000000100f793	leaq	0x1(%r10), %r9
000000000100f797	movq	%r8, %rax
000000000100f79a	movq	%rdx, %rcx
000000000100f79d	movq	%r9, %rdx
000000000100f7a0	jmp	0x100f666
000000000100f7a5	movq	%rax, %r8
000000000100f7a8	movq	%r10, %r9
000000000100f7ab	jmp	0x100f797
000000000100f7ad	testq	$0x7f, %r9
000000000100f7b4	jne	0x100fbf4
000000000100f7ba	xorl	%ecx, %ecx
000000000100f7bc	jmp	0x100f7c5
000000000100f7be	addq	$0x7, %rcx
000000000100f7c2	movq	%r9, %r10
000000000100f7c5	movzbl	(%r10), %r9d
000000000100f7c9	movq	%r9, %r11
000000000100f7cc	andq	$0x7f, %r9
000000000100f7d0	shlq	%cl, %r9
000000000100f7d3	cmpq	$0x40, %rcx
000000000100f7d7	sbbq	%r12, %r12
000000000100f7da	andq	%r12, %r9
000000000100f7dd	orq	%r9, %r8
000000000100f7e0	leaq	0x1(%r10), %r9
000000000100f7e4	btl	$0x7, %r11d
000000000100f7e9	jb	0x100f7be
000000000100f7eb	xorl	%ecx, %ecx
000000000100f7ed	xorl	%r10d, %r10d
000000000100f7f0	jmp	0x100f7f9
000000000100f7f2	leaq	0x7(%rcx), %r10
000000000100f7f6	movq	%r13, %rcx
000000000100f7f9	movzbl	(%r9), %r11d
000000000100f7fd	movq	%r11, %r12
000000000100f800	andq	$0x7f, %r11
000000000100f804	movq	%rcx, %r13
000000000100f807	movq	%r10, %rcx
000000000100f80a	shlq	%cl, %r11
000000000100f80d	cmpq	$0x40, %rcx
000000000100f811	sbbq	%r14, %r14
000000000100f814	andq	%r11, %r14
000000000100f817	orq	%r14, %r13
000000000100f81a	incq	%r9
000000000100f81d	btl	$0x7, %r12d
000000000100f822	jb	0x100f7f2
000000000100f824	imulq	%r8, %r13
000000000100f828	cmpq	$0x39, %r8
000000000100f82c	ja	0x100fa1a
000000000100f832	cmpq	$0x1, %rdi
000000000100f836	jne	0x100f9ee
000000000100f83c	leaq	-0x1(%rbx), %r10
000000000100f840	movq	%rax, %rcx
000000000100f843	movq	%rsi, %r11
000000000100f846	jmp	0x100f85a
000000000100f848	shlq	$0x8, %rsi
000000000100f84c	movzbl	(%r10), %r12d
000000000100f850	orq	%r12, %rsi
000000000100f853	addq	$0x8, %rax
000000000100f857	decq	%r10
000000000100f85a	cmpq	%r8, %rax
000000000100f85d	jb	0x100f848
000000000100f85f	movq	%rax, %r10
000000000100f862	subq	%r8, %rax
000000000100f865	movq	%rcx, %r12
000000000100f868	movq	%rax, %rcx
000000000100f86b	movq	%rsi, %r14
000000000100f86e	shrq	%cl, %rsi
000000000100f871	cmpq	$0x40, %rax
000000000100f875	sbbq	%r15, %r15
000000000100f878	andq	%r15, %rsi
000000000100f87b	cmpq	%r8, %r10
000000000100f87e	cmovaq	%r8, %r10
000000000100f882	cmovaq	%rsi, %r14
000000000100f886	cmpq	$0x1, %r10
000000000100f88a	jne	0x100f974
000000000100f890	cmpq	$0x1, %r14
000000000100f894	jne	0x100f969
000000000100f89a	movl	$0x39, %eax
000000000100f89f	movabsq	$0x1ffffffffffffff, %rcx
000000000100f8a9	jmp	0x100f8c8
000000000100f8ab	movb	%r11b, (%rbx)
000000000100f8ae	shrq	$0x8, %r11
000000000100f8b2	addq	$-0x8, %rsi
000000000100f8b6	incq	%rbx
000000000100f8b9	cmpq	$0x8, %rsi
000000000100f8bd	jae	0x100f8ab
000000000100f8bf	subq	%rax, %r13
000000000100f8c2	movq	%r8, %rcx
000000000100f8c5	movq	%rsi, %r12
000000000100f8c8	cmpq	%rax, %r13
000000000100f8cb	jb	0x100f919
000000000100f8cd	movq	%rcx, %rsi
000000000100f8d0	movq	%r12, %rcx
000000000100f8d3	movq	%rsi, %r8
000000000100f8d6	shlq	%cl, %rsi
000000000100f8d9	cmpq	$0x40, %rcx
000000000100f8dd	sbbq	%r10, %r10
000000000100f8e0	andq	%r10, %rsi
000000000100f8e3	orq	%rsi, %r11
000000000100f8e6	leaq	(%rax,%rcx), %rsi
000000000100f8ea	cmpq	$0x1, %rdi
000000000100f8ee	je	0x100f8b9
000000000100f8f0	jmp	0x100f911
000000000100f8f2	movq	%r11, %r10
000000000100f8f5	andq	$0xf, %r11
000000000100f8f9	orq	$0xf0, %r11
000000000100f900	movb	%r11b, (%rbx)
000000000100f903	shrq	$0x4, %r10
000000000100f907	addq	$-0x4, %rsi
000000000100f90b	incq	%rbx
000000000100f90e	movq	%r10, %r11
000000000100f911	cmpq	$0x4, %rsi
000000000100f915	jae	0x100f8f2
000000000100f917	jmp	0x100f8bf
000000000100f919	testq	%r13, %r13
000000000100f91c	jbe	0x100f964
000000000100f91e	movq	%rcx, %rax
000000000100f921	movq	%r13, %rcx
000000000100f924	movl	$0x1, %esi
000000000100f929	shlq	%cl, %rsi
000000000100f92c	cmpq	$0x40, %rcx
000000000100f930	sbbq	%r8, %r8
000000000100f933	andq	%r8, %rsi
000000000100f936	decq	%rsi
000000000100f939	andq	%rsi, %rax
000000000100f93c	movq	%r12, %rcx
000000000100f93f	shlq	%cl, %rax
000000000100f942	cmpq	$0x40, %rcx
000000000100f946	sbbq	%rsi, %rsi
000000000100f949	andq	%rsi, %rax
000000000100f94c	orq	%rax, %r11
000000000100f94f	leaq	(%rcx,%r13), %rsi
000000000100f953	movq	%rsi, %rax
000000000100f956	movq	%rdx, %rcx
000000000100f959	movq	%r11, %rsi
000000000100f95c	movq	%r9, %rdx
000000000100f95f	jmp	0x100f666
000000000100f964	movq	%r12, %rsi
000000000100f967	jmp	0x100f953
000000000100f969	movq	%r13, %rax
000000000100f96c	movq	%r14, %rcx
000000000100f96f	jmp	0x100f8c8
000000000100f974	leaq	(%r10,%r10), %rsi
000000000100f978	cmpq	$0x39, %rsi
000000000100f97c	ja	0x100f9e6
000000000100f97e	movq	%r10, %rax
000000000100f981	jmp	0x100f99d
000000000100f983	movq	%r10, %rcx
000000000100f986	movq	%r14, %rsi
000000000100f989	shlq	%cl, %r14
000000000100f98c	cmpq	$0x40, %rcx
000000000100f990	sbbq	%r8, %r8
000000000100f993	andq	%r8, %r14
000000000100f996	orq	%rsi, %r14
000000000100f999	leaq	(%rcx,%rcx), %r10
000000000100f99d	cmpq	$0x40, %r10
000000000100f9a1	jbe	0x100f983
000000000100f9a3	testq	%rax, %rax
000000000100f9a6	je	0x100fbfc
000000000100f9ac	movq	%rax, %rcx
000000000100f9af	movl	$0x39, %eax
000000000100f9b4	movq	%rdx, %rsi
000000000100f9b7	xorl	%edx, %edx
000000000100f9b9	divq	%rcx
000000000100f9bc	imulq	%rax, %rcx
000000000100f9c0	movl	$0x1, %edx
000000000100f9c5	shlq	%cl, %rdx
000000000100f9c8	cmpq	$0x40, %rcx
000000000100f9cc	sbbq	%r8, %r8
000000000100f9cf	andq	%r8, %rdx
000000000100f9d2	decq	%rdx
000000000100f9d5	andq	%rdx, %r14
000000000100f9d8	movq	%rsi, %rdx
000000000100f9db	movq	%rcx, %rax
000000000100f9de	movq	%r14, %rcx
000000000100f9e1	jmp	0x100f8c8
000000000100f9e6	movq	%rdx, %rsi
000000000100f9e9	movq	%r10, %rcx
000000000100f9ec	jmp	0x100f9d8
000000000100f9ee	leaq	-0x1(%rbx), %r10
000000000100f9f2	movq	%rax, %rcx
000000000100f9f5	movq	%rsi, %r11
000000000100f9f8	jmp	0x100fa10
000000000100f9fa	shlq	$0x4, %rsi
000000000100f9fe	movzbl	(%r10), %r12d
000000000100fa02	andq	$0xf, %r12
000000000100fa06	orq	%r12, %rsi
000000000100fa09	addq	$0x4, %rax
000000000100fa0d	decq	%r10
000000000100fa10	cmpq	%r8, %rax
000000000100fa13	jb	0x100f9fa
000000000100fa15	jmp	0x100f85f
000000000100fa1a	subq	%rax, %r8
000000000100fa1d	cmpq	$0x1, %rdi
000000000100fa21	jne	0x100fb05
000000000100fa27	leaq	0x7(%r8), %r10
000000000100fa2b	shrq	$0x3, %r10
000000000100fa2f	movq	%rbx, %r11
000000000100fa32	subq	%r10, %rbx
000000000100fa35	movq	%rbx, %r10
000000000100fa38	testq	$0x7, %r8
000000000100fa3f	je	0x100fafa
000000000100fa45	andq	$0x7, %r8
000000000100fa49	movzbl	(%rbx), %ebx
000000000100fa4c	leaq	-0x8(%r8), %rcx
000000000100fa50	negq	%rcx
000000000100fa53	shrq	%cl, %rbx
000000000100fa56	cmpq	$0x40, %rcx
000000000100fa5a	sbbq	%r12, %r12
000000000100fa5d	andq	%r12, %rbx
000000000100fa60	movq	%rax, %rcx
000000000100fa63	shlq	%cl, %rbx
000000000100fa66	orq	%rbx, %rsi
000000000100fa69	leaq	(%r8,%rax), %rbx
000000000100fa6d	subq	%r8, %r13
000000000100fa70	leaq	0x1(%r10), %r8
000000000100fa74	movq	%r13, %rcx
000000000100fa77	shrq	$0x3, %r13
000000000100fa7b	jmp	0x100faaa
000000000100fa7d	movzbl	(%r8), %r10d
000000000100fa81	movq	%rcx, %rax
000000000100fa84	movq	%rbx, %rcx
000000000100fa87	shlq	%cl, %r10
000000000100fa8a	cmpq	$0x40, %rcx
000000000100fa8e	sbbq	%r12, %r12
000000000100fa91	andq	%r12, %r10
000000000100fa94	orq	%r10, %rsi
000000000100fa97	movb	%sil, (%r11)
000000000100fa9a	decq	%r13
000000000100fa9d	shrq	$0x8, %rsi
000000000100faa1	incq	%r8
000000000100faa4	incq	%r11
000000000100faa7	movq	%rax, %rcx
000000000100faaa	testq	%r13, %r13
000000000100faad	ja	0x100fa7d
000000000100faaf	testq	$0x7, %rcx
000000000100fab6	jbe	0x100fae9
000000000100fab8	andq	$0x7, %rcx
000000000100fabc	movzbl	(%r8), %r8d
000000000100fac0	movl	$0x1, %r10d
000000000100fac6	shlq	%cl, %r10
000000000100fac9	decq	%r10
000000000100facc	andq	%r8, %r10
000000000100facf	movq	%rcx, %rax
000000000100fad2	movq	%rbx, %rcx
000000000100fad5	shlq	%cl, %r10
000000000100fad8	cmpq	$0x40, %rcx
000000000100fadc	sbbq	%r8, %r8
000000000100fadf	andq	%r8, %r10
000000000100fae2	orq	%r10, %rsi
000000000100fae5	leaq	(%rax,%rcx), %rbx
000000000100fae9	movq	%rbx, %rax
000000000100faec	movq	%rdx, %rcx
000000000100faef	movq	%r11, %rbx
000000000100faf2	movq	%r9, %rdx
000000000100faf5	jmp	0x100f666
000000000100fafa	movq	%rbx, %r8
000000000100fafd	movq	%rax, %rbx
000000000100fb00	jmp	0x100fa74
000000000100fb05	leaq	0x3(%r8), %r10
000000000100fb09	shrq	$0x2, %r10
000000000100fb0d	movq	%rbx, %r11
000000000100fb10	subq	%r10, %rbx
000000000100fb13	movq	%rbx, %r10
000000000100fb16	testq	$0x3, %r8
000000000100fb1d	je	0x100fbe9
000000000100fb23	andq	$0x3, %r8
000000000100fb27	movzbl	(%rbx), %ebx
000000000100fb2a	andq	$0xf, %rbx
000000000100fb2e	leaq	-0x4(%r8), %rcx
000000000100fb32	negq	%rcx
000000000100fb35	shrq	%cl, %rbx
000000000100fb38	cmpq	$0x40, %rcx
000000000100fb3c	sbbq	%r12, %r12
000000000100fb3f	andq	%r12, %rbx
000000000100fb42	movq	%rax, %rcx
000000000100fb45	shlq	%cl, %rbx
000000000100fb48	orq	%rbx, %rsi
000000000100fb4b	leaq	(%r8,%rax), %rbx
000000000100fb4f	subq	%r8, %r13
000000000100fb52	leaq	0x1(%r10), %r8
000000000100fb56	movq	%r13, %rcx
000000000100fb59	shrq	$0x2, %r13
000000000100fb5d	jmp	0x100fba1
000000000100fb5f	movzbl	(%r8), %r10d
000000000100fb63	andq	$0xf, %r10
000000000100fb67	movq	%rcx, %rax
000000000100fb6a	movq	%rbx, %rcx
000000000100fb6d	shlq	%cl, %r10
000000000100fb70	cmpq	$0x40, %rcx
000000000100fb74	sbbq	%r12, %r12
000000000100fb77	andq	%r12, %r10
000000000100fb7a	orq	%r10, %rsi
000000000100fb7d	movq	%rsi, %r10
000000000100fb80	andq	$0xf, %rsi
000000000100fb84	orq	$0xf0, %rsi
000000000100fb8b	movb	%sil, (%r11)
000000000100fb8e	decq	%r13
000000000100fb91	shrq	$0x4, %r10
000000000100fb95	incq	%r8
000000000100fb98	incq	%r11
000000000100fb9b	movq	%rax, %rcx
000000000100fb9e	movq	%r10, %rsi
000000000100fba1	testq	%r13, %r13
000000000100fba4	ja	0x100fb5f
000000000100fba6	testq	$0x3, %rcx
000000000100fbad	jbe	0x100fae9
000000000100fbb3	andq	$0x3, %rcx
000000000100fbb7	movzbl	(%r8), %r8d
000000000100fbbb	movl	$0x1, %r10d
000000000100fbc1	shlq	%cl, %r10
000000000100fbc4	decq	%r10
000000000100fbc7	andq	%r8, %r10
000000000100fbca	movq	%rcx, %rax
000000000100fbcd	movq	%rbx, %rcx
000000000100fbd0	shlq	%cl, %r10
000000000100fbd3	cmpq	$0x40, %rcx
000000000100fbd7	sbbq	%r8, %r8
000000000100fbda	andq	%r8, %r10
000000000100fbdd	orq	%r10, %rsi
000000000100fbe0	leaq	(%rax,%rcx), %rbx
000000000100fbe4	jmp	0x100fae9
000000000100fbe9	movq	%rbx, %r8
000000000100fbec	movq	%rax, %rbx
000000000100fbef	jmp	0x100fb56
000000000100fbf4	movq	%r10, %r9
000000000100fbf7	jmp	0x100f7eb
000000000100fbfc	callq	runtime.panicdivide
000000000100fc01	ud2
000000000100fc03	int3
000000000100fc04	int3
000000000100fc05	int3
000000000100fc06	int3
000000000100fc07	int3
000000000100fc08	int3
000000000100fc09	int3
000000000100fc0a	int3
000000000100fc0b	int3
000000000100fc0c	int3
000000000100fc0d	int3
000000000100fc0e	int3
000000000100fc0f	int3
runtime.allocmcache:
000000000100fc10	movq	%gs:0x30, %rcx
000000000100fc19	cmpq	0x10(%rcx), %rsp
000000000100fc1d	jbe	0x100fcac
000000000100fc23	subq	$0x20, %rsp
000000000100fc27	movq	%rbp, 0x18(%rsp)
000000000100fc2c	leaq	0x18(%rsp), %rbp
000000000100fc31	leaq	runtime.mheap_(%rip), %rax
000000000100fc38	movq	%rax, (%rsp)
000000000100fc3c	callq	runtime.lock
000000000100fc41	leaq	0xb0d58(%rip), %rax
000000000100fc48	movq	%rax, (%rsp)
000000000100fc4c	callq	"runtime.(*fixalloc).alloc"
000000000100fc51	movq	0x8(%rsp), %rax
000000000100fc56	movq	%rax, 0x10(%rsp)
000000000100fc5b	leaq	runtime.mheap_(%rip), %rcx
000000000100fc62	movq	%rcx, (%rsp)
000000000100fc66	callq	runtime.unlock
000000000100fc6b	movq	0x10(%rsp), %rax
000000000100fc70	xorl	%ecx, %ecx
000000000100fc72	jmp	0x100fc85
000000000100fc74	testb	%al, (%rax)
000000000100fc76	leaq	runtime.emptymspan(%rip), %rdx
000000000100fc7d	movq	%rdx, 0x28(%rax,%rcx,8)
000000000100fc82	incq	%rcx
000000000100fc85	cmpq	$0x86, %rcx
000000000100fc8c	jl	0x100fc74
000000000100fc8e	callq	runtime.nextSample
000000000100fc93	movl	(%rsp), %eax
000000000100fc96	movq	0x10(%rsp), %rcx
000000000100fc9b	movl	%eax, (%rcx)
000000000100fc9d	movq	%rcx, 0x28(%rsp)
000000000100fca2	movq	0x18(%rsp), %rbp
000000000100fca7	addq	$0x20, %rsp
000000000100fcab	retq
000000000100fcac	callq	runtime.morestack_noctxt
000000000100fcb1	jmp	runtime.allocmcache
000000000100fcb6	int3
000000000100fcb7	int3
000000000100fcb8	int3
000000000100fcb9	int3
000000000100fcba	int3
000000000100fcbb	int3
000000000100fcbc	int3
000000000100fcbd	int3
000000000100fcbe	int3
000000000100fcbf	int3
runtime.freemcache:
000000000100fcc0	movq	%gs:0x30, %rcx
000000000100fcc9	cmpq	0x10(%rcx), %rsp
000000000100fccd	jbe	0x100fd13
000000000100fccf	subq	$0x20, %rsp
000000000100fcd3	movq	%rbp, 0x18(%rsp)
000000000100fcd8	leaq	0x18(%rsp), %rbp
000000000100fcdd	xorps	%xmm0, %xmm0
000000000100fce0	movups	%xmm0, 0x8(%rsp)
000000000100fce5	leaq	runtime.freemcache.func1(%rip), %rax
000000000100fcec	movq	%rax, 0x8(%rsp)
000000000100fcf1	movq	0x28(%rsp), %rax
000000000100fcf6	movq	%rax, 0x10(%rsp)
000000000100fcfb	leaq	0x8(%rsp), %rax
000000000100fd00	movq	%rax, (%rsp)
000000000100fd04	callq	runtime.systemstack
000000000100fd09	movq	0x18(%rsp), %rbp
000000000100fd0e	addq	$0x20, %rsp
000000000100fd12	retq
000000000100fd13	callq	runtime.morestack_noctxt
000000000100fd18	jmp	runtime.freemcache
000000000100fd1a	int3
000000000100fd1b	int3
000000000100fd1c	int3
000000000100fd1d	int3
000000000100fd1e	int3
000000000100fd1f	int3
runtime.(*mcache).refill:
000000000100fd20	movq	%gs:0x30, %rcx
000000000100fd29	cmpq	0x10(%rcx), %rsp
000000000100fd2d	jbe	0x100fe4a
000000000100fd33	subq	$0x28, %rsp
000000000100fd37	movq	%rbp, 0x20(%rsp)
000000000100fd3c	leaq	0x20(%rsp), %rbp
000000000100fd41	movq	%gs:0x30, %rax
000000000100fd4a	movq	0x30(%rax), %rcx
000000000100fd4e	incl	0x100(%rcx)
000000000100fd54	movq	0x30(%rsp), %rcx
000000000100fd59	testb	%al, (%rcx)
000000000100fd5b	movzbl	0x38(%rsp), %edx
000000000100fd60	movzbl	%dl, %edx
000000000100fd63	cmpq	$0x86, %rdx
000000000100fd6a	jae	0x100fe43
000000000100fd70	movq	0x28(%rcx,%rdx,8), %rbx
000000000100fd75	movzwl	0x60(%rbx), %esi
000000000100fd79	cmpq	%rsi, 0x38(%rbx)
000000000100fd7d	jne	0x100fe28
000000000100fd83	movq	%rax, 0x18(%rsp)
000000000100fd88	leaq	runtime.emptymspan(%rip), %rsi
000000000100fd8f	cmpq	%rsi, %rbx
000000000100fd92	je	0x100fd98
000000000100fd94	movb	$0x0, 0x63(%rbx)
000000000100fd98	movq	%rdx, 0x10(%rsp)
000000000100fd9d	shlq	$0x6, %rdx
000000000100fda1	leaq	0xaea30(%rip), %rcx
000000000100fda8	leaq	(%rcx,%rdx), %rcx
000000000100fdac	movq	%rcx, (%rsp)
000000000100fdb0	callq	"runtime.(*mcentral).cacheSpan"
000000000100fdb5	movq	0x8(%rsp), %rax
000000000100fdba	testq	%rax, %rax
000000000100fdbd	je	0x100fe0d
000000000100fdbf	movzwl	0x60(%rax), %ecx
000000000100fdc3	cmpq	%rcx, 0x38(%rax)
000000000100fdc7	je	0x100fdf2
000000000100fdc9	movq	0x10(%rsp), %rcx
000000000100fdce	movq	0x30(%rsp), %rdx
000000000100fdd3	movq	%rax, 0x28(%rdx,%rcx,8)
000000000100fdd8	movq	0x18(%rsp), %rax
000000000100fddd	movq	0x30(%rax), %rax
000000000100fde1	addl	$-0x1, 0x100(%rax)
000000000100fde8	movq	0x20(%rsp), %rbp
000000000100fded	addq	$0x28, %rsp
000000000100fdf1	retq
000000000100fdf2	leaq	0x5c490(%rip), %rax
000000000100fdf9	movq	%rax, (%rsp)
000000000100fdfd	movq	$0x16, 0x8(%rsp)
000000000100fe06	callq	runtime.throw
000000000100fe0b	ud2
000000000100fe0d	leaq	0x5b68b(%rip), %rax
000000000100fe14	movq	%rax, (%rsp)
000000000100fe18	movq	$0xd, 0x8(%rsp)
000000000100fe21	callq	runtime.throw
000000000100fe26	ud2
000000000100fe28	leaq	0x5e295(%rip), %rax
000000000100fe2f	movq	%rax, (%rsp)
000000000100fe33	movq	$0x28, 0x8(%rsp)
000000000100fe3c	callq	runtime.throw
000000000100fe41	ud2
000000000100fe43	callq	runtime.panicindex
000000000100fe48	ud2
000000000100fe4a	callq	runtime.morestack_noctxt
000000000100fe4f	jmp	"runtime.(*mcache).refill"
000000000100fe54	int3
000000000100fe55	int3
000000000100fe56	int3
000000000100fe57	int3
000000000100fe58	int3
000000000100fe59	int3
000000000100fe5a	int3
000000000100fe5b	int3
000000000100fe5c	int3
000000000100fe5d	int3
000000000100fe5e	int3
000000000100fe5f	int3
runtime.(*mcache).releaseAll:
000000000100fe60	movq	%gs:0x30, %rcx
000000000100fe69	cmpq	0x10(%rcx), %rsp
000000000100fe6d	jbe	0x100fef4
000000000100fe73	subq	$0x20, %rsp
000000000100fe77	movq	%rbp, 0x18(%rsp)
000000000100fe7c	leaq	0x18(%rsp), %rbp
000000000100fe81	movq	0x28(%rsp), %rax
000000000100fe86	xorl	%ecx, %ecx
000000000100fe88	jmp	0x100fe8d
000000000100fe8a	incq	%rcx
000000000100fe8d	cmpq	$0x86, %rcx
000000000100fe94	jge	0x100fee3
000000000100fe96	testb	%al, (%rax)
000000000100fe98	movq	0x28(%rax,%rcx,8), %rdx
000000000100fe9d	leaq	runtime.emptymspan(%rip), %rbx
000000000100fea4	cmpq	%rbx, %rdx
000000000100fea7	je	0x100fe8a
000000000100fea9	movq	%rcx, 0x10(%rsp)
000000000100feae	shlq	$0x6, %rcx
000000000100feb2	leaq	0xae91f(%rip), %rbx
000000000100feb9	leaq	(%rbx,%rcx), %rcx
000000000100febd	movq	%rcx, (%rsp)
000000000100fec1	movq	%rdx, 0x8(%rsp)
000000000100fec6	callq	"runtime.(*mcentral).uncacheSpan"
000000000100fecb	movq	0x10(%rsp), %rcx
000000000100fed0	leaq	runtime.emptymspan(%rip), %rbx
000000000100fed7	movq	0x28(%rsp), %rax
000000000100fedc	movq	%rbx, 0x28(%rax,%rcx,8)
000000000100fee1	jmp	0x100fe8a
000000000100fee3	xorps	%xmm0, %xmm0
000000000100fee6	movups	%xmm0, 0x10(%rax)
000000000100feea	movq	0x18(%rsp), %rbp
000000000100feef	addq	$0x20, %rsp
000000000100fef3	retq
000000000100fef4	callq	runtime.morestack_noctxt
000000000100fef9	jmp	"runtime.(*mcache).releaseAll"
000000000100fefe	int3
000000000100feff	int3
runtime.(*mcentral).cacheSpan:
000000000100ff00	movq	%gs:0x30, %rcx
000000000100ff09	cmpq	0x10(%rcx), %rsp
000000000100ff0d	jbe	0x1010352
000000000100ff13	subq	$0x40, %rsp
000000000100ff17	movq	%rbp, 0x38(%rsp)
000000000100ff1c	leaq	0x38(%rsp), %rbp
000000000100ff21	movq	0x48(%rsp), %rax
000000000100ff26	movzbl	0x8(%rax), %ecx
000000000100ff2a	shrb	%cl
000000000100ff2c	movsbq	%cl, %rcx
000000000100ff30	cmpq	$0x43, %rcx
000000000100ff34	jae	0x101034b
000000000100ff3a	leaq	runtime.class_to_allocnpages(%rip), %rax
000000000100ff41	movzbl	(%rax,%rcx), %eax
000000000100ff45	shlq	$0xd, %rax
000000000100ff49	movq	%rax, 0x20(%rsp)
000000000100ff4e	movq	%rax, (%rsp)
000000000100ff52	movq	$0x0, 0x8(%rsp)
000000000100ff5b	callq	runtime.deductSweepCredit
000000000100ff60	movq	0x48(%rsp), %rax
000000000100ff65	movq	%rax, (%rsp)
000000000100ff69	callq	runtime.lock
000000000100ff6e	leaq	0xb4a7b(%rip), %rax
000000000100ff75	cmpb	$0x0, (%rax)
000000000100ff78	jne	0x1010318
000000000100ff7e	movl	0xae53c(%rip), %ecx
000000000100ff84	movl	%ecx, 0x1c(%rsp)
000000000100ff88	jmp	0x10102ff
000000000100ff8d	movq	(%rbx), %rbx
000000000100ff90	leaq	0xb4a59(%rip), %rax
000000000100ff97	testq	%rbx, %rbx
000000000100ff9a	je	0x1010190
000000000100ffa0	movq	%rbx, 0x28(%rsp)
000000000100ffa5	movl	0x58(%rbx), %esi
000000000100ffa8	leal	-0x2(%rcx), %edi
000000000100ffab	cmpl	%edi, %esi
000000000100ffad	jne	0x100ffc6
000000000100ffaf	leal	-0x1(%rcx), %esi
000000000100ffb2	movl	%edi, %eax
000000000100ffb4	lock
000000000100ffb5	cmpxchgl	%esi, 0x58(%rbx)
000000000100ffb9	sete	%sil
000000000100ffbd	testb	%sil, %sil
000000000100ffc0	jne	0x1010135
000000000100ffc6	leal	-0x1(%rcx), %esi
000000000100ffc9	cmpl	%esi, 0x58(%rbx)
000000000100ffcc	je	0x100ff8d
000000000100ffce	leaq	0x10(%rdx), %rax
000000000100ffd2	movq	%rax, (%rsp)
000000000100ffd6	movq	%rbx, 0x8(%rsp)
000000000100ffdb	callq	"runtime.(*mSpanList).remove"
000000000100ffe0	movq	0x48(%rsp), %rax
000000000100ffe5	leaq	0x20(%rax), %rcx
000000000100ffe9	movq	%rcx, (%rsp)
000000000100ffed	movq	0x28(%rsp), %rcx
000000000100fff2	movq	%rcx, 0x8(%rsp)
000000000100fff7	callq	"runtime.(*mSpanList).insertBack"
000000000100fffc	movq	0x48(%rsp), %rax
0000000001010001	movq	%rax, (%rsp)
0000000001010005	callq	runtime.unlock
000000000101000a	xorl	%eax, %eax
000000000101000c	movq	0x28(%rsp), %rcx
0000000001010011	movq	%rcx, 0x28(%rsp)
0000000001010016	leaq	0xb49d3(%rip), %rdx
000000000101001d	cmpb	$0x0, (%rdx)
0000000001010020	je	0x101002a
0000000001010022	testb	%al, %al
0000000001010024	je	0x101011f
000000000101002a	movq	0x20(%rcx), %rax
000000000101002e	movq	0x68(%rcx), %rbx
0000000001010032	testq	%rbx, %rbx
0000000001010035	je	0x1010344
000000000101003b	shlq	$0xd, %rax
000000000101003f	xorl	%edx, %edx
0000000001010041	divq	%rbx
0000000001010044	movzwl	0x60(%rcx), %edx
0000000001010048	movzwl	%dx, %ebx
000000000101004b	subl	%ebx, %eax
000000000101004d	testl	%eax, %eax
000000000101004f	je	0x1010329
0000000001010055	movq	0x30(%rcx), %rbx
0000000001010059	movq	0x38(%rcx), %rsi
000000000101005d	cmpq	%rsi, %rbx
0000000001010060	je	0x1010329
0000000001010066	movzwl	%dx, %edx
0000000001010069	cmpq	%rdx, %rsi
000000000101006c	je	0x1010329
0000000001010072	movslq	%eax, %rax
0000000001010075	movq	0x48(%rsp), %rdx
000000000101007a	lock
000000000101007b	xaddq	%rax, 0x30(%rdx)
0000000001010080	movzwl	0x60(%rcx), %eax
0000000001010084	movq	0x68(%rcx), %rdx
0000000001010088	imulq	%rdx, %rax
000000000101008c	movq	0x20(%rsp), %rdx
0000000001010091	subq	%rax, %rdx
0000000001010094	leaq	0xc6f25(%rip), %rax
000000000101009b	lock
000000000101009c	xaddq	%rdx, (%rax)
00000000010100a0	leaq	0xb4949(%rip), %rax
00000000010100a7	cmpb	$0x0, (%rax)
00000000010100aa	jne	0x1010113
00000000010100ac	cmpl	$0x0, 0xc4a3d(%rip)
00000000010100b3	jne	0x10100fc
00000000010100b5	movb	$0x1, 0x63(%rcx)
00000000010100b9	movq	0x30(%rcx), %rax
00000000010100bd	movq	%rcx, (%rsp)
00000000010100c1	andq	$-0x40, %rax
00000000010100c5	shrq	$0x3, %rax
00000000010100c9	movq	%rax, 0x8(%rsp)
00000000010100ce	callq	"runtime.(*mspan).refillAllocCache"
00000000010100d3	movq	0x28(%rsp), %rax
00000000010100d8	movq	0x40(%rax), %rcx
00000000010100dc	movq	0x30(%rax), %rdx
00000000010100e0	movq	%rcx, %rbx
00000000010100e3	movq	%rdx, %rcx
00000000010100e6	shrq	%cl, %rbx
00000000010100e9	movq	%rbx, 0x40(%rax)
00000000010100ed	movq	%rax, 0x50(%rsp)
00000000010100f2	movq	0x38(%rsp), %rbp
00000000010100f7	addq	$0x40, %rsp
00000000010100fb	retq
00000000010100fc	leaq	runtime.gcController(%rip), %rax
0000000001010103	movq	%rax, (%rsp)
0000000001010107	callq	"runtime.(*gcControllerState).revise"
000000000101010c	movq	0x28(%rsp), %rcx
0000000001010111	jmp	0x10100b5
0000000001010113	callq	runtime.traceHeapAlloc
0000000001010118	movq	0x28(%rsp), %rcx
000000000101011d	jmp	0x10100ac
000000000101011f	callq	runtime.traceGCSweepDone
0000000001010124	movq	0x28(%rsp), %rcx
0000000001010129	leaq	0xb48c0(%rip), %rdx
0000000001010130	jmp	0x101002a
0000000001010135	leaq	0x10(%rdx), %rax
0000000001010139	movq	%rax, (%rsp)
000000000101013d	movq	%rbx, 0x8(%rsp)
0000000001010142	callq	"runtime.(*mSpanList).remove"
0000000001010147	movq	0x48(%rsp), %rax
000000000101014c	leaq	0x20(%rax), %rcx
0000000001010150	movq	%rcx, (%rsp)
0000000001010154	movq	0x28(%rsp), %rcx
0000000001010159	movq	%rcx, 0x8(%rsp)
000000000101015e	callq	"runtime.(*mSpanList).insertBack"
0000000001010163	movq	0x48(%rsp), %rax
0000000001010168	movq	%rax, (%rsp)
000000000101016c	callq	runtime.unlock
0000000001010171	movq	0x28(%rsp), %rax
0000000001010176	movq	%rax, (%rsp)
000000000101017a	movb	$0x1, 0x8(%rsp)
000000000101017f	callq	"runtime.(*mspan).sweep"
0000000001010184	xorl	%eax, %eax
0000000001010186	movq	0x28(%rsp), %rcx
000000000101018b	jmp	0x1010011
0000000001010190	movq	0x20(%rdx), %rbx
0000000001010194	jmp	0x10101a0
0000000001010196	movq	(%rbx), %rbx
0000000001010199	leaq	0xb4850(%rip), %rax
00000000010101a0	testq	%rbx, %rbx
00000000010101a3	je	0x10101ce
00000000010101a5	movl	0x58(%rbx), %esi
00000000010101a8	leal	-0x2(%rcx), %edi
00000000010101ab	cmpl	%edi, %esi
00000000010101ad	jne	0x10101c6
00000000010101af	leal	-0x1(%rcx), %esi
00000000010101b2	movl	%edi, %eax
00000000010101b4	lock
00000000010101b5	cmpxchgl	%esi, 0x58(%rbx)
00000000010101b9	sete	%sil
00000000010101bd	testb	%sil, %sil
00000000010101c0	jne	0x1010270
00000000010101c6	leal	-0x1(%rcx), %esi
00000000010101c9	cmpl	%esi, 0x58(%rbx)
00000000010101cc	je	0x1010196
00000000010101ce	movzbl	0xb481b(%rip), %eax
00000000010101d5	movb	%al, 0x1b(%rsp)
00000000010101d9	testb	%al, %al
00000000010101db	jne	0x1010261
00000000010101e1	movq	%rdx, (%rsp)
00000000010101e5	callq	runtime.unlock
00000000010101ea	movq	0x48(%rsp), %rax
00000000010101ef	movq	%rax, (%rsp)
00000000010101f3	callq	"runtime.(*mcentral).grow"
00000000010101f8	movq	0x8(%rsp), %rax
00000000010101fd	testq	%rax, %rax
0000000001010200	je	0x101024e
0000000001010202	movq	%rax, 0x28(%rsp)
0000000001010207	movq	0x48(%rsp), %rax
000000000101020c	movq	%rax, (%rsp)
0000000001010210	callq	runtime.lock
0000000001010215	movq	0x48(%rsp), %rax
000000000101021a	leaq	0x20(%rax), %rcx
000000000101021e	movq	%rcx, (%rsp)
0000000001010222	movq	0x28(%rsp), %rcx
0000000001010227	movq	%rcx, 0x8(%rsp)
000000000101022c	callq	"runtime.(*mSpanList).insertBack"
0000000001010231	movq	0x48(%rsp), %rax
0000000001010236	movq	%rax, (%rsp)
000000000101023a	callq	runtime.unlock
000000000101023f	movzbl	0x1b(%rsp), %eax
0000000001010244	movq	0x28(%rsp), %rcx
0000000001010249	jmp	0x1010011
000000000101024e	movq	$0x0, 0x50(%rsp)
0000000001010257	movq	0x38(%rsp), %rbp
000000000101025c	addq	$0x40, %rsp
0000000001010260	retq
0000000001010261	callq	runtime.traceGCSweepDone
0000000001010266	movq	0x48(%rsp), %rdx
000000000101026b	jmp	0x10101e1
0000000001010270	movq	%rbx, 0x28(%rsp)
0000000001010275	leaq	0x20(%rdx), %rax
0000000001010279	movq	%rax, 0x30(%rsp)
000000000101027e	movq	%rax, (%rsp)
0000000001010282	movq	%rbx, 0x8(%rsp)
0000000001010287	callq	"runtime.(*mSpanList).remove"
000000000101028c	movq	0x30(%rsp), %rax
0000000001010291	movq	%rax, (%rsp)
0000000001010295	movq	0x28(%rsp), %rax
000000000101029a	movq	%rax, 0x8(%rsp)
000000000101029f	callq	"runtime.(*mSpanList).insertBack"
00000000010102a4	movq	0x48(%rsp), %rax
00000000010102a9	movq	%rax, (%rsp)
00000000010102ad	callq	runtime.unlock
00000000010102b2	movq	0x28(%rsp), %rax
00000000010102b7	movq	%rax, (%rsp)
00000000010102bb	movb	$0x1, 0x8(%rsp)
00000000010102c0	callq	"runtime.(*mspan).sweep"
00000000010102c5	movq	0x28(%rsp), %rax
00000000010102ca	movq	%rax, (%rsp)
00000000010102ce	callq	"runtime.(*mspan).nextFreeIndex"
00000000010102d3	movq	0x8(%rsp), %rax
00000000010102d8	movq	0x28(%rsp), %rcx
00000000010102dd	movq	0x38(%rcx), %rdx
00000000010102e1	cmpq	%rdx, %rax
00000000010102e4	jne	0x101030d
00000000010102e6	movq	0x48(%rsp), %rax
00000000010102eb	movq	%rax, (%rsp)
00000000010102ef	callq	runtime.lock
00000000010102f4	leaq	0xb46f5(%rip), %rax
00000000010102fb	movl	0x1c(%rsp), %ecx
00000000010102ff	movq	0x48(%rsp), %rdx
0000000001010304	movq	0x10(%rdx), %rbx
0000000001010308	jmp	0x100ff97
000000000101030d	movq	%rax, 0x30(%rcx)
0000000001010311	xorl	%eax, %eax
0000000001010313	jmp	0x1010011
0000000001010318	callq	runtime.traceGCSweepStart
000000000101031d	leaq	0xb46cc(%rip), %rax
0000000001010324	jmp	0x100ff7e
0000000001010329	leaq	0x5c353(%rip), %rax
0000000001010330	movq	%rax, (%rsp)
0000000001010334	movq	$0x18, 0x8(%rsp)
000000000101033d	callq	runtime.throw
0000000001010342	ud2
0000000001010344	callq	runtime.panicdivide
0000000001010349	ud2
000000000101034b	callq	runtime.panicindex
0000000001010350	ud2
0000000001010352	callq	runtime.morestack_noctxt
0000000001010357	jmp	"runtime.(*mcentral).cacheSpan"
000000000101035c	int3
000000000101035d	int3
000000000101035e	int3
000000000101035f	int3
runtime.(*mcentral).uncacheSpan:
0000000001010360	movq	%gs:0x30, %rcx
0000000001010369	cmpq	0x10(%rcx), %rsp
000000000101036d	jbe	0x1010471
0000000001010373	subq	$0x20, %rsp
0000000001010377	movq	%rbp, 0x18(%rsp)
000000000101037c	leaq	0x18(%rsp), %rbp
0000000001010381	movq	0x28(%rsp), %rax
0000000001010386	testb	%al, (%rax)
0000000001010388	movq	%rax, (%rsp)
000000000101038c	callq	runtime.lock
0000000001010391	movq	0x30(%rsp), %rax
0000000001010396	movb	$0x0, 0x63(%rax)
000000000101039a	movzwl	0x60(%rax), %ecx
000000000101039e	testw	%cx, %cx
00000000010103a1	je	0x1010456
00000000010103a7	movq	0x20(%rax), %rdx
00000000010103ab	movq	0x68(%rax), %rbx
00000000010103af	testq	%rbx, %rbx
00000000010103b2	je	0x101044f
00000000010103b8	shlq	$0xd, %rdx
00000000010103bc	movq	%rax, %rsi
00000000010103bf	movq	%rdx, %rax
00000000010103c2	xorl	%edx, %edx
00000000010103c4	divq	%rbx
00000000010103c7	movzwl	%cx, %ecx
00000000010103ca	subl	%ecx, %eax
00000000010103cc	testl	%eax, %eax
00000000010103ce	jg	0x10103e8
00000000010103d0	movq	0x28(%rsp), %rax
00000000010103d5	movq	%rax, (%rsp)
00000000010103d9	callq	runtime.unlock
00000000010103de	movq	0x18(%rsp), %rbp
00000000010103e3	addq	$0x20, %rsp
00000000010103e7	retq
00000000010103e8	movl	%eax, 0x14(%rsp)
00000000010103ec	movq	0x28(%rsp), %rax
00000000010103f1	leaq	0x20(%rax), %rcx
00000000010103f5	movq	%rcx, (%rsp)
00000000010103f9	movq	%rsi, 0x8(%rsp)
00000000010103fe	callq	"runtime.(*mSpanList).remove"
0000000001010403	movq	0x28(%rsp), %rax
0000000001010408	leaq	0x10(%rax), %rcx
000000000101040c	movq	%rcx, (%rsp)
0000000001010410	movq	0x30(%rsp), %rcx
0000000001010415	movq	%rcx, 0x8(%rsp)
000000000101041a	callq	"runtime.(*mSpanList).insert"
000000000101041f	movl	0x14(%rsp), %eax
0000000001010423	movslq	%eax, %rax
0000000001010426	negq	%rax
0000000001010429	movq	0x30(%rsp), %rcx
000000000101042e	movq	0x68(%rcx), %rcx
0000000001010432	imulq	%rax, %rcx
0000000001010436	leaq	0xc6b83(%rip), %rdx
000000000101043d	lock
000000000101043e	xaddq	%rcx, (%rdx)
0000000001010442	movq	0x28(%rsp), %rcx
0000000001010447	lock
0000000001010448	xaddq	%rax, 0x30(%rcx)
000000000101044d	jmp	0x10103d0
000000000101044f	callq	runtime.panicdivide
0000000001010454	ud2
0000000001010456	leaq	0x5d8d3(%rip), %rax
000000000101045d	movq	%rax, (%rsp)
0000000001010461	movq	$0x24, 0x8(%rsp)
000000000101046a	callq	runtime.throw
000000000101046f	ud2
0000000001010471	callq	runtime.morestack_noctxt
0000000001010476	jmp	"runtime.(*mcentral).uncacheSpan"
000000000101047b	int3
000000000101047c	int3
000000000101047d	int3
000000000101047e	int3
000000000101047f	int3
runtime.(*mcentral).freeSpan:
0000000001010480	movq	%gs:0x30, %rcx
0000000001010489	cmpq	0x10(%rcx), %rsp
000000000101048d	jbe	0x10105fd
0000000001010493	subq	$0x20, %rsp
0000000001010497	movq	%rbp, 0x18(%rsp)
000000000101049c	leaq	0x18(%rsp), %rbp
00000000010104a1	movq	0x30(%rsp), %rax
00000000010104a6	testb	%al, (%rax)
00000000010104a8	leaq	0x63(%rax), %rcx
00000000010104ac	cmpb	$0x0, (%rcx)
00000000010104af	jne	0x10105e2
00000000010104b5	movb	$0x1, 0x65(%rax)
00000000010104b9	movzbl	0x38(%rsp), %ecx
00000000010104be	testb	%cl, %cl
00000000010104c0	je	0x10104e5
00000000010104c2	cmpq	$0x0, 0x10(%rax)
00000000010104c7	je	0x10105c7
00000000010104cd	movl	0xadfed(%rip), %ecx
00000000010104d3	xchgl	%ecx, 0x58(%rax)
00000000010104d6	movb	$0x0, 0x40(%rsp)
00000000010104db	movq	0x18(%rsp), %rbp
00000000010104e0	addq	$0x20, %rsp
00000000010104e4	retq
00000000010104e5	movq	0x28(%rsp), %rax
00000000010104ea	testb	%al, (%rax)
00000000010104ec	movq	%rax, (%rsp)
00000000010104f0	callq	runtime.lock
00000000010104f5	movzbl	0x39(%rsp), %eax
00000000010104fa	testb	%al, %al
00000000010104fc	jne	0x101058a
0000000001010502	movl	0xadfb8(%rip), %eax
0000000001010508	movq	0x30(%rsp), %rcx
000000000101050d	xchgl	%eax, 0x58(%rcx)
0000000001010510	cmpw	$0x0, 0x60(%rcx)
0000000001010515	je	0x1010534
0000000001010517	movq	0x28(%rsp), %rax
000000000101051c	movq	%rax, (%rsp)
0000000001010520	callq	runtime.unlock
0000000001010525	movb	$0x0, 0x40(%rsp)
000000000101052a	movq	0x18(%rsp), %rbp
000000000101052f	addq	$0x20, %rsp
0000000001010533	retq
0000000001010534	movq	0x28(%rsp), %rax
0000000001010539	leaq	0x10(%rax), %rdx
000000000101053d	movq	%rdx, (%rsp)
0000000001010541	movq	%rcx, 0x8(%rsp)
0000000001010546	callq	"runtime.(*mSpanList).remove"
000000000101054b	movq	0x28(%rsp), %rax
0000000001010550	movq	%rax, (%rsp)
0000000001010554	callq	runtime.unlock
0000000001010559	leaq	runtime.mheap_(%rip), %rax
0000000001010560	movq	%rax, (%rsp)
0000000001010564	movq	0x30(%rsp), %rax
0000000001010569	movq	%rax, 0x8(%rsp)
000000000101056e	movl	$0x0, 0x10(%rsp)
0000000001010576	callq	"runtime.(*mheap).freeSpan"
000000000101057b	movb	$0x1, 0x40(%rsp)
0000000001010580	movq	0x18(%rsp), %rbp
0000000001010585	addq	$0x20, %rsp
0000000001010589	retq
000000000101058a	movq	0x28(%rsp), %rax
000000000101058f	leaq	0x20(%rax), %rcx
0000000001010593	movq	%rcx, (%rsp)
0000000001010597	movq	0x30(%rsp), %rcx
000000000101059c	movq	%rcx, 0x8(%rsp)
00000000010105a1	callq	"runtime.(*mSpanList).remove"
00000000010105a6	movq	0x28(%rsp), %rax
00000000010105ab	leaq	0x10(%rax), %rcx
00000000010105af	movq	%rcx, (%rsp)
00000000010105b3	movq	0x30(%rsp), %rcx
00000000010105b8	movq	%rcx, 0x8(%rsp)
00000000010105bd	callq	"runtime.(*mSpanList).insert"
00000000010105c2	jmp	0x1010502
00000000010105c7	leaq	0x5c7c9(%rip), %rax
00000000010105ce	movq	%rax, (%rsp)
00000000010105d2	movq	$0x1c, 0x8(%rsp)
00000000010105db	callq	runtime.throw
00000000010105e0	ud2
00000000010105e2	leaq	0x5c33f(%rip), %rax
00000000010105e9	movq	%rax, (%rsp)
00000000010105ed	movq	$0x1a, 0x8(%rsp)
00000000010105f6	callq	runtime.throw
00000000010105fb	ud2
00000000010105fd	callq	runtime.morestack_noctxt
0000000001010602	jmp	"runtime.(*mcentral).freeSpan"
0000000001010607	int3
0000000001010608	int3
0000000001010609	int3
000000000101060a	int3
000000000101060b	int3
000000000101060c	int3
000000000101060d	int3
000000000101060e	int3
000000000101060f	int3
runtime.(*mcentral).grow:
0000000001010610	movq	%gs:0x30, %rcx
0000000001010619	cmpq	0x10(%rcx), %rsp
000000000101061d	jbe	0x1010780
0000000001010623	subq	$0x40, %rsp
0000000001010627	movq	%rbp, 0x38(%rsp)
000000000101062c	leaq	0x38(%rsp), %rbp
0000000001010631	movq	0x48(%rsp), %rcx
0000000001010636	movzbl	0x8(%rcx), %ecx
000000000101063a	movl	%ecx, %edx
000000000101063c	shrb	%cl
000000000101063e	movsbq	%cl, %rcx
0000000001010642	cmpq	$0x43, %rcx
0000000001010646	jae	0x1010779
000000000101064c	leaq	runtime.class_to_allocnpages(%rip), %rbx
0000000001010653	movzbl	(%rbx,%rcx), %eax
0000000001010657	leaq	runtime.class_to_size(%rip), %rbx
000000000101065e	movzwl	(%rbx,%rcx,2), %ecx
0000000001010662	testq	%rcx, %rcx
0000000001010665	je	0x1010772
000000000101066b	movq	%rcx, 0x28(%rsp)
0000000001010670	movq	%rax, %rbx
0000000001010673	shlq	$0xd, %rax
0000000001010677	movl	%edx, %esi
0000000001010679	xorl	%edx, %edx
000000000101067b	divq	%rcx
000000000101067e	movq	%rax, 0x20(%rsp)
0000000001010683	movb	%sil, 0x10(%rsp)
0000000001010688	leaq	runtime.mheap_(%rip), %rdx
000000000101068f	movq	%rdx, (%rsp)
0000000001010693	movq	%rbx, 0x8(%rsp)
0000000001010698	movw	$0x100, 0x11(%rsp)
000000000101069f	callq	"runtime.(*mheap).alloc"
00000000010106a4	movq	0x18(%rsp), %rcx
00000000010106a9	testq	%rcx, %rcx
00000000010106ac	je	0x1010758
00000000010106b2	movq	0x28(%rsp), %rax
00000000010106b7	movq	0x20(%rsp), %rdx
00000000010106bc	imulq	%rdx, %rax
00000000010106c0	addq	0x18(%rcx), %rax
00000000010106c4	movq	%rax, 0x80(%rcx)
00000000010106cb	movq	0xae0c6(%rip), %rax
00000000010106d2	testb	%al, (%rax)
00000000010106d4	movq	0x18(%rcx), %rdx
00000000010106d8	movabsq	$0x800000000000, %rbx
00000000010106e2	addq	%rdx, %rbx
00000000010106e5	shrq	$0x1a, %rbx
00000000010106e9	cmpq	$0x400000, %rbx
00000000010106f0	jae	0x101076b
00000000010106f2	movq	(%rax,%rbx,8), %rax
00000000010106f6	testq	%rax, %rax
00000000010106f9	je	0x101074e
00000000010106fb	movq	%rdx, %rsi
00000000010106fe	shrq	$0x5, %rdx
0000000001010702	andq	$0x1fffff, %rdx
0000000001010709	addq	%rax, %rdx
000000000101070c	shrq	$0x3, %rsi
0000000001010710	andq	$0x3, %rsi
0000000001010714	addq	$0x1fffff, %rax
000000000101071a	movq	%rcx, 0x30(%rsp)
000000000101071f	movq	%rdx, (%rsp)
0000000001010723	movl	%esi, 0x8(%rsp)
0000000001010727	movl	%ebx, 0xc(%rsp)
000000000101072b	movq	%rax, 0x10(%rsp)
0000000001010730	movq	%rcx, 0x18(%rsp)
0000000001010735	callq	runtime.heapBits.initSpan
000000000101073a	movq	0x30(%rsp), %rax
000000000101073f	movq	%rax, 0x50(%rsp)
0000000001010744	movq	0x38(%rsp), %rbp
0000000001010749	addq	$0x40, %rsp
000000000101074d	retq
000000000101074e	xorl	%eax, %eax
0000000001010750	xorl	%ebx, %ebx
0000000001010752	xorl	%esi, %esi
0000000001010754	xorl	%edx, %edx
0000000001010756	jmp	0x101071a
0000000001010758	movq	$0x0, 0x50(%rsp)
0000000001010761	movq	0x38(%rsp), %rbp
0000000001010766	addq	$0x40, %rsp
000000000101076a	retq
000000000101076b	callq	runtime.panicindex
0000000001010770	ud2
0000000001010772	callq	runtime.panicdivide
0000000001010777	ud2
0000000001010779	callq	runtime.panicindex
000000000101077e	ud2
0000000001010780	callq	runtime.morestack_noctxt
0000000001010785	jmp	"runtime.(*mcentral).grow"
000000000101078a	int3
000000000101078b	int3
000000000101078c	int3
000000000101078d	int3
000000000101078e	int3
000000000101078f	int3
runtime.sysAlloc:
0000000001010790	subq	$0x40, %rsp
0000000001010794	movq	%rbp, 0x38(%rsp)
0000000001010799	leaq	0x38(%rsp), %rbp
000000000101079e	movq	$0x0, (%rsp)
00000000010107a6	movq	0x48(%rsp), %rax
00000000010107ab	movq	%rax, 0x8(%rsp)
00000000010107b0	movabsq	$0x100200000003, %rcx
00000000010107ba	movq	%rcx, 0x10(%rsp)
00000000010107bf	movl	$0xffffffff, %ecx
00000000010107c4	movq	%rcx, 0x18(%rsp)
00000000010107c9	callq	runtime.mmap
00000000010107ce	movq	0x20(%rsp), %rax
00000000010107d3	cmpq	$0x0, 0x28(%rsp)
00000000010107d9	je	0x10107ee
00000000010107db	movq	$0x0, 0x58(%rsp)
00000000010107e4	movq	0x38(%rsp), %rbp
00000000010107e9	addq	$0x40, %rsp
00000000010107ed	retq
00000000010107ee	movq	%rax, 0x30(%rsp)
00000000010107f3	movq	0x50(%rsp), %rax
00000000010107f8	movq	%rax, (%rsp)
00000000010107fc	movq	0x48(%rsp), %rax
0000000001010801	movq	%rax, 0x8(%rsp)
0000000001010806	callq	runtime.mSysStatInc
000000000101080b	movq	0x30(%rsp), %rax
0000000001010810	movq	%rax, 0x58(%rsp)
0000000001010815	movq	0x38(%rsp), %rbp
000000000101081a	addq	$0x40, %rsp
000000000101081e	retq
000000000101081f	int3
runtime.sysUnused:
0000000001010820	movq	%gs:0x30, %rcx
0000000001010829	cmpq	0x10(%rcx), %rsp
000000000101082d	jbe	0x1010867
000000000101082f	subq	$0x20, %rsp
0000000001010833	movq	%rbp, 0x18(%rsp)
0000000001010838	leaq	0x18(%rsp), %rbp
000000000101083d	movq	0x28(%rsp), %rax
0000000001010842	movq	%rax, (%rsp)
0000000001010846	movq	0x30(%rsp), %rax
000000000101084b	movq	%rax, 0x8(%rsp)
0000000001010850	movl	$0x5, 0x10(%rsp)
0000000001010858	callq	runtime.madvise
000000000101085d	movq	0x18(%rsp), %rbp
0000000001010862	addq	$0x20, %rsp
0000000001010866	retq
0000000001010867	callq	runtime.morestack_noctxt
000000000101086c	jmp	runtime.sysUnused
000000000101086e	int3
000000000101086f	int3
runtime.sysFree:
0000000001010870	subq	$0x18, %rsp
0000000001010874	movq	%rbp, 0x10(%rsp)
0000000001010879	leaq	0x10(%rsp), %rbp
000000000101087e	movq	0x30(%rsp), %rax
0000000001010883	movq	%rax, (%rsp)
0000000001010887	movq	0x28(%rsp), %rax
000000000101088c	movq	%rax, 0x8(%rsp)
0000000001010891	callq	runtime.mSysStatDec
0000000001010896	movq	0x20(%rsp), %rax
000000000101089b	movq	%rax, (%rsp)
000000000101089f	movq	0x28(%rsp), %rax
00000000010108a4	movq	%rax, 0x8(%rsp)
00000000010108a9	callq	runtime.munmap
00000000010108ae	movq	0x10(%rsp), %rbp
00000000010108b3	addq	$0x18, %rsp
00000000010108b7	retq
00000000010108b8	int3
00000000010108b9	int3
00000000010108ba	int3
00000000010108bb	int3
00000000010108bc	int3
00000000010108bd	int3
00000000010108be	int3
00000000010108bf	int3
runtime.sysFault:
00000000010108c0	movq	%gs:0x30, %rcx
00000000010108c9	cmpq	0x10(%rcx), %rsp
00000000010108cd	jbe	0x1010918
00000000010108cf	subq	$0x38, %rsp
00000000010108d3	movq	%rbp, 0x30(%rsp)
00000000010108d8	leaq	0x30(%rsp), %rbp
00000000010108dd	movq	0x40(%rsp), %rax
00000000010108e2	movq	%rax, (%rsp)
00000000010108e6	movq	0x48(%rsp), %rax
00000000010108eb	movq	%rax, 0x8(%rsp)
00000000010108f0	movabsq	$0x101200000000, %rax
00000000010108fa	movq	%rax, 0x10(%rsp)
00000000010108ff	movl	$0xffffffff, %eax
0000000001010904	movq	%rax, 0x18(%rsp)
0000000001010909	callq	runtime.mmap
000000000101090e	movq	0x30(%rsp), %rbp
0000000001010913	addq	$0x38, %rsp
0000000001010917	retq
0000000001010918	callq	runtime.morestack_noctxt
000000000101091d	jmp	runtime.sysFault
000000000101091f	int3
runtime.sysReserve:
0000000001010920	movq	%gs:0x30, %rcx
0000000001010929	cmpq	0x10(%rcx), %rsp
000000000101092d	jbe	0x101099d
000000000101092f	subq	$0x38, %rsp
0000000001010933	movq	%rbp, 0x30(%rsp)
0000000001010938	leaq	0x30(%rsp), %rbp
000000000101093d	movq	0x40(%rsp), %rax
0000000001010942	movq	%rax, (%rsp)
0000000001010946	movq	0x48(%rsp), %rax
000000000101094b	movq	%rax, 0x8(%rsp)
0000000001010950	movabsq	$0x100200000000, %rax
000000000101095a	movq	%rax, 0x10(%rsp)
000000000101095f	movl	$0xffffffff, %eax
0000000001010964	movq	%rax, 0x18(%rsp)
0000000001010969	callq	runtime.mmap
000000000101096e	movq	0x20(%rsp), %rax
0000000001010973	cmpq	$0x0, 0x28(%rsp)
0000000001010979	je	0x101098e
000000000101097b	movq	$0x0, 0x50(%rsp)
0000000001010984	movq	0x30(%rsp), %rbp
0000000001010989	addq	$0x38, %rsp
000000000101098d	retq
000000000101098e	movq	%rax, 0x50(%rsp)
0000000001010993	movq	0x30(%rsp), %rbp
0000000001010998	addq	$0x38, %rsp
000000000101099c	retq
000000000101099d	callq	runtime.morestack_noctxt
00000000010109a2	jmp	runtime.sysReserve
00000000010109a7	int3
00000000010109a8	int3
00000000010109a9	int3
00000000010109aa	int3
00000000010109ab	int3
00000000010109ac	int3
00000000010109ad	int3
00000000010109ae	int3
00000000010109af	int3
runtime.sysMap:
00000000010109b0	movq	%gs:0x30, %rcx
00000000010109b9	cmpq	0x10(%rcx), %rsp
00000000010109bd	jbe	0x1010a79
00000000010109c3	subq	$0x38, %rsp
00000000010109c7	movq	%rbp, 0x30(%rsp)
00000000010109cc	leaq	0x30(%rsp), %rbp
00000000010109d1	movq	0x50(%rsp), %rax
00000000010109d6	movq	%rax, (%rsp)
00000000010109da	movq	0x48(%rsp), %rax
00000000010109df	movq	%rax, 0x8(%rsp)
00000000010109e4	callq	runtime.mSysStatInc
00000000010109e9	movq	0x40(%rsp), %rax
00000000010109ee	movq	%rax, (%rsp)
00000000010109f2	movq	0x48(%rsp), %rcx
00000000010109f7	movq	%rcx, 0x8(%rsp)
00000000010109fc	movabsq	$0x101200000003, %rcx
0000000001010a06	movq	%rcx, 0x10(%rsp)
0000000001010a0b	movl	$0xffffffff, %ecx
0000000001010a10	movq	%rcx, 0x18(%rsp)
0000000001010a15	callq	runtime.mmap
0000000001010a1a	movq	0x20(%rsp), %rax
0000000001010a1f	movq	0x28(%rsp), %rcx
0000000001010a24	cmpq	$0xc, %rcx
0000000001010a28	je	0x1010a5e
0000000001010a2a	movq	0x40(%rsp), %rdx
0000000001010a2f	cmpq	%rdx, %rax
0000000001010a32	jne	0x1010a43
0000000001010a34	testq	%rcx, %rcx
0000000001010a37	jne	0x1010a43
0000000001010a39	movq	0x30(%rsp), %rbp
0000000001010a3e	addq	$0x38, %rsp
0000000001010a42	retq
0000000001010a43	leaq	0x5dcbf(%rip), %rax
0000000001010a4a	movq	%rax, (%rsp)
0000000001010a4e	movq	$0x30, 0x8(%rsp)
0000000001010a57	callq	runtime.throw
0000000001010a5c	ud2
0000000001010a5e	leaq	0x5b7a0(%rip), %rax
0000000001010a65	movq	%rax, (%rsp)
0000000001010a69	movq	$0x16, 0x8(%rsp)
0000000001010a72	callq	runtime.throw
0000000001010a77	ud2
0000000001010a79	callq	runtime.morestack_noctxt
0000000001010a7e	jmp	runtime.sysMap
0000000001010a83	int3
0000000001010a84	int3
0000000001010a85	int3
0000000001010a86	int3
0000000001010a87	int3
0000000001010a88	int3
0000000001010a89	int3
0000000001010a8a	int3
0000000001010a8b	int3
0000000001010a8c	int3
0000000001010a8d	int3
0000000001010a8e	int3
0000000001010a8f	int3
runtime.queuefinalizer:
0000000001010a90	movq	%gs:0x30, %rcx
0000000001010a99	cmpq	0x10(%rcx), %rsp
0000000001010a9d	jbe	0x1010cbe
0000000001010aa3	subq	$0x28, %rsp
0000000001010aa7	movq	%rbp, 0x20(%rsp)
0000000001010aac	leaq	0x20(%rsp), %rbp
0000000001010ab1	cmpl	$0x0, 0xc4040(%rip)
0000000001010ab8	jne	0x1010ca3
0000000001010abe	leaq	runtime.finlock(%rip), %rax
0000000001010ac5	movq	%rax, (%rsp)
0000000001010ac9	callq	runtime.lock
0000000001010ace	movq	runtime.finq(%rip), %rax
0000000001010ad5	testq	%rax, %rax
0000000001010ad8	je	0x1010ae4
0000000001010ada	cmpl	$0x65, 0x10(%rax)
0000000001010ade	jne	0x1010bbe
0000000001010ae4	cmpq	$0x0, 0xa7ccc(%rip)
0000000001010aec	jne	0x1010b9a
0000000001010af2	movq	$0x1000, (%rsp)
0000000001010afa	movq	$0x0, 0x8(%rsp)
0000000001010b03	leaq	0xc4e0e(%rip), %rax
0000000001010b0a	movq	%rax, 0x10(%rsp)
0000000001010b0f	callq	runtime.persistentalloc
0000000001010b14	movq	0x18(%rsp), %rax
0000000001010b19	movq	%rax, runtime.finc(%rip)
0000000001010b20	movq	runtime.allfin(%rip), %rcx
0000000001010b27	movq	%rcx, (%rax)
0000000001010b2a	movq	runtime.finc(%rip), %rax
0000000001010b31	movq	%rax, runtime.allfin(%rip)
0000000001010b38	cmpb	$0x0, 0xc4221(%rip)
0000000001010b3f	jne	0x1010b9a
0000000001010b41	xorl	%eax, %eax
0000000001010b43	jmp	0x1010b5e
0000000001010b45	leaq	runtime.finalizer1(%rip), %rcx
0000000001010b4c	movzbl	(%rcx,%rbx), %ebx
0000000001010b50	leaq	runtime.finptrmask(%rip), %rsi
0000000001010b57	movb	%bl, (%rsi,%rdx)
0000000001010b5a	leaq	0x1(%rdx), %rax
0000000001010b5e	cmpq	$0x40, %rax
0000000001010b62	jge	0x1010b9a
0000000001010b64	movq	%rax, %rcx
0000000001010b67	movabsq	$-0x3333333333333333, %rax
0000000001010b71	imulq	%rcx
0000000001010b74	addq	%rcx, %rdx
0000000001010b77	sarq	$0x2, %rdx
0000000001010b7b	movq	%rcx, %rbx
0000000001010b7e	sarq	$0x3f, %rcx
0000000001010b82	subq	%rcx, %rdx
0000000001010b85	leaq	(%rdx,%rdx,4), %rcx
0000000001010b89	movq	%rbx, %rdx
0000000001010b8c	subq	%rcx, %rbx
0000000001010b8f	cmpq	$0x5, %rbx
0000000001010b93	jb	0x1010b45
0000000001010b95	jmp	0x1010c9c
0000000001010b9a	movq	runtime.finc(%rip), %rcx
0000000001010ba1	movq	0x8(%rcx), %rdx
0000000001010ba5	movq	%rdx, runtime.finc(%rip)
0000000001010bac	movq	runtime.finq(%rip), %rdx
0000000001010bb3	movq	%rdx, 0x8(%rcx)
0000000001010bb7	movq	%rcx, runtime.finq(%rip)
0000000001010bbe	movq	runtime.finq(%rip), %rcx
0000000001010bc5	movl	0x10(%rcx), %edx
0000000001010bc8	cmpq	$0x65, %rdx
0000000001010bcc	jae	0x1010c95
0000000001010bd2	movl	$0x1, %ebx
0000000001010bd7	lock
0000000001010bd8	xaddl	%ebx, 0x10(%rcx)
0000000001010bdc	leaq	(%rdx,%rdx,4), %rdx
0000000001010be0	leaq	0x18(%rcx,%rdx,8), %rdi
0000000001010be5	leaq	0x30(%rcx,%rdx,8), %rbx
0000000001010bea	leaq	0x38(%rcx,%rdx,8), %rsi
0000000001010bef	leaq	0x20(%rcx,%rdx,8), %r8
0000000001010bf4	cmpl	$0x0, 0xc4035(%rip)
0000000001010bfb	jne	0x1010c86
0000000001010c01	movq	0x38(%rsp), %r9
0000000001010c06	movq	%r9, 0x18(%rcx,%rdx,8)
0000000001010c0b	movq	0x40(%rsp), %r9
0000000001010c10	movq	%r9, 0x28(%rcx,%rdx,8)
0000000001010c15	cmpl	$0x0, 0xc4014(%rip)
0000000001010c1c	jne	0x1010c5d
0000000001010c1e	movq	0x48(%rsp), %rax
0000000001010c23	movq	%rax, 0x30(%rcx,%rdx,8)
0000000001010c28	movq	0x50(%rsp), %rax
0000000001010c2d	movq	%rax, 0x38(%rcx,%rdx,8)
0000000001010c32	movq	0x30(%rsp), %rax
0000000001010c37	movq	%rax, 0x20(%rcx,%rdx,8)
0000000001010c3c	movb	$0x1, runtime.fingwait(%rip)
0000000001010c43	leaq	runtime.finlock(%rip), %rax
0000000001010c4a	movq	%rax, (%rsp)
0000000001010c4e	callq	runtime.unlock
0000000001010c53	movq	0x20(%rsp), %rbp
0000000001010c58	addq	$0x28, %rsp
0000000001010c5c	retq
0000000001010c5d	movq	%rbx, %rdi
0000000001010c60	movq	0x48(%rsp), %rax
0000000001010c65	callq	runtime.gcWriteBarrier
0000000001010c6a	movq	%rsi, %rdi
0000000001010c6d	movq	0x50(%rsp), %rax
0000000001010c72	callq	runtime.gcWriteBarrier
0000000001010c77	movq	%r8, %rdi
0000000001010c7a	movq	0x30(%rsp), %rax
0000000001010c7f	callq	runtime.gcWriteBarrier
0000000001010c84	jmp	0x1010c3c
0000000001010c86	movq	0x38(%rsp), %rax
0000000001010c8b	callq	runtime.gcWriteBarrier
0000000001010c90	jmp	0x1010c0b
0000000001010c95	callq	runtime.panicindex
0000000001010c9a	ud2
0000000001010c9c	callq	runtime.panicindex
0000000001010ca1	ud2
0000000001010ca3	leaq	0x5b991(%rip), %rax
0000000001010caa	movq	%rax, (%rsp)
0000000001010cae	movq	$0x18, 0x8(%rsp)
0000000001010cb7	callq	runtime.throw
0000000001010cbc	ud2
0000000001010cbe	callq	runtime.morestack_noctxt
0000000001010cc3	jmp	runtime.queuefinalizer
0000000001010cc8	int3
0000000001010cc9	int3
0000000001010cca	int3
0000000001010ccb	int3
0000000001010ccc	int3
0000000001010ccd	int3
0000000001010cce	int3
0000000001010ccf	int3
runtime.wakefing:
0000000001010cd0	movq	%gs:0x30, %rcx
0000000001010cd9	cmpq	0x10(%rcx), %rsp
0000000001010cdd	jbe	0x1010d5b
0000000001010cdf	subq	$0x18, %rsp
0000000001010ce3	movq	%rbp, 0x10(%rsp)
0000000001010ce8	leaq	0x10(%rsp), %rbp
0000000001010ced	leaq	runtime.finlock(%rip), %rax
0000000001010cf4	movq	%rax, (%rsp)
0000000001010cf8	callq	runtime.lock
0000000001010cfd	leaq	runtime.fingwait(%rip), %rax
0000000001010d04	cmpb	$0x0, (%rax)
0000000001010d07	je	0x1010d57
0000000001010d09	leaq	runtime.fingwake(%rip), %rax
0000000001010d10	cmpb	$0x0, (%rax)
0000000001010d13	je	0x1010d53
0000000001010d15	movb	$0x0, runtime.fingRunning(%rip)
0000000001010d1c	movb	$0x0, runtime.fingwait(%rip)
0000000001010d23	movq	runtime.fing(%rip), %rax
0000000001010d2a	movq	%rax, 0x8(%rsp)
0000000001010d2f	leaq	runtime.finlock(%rip), %rcx
0000000001010d36	movq	%rcx, (%rsp)
0000000001010d3a	callq	runtime.unlock
0000000001010d3f	movq	0x8(%rsp), %rax
0000000001010d44	movq	%rax, 0x20(%rsp)
0000000001010d49	movq	0x10(%rsp), %rbp
0000000001010d4e	addq	$0x18, %rsp
0000000001010d52	retq
0000000001010d53	xorl	%eax, %eax
0000000001010d55	jmp	0x1010d2a
0000000001010d57	xorl	%eax, %eax
0000000001010d59	jmp	0x1010d2a
0000000001010d5b	callq	runtime.morestack_noctxt
0000000001010d60	jmp	runtime.wakefing
0000000001010d65	int3
0000000001010d66	int3
0000000001010d67	int3
0000000001010d68	int3
0000000001010d69	int3
0000000001010d6a	int3
0000000001010d6b	int3
0000000001010d6c	int3
0000000001010d6d	int3
0000000001010d6e	int3
0000000001010d6f	int3
runtime.(*fixalloc).alloc:
0000000001010d70	movq	%gs:0x30, %rcx
0000000001010d79	cmpq	0x10(%rcx), %rsp
0000000001010d7d	jbe	0x1010ed4
0000000001010d83	subq	$0x38, %rsp
0000000001010d87	movq	%rbp, 0x30(%rsp)
0000000001010d8c	leaq	0x30(%rsp), %rbp
0000000001010d91	movq	0x40(%rsp), %rax
0000000001010d96	movq	(%rax), %rcx
0000000001010d99	testq	%rcx, %rcx
0000000001010d9c	je	0x1010e96
0000000001010da2	movq	0x18(%rax), %rbx
0000000001010da6	testq	%rbx, %rbx
0000000001010da9	je	0x1010df2
0000000001010dab	movq	(%rbx), %rcx
0000000001010dae	movq	%rcx, 0x18(%rax)
0000000001010db2	movq	(%rax), %rcx
0000000001010db5	addq	0x30(%rax), %rcx
0000000001010db9	movq	%rcx, 0x30(%rax)
0000000001010dbd	leaq	0x40(%rax), %rcx
0000000001010dc1	cmpb	$0x0, (%rcx)
0000000001010dc4	jne	0x1010dd5
0000000001010dc6	movq	%rbx, 0x48(%rsp)
0000000001010dcb	movq	0x30(%rsp), %rbp
0000000001010dd0	addq	$0x38, %rsp
0000000001010dd4	retq
0000000001010dd5	movq	%rbx, 0x28(%rsp)
0000000001010dda	movq	(%rax), %rax
0000000001010ddd	movq	%rax, 0x8(%rsp)
0000000001010de2	movq	%rbx, (%rsp)
0000000001010de6	callq	runtime.memclrNoHeapPointers
0000000001010deb	movq	0x28(%rsp), %rbx
0000000001010df0	jmp	0x1010dc6
0000000001010df2	movl	0x28(%rax), %ebx
0000000001010df5	cmpq	%rcx, %rbx
0000000001010df8	jb	0x1010e5a
0000000001010dfa	movq	0x20(%rax), %rcx
0000000001010dfe	movq	0x8(%rax), %rdx
0000000001010e02	testq	%rdx, %rdx
0000000001010e05	jne	0x1010e37
0000000001010e07	movq	(%rax), %rdx
0000000001010e0a	addq	0x20(%rax), %rdx
0000000001010e0e	movq	%rdx, 0x20(%rax)
0000000001010e12	movl	0x28(%rax), %edx
0000000001010e15	movq	(%rax), %rbx
0000000001010e18	subl	%ebx, %edx
0000000001010e1a	movl	%edx, 0x28(%rax)
0000000001010e1d	movq	(%rax), %rdx
0000000001010e20	addq	0x30(%rax), %rdx
0000000001010e24	movq	%rdx, 0x30(%rax)
0000000001010e28	movq	%rcx, 0x48(%rsp)
0000000001010e2d	movq	0x30(%rsp), %rbp
0000000001010e32	addq	$0x38, %rsp
0000000001010e36	retq
0000000001010e37	movq	%rcx, 0x20(%rsp)
0000000001010e3c	movq	0x10(%rax), %rbx
0000000001010e40	movq	%rbx, (%rsp)
0000000001010e44	movq	%rcx, 0x8(%rsp)
0000000001010e49	movq	(%rdx), %rbx
0000000001010e4c	callq	*%rbx
0000000001010e4e	movq	0x40(%rsp), %rax
0000000001010e53	movq	0x20(%rsp), %rcx
0000000001010e58	jmp	0x1010e07
0000000001010e5a	movq	0x38(%rax), %rcx
0000000001010e5e	movq	%rcx, 0x10(%rsp)
0000000001010e63	movq	$0x4000, (%rsp)
0000000001010e6b	movq	$0x0, 0x8(%rsp)
0000000001010e74	callq	runtime.persistentalloc
0000000001010e79	movq	0x18(%rsp), %rax
0000000001010e7e	movq	0x40(%rsp), %rcx
0000000001010e83	movq	%rax, 0x20(%rcx)
0000000001010e87	movl	$0x4000, 0x28(%rcx)
0000000001010e8e	movq	%rcx, %rax
0000000001010e91	jmp	0x1010dfa
0000000001010e96	callq	runtime.printlock
0000000001010e9b	leaq	0x5dabb(%rip), %rax
0000000001010ea2	movq	%rax, (%rsp)
0000000001010ea6	movq	$0x34, 0x8(%rsp)
0000000001010eaf	callq	runtime.printstring
0000000001010eb4	callq	runtime.printunlock
0000000001010eb9	leaq	0x5b5d5(%rip), %rax
0000000001010ec0	movq	%rax, (%rsp)
0000000001010ec4	movq	$0x17, 0x8(%rsp)
0000000001010ecd	callq	runtime.throw
0000000001010ed2	ud2
0000000001010ed4	callq	runtime.morestack_noctxt
0000000001010ed9	jmp	"runtime.(*fixalloc).alloc"
0000000001010ede	int3
0000000001010edf	int3
runtime.gcinit:
0000000001010ee0	movq	%gs:0x30, %rcx
0000000001010ee9	cmpq	0x10(%rcx), %rsp
0000000001010eed	jbe	0x1010fa5
0000000001010ef3	subq	$0x18, %rsp
0000000001010ef7	movq	%rbp, 0x10(%rsp)
0000000001010efc	leaq	0x10(%rsp), %rbp
0000000001010f01	movl	$0x1, 0xad5b9(%rip)
0000000001010f0b	movsd	($f64.3fec000000000000)(%rip), %xmm0
0000000001010f13	movsd	%xmm0, 0xc6095(%rip)
0000000001010f1b	movq	runtime.heapminimum(%rip), %rax
0000000001010f22	testq	%rax, %rax
0000000001010f25	jl	0x1010f8a
0000000001010f27	xorps	%xmm0, %xmm0
0000000001010f2a	cvtsi2sdq	%rax, %xmm0
0000000001010f2f	movsd	($f64.3ffe000000000000)(%rip), %xmm1
0000000001010f37	divsd	%xmm1, %xmm0
0000000001010f3b	movsd	($f64.43e0000000000000)(%rip), %xmm1
0000000001010f43	ucomisd	%xmm0, %xmm1
0000000001010f47	jbe	0x1010f7a
0000000001010f49	cvttsd2si	%xmm0, %rax
0000000001010f4e	movq	%rax, 0xc607b(%rip)
0000000001010f55	callq	runtime.readgogc
0000000001010f5a	callq	"runtime/debug.setGCPercent"
0000000001010f5f	movabsq	$0x100000001, %rax
0000000001010f69	movq	%rax, 0xa7ed4(%rip)
0000000001010f70	movq	0x10(%rsp), %rbp
0000000001010f75	addq	$0x18, %rsp
0000000001010f79	retq
0000000001010f7a	subsd	%xmm1, %xmm0
0000000001010f7e	cvttsd2si	%xmm0, %rax
0000000001010f83	btsq	$0x3f, %rax
0000000001010f88	jmp	0x1010f4e
0000000001010f8a	movq	%rax, %rcx
0000000001010f8d	andq	$0x1, %rax
0000000001010f91	shrq	%rcx
0000000001010f94	orq	%rax, %rcx
0000000001010f97	xorps	%xmm0, %xmm0
0000000001010f9a	cvtsi2sdq	%rcx, %xmm0
0000000001010f9f	addsd	%xmm0, %xmm0
0000000001010fa3	jmp	0x1010f2f
0000000001010fa5	callq	runtime.morestack_noctxt
0000000001010faa	jmp	runtime.gcinit
0000000001010faf	int3
runtime.readgogc:
0000000001010fb0	movq	%gs:0x30, %rcx
0000000001010fb9	cmpq	0x10(%rcx), %rsp
0000000001010fbd	jbe	0x1011055
0000000001010fc3	subq	$0x28, %rsp
0000000001010fc7	movq	%rbp, 0x20(%rsp)
0000000001010fcc	leaq	0x20(%rsp), %rbp
0000000001010fd1	leaq	0x59b57(%rip), %rax
0000000001010fd8	movq	%rax, (%rsp)
0000000001010fdc	movq	$0x4, 0x8(%rsp)
0000000001010fe5	callq	runtime.gogetenv
0000000001010fea	movq	0x10(%rsp), %rax
0000000001010fef	movq	0x18(%rsp), %rcx
0000000001010ff4	cmpq	$0x3, %rcx
0000000001010ff8	jne	0x1011007
0000000001010ffa	cmpw	$0x666f, (%rax)
0000000001010fff	jne	0x1011007
0000000001011001	cmpb	$0x66, 0x2(%rax)
0000000001011005	je	0x1011043
0000000001011007	movq	%rax, (%rsp)
000000000101100b	movq	%rcx, 0x8(%rsp)
0000000001011010	callq	runtime.atoi32
0000000001011015	movl	0x10(%rsp), %eax
0000000001011019	leaq	0x14(%rsp), %rcx
000000000101101e	cmpb	$0x0, (%rcx)
0000000001011021	je	0x1011031
0000000001011023	movl	%eax, 0x30(%rsp)
0000000001011027	movq	0x20(%rsp), %rbp
000000000101102c	addq	$0x28, %rsp
0000000001011030	retq
0000000001011031	movl	$0x64, 0x30(%rsp)
0000000001011039	movq	0x20(%rsp), %rbp
000000000101103e	addq	$0x28, %rsp
0000000001011042	retq
0000000001011043	movl	$0xffffffff, 0x30(%rsp)
000000000101104b	movq	0x20(%rsp), %rbp
0000000001011050	addq	$0x28, %rsp
0000000001011054	retq
0000000001011055	callq	runtime.morestack_noctxt
000000000101105a	jmp	runtime.readgogc
000000000101105f	int3
runtime.gcenable:
0000000001011060	movq	%gs:0x30, %rcx
0000000001011069	cmpq	0x10(%rcx), %rsp
000000000101106d	jbe	0x10110e0
000000000101106f	subq	$0x28, %rsp
0000000001011073	movq	%rbp, 0x20(%rsp)
0000000001011078	leaq	0x20(%rsp), %rbp
000000000101107d	leaq	0x46a1c(%rip), %rax
0000000001011084	movq	%rax, (%rsp)
0000000001011088	movq	$0x1, 0x8(%rsp)
0000000001011091	callq	runtime.makechan
0000000001011096	movq	0x10(%rsp), %rax
000000000101109b	movq	%rax, 0x18(%rsp)
00000000010110a0	movl	$0x8, (%rsp)
00000000010110a7	leaq	0x5dcea(%rip), %rcx
00000000010110ae	movq	%rcx, 0x8(%rsp)
00000000010110b3	callq	runtime.newproc
00000000010110b8	movq	0x18(%rsp), %rax
00000000010110bd	movq	%rax, (%rsp)
00000000010110c1	movq	$0x0, 0x8(%rsp)
00000000010110ca	callq	runtime.chanrecv1
00000000010110cf	movb	$0x1, 0xc587a(%rip)
00000000010110d6	movq	0x20(%rsp), %rbp
00000000010110db	addq	$0x28, %rsp
00000000010110df	retq
00000000010110e0	callq	runtime.morestack_noctxt
00000000010110e5	jmp	runtime.gcenable
00000000010110ea	int3
00000000010110eb	int3
00000000010110ec	int3
00000000010110ed	int3
00000000010110ee	int3
00000000010110ef	int3
runtime/debug.setGCPercent:
00000000010110f0	movq	%gs:0x30, %rcx
00000000010110f9	cmpq	0x10(%rcx), %rsp
00000000010110fd	jbe	0x10111b1
0000000001011103	subq	$0x18, %rsp
0000000001011107	movq	%rbp, 0x10(%rsp)
000000000101110c	leaq	0x10(%rsp), %rbp
0000000001011111	leaq	runtime.mheap_(%rip), %rax
0000000001011118	movq	%rax, (%rsp)
000000000101111c	callq	runtime.lock
0000000001011121	movl	runtime.gcpercent(%rip), %eax
0000000001011127	movl	%eax, 0xc(%rsp)
000000000101112b	movl	0x20(%rsp), %ecx
000000000101112f	testl	%ecx, %ecx
0000000001011131	movl	$0xffffffff, %edx
0000000001011136	cmovll	%edx, %ecx
0000000001011139	movl	%ecx, 0x20(%rsp)
000000000101113d	movl	%ecx, runtime.gcpercent(%rip)
0000000001011143	movslq	%ecx, %rdx
0000000001011146	shlq	$0x16, %rdx
000000000101114a	shrq	%rdx
000000000101114d	movabsq	$-0x5c28f5c28f5c28f5, %rax
0000000001011157	mulq	%rdx
000000000101115a	shrq	$0x5, %rdx
000000000101115e	movq	%rdx, runtime.heapminimum(%rip)
0000000001011165	movsd	0xc5e43(%rip), %xmm0
000000000101116d	movsd	%xmm0, (%rsp)
0000000001011172	callq	runtime.gcSetTriggerRatio
0000000001011177	leaq	runtime.mheap_(%rip), %rax
000000000101117e	movq	%rax, (%rsp)
0000000001011182	callq	runtime.unlock
0000000001011187	movl	0x20(%rsp), %eax
000000000101118b	testl	%eax, %eax
000000000101118d	jl	0x10111a1
000000000101118f	movl	0xc(%rsp), %eax
0000000001011193	movl	%eax, 0x28(%rsp)
0000000001011197	movq	0x10(%rsp), %rbp
000000000101119c	addq	$0x18, %rsp
00000000010111a0	retq
00000000010111a1	movl	0xa7d01(%rip), %eax
00000000010111a7	movl	%eax, (%rsp)
00000000010111aa	callq	runtime.gcWaitOnMark
00000000010111af	jmp	0x101118f
00000000010111b1	callq	runtime.morestack_noctxt
00000000010111b6	jmp	"runtime/debug.setGCPercent"
00000000010111bb	int3
00000000010111bc	int3
00000000010111bd	int3
00000000010111be	int3
00000000010111bf	int3
runtime.(*gcControllerState).startCycle:
00000000010111c0	movq	%gs:0x30, %rcx
00000000010111c9	cmpq	0x10(%rcx), %rsp
00000000010111cd	jbe	0x1011536
00000000010111d3	subq	$0x48, %rsp
00000000010111d7	movq	%rbp, 0x40(%rsp)
00000000010111dc	leaq	0x40(%rsp), %rbp
00000000010111e1	xorps	%xmm0, %xmm0
00000000010111e4	movq	0x50(%rsp), %rcx
00000000010111e9	movups	%xmm0, (%rcx)
00000000010111ec	movups	%xmm0, 0x10(%rcx)
00000000010111f0	movups	%xmm0, 0x20(%rcx)
00000000010111f4	movq	0xc5dbd(%rip), %rdx
00000000010111fb	movq	runtime.heapminimum(%rip), %rbx
0000000001011202	cmpq	%rbx, %rdx
0000000001011205	ja	0x1011529
000000000101120b	testq	%rdx, %rdx
000000000101120e	jl	0x101150b
0000000001011214	xorps	%xmm1, %xmm1
0000000001011217	cvtsi2sdq	%rdx, %xmm1
000000000101121c	movsd	0xc5d8c(%rip), %xmm2
0000000001011224	movsd	($f64.3ff0000000000000)(%rip), %xmm3
000000000101122c	addsd	%xmm3, %xmm2
0000000001011230	divsd	%xmm2, %xmm1
0000000001011234	movsd	($f64.43e0000000000000)(%rip), %xmm2
000000000101123c	ucomisd	%xmm1, %xmm2
0000000001011240	jbe	0x10114f8
0000000001011246	cvttsd2si	%xmm1, %rdx
000000000101124b	movq	%rdx, 0xc5d7e(%rip)
0000000001011252	movq	0xc5d77(%rip), %rdx
0000000001011259	movslq	runtime.gcpercent(%rip), %rbx
0000000001011260	imulq	%rdx, %rbx
0000000001011264	shrq	%rbx
0000000001011267	movabsq	$-0x5c28f5c28f5c28f5, %rax
0000000001011271	movq	%rdx, %rsi
0000000001011274	mulq	%rbx
0000000001011277	shrq	$0x5, %rdx
000000000101127b	addq	%rsi, %rdx
000000000101127e	movq	%rdx, 0xc46a3(%rip)
0000000001011285	cmpl	$0x0, 0xc3868(%rip)
000000000101128c	jge	0x1011299
000000000101128e	movq	$-0x1, 0xc468f(%rip)
0000000001011299	movq	0xc4688(%rip), %rax
00000000010112a0	movq	0xc5d19(%rip), %rdx
00000000010112a7	addq	$0x100000, %rdx
00000000010112ae	cmpq	%rdx, %rax
00000000010112b1	jae	0x10112ba
00000000010112b3	movq	%rdx, 0xc466e(%rip)
00000000010112ba	movl	runtime.gomaxprocs(%rip), %eax
00000000010112c0	xorps	%xmm1, %xmm1
00000000010112c3	cvtsi2sdl	%eax, %xmm1
00000000010112c7	movsd	($f64.3fd0000000000000)(%rip), %xmm2
00000000010112cf	mulsd	%xmm2, %xmm1
00000000010112d3	movsd	($f64.3fe0000000000000)(%rip), %xmm2
00000000010112db	addsd	%xmm1, %xmm2
00000000010112df	cvttsd2si	%xmm2, %rax
00000000010112e4	movq	%rax, 0x38(%rcx)
00000000010112e8	xorps	%xmm2, %xmm2
00000000010112eb	cvtsi2sdq	%rax, %xmm2
00000000010112f0	movups	%xmm2, %xmm4
00000000010112f3	divsd	%xmm1, %xmm2
00000000010112f7	subsd	%xmm3, %xmm2
00000000010112fb	movsd	($f64.bfd3333333333333)(%rip), %xmm3
0000000001011303	ucomisd	%xmm2, %xmm3
0000000001011307	jbe	0x10114d9
000000000101130d	ucomisd	%xmm1, %xmm4
0000000001011311	jbe	0x101131a
0000000001011313	decq	%rax
0000000001011316	movq	%rax, 0x38(%rcx)
000000000101131a	movq	0x38(%rcx), %rax
000000000101131e	xorps	%xmm2, %xmm2
0000000001011321	cvtsi2sdq	%rax, %xmm2
0000000001011326	subsd	%xmm2, %xmm1
000000000101132a	movl	runtime.gomaxprocs(%rip), %eax
0000000001011330	xorps	%xmm2, %xmm2
0000000001011333	cvtsi2sdl	%eax, %xmm2
0000000001011337	divsd	%xmm2, %xmm1
000000000101133b	movsd	%xmm1, 0x50(%rcx)
0000000001011340	movq	runtime.allp(%rip), %rax
0000000001011347	movq	0xa750a(%rip), %rdx
000000000101134e	xorl	%ebx, %ebx
0000000001011350	jmp	0x1011362
0000000001011352	movq	(%rax,%rbx,8), %rsi
0000000001011356	testb	%al, (%rsi)
0000000001011358	movups	%xmm0, 0x1248(%rsi)
000000000101135f	incq	%rbx
0000000001011362	cmpq	%rdx, %rbx
0000000001011365	jl	0x1011352
0000000001011367	movq	%rcx, (%rsp)
000000000101136b	callq	"runtime.(*gcControllerState).revise"
0000000001011370	cmpl	$0x0, 0xc39b9(%rip)
0000000001011377	jg	0x1011383
0000000001011379	movq	0x40(%rsp), %rbp
000000000101137e	addq	$0x48, %rsp
0000000001011382	retq
0000000001011383	movq	0x50(%rsp), %rax
0000000001011388	movsd	0x40(%rax), %xmm0
000000000101138d	movsd	%xmm0, 0x38(%rsp)
0000000001011393	movq	0xc5c2e(%rip), %rcx
000000000101139a	movq	%rcx, 0x30(%rsp)
000000000101139f	movq	0xa7ad2(%rip), %rdx
00000000010113a6	movq	%rdx, 0x28(%rsp)
00000000010113ab	movq	0xc4576(%rip), %rbx
00000000010113b2	movq	%rbx, 0x20(%rsp)
00000000010113b7	movq	0x38(%rax), %rsi
00000000010113bb	movq	%rsi, 0x18(%rsp)
00000000010113c0	movsd	0x50(%rax), %xmm1
00000000010113c5	movsd	%xmm1, 0x10(%rsp)
00000000010113cb	callq	runtime.printlock
00000000010113d0	leaq	0x5aae1(%rip), %rax
00000000010113d7	movq	%rax, (%rsp)
00000000010113db	movq	$0x14, 0x8(%rsp)
00000000010113e4	callq	runtime.printstring
00000000010113e9	movsd	0x38(%rsp), %xmm0
00000000010113ef	movsd	%xmm0, (%rsp)
00000000010113f4	callq	runtime.printfloat
00000000010113f9	leaq	0x598a5(%rip), %rax
0000000001011400	movq	%rax, (%rsp)
0000000001011404	movq	$0x7, 0x8(%rsp)
000000000101140d	callq	runtime.printstring
0000000001011412	movq	0x30(%rsp), %rax
0000000001011417	shrq	$0x14, %rax
000000000101141b	movq	%rax, (%rsp)
000000000101141f	callq	runtime.printuint
0000000001011424	leaq	0x59888(%rip), %rax
000000000101142b	movq	%rax, (%rsp)
000000000101142f	movq	$0x7, 0x8(%rsp)
0000000001011438	callq	runtime.printstring
000000000101143d	movq	0x28(%rsp), %rax
0000000001011442	shrq	$0x14, %rax
0000000001011446	movq	%rax, (%rsp)
000000000101144a	callq	runtime.printuint
000000000101144f	leaq	0x59648(%rip), %rax
0000000001011456	movq	%rax, (%rsp)
000000000101145a	movq	$0x2, 0x8(%rsp)
0000000001011463	callq	runtime.printstring
0000000001011468	movq	0x20(%rsp), %rax
000000000101146d	shrq	$0x14, %rax
0000000001011471	movq	%rax, (%rsp)
0000000001011475	callq	runtime.printuint
000000000101147a	leaq	0x59f00(%rip), %rax
0000000001011481	movq	%rax, (%rsp)
0000000001011485	movq	$0xd, 0x8(%rsp)
000000000101148e	callq	runtime.printstring
0000000001011493	movq	0x18(%rsp), %rax
0000000001011498	movq	%rax, (%rsp)
000000000101149c	callq	runtime.printint
00000000010114a1	leaq	0x595db(%rip), %rax
00000000010114a8	movq	%rax, (%rsp)
00000000010114ac	movq	$0x1, 0x8(%rsp)
00000000010114b5	callq	runtime.printstring
00000000010114ba	movsd	0x10(%rsp), %xmm0
00000000010114c0	movsd	%xmm0, (%rsp)
00000000010114c5	callq	runtime.printfloat
00000000010114ca	callq	runtime.printnl
00000000010114cf	callq	runtime.printunlock
00000000010114d4	jmp	0x1011379
00000000010114d9	movsd	($f64.3fd3333333333333)(%rip), %xmm3
00000000010114e1	ucomisd	%xmm3, %xmm2
00000000010114e5	ja	0x101130d
00000000010114eb	xorps	%xmm1, %xmm1
00000000010114ee	movsd	%xmm1, 0x50(%rcx)
00000000010114f3	jmp	0x1011340
00000000010114f8	subsd	%xmm2, %xmm1
00000000010114fc	cvttsd2si	%xmm1, %rdx
0000000001011501	btsq	$0x3f, %rdx
0000000001011506	jmp	0x101124b
000000000101150b	movq	%rdx, %rbx
000000000101150e	shrq	%rdx
0000000001011511	andq	$0x1, %rbx
0000000001011515	orq	%rdx, %rbx
0000000001011518	xorps	%xmm1, %xmm1
000000000101151b	cvtsi2sdq	%rbx, %xmm1
0000000001011520	addsd	%xmm1, %xmm1
0000000001011524	jmp	0x101121c
0000000001011529	movsd	($f64.3ff0000000000000)(%rip), %xmm3
0000000001011531	jmp	0x1011252
0000000001011536	callq	runtime.morestack_noctxt
000000000101153b	jmp	"runtime.(*gcControllerState).startCycle"
runtime.(*gcControllerState).revise:
0000000001011540	movl	runtime.gcpercent(%rip), %eax
0000000001011546	movq	0xc5a73(%rip), %rcx
000000000101154d	movq	0xc43d4(%rip), %rdx
0000000001011554	testl	%eax, %eax
0000000001011556	movl	$0x186a0, %ebx
000000000101155b	cmovll	%ebx, %eax
000000000101155e	cmpq	%rdx, %rcx
0000000001011561	ja	0x1011604
0000000001011567	movq	0xc5a5a(%rip), %rbx
000000000101156e	testq	%rbx, %rbx
0000000001011571	jl	0x10115e6
0000000001011573	xorps	%xmm0, %xmm0
0000000001011576	cvtsi2sdq	%rbx, %xmm0
000000000101157b	movsd	($f64.4059000000000000)(%rip), %xmm1
0000000001011583	mulsd	%xmm0, %xmm1
0000000001011587	addl	$0x64, %eax
000000000101158a	xorps	%xmm0, %xmm0
000000000101158d	cvtsi2sdl	%eax, %xmm0
0000000001011591	divsd	%xmm0, %xmm1
0000000001011595	cvttsd2si	%xmm1, %rax
000000000101159a	movq	0x8(%rsp), %rbx
000000000101159f	subq	(%rbx), %rax
00000000010115a2	subq	%rcx, %rdx
00000000010115a5	cmpq	$0x3e8, %rax
00000000010115ab	movl	$0x3e8, %ecx
00000000010115b0	cmovlq	%rcx, %rax
00000000010115b4	testq	%rdx, %rdx
00000000010115b7	movl	$0x1, %ecx
00000000010115bc	cmovleq	%rcx, %rdx
00000000010115c0	xorps	%xmm0, %xmm0
00000000010115c3	cvtsi2sdq	%rdx, %xmm0
00000000010115c8	xorps	%xmm1, %xmm1
00000000010115cb	cvtsi2sdq	%rax, %xmm1
00000000010115d0	movups	%xmm1, %xmm2
00000000010115d3	divsd	%xmm0, %xmm1
00000000010115d7	movsd	%xmm1, 0x40(%rbx)
00000000010115dc	divsd	%xmm2, %xmm0
00000000010115e0	movsd	%xmm0, 0x48(%rbx)
00000000010115e5	retq
00000000010115e6	movq	%rbx, %rsi
00000000010115e9	shrq	%rbx
00000000010115ec	andq	$0x1, %rsi
00000000010115f0	orq	%rbx, %rsi
00000000010115f3	xorps	%xmm0, %xmm0
00000000010115f6	cvtsi2sdq	%rsi, %xmm0
00000000010115fb	addsd	%xmm0, %xmm0
00000000010115ff	jmp	0x101157b
0000000001011604	testq	%rdx, %rdx
0000000001011607	jl	0x101162e
0000000001011609	xorps	%xmm0, %xmm0
000000000101160c	cvtsi2sdq	%rdx, %xmm0
0000000001011611	movsd	($f64.3ff199999999999a)(%rip), %xmm1
0000000001011619	mulsd	%xmm0, %xmm1
000000000101161d	cvttsd2si	%xmm1, %rdx
0000000001011622	movq	0xc599f(%rip), %rax
0000000001011629	jmp	0x101159a
000000000101162e	movq	%rdx, %rax
0000000001011631	shrq	%rdx
0000000001011634	andq	$0x1, %rax
0000000001011638	orq	%rdx, %rax
000000000101163b	xorps	%xmm0, %xmm0
000000000101163e	cvtsi2sdq	%rax, %xmm0
0000000001011643	addsd	%xmm0, %xmm0
0000000001011647	jmp	0x1011611
0000000001011649	int3
000000000101164a	int3
000000000101164b	int3
000000000101164c	int3
000000000101164d	int3
000000000101164e	int3
000000000101164f	int3
runtime.(*gcControllerState).endCycle:
0000000001011650	movq	%gs:0x30, %rcx
0000000001011659	leaq	-0x8(%rsp), %rax
000000000101165e	cmpq	0x10(%rcx), %rax
0000000001011662	jbe	0x1011afd
0000000001011668	subq	$0x88, %rsp
000000000101166f	movq	%rbp, 0x80(%rsp)
0000000001011677	leaq	0x80(%rsp), %rbp
000000000101167f	leaq	0xa77e2(%rip), %rax
0000000001011686	cmpb	$0x0, (%rax)
0000000001011689	jne	0x1011adc
000000000101168f	movl	runtime.gcpercent(%rip), %eax
0000000001011695	movq	0xc5924(%rip), %rcx
000000000101169c	testq	%rcx, %rcx
000000000101169f	jl	0x1011abe
00000000010116a5	xorps	%xmm0, %xmm0
00000000010116a8	cvtsi2sdq	%rcx, %xmm0
00000000010116ad	movl	%eax, 0x14(%rsp)
00000000010116b1	movsd	%xmm0, 0x78(%rsp)
00000000010116b7	movq	0xc5912(%rip), %rcx
00000000010116be	testq	%rcx, %rcx
00000000010116c1	jl	0x1011aa0
00000000010116c7	xorps	%xmm1, %xmm1
00000000010116ca	cvtsi2sdq	%rcx, %xmm1
00000000010116cf	movsd	%xmm1, 0x70(%rsp)
00000000010116d5	callq	runtime.nanotime
00000000010116da	movsd	0x78(%rsp), %xmm0
00000000010116e0	movsd	0x70(%rsp), %xmm1
00000000010116e6	divsd	%xmm1, %xmm0
00000000010116ea	movq	(%rsp), %rax
00000000010116ee	movq	0x90(%rsp), %rcx
00000000010116f6	subq	0x30(%rcx), %rax
00000000010116fa	testq	%rax, %rax
00000000010116fd	jle	0x1011a93
0000000001011703	movq	0x10(%rcx), %rdx
0000000001011707	xorps	%xmm1, %xmm1
000000000101170a	cvtsi2sdq	%rdx, %xmm1
000000000101170f	movslq	runtime.gomaxprocs(%rip), %rdx
0000000001011716	imulq	%rdx, %rax
000000000101171a	xorps	%xmm2, %xmm2
000000000101171d	cvtsi2sdq	%rax, %xmm2
0000000001011722	divsd	%xmm2, %xmm1
0000000001011726	movsd	($f64.3fd0000000000000)(%rip), %xmm2
000000000101172e	addsd	%xmm1, %xmm2
0000000001011732	movl	0x14(%rsp), %eax
0000000001011736	xorps	%xmm1, %xmm1
0000000001011739	cvtsi2sdl	%eax, %xmm1
000000000101173d	movsd	($f64.4059000000000000)(%rip), %xmm3
0000000001011745	divsd	%xmm3, %xmm1
0000000001011749	movsd	($f64.3ff0000000000000)(%rip), %xmm3
0000000001011751	subsd	%xmm3, %xmm0
0000000001011755	movsd	0xc5853(%rip), %xmm4
000000000101175d	movups	%xmm1, %xmm5
0000000001011760	subsd	%xmm4, %xmm1
0000000001011764	movsd	($f64.3fd3333333333333)(%rip), %xmm6
000000000101176c	movups	%xmm2, %xmm7
000000000101176f	divsd	%xmm6, %xmm2
0000000001011773	movups	%xmm0, %xmm8
0000000001011777	subsd	%xmm4, %xmm0
000000000101177b	movups	%xmm0, %xmm9
000000000101177f	mulsd	%xmm2, %xmm0
0000000001011783	movups	%xmm1, %xmm10
0000000001011787	subsd	%xmm0, %xmm1
000000000101178b	movsd	($f64.3fe0000000000000)(%rip), %xmm0
0000000001011793	mulsd	%xmm1, %xmm0
0000000001011797	addsd	%xmm4, %xmm0
000000000101179b	movsd	%xmm0, 0x18(%rsp)
00000000010117a1	cmpl	$0x0, 0xc3588(%rip)
00000000010117a8	jle	0x1011a56
00000000010117ae	movsd	%xmm5, 0x78(%rsp)
00000000010117b4	movsd	%xmm8, 0x70(%rsp)
00000000010117bb	movsd	%xmm4, 0x68(%rsp)
00000000010117c1	movsd	%xmm10, 0x60(%rsp)
00000000010117c8	movsd	%xmm7, 0x58(%rsp)
00000000010117ce	movsd	%xmm2, 0x50(%rsp)
00000000010117d4	movsd	%xmm9, 0x48(%rsp)
00000000010117db	movq	0xc57ee(%rip), %rax
00000000010117e2	movq	%rax, 0x28(%rsp)
00000000010117e7	movq	0xc57ca(%rip), %rdx
00000000010117ee	movq	%rdx, 0x38(%rsp)
00000000010117f3	movq	0xc57c6(%rip), %rbx
00000000010117fa	movq	%rbx, 0x30(%rsp)
00000000010117ff	testq	%rax, %rax
0000000001011802	jl	0x1011a75
0000000001011808	xorps	%xmm1, %xmm1
000000000101180b	cvtsi2sdq	%rax, %xmm1
0000000001011810	movsd	%xmm1, 0x40(%rsp)
0000000001011816	movq	(%rcx), %rax
0000000001011819	movq	%rax, 0x20(%rsp)
000000000101181e	callq	runtime.printlock
0000000001011823	leaq	0x5a030(%rip), %rax
000000000101182a	movq	%rax, (%rsp)
000000000101182e	movq	$0x10, 0x8(%rsp)
0000000001011837	callq	runtime.printstring
000000000101183c	movq	0x28(%rsp), %rax
0000000001011841	movq	%rax, (%rsp)
0000000001011845	callq	runtime.printuint
000000000101184a	leaq	0x59368(%rip), %rax
0000000001011851	movq	%rax, (%rsp)
0000000001011855	movq	$0x5, 0x8(%rsp)
000000000101185e	callq	runtime.printstring
0000000001011863	movsd	0x68(%rsp), %xmm0
0000000001011869	movsd	%xmm0, (%rsp)
000000000101186e	callq	runtime.printfloat
0000000001011873	leaq	0x59312(%rip), %rax
000000000101187a	movq	%rax, (%rsp)
000000000101187e	movq	$0x5, 0x8(%rsp)
0000000001011887	callq	runtime.printstring
000000000101188c	movq	0x38(%rsp), %rax
0000000001011891	movq	%rax, (%rsp)
0000000001011895	callq	runtime.printuint
000000000101189a	leaq	0x5930e(%rip), %rax
00000000010118a1	movq	%rax, (%rsp)
00000000010118a5	movq	$0x5, 0x8(%rsp)
00000000010118ae	callq	runtime.printstring
00000000010118b3	movsd	0x70(%rsp), %xmm0
00000000010118b9	movsd	%xmm0, (%rsp)
00000000010118be	callq	runtime.printfloat
00000000010118c3	leaq	0x592c7(%rip), %rax
00000000010118ca	movq	%rax, (%rsp)
00000000010118ce	movq	$0x5, 0x8(%rsp)
00000000010118d7	callq	runtime.printstring
00000000010118dc	movq	0x30(%rsp), %rax
00000000010118e1	movq	%rax, (%rsp)
00000000010118e5	callq	runtime.printuint
00000000010118ea	leaq	0x592c3(%rip), %rax
00000000010118f1	movq	%rax, (%rsp)
00000000010118f5	movq	$0x5, 0x8(%rsp)
00000000010118fe	callq	runtime.printstring
0000000001011903	movsd	0x78(%rsp), %xmm0
0000000001011909	movsd	%xmm0, (%rsp)
000000000101190e	callq	runtime.printfloat
0000000001011913	leaq	0x5927c(%rip), %rax
000000000101191a	movq	%rax, (%rsp)
000000000101191e	movq	$0x5, 0x8(%rsp)
0000000001011927	callq	runtime.printstring
000000000101192c	movsd	($f64.3ff0000000000000)(%rip), %xmm0
0000000001011934	movsd	0x78(%rsp), %xmm1
000000000101193a	addsd	%xmm1, %xmm0
000000000101193e	movsd	0x40(%rsp), %xmm1
0000000001011944	mulsd	%xmm1, %xmm0
0000000001011948	cvttsd2si	%xmm0, %rax
000000000101194d	movq	%rax, (%rsp)
0000000001011951	callq	runtime.printint
0000000001011956	leaq	0x5927a(%rip), %rax
000000000101195d	movq	%rax, (%rsp)
0000000001011961	movq	$0x5, 0x8(%rsp)
000000000101196a	callq	runtime.printstring
000000000101196f	movsd	0x58(%rsp), %xmm0
0000000001011975	movsd	%xmm0, (%rsp)
000000000101197a	callq	runtime.printfloat
000000000101197f	leaq	0x59256(%rip), %rax
0000000001011986	movq	%rax, (%rsp)
000000000101198a	movq	$0x5, 0x8(%rsp)
0000000001011993	callq	runtime.printstring
0000000001011998	movsd	($f64.3fd3333333333333)(%rip), %xmm0
00000000010119a0	movsd	%xmm0, (%rsp)
00000000010119a5	callq	runtime.printfloat
00000000010119aa	leaq	0x591ef(%rip), %rax
00000000010119b1	movq	%rax, (%rsp)
00000000010119b5	movq	$0x5, 0x8(%rsp)
00000000010119be	callq	runtime.printstring
00000000010119c3	movq	0x20(%rsp), %rax
00000000010119c8	movq	%rax, (%rsp)
00000000010119cc	callq	runtime.printint
00000000010119d1	leaq	0x59409(%rip), %rax
00000000010119d8	movq	%rax, (%rsp)
00000000010119dc	movq	$0x8, 0x8(%rsp)
00000000010119e5	callq	runtime.printstring
00000000010119ea	movsd	0x60(%rsp), %xmm0
00000000010119f0	movsd	%xmm0, (%rsp)
00000000010119f5	callq	runtime.printfloat
00000000010119fa	leaq	0x595a7(%rip), %rax
0000000001011a01	movq	%rax, (%rsp)
0000000001011a05	movq	$0xa, 0x8(%rsp)
0000000001011a0e	callq	runtime.printstring
0000000001011a13	movsd	0x48(%rsp), %xmm0
0000000001011a19	movsd	%xmm0, (%rsp)
0000000001011a1e	callq	runtime.printfloat
0000000001011a23	leaq	0x594ed(%rip), %rax
0000000001011a2a	movq	%rax, (%rsp)
0000000001011a2e	movq	$0x9, 0x8(%rsp)
0000000001011a37	callq	runtime.printstring
0000000001011a3c	movsd	0x50(%rsp), %xmm0
0000000001011a42	movsd	%xmm0, (%rsp)
0000000001011a47	callq	runtime.printfloat
0000000001011a4c	callq	runtime.printnl
0000000001011a51	callq	runtime.printunlock
0000000001011a56	movsd	0x18(%rsp), %xmm0
0000000001011a5c	movsd	%xmm0, 0x98(%rsp)
0000000001011a65	movq	0x80(%rsp), %rbp
0000000001011a6d	addq	$0x88, %rsp
0000000001011a74	retq
0000000001011a75	movq	%rax, %rsi
0000000001011a78	andq	$0x1, %rax
0000000001011a7c	shrq	%rsi
0000000001011a7f	orq	%rsi, %rax
0000000001011a82	xorps	%xmm1, %xmm1
0000000001011a85	cvtsi2sdq	%rax, %xmm1
0000000001011a8a	addsd	%xmm1, %xmm1
0000000001011a8e	jmp	0x1011810
0000000001011a93	movsd	($f64.3fd0000000000000)(%rip), %xmm2
0000000001011a9b	jmp	0x1011732
0000000001011aa0	movq	%rcx, %rdx
0000000001011aa3	shrq	%rcx
0000000001011aa6	andq	$0x1, %rdx
0000000001011aaa	orq	%rcx, %rdx
0000000001011aad	xorps	%xmm1, %xmm1
0000000001011ab0	cvtsi2sdq	%rdx, %xmm1
0000000001011ab5	addsd	%xmm1, %xmm1
0000000001011ab9	jmp	0x10116cf
0000000001011abe	movq	%rcx, %rdx
0000000001011ac1	shrq	%rcx
0000000001011ac4	andq	$0x1, %rdx
0000000001011ac8	orq	%rcx, %rdx
0000000001011acb	xorps	%xmm0, %xmm0
0000000001011ace	cvtsi2sdq	%rdx, %xmm0
0000000001011ad3	addsd	%xmm0, %xmm0
0000000001011ad7	jmp	0x10116ad
0000000001011adc	movsd	0xc54cc(%rip), %xmm0
0000000001011ae4	movsd	%xmm0, 0x98(%rsp)
0000000001011aed	movq	0x80(%rsp), %rbp
0000000001011af5	addq	$0x88, %rsp
0000000001011afc	retq
0000000001011afd	callq	runtime.morestack_noctxt
0000000001011b02	jmp	"runtime.(*gcControllerState).endCycle"
0000000001011b07	int3
0000000001011b08	int3
0000000001011b09	int3
0000000001011b0a	int3
0000000001011b0b	int3
0000000001011b0c	int3
0000000001011b0d	int3
0000000001011b0e	int3
0000000001011b0f	int3
runtime.(*gcControllerState).enlistWorker:
0000000001011b10	subq	$0x8, %rsp
0000000001011b14	movq	%rbp, (%rsp)
0000000001011b18	leaq	(%rsp), %rbp
0000000001011b1c	movq	0x10(%rsp), %rax
0000000001011b21	cmpq	$0x0, 0x38(%rax)
0000000001011b26	jle	0x1011c7b
0000000001011b2c	cmpl	$0x1, 0xc2fc9(%rip)
0000000001011b33	jle	0x1011c72
0000000001011b39	movq	%gs:0x30, %rax
0000000001011b42	testq	%rax, %rax
0000000001011b45	je	0x1011c69
0000000001011b4b	movq	0x30(%rax), %rax
0000000001011b4f	testq	%rax, %rax
0000000001011b52	je	0x1011c69
0000000001011b58	movq	0xd0(%rax), %rax
0000000001011b5f	testq	%rax, %rax
0000000001011b62	je	0x1011c69
0000000001011b68	movl	0x8(%rax), %eax
0000000001011b6b	xorl	%ecx, %ecx
0000000001011b6d	jmp	0x1011b72
0000000001011b6f	incq	%rcx
0000000001011b72	cmpq	$0x5, %rcx
0000000001011b76	jge	0x1011c60
0000000001011b7c	movq	%gs:0x30, %rdx
0000000001011b85	movq	0x30(%rdx), %rdx
0000000001011b89	movl	runtime.gomaxprocs(%rip), %ebx
0000000001011b8f	movl	0x11c(%rdx), %esi
0000000001011b95	movl	0x120(%rdx), %edi
0000000001011b9b	movl	%edi, 0x11c(%rdx)
0000000001011ba1	movl	%esi, %r8d
0000000001011ba4	shll	$0x11, %esi
0000000001011ba7	xorl	%r8d, %esi
0000000001011baa	movl	%edi, %r8d
0000000001011bad	xorl	%esi, %edi
0000000001011baf	shrl	$0x7, %esi
0000000001011bb2	xorl	%edi, %esi
0000000001011bb4	movl	%r8d, %edi
0000000001011bb7	shrl	$0x10, %r8d
0000000001011bbb	xorl	%esi, %r8d
0000000001011bbe	movl	%r8d, 0x120(%rdx)
0000000001011bc5	leal	-0x1(%rbx), %edx
0000000001011bc8	leal	(%rdi,%r8), %ebx
0000000001011bcc	imulq	%rdx, %rbx
0000000001011bd0	shrq	$0x20, %rbx
0000000001011bd4	leal	0x1(%rbx), %edx
0000000001011bd7	cmpl	%eax, %ebx
0000000001011bd9	cmovgel	%edx, %ebx
0000000001011bdc	movslq	%ebx, %rdx
0000000001011bdf	movq	0xa6c72(%rip), %rbx
0000000001011be6	movq	runtime.allp(%rip), %rsi
0000000001011bed	cmpq	%rbx, %rdx
0000000001011bf0	jae	0x1011c84
0000000001011bf6	movq	(%rsi,%rdx,8), %rdx
0000000001011bfa	cmpl	$0x1, 0xc(%rdx)
0000000001011bfe	jne	0x1011b6f
0000000001011c04	movq	0x40(%rdx), %rdx
0000000001011c08	testq	%rdx, %rdx
0000000001011c0b	je	0x1011c1f
0000000001011c0d	movq	%gs:0x30, %rbx
0000000001011c16	movq	0x30(%rbx), %rbx
0000000001011c1a	cmpq	%rbx, %rdx
0000000001011c1d	jne	0x1011c32
0000000001011c1f	xorl	%edx, %edx
0000000001011c21	testb	%dl, %dl
0000000001011c23	je	0x1011b6f
0000000001011c29	movq	(%rsp), %rbp
0000000001011c2d	addq	$0x8, %rsp
0000000001011c31	retq
0000000001011c32	movq	0xc0(%rdx), %rbx
0000000001011c39	testq	%rbx, %rbx
0000000001011c3c	je	0x1011c46
0000000001011c3e	movq	(%rdx), %rdx
0000000001011c41	cmpq	%rdx, %rbx
0000000001011c44	jne	0x1011c4a
0000000001011c46	xorl	%edx, %edx
0000000001011c48	jmp	0x1011c21
0000000001011c4a	movb	$0x1, 0xb1(%rbx)
0000000001011c51	movq	$-0x522, 0x10(%rbx)
0000000001011c59	movl	$0x1, %edx
0000000001011c5e	jmp	0x1011c21
0000000001011c60	movq	(%rsp), %rbp
0000000001011c64	addq	$0x8, %rsp
0000000001011c68	retq
0000000001011c69	movq	(%rsp), %rbp
0000000001011c6d	addq	$0x8, %rsp
0000000001011c71	retq
0000000001011c72	movq	(%rsp), %rbp
0000000001011c76	addq	$0x8, %rsp
0000000001011c7a	retq
0000000001011c7b	movq	(%rsp), %rbp
0000000001011c7f	addq	$0x8, %rsp
0000000001011c83	retq
0000000001011c84	callq	runtime.panicindex
0000000001011c89	ud2
0000000001011c8b	int3
0000000001011c8c	int3
0000000001011c8d	int3
0000000001011c8e	int3
0000000001011c8f	int3
runtime.(*gcControllerState).findRunnableGCWorker:
0000000001011c90	movq	%gs:0x30, %rcx
0000000001011c99	cmpq	0x10(%rcx), %rsp
0000000001011c9d	jbe	0x1011ef1
0000000001011ca3	subq	$0x20, %rsp
0000000001011ca7	movq	%rbp, 0x18(%rsp)
0000000001011cac	leaq	0x18(%rsp), %rbp
0000000001011cb1	cmpl	$0x0, 0xc2e38(%rip)
0000000001011cb8	je	0x1011ed6
0000000001011cbe	movq	0x30(%rsp), %rax
0000000001011cc3	testb	%al, (%rax)
0000000001011cc5	cmpq	$0x0, 0x1258(%rax)
0000000001011ccd	je	0x1011ec3
0000000001011cd3	leaq	0x1270(%rax), %rcx
0000000001011cda	testb	%al, (%rcx)
0000000001011cdc	movq	0x1270(%rax), %rcx
0000000001011ce3	testq	%rcx, %rcx
0000000001011ce6	je	0x1011eb9
0000000001011cec	cmpq	$0x0, 0x10(%rcx)
0000000001011cf1	jne	0x1011eb2
0000000001011cf7	movq	0x1278(%rax), %rcx
0000000001011cfe	cmpq	$0x0, 0x10(%rcx)
0000000001011d03	sete	%cl
0000000001011d06	testb	%cl, %cl
0000000001011d08	je	0x1011ea8
0000000001011d0e	movq	runtime.work(%rip), %rcx
0000000001011d15	testq	%rcx, %rcx
0000000001011d18	jne	0x1011e9e
0000000001011d1e	movl	0xa70c8(%rip), %ecx
0000000001011d24	cmpl	%ecx, 0xa70be(%rip)
0000000001011d2a	jae	0x1011e97
0000000001011d30	movl	$0x1, %ecx
0000000001011d35	testb	%cl, %cl
0000000001011d37	je	0x1011e84
0000000001011d3d	movq	0x28(%rsp), %rcx
0000000001011d42	leaq	0x38(%rcx), %rdx
0000000001011d46	testb	%al, (%rdx)
0000000001011d48	cmpq	$0x0, 0x38(%rcx)
0000000001011d4d	jle	0x1011e7d
0000000001011d53	movq	$-0x1, %rdx
0000000001011d5a	lock
0000000001011d5b	xaddq	%rdx, 0x38(%rcx)
0000000001011d60	decq	%rdx
0000000001011d63	testq	%rdx, %rdx
0000000001011d66	jl	0x1011e72
0000000001011d6c	movl	$0x1, %edx
0000000001011d71	testb	%dl, %dl
0000000001011d73	je	0x1011ddd
0000000001011d75	movq	$0x0, 0x1260(%rax)
0000000001011d80	movq	0x1258(%rax), %rax
0000000001011d87	movq	%rax, 0x10(%rsp)
0000000001011d8c	movq	%rax, (%rsp)
0000000001011d90	movabsq	$0x100000004, %rcx
0000000001011d9a	movq	%rcx, 0x8(%rsp)
0000000001011d9f	callq	runtime.casgstatus
0000000001011da4	leaq	0xb2c45(%rip), %rax
0000000001011dab	cmpb	$0x0, (%rax)
0000000001011dae	jne	0x1011dc4
0000000001011db0	movq	0x10(%rsp), %rax
0000000001011db5	movq	%rax, 0x38(%rsp)
0000000001011dba	movq	0x18(%rsp), %rbp
0000000001011dbf	addq	$0x20, %rsp
0000000001011dc3	retq
0000000001011dc4	movq	0x10(%rsp), %rax
0000000001011dc9	movq	%rax, (%rsp)
0000000001011dcd	movq	$0x0, 0x8(%rsp)
0000000001011dd6	callq	runtime.traceGoUnpark
0000000001011ddb	jmp	0x1011db0
0000000001011ddd	movsd	0x50(%rcx), %xmm0
0000000001011de2	xorps	%xmm1, %xmm1
0000000001011de5	ucomisd	%xmm1, %xmm0
0000000001011de9	jne	0x1011ded
0000000001011deb	jnp	0x1011e5f
0000000001011ded	callq	runtime.nanotime
0000000001011df2	movq	(%rsp), %rax
0000000001011df6	subq	0xc3213(%rip), %rax
0000000001011dfd	testq	%rax, %rax
0000000001011e00	jle	0x1011e58
0000000001011e02	movq	0x30(%rsp), %rcx
0000000001011e07	movq	0x1250(%rcx), %rdx
0000000001011e0e	xorps	%xmm0, %xmm0
0000000001011e11	cvtsi2sdq	%rdx, %xmm0
0000000001011e16	xorps	%xmm1, %xmm1
0000000001011e19	cvtsi2sdq	%rax, %xmm1
0000000001011e1e	divsd	%xmm1, %xmm0
0000000001011e22	movq	0x28(%rsp), %rax
0000000001011e27	movsd	0x50(%rax), %xmm1
0000000001011e2c	ucomisd	%xmm1, %xmm0
0000000001011e30	ja	0x1011e45
0000000001011e32	movq	$0x1, 0x1260(%rcx)
0000000001011e3d	movq	%rcx, %rax
0000000001011e40	jmp	0x1011d80
0000000001011e45	movq	$0x0, 0x38(%rsp)
0000000001011e4e	movq	0x18(%rsp), %rbp
0000000001011e53	addq	$0x20, %rsp
0000000001011e57	retq
0000000001011e58	movq	0x30(%rsp), %rcx
0000000001011e5d	jmp	0x1011e32
0000000001011e5f	movq	$0x0, 0x38(%rsp)
0000000001011e68	movq	0x18(%rsp), %rbp
0000000001011e6d	addq	$0x20, %rsp
0000000001011e71	retq
0000000001011e72	movl	$0x1, %edx
0000000001011e77	lock
0000000001011e78	xaddq	%rdx, 0x38(%rcx)
0000000001011e7d	xorl	%edx, %edx
0000000001011e7f	jmp	0x1011d71
0000000001011e84	movq	$0x0, 0x38(%rsp)
0000000001011e8d	movq	0x18(%rsp), %rbp
0000000001011e92	addq	$0x20, %rsp
0000000001011e96	retq
0000000001011e97	xorl	%ecx, %ecx
0000000001011e99	jmp	0x1011d35
0000000001011e9e	movl	$0x1, %ecx
0000000001011ea3	jmp	0x1011d35
0000000001011ea8	movl	$0x1, %ecx
0000000001011ead	jmp	0x1011d35
0000000001011eb2	xorl	%ecx, %ecx
0000000001011eb4	jmp	0x1011d06
0000000001011eb9	movl	$0x1, %ecx
0000000001011ebe	jmp	0x1011d06
0000000001011ec3	movq	$0x0, 0x38(%rsp)
0000000001011ecc	movq	0x18(%rsp), %rbp
0000000001011ed1	addq	$0x20, %rsp
0000000001011ed5	retq
0000000001011ed6	leaq	0x5cb1f(%rip), %rax
0000000001011edd	movq	%rax, (%rsp)
0000000001011ee1	movq	$0x36, 0x8(%rsp)
0000000001011eea	callq	runtime.throw
0000000001011eef	ud2
0000000001011ef1	callq	runtime.morestack_noctxt
0000000001011ef6	jmp	"runtime.(*gcControllerState).findRunnableGCWorker"
0000000001011efb	int3
0000000001011efc	int3
0000000001011efd	int3
0000000001011efe	int3
0000000001011eff	int3
runtime.pollFractionalWorkerExit:
0000000001011f00	movq	%gs:0x30, %rcx
0000000001011f09	cmpq	0x10(%rcx), %rsp
0000000001011f0d	jbe	0x1011fab
0000000001011f13	subq	$0x10, %rsp
0000000001011f17	movq	%rbp, 0x8(%rsp)
0000000001011f1c	leaq	0x8(%rsp), %rbp
0000000001011f21	callq	runtime.nanotime
0000000001011f26	movq	(%rsp), %rax
0000000001011f2a	movq	0xc30df(%rip), %rcx
0000000001011f31	movq	%rax, %rdx
0000000001011f34	subq	%rcx, %rax
0000000001011f37	testq	%rax, %rax
0000000001011f3a	jg	0x1011f4b
0000000001011f3c	movb	$0x1, 0x18(%rsp)
0000000001011f41	movq	0x8(%rsp), %rbp
0000000001011f46	addq	$0x10, %rsp
0000000001011f4a	retq
0000000001011f4b	movq	%gs:0x30, %rcx
0000000001011f54	movq	0x30(%rcx), %rcx
0000000001011f58	movq	0xd0(%rcx), %rcx
0000000001011f5f	testb	%al, (%rcx)
0000000001011f61	movq	0x1268(%rcx), %rbx
0000000001011f68	subq	%rbx, %rdx
0000000001011f6b	addq	0x1250(%rcx), %rdx
0000000001011f72	movsd	($f64.3ff3333333333333)(%rip), %xmm0
0000000001011f7a	mulsd	0xc30ae(%rip), %xmm0
0000000001011f82	xorps	%xmm1, %xmm1
0000000001011f85	cvtsi2sdq	%rdx, %xmm1
0000000001011f8a	xorps	%xmm2, %xmm2
0000000001011f8d	cvtsi2sdq	%rax, %xmm2
0000000001011f92	divsd	%xmm2, %xmm1
0000000001011f96	ucomisd	%xmm0, %xmm1
0000000001011f9a	seta	%al
0000000001011f9d	movb	%al, 0x18(%rsp)
0000000001011fa1	movq	0x8(%rsp), %rbp
0000000001011fa6	addq	$0x10, %rsp
0000000001011faa	retq
0000000001011fab	callq	runtime.morestack_noctxt
0000000001011fb0	jmp	runtime.pollFractionalWorkerExit
0000000001011fb5	int3
0000000001011fb6	int3
0000000001011fb7	int3
0000000001011fb8	int3
0000000001011fb9	int3
0000000001011fba	int3
0000000001011fbb	int3
0000000001011fbc	int3
0000000001011fbd	int3
0000000001011fbe	int3
0000000001011fbf	int3
runtime.gcSetTriggerRatio:
0000000001011fc0	movq	%gs:0x30, %rcx
0000000001011fc9	cmpq	0x10(%rcx), %rsp
0000000001011fcd	jbe	0x10123a9
0000000001011fd3	subq	$0x48, %rsp
0000000001011fd7	movq	%rbp, 0x40(%rsp)
0000000001011fdc	leaq	0x40(%rsp), %rbp
0000000001011fe1	xorps	%xmm0, %xmm0
0000000001011fe4	movsd	0x50(%rsp), %xmm1
0000000001011fea	ucomisd	%xmm1, %xmm0
0000000001011fee	jbe	0x1012217
0000000001011ff4	xorps	%xmm1, %xmm1
0000000001011ff7	movsd	%xmm1, 0xc4fb1(%rip)
0000000001011fff	cmpl	$0x0, 0xc2aee(%rip)
0000000001012006	jl	0x101220b
000000000101200c	movq	0xc4fbd(%rip), %rcx
0000000001012013	testq	%rcx, %rcx
0000000001012016	jl	0x10121ed
000000000101201c	xorps	%xmm2, %xmm2
000000000101201f	cvtsi2sdq	%rcx, %xmm2
0000000001012024	movsd	($f64.3ff0000000000000)(%rip), %xmm3
000000000101202c	addsd	%xmm1, %xmm3
0000000001012030	mulsd	%xmm2, %xmm3
0000000001012034	movsd	($f64.43e0000000000000)(%rip), %xmm2
000000000101203c	ucomisd	%xmm3, %xmm2
0000000001012040	jbe	0x10121da
0000000001012046	cvttsd2si	%xmm3, %rcx
000000000101204b	movq	runtime.heapminimum(%rip), %rdx
0000000001012052	cmpl	$0x0, 0xac46b(%rip)
0000000001012059	je	0x101219f
000000000101205f	cmpq	%rdx, %rcx
0000000001012062	cmovbq	%rdx, %rcx
0000000001012066	testq	%rcx, %rcx
0000000001012069	jl	0x1012258
000000000101206f	movq	%rcx, 0xc4f42(%rip)
0000000001012076	movl	runtime.gcpercent(%rip), %edx
000000000101207c	testl	%edx, %edx
000000000101207e	jl	0x1012193
0000000001012084	movq	0xc4f45(%rip), %rbx
000000000101208b	movslq	%edx, %rdx
000000000101208e	imulq	%rbx, %rdx
0000000001012092	shrq	%rdx
0000000001012095	movabsq	$-0x5c28f5c28f5c28f5, %rax
000000000101209f	mulq	%rdx
00000000010120a2	shrq	$0x5, %rdx
00000000010120a6	addq	%rbx, %rdx
00000000010120a9	cmpq	%rcx, %rdx
00000000010120ac	cmovbq	%rcx, %rdx
00000000010120b0	movq	%rcx, 0x18(%rsp)
00000000010120b5	movq	%rdx, 0xc386c(%rip)
00000000010120bc	leaq	0xb292d(%rip), %rax
00000000010120c3	cmpb	$0x0, (%rax)
00000000010120c6	jne	0x1012181
00000000010120cc	cmpl	$0x0, 0xc2a25(%rip)
00000000010120d3	jne	0x1012164
00000000010120d9	cmpl	$0x0, 0xac3e4(%rip)
00000000010120e0	je	0x10120f4
00000000010120e2	movsd	%xmm0, 0xac46e(%rip)
00000000010120ea	movq	0x40(%rsp), %rbp
00000000010120ef	addq	$0x48, %rsp
00000000010120f3	retq
00000000010120f4	movq	0xc4ec5(%rip), %rax
00000000010120fb	movq	0xac43e(%rip), %rdx
0000000001012102	subq	%rax, %rcx
0000000001012105	addq	$-0x100000, %rcx
000000000101210c	movq	0xac425(%rip), %rbx
0000000001012113	subq	%rdx, %rbx
0000000001012116	cmpq	$0x2000, %rcx
000000000101211d	movl	$0x2000, %esi
0000000001012122	cmovlq	%rsi, %rcx
0000000001012126	testq	%rbx, %rbx
0000000001012129	jg	0x1012135
000000000101212b	movsd	%xmm0, 0xac425(%rip)
0000000001012133	jmp	0x10120ea
0000000001012135	xorps	%xmm0, %xmm0
0000000001012138	cvtsi2sdq	%rbx, %xmm0
000000000101213d	xorps	%xmm1, %xmm1
0000000001012140	cvtsi2sdq	%rcx, %xmm1
0000000001012145	divsd	%xmm1, %xmm0
0000000001012149	movsd	%xmm0, 0xac407(%rip)
0000000001012151	movq	%rax, 0xac3f8(%rip)
0000000001012158	leaq	0xac3e9(%rip), %rax
000000000101215f	xchgq	%rdx, (%rax)
0000000001012162	jmp	0x10120ea
0000000001012164	leaq	runtime.gcController(%rip), %rax
000000000101216b	movq	%rax, (%rsp)
000000000101216f	callq	"runtime.(*gcControllerState).revise"
0000000001012174	movq	0x18(%rsp), %rcx
0000000001012179	xorps	%xmm0, %xmm0
000000000101217c	jmp	0x10120d9
0000000001012181	callq	runtime.traceNextGC
0000000001012186	movq	0x18(%rsp), %rcx
000000000101218b	xorps	%xmm0, %xmm0
000000000101218e	jmp	0x10120cc
0000000001012193	movq	$-0x1, %rdx
000000000101219a	jmp	0x10120b0
000000000101219f	movq	0xc4e1a(%rip), %rbx
00000000010121a6	movslq	runtime.gcpercent(%rip), %rsi
00000000010121ad	shlq	$0x14, %rsi
00000000010121b1	shrq	%rsi
00000000010121b4	movabsq	$-0x5c28f5c28f5c28f5, %rax
00000000010121be	movq	%rdx, %rdi
00000000010121c1	mulq	%rsi
00000000010121c4	shrq	$0x5, %rdx
00000000010121c8	addq	%rdx, %rbx
00000000010121cb	cmpq	%rdi, %rbx
00000000010121ce	cmovaq	%rbx, %rdi
00000000010121d2	movq	%rdi, %rdx
00000000010121d5	jmp	0x101205f
00000000010121da	subsd	%xmm2, %xmm3
00000000010121de	cvttsd2si	%xmm3, %rcx
00000000010121e3	btsq	$0x3f, %rcx
00000000010121e8	jmp	0x101204b
00000000010121ed	movq	%rcx, %rdx
00000000010121f0	shrq	%rcx
00000000010121f3	andq	$0x1, %rdx
00000000010121f7	orq	%rcx, %rdx
00000000010121fa	xorps	%xmm2, %xmm2
00000000010121fd	cvtsi2sdq	%rdx, %xmm2
0000000001012202	addsd	%xmm2, %xmm2
0000000001012206	jmp	0x1012024
000000000101220b	movq	$-0x1, %rcx
0000000001012212	jmp	0x101206f
0000000001012217	movl	runtime.gcpercent(%rip), %ecx
000000000101221d	testl	%ecx, %ecx
000000000101221f	jl	0x1012253
0000000001012221	xorps	%xmm2, %xmm2
0000000001012224	cvtsi2sdl	%ecx, %xmm2
0000000001012228	movsd	($f64.3fee666666666666)(%rip), %xmm3
0000000001012230	mulsd	%xmm3, %xmm2
0000000001012234	movsd	($f64.4059000000000000)(%rip), %xmm3
000000000101223c	divsd	%xmm3, %xmm2
0000000001012240	ucomisd	%xmm2, %xmm1
0000000001012244	jbe	0x101224e
0000000001012246	movups	%xmm2, %xmm1
0000000001012249	jmp	0x1011ff7
000000000101224e	movups	%xmm1, %xmm2
0000000001012251	jmp	0x1012246
0000000001012253	movups	%xmm1, %xmm2
0000000001012256	jmp	0x1012246
0000000001012258	movsd	%xmm1, 0x50(%rsp)
000000000101225e	movq	%rdx, 0x10(%rsp)
0000000001012263	movq	0xc36be(%rip), %rax
000000000101226a	movq	%rax, 0x38(%rsp)
000000000101226f	movq	0xc4d5a(%rip), %rcx
0000000001012276	movq	%rcx, 0x30(%rsp)
000000000101227b	movq	0xc4d3e(%rip), %rdx
0000000001012282	movq	%rdx, 0x28(%rsp)
0000000001012287	movq	0xa6bea(%rip), %rbx
000000000101228e	movq	%rbx, 0x20(%rsp)
0000000001012293	callq	runtime.printlock
0000000001012298	leaq	0x5972a(%rip), %rax
000000000101229f	movq	%rax, (%rsp)
00000000010122a3	movq	$0x11, 0x8(%rsp)
00000000010122ac	callq	runtime.printstring
00000000010122b1	movq	0x38(%rsp), %rax
00000000010122b6	movq	%rax, (%rsp)
00000000010122ba	callq	runtime.printuint
00000000010122bf	leaq	0x590ef(%rip), %rax
00000000010122c6	movq	%rax, (%rsp)
00000000010122ca	movq	$0xd, 0x8(%rsp)
00000000010122d3	callq	runtime.printstring
00000000010122d8	movq	0x30(%rsp), %rax
00000000010122dd	movq	%rax, (%rsp)
00000000010122e1	callq	runtime.printuint
00000000010122e6	leaq	0x58df5(%rip), %rax
00000000010122ed	movq	%rax, (%rsp)
00000000010122f1	movq	$0xb, 0x8(%rsp)
00000000010122fa	callq	runtime.printstring
00000000010122ff	movq	0x28(%rsp), %rax
0000000001012304	movq	%rax, (%rsp)
0000000001012308	callq	runtime.printuint
000000000101230d	leaq	0x595b6(%rip), %rax
0000000001012314	movq	%rax, (%rsp)
0000000001012318	movq	$0x11, 0x8(%rsp)
0000000001012321	callq	runtime.printstring
0000000001012326	movq	0x20(%rsp), %rax
000000000101232b	movq	%rax, (%rsp)
000000000101232f	callq	runtime.printuint
0000000001012334	leaq	0x5917e(%rip), %rax
000000000101233b	movq	%rax, (%rsp)
000000000101233f	movq	$0xd, 0x8(%rsp)
0000000001012348	callq	runtime.printstring
000000000101234d	movsd	0x50(%rsp), %xmm0
0000000001012353	movsd	%xmm0, (%rsp)
0000000001012358	callq	runtime.printfloat
000000000101235d	leaq	0x58ed8(%rip), %rax
0000000001012364	movq	%rax, (%rsp)
0000000001012368	movq	$0xc, 0x8(%rsp)
0000000001012371	callq	runtime.printstring
0000000001012376	movq	0x10(%rsp), %rax
000000000101237b	movq	%rax, (%rsp)
000000000101237f	callq	runtime.printuint
0000000001012384	callq	runtime.printnl
0000000001012389	callq	runtime.printunlock
000000000101238e	leaq	0x59aab(%rip), %rax
0000000001012395	movq	%rax, (%rsp)
0000000001012399	movq	$0x14, 0x8(%rsp)
00000000010123a2	callq	runtime.throw
00000000010123a7	ud2
00000000010123a9	callq	runtime.morestack_noctxt
00000000010123ae	jmp	runtime.gcSetTriggerRatio
00000000010123b3	int3
00000000010123b4	int3
00000000010123b5	int3
00000000010123b6	int3
00000000010123b7	int3
00000000010123b8	int3
00000000010123b9	int3
00000000010123ba	int3
00000000010123bb	int3
00000000010123bc	int3
00000000010123bd	int3
00000000010123be	int3
00000000010123bf	int3
runtime.gcWaitOnMark:
00000000010123c0	movq	%gs:0x30, %rcx
00000000010123c9	cmpq	0x10(%rcx), %rsp
00000000010123cd	jbe	0x101246f
00000000010123d3	subq	$0x20, %rsp
00000000010123d7	movq	%rbp, 0x18(%rsp)
00000000010123dc	leaq	0x18(%rsp), %rbp
00000000010123e1	jmp	0x101242a
00000000010123e3	movq	%gs:0x30, %rax
00000000010123ec	movq	0xa6aad(%rip), %rcx
00000000010123f3	movq	%rcx, 0xa0(%rax)
00000000010123fa	leaq	0xa6a9f(%rip), %rcx
0000000001012401	testb	%al, (%rcx)
0000000001012403	movq	%rax, 0xa6a96(%rip)
000000000101240a	leaq	0xa6a87(%rip), %rax
0000000001012411	movq	%rax, (%rsp)
0000000001012415	movw	$0x1416, 0x8(%rsp)
000000000101241c	movq	$0x1, 0x10(%rsp)
0000000001012425	callq	runtime.goparkunlock
000000000101242a	leaq	0xa6a67(%rip), %rax
0000000001012431	movq	%rax, (%rsp)
0000000001012435	callq	runtime.lock
000000000101243a	movl	0xa6a68(%rip), %eax
0000000001012440	leal	0x1(%rax), %ecx
0000000001012443	cmpl	$0x1, 0xc26ae(%rip)
000000000101244a	cmovnel	%ecx, %eax
000000000101244d	movl	0x28(%rsp), %ecx
0000000001012451	cmpl	%ecx, %eax
0000000001012453	jbe	0x10123e3
0000000001012455	leaq	0xa6a3c(%rip), %rax
000000000101245c	movq	%rax, (%rsp)
0000000001012460	callq	runtime.unlock
0000000001012465	movq	0x18(%rsp), %rbp
000000000101246a	addq	$0x20, %rsp
000000000101246e	retq
000000000101246f	callq	runtime.morestack_noctxt
0000000001012474	jmp	runtime.gcWaitOnMark
0000000001012479	int3
000000000101247a	int3
000000000101247b	int3
000000000101247c	int3
000000000101247d	int3
000000000101247e	int3
000000000101247f	int3
runtime.gcStart:
0000000001012480	movq	%gs:0x30, %rcx
0000000001012489	cmpq	0x10(%rcx), %rsp
000000000101248d	jbe	0x10129fe
0000000001012493	subq	$0x28, %rsp
0000000001012497	movq	%rbp, 0x20(%rsp)
000000000101249c	leaq	0x20(%rsp), %rbp
00000000010124a1	movq	%gs:0x30, %rax
00000000010124aa	movq	0x30(%rax), %rcx
00000000010124ae	incl	0x100(%rcx)
00000000010124b4	movq	0x30(%rax), %rcx
00000000010124b8	testb	%al, (%rax)
00000000010124ba	movq	%gs:0x30, %rax
00000000010124c3	movq	(%rcx), %rdx
00000000010124c6	cmpq	%rdx, %rax
00000000010124c9	je	0x10129ca
00000000010124cf	movl	0x100(%rcx), %edx
00000000010124d5	cmpl	$0x1, %edx
00000000010124d8	jg	0x10129ca
00000000010124de	cmpq	$0x0, 0xf8(%rcx)
00000000010124e6	jne	0x10129ca
00000000010124ec	leal	-0x1(%rdx), %ebx
00000000010124ef	movl	%ebx, 0x100(%rcx)
00000000010124f5	cmpl	$0x1, %edx
00000000010124f8	jne	0x1012510
00000000010124fa	testb	%al, (%rax)
00000000010124fc	leaq	0xb1(%rax), %rcx
0000000001012503	cmpb	$0x0, (%rcx)
0000000001012506	je	0x1012510
0000000001012508	movq	$-0x522, 0x10(%rax)
0000000001012510	movl	0x48(%rsp), %eax
0000000001012514	movq	0x38(%rsp), %rcx
0000000001012519	jmp	0x101252f
000000000101251b	incl	0xa6453(%rip)
0000000001012521	movl	0x48(%rsp), %edx
0000000001012525	movq	0x38(%rsp), %rbx
000000000101252a	movl	%edx, %eax
000000000101252c	movq	%rbx, %rcx
000000000101252f	leaq	0xc441a(%rip), %rdx
0000000001012536	cmpb	$0x0, (%rdx)
0000000001012539	je	0x1012548
000000000101253b	cmpl	$0x0, 0xc25d2(%rip)
0000000001012542	je	0x1012921
0000000001012548	xorl	%ebx, %ebx
000000000101254a	testb	%bl, %bl
000000000101254c	je	0x101255a
000000000101254e	callq	runtime.gosweepone
0000000001012553	cmpq	$-0x1, (%rsp)
0000000001012558	jne	0x101251b
000000000101255a	leaq	0xa68e3(%rip), %rax
0000000001012561	movq	%rax, (%rsp)
0000000001012565	callq	runtime.semacquire
000000000101256a	leaq	0xc43df(%rip), %rax
0000000001012571	cmpb	$0x0, (%rax)
0000000001012574	je	0x1012583
0000000001012576	cmpl	$0x0, 0xc2597(%rip)
000000000101257d	je	0x1012878
0000000001012583	xorl	%eax, %eax
0000000001012585	testb	%al, %al
0000000001012587	je	0x101285e
000000000101258d	movq	0x38(%rsp), %rax
0000000001012592	testq	%rax, %rax
0000000001012595	jne	0x1012852
000000000101259b	movl	$0x1, %eax
00000000010125a0	movb	%al, 0xa68c2(%rip)
00000000010125a6	movq	0x30(%rsp), %rax
00000000010125ab	testq	%rax, %rax
00000000010125ae	jne	0x10125c4
00000000010125b0	movl	0xc2786(%rip), %ecx
00000000010125b6	cmpl	$0x1, %ecx
00000000010125b9	jne	0x1012841
00000000010125bf	movl	$0x1, %eax
00000000010125c4	movq	%rax, 0x30(%rsp)
00000000010125c9	leaq	runtime.worldsema(%rip), %rcx
00000000010125d0	movq	%rcx, (%rsp)
00000000010125d4	callq	runtime.semacquire
00000000010125d9	leaq	0xb2410(%rip), %rax
00000000010125e0	cmpb	$0x0, (%rax)
00000000010125e3	jne	0x1012830
00000000010125e9	movq	0x30(%rsp), %rcx
00000000010125ee	testq	%rcx, %rcx
00000000010125f1	je	0x1012826
00000000010125f7	callq	runtime.gcResetMarkState
00000000010125fc	movl	runtime.gomaxprocs(%rip), %eax
0000000001012602	movl	%eax, 0xa68a4(%rip)
0000000001012608	movl	%eax, 0xa68a2(%rip)
000000000101260e	movl	runtime.ncpu(%rip), %ecx
0000000001012614	cmpl	%ecx, %eax
0000000001012616	jle	0x101261e
0000000001012618	movl	%ecx, 0xa688e(%rip)
000000000101261e	movq	0xc499b(%rip), %rax
0000000001012625	movq	%rax, 0xa68bc(%rip)
000000000101262c	movq	$0x0, 0xa68a1(%rip)
0000000001012637	movq	0x30(%rsp), %rax
000000000101263c	movq	%rax, 0xa681d(%rip)
0000000001012643	callq	runtime.nanotime
0000000001012648	movq	(%rsp), %rax
000000000101264c	movq	%rax, 0x8(%rsp)
0000000001012651	movq	%rax, 0xa6860(%rip)
0000000001012658	movq	%rax, 0xa6881(%rip)
000000000101265f	leaq	0xb238a(%rip), %rax
0000000001012666	cmpb	$0x0, (%rax)
0000000001012669	jne	0x1012814
000000000101266f	leaq	0x5ca1a(%rip), %rax
0000000001012676	movq	%rax, (%rsp)
000000000101267a	callq	runtime.systemstack
000000000101267f	leaq	0x5c7f2(%rip), %rax
0000000001012686	movq	%rax, (%rsp)
000000000101268a	callq	runtime.systemstack
000000000101268f	callq	runtime.clearpools
0000000001012694	incl	0xa680e(%rip)
000000000101269a	movq	0x30(%rsp), %rax
000000000101269f	testq	%rax, %rax
00000000010126a2	je	0x1012715
00000000010126a4	leaq	0xb2345(%rip), %rax
00000000010126ab	cmpb	$0x0, (%rax)
00000000010126ae	jne	0x1012701
00000000010126b0	callq	runtime.nanotime
00000000010126b5	movq	(%rsp), %rax
00000000010126b9	movq	%rax, 0xa6800(%rip)
00000000010126c0	movq	%rax, 0xa6801(%rip)
00000000010126c7	movq	0xa681a(%rip), %rax
00000000010126ce	movq	%rax, 0xa682b(%rip)
00000000010126d5	movsd	0xc48d3(%rip), %xmm0
00000000010126dd	movsd	%xmm0, (%rsp)
00000000010126e2	callq	runtime.gcMarkTermination
00000000010126e7	leaq	0xa6756(%rip), %rax
00000000010126ee	movq	%rax, (%rsp)
00000000010126f2	callq	runtime.semrelease
00000000010126f7	movq	0x20(%rsp), %rbp
00000000010126fc	addq	$0x28, %rsp
0000000001012700	retq
0000000001012701	callq	runtime.traceGCSTWDone
0000000001012706	movq	$0x0, (%rsp)
000000000101270e	callq	runtime.traceGCSTWStart
0000000001012713	jmp	0x10126b0
0000000001012715	leaq	runtime.gcController(%rip), %rax
000000000101271c	movq	%rax, (%rsp)
0000000001012720	callq	"runtime.(*gcControllerState).startCycle"
0000000001012725	movq	0xc31fc(%rip), %rax
000000000101272c	movq	%rax, 0xa67cd(%rip)
0000000001012733	movl	$0x1, %eax
0000000001012738	leaq	runtime.gcphase(%rip), %rcx
000000000101273f	xchgl	%eax, (%rcx)
0000000001012741	movl	runtime.gcphase(%rip), %eax
0000000001012747	cmpl	$0x1, %eax
000000000101274a	jne	0x1012809
0000000001012750	movl	$0x1, %eax
0000000001012755	movb	%al, 0xc24d9(%rip)
000000000101275b	testb	%al, %al
000000000101275d	je	0x10127fd
0000000001012763	movl	$0x1, %eax
0000000001012768	movb	%al, runtime.writeBarrier(%rip)
000000000101276e	movl	$0xffffffff, 0xa6678(%rip)
0000000001012778	movl	$0xffffffff, 0xa667e(%rip)
0000000001012782	callq	runtime.gcMarkRootPrepare
0000000001012787	callq	runtime.gcMarkTinyAllocs
000000000101278c	movl	$0x1, %eax
0000000001012791	leaq	runtime.gcBlackenEnabled(%rip), %rcx
0000000001012798	xchgl	%eax, (%rcx)
000000000101279a	movq	0x8(%rsp), %rax
000000000101279f	movq	%rax, 0xc286a(%rip)
00000000010127a6	xorps	%xmm0, %xmm0
00000000010127a9	movups	%xmm0, 0x10(%rsp)
00000000010127ae	leaq	runtime.gcStart.func2(%rip), %rax
00000000010127b5	movq	%rax, 0x10(%rsp)
00000000010127ba	leaq	0x8(%rsp), %rax
00000000010127bf	movq	%rax, 0x18(%rsp)
00000000010127c4	leaq	0x10(%rsp), %rax
00000000010127c9	movq	%rax, (%rsp)
00000000010127cd	callq	runtime.systemstack
00000000010127d2	movq	0x8(%rsp), %rax
00000000010127d7	subq	0xa6702(%rip), %rax
00000000010127de	addq	0xa66f3(%rip), %rax
00000000010127e5	movq	%rax, 0xa66ec(%rip)
00000000010127ec	movq	0x8(%rsp), %rax
00000000010127f1	movq	%rax, 0xa66c8(%rip)
00000000010127f8	jmp	0x10126e7
00000000010127fd	movzbl	0xc2431(%rip), %eax
0000000001012804	jmp	0x1012768
0000000001012809	cmpl	$0x2, %eax
000000000101280c	sete	%al
000000000101280f	jmp	0x1012755
0000000001012814	movq	$0x1, (%rsp)
000000000101281c	callq	runtime.traceGCSTWStart
0000000001012821	jmp	0x101266f
0000000001012826	callq	runtime.gcBgMarkStartWorkers
000000000101282b	jmp	0x10125f7
0000000001012830	callq	runtime.traceGCStart
0000000001012835	leaq	0xb21b4(%rip), %rax
000000000101283c	jmp	0x10125e9
0000000001012841	cmpl	$0x2, %ecx
0000000001012844	movl	$0x2, %ecx
0000000001012849	cmoveq	%rcx, %rax
000000000101284d	jmp	0x10125c4
0000000001012852	cmpq	$0x3, %rax
0000000001012856	sete	%al
0000000001012859	jmp	0x10125a0
000000000101285e	leaq	0xa65df(%rip), %rax
0000000001012865	movq	%rax, (%rsp)
0000000001012869	callq	runtime.semrelease
000000000101286e	movq	0x20(%rsp), %rbp
0000000001012873	addq	$0x28, %rsp
0000000001012877	retq
0000000001012878	movq	0x38(%rsp), %rax
000000000101287d	testq	%rax, %rax
0000000001012880	jne	0x101288c
0000000001012882	movl	$0x1, %eax
0000000001012887	jmp	0x1012585
000000000101288c	cmpl	$0x0, 0xc2265(%rip)
0000000001012893	je	0x101289c
0000000001012895	xorl	%eax, %eax
0000000001012897	jmp	0x1012585
000000000101289c	cmpq	$0x1, %rax
00000000010128a0	jne	0x10128ba
00000000010128a2	movq	0xc470f(%rip), %rcx
00000000010128a9	cmpq	%rcx, 0xc4710(%rip)
00000000010128b0	setae	%cl
00000000010128b3	movl	%ecx, %eax
00000000010128b5	jmp	0x1012585
00000000010128ba	cmpq	$0x2, %rax
00000000010128be	jne	0x10128f9
00000000010128c0	cmpl	$0x0, 0xc222d(%rip)
00000000010128c7	jge	0x10128d0
00000000010128c9	xorl	%eax, %eax
00000000010128cb	jmp	0x1012585
00000000010128d0	movq	0xc46c9(%rip), %rcx
00000000010128d7	testq	%rcx, %rcx
00000000010128da	je	0x10128f5
00000000010128dc	movq	0x40(%rsp), %rdx
00000000010128e1	subq	%rcx, %rdx
00000000010128e4	cmpq	%rdx, runtime.forcegcperiod(%rip)
00000000010128eb	setl	%cl
00000000010128ee	movl	%ecx, %eax
00000000010128f0	jmp	0x1012585
00000000010128f5	xorl	%ecx, %ecx
00000000010128f7	jmp	0x10128ee
00000000010128f9	cmpq	$0x3, %rax
00000000010128fd	jne	0x1012917
00000000010128ff	movl	0xa65a3(%rip), %ecx
0000000001012905	movl	0x48(%rsp), %edx
0000000001012909	subl	%ecx, %edx
000000000101290b	testl	%edx, %edx
000000000101290d	setg	%cl
0000000001012910	movl	%ecx, %eax
0000000001012912	jmp	0x1012585
0000000001012917	movl	$0x1, %eax
000000000101291c	jmp	0x1012585
0000000001012921	testq	%rcx, %rcx
0000000001012924	jne	0x1012930
0000000001012926	movl	$0x1, %ebx
000000000101292b	jmp	0x101254a
0000000001012930	cmpl	$0x0, 0xc21c1(%rip)
0000000001012937	je	0x1012940
0000000001012939	xorl	%ebx, %ebx
000000000101293b	jmp	0x101254a
0000000001012940	cmpq	$0x1, %rcx
0000000001012944	jne	0x101295c
0000000001012946	movq	0xc466b(%rip), %rsi
000000000101294d	cmpq	%rsi, 0xc466c(%rip)
0000000001012954	setae	%bl
0000000001012957	jmp	0x101254a
000000000101295c	cmpq	$0x2, %rcx
0000000001012960	jne	0x10129a4
0000000001012962	cmpl	$0x0, 0xc218b(%rip)
0000000001012969	jge	0x1012972
000000000101296b	xorl	%ebx, %ebx
000000000101296d	jmp	0x101254a
0000000001012972	movq	0xc4627(%rip), %rbx
0000000001012979	testq	%rbx, %rbx
000000000101297c	je	0x1012998
000000000101297e	movq	0x40(%rsp), %rsi
0000000001012983	movq	%rsi, %rdi
0000000001012986	subq	%rbx, %rsi
0000000001012989	cmpq	%rsi, runtime.forcegcperiod(%rip)
0000000001012990	setl	%bl
0000000001012993	jmp	0x101254a
0000000001012998	movq	0x40(%rsp), %rdi
000000000101299d	xorl	%ebx, %ebx
000000000101299f	jmp	0x101254a
00000000010129a4	cmpq	$0x3, %rcx
00000000010129a8	jne	0x10129c0
00000000010129aa	movl	0xa64f8(%rip), %esi
00000000010129b0	movl	%eax, %edi
00000000010129b2	subl	%esi, %eax
00000000010129b4	testl	%eax, %eax
00000000010129b6	setg	%bl
00000000010129b9	movl	%edi, %eax
00000000010129bb	jmp	0x101254a
00000000010129c0	movl	$0x1, %ebx
00000000010129c5	jmp	0x101254a
00000000010129ca	movl	0x100(%rcx), %edx
00000000010129d0	leal	-0x1(%rdx), %ebx
00000000010129d3	movl	%ebx, 0x100(%rcx)
00000000010129d9	cmpl	$0x1, %edx
00000000010129dc	jne	0x10129f4
00000000010129de	testb	%al, (%rax)
00000000010129e0	leaq	0xb1(%rax), %rcx
00000000010129e7	cmpb	$0x0, (%rcx)
00000000010129ea	je	0x10129f4
00000000010129ec	movq	$-0x522, 0x10(%rax)
00000000010129f4	movq	0x20(%rsp), %rbp
00000000010129f9	addq	$0x28, %rsp
00000000010129fd	retq
00000000010129fe	callq	runtime.morestack_noctxt
0000000001012a03	jmp	runtime.gcStart
0000000001012a08	int3
0000000001012a09	int3
0000000001012a0a	int3
0000000001012a0b	int3
0000000001012a0c	int3
0000000001012a0d	int3
0000000001012a0e	int3
0000000001012a0f	int3
runtime.gcMarkDone:
0000000001012a10	movq	%gs:0x30, %rcx
0000000001012a19	cmpq	0x10(%rcx), %rsp
0000000001012a1d	jbe	0x1012c85
0000000001012a23	subq	$0x20, %rsp
0000000001012a27	movq	%rbp, 0x18(%rsp)
0000000001012a2c	leaq	0x18(%rsp), %rbp
0000000001012a31	leaq	0xa6410(%rip), %rax
0000000001012a38	movq	%rax, (%rsp)
0000000001012a3c	callq	runtime.semacquire
0000000001012a41	cmpl	$0x1, 0xc20b0(%rip)
0000000001012a48	jne	0x1012c5a
0000000001012a4e	movl	0xa639c(%rip), %eax
0000000001012a54	cmpl	%eax, 0xa63a6(%rip)
0000000001012a5a	jne	0x1012c5a
0000000001012a60	movq	runtime.work(%rip), %rax
0000000001012a67	testq	%rax, %rax
0000000001012a6a	jne	0x1012c7b
0000000001012a70	movl	0xa6376(%rip), %eax
0000000001012a76	cmpl	%eax, 0xa636c(%rip)
0000000001012a7c	jae	0x1012c74
0000000001012a82	movl	$0x1, %eax
0000000001012a87	testb	%al, %al
0000000001012a89	jne	0x1012c5a
0000000001012a8f	movabsq	$-0xffffffff, %rax
0000000001012a99	leaq	0xc2578(%rip), %rcx
0000000001012aa0	lock
0000000001012aa1	xaddq	%rax, (%rcx)
0000000001012aa5	movsd	0xc2583(%rip), %xmm0
0000000001012aad	xorps	%xmm1, %xmm1
0000000001012ab0	movsd	%xmm1, 0xc2578(%rip)
0000000001012ab8	leaq	runtime.gcBlackenPromptly(%rip), %rax
0000000001012abf	cmpb	$0x0, (%rax)
0000000001012ac2	jne	0x1012b81
0000000001012ac8	movsd	%xmm0, 0x10(%rsp)
0000000001012ace	movb	$0x1, runtime.fingwake(%rip)
0000000001012ad5	movl	$0xffffffff, %eax
0000000001012ada	leaq	0xa631f(%rip), %rcx
0000000001012ae1	lock
0000000001012ae2	xaddl	%eax, (%rcx)
0000000001012ae5	leaq	0xa635c(%rip), %rax
0000000001012aec	movq	%rax, (%rsp)
0000000001012af0	callq	runtime.semrelease
0000000001012af5	leaq	0x5c36c(%rip), %rax
0000000001012afc	movq	%rax, (%rsp)
0000000001012b00	callq	runtime.systemstack
0000000001012b05	callq	runtime.gcMarkRootCheck
0000000001012b0a	movl	$0xffffffff, %eax
0000000001012b0f	leaq	0xc2502(%rip), %rcx
0000000001012b16	lock
0000000001012b17	xaddq	%rax, (%rcx)
0000000001012b1b	movsd	0x10(%rsp), %xmm0
0000000001012b21	movsd	%xmm0, 0xc2507(%rip)
0000000001012b29	movl	$0x1, %eax
0000000001012b2e	leaq	0xa62cb(%rip), %rcx
0000000001012b35	lock
0000000001012b36	xaddl	%eax, (%rcx)
0000000001012b39	incl	%eax
0000000001012b3b	movl	0xa62af(%rip), %ecx
0000000001012b41	cmpl	%eax, %ecx
0000000001012b43	jne	0x1012b6c
0000000001012b45	movq	runtime.work(%rip), %rax
0000000001012b4c	testq	%rax, %rax
0000000001012b4f	jne	0x1012b7a
0000000001012b51	movl	0xa6295(%rip), %eax
0000000001012b57	cmpl	%eax, 0xa628b(%rip)
0000000001012b5d	jae	0x1012b76
0000000001012b5f	movl	$0x1, %eax
0000000001012b64	testb	%al, %al
0000000001012b66	je	0x1012a31
0000000001012b6c	movq	0x18(%rsp), %rbp
0000000001012b71	addq	$0x20, %rsp
0000000001012b75	retq
0000000001012b76	xorl	%eax, %eax
0000000001012b78	jmp	0x1012b64
0000000001012b7a	movl	$0x1, %eax
0000000001012b7f	jmp	0x1012b64
0000000001012b81	callq	runtime.nanotime
0000000001012b86	movq	(%rsp), %rax
0000000001012b8a	movq	%rax, 0xa6337(%rip)
0000000001012b91	movq	%rax, 0xa6348(%rip)
0000000001012b98	movq	%gs:0x30, %rax
0000000001012ba1	movq	0x30(%rax), %rax
0000000001012ba5	movq	$0x5, 0xf8(%rax)
0000000001012bb0	cmpl	$0x0, 0xc2079(%rip)
0000000001012bb7	jne	0x1012c42
0000000001012bbd	leaq	0x58045(%rip), %rcx
0000000001012bc4	movq	%rcx, 0xf0(%rax)
0000000001012bcb	leaq	0xb1e1e(%rip), %rax
0000000001012bd2	cmpb	$0x0, (%rax)
0000000001012bd5	jne	0x1012c33
0000000001012bd7	leaq	0x5c4b2(%rip), %rax
0000000001012bde	movq	%rax, (%rsp)
0000000001012be2	callq	runtime.systemstack
0000000001012be7	movb	$0x1, 0xa6252(%rip)
0000000001012bee	xorl	%eax, %eax
0000000001012bf0	leaq	runtime.gcBlackenEnabled(%rip), %rcx
0000000001012bf7	xchgl	%eax, (%rcx)
0000000001012bf9	callq	runtime.gcWakeAllAssists
0000000001012bfe	leaq	0xa6243(%rip), %rax
0000000001012c05	movq	%rax, (%rsp)
0000000001012c09	callq	runtime.semrelease
0000000001012c0e	leaq	runtime.gcController(%rip), %rax
0000000001012c15	movq	%rax, (%rsp)
0000000001012c19	callq	"runtime.(*gcControllerState).endCycle"
0000000001012c1e	movsd	0x8(%rsp), %xmm0
0000000001012c24	movsd	%xmm0, (%rsp)
0000000001012c29	callq	runtime.gcMarkTermination
0000000001012c2e	jmp	0x1012b6c
0000000001012c33	movq	$0x0, (%rsp)
0000000001012c3b	callq	runtime.traceGCSTWStart
0000000001012c40	jmp	0x1012bd7
0000000001012c42	leaq	0xf0(%rax), %rdi
0000000001012c49	leaq	0x57fb9(%rip), %rax
0000000001012c50	callq	runtime.gcWriteBarrier
0000000001012c55	jmp	0x1012bcb
0000000001012c5a	leaq	0xa61e7(%rip), %rax
0000000001012c61	movq	%rax, (%rsp)
0000000001012c65	callq	runtime.semrelease
0000000001012c6a	movq	0x18(%rsp), %rbp
0000000001012c6f	addq	$0x20, %rsp
0000000001012c73	retq
0000000001012c74	xorl	%eax, %eax
0000000001012c76	jmp	0x1012a87
0000000001012c7b	movl	$0x1, %eax
0000000001012c80	jmp	0x1012a87
0000000001012c85	callq	runtime.morestack_noctxt
0000000001012c8a	jmp	runtime.gcMarkDone
0000000001012c8f	int3
runtime.gcMarkTermination:
0000000001012c90	movq	%gs:0x30, %rcx
0000000001012c99	leaq	-0x148(%rsp), %rax
0000000001012ca1	cmpq	0x10(%rcx), %rax
0000000001012ca5	jbe	0x10137b8
0000000001012cab	subq	$0x1c8, %rsp
0000000001012cb2	movq	%rbp, 0x1c0(%rsp)
0000000001012cba	leaq	0x1c0(%rsp), %rbp
0000000001012cc2	xorl	%eax, %eax
0000000001012cc4	leaq	runtime.gcBlackenEnabled(%rip), %rcx
0000000001012ccb	xchgl	%eax, (%rcx)
0000000001012ccd	movb	$0x0, runtime.fingwake(%rip)
0000000001012cd4	movl	$0x2, %eax
0000000001012cd9	leaq	runtime.gcphase(%rip), %rcx
0000000001012ce0	xchgl	%eax, (%rcx)
0000000001012ce2	movl	runtime.gcphase(%rip), %eax
0000000001012ce8	cmpl	$0x1, %eax
0000000001012ceb	jne	0x1013792
0000000001012cf1	movl	$0x1, %eax
0000000001012cf6	movb	%al, 0xc1f38(%rip)
0000000001012cfc	testb	%al, %al
0000000001012cfe	je	0x1013786
0000000001012d04	movl	$0x1, %eax
0000000001012d09	movb	%al, runtime.writeBarrier(%rip)
0000000001012d0f	movq	0xc42aa(%rip), %rax
0000000001012d16	movq	%rax, 0xa61d3(%rip)
0000000001012d1d	callq	runtime.nanotime
0000000001012d22	movq	(%rsp), %rax
0000000001012d26	movq	%rax, 0x48(%rsp)
0000000001012d2b	movq	%gs:0x30, %rax
0000000001012d34	movq	0x30(%rax), %rcx
0000000001012d38	incl	0x100(%rcx)
0000000001012d3e	movq	0x30(%rax), %rcx
0000000001012d42	movq	%rcx, 0x178(%rsp)
0000000001012d4a	testb	%al, (%rax)
0000000001012d4c	movq	$0x5, 0xf8(%rcx)
0000000001012d57	leaq	0xf0(%rcx), %rdi
0000000001012d5e	movq	%rdi, 0x198(%rsp)
0000000001012d66	cmpl	$0x0, 0xc1ec3(%rip)
0000000001012d6d	jne	0x1013775
0000000001012d73	leaq	0x57e8f(%rip), %rax
0000000001012d7a	movq	%rax, 0xf0(%rcx)
0000000001012d81	movq	%gs:0x30, %rax
0000000001012d8a	movq	%rax, 0x188(%rsp)
0000000001012d92	movq	0x30(%rax), %rcx
0000000001012d96	movb	$0x2, 0x125(%rcx)
0000000001012d9d	movq	0x30(%rax), %rcx
0000000001012da1	movq	0xc0(%rcx), %rcx
0000000001012da8	movq	%rcx, 0x180(%rsp)
0000000001012db0	movq	%rcx, (%rsp)
0000000001012db4	movabsq	$0x400000002, %rdx
0000000001012dbe	movq	%rdx, 0x8(%rsp)
0000000001012dc3	callq	runtime.casgstatus
0000000001012dc8	movq	0x180(%rsp), %rax
0000000001012dd0	movb	$0x6, 0xb0(%rax)
0000000001012dd7	xorps	%xmm0, %xmm0
0000000001012dda	movups	%xmm0, 0x1b0(%rsp)
0000000001012de2	leaq	runtime.gcMarkTermination.func1(%rip), %rcx
0000000001012de9	movq	%rcx, 0x1b0(%rsp)
0000000001012df1	leaq	0x48(%rsp), %rcx
0000000001012df6	movq	%rcx, 0x1b8(%rsp)
0000000001012dfe	leaq	0x1b0(%rsp), %rdx
0000000001012e06	movq	%rdx, (%rsp)
0000000001012e0a	callq	runtime.systemstack
0000000001012e0f	xorps	%xmm0, %xmm0
0000000001012e12	movups	%xmm0, 0x1a0(%rsp)
0000000001012e1a	leaq	runtime.gcMarkTermination.func2(%rip), %rax
0000000001012e21	movq	%rax, 0x1a0(%rsp)
0000000001012e29	leaq	0x48(%rsp), %rax
0000000001012e2e	movq	%rax, 0x1a8(%rsp)
0000000001012e36	leaq	0x1a0(%rsp), %rax
0000000001012e3e	movq	%rax, (%rsp)
0000000001012e42	callq	runtime.systemstack
0000000001012e47	movq	0x188(%rsp), %rax
0000000001012e4f	movq	0x30(%rax), %rax
0000000001012e53	movb	$0x0, 0x125(%rax)
0000000001012e5a	movq	0x180(%rsp), %rax
0000000001012e62	movq	%rax, (%rsp)
0000000001012e66	movabsq	$0x200000004, %rax
0000000001012e70	movq	%rax, 0x8(%rsp)
0000000001012e75	callq	runtime.casgstatus
0000000001012e7a	leaq	0xb1b6f(%rip), %rax
0000000001012e81	cmpb	$0x0, (%rax)
0000000001012e84	jne	0x101376b
0000000001012e8a	movq	0x178(%rsp), %rcx
0000000001012e92	movq	$0x0, 0xf8(%rcx)
0000000001012e9d	cmpl	$0x0, 0xc1d8c(%rip)
0000000001012ea4	jne	0x1013757
0000000001012eaa	movq	$0x0, 0xf0(%rcx)
0000000001012eb5	cmpl	$0x0, 0xc1c3c(%rip)
0000000001012ebc	jne	0x101379d
0000000001012ec2	movsd	0x1d0(%rsp), %xmm0
0000000001012ecb	movsd	%xmm0, (%rsp)
0000000001012ed0	callq	runtime.gcSetTriggerRatio
0000000001012ed5	callq	runtime.nanotime
0000000001012eda	movq	(%rsp), %rax
0000000001012ede	movq	%rax, 0x68(%rsp)
0000000001012ee3	callq	time.now
0000000001012ee8	movq	(%rsp), %rax
0000000001012eec	movslq	0x8(%rsp), %rcx
0000000001012ef1	movq	0xa5fe8(%rip), %rdx
0000000001012ef8	movq	0x68(%rsp), %rbx
0000000001012efd	movq	%rbx, %rsi
0000000001012f00	subq	%rdx, %rbx
0000000001012f03	addq	0xa5fce(%rip), %rbx
0000000001012f0a	movq	%rbx, 0xa5fc7(%rip)
0000000001012f11	movq	%rsi, 0xa5fb8(%rip)
0000000001012f18	imulq	$0x3b9aca00, %rax, %rax
0000000001012f1f	addq	%rcx, %rax
0000000001012f22	leaq	0xc2a07(%rip), %rcx
0000000001012f29	movq	%rax, %rdx
0000000001012f2c	xchgq	%rax, (%rcx)
0000000001012f2f	leaq	0xc406a(%rip), %rax
0000000001012f36	movq	%rsi, %rcx
0000000001012f39	xchgq	%rsi, (%rax)
0000000001012f3c	movzbl	0xc39fd(%rip), %eax
0000000001012f43	movq	0xa5f8e(%rip), %rbx
0000000001012f4a	leaq	0xc29ef(%rip), %rsi
0000000001012f51	movq	%rbx, (%rsi,%rax,8)
0000000001012f55	movzbl	0xc39e4(%rip), %eax
0000000001012f5c	leaq	0xc31dd(%rip), %rbx
0000000001012f63	movq	%rdx, (%rbx,%rax,8)
0000000001012f67	movq	0xc29ca(%rip), %rax
0000000001012f6e	addq	0xa5f63(%rip), %rax
0000000001012f75	movq	%rax, 0xc29bc(%rip)
0000000001012f7c	movslq	0xa5f29(%rip), %rax
0000000001012f83	movq	0xa5f36(%rip), %rdx
0000000001012f8a	subq	0xa5f27(%rip), %rdx
0000000001012f91	imulq	%rax, %rdx
0000000001012f95	movq	%rdx, 0x40(%rsp)
0000000001012f9a	movq	0xc2057(%rip), %rbx
0000000001012fa1	addq	0xc2048(%rip), %rbx
0000000001012fa8	addq	0xc2051(%rip), %rbx
0000000001012faf	movq	0xa5f1a(%rip), %rsi
0000000001012fb6	subq	0xa5f0b(%rip), %rsi
0000000001012fbd	imulq	%rsi, %rax
0000000001012fc1	movq	%rax, 0x70(%rsp)
0000000001012fc6	addq	%rdx, %rbx
0000000001012fc9	addq	%rax, %rbx
0000000001012fcc	addq	0xa5e9d(%rip), %rbx
0000000001012fd3	movq	%rbx, 0xa5e96(%rip)
0000000001012fda	movq	0xa5bd7(%rip), %rsi
0000000001012fe1	subq	%rsi, %rcx
0000000001012fe4	movslq	runtime.gomaxprocs(%rip), %rsi
0000000001012feb	imulq	%rcx, %rsi
0000000001012fef	addq	0xa5bca(%rip), %rsi
0000000001012ff6	xorps	%xmm0, %xmm0
0000000001012ff9	cvtsi2sdq	%rbx, %xmm0
0000000001012ffe	xorps	%xmm1, %xmm1
0000000001013001	cvtsi2sdq	%rsi, %xmm1
0000000001013006	divsd	%xmm1, %xmm0
000000000101300a	movsd	%xmm0, 0xc3936(%rip)
0000000001013012	movq	$0x0, 0xa5957(%rip)
000000000101301d	leaq	0xa5e44(%rip), %rcx
0000000001013024	cmpb	$0x0, (%rcx)
0000000001013027	je	0x101302f
0000000001013029	incl	0xc3915(%rip)
000000000101302f	leaq	0xa5e62(%rip), %rax
0000000001013036	movq	%rax, (%rsp)
000000000101303a	callq	runtime.lock
000000000101303f	incl	0xc38fb(%rip)
0000000001013045	movq	0xa5e54(%rip), %rax
000000000101304c	movq	%rax, (%rsp)
0000000001013050	callq	runtime.injectglist
0000000001013055	movq	$0x0, 0xa5e40(%rip)
0000000001013060	leaq	0xa5e31(%rip), %rax
0000000001013067	movq	%rax, (%rsp)
000000000101306b	callq	runtime.unlock
0000000001013070	callq	runtime.mProf_NextCycle
0000000001013075	leaq	0x5bdf4(%rip), %rax
000000000101307c	movq	%rax, (%rsp)
0000000001013080	callq	runtime.systemstack
0000000001013085	callq	runtime.mProf_Flush
000000000101308a	callq	runtime.prepareFreeWorkbufs
000000000101308f	leaq	0x5bdb2(%rip), %rax
0000000001013096	movq	%rax, (%rsp)
000000000101309a	callq	runtime.systemstack
000000000101309f	cmpl	$0x0, 0xc1c9a(%rip)
00000000010130a6	jle	0x10136d4
00000000010130ac	movsd	($f64.4059000000000000)(%rip), %xmm0
00000000010130b4	mulsd	0xc388c(%rip), %xmm0
00000000010130bc	movsd	%xmm0, 0xb8(%rsp)
00000000010130c5	movq	$0x0, 0xc0(%rsp)
00000000010130d1	xorps	%xmm1, %xmm1
00000000010130d4	movups	%xmm1, 0xc8(%rsp)
00000000010130dc	callq	runtime.printlock
00000000010130e1	movq	0xa5dd0(%rip), %rax
00000000010130e8	subq	runtime.runtimeInitTime(%rip), %rax
00000000010130ef	movq	%rax, %rcx
00000000010130f2	movabsq	$-0x79c842fa5093964a, %rax
00000000010130fc	mulq	%rcx
00000000010130ff	shrq	$0x13, %rdx
0000000001013103	movq	%rdx, 0x18(%rsp)
0000000001013108	leaq	0xc0(%rsp), %rax
0000000001013110	movq	%rax, (%rsp)
0000000001013114	movq	$0x18, 0x8(%rsp)
000000000101311d	movq	$0x18, 0x10(%rsp)
0000000001013126	movq	$0x3, 0x20(%rsp)
000000000101312f	callq	runtime.itoaDiv
0000000001013134	movl	0xc3806(%rip), %eax
000000000101313a	movq	%rax, 0xb0(%rsp)
0000000001013142	movq	0x38(%rsp), %rcx
0000000001013147	movq	0x30(%rsp), %rdx
000000000101314c	movq	0x28(%rsp), %rbx
0000000001013151	leaq	0x130(%rsp), %rsi
0000000001013159	movq	%rsi, (%rsp)
000000000101315d	movq	%rbx, 0x8(%rsp)
0000000001013162	movq	%rdx, 0x10(%rsp)
0000000001013167	movq	%rcx, 0x18(%rsp)
000000000101316c	callq	runtime.slicebytetostring
0000000001013171	movq	0x28(%rsp), %rax
0000000001013176	movq	%rax, 0xa8(%rsp)
000000000101317e	movq	0x20(%rsp), %rcx
0000000001013183	movq	%rcx, 0x190(%rsp)
000000000101318b	callq	runtime.printlock
0000000001013190	leaq	0x5794d(%rip), %rax
0000000001013197	movq	%rax, (%rsp)
000000000101319b	movq	$0x3, 0x8(%rsp)
00000000010131a4	callq	runtime.printstring
00000000010131a9	movq	0xb0(%rsp), %rax
00000000010131b1	movq	%rax, (%rsp)
00000000010131b5	callq	runtime.printuint
00000000010131ba	leaq	0x578d1(%rip), %rax
00000000010131c1	movq	%rax, (%rsp)
00000000010131c5	movq	$0x2, 0x8(%rsp)
00000000010131ce	callq	runtime.printstring
00000000010131d3	movq	0x190(%rsp), %rax
00000000010131db	movq	%rax, (%rsp)
00000000010131df	movq	0xa8(%rsp), %rax
00000000010131e7	movq	%rax, 0x8(%rsp)
00000000010131ec	callq	runtime.printstring
00000000010131f1	leaq	0x578b2(%rip), %rax
00000000010131f8	movq	%rax, (%rsp)
00000000010131fc	movq	$0x2, 0x8(%rsp)
0000000001013205	callq	runtime.printstring
000000000101320a	movsd	0xb8(%rsp), %xmm0
0000000001013213	cvttsd2si	%xmm0, %rax
0000000001013218	movq	%rax, (%rsp)
000000000101321c	callq	runtime.printint
0000000001013221	leaq	0x5789e(%rip), %rax
0000000001013228	movq	%rax, (%rsp)
000000000101322c	movq	$0x3, 0x8(%rsp)
0000000001013235	callq	runtime.printstring
000000000101323a	callq	runtime.printunlock
000000000101323f	movq	0xa5c72(%rip), %rax
0000000001013246	movq	$0x0, 0xd8(%rsp)
0000000001013252	xorps	%xmm0, %xmm0
0000000001013255	movups	%xmm0, 0xe0(%rsp)
000000000101325d	movq	0xa5c5c(%rip), %rcx
0000000001013264	movq	%rcx, 0xd8(%rsp)
000000000101326c	movq	0xa5c55(%rip), %rcx
0000000001013273	movq	%rcx, 0xe0(%rsp)
000000000101327b	movq	0xa5c4e(%rip), %rcx
0000000001013282	movq	%rcx, 0xe8(%rsp)
000000000101328a	xorl	%ecx, %ecx
000000000101328c	jmp	0x1013341
0000000001013291	leaq	0xc0(%rsp), %rcx
0000000001013299	movq	%rcx, (%rsp)
000000000101329d	movq	$0x18, 0x8(%rsp)
00000000010132a6	movq	$0x18, 0x10(%rsp)
00000000010132af	subq	%rax, %rdx
00000000010132b2	movq	%rdx, 0x18(%rsp)
00000000010132b7	callq	runtime.fmtNSAsMS
00000000010132bc	movq	0x20(%rsp), %rax
00000000010132c1	movq	0x28(%rsp), %rcx
00000000010132c6	movq	0x30(%rsp), %rdx
00000000010132cb	leaq	0x110(%rsp), %rbx
00000000010132d3	movq	%rbx, (%rsp)
00000000010132d7	movq	%rax, 0x8(%rsp)
00000000010132dc	movq	%rcx, 0x10(%rsp)
00000000010132e1	movq	%rdx, 0x18(%rsp)
00000000010132e6	callq	runtime.slicebytetostring
00000000010132eb	movq	0x20(%rsp), %rax
00000000010132f0	movq	%rax, 0x190(%rsp)
00000000010132f8	movq	0x28(%rsp), %rcx
00000000010132fd	movq	%rcx, 0xa8(%rsp)
0000000001013305	callq	runtime.printlock
000000000101330a	movq	0x190(%rsp), %rax
0000000001013312	movq	%rax, (%rsp)
0000000001013316	movq	0xa8(%rsp), %rax
000000000101331e	movq	%rax, 0x8(%rsp)
0000000001013323	callq	runtime.printstring
0000000001013328	callq	runtime.printunlock
000000000101332d	movq	0x80(%rsp), %rax
0000000001013335	leaq	0x1(%rax), %rcx
0000000001013339	xorps	%xmm0, %xmm0
000000000101333c	movq	0x58(%rsp), %rax
0000000001013341	cmpq	$0x3, %rcx
0000000001013345	jge	0x101339c
0000000001013347	movq	%rcx, 0x80(%rsp)
000000000101334f	movq	0xd8(%rsp,%rcx,8), %rdx
0000000001013357	movq	%rdx, 0x58(%rsp)
000000000101335c	testq	%rcx, %rcx
000000000101335f	je	0x1013291
0000000001013365	movq	%rax, 0x50(%rsp)
000000000101336a	callq	runtime.printlock
000000000101336f	leaq	0x5770d(%rip), %rax
0000000001013376	movq	%rax, (%rsp)
000000000101337a	movq	$0x1, 0x8(%rsp)
0000000001013383	callq	runtime.printstring
0000000001013388	callq	runtime.printunlock
000000000101338d	movq	0x50(%rsp), %rax
0000000001013392	movq	0x58(%rsp), %rdx
0000000001013397	jmp	0x1013291
000000000101339c	callq	runtime.printlock
00000000010133a1	leaq	0x57d71(%rip), %rax
00000000010133a8	movq	%rax, (%rsp)
00000000010133ac	movq	$0xb, 0x8(%rsp)
00000000010133b5	callq	runtime.printstring
00000000010133ba	callq	runtime.printunlock
00000000010133bf	movq	$0x0, 0x150(%rsp)
00000000010133cb	xorps	%xmm0, %xmm0
00000000010133ce	movups	%xmm0, 0x158(%rsp)
00000000010133d6	movups	%xmm0, 0x168(%rsp)
00000000010133de	movq	0x40(%rsp), %rax
00000000010133e3	movq	%rax, 0x150(%rsp)
00000000010133eb	movq	0xc1bfe(%rip), %rax
00000000010133f2	movq	%rax, 0x158(%rsp)
00000000010133fa	movq	0xc1bff(%rip), %rax
0000000001013401	addq	0xc1bf0(%rip), %rax
0000000001013408	movq	%rax, 0x160(%rsp)
0000000001013410	movq	0xc1bf1(%rip), %rax
0000000001013417	movq	%rax, 0x168(%rsp)
000000000101341f	movq	0x70(%rsp), %rax
0000000001013424	movq	%rax, 0x170(%rsp)
000000000101342c	xorl	%eax, %eax
000000000101342e	jmp	0x10134d9
0000000001013433	leaq	0xc0(%rsp), %rax
000000000101343b	movq	%rax, (%rsp)
000000000101343f	movq	$0x18, 0x8(%rsp)
0000000001013448	movq	$0x18, 0x10(%rsp)
0000000001013451	movq	0x60(%rsp), %rcx
0000000001013456	movq	%rcx, 0x18(%rsp)
000000000101345b	callq	runtime.fmtNSAsMS
0000000001013460	movq	0x30(%rsp), %rax
0000000001013465	movq	0x28(%rsp), %rcx
000000000101346a	movq	0x20(%rsp), %rdx
000000000101346f	leaq	0xf0(%rsp), %rbx
0000000001013477	movq	%rbx, (%rsp)
000000000101347b	movq	%rdx, 0x8(%rsp)
0000000001013480	movq	%rcx, 0x10(%rsp)
0000000001013485	movq	%rax, 0x18(%rsp)
000000000101348a	callq	runtime.slicebytetostring
000000000101348f	movq	0x20(%rsp), %rax
0000000001013494	movq	%rax, 0x190(%rsp)
000000000101349c	movq	0x28(%rsp), %rcx
00000000010134a1	movq	%rcx, 0xa8(%rsp)
00000000010134a9	callq	runtime.printlock
00000000010134ae	movq	0x190(%rsp), %rax
00000000010134b6	movq	%rax, (%rsp)
00000000010134ba	movq	0xa8(%rsp), %rax
00000000010134c2	movq	%rax, 0x8(%rsp)
00000000010134c7	callq	runtime.printstring
00000000010134cc	callq	runtime.printunlock
00000000010134d1	movq	0x78(%rsp), %rax
00000000010134d6	incq	%rax
00000000010134d9	cmpq	$0x5, %rax
00000000010134dd	jge	0x1013564
00000000010134e3	movq	%rax, 0x78(%rsp)
00000000010134e8	movq	0x150(%rsp,%rax,8), %rcx
00000000010134f0	movq	%rcx, 0x60(%rsp)
00000000010134f5	cmpq	$0x2, %rax
00000000010134f9	jne	0x1013523
00000000010134fb	callq	runtime.printlock
0000000001013500	leaq	0x57580(%rip), %rax
0000000001013507	movq	%rax, (%rsp)
000000000101350b	movq	$0x1, 0x8(%rsp)
0000000001013514	callq	runtime.printstring
0000000001013519	callq	runtime.printunlock
000000000101351e	jmp	0x1013433
0000000001013523	cmpq	$0x3, %rax
0000000001013527	je	0x10134fb
0000000001013529	testq	%rax, %rax
000000000101352c	je	0x1013433
0000000001013532	callq	runtime.printlock
0000000001013537	leaq	0x57545(%rip), %rax
000000000101353e	movq	%rax, (%rsp)
0000000001013542	movq	$0x1, 0x8(%rsp)
000000000101354b	callq	runtime.printstring
0000000001013550	callq	runtime.printunlock
0000000001013555	movq	0x78(%rsp), %rax
000000000101355a	movq	0x60(%rsp), %rcx
000000000101355f	jmp	0x1013433
0000000001013564	movslq	0xa5945(%rip), %rax
000000000101356b	movq	%rax, 0xa0(%rsp)
0000000001013573	movq	0xa596e(%rip), %rcx
000000000101357a	movq	%rcx, 0xb0(%rsp)
0000000001013582	movq	0xa5967(%rip), %rdx
0000000001013589	movq	%rdx, 0x98(%rsp)
0000000001013591	movq	0xa5960(%rip), %rbx
0000000001013598	movq	%rbx, 0x90(%rsp)
00000000010135a0	movq	0xa5959(%rip), %rsi
00000000010135a7	movq	%rsi, 0x88(%rsp)
00000000010135af	callq	runtime.printlock
00000000010135b4	leaq	0x57926(%rip), %rax
00000000010135bb	movq	%rax, (%rsp)
00000000010135bf	movq	$0x9, 0x8(%rsp)
00000000010135c8	callq	runtime.printstring
00000000010135cd	movq	0xb0(%rsp), %rax
00000000010135d5	shrq	$0x14, %rax
00000000010135d9	movq	%rax, (%rsp)
00000000010135dd	callq	runtime.printuint
00000000010135e2	leaq	0x574b5(%rip), %rax
00000000010135e9	movq	%rax, (%rsp)
00000000010135ed	movq	$0x2, 0x8(%rsp)
00000000010135f6	callq	runtime.printstring
00000000010135fb	movq	0x98(%rsp), %rax
0000000001013603	shrq	$0x14, %rax
0000000001013607	movq	%rax, (%rsp)
000000000101360b	callq	runtime.printuint
0000000001013610	leaq	0x57487(%rip), %rax
0000000001013617	movq	%rax, (%rsp)
000000000101361b	movq	$0x2, 0x8(%rsp)
0000000001013624	callq	runtime.printstring
0000000001013629	movq	0x90(%rsp), %rax
0000000001013631	shrq	$0x14, %rax
0000000001013635	movq	%rax, (%rsp)
0000000001013639	callq	runtime.printuint
000000000101363e	leaq	0x57556(%rip), %rax
0000000001013645	movq	%rax, (%rsp)
0000000001013649	movq	$0x5, 0x8(%rsp)
0000000001013652	callq	runtime.printstring
0000000001013657	movq	0x88(%rsp), %rax
000000000101365f	shrq	$0x14, %rax
0000000001013663	movq	%rax, (%rsp)
0000000001013667	callq	runtime.printuint
000000000101366c	leaq	0x5792b(%rip), %rax
0000000001013673	movq	%rax, (%rsp)
0000000001013677	movq	$0xa, 0x8(%rsp)
0000000001013680	callq	runtime.printstring
0000000001013685	movq	0xa0(%rsp), %rax
000000000101368d	movq	%rax, (%rsp)
0000000001013691	callq	runtime.printint
0000000001013696	leaq	0x573f7(%rip), %rax
000000000101369d	movq	%rax, (%rsp)
00000000010136a1	movq	$0x2, 0x8(%rsp)
00000000010136aa	callq	runtime.printstring
00000000010136af	callq	runtime.printunlock
00000000010136b4	leaq	0xa57ad(%rip), %rax
00000000010136bb	cmpb	$0x0, (%rax)
00000000010136be	jne	0x101372f
00000000010136c0	callq	runtime.printlock
00000000010136c5	callq	runtime.printnl
00000000010136ca	callq	runtime.printunlock
00000000010136cf	callq	runtime.printunlock
00000000010136d4	leaq	runtime.worldsema(%rip), %rax
00000000010136db	movq	%rax, (%rsp)
00000000010136df	callq	runtime.semrelease
00000000010136e4	movq	%gs:0x30, %rax
00000000010136ed	movq	0x178(%rsp), %rcx
00000000010136f5	movl	0x100(%rcx), %edx
00000000010136fb	leal	-0x1(%rdx), %ebx
00000000010136fe	movl	%ebx, 0x100(%rcx)
0000000001013704	cmpl	$0x1, %edx
0000000001013707	jne	0x101371f
0000000001013709	testb	%al, (%rax)
000000000101370b	leaq	0xb1(%rax), %rcx
0000000001013712	cmpb	$0x0, (%rcx)
0000000001013715	je	0x101371f
0000000001013717	movq	$-0x522, 0x10(%rax)
000000000101371f	movq	0x1c0(%rsp), %rbp
0000000001013727	addq	$0x1c8, %rsp
000000000101372e	retq
000000000101372f	callq	runtime.printlock
0000000001013734	leaq	0x5775e(%rip), %rax
000000000101373b	movq	%rax, (%rsp)
000000000101373f	movq	$0x9, 0x8(%rsp)
0000000001013748	callq	runtime.printstring
000000000101374d	callq	runtime.printunlock
0000000001013752	jmp	0x10136c0
0000000001013757	movq	0x198(%rsp), %rdi
000000000101375f	xorl	%eax, %eax
0000000001013761	callq	runtime.gcWriteBarrier
0000000001013766	jmp	0x1012eb5
000000000101376b	callq	runtime.traceGCDone
0000000001013770	jmp	0x1012e8a
0000000001013775	leaq	0x5748d(%rip), %rax
000000000101377c	callq	runtime.gcWriteBarrier
0000000001013781	jmp	0x1012d81
0000000001013786	movzbl	0xc14a8(%rip), %eax
000000000101378d	jmp	0x1012d09
0000000001013792	cmpl	$0x2, %eax
0000000001013795	sete	%al
0000000001013798	jmp	0x1012cf6
000000000101379d	leaq	0x5980a(%rip), %rax
00000000010137a4	movq	%rax, (%rsp)
00000000010137a8	movq	$0x1d, 0x8(%rsp)
00000000010137b1	callq	runtime.throw
00000000010137b6	ud2
00000000010137b8	callq	runtime.morestack_noctxt
00000000010137bd	jmp	runtime.gcMarkTermination
00000000010137c2	int3
00000000010137c3	int3
00000000010137c4	int3
00000000010137c5	int3
00000000010137c6	int3
00000000010137c7	int3
00000000010137c8	int3
00000000010137c9	int3
00000000010137ca	int3
00000000010137cb	int3
00000000010137cc	int3
00000000010137cd	int3
00000000010137ce	int3
00000000010137cf	int3
runtime.gcBgMarkStartWorkers:
00000000010137d0	movq	%gs:0x30, %rcx
00000000010137d9	cmpq	0x10(%rcx), %rsp
00000000010137dd	jbe	0x101388f
00000000010137e3	subq	$0x38, %rsp
00000000010137e7	movq	%rbp, 0x30(%rsp)
00000000010137ec	leaq	0x30(%rsp), %rbp
00000000010137f1	movq	0xa5060(%rip), %rax
00000000010137f8	movq	%rax, 0x20(%rsp)
00000000010137fd	movq	runtime.allp(%rip), %rcx
0000000001013804	movq	%rcx, 0x28(%rsp)
0000000001013809	xorl	%edx, %edx
000000000101380b	jmp	0x1013810
000000000101380d	incq	%rdx
0000000001013810	cmpq	%rax, %rdx
0000000001013813	jge	0x1013885
0000000001013815	movq	(%rcx,%rdx,8), %rbx
0000000001013819	testb	%al, (%rbx)
000000000101381b	cmpq	$0x0, 0x1258(%rbx)
0000000001013823	jne	0x101380d
0000000001013825	movq	%rdx, 0x18(%rsp)
000000000101382a	movq	%rbx, 0x10(%rsp)
000000000101382f	movl	$0x8, (%rsp)
0000000001013836	leaq	0x5b61b(%rip), %rax
000000000101383d	movq	%rax, 0x8(%rsp)
0000000001013842	callq	runtime.newproc
0000000001013847	leaq	0xa5602(%rip), %rax
000000000101384e	movq	%rax, (%rsp)
0000000001013852	movq	$-0x1, 0x8(%rsp)
000000000101385b	callq	runtime.notetsleepg
0000000001013860	leaq	0xa55e9(%rip), %rax
0000000001013867	testb	%al, (%rax)
0000000001013869	movq	$0x0, 0xa55dc(%rip)
0000000001013874	movq	0x20(%rsp), %rax
0000000001013879	movq	0x28(%rsp), %rcx
000000000101387e	movq	0x18(%rsp), %rdx
0000000001013883	jmp	0x101380d
0000000001013885	movq	0x30(%rsp), %rbp
000000000101388a	addq	$0x38, %rsp
000000000101388e	retq
000000000101388f	callq	runtime.morestack_noctxt
0000000001013894	jmp	runtime.gcBgMarkStartWorkers
0000000001013899	int3
000000000101389a	int3
000000000101389b	int3
000000000101389c	int3
000000000101389d	int3
000000000101389e	int3
000000000101389f	int3
runtime.gcBgMarkWorker:
00000000010138a0	movq	%gs:0x30, %rcx
00000000010138a9	cmpq	0x10(%rcx), %rsp
00000000010138ad	jbe	0x1013d6d
00000000010138b3	subq	$0x70, %rsp
00000000010138b7	movq	%rbp, 0x68(%rsp)
00000000010138bc	leaq	0x68(%rsp), %rbp
00000000010138c1	movq	%gs:0x30, %rcx
00000000010138ca	movq	%rcx, 0x40(%rsp)
00000000010138cf	movq	0x30(%rcx), %rdx
00000000010138d3	movq	$0xe, 0xf8(%rdx)
00000000010138de	cmpl	$0x0, 0xc134b(%rip)
00000000010138e5	jne	0x1013c0b
00000000010138eb	leaq	0x57c6a(%rip), %rax
00000000010138f2	movq	%rax, 0xf0(%rdx)
00000000010138f9	leaq	0x4b5a0(%rip), %rax
0000000001013900	movq	%rax, (%rsp)
0000000001013904	callq	runtime.newobject
0000000001013909	movq	0x40(%rsp), %rax
000000000101390e	movq	0x30(%rax), %rcx
0000000001013912	movq	0x8(%rsp), %rdx
0000000001013917	movq	$0x0, 0xf8(%rcx)
0000000001013922	cmpl	$0x0, 0xc1307(%rip)
0000000001013929	jne	0x1013bf8
000000000101392f	movq	$0x0, 0xf0(%rcx)
000000000101393a	movq	%rdx, 0x48(%rsp)
000000000101393f	movq	%gs:0x30, %rax
0000000001013948	movq	0x30(%rax), %rcx
000000000101394c	incl	0x100(%rcx)
0000000001013952	movq	0x30(%rax), %rax
0000000001013956	movq	%rax, (%rdx)
0000000001013959	movq	0x78(%rsp), %rax
000000000101395e	movq	%rax, 0x8(%rdx)
0000000001013962	leaq	0xa54e7(%rip), %rax
0000000001013969	movq	%rax, (%rsp)
000000000101396d	callq	runtime.notewakeup
0000000001013972	leaq	0x5b4d7(%rip), %rax
0000000001013979	movq	%rax, (%rsp)
000000000101397d	movq	0x48(%rsp), %rcx
0000000001013982	movq	%rcx, 0x8(%rsp)
0000000001013987	movw	$0x1417, 0x10(%rsp)
000000000101398e	movq	$0x0, 0x18(%rsp)
0000000001013997	callq	runtime.gopark
000000000101399c	movq	0x78(%rsp), %rax
00000000010139a1	testb	%al, (%rax)
00000000010139a3	movq	0x1258(%rax), %rcx
00000000010139aa	movq	0x40(%rsp), %rdx
00000000010139af	cmpq	%rdx, %rcx
00000000010139b2	jne	0x1013bee
00000000010139b8	movq	%gs:0x30, %rcx
00000000010139c1	movq	0x30(%rcx), %rbx
00000000010139c5	incl	0x100(%rbx)
00000000010139cb	movq	0x30(%rcx), %rcx
00000000010139cf	movq	0x48(%rsp), %rbx
00000000010139d4	movq	%rcx, (%rbx)
00000000010139d7	cmpl	$0x0, 0xc1112(%rip)
00000000010139de	je	0x1013d52
00000000010139e4	callq	runtime.nanotime
00000000010139e9	movq	(%rsp), %rax
00000000010139ed	movq	0x78(%rsp), %rcx
00000000010139f2	movq	%rax, 0x1268(%rcx)
00000000010139f9	movl	$0xffffffff, %edx
00000000010139fe	leaq	0xa53fb(%rip), %rbx
0000000001013a05	lock
0000000001013a06	xaddl	%edx, (%rbx)
0000000001013a09	decl	%edx
0000000001013a0b	movl	0xa53df(%rip), %esi
0000000001013a11	cmpl	%esi, %edx
0000000001013a13	je	0x1013cd4
0000000001013a19	movq	%rax, 0x30(%rsp)
0000000001013a1e	xorps	%xmm0, %xmm0
0000000001013a21	movups	%xmm0, 0x50(%rsp)
0000000001013a26	movq	$0x0, 0x60(%rsp)
0000000001013a2f	leaq	runtime.gcBgMarkWorker.func2(%rip), %rax
0000000001013a36	movq	%rax, 0x50(%rsp)
0000000001013a3b	movq	0x40(%rsp), %rdx
0000000001013a40	movq	%rdx, 0x58(%rsp)
0000000001013a45	movq	%rcx, 0x60(%rsp)
0000000001013a4a	leaq	0x50(%rsp), %rbx
0000000001013a4f	movq	%rbx, (%rsp)
0000000001013a53	callq	runtime.systemstack
0000000001013a58	leaq	runtime.gcBlackenPromptly(%rip), %rax
0000000001013a5f	cmpb	$0x0, (%rax)
0000000001013a62	jne	0x1013bd4
0000000001013a68	callq	runtime.nanotime
0000000001013a6d	movq	(%rsp), %rax
0000000001013a71	movq	0x30(%rsp), %rcx
0000000001013a76	subq	%rcx, %rax
0000000001013a79	movq	0x78(%rsp), %rcx
0000000001013a7e	movq	0x1260(%rcx), %rdx
0000000001013a85	testq	%rdx, %rdx
0000000001013a88	jne	0x1013b96
0000000001013a8e	leaq	0xc1563(%rip), %rdx
0000000001013a95	lock
0000000001013a96	xaddq	%rax, (%rdx)
0000000001013a9a	movl	$0x1, %eax
0000000001013a9f	leaq	0xc1572(%rip), %rdx
0000000001013aa6	lock
0000000001013aa7	xaddq	%rax, (%rdx)
0000000001013aab	movl	$0x1, %eax
0000000001013ab0	leaq	0xa5349(%rip), %rdx
0000000001013ab7	lock
0000000001013ab8	xaddl	%eax, (%rdx)
0000000001013abb	incl	%eax
0000000001013abd	movl	0xa532d(%rip), %edx
0000000001013ac3	cmpl	%edx, %eax
0000000001013ac5	ja	0x1013c23
0000000001013acb	jne	0x1013972
0000000001013ad1	movq	runtime.work(%rip), %rax
0000000001013ad8	testq	%rax, %rax
0000000001013adb	jne	0x1013b8c
0000000001013ae1	movl	0xa5305(%rip), %eax
0000000001013ae7	cmpl	%eax, 0xa52fb(%rip)
0000000001013aed	jae	0x1013b85
0000000001013af3	movl	$0x1, %eax
0000000001013af8	testb	%al, %al
0000000001013afa	jne	0x1013972
0000000001013b00	leaq	0x1258(%rcx), %rax
0000000001013b07	testb	%al, (%rax)
0000000001013b09	xorl	%eax, %eax
0000000001013b0b	movq	%rax, 0x1258(%rcx)
0000000001013b12	movq	0x48(%rsp), %rax
0000000001013b17	movq	(%rax), %rdx
0000000001013b1a	movq	%gs:0x30, %rbx
0000000001013b23	movl	0x100(%rdx), %esi
0000000001013b29	leal	-0x1(%rsi), %edi
0000000001013b2c	movl	%edi, 0x100(%rdx)
0000000001013b32	cmpl	$0x1, %esi
0000000001013b35	jne	0x1013b4d
0000000001013b37	testb	%al, (%rbx)
0000000001013b39	leaq	0xb1(%rbx), %rdx
0000000001013b40	cmpb	$0x0, (%rdx)
0000000001013b43	je	0x1013b4d
0000000001013b45	movq	$-0x522, 0x10(%rbx)
0000000001013b4d	callq	runtime.gcMarkDone
0000000001013b52	movq	%gs:0x30, %rax
0000000001013b5b	movq	0x30(%rax), %rcx
0000000001013b5f	incl	0x100(%rcx)
0000000001013b65	movq	0x30(%rax), %rax
0000000001013b69	movq	0x48(%rsp), %rcx
0000000001013b6e	movq	%rax, (%rcx)
0000000001013b71	movq	0x78(%rsp), %rax
0000000001013b76	movq	%rax, %rdx
0000000001013b79	movq	%rax, 0x8(%rcx)
0000000001013b7d	movq	%rdx, %rcx
0000000001013b80	jmp	0x1013972
0000000001013b85	xorl	%eax, %eax
0000000001013b87	jmp	0x1013af8
0000000001013b8c	movl	$0x1, %eax
0000000001013b91	jmp	0x1013af8
0000000001013b96	cmpq	$0x1, %rdx
0000000001013b9a	jne	0x1013bb9
0000000001013b9c	leaq	0xc145d(%rip), %rdx
0000000001013ba3	movq	%rax, %rbx
0000000001013ba6	lock
0000000001013ba7	xaddq	%rax, (%rdx)
0000000001013bab	lock
0000000001013bac	xaddq	%rbx, 0x1250(%rcx)
0000000001013bb4	jmp	0x1013aab
0000000001013bb9	cmpq	$0x2, %rdx
0000000001013bbd	jne	0x1013aab
0000000001013bc3	leaq	0xc143e(%rip), %rdx
0000000001013bca	lock
0000000001013bcb	xaddq	%rax, (%rdx)
0000000001013bcf	jmp	0x1013aab
0000000001013bd4	movq	0x78(%rsp), %rax
0000000001013bd9	leaq	0x1270(%rax), %rcx
0000000001013be0	movq	%rcx, (%rsp)
0000000001013be4	callq	"runtime.(*gcWork).dispose"
0000000001013be9	jmp	0x1013a68
0000000001013bee	movq	0x68(%rsp), %rbp
0000000001013bf3	addq	$0x70, %rsp
0000000001013bf7	retq
0000000001013bf8	leaq	0xf0(%rcx), %rdi
0000000001013bff	xorl	%eax, %eax
0000000001013c01	callq	runtime.gcWriteBarrier
0000000001013c06	jmp	0x101393a
0000000001013c0b	leaq	0xf0(%rdx), %rdi
0000000001013c12	leaq	0x57943(%rip), %rax
0000000001013c19	callq	runtime.gcWriteBarrier
0000000001013c1e	jmp	0x10138f9
0000000001013c23	movl	%eax, 0x24(%rsp)
0000000001013c27	movl	%edx, 0x2c(%rsp)
0000000001013c2b	movq	0x1260(%rcx), %rax
0000000001013c32	movq	%rax, 0x38(%rsp)
0000000001013c37	callq	runtime.printlock
0000000001013c3c	leaq	0x59419(%rip), %rax
0000000001013c43	movq	%rax, (%rsp)
0000000001013c47	movq	$0x1d, 0x8(%rsp)
0000000001013c50	callq	runtime.printstring
0000000001013c55	movq	0x38(%rsp), %rax
0000000001013c5a	movq	%rax, (%rsp)
0000000001013c5e	callq	runtime.printint
0000000001013c63	leaq	0x577a6(%rip), %rax
0000000001013c6a	movq	%rax, (%rsp)
0000000001013c6e	movq	$0xd, 0x8(%rsp)
0000000001013c77	callq	runtime.printstring
0000000001013c7c	movl	0x24(%rsp), %eax
0000000001013c80	movq	%rax, (%rsp)
0000000001013c84	callq	runtime.printuint
0000000001013c89	leaq	0x57773(%rip), %rax
0000000001013c90	movq	%rax, (%rsp)
0000000001013c94	movq	$0xd, 0x8(%rsp)
0000000001013c9d	callq	runtime.printstring
0000000001013ca2	movl	0x2c(%rsp), %eax
0000000001013ca6	movq	%rax, (%rsp)
0000000001013caa	callq	runtime.printuint
0000000001013caf	callq	runtime.printnl
0000000001013cb4	callq	runtime.printunlock
0000000001013cb9	leaq	0x588a4(%rip), %rax
0000000001013cc0	movq	%rax, (%rsp)
0000000001013cc4	movq	$0x17, 0x8(%rsp)
0000000001013ccd	callq	runtime.throw
0000000001013cd2	ud2
0000000001013cd4	movl	%edx, 0x28(%rsp)
0000000001013cd8	movl	%esi, 0x2c(%rsp)
0000000001013cdc	callq	runtime.printlock
0000000001013ce1	leaq	0x58395(%rip), %rax
0000000001013ce8	movq	%rax, (%rsp)
0000000001013cec	movq	$0x15, 0x8(%rsp)
0000000001013cf5	callq	runtime.printstring
0000000001013cfa	movl	0x28(%rsp), %eax
0000000001013cfe	movq	%rax, (%rsp)
0000000001013d02	callq	runtime.printuint
0000000001013d07	leaq	0x576f5(%rip), %rax
0000000001013d0e	movq	%rax, (%rsp)
0000000001013d12	movq	$0xd, 0x8(%rsp)
0000000001013d1b	callq	runtime.printstring
0000000001013d20	movl	0x2c(%rsp), %eax
0000000001013d24	movq	%rax, (%rsp)
0000000001013d28	callq	runtime.printuint
0000000001013d2d	callq	runtime.printnl
0000000001013d32	callq	runtime.printunlock
0000000001013d37	leaq	0x58f42(%rip), %rax
0000000001013d3e	movq	%rax, (%rsp)
0000000001013d42	movq	$0x1b, 0x8(%rsp)
0000000001013d4b	callq	runtime.throw
0000000001013d50	ud2
0000000001013d52	leaq	0x5a149(%rip), %rax
0000000001013d59	movq	%rax, (%rsp)
0000000001013d5d	movq	$0x26, 0x8(%rsp)
0000000001013d66	callq	runtime.throw
0000000001013d6b	ud2
0000000001013d6d	callq	runtime.morestack_noctxt
0000000001013d72	jmp	runtime.gcBgMarkWorker
0000000001013d77	int3
0000000001013d78	int3
0000000001013d79	int3
0000000001013d7a	int3
0000000001013d7b	int3
0000000001013d7c	int3
0000000001013d7d	int3
0000000001013d7e	int3
0000000001013d7f	int3
runtime.gcMark:
0000000001013d80	movq	%gs:0x30, %rcx
0000000001013d89	cmpq	0x10(%rcx), %rsp
0000000001013d8d	jbe	0x101405c
0000000001013d93	subq	$0x20, %rsp
0000000001013d97	movq	%rbp, 0x18(%rsp)
0000000001013d9c	leaq	0x18(%rsp), %rbp
0000000001013da1	cmpl	$0x0, 0xc0f78(%rip)
0000000001013da8	jg	0x1013fe6
0000000001013dae	cmpl	$0x2, 0xc0d43(%rip)
0000000001013db5	jne	0x1014041
0000000001013dbb	movq	0x28(%rsp), %rax
0000000001013dc0	movq	%rax, 0xa5031(%rip)
0000000001013dc7	callq	runtime.gcMarkRootPrepare
0000000001013dcc	movq	$0x0, 0xa5029(%rip)
0000000001013dd7	callq	runtime.gcprocs
0000000001013ddc	movl	(%rsp), %eax
0000000001013ddf	movl	%eax, 0xa500b(%rip)
0000000001013de5	cmpq	$0x0, 0xa4f73(%rip)
0000000001013ded	jne	0x1013fda
0000000001013df3	movq	0xa5026(%rip), %rax
0000000001013dfa	addq	0xa5027(%rip), %rax
0000000001013e01	addq	0xa5028(%rip), %rax
0000000001013e08	addq	0xa5029(%rip), %rax
0000000001013e0f	testq	%rax, %rax
0000000001013e12	jne	0x1013fda
0000000001013e18	movb	$0x0, 0xa4ff1(%rip)
0000000001013e1f	cmpl	$0x1, 0xa4fca(%rip)
0000000001013e26	ja	0x1013fb3
0000000001013e2c	callq	runtime.gchelperstart
0000000001013e31	movq	%gs:0x30, %rax
0000000001013e3a	movq	0x30(%rax), %rax
0000000001013e3e	movq	0xd0(%rax), %rcx
0000000001013e45	testb	%al, (%rcx)
0000000001013e47	testb	%al, (%rax)
0000000001013e49	leaq	0x1270(%rcx), %rax
0000000001013e50	movq	%rax, 0x10(%rsp)
0000000001013e55	leaq	0xa4fb4(%rip), %rcx
0000000001013e5c	cmpb	$0x0, (%rcx)
0000000001013e5f	je	0x1013f9c
0000000001013e65	movq	%rax, (%rsp)
0000000001013e69	movq	$0x0, 0x8(%rsp)
0000000001013e72	callq	runtime.gcDrain
0000000001013e77	movq	0x10(%rsp), %rax
0000000001013e7c	movq	%rax, (%rsp)
0000000001013e80	callq	"runtime.(*gcWork).dispose"
0000000001013e85	cmpl	$0x0, 0xc0ea0(%rip)
0000000001013e8c	jg	0x1013f92
0000000001013e92	cmpq	$0x0, 0xa4ec6(%rip)
0000000001013e9a	jne	0x1014026
0000000001013ea0	cmpl	$0x1, 0xa4f49(%rip)
0000000001013ea7	ja	0x1013f7d
0000000001013ead	movb	$0x1, 0xa4f8c(%rip)
0000000001013eb4	movq	runtime.allp(%rip), %rax
0000000001013ebb	movq	0xa4996(%rip), %rcx
0000000001013ec2	xorl	%edx, %edx
0000000001013ec4	jmp	0x1013ec9
0000000001013ec6	incq	%rdx
0000000001013ec9	cmpq	%rcx, %rdx
0000000001013ecc	jge	0x1013f31
0000000001013ece	movq	(%rax,%rdx,8), %rbx
0000000001013ed2	testb	%al, (%rbx)
0000000001013ed4	leaq	0x1270(%rbx), %rsi
0000000001013edb	testb	%al, (%rsi)
0000000001013edd	movq	0x1270(%rbx), %rsi
0000000001013ee4	testq	%rsi, %rsi
0000000001013ee7	je	0x1013f2a
0000000001013ee9	cmpq	$0x0, 0x10(%rsi)
0000000001013eee	jne	0x1013f26
0000000001013ef0	movq	0x1278(%rbx), %rsi
0000000001013ef7	cmpq	$0x0, 0x10(%rsi)
0000000001013efc	sete	%sil
0000000001013f00	testb	%sil, %sil
0000000001013f03	je	0x101400b
0000000001013f09	cmpq	$0x0, 0x1288(%rbx)
0000000001013f11	jne	0x1013ff0
0000000001013f17	cmpq	$0x0, 0x1280(%rbx)
0000000001013f1f	je	0x1013ec6
0000000001013f21	jmp	0x1013ff0
0000000001013f26	xorl	%esi, %esi
0000000001013f28	jmp	0x1013f00
0000000001013f2a	movl	$0x1, %esi
0000000001013f2f	jmp	0x1013f00
0000000001013f31	callq	runtime.cachestats
0000000001013f36	movq	0xa4ea3(%rip), %rax
0000000001013f3d	movq	%rax, 0xc308c(%rip)
0000000001013f44	movq	0xa4e95(%rip), %rax
0000000001013f4b	movq	%rax, 0xc306e(%rip)
0000000001013f52	movq	runtime.gcController(%rip), %rax
0000000001013f59	movq	%rax, 0xc3068(%rip)
0000000001013f60	leaq	0xb0a89(%rip), %rax
0000000001013f67	cmpb	$0x0, (%rax)
0000000001013f6a	jne	0x1013f76
0000000001013f6c	movq	0x18(%rsp), %rbp
0000000001013f71	addq	$0x20, %rsp
0000000001013f75	retq
0000000001013f76	callq	runtime.traceHeapAlloc
0000000001013f7b	jmp	0x1013f6c
0000000001013f7d	leaq	0xa4e84(%rip), %rax
0000000001013f84	movq	%rax, (%rsp)
0000000001013f88	callq	runtime.notesleep
0000000001013f8d	jmp	0x1013ead
0000000001013f92	callq	runtime.gcMarkRootCheck
0000000001013f97	jmp	0x1013e92
0000000001013f9c	movq	%rax, (%rsp)
0000000001013fa0	movq	$0x2, 0x8(%rsp)
0000000001013fa9	callq	runtime.gcDrain
0000000001013fae	jmp	0x1013e77
0000000001013fb3	leaq	0xa4e4e(%rip), %rax
0000000001013fba	testb	%al, (%rax)
0000000001013fbc	movq	$0x0, 0xa4e41(%rip)
0000000001013fc7	movl	0xa4e23(%rip), %eax
0000000001013fcd	movl	%eax, (%rsp)
0000000001013fd0	callq	runtime.helpgc
0000000001013fd5	jmp	0x1013e2c
0000000001013fda	movb	$0x1, 0xa4e2f(%rip)
0000000001013fe1	jmp	0x1013e1f
0000000001013fe6	callq	runtime.tracegc
0000000001013feb	jmp	0x1013dae
0000000001013ff0	leaq	0x5a6e2(%rip), %rax
0000000001013ff7	movq	%rax, (%rsp)
0000000001013ffb	movq	$0x30, 0x8(%rsp)
0000000001014004	callq	runtime.throw
0000000001014009	ud2
000000000101400b	leaq	0x5a698(%rip), %rax
0000000001014012	movq	%rax, (%rsp)
0000000001014016	movq	$0x2f, 0x8(%rsp)
000000000101401f	callq	runtime.throw
0000000001014024	ud2
0000000001014026	leaq	0x5761d(%rip), %rax
000000000101402d	movq	%rax, (%rsp)
0000000001014031	movq	$0xe, 0x8(%rsp)
000000000101403a	callq	runtime.throw
000000000101403f	ud2
0000000001014041	leaq	0x5aac5(%rip), %rax
0000000001014048	movq	%rax, (%rsp)
000000000101404c	movq	$0x38, 0x8(%rsp)
0000000001014055	callq	runtime.throw
000000000101405a	ud2
000000000101405c	callq	runtime.morestack_noctxt
0000000001014061	jmp	runtime.gcMark
0000000001014066	int3
0000000001014067	int3
0000000001014068	int3
0000000001014069	int3
000000000101406a	int3
000000000101406b	int3
000000000101406c	int3
000000000101406d	int3
000000000101406e	int3
000000000101406f	int3
runtime.gcSweep:
0000000001014070	movq	%gs:0x30, %rcx
0000000001014079	cmpq	0x10(%rcx), %rsp
000000000101407d	jbe	0x1014207
0000000001014083	subq	$0x20, %rsp
0000000001014087	movq	%rbp, 0x18(%rsp)
000000000101408c	leaq	0x18(%rsp), %rbp
0000000001014091	cmpl	$0x0, 0xc0a60(%rip)
0000000001014098	jne	0x10141ec
000000000101409e	leaq	runtime.mheap_(%rip), %rax
00000000010140a5	movq	%rax, (%rsp)
00000000010140a9	callq	runtime.lock
00000000010140ae	movl	0xaa40c(%rip), %eax
00000000010140b4	addl	$0x2, %eax
00000000010140b7	movl	%eax, 0xaa403(%rip)
00000000010140bd	movl	$0x0, 0xaa3fd(%rip)
00000000010140c7	shrl	%eax
00000000010140c9	andl	$0x1, %eax
00000000010140cc	leaq	(%rax,%rax,4), %rax
00000000010140d0	leaq	0xaa411(%rip), %rcx
00000000010140d7	movl	0x20(%rcx,%rax,8), %eax
00000000010140db	testl	%eax, %eax
00000000010140dd	jne	0x10141d1
00000000010140e3	movq	$0x0, 0xaa452(%rip)
00000000010140ee	leaq	runtime.mheap_(%rip), %rax
00000000010140f5	movq	%rax, (%rsp)
00000000010140f9	callq	runtime.unlock
00000000010140fe	movq	0x28(%rsp), %rax
0000000001014103	cmpq	$0x2, %rax
0000000001014107	jne	0x1014174
0000000001014109	leaq	runtime.mheap_(%rip), %rax
0000000001014110	movq	%rax, (%rsp)
0000000001014114	callq	runtime.lock
0000000001014119	xorps	%xmm0, %xmm0
000000000101411c	movsd	%xmm0, 0xaa434(%rip)
0000000001014124	leaq	runtime.mheap_(%rip), %rax
000000000101412b	movq	%rax, (%rsp)
000000000101412f	callq	runtime.unlock
0000000001014134	jmp	0x101413c
0000000001014136	incl	0xa483c(%rip)
000000000101413c	callq	runtime.sweepone
0000000001014141	cmpq	$-0x1, (%rsp)
0000000001014146	jne	0x1014136
0000000001014148	callq	runtime.prepareFreeWorkbufs
000000000101414d	movb	$0x0, (%rsp)
0000000001014151	callq	runtime.freeSomeWbufs
0000000001014156	leaq	0x8(%rsp), %rax
000000000101415b	cmpb	$0x0, (%rax)
000000000101415e	jne	0x101414d
0000000001014160	callq	runtime.mProf_NextCycle
0000000001014165	callq	runtime.mProf_Flush
000000000101416a	movq	0x18(%rsp), %rbp
000000000101416f	addq	$0x20, %rsp
0000000001014173	retq
0000000001014174	leaq	runtime.sweep(%rip), %rax
000000000101417b	movq	%rax, (%rsp)
000000000101417f	callq	runtime.lock
0000000001014184	leaq	0xa47e5(%rip), %rax
000000000101418b	cmpb	$0x0, (%rax)
000000000101418e	jne	0x10141aa
0000000001014190	leaq	runtime.sweep(%rip), %rax
0000000001014197	movq	%rax, (%rsp)
000000000101419b	callq	runtime.unlock
00000000010141a0	movq	0x18(%rsp), %rbp
00000000010141a5	addq	$0x20, %rsp
00000000010141a9	retq
00000000010141aa	movb	$0x0, 0xa47bf(%rip)
00000000010141b1	movq	0xa47b0(%rip), %rax
00000000010141b8	movq	%rax, (%rsp)
00000000010141bc	movq	$0x0, 0x8(%rsp)
00000000010141c5	movb	$0x1, 0x10(%rsp)
00000000010141ca	callq	runtime.ready
00000000010141cf	jmp	0x1014190
00000000010141d1	leaq	0x57cb8(%rip), %rax
00000000010141d8	movq	%rax, (%rsp)
00000000010141dc	movq	$0x14, 0x8(%rsp)
00000000010141e5	callq	runtime.throw
00000000010141ea	ud2
00000000010141ec	leaq	0x59fc4(%rip), %rax
00000000010141f3	movq	%rax, (%rsp)
00000000010141f7	movq	$0x29, 0x8(%rsp)
0000000001014200	callq	runtime.throw
0000000001014205	ud2
0000000001014207	callq	runtime.morestack_noctxt
000000000101420c	jmp	runtime.gcSweep
0000000001014211	int3
0000000001014212	int3
0000000001014213	int3
0000000001014214	int3
0000000001014215	int3
0000000001014216	int3
0000000001014217	int3
0000000001014218	int3
0000000001014219	int3
000000000101421a	int3
000000000101421b	int3
000000000101421c	int3
000000000101421d	int3
000000000101421e	int3
000000000101421f	int3
runtime.gcResetMarkState:
0000000001014220	movq	%gs:0x30, %rcx
0000000001014229	cmpq	0x10(%rcx), %rsp
000000000101422d	jbe	0x10142bd
0000000001014233	subq	$0x10, %rsp
0000000001014237	movq	%rbp, 0x8(%rsp)
000000000101423c	leaq	0x8(%rsp), %rbp
0000000001014241	leaq	runtime.allglock(%rip), %rax
0000000001014248	movq	%rax, (%rsp)
000000000101424c	callq	runtime.lock
0000000001014251	movq	0xa45e0(%rip), %rax
0000000001014258	movq	runtime.allgs(%rip), %rcx
000000000101425f	xorl	%edx, %edx
0000000001014261	jmp	0x101427e
0000000001014263	movq	(%rcx,%rdx,8), %rbx
0000000001014267	movw	$0x0, 0xb4(%rbx)
0000000001014270	movq	$0x0, 0x170(%rbx)
000000000101427b	incq	%rdx
000000000101427e	cmpq	%rax, %rdx
0000000001014281	jl	0x1014263
0000000001014283	leaq	runtime.allglock(%rip), %rax
000000000101428a	movq	%rax, (%rsp)
000000000101428e	callq	runtime.unlock
0000000001014293	movq	$0x0, 0xa4b42(%rip)
000000000101429e	movq	0xc2d1b(%rip), %rax
00000000010142a5	movq	%rax, 0xa4bcc(%rip)
00000000010142ac	movb	$0x0, 0xa4b8d(%rip)
00000000010142b3	movq	0x8(%rsp), %rbp
00000000010142b8	addq	$0x10, %rsp
00000000010142bc	retq
00000000010142bd	callq	runtime.morestack_noctxt
00000000010142c2	jmp	runtime.gcResetMarkState
00000000010142c7	int3
00000000010142c8	int3
00000000010142c9	int3
00000000010142ca	int3
00000000010142cb	int3
00000000010142cc	int3
00000000010142cd	int3
00000000010142ce	int3
00000000010142cf	int3
runtime.clearpools:
00000000010142d0	movq	%gs:0x30, %rcx
00000000010142d9	cmpq	0x10(%rcx), %rsp
00000000010142dd	jbe	0x1014425
00000000010142e3	subq	$0x10, %rsp
00000000010142e7	movq	%rbp, 0x8(%rsp)
00000000010142ec	leaq	0x8(%rsp), %rbp
00000000010142f1	movq	runtime.poolcleanup(%rip), %rdx
00000000010142f8	testq	%rdx, %rdx
00000000010142fb	jne	0x101441b
0000000001014301	leaq	0xa4828(%rip), %rax
0000000001014308	movq	%rax, (%rsp)
000000000101430c	callq	runtime.lock
0000000001014311	movq	0xa4820(%rip), %rax
0000000001014318	jmp	0x101431d
000000000101431a	movq	%rcx, %rax
000000000101431d	testq	%rax, %rax
0000000001014320	je	0x1014346
0000000001014322	movq	0x10(%rax), %rcx
0000000001014326	cmpl	$0x0, 0xc0903(%rip)
000000000101432d	jne	0x1014339
000000000101432f	movq	$0x0, 0x10(%rax)
0000000001014337	jmp	0x101431a
0000000001014339	leaq	0x10(%rax), %rdi
000000000101433d	xorl	%eax, %eax
000000000101433f	callq	runtime.gcWriteBarrier
0000000001014344	jmp	0x101431a
0000000001014346	cmpl	$0x0, 0xc08e3(%rip)
000000000101434d	jne	0x1014408
0000000001014353	movq	$0x0, 0xa47da(%rip)
000000000101435e	leaq	0xa47cb(%rip), %rax
0000000001014365	movq	%rax, (%rsp)
0000000001014369	callq	runtime.unlock
000000000101436e	leaq	0xa47cb(%rip), %rax
0000000001014375	movq	%rax, (%rsp)
0000000001014379	callq	runtime.lock
000000000101437e	xorl	%eax, %eax
0000000001014380	jmp	0x10143c8
0000000001014382	movq	%rbx, %rdx
0000000001014385	testq	%rdx, %rdx
0000000001014388	je	0x10143b4
000000000101438a	movq	0x28(%rdx), %rbx
000000000101438e	cmpl	$0x0, 0xc089b(%rip)
0000000001014395	jne	0x10143a1
0000000001014397	movq	$0x0, 0x28(%rdx)
000000000101439f	jmp	0x1014382
00000000010143a1	leaq	0x28(%rdx), %rdi
00000000010143a5	movq	%rax, %rdx
00000000010143a8	xorl	%eax, %eax
00000000010143aa	callq	runtime.gcWriteBarrier
00000000010143af	movq	%rdx, %rax
00000000010143b2	jmp	0x1014382
00000000010143b4	cmpl	$0x0, 0xc0875(%rip)
00000000010143bb	jne	0x10143db
00000000010143bd	movq	$0x0, (%rcx,%rax,8)
00000000010143c5	incq	%rax
00000000010143c8	cmpq	$0x5, %rax
00000000010143cc	jge	0x10143ee
00000000010143ce	leaq	0xa4773(%rip), %rcx
00000000010143d5	movq	(%rcx,%rax,8), %rdx
00000000010143d9	jmp	0x1014385
00000000010143db	leaq	(%rcx,%rax,8), %rdi
00000000010143df	movq	%rax, %rcx
00000000010143e2	xorl	%eax, %eax
00000000010143e4	callq	runtime.gcWriteBarrier
00000000010143e9	movq	%rcx, %rax
00000000010143ec	jmp	0x10143c5
00000000010143ee	leaq	0xa474b(%rip), %rax
00000000010143f5	movq	%rax, (%rsp)
00000000010143f9	callq	runtime.unlock
00000000010143fe	movq	0x8(%rsp), %rbp
0000000001014403	addq	$0x10, %rsp
0000000001014407	retq
0000000001014408	leaq	0xa4729(%rip), %rdi
000000000101440f	xorl	%eax, %eax
0000000001014411	callq	runtime.gcWriteBarrier
0000000001014416	jmp	0x101435e
000000000101441b	movq	(%rdx), %rax
000000000101441e	callq	*%rax
0000000001014420	jmp	0x1014301
0000000001014425	callq	runtime.morestack_noctxt
000000000101442a	jmp	runtime.clearpools
000000000101442f	int3
runtime.gchelper:
0000000001014430	movq	%gs:0x30, %rcx
0000000001014439	cmpq	0x10(%rcx), %rsp
000000000101443d	jbe	0x1014524
0000000001014443	subq	$0x28, %rsp
0000000001014447	movq	%rbp, 0x20(%rsp)
000000000101444c	leaq	0x20(%rsp), %rbp
0000000001014451	movq	%gs:0x30, %rax
000000000101445a	movq	%rax, 0x18(%rsp)
000000000101445f	movq	0x30(%rax), %rcx
0000000001014463	movb	$0x2, 0x125(%rcx)
000000000101446a	callq	runtime.gchelperstart
000000000101446f	cmpl	$0x2, 0xc0682(%rip)
0000000001014476	jne	0x10144c6
0000000001014478	movq	0x18(%rsp), %rax
000000000101447d	movq	0x30(%rax), %rcx
0000000001014481	movq	0xd0(%rcx), %rdx
0000000001014488	testb	%al, (%rdx)
000000000101448a	testb	%al, (%rax)
000000000101448c	testb	%al, (%rcx)
000000000101448e	leaq	0x1270(%rdx), %rcx
0000000001014495	movq	%rcx, 0x10(%rsp)
000000000101449a	leaq	0xa496f(%rip), %rdx
00000000010144a1	cmpb	$0x0, (%rdx)
00000000010144a4	je	0x1014510
00000000010144a6	movq	%rcx, (%rsp)
00000000010144aa	movq	$0x0, 0x8(%rsp)
00000000010144b3	callq	runtime.gcDrain
00000000010144b8	movq	0x10(%rsp), %rax
00000000010144bd	movq	%rax, (%rsp)
00000000010144c1	callq	"runtime.(*gcWork).dispose"
00000000010144c6	movl	0xa4924(%rip), %eax
00000000010144cc	movl	$0x1, %ecx
00000000010144d1	leaq	0xa492c(%rip), %rdx
00000000010144d8	lock
00000000010144d9	xaddl	%ecx, (%rdx)
00000000010144dc	incl	%ecx
00000000010144de	decl	%eax
00000000010144e0	cmpl	%ecx, %eax
00000000010144e2	je	0x10144fe
00000000010144e4	movq	0x18(%rsp), %rax
00000000010144e9	movq	0x30(%rax), %rax
00000000010144ed	movb	$0x0, 0x125(%rax)
00000000010144f4	movq	0x20(%rsp), %rbp
00000000010144f9	addq	$0x28, %rsp
00000000010144fd	retq
00000000010144fe	leaq	0xa4903(%rip), %rax
0000000001014505	movq	%rax, (%rsp)
0000000001014509	callq	runtime.notewakeup
000000000101450e	jmp	0x10144e4
0000000001014510	movq	%rcx, (%rsp)
0000000001014514	movq	$0x2, 0x8(%rsp)
000000000101451d	callq	runtime.gcDrain
0000000001014522	jmp	0x10144b8
0000000001014524	callq	runtime.morestack_noctxt
0000000001014529	jmp	runtime.gchelper
000000000101452e	int3
000000000101452f	int3
runtime.gchelperstart:
0000000001014530	movq	%gs:0x30, %rcx
0000000001014539	cmpq	0x10(%rcx), %rsp
000000000101453d	jbe	0x10145ab
000000000101453f	subq	$0x18, %rsp
0000000001014543	movq	%rbp, 0x10(%rsp)
0000000001014548	leaq	0x10(%rsp), %rbp
000000000101454d	movq	%gs:0x30, %rax
0000000001014556	movq	0x30(%rax), %rcx
000000000101455a	cmpl	$0x20, 0x10c(%rcx)
0000000001014561	jae	0x1014590
0000000001014563	movq	(%rcx), %rcx
0000000001014566	cmpq	%rcx, %rax
0000000001014569	jne	0x1014575
000000000101456b	movq	0x10(%rsp), %rbp
0000000001014570	addq	$0x18, %rsp
0000000001014574	retq
0000000001014575	leaq	0x59053(%rip), %rax
000000000101457c	movq	%rax, (%rsp)
0000000001014580	movq	$0x20, 0x8(%rsp)
0000000001014589	callq	runtime.throw
000000000101458e	ud2
0000000001014590	leaq	0x58870(%rip), %rax
0000000001014597	movq	%rax, (%rsp)
000000000101459b	movq	$0x1c, 0x8(%rsp)
00000000010145a4	callq	runtime.throw
00000000010145a9	ud2
00000000010145ab	callq	runtime.morestack_noctxt
00000000010145b0	jmp	runtime.gchelperstart
00000000010145b5	int3
00000000010145b6	int3
00000000010145b7	int3
00000000010145b8	int3
00000000010145b9	int3
00000000010145ba	int3
00000000010145bb	int3
00000000010145bc	int3
00000000010145bd	int3
00000000010145be	int3
00000000010145bf	int3
runtime.itoaDiv:
00000000010145c0	subq	$0x8, %rsp
00000000010145c4	movq	%rbp, (%rsp)
00000000010145c8	leaq	(%rsp), %rbp
00000000010145cc	movq	0x18(%rsp), %rcx
00000000010145d1	leaq	-0x1(%rcx), %rdx
00000000010145d5	movq	0x30(%rsp), %rbx
00000000010145da	movq	%rdx, %rsi
00000000010145dd	subq	%rbx, %rdx
00000000010145e0	movq	0x10(%rsp), %rbx
00000000010145e5	movq	0x28(%rsp), %rdi
00000000010145ea	jmp	0x10145f2
00000000010145ec	movq	%rdx, %rdi
00000000010145ef	movq	%r8, %rdx
00000000010145f2	cmpq	$0xa, %rdi
00000000010145f6	jb	0x1014641
00000000010145f8	movabsq	$-0x3333333333333333, %rax
0000000001014602	movq	%rdx, %r8
0000000001014605	mulq	%rdi
0000000001014608	shrq	$0x3, %rdx
000000000101460c	leaq	(%rdx,%rdx,4), %r9
0000000001014610	shlq	%r9
0000000001014613	subq	%r9, %rdi
0000000001014616	cmpq	%rcx, %rsi
0000000001014619	jae	0x1014693
000000000101461b	addq	$0x30, %rdi
000000000101461f	movb	%dil, (%rbx,%rsi)
0000000001014623	leaq	-0x1(%rsi), %rdi
0000000001014627	cmpq	%r8, %rdi
000000000101462a	jne	0x101463c
000000000101462c	cmpq	%rcx, %rdi
000000000101462f	jae	0x101468c
0000000001014631	movb	$0x2e, -0x1(%rsi,%rbx)
0000000001014636	addq	$-0x2, %rsi
000000000101463a	jmp	0x10145ec
000000000101463c	movq	%rdi, %rsi
000000000101463f	jmp	0x10145ec
0000000001014641	cmpq	%rdx, %rsi
0000000001014644	jge	0x10145f8
0000000001014646	cmpq	%rcx, %rsi
0000000001014649	jae	0x1014685
000000000101464b	leaq	0x30(%rdi), %rax
000000000101464f	movb	%al, (%rbx,%rsi)
0000000001014652	movq	0x20(%rsp), %rax
0000000001014657	subq	%rsi, %rax
000000000101465a	movq	%rax, %rdx
000000000101465d	negq	%rax
0000000001014660	sarq	$0x3f, %rax
0000000001014664	andq	%rsi, %rax
0000000001014667	addq	%rbx, %rax
000000000101466a	movq	%rax, 0x38(%rsp)
000000000101466f	subq	%rsi, %rcx
0000000001014672	movq	%rcx, 0x40(%rsp)
0000000001014677	movq	%rdx, 0x48(%rsp)
000000000101467c	movq	(%rsp), %rbp
0000000001014680	addq	$0x8, %rsp
0000000001014684	retq
0000000001014685	callq	runtime.panicindex
000000000101468a	ud2
000000000101468c	callq	runtime.panicindex
0000000001014691	ud2
0000000001014693	callq	runtime.panicindex
0000000001014698	ud2
000000000101469a	int3
000000000101469b	int3
000000000101469c	int3
000000000101469d	int3
000000000101469e	int3
000000000101469f	int3
runtime.fmtNSAsMS:
00000000010146a0	movq	%gs:0x30, %rcx
00000000010146a9	cmpq	0x10(%rcx), %rsp
00000000010146ad	jbe	0x101481b
00000000010146b3	subq	$0x48, %rsp
00000000010146b7	movq	%rbp, 0x40(%rsp)
00000000010146bc	leaq	0x40(%rsp), %rbp
00000000010146c1	movq	0x68(%rsp), %rax
00000000010146c6	cmpq	$0x989680, %rax
00000000010146cc	jae	0x10147a5
00000000010146d2	shrq	%rax
00000000010146d5	movabsq	$-0x7ced916872b020c4, %rcx
00000000010146df	mulq	%rcx
00000000010146e2	shrq	$0x8, %rdx
00000000010146e6	testq	%rdx, %rdx
00000000010146e9	je	0x101476a
00000000010146eb	movl	$0x3, %eax
00000000010146f0	jmp	0x101470d
00000000010146f2	movq	%rax, %rcx
00000000010146f5	movq	%rdx, %rax
00000000010146f8	movabsq	$-0x3333333333333333, %rbx
0000000001014702	mulq	%rbx
0000000001014705	shrq	$0x3, %rdx
0000000001014709	leaq	-0x1(%rcx), %rax
000000000101470d	cmpq	$0x64, %rdx
0000000001014711	jae	0x10146f2
0000000001014713	movq	0x50(%rsp), %rcx
0000000001014718	movq	%rcx, (%rsp)
000000000101471c	movq	0x58(%rsp), %rcx
0000000001014721	movq	%rcx, 0x8(%rsp)
0000000001014726	movq	0x60(%rsp), %rcx
000000000101472b	movq	%rcx, 0x10(%rsp)
0000000001014730	movq	%rdx, 0x18(%rsp)
0000000001014735	movq	%rax, 0x20(%rsp)
000000000101473a	callq	runtime.itoaDiv
000000000101473f	movq	0x28(%rsp), %rax
0000000001014744	movq	0x30(%rsp), %rcx
0000000001014749	movq	0x38(%rsp), %rdx
000000000101474e	movq	%rax, 0x70(%rsp)
0000000001014753	movq	%rcx, 0x78(%rsp)
0000000001014758	movq	%rdx, 0x80(%rsp)
0000000001014760	movq	0x40(%rsp), %rbp
0000000001014765	addq	$0x48, %rsp
0000000001014769	retq
000000000101476a	movq	0x58(%rsp), %rax
000000000101476f	testq	%rax, %rax
0000000001014772	jbe	0x1014814
0000000001014778	movq	0x50(%rsp), %rax
000000000101477d	movb	$0x30, (%rax)
0000000001014780	movq	%rax, 0x70(%rsp)
0000000001014785	movq	$0x1, 0x78(%rsp)
000000000101478e	movq	0x60(%rsp), %rax
0000000001014793	movq	%rax, 0x80(%rsp)
000000000101479b	movq	0x40(%rsp), %rbp
00000000010147a0	addq	$0x48, %rsp
00000000010147a4	retq
00000000010147a5	movq	%rax, %rcx
00000000010147a8	movabsq	$-0x79c842fa5093964a, %rax
00000000010147b2	mulq	%rcx
00000000010147b5	shrq	$0x13, %rdx
00000000010147b9	movq	%rdx, 0x18(%rsp)
00000000010147be	movq	0x50(%rsp), %rcx
00000000010147c3	movq	%rcx, (%rsp)
00000000010147c7	movq	0x58(%rsp), %rcx
00000000010147cc	movq	%rcx, 0x8(%rsp)
00000000010147d1	movq	0x60(%rsp), %rcx
00000000010147d6	movq	%rcx, 0x10(%rsp)
00000000010147db	movq	$0x0, 0x20(%rsp)
00000000010147e4	callq	runtime.itoaDiv
00000000010147e9	movq	0x38(%rsp), %rcx
00000000010147ee	movq	0x30(%rsp), %rdx
00000000010147f3	movq	0x28(%rsp), %rbx
00000000010147f8	movq	%rbx, 0x70(%rsp)
00000000010147fd	movq	%rdx, 0x78(%rsp)
0000000001014802	movq	%rcx, 0x80(%rsp)
000000000101480a	movq	0x40(%rsp), %rbp
000000000101480f	addq	$0x48, %rsp
0000000001014813	retq
0000000001014814	callq	runtime.panicindex
0000000001014819	ud2
000000000101481b	callq	runtime.morestack_noctxt
0000000001014820	jmp	runtime.fmtNSAsMS
0000000001014825	int3
0000000001014826	int3
0000000001014827	int3
0000000001014828	int3
0000000001014829	int3
000000000101482a	int3
000000000101482b	int3
000000000101482c	int3
000000000101482d	int3
000000000101482e	int3
000000000101482f	int3
runtime.(*mTreap).insert:
0000000001014830	movq	%gs:0x30, %rcx
0000000001014839	cmpq	0x10(%rcx), %rsp
000000000101483d	jbe	0x1014b0d
0000000001014843	subq	$0x40, %rsp
0000000001014847	movq	%rbp, 0x38(%rsp)
000000000101484c	leaq	0x38(%rsp), %rbp
0000000001014851	movq	0x50(%rsp), %rax
0000000001014856	movq	0x20(%rax), %rcx
000000000101485a	movq	0x48(%rsp), %rdx
000000000101485f	movq	(%rdx), %rbx
0000000001014862	movq	%rdx, %rsi
0000000001014865	xorl	%edi, %edi
0000000001014867	jmp	0x1014875
0000000001014869	movq	(%rbx), %r8
000000000101486c	movq	%rdx, %rdi
000000000101486f	movq	%rbx, %rdx
0000000001014872	movq	%r8, %rbx
0000000001014875	testq	%rbx, %rbx
0000000001014878	je	0x10148c5
000000000101487a	movq	0x18(%rbx), %rdx
000000000101487e	cmpq	%rcx, %rdx
0000000001014881	jae	0x1014888
0000000001014883	movq	%rbx, %rdx
0000000001014886	jmp	0x1014869
0000000001014888	jbe	0x1014899
000000000101488a	leaq	0x8(%rbx), %rdx
000000000101488e	movq	%rdx, %rdi
0000000001014891	movq	%rbx, %rdx
0000000001014894	movq	%rdi, %rbx
0000000001014897	jmp	0x1014869
0000000001014899	movq	0x20(%rbx), %rdx
000000000101489d	movq	%rax, %rdi
00000000010148a0	cmpq	%rax, %rdx
00000000010148a3	jae	0x10148b3
00000000010148a5	movq	%rbx, %rax
00000000010148a8	movq	%rbx, %rdx
00000000010148ab	movq	%rax, %rbx
00000000010148ae	movq	%rdi, %rax
00000000010148b1	jmp	0x101488e
00000000010148b3	jbe	0x1014af2
00000000010148b9	leaq	0x8(%rbx), %rdx
00000000010148bd	movq	%rbx, %rax
00000000010148c0	movq	%rdx, %rbx
00000000010148c3	jmp	0x10148a8
00000000010148c5	movq	%rdx, 0x18(%rsp)
00000000010148ca	movq	%rdi, 0x20(%rsp)
00000000010148cf	leaq	0xac112(%rip), %rax
00000000010148d6	movq	%rax, (%rsp)
00000000010148da	callq	"runtime.(*fixalloc).alloc"
00000000010148df	movq	0x8(%rsp), %rax
00000000010148e4	movq	%rax, 0x30(%rsp)
00000000010148e9	xorps	%xmm0, %xmm0
00000000010148ec	movups	%xmm0, (%rax)
00000000010148ef	movq	$0x0, 0x10(%rax)
00000000010148f7	movq	$0x0, 0x20(%rax)
00000000010148ff	movq	$0x0, 0x18(%rax)
0000000001014907	movl	$0x0, 0x28(%rax)
000000000101490e	movq	0x50(%rsp), %rcx
0000000001014913	movq	0x20(%rcx), %rdx
0000000001014917	movq	%rdx, 0x18(%rax)
000000000101491b	movq	%gs:0x30, %rdx
0000000001014924	movq	0x30(%rdx), %rdx
0000000001014928	movl	0x11c(%rdx), %ebx
000000000101492e	movl	0x120(%rdx), %esi
0000000001014934	movl	%esi, 0x11c(%rdx)
000000000101493a	movl	%ebx, %edi
000000000101493c	shll	$0x11, %ebx
000000000101493f	xorl	%edi, %ebx
0000000001014941	movl	%esi, %edi
0000000001014943	xorl	%ebx, %esi
0000000001014945	shrl	$0x7, %ebx
0000000001014948	xorl	%esi, %ebx
000000000101494a	movl	%edi, %esi
000000000101494c	shrl	$0x10, %edi
000000000101494f	xorl	%ebx, %edi
0000000001014951	movl	%edi, 0x120(%rdx)
0000000001014957	leal	(%rsi,%rdi), %edx
000000000101495a	movl	%edx, 0x28(%rax)
000000000101495d	movq	%rcx, 0x20(%rax)
0000000001014961	movq	0x20(%rsp), %rcx
0000000001014966	movq	%rcx, 0x10(%rax)
000000000101496a	movq	0x18(%rsp), %rcx
000000000101496f	movq	%rax, (%rcx)
0000000001014972	movq	0x48(%rsp), %rcx
0000000001014977	jmp	0x1014989
0000000001014979	movq	0x30(%rsp), %rdx
000000000101497e	movq	0x48(%rsp), %rbx
0000000001014983	movq	%rdx, %rax
0000000001014986	movq	%rbx, %rcx
0000000001014989	movq	0x10(%rax), %rdx
000000000101498d	testq	%rdx, %rdx
0000000001014990	je	0x10149dc
0000000001014992	movl	0x28(%rax), %ebx
0000000001014995	cmpl	%ebx, 0x28(%rdx)
0000000001014998	jbe	0x10149dc
000000000101499a	movq	0x20(%rax), %rbx
000000000101499e	movq	0x20(%rbx), %rbx
00000000010149a2	movq	0x18(%rax), %rsi
00000000010149a6	cmpq	%rsi, %rbx
00000000010149a9	jne	0x1014a01
00000000010149ab	movq	0x8(%rdx), %rbx
00000000010149af	cmpq	%rax, %rbx
00000000010149b2	je	0x10149cc
00000000010149b4	movq	(%rdx), %rbx
00000000010149b7	cmpq	%rax, %rbx
00000000010149ba	jne	0x10149e6
00000000010149bc	movq	%rdx, 0x8(%rsp)
00000000010149c1	movq	%rcx, (%rsp)
00000000010149c5	callq	"runtime.(*mTreap).rotateLeft"
00000000010149ca	jmp	0x1014979
00000000010149cc	movq	%rdx, 0x8(%rsp)
00000000010149d1	movq	%rcx, (%rsp)
00000000010149d5	callq	"runtime.(*mTreap).rotateRight"
00000000010149da	jmp	0x1014979
00000000010149dc	movq	0x38(%rsp), %rbp
00000000010149e1	addq	$0x40, %rsp
00000000010149e5	retq
00000000010149e6	leaq	0x58f94(%rip), %rax
00000000010149ed	movq	%rax, (%rsp)
00000000010149f1	movq	$0x21, 0x8(%rsp)
00000000010149fa	callq	runtime.throw
00000000010149ff	ud2
0000000001014a01	movq	%rsi, 0x10(%rsp)
0000000001014a06	callq	runtime.printlock
0000000001014a0b	leaq	0x57290(%rip), %rax
0000000001014a12	movq	%rax, (%rsp)
0000000001014a16	movq	$0x13, 0x8(%rsp)
0000000001014a1f	callq	runtime.printstring
0000000001014a24	movq	0x30(%rsp), %rax
0000000001014a29	movq	%rax, (%rsp)
0000000001014a2d	callq	runtime.printpointer
0000000001014a32	leaq	0x56aeb(%rip), %rax
0000000001014a39	movq	%rax, (%rsp)
0000000001014a3d	movq	$0xe, 0x8(%rsp)
0000000001014a46	callq	runtime.printstring
0000000001014a4b	movq	0x10(%rsp), %rax
0000000001014a50	movq	%rax, (%rsp)
0000000001014a54	callq	runtime.printuint
0000000001014a59	callq	runtime.printnl
0000000001014a5e	callq	runtime.printunlock
0000000001014a63	movq	0x30(%rsp), %rax
0000000001014a68	movq	0x20(%rax), %rax
0000000001014a6c	movq	%rax, 0x28(%rsp)
0000000001014a71	movq	0x20(%rax), %rcx
0000000001014a75	movq	%rcx, 0x10(%rsp)
0000000001014a7a	callq	runtime.printlock
0000000001014a7f	leaq	0x57d72(%rip), %rax
0000000001014a86	movq	%rax, (%rsp)
0000000001014a8a	movq	$0x19, 0x8(%rsp)
0000000001014a93	callq	runtime.printstring
0000000001014a98	movq	0x28(%rsp), %rax
0000000001014a9d	movq	%rax, (%rsp)
0000000001014aa1	callq	runtime.printpointer
0000000001014aa6	leaq	0x5709f(%rip), %rax
0000000001014aad	movq	%rax, (%rsp)
0000000001014ab1	movq	$0x13, 0x8(%rsp)
0000000001014aba	callq	runtime.printstring
0000000001014abf	movq	0x10(%rsp), %rax
0000000001014ac4	movq	%rax, (%rsp)
0000000001014ac8	callq	runtime.printuint
0000000001014acd	callq	runtime.printnl
0000000001014ad2	callq	runtime.printunlock
0000000001014ad7	leaq	0x58fd3(%rip), %rax
0000000001014ade	movq	%rax, (%rsp)
0000000001014ae2	movq	$0x22, 0x8(%rsp)
0000000001014aeb	callq	runtime.throw
0000000001014af0	ud2
0000000001014af2	leaq	0x5897d(%rip), %rax
0000000001014af9	movq	%rax, (%rsp)
0000000001014afd	movq	$0x1f, 0x8(%rsp)
0000000001014b06	callq	runtime.throw
0000000001014b0b	ud2
0000000001014b0d	callq	runtime.morestack_noctxt
0000000001014b12	jmp	"runtime.(*mTreap).insert"
0000000001014b17	int3
0000000001014b18	int3
0000000001014b19	int3
0000000001014b1a	int3
0000000001014b1b	int3
0000000001014b1c	int3
0000000001014b1d	int3
0000000001014b1e	int3
0000000001014b1f	int3
runtime.(*mTreap).removeNode:
0000000001014b20	movq	%gs:0x30, %rcx
0000000001014b29	cmpq	0x10(%rcx), %rsp
0000000001014b2d	jbe	0x1014c46
0000000001014b33	subq	$0x18, %rsp
0000000001014b37	movq	%rbp, 0x10(%rsp)
0000000001014b3c	leaq	0x10(%rsp), %rbp
0000000001014b41	movq	0x28(%rsp), %rax
0000000001014b46	movq	0x20(%rax), %rcx
0000000001014b4a	movq	0x18(%rax), %rdx
0000000001014b4e	cmpq	%rdx, 0x20(%rcx)
0000000001014b52	jne	0x1014c2b
0000000001014b58	movq	0x20(%rsp), %rcx
0000000001014b5d	jmp	0x1014b6f
0000000001014b5f	movq	0x28(%rsp), %rdx
0000000001014b64	movq	0x20(%rsp), %rbx
0000000001014b69	movq	%rdx, %rax
0000000001014b6c	movq	%rbx, %rcx
0000000001014b6f	movq	(%rax), %rdx
0000000001014b72	testq	%rdx, %rdx
0000000001014b75	je	0x1014baa
0000000001014b77	je	0x1014b8a
0000000001014b79	movq	0x8(%rax), %rbx
0000000001014b7d	testq	%rbx, %rbx
0000000001014b80	je	0x1014b9a
0000000001014b82	movl	0x28(%rdx), %edx
0000000001014b85	cmpl	%edx, 0x28(%rbx)
0000000001014b88	jae	0x1014b9a
0000000001014b8a	movq	%rcx, (%rsp)
0000000001014b8e	movq	%rax, 0x8(%rsp)
0000000001014b93	callq	"runtime.(*mTreap).rotateRight"
0000000001014b98	jmp	0x1014b5f
0000000001014b9a	movq	%rcx, (%rsp)
0000000001014b9e	movq	%rax, 0x8(%rsp)
0000000001014ba3	callq	"runtime.(*mTreap).rotateLeft"
0000000001014ba8	jmp	0x1014b5f
0000000001014baa	cmpq	$0x0, 0x8(%rax)
0000000001014baf	je	0x1014bb6
0000000001014bb1	testq	%rdx, %rdx
0000000001014bb4	jmp	0x1014b77
0000000001014bb6	movq	0x10(%rax), %rdx
0000000001014bba	testq	%rdx, %rdx
0000000001014bbd	je	0x1014c22
0000000001014bbf	movq	0x8(%rdx), %rcx
0000000001014bc3	cmpq	%rax, %rcx
0000000001014bc6	jne	0x1014c19
0000000001014bc8	movq	$0x0, 0x8(%rdx)
0000000001014bd0	movq	$0x0, 0x20(%rax)
0000000001014bd8	movq	$0x0, 0x18(%rax)
0000000001014be0	leaq	0xabe01(%rip), %rcx
0000000001014be7	testb	%al, (%rcx)
0000000001014be9	movq	0xabe28(%rip), %rcx
0000000001014bf0	subq	0xabdf1(%rip), %rcx
0000000001014bf7	movq	%rcx, 0xabe1a(%rip)
0000000001014bfe	movq	0xabdfb(%rip), %rcx
0000000001014c05	movq	%rcx, (%rax)
0000000001014c08	movq	%rax, 0xabdf1(%rip)
0000000001014c0f	movq	0x10(%rsp), %rbp
0000000001014c14	addq	$0x18, %rsp
0000000001014c18	retq
0000000001014c19	movq	$0x0, (%rdx)
0000000001014c20	jmp	0x1014bd0
0000000001014c22	movq	$0x0, (%rcx)
0000000001014c29	jmp	0x1014bd0
0000000001014c2b	leaq	0x593cc(%rip), %rax
0000000001014c32	movq	%rax, (%rsp)
0000000001014c36	movq	$0x27, 0x8(%rsp)
0000000001014c3f	callq	runtime.throw
0000000001014c44	ud2
0000000001014c46	callq	runtime.morestack_noctxt
0000000001014c4b	jmp	"runtime.(*mTreap).removeNode"
runtime.(*mTreap).remove:
0000000001014c50	movq	%gs:0x30, %rcx
0000000001014c59	cmpq	0x10(%rcx), %rsp
0000000001014c5d	jbe	0x1014d06
0000000001014c63	subq	$0x20, %rsp
0000000001014c67	movq	%rbp, 0x18(%rsp)
0000000001014c6c	leaq	0x18(%rsp), %rbp
0000000001014c71	movq	0x28(%rsp), %rax
0000000001014c76	movq	(%rax), %rcx
0000000001014c79	movq	0x30(%rsp), %rdx
0000000001014c7e	testq	%rcx, %rcx
0000000001014c81	je	0x1014cd8
0000000001014c83	movq	0x20(%rcx), %rbx
0000000001014c87	testq	%rbx, %rbx
0000000001014c8a	je	0x1014ceb
0000000001014c8c	movq	0x18(%rcx), %rsi
0000000001014c90	cmpq	%rdx, %rsi
0000000001014c93	jae	0x1014c9a
0000000001014c95	movq	(%rcx), %rcx
0000000001014c98	jmp	0x1014c7e
0000000001014c9a	movq	%rbx, 0x10(%rsp)
0000000001014c9f	movq	0x8(%rcx), %rsi
0000000001014ca3	testq	%rsi, %rsi
0000000001014ca6	je	0x1014cb6
0000000001014ca8	movq	0x18(%rsi), %rdi
0000000001014cac	cmpq	%rdx, %rdi
0000000001014caf	jb	0x1014cb6
0000000001014cb1	movq	%rsi, %rcx
0000000001014cb4	jmp	0x1014c7e
0000000001014cb6	movq	%rax, (%rsp)
0000000001014cba	movq	%rcx, 0x8(%rsp)
0000000001014cbf	callq	"runtime.(*mTreap).removeNode"
0000000001014cc4	movq	0x10(%rsp), %rax
0000000001014cc9	movq	%rax, 0x38(%rsp)
0000000001014cce	movq	0x18(%rsp), %rbp
0000000001014cd3	addq	$0x20, %rsp
0000000001014cd7	retq
0000000001014cd8	movq	$0x0, 0x38(%rsp)
0000000001014ce1	movq	0x18(%rsp), %rbp
0000000001014ce6	addq	$0x20, %rsp
0000000001014cea	retq
0000000001014ceb	leaq	0x58cb0(%rip), %rax
0000000001014cf2	movq	%rax, (%rsp)
0000000001014cf6	movq	$0x21, 0x8(%rsp)
0000000001014cff	callq	runtime.throw
0000000001014d04	ud2
0000000001014d06	callq	runtime.morestack_noctxt
0000000001014d0b	jmp	"runtime.(*mTreap).remove"
runtime.(*mTreap).removeSpan:
0000000001014d10	movq	%gs:0x30, %rcx
0000000001014d19	cmpq	0x10(%rcx), %rsp
0000000001014d1d	jbe	0x1014d95
0000000001014d1f	subq	$0x18, %rsp
0000000001014d23	movq	%rbp, 0x10(%rsp)
0000000001014d28	leaq	0x10(%rsp), %rbp
0000000001014d2d	movq	0x28(%rsp), %rax
0000000001014d32	movq	0x20(%rax), %rcx
0000000001014d36	movq	0x20(%rsp), %rdx
0000000001014d3b	movq	(%rdx), %rbx
0000000001014d3e	movq	0x20(%rbx), %rsi
0000000001014d42	cmpq	%rax, %rsi
0000000001014d45	je	0x1014d7d
0000000001014d47	movq	0x18(%rbx), %rdi
0000000001014d4b	cmpq	%rcx, %rdi
0000000001014d4e	jae	0x1014d55
0000000001014d50	movq	(%rbx), %rbx
0000000001014d53	jmp	0x1014d3e
0000000001014d55	jbe	0x1014d5d
0000000001014d57	movq	0x8(%rbx), %rbx
0000000001014d5b	jmp	0x1014d3e
0000000001014d5d	movq	%rax, %rdi
0000000001014d60	cmpq	%rax, %rsi
0000000001014d63	jae	0x1014d70
0000000001014d65	movq	(%rbx), %rax
0000000001014d68	movq	%rax, %rbx
0000000001014d6b	movq	%rdi, %rax
0000000001014d6e	jmp	0x1014d3e
0000000001014d70	jbe	0x1014d78
0000000001014d72	movq	0x8(%rbx), %rax
0000000001014d76	jmp	0x1014d68
0000000001014d78	movq	%rbx, %rax
0000000001014d7b	jmp	0x1014d68
0000000001014d7d	movq	%rdx, (%rsp)
0000000001014d81	movq	%rbx, 0x8(%rsp)
0000000001014d86	callq	"runtime.(*mTreap).removeNode"
0000000001014d8b	movq	0x10(%rsp), %rbp
0000000001014d90	addq	$0x18, %rsp
0000000001014d94	retq
0000000001014d95	callq	runtime.morestack_noctxt
0000000001014d9a	jmp	"runtime.(*mTreap).removeSpan"
0000000001014d9f	int3
runtime.scavengetreap:
0000000001014da0	movq	%gs:0x30, %rcx
0000000001014da9	cmpq	0x10(%rcx), %rsp
0000000001014dad	jbe	0x1014e7c
0000000001014db3	subq	$0x30, %rsp
0000000001014db7	movq	%rbp, 0x28(%rsp)
0000000001014dbc	leaq	0x28(%rsp), %rbp
0000000001014dc1	movq	0x38(%rsp), %rax
0000000001014dc6	testq	%rax, %rax
0000000001014dc9	je	0x1014e69
0000000001014dcf	movq	%rax, (%rsp)
0000000001014dd3	movq	0x40(%rsp), %rcx
0000000001014dd8	movq	%rcx, 0x8(%rsp)
0000000001014ddd	movq	0x48(%rsp), %rdx
0000000001014de2	movq	%rdx, 0x10(%rsp)
0000000001014de7	callq	runtime.scavengeTreapNode
0000000001014dec	movq	0x18(%rsp), %rax
0000000001014df1	movq	%rax, 0x20(%rsp)
0000000001014df6	movq	0x38(%rsp), %rcx
0000000001014dfb	movq	0x8(%rcx), %rdx
0000000001014dff	movq	%rdx, (%rsp)
0000000001014e03	movq	0x40(%rsp), %rdx
0000000001014e08	movq	%rdx, 0x8(%rsp)
0000000001014e0d	movq	0x48(%rsp), %rbx
0000000001014e12	movq	%rbx, 0x10(%rsp)
0000000001014e17	callq	runtime.scavengetreap
0000000001014e1c	movq	0x20(%rsp), %rax
0000000001014e21	addq	0x18(%rsp), %rax
0000000001014e26	movq	%rax, 0x20(%rsp)
0000000001014e2b	movq	0x38(%rsp), %rcx
0000000001014e30	movq	(%rcx), %rcx
0000000001014e33	movq	%rcx, (%rsp)
0000000001014e37	movq	0x40(%rsp), %rcx
0000000001014e3c	movq	%rcx, 0x8(%rsp)
0000000001014e41	movq	0x48(%rsp), %rcx
0000000001014e46	movq	%rcx, 0x10(%rsp)
0000000001014e4b	callq	runtime.scavengetreap
0000000001014e50	movq	0x20(%rsp), %rax
0000000001014e55	addq	0x18(%rsp), %rax
0000000001014e5a	movq	%rax, 0x50(%rsp)
0000000001014e5f	movq	0x28(%rsp), %rbp
0000000001014e64	addq	$0x30, %rsp
0000000001014e68	retq
0000000001014e69	movq	$0x0, 0x50(%rsp)
0000000001014e72	movq	0x28(%rsp), %rbp
0000000001014e77	addq	$0x30, %rsp
0000000001014e7b	retq
0000000001014e7c	callq	runtime.morestack_noctxt
0000000001014e81	jmp	runtime.scavengetreap
0000000001014e86	int3
0000000001014e87	int3
0000000001014e88	int3
0000000001014e89	int3
0000000001014e8a	int3
0000000001014e8b	int3
0000000001014e8c	int3
0000000001014e8d	int3
0000000001014e8e	int3
0000000001014e8f	int3
runtime.(*mTreap).rotateLeft:
0000000001014e90	movq	%gs:0x30, %rcx
0000000001014e99	cmpq	0x10(%rcx), %rsp
0000000001014e9d	jbe	0x1014f47
0000000001014ea3	subq	$0x18, %rsp
0000000001014ea7	movq	%rbp, 0x10(%rsp)
0000000001014eac	leaq	0x10(%rsp), %rbp
0000000001014eb1	movq	0x28(%rsp), %rax
0000000001014eb6	movq	(%rax), %rcx
0000000001014eb9	movq	0x10(%rax), %rdx
0000000001014ebd	movq	0x8(%rax), %rbx
0000000001014ec1	movq	0x8(%rcx), %rsi
0000000001014ec5	movq	(%rcx), %rdi
0000000001014ec8	movq	%rax, 0x8(%rcx)
0000000001014ecc	movq	%rcx, 0x10(%rax)
0000000001014ed0	movq	%rdi, (%rcx)
0000000001014ed3	testq	%rdi, %rdi
0000000001014ed6	je	0x1014edc
0000000001014ed8	movq	%rcx, 0x10(%rdi)
0000000001014edc	movq	%rbx, 0x8(%rax)
0000000001014ee0	testq	%rbx, %rbx
0000000001014ee3	je	0x1014ee9
0000000001014ee5	movq	%rax, 0x10(%rbx)
0000000001014ee9	movq	%rsi, (%rax)
0000000001014eec	testq	%rsi, %rsi
0000000001014eef	je	0x1014ef5
0000000001014ef1	movq	%rax, 0x10(%rsi)
0000000001014ef5	movq	%rdx, 0x10(%rcx)
0000000001014ef9	testq	%rdx, %rdx
0000000001014efc	je	0x1014f22
0000000001014efe	movq	0x8(%rdx), %rbx
0000000001014f02	cmpq	%rax, %rbx
0000000001014f05	jne	0x1014f15
0000000001014f07	movq	%rcx, 0x8(%rdx)
0000000001014f0b	movq	0x10(%rsp), %rbp
0000000001014f10	addq	$0x18, %rsp
0000000001014f14	retq
0000000001014f15	movq	(%rdx), %rbx
0000000001014f18	cmpq	%rax, %rbx
0000000001014f1b	jne	0x1014f2c
0000000001014f1d	movq	%rcx, (%rdx)
0000000001014f20	jmp	0x1014f0b
0000000001014f22	movq	0x20(%rsp), %rax
0000000001014f27	movq	%rcx, (%rax)
0000000001014f2a	jmp	0x1014f0b
0000000001014f2c	leaq	0x57b9d(%rip), %rax
0000000001014f33	movq	%rax, (%rsp)
0000000001014f37	movq	$0x1b, 0x8(%rsp)
0000000001014f40	callq	runtime.throw
0000000001014f45	ud2
0000000001014f47	callq	runtime.morestack_noctxt
0000000001014f4c	jmp	"runtime.(*mTreap).rotateLeft"
0000000001014f51	int3
0000000001014f52	int3
0000000001014f53	int3
0000000001014f54	int3
0000000001014f55	int3
0000000001014f56	int3
0000000001014f57	int3
0000000001014f58	int3
0000000001014f59	int3
0000000001014f5a	int3
0000000001014f5b	int3
0000000001014f5c	int3
0000000001014f5d	int3
0000000001014f5e	int3
0000000001014f5f	int3
runtime.(*mTreap).rotateRight:
0000000001014f60	movq	%gs:0x30, %rcx
0000000001014f69	cmpq	0x10(%rcx), %rsp
0000000001014f6d	jbe	0x1015013
0000000001014f73	subq	$0x18, %rsp
0000000001014f77	movq	%rbp, 0x10(%rsp)
0000000001014f7c	leaq	0x10(%rsp), %rbp
0000000001014f81	movq	0x28(%rsp), %rax
0000000001014f86	movq	0x8(%rax), %rcx
0000000001014f8a	movq	0x10(%rax), %rdx
0000000001014f8e	movq	(%rax), %rbx
0000000001014f91	movq	0x8(%rcx), %rsi
0000000001014f95	movq	(%rcx), %rdi
0000000001014f98	testq	%rsi, %rsi
0000000001014f9b	je	0x1014fa1
0000000001014f9d	movq	%rcx, 0x10(%rsi)
0000000001014fa1	movq	%rax, (%rcx)
0000000001014fa4	movq	%rcx, 0x10(%rax)
0000000001014fa8	movq	%rdi, 0x8(%rax)
0000000001014fac	testq	%rdi, %rdi
0000000001014faf	je	0x1014fb5
0000000001014fb1	movq	%rax, 0x10(%rdi)
0000000001014fb5	movq	%rbx, (%rax)
0000000001014fb8	testq	%rbx, %rbx
0000000001014fbb	je	0x1014fc1
0000000001014fbd	movq	%rax, 0x10(%rbx)
0000000001014fc1	movq	%rdx, 0x10(%rcx)
0000000001014fc5	testq	%rdx, %rdx
0000000001014fc8	je	0x1014fee
0000000001014fca	movq	0x8(%rdx), %rbx
0000000001014fce	cmpq	%rax, %rbx
0000000001014fd1	jne	0x1014fe1
0000000001014fd3	movq	%rcx, 0x8(%rdx)
0000000001014fd7	movq	0x10(%rsp), %rbp
0000000001014fdc	addq	$0x18, %rsp
0000000001014fe0	retq
0000000001014fe1	movq	(%rdx), %rbx
0000000001014fe4	cmpq	%rax, %rbx
0000000001014fe7	jne	0x1014ff8
0000000001014fe9	movq	%rcx, (%rdx)
0000000001014fec	jmp	0x1014fd7
0000000001014fee	movq	0x20(%rsp), %rax
0000000001014ff3	movq	%rcx, (%rax)
0000000001014ff6	jmp	0x1014fd7
0000000001014ff8	leaq	0x57e5c(%rip), %rax
0000000001014fff	movq	%rax, (%rsp)
0000000001015003	movq	$0x1c, 0x8(%rsp)
000000000101500c	callq	runtime.throw
0000000001015011	ud2
0000000001015013	callq	runtime.morestack_noctxt
0000000001015018	jmp	"runtime.(*mTreap).rotateRight"
000000000101501d	int3
000000000101501e	int3
000000000101501f	int3
runtime.gcMarkRootPrepare:
0000000001015020	cmpl	$0x2, 0xbfad1(%rip)
0000000001015027	jne	0x10151a8
000000000101502d	movslq	runtime.gomaxprocs(%rip), %rax
0000000001015034	movq	%rax, 0xa3ddd(%rip)
000000000101503b	xorps	%xmm0, %xmm0
000000000101503e	movups	%xmm0, 0xa3ddb(%rip)
0000000001015045	leaq	0xa3df4(%rip), %rax
000000000101504c	cmpb	$0x0, (%rax)
000000000101504f	jne	0x10150ff
0000000001015055	movq	runtime.modulesSlice(%rip), %rcx
000000000101505c	testq	%rcx, %rcx
000000000101505f	je	0x101519f
0000000001015065	movq	0x8(%rcx), %rdx
0000000001015069	movq	(%rcx), %rcx
000000000101506c	xorl	%ebx, %ebx
000000000101506e	jmp	0x1015073
0000000001015070	incq	%rbx
0000000001015073	cmpq	%rdx, %rbx
0000000001015076	jge	0x10150aa
0000000001015078	movq	(%rcx,%rbx,8), %rsi
000000000101507c	movq	0x88(%rsi), %rdi
0000000001015083	subq	0x80(%rsi), %rdi
000000000101508a	movq	0xa3d8f(%rip), %rsi
0000000001015091	addq	$0x3ffff, %rdi
0000000001015098	shrq	$0x12, %rdi
000000000101509c	cmpq	%rsi, %rdi
000000000101509f	jle	0x1015070
00000000010150a1	movq	%rdi, 0xa3d78(%rip)
00000000010150a8	jmp	0x1015070
00000000010150aa	movq	runtime.modulesSlice(%rip), %rcx
00000000010150b1	testq	%rcx, %rcx
00000000010150b4	je	0x1015196
00000000010150ba	movq	(%rcx), %rdx
00000000010150bd	movq	0x8(%rcx), %rcx
00000000010150c1	xorl	%ebx, %ebx
00000000010150c3	jmp	0x10150c8
00000000010150c5	incq	%rbx
00000000010150c8	cmpq	%rcx, %rbx
00000000010150cb	jge	0x10150ff
00000000010150cd	movq	(%rdx,%rbx,8), %rsi
00000000010150d1	movq	0x98(%rsi), %rdi
00000000010150d8	subq	0x90(%rsi), %rdi
00000000010150df	movq	0xa3d42(%rip), %rsi
00000000010150e6	addq	$0x3ffff, %rdi
00000000010150ed	shrq	$0x12, %rdi
00000000010150f1	cmpq	%rsi, %rdi
00000000010150f4	jle	0x10150c5
00000000010150f6	movq	%rdi, 0xa3d2b(%rip)
00000000010150fd	jmp	0x10150c5
00000000010150ff	cmpb	$0x0, (%rax)
0000000001015102	je	0x101515a
0000000001015104	movups	%xmm0, 0xa3d25(%rip)
000000000101510b	cmpl	$0x0, 0xbfc26(%rip)
0000000001015112	jle	0x1015122
0000000001015114	movq	runtime.allglen(%rip), %rax
000000000101511b	movq	%rax, 0xa3d16(%rip)
0000000001015122	movl	$0x0, 0xa3cbc(%rip)
000000000101512c	movq	0xa3ce5(%rip), %rax
0000000001015133	addq	0xa3ce6(%rip), %rax
000000000101513a	addq	0xa3ce7(%rip), %rax
0000000001015141	addq	0xa3ce8(%rip), %rax
0000000001015148	addq	0xa3ce9(%rip), %rax
000000000101514f	addq	$0x2, %rax
0000000001015153	movl	%eax, 0xa3c93(%rip)
0000000001015159	retq
000000000101515a	movl	0xa9360(%rip), %eax
0000000001015160	shrl	%eax
0000000001015162	andl	$0x1, %eax
0000000001015165	leaq	(%rax,%rax,4), %rax
0000000001015169	leaq	0xa9378(%rip), %rcx
0000000001015170	leaq	0x20(%rcx,%rax,8), %rax
0000000001015175	movl	(%rax), %eax
0000000001015177	addl	$0x1ff, %eax
000000000101517c	shrl	$0x9, %eax
000000000101517f	movq	%rax, 0xa3caa(%rip)
0000000001015186	movq	runtime.allglen(%rip), %rax
000000000101518d	movq	%rax, 0xa3ca4(%rip)
0000000001015194	jmp	0x1015122
0000000001015196	xorl	%edx, %edx
0000000001015198	xorl	%ecx, %ecx
000000000101519a	jmp	0x10150c1
000000000101519f	xorl	%edx, %edx
00000000010151a1	xorl	%ecx, %ecx
00000000010151a3	jmp	0x101506c
00000000010151a8	movq	$0x0, 0xa3c65(%rip)
00000000010151b3	jmp	0x101503b
00000000010151b8	int3
00000000010151b9	int3
00000000010151ba	int3
00000000010151bb	int3
00000000010151bc	int3
00000000010151bd	int3
00000000010151be	int3
00000000010151bf	int3
runtime.gcMarkRootCheck:
00000000010151c0	movq	%gs:0x30, %rcx
00000000010151c9	cmpq	0x10(%rcx), %rsp
00000000010151cd	jbe	0x1015460
00000000010151d3	subq	$0x38, %rsp
00000000010151d7	movq	%rbp, 0x30(%rsp)
00000000010151dc	leaq	0x30(%rsp), %rbp
00000000010151e1	movl	0xa3c01(%rip), %eax
00000000010151e7	movl	0xa3bff(%rip), %ecx
00000000010151ed	cmpl	%ecx, %eax
00000000010151ef	jb	0x10153e7
00000000010151f5	leaq	runtime.allglock(%rip), %rax
00000000010151fc	movq	%rax, (%rsp)
0000000001015200	callq	runtime.lock
0000000001015205	cmpl	$0x2, 0xbf8ec(%rip)
000000000101520c	jne	0x1015276
000000000101520e	cmpl	$0x0, 0xbfb23(%rip)
0000000001015215	jle	0x1015276
0000000001015217	xorl	%eax, %eax
0000000001015219	jmp	0x101521e
000000000101521b	incq	%rax
000000000101521e	movq	0xa3613(%rip), %rcx
0000000001015225	movq	runtime.allgs(%rip), %rdx
000000000101522c	cmpq	%rcx, %rax
000000000101522f	jge	0x101525c
0000000001015231	movq	(%rdx,%rax,8), %rcx
0000000001015235	testb	%al, (%rcx)
0000000001015237	leaq	0xb4(%rcx), %rdx
000000000101523e	cmpb	$0x0, (%rdx)
0000000001015241	je	0x101524f
0000000001015243	leaq	0xb5(%rcx), %rdx
000000000101524a	cmpb	$0x0, (%rdx)
000000000101524d	jne	0x101521b
000000000101524f	movl	0x90(%rcx), %edx
0000000001015255	cmpl	$0x6, %edx
0000000001015258	je	0x101521b
000000000101525a	jmp	0x10152b2
000000000101525c	leaq	runtime.allglock(%rip), %rax
0000000001015263	movq	%rax, (%rsp)
0000000001015267	callq	runtime.unlock
000000000101526c	movq	0x30(%rsp), %rbp
0000000001015271	addq	$0x38, %rsp
0000000001015275	retq
0000000001015276	xorl	%eax, %eax
0000000001015278	jmp	0x101527d
000000000101527a	incq	%rax
000000000101527d	movq	0xa3bb4(%rip), %rcx
0000000001015284	cmpq	%rcx, %rax
0000000001015287	jge	0x101525c
0000000001015289	movq	runtime.allgs(%rip), %rcx
0000000001015290	movq	0xa35a1(%rip), %rdx
0000000001015297	cmpq	%rdx, %rax
000000000101529a	jae	0x10153e0
00000000010152a0	movq	(%rcx,%rax,8), %rcx
00000000010152a4	testb	%al, (%rcx)
00000000010152a6	leaq	0xb4(%rcx), %rdx
00000000010152ad	cmpb	$0x0, (%rdx)
00000000010152b0	jne	0x101527a
00000000010152b2	movq	%rcx, 0x28(%rsp)
00000000010152b7	movl	0x90(%rcx), %eax
00000000010152bd	movl	%eax, 0x14(%rsp)
00000000010152c1	movq	0x98(%rcx), %rdx
00000000010152c8	movq	%rdx, 0x20(%rsp)
00000000010152cd	movzbl	0xb4(%rcx), %ebx
00000000010152d4	movb	%bl, 0x13(%rsp)
00000000010152d8	movzbl	0xb5(%rcx), %esi
00000000010152df	movb	%sil, 0x12(%rsp)
00000000010152e4	callq	runtime.printlock
00000000010152e9	leaq	0x557f7(%rip), %rax
00000000010152f0	movq	%rax, (%rsp)
00000000010152f4	movq	$0x3, 0x8(%rsp)
00000000010152fd	callq	runtime.printstring
0000000001015302	movq	0x28(%rsp), %rax
0000000001015307	movq	%rax, (%rsp)
000000000101530b	callq	runtime.printpointer
0000000001015310	leaq	0x55934(%rip), %rax
0000000001015317	movq	%rax, (%rsp)
000000000101531b	movq	$0x6, 0x8(%rsp)
0000000001015324	callq	runtime.printstring
0000000001015329	movq	0x20(%rsp), %rax
000000000101532e	movq	%rax, (%rsp)
0000000001015332	callq	runtime.printint
0000000001015337	leaq	0x55afb(%rip), %rax
000000000101533e	movq	%rax, (%rsp)
0000000001015342	movq	$0x8, 0x8(%rsp)
000000000101534b	callq	runtime.printstring
0000000001015350	movl	0x14(%rsp), %eax
0000000001015354	movl	%eax, %eax
0000000001015356	movq	%rax, (%rsp)
000000000101535a	callq	runtime.printuint
000000000101535f	leaq	0x55ebe(%rip), %rax
0000000001015366	movq	%rax, (%rsp)
000000000101536a	movq	$0xc, 0x8(%rsp)
0000000001015373	callq	runtime.printstring
0000000001015378	movzbl	0x13(%rsp), %eax
000000000101537d	movb	%al, (%rsp)
0000000001015380	callq	runtime.printbool
0000000001015385	leaq	0x5601c(%rip), %rax
000000000101538c	movq	%rax, (%rsp)
0000000001015390	movq	$0xd, 0x8(%rsp)
0000000001015399	callq	runtime.printstring
000000000101539e	movzbl	0x12(%rsp), %eax
00000000010153a3	movb	%al, (%rsp)
00000000010153a6	callq	runtime.printbool
00000000010153ab	callq	runtime.printnl
00000000010153b0	callq	runtime.printunlock
00000000010153b5	leaq	runtime.allglock(%rip), %rax
00000000010153bc	movq	%rax, (%rsp)
00000000010153c0	callq	runtime.unlock
00000000010153c5	leaq	0x56331(%rip), %rax
00000000010153cc	movq	%rax, (%rsp)
00000000010153d0	movq	$0xf, 0x8(%rsp)
00000000010153d9	callq	runtime.throw
00000000010153de	ud2
00000000010153e0	callq	runtime.panicindex
00000000010153e5	ud2
00000000010153e7	movl	%eax, 0x1c(%rsp)
00000000010153eb	movl	%ecx, 0x18(%rsp)
00000000010153ef	callq	runtime.printlock
00000000010153f4	movl	0x1c(%rsp), %eax
00000000010153f8	movq	%rax, (%rsp)
00000000010153fc	callq	runtime.printuint
0000000001015401	leaq	0x556ff(%rip), %rax
0000000001015408	movq	%rax, (%rsp)
000000000101540c	movq	$0x4, 0x8(%rsp)
0000000001015415	callq	runtime.printstring
000000000101541a	movl	0x18(%rsp), %eax
000000000101541e	movq	%rax, (%rsp)
0000000001015422	callq	runtime.printuint
0000000001015427	leaq	0x568fa(%rip), %rax
000000000101542e	movq	%rax, (%rsp)
0000000001015432	movq	$0x14, 0x8(%rsp)
000000000101543b	callq	runtime.printstring
0000000001015440	callq	runtime.printunlock
0000000001015445	leaq	0x56fa8(%rip), %rax
000000000101544c	movq	%rax, (%rsp)
0000000001015450	movq	$0x17, 0x8(%rsp)
0000000001015459	callq	runtime.throw
000000000101545e	ud2
0000000001015460	callq	runtime.morestack_noctxt
0000000001015465	jmp	runtime.gcMarkRootCheck
000000000101546a	int3
000000000101546b	int3
000000000101546c	int3
000000000101546d	int3
000000000101546e	int3
000000000101546f	int3
runtime.markroot:
0000000001015470	movq	%gs:0x30, %rcx
0000000001015479	cmpq	0x10(%rcx), %rsp
000000000101547d	jbe	0x10157d5
0000000001015483	subq	$0x78, %rsp
0000000001015487	movq	%rbp, 0x70(%rsp)
000000000101548c	leaq	0x70(%rsp), %rbp
0000000001015491	movq	0xa3980(%rip), %rax
0000000001015498	leal	0x2(%rax), %ecx
000000000101549b	movq	0xa397e(%rip), %rdx
00000000010154a2	leal	0x2(%rdx,%rax), %ebx
00000000010154a6	addl	%edx, %eax
00000000010154a8	movq	0xa3979(%rip), %rdx
00000000010154af	leal	0x2(%rax,%rdx), %esi
00000000010154b3	addl	%edx, %eax
00000000010154b5	movq	0xa3974(%rip), %rdx
00000000010154bc	leal	0x2(%rax,%rdx), %edi
00000000010154c0	addl	%edx, %eax
00000000010154c2	movq	0xa396f(%rip), %rdx
00000000010154c9	leal	0x2(%rax,%rdx), %eax
00000000010154cd	movl	0x88(%rsp), %edx
00000000010154d4	cmpl	$0x2, %edx
00000000010154d7	jb	0x10154e1
00000000010154d9	cmpl	%ecx, %edx
00000000010154db	jb	0x10157a2
00000000010154e1	cmpl	%edx, %ecx
00000000010154e3	ja	0x1015598
00000000010154e9	cmpl	%ebx, %edx
00000000010154eb	jae	0x1015598
00000000010154f1	movq	runtime.modulesSlice(%rip), %rax
00000000010154f8	testq	%rax, %rax
00000000010154fb	je	0x101558f
0000000001015501	movq	0x8(%rax), %rbx
0000000001015505	movq	(%rax), %rax
0000000001015508	movl	%ecx, 0x28(%rsp)
000000000101550c	movq	%rbx, 0x30(%rsp)
0000000001015511	movq	%rax, 0x50(%rsp)
0000000001015516	xorl	%esi, %esi
0000000001015518	jmp	0x1015580
000000000101551a	movq	%rsi, 0x40(%rsp)
000000000101551f	movq	(%rax,%rsi,8), %rbx
0000000001015523	movq	0x80(%rbx), %rdi
000000000101552a	movq	0x88(%rbx), %r8
0000000001015531	movq	0x198(%rbx), %rbx
0000000001015538	movq	%rbx, 0x10(%rsp)
000000000101553d	movq	%rdi, (%rsp)
0000000001015541	subq	%rdi, %r8
0000000001015544	movq	%r8, 0x8(%rsp)
0000000001015549	movq	0x80(%rsp), %rbx
0000000001015551	movq	%rbx, 0x18(%rsp)
0000000001015556	subl	%ecx, %edx
0000000001015558	movq	%rdx, 0x20(%rsp)
000000000101555d	callq	runtime.markrootBlock
0000000001015562	movq	0x40(%rsp), %rax
0000000001015567	leaq	0x1(%rax), %rsi
000000000101556b	movq	0x50(%rsp), %rax
0000000001015570	movl	0x28(%rsp), %ecx
0000000001015574	movl	0x88(%rsp), %edx
000000000101557b	movq	0x30(%rsp), %rbx
0000000001015580	cmpq	%rbx, %rsi
0000000001015583	jl	0x101551a
0000000001015585	movq	0x70(%rsp), %rbp
000000000101558a	addq	$0x78, %rsp
000000000101558e	retq
000000000101558f	xorl	%ebx, %ebx
0000000001015591	xorl	%eax, %eax
0000000001015593	jmp	0x1015508
0000000001015598	cmpl	%edx, %ebx
000000000101559a	ja	0x101564a
00000000010155a0	cmpl	%esi, %edx
00000000010155a2	jae	0x101564a
00000000010155a8	movq	runtime.modulesSlice(%rip), %rax
00000000010155af	testq	%rax, %rax
00000000010155b2	je	0x1015641
00000000010155b8	movq	0x8(%rax), %rcx
00000000010155bc	movq	(%rax), %rax
00000000010155bf	movl	%ebx, 0x2c(%rsp)
00000000010155c3	movq	%rax, 0x50(%rsp)
00000000010155c8	movq	%rcx, 0x38(%rsp)
00000000010155cd	xorl	%esi, %esi
00000000010155cf	jmp	0x1015637
00000000010155d1	movq	%rsi, 0x40(%rsp)
00000000010155d6	movq	(%rax,%rsi,8), %rcx
00000000010155da	movq	0x90(%rcx), %rdi
00000000010155e1	movq	0x98(%rcx), %r8
00000000010155e8	movq	0x1a8(%rcx), %rcx
00000000010155ef	movq	%rcx, 0x10(%rsp)
00000000010155f4	movq	%rdi, (%rsp)
00000000010155f8	subq	%rdi, %r8
00000000010155fb	movq	%r8, 0x8(%rsp)
0000000001015600	movq	0x80(%rsp), %rcx
0000000001015608	movq	%rcx, 0x18(%rsp)
000000000101560d	subl	%ebx, %edx
000000000101560f	movq	%rdx, 0x20(%rsp)
0000000001015614	callq	runtime.markrootBlock
0000000001015619	movq	0x40(%rsp), %rax
000000000101561e	leaq	0x1(%rax), %rsi
0000000001015622	movq	0x50(%rsp), %rax
0000000001015627	movq	0x38(%rsp), %rcx
000000000101562c	movl	0x88(%rsp), %edx
0000000001015633	movl	0x2c(%rsp), %ebx
0000000001015637	cmpq	%rcx, %rsi
000000000101563a	jl	0x10155d1
000000000101563c	jmp	0x1015585
0000000001015641	xorl	%eax, %eax
0000000001015643	xorl	%ecx, %ecx
0000000001015645	jmp	0x10155bf
000000000101564a	testl	%edx, %edx
000000000101564c	jne	0x10156b6
000000000101564e	leaq	0xa37eb(%rip), %rax
0000000001015655	cmpb	$0x0, (%rax)
0000000001015658	jne	0x1015585
000000000101565e	movq	runtime.allfin(%rip), %rax
0000000001015665	jmp	0x10156ac
0000000001015667	movq	%rax, 0x48(%rsp)
000000000101566c	movl	0x10(%rax), %ecx
000000000101566f	leaq	0x18(%rax), %rdx
0000000001015673	leaq	runtime.finptrmask(%rip), %rbx
000000000101567a	movq	%rbx, 0x10(%rsp)
000000000101567f	movq	%rdx, (%rsp)
0000000001015683	movl	%ecx, %ecx
0000000001015685	leaq	(%rcx,%rcx,4), %rcx
0000000001015689	shlq	$0x3, %rcx
000000000101568d	movq	%rcx, 0x8(%rsp)
0000000001015692	movq	0x80(%rsp), %rcx
000000000101569a	movq	%rcx, 0x18(%rsp)
000000000101569f	callq	runtime.scanblock
00000000010156a4	movq	0x48(%rsp), %rax
00000000010156a9	movq	(%rax), %rax
00000000010156ac	testq	%rax, %rax
00000000010156af	jne	0x1015667
00000000010156b1	jmp	0x1015585
00000000010156b6	cmpl	$0x1, %edx
00000000010156b9	jne	0x10156e0
00000000010156bb	leaq	0xa377e(%rip), %rax
00000000010156c2	cmpb	$0x0, (%rax)
00000000010156c5	jne	0x1015585
00000000010156cb	leaq	0x5980e(%rip), %rax
00000000010156d2	movq	%rax, (%rsp)
00000000010156d6	callq	runtime.systemstack
00000000010156db	jmp	0x1015585
00000000010156e0	cmpl	%edx, %esi
00000000010156e2	ja	0x10156ec
00000000010156e4	cmpl	%edi, %edx
00000000010156e6	jb	0x1015785
00000000010156ec	cmpl	%edx, %edi
00000000010156ee	ja	0x10157ba
00000000010156f4	cmpl	%eax, %edx
00000000010156f6	jae	0x10157ba
00000000010156fc	movq	0xa3135(%rip), %rax
0000000001015703	movq	runtime.allgs(%rip), %rcx
000000000101570a	subl	%edi, %edx
000000000101570c	cmpq	%rax, %rdx
000000000101570f	jae	0x10157b3
0000000001015715	movq	(%rcx,%rdx,8), %rax
0000000001015719	movl	0x90(%rax), %ecx
000000000101571f	cmpl	$0x4, %ecx
0000000001015722	jne	0x101577e
0000000001015724	cmpq	$0x0, 0xa8(%rax)
000000000101572c	jne	0x101573c
000000000101572e	movq	0xa36c3(%rip), %rcx
0000000001015735	movq	%rcx, 0xa8(%rax)
000000000101573c	xorps	%xmm0, %xmm0
000000000101573f	movups	%xmm0, 0x58(%rsp)
0000000001015744	movq	$0x0, 0x68(%rsp)
000000000101574d	leaq	runtime.markroot.func1(%rip), %rcx
0000000001015754	movq	%rcx, 0x58(%rsp)
0000000001015759	movq	%rax, 0x60(%rsp)
000000000101575e	movq	0x80(%rsp), %rax
0000000001015766	movq	%rax, 0x68(%rsp)
000000000101576b	leaq	0x58(%rsp), %rax
0000000001015770	movq	%rax, (%rsp)
0000000001015774	callq	runtime.systemstack
0000000001015779	jmp	0x1015585
000000000101577e	cmpl	$0x3, %ecx
0000000001015781	je	0x1015724
0000000001015783	jmp	0x101573c
0000000001015785	movq	0x80(%rsp), %rax
000000000101578d	movq	%rax, (%rsp)
0000000001015791	subl	%esi, %edx
0000000001015793	movq	%rdx, 0x8(%rsp)
0000000001015798	callq	runtime.markrootSpans
000000000101579d	jmp	0x1015585
00000000010157a2	leal	-0x2(%rdx), %eax
00000000010157a5	movq	%rax, (%rsp)
00000000010157a9	callq	runtime.flushmcache
00000000010157ae	jmp	0x1015585
00000000010157b3	callq	runtime.panicindex
00000000010157b8	ud2
00000000010157ba	leaq	0x56449(%rip), %rax
00000000010157c1	movq	%rax, (%rsp)
00000000010157c5	movq	$0x13, 0x8(%rsp)
00000000010157ce	callq	runtime.throw
00000000010157d3	ud2
00000000010157d5	callq	runtime.morestack_noctxt
00000000010157da	jmp	runtime.markroot
00000000010157df	int3
runtime.markrootBlock:
00000000010157e0	movq	%gs:0x30, %rcx
00000000010157e9	cmpq	0x10(%rcx), %rsp
00000000010157ed	jbe	0x101587a
00000000010157f3	subq	$0x28, %rsp
00000000010157f7	movq	%rbp, 0x20(%rsp)
00000000010157fc	leaq	0x20(%rsp), %rbp
0000000001015801	movq	0x50(%rsp), %rax
0000000001015806	movq	%rax, %rcx
0000000001015809	shlq	$0x12, %rax
000000000101580d	movq	0x30(%rsp), %rdx
0000000001015812	leaq	(%rax,%rdx), %rbx
0000000001015816	movq	0x38(%rsp), %rsi
000000000101581b	addq	%rdx, %rsi
000000000101581e	cmpq	%rsi, %rbx
0000000001015821	jb	0x101582d
0000000001015823	movq	0x20(%rsp), %rbp
0000000001015828	addq	$0x28, %rsp
000000000101582c	retq
000000000101582d	movq	%rbx, (%rsp)
0000000001015831	leaq	0x40000(%rdx,%rax), %rax
0000000001015839	movq	%rsi, %rdx
000000000101583c	subq	%rbx, %rsi
000000000101583f	cmpq	%rdx, %rax
0000000001015842	movl	$0x40000, %eax
0000000001015847	cmovaq	%rsi, %rax
000000000101584b	movq	%rax, 0x8(%rsp)
0000000001015850	shlq	$0xc, %rcx
0000000001015854	movq	0x40(%rsp), %rax
0000000001015859	addq	%rcx, %rax
000000000101585c	movq	%rax, 0x10(%rsp)
0000000001015861	movq	0x48(%rsp), %rax
0000000001015866	movq	%rax, 0x18(%rsp)
000000000101586b	callq	runtime.scanblock
0000000001015870	movq	0x20(%rsp), %rbp
0000000001015875	addq	$0x28, %rsp
0000000001015879	retq
000000000101587a	callq	runtime.morestack_noctxt
000000000101587f	jmp	runtime.markrootBlock
0000000001015884	int3
0000000001015885	int3
0000000001015886	int3
0000000001015887	int3
0000000001015888	int3
0000000001015889	int3
000000000101588a	int3
000000000101588b	int3
000000000101588c	int3
000000000101588d	int3
000000000101588e	int3
000000000101588f	int3
runtime.markrootFreeGStacks:
0000000001015890	movq	%gs:0x30, %rcx
0000000001015899	cmpq	0x10(%rcx), %rsp
000000000101589d	jbe	0x10159bf
00000000010158a3	subq	$0x28, %rsp
00000000010158a7	movq	%rbp, 0x20(%rsp)
00000000010158ac	leaq	0x20(%rsp), %rbp
00000000010158b1	leaq	0xa3258(%rip), %rax
00000000010158b8	movq	%rax, (%rsp)
00000000010158bc	callq	runtime.lock
00000000010158c1	movq	0xa3250(%rip), %rax
00000000010158c8	movq	%rax, 0x10(%rsp)
00000000010158cd	cmpl	$0x0, 0xbf35c(%rip)
00000000010158d4	jne	0x10159ac
00000000010158da	movq	$0x0, 0xa3233(%rip)
00000000010158e5	leaq	0xa3224(%rip), %rax
00000000010158ec	movq	%rax, (%rsp)
00000000010158f0	callq	runtime.unlock
00000000010158f5	movq	0x10(%rsp), %rax
00000000010158fa	testq	%rax, %rax
00000000010158fd	je	0x10159a2
0000000001015903	movq	%rax, %rcx
0000000001015906	movq	%rcx, %rdx
0000000001015909	jmp	0x101592a
000000000101590b	movq	%rax, 0x18(%rsp)
0000000001015910	movq	%rax, (%rsp)
0000000001015914	callq	runtime.shrinkstack
0000000001015919	movq	0x18(%rsp), %rdx
000000000101591e	movq	0xa0(%rdx), %rax
0000000001015925	movq	0x10(%rsp), %rcx
000000000101592a	testq	%rax, %rax
000000000101592d	jne	0x101590b
000000000101592f	movq	%rdx, 0x8(%rsp)
0000000001015934	leaq	0xa31d5(%rip), %rax
000000000101593b	movq	%rax, (%rsp)
000000000101593f	callq	runtime.lock
0000000001015944	movq	0x8(%rsp), %rax
0000000001015949	leaq	0xa0(%rax), %rcx
0000000001015950	testb	%al, (%rcx)
0000000001015952	movq	0xa31c7(%rip), %rcx
0000000001015959	movq	%rcx, 0xa0(%rax)
0000000001015960	cmpl	$0x0, 0xbf2c9(%rip)
0000000001015967	jne	0x101598f
0000000001015969	movq	0x10(%rsp), %rax
000000000101596e	movq	%rax, 0xa31ab(%rip)
0000000001015975	leaq	0xa3194(%rip), %rax
000000000101597c	movq	%rax, (%rsp)
0000000001015980	callq	runtime.unlock
0000000001015985	movq	0x20(%rsp), %rbp
000000000101598a	addq	$0x28, %rsp
000000000101598e	retq
000000000101598f	leaq	0xa318a(%rip), %rdi
0000000001015996	movq	0x10(%rsp), %rax
000000000101599b	callq	runtime.gcWriteBarrier
00000000010159a0	jmp	0x1015975
00000000010159a2	movq	0x20(%rsp), %rbp
00000000010159a7	addq	$0x28, %rsp
00000000010159ab	retq
00000000010159ac	leaq	0xa3165(%rip), %rdi
00000000010159b3	xorl	%eax, %eax
00000000010159b5	callq	runtime.gcWriteBarrier
00000000010159ba	jmp	0x10158e5
00000000010159bf	callq	runtime.morestack_noctxt
00000000010159c4	jmp	runtime.markrootFreeGStacks
00000000010159c9	int3
00000000010159ca	int3
00000000010159cb	int3
00000000010159cc	int3
00000000010159cd	int3
00000000010159ce	int3
00000000010159cf	int3
runtime.markrootSpans:
00000000010159d0	movq	%gs:0x30, %rcx
00000000010159d9	cmpq	0x10(%rcx), %rsp
00000000010159dd	jbe	0x1015c02
00000000010159e3	subq	$0x68, %rsp
00000000010159e7	movq	%rbp, 0x60(%rsp)
00000000010159ec	leaq	0x60(%rsp), %rbp
00000000010159f1	leaq	0xa3448(%rip), %rax
00000000010159f8	cmpb	$0x0, (%rax)
00000000010159fb	jne	0x1015be7
0000000001015a01	movl	0xa8ab9(%rip), %eax
0000000001015a07	movl	%eax, 0x28(%rsp)
0000000001015a0b	shrl	%eax
0000000001015a0d	andl	$0x1, %eax
0000000001015a10	leaq	(%rax,%rax,4), %rax
0000000001015a14	leaq	0xa8acd(%rip), %rdx
0000000001015a1b	leaq	(%rdx,%rax,8), %rax
0000000001015a1f	movq	%rax, (%rsp)
0000000001015a23	movq	0x78(%rsp), %rax
0000000001015a28	movq	%rax, 0x8(%rsp)
0000000001015a2d	callq	"runtime.(*gcSweepBuf).block"
0000000001015a32	movq	0x18(%rsp), %rax
0000000001015a37	movq	%rax, 0x30(%rsp)
0000000001015a3c	movq	0x10(%rsp), %rcx
0000000001015a41	movq	%rcx, 0x40(%rsp)
0000000001015a46	movl	0x28(%rsp), %edx
0000000001015a4a	xorl	%ebx, %ebx
0000000001015a4c	jmp	0x1015a51
0000000001015a4e	incq	%rbx
0000000001015a51	cmpq	%rax, %rbx
0000000001015a54	jge	0x1015b6f
0000000001015a5a	movq	(%rcx,%rbx,8), %rsi
0000000001015a5e	cmpb	$0x1, 0x64(%rsi)
0000000001015a62	jne	0x1015a4e
0000000001015a64	leaq	runtime.useCheckmark(%rip), %rdi
0000000001015a6b	cmpb	$0x0, (%rdi)
0000000001015a6e	je	0x1015b60
0000000001015a74	cmpq	$0x0, 0x90(%rsi)
0000000001015a7c	je	0x1015a4e
0000000001015a7e	movq	%rbx, 0x38(%rsp)
0000000001015a83	movq	%rsi, 0x48(%rsp)
0000000001015a88	leaq	0x88(%rsi), %rax
0000000001015a8f	movq	%rax, 0x58(%rsp)
0000000001015a94	movq	%rax, (%rsp)
0000000001015a98	callq	runtime.lock
0000000001015a9d	movq	0x48(%rsp), %rax
0000000001015aa2	movq	0x90(%rax), %rcx
0000000001015aa9	jmp	0x1015aae
0000000001015aab	movq	(%rcx), %rcx
0000000001015aae	testq	%rcx, %rcx
0000000001015ab1	je	0x1015b3a
0000000001015ab7	cmpb	$0x1, 0xa(%rcx)
0000000001015abb	jne	0x1015aab
0000000001015abd	movzwl	0x8(%rcx), %edx
0000000001015ac1	movq	0x68(%rax), %rbx
0000000001015ac5	movq	0x18(%rax), %rsi
0000000001015ac9	testq	%rbx, %rbx
0000000001015acc	je	0x1015b79
0000000001015ad2	movq	%rcx, 0x50(%rsp)
0000000001015ad7	movq	%rdx, %rax
0000000001015ada	xorl	%edx, %edx
0000000001015adc	divq	%rbx
0000000001015adf	imulq	%rbx, %rax
0000000001015ae3	leaq	(%rsi,%rax), %rcx
0000000001015ae7	movq	%rcx, (%rsp)
0000000001015aeb	movq	0x70(%rsp), %rcx
0000000001015af0	movq	%rcx, 0x8(%rsp)
0000000001015af5	callq	runtime.scanobject
0000000001015afa	movq	0x50(%rsp), %rcx
0000000001015aff	leaq	0x10(%rcx), %rdx
0000000001015b03	leaq	runtime.oneptrmask(%rip), %rbx
0000000001015b0a	movq	%rbx, 0x10(%rsp)
0000000001015b0f	movq	%rdx, (%rsp)
0000000001015b13	movq	$0x8, 0x8(%rsp)
0000000001015b1c	movq	0x70(%rsp), %rdx
0000000001015b21	movq	%rdx, 0x18(%rsp)
0000000001015b26	callq	runtime.scanblock
0000000001015b2b	movq	0x48(%rsp), %rax
0000000001015b30	movq	0x50(%rsp), %rcx
0000000001015b35	jmp	0x1015aab
0000000001015b3a	movq	0x58(%rsp), %rax
0000000001015b3f	movq	%rax, (%rsp)
0000000001015b43	callq	runtime.unlock
0000000001015b48	movq	0x30(%rsp), %rax
0000000001015b4d	movq	0x40(%rsp), %rcx
0000000001015b52	movl	0x28(%rsp), %edx
0000000001015b56	movq	0x38(%rsp), %rbx
0000000001015b5b	jmp	0x1015a4e
0000000001015b60	movl	0x58(%rsi), %r8d
0000000001015b64	cmpl	%edx, %r8d
0000000001015b67	je	0x1015a74
0000000001015b6d	jmp	0x1015b80
0000000001015b6f	movq	0x60(%rsp), %rbp
0000000001015b74	addq	$0x68, %rsp
0000000001015b78	retq
0000000001015b79	callq	runtime.panicdivide
0000000001015b7e	ud2
0000000001015b80	movl	%r8d, 0x2c(%rsp)
0000000001015b85	callq	runtime.printlock
0000000001015b8a	leaq	0x5510e(%rip), %rax
0000000001015b91	movq	%rax, (%rsp)
0000000001015b95	movq	$0x6, 0x8(%rsp)
0000000001015b9e	callq	runtime.printstring
0000000001015ba3	movl	0x2c(%rsp), %eax
0000000001015ba7	movq	%rax, (%rsp)
0000000001015bab	callq	runtime.printuint
0000000001015bb0	callq	runtime.printsp
0000000001015bb5	movl	0x28(%rsp), %eax
0000000001015bb9	movq	%rax, (%rsp)
0000000001015bbd	callq	runtime.printuint
0000000001015bc2	callq	runtime.printnl
0000000001015bc7	callq	runtime.printunlock
0000000001015bcc	leaq	0x55c27(%rip), %rax
0000000001015bd3	movq	%rax, (%rsp)
0000000001015bd7	movq	$0x10, 0x8(%rsp)
0000000001015be0	callq	runtime.throw
0000000001015be5	ud2
0000000001015be7	leaq	0x58046(%rip), %rax
0000000001015bee	movq	%rax, (%rsp)
0000000001015bf2	movq	$0x24, 0x8(%rsp)
0000000001015bfb	callq	runtime.throw
0000000001015c00	ud2
0000000001015c02	callq	runtime.morestack_noctxt
0000000001015c07	jmp	runtime.markrootSpans
0000000001015c0c	int3
0000000001015c0d	int3
0000000001015c0e	int3
0000000001015c0f	int3
runtime.gcAssistAlloc:
0000000001015c10	movq	%gs:0x30, %rcx
0000000001015c19	cmpq	0x10(%rcx), %rsp
0000000001015c1d	jbe	0x1015e72
0000000001015c23	subq	$0x38, %rsp
0000000001015c27	movq	%rbp, 0x30(%rsp)
0000000001015c2c	leaq	0x30(%rsp), %rbp
0000000001015c31	movq	0x40(%rsp), %rax
0000000001015c36	movq	0x30(%rax), %rcx
0000000001015c3a	movq	%gs:0x30, %rdx
0000000001015c43	movq	(%rcx), %rcx
0000000001015c46	cmpq	%rcx, %rdx
0000000001015c49	je	0x1015e68
0000000001015c4f	movq	0x30(%rdx), %rcx
0000000001015c53	cmpl	$0x0, 0x100(%rcx)
0000000001015c5a	jg	0x1015e5e
0000000001015c60	cmpq	$0x0, 0xf8(%rcx)
0000000001015c68	jne	0x1015e5e
0000000001015c6e	xorl	%ecx, %ecx
0000000001015c70	jmp	0x1015c81
0000000001015c72	movq	0x40(%rsp), %rdx
0000000001015c77	movzbl	0xf(%rsp), %ebx
0000000001015c7c	movq	%rdx, %rax
0000000001015c7f	movl	%ebx, %ecx
0000000001015c81	movq	0x170(%rax), %rdx
0000000001015c88	negq	%rdx
0000000001015c8b	xorps	%xmm0, %xmm0
0000000001015c8e	cvtsi2sdq	%rdx, %xmm0
0000000001015c93	mulsd	0xbf385(%rip), %xmm0
0000000001015c9b	cvttsd2si	%xmm0, %rbx
0000000001015ca0	cmpq	$0x10000, %rbx
0000000001015ca7	jge	0x1015cc7
0000000001015ca9	movsd	0xbf377(%rip), %xmm0
0000000001015cb1	movsd	($f64.40f0000000000000)(%rip), %xmm1
0000000001015cb9	mulsd	%xmm0, %xmm1
0000000001015cbd	cvttsd2si	%xmm1, %rdx
0000000001015cc2	movl	$0x10000, %ebx
0000000001015cc7	movq	0xbf31a(%rip), %rsi
0000000001015cce	testq	%rsi, %rsi
0000000001015cd1	jle	0x1015d20
0000000001015cd3	cmpq	%rbx, %rsi
0000000001015cd6	jge	0x1015e48
0000000001015cdc	xorps	%xmm0, %xmm0
0000000001015cdf	cvtsi2sdq	%rsi, %xmm0
0000000001015ce4	mulsd	0xbf33c(%rip), %xmm0
0000000001015cec	cvttsd2si	%xmm0, %rdx
0000000001015cf1	addq	0x170(%rax), %rdx
0000000001015cf8	incq	%rdx
0000000001015cfb	movq	%rdx, 0x170(%rax)
0000000001015d02	movq	%rsi, %rdx
0000000001015d05	negq	%rsi
0000000001015d08	leaq	0xbf2d9(%rip), %rdi
0000000001015d0f	lock
0000000001015d10	xaddq	%rsi, (%rdi)
0000000001015d14	subq	%rdx, %rbx
0000000001015d17	testq	%rbx, %rbx
0000000001015d1a	je	0x1015e33
0000000001015d20	leaq	0xaecc9(%rip), %rdx
0000000001015d27	cmpb	$0x0, (%rdx)
0000000001015d2a	je	0x1015d39
0000000001015d2c	testb	%cl, %cl
0000000001015d2e	je	0x1015e15
0000000001015d34	movl	$0x1, %ecx
0000000001015d39	movb	%cl, 0xf(%rsp)
0000000001015d3d	xorps	%xmm0, %xmm0
0000000001015d40	movups	%xmm0, 0x18(%rsp)
0000000001015d45	movq	$0x0, 0x28(%rsp)
0000000001015d4e	leaq	runtime.gcAssistAlloc.func1(%rip), %rdx
0000000001015d55	movq	%rdx, 0x18(%rsp)
0000000001015d5a	movq	%rax, 0x20(%rsp)
0000000001015d5f	movq	%rbx, 0x28(%rsp)
0000000001015d64	leaq	0x18(%rsp), %rbx
0000000001015d69	movq	%rbx, (%rsp)
0000000001015d6d	callq	runtime.systemstack
0000000001015d72	movq	0x40(%rsp), %rax
0000000001015d77	movq	0x88(%rax), %rcx
0000000001015d7e	cmpq	$0x0, %rcx
0000000001015d82	cmpl	$0x0, 0xbeea7(%rip)
0000000001015d89	jne	0x1015dfb
0000000001015d8b	movq	$0x0, 0x88(%rax)
0000000001015d96	cmpq	$0x0, %rcx
0000000001015d9a	jne	0x1015def
0000000001015d9c	cmpq	$0x0, 0x170(%rax)
0000000001015da4	jge	0x1015dd5
0000000001015da6	leaq	0xb1(%rax), %rcx
0000000001015dad	cmpb	$0x0, (%rcx)
0000000001015db0	je	0x1015dc6
0000000001015db2	callq	runtime.Gosched
0000000001015db7	movq	0x40(%rsp), %rax
0000000001015dbc	movzbl	0xf(%rsp), %ecx
0000000001015dc1	jmp	0x1015c81
0000000001015dc6	callq	runtime.gcParkAssist
0000000001015dcb	cmpb	$0x0, (%rsp)
0000000001015dcf	je	0x1015c72
0000000001015dd5	movzbl	0xf(%rsp), %eax
0000000001015dda	testb	%al, %al
0000000001015ddc	jne	0x1015de8
0000000001015dde	movq	0x30(%rsp), %rbp
0000000001015de3	addq	$0x38, %rsp
0000000001015de7	retq
0000000001015de8	callq	runtime.traceGCMarkAssistDone
0000000001015ded	jmp	0x1015dde
0000000001015def	callq	runtime.gcMarkDone
0000000001015df4	movq	0x40(%rsp), %rax
0000000001015df9	jmp	0x1015d9c
0000000001015dfb	leaq	0x88(%rax), %rdi
0000000001015e02	movq	%rax, %rdx
0000000001015e05	xorl	%eax, %eax
0000000001015e07	callq	runtime.gcWriteBarrier
0000000001015e0c	cmpq	$0x0, %rcx
0000000001015e10	movq	%rdx, %rax
0000000001015e13	jmp	0x1015d9a
0000000001015e15	movq	%rbx, 0x10(%rsp)
0000000001015e1a	callq	runtime.traceGCMarkAssistStart
0000000001015e1f	movq	0x40(%rsp), %rax
0000000001015e24	movq	0x10(%rsp), %rbx
0000000001015e29	movl	$0x1, %ecx
0000000001015e2e	jmp	0x1015d39
0000000001015e33	testb	%cl, %cl
0000000001015e35	jne	0x1015e41
0000000001015e37	movq	0x30(%rsp), %rbp
0000000001015e3c	addq	$0x38, %rsp
0000000001015e40	retq
0000000001015e41	callq	runtime.traceGCMarkAssistDone
0000000001015e46	jmp	0x1015e37
0000000001015e48	addq	0x170(%rax), %rdx
0000000001015e4f	movq	%rdx, 0x170(%rax)
0000000001015e56	movq	%rbx, %rsi
0000000001015e59	jmp	0x1015d02
0000000001015e5e	movq	0x30(%rsp), %rbp
0000000001015e63	addq	$0x38, %rsp
0000000001015e67	retq
0000000001015e68	movq	0x30(%rsp), %rbp
0000000001015e6d	addq	$0x38, %rsp
0000000001015e71	retq
0000000001015e72	callq	runtime.morestack_noctxt
0000000001015e77	jmp	runtime.gcAssistAlloc
0000000001015e7c	int3
0000000001015e7d	int3
0000000001015e7e	int3
0000000001015e7f	int3
runtime.gcAssistAlloc1:
0000000001015e80	movq	%gs:0x30, %rcx
0000000001015e89	cmpq	0x18(%rcx), %rsp
0000000001015e8d	jbe	0x10161fd
0000000001015e93	subq	$0x50, %rsp
0000000001015e97	movq	%rbp, 0x48(%rsp)
0000000001015e9c	leaq	0x48(%rsp), %rbp
0000000001015ea1	movq	0x58(%rsp), %rcx
0000000001015ea6	testb	%al, (%rcx)
0000000001015ea8	leaq	0x88(%rcx), %rdi
0000000001015eaf	cmpl	$0x0, 0xbed7a(%rip)
0000000001015eb6	jne	0x10160cd
0000000001015ebc	movq	$0x0, 0x88(%rcx)
0000000001015ec7	movl	runtime.gcBlackenEnabled(%rip), %eax
0000000001015ecd	testl	%eax, %eax
0000000001015ecf	jne	0x1015ee6
0000000001015ed1	movq	$0x0, 0x170(%rcx)
0000000001015edc	movq	0x48(%rsp), %rbp
0000000001015ee1	addq	$0x50, %rsp
0000000001015ee5	retq
0000000001015ee6	movq	%rdi, 0x40(%rsp)
0000000001015eeb	callq	runtime.nanotime
0000000001015ef0	movq	(%rsp), %rax
0000000001015ef4	movl	$0xffffffff, %ecx
0000000001015ef9	leaq	0xa2f00(%rip), %rdx
0000000001015f00	lock
0000000001015f01	xaddl	%ecx, (%rdx)
0000000001015f04	decl	%ecx
0000000001015f06	movl	0xa2ee4(%rip), %ebx
0000000001015f0c	cmpl	%ebx, %ecx
0000000001015f0e	je	0x101617f
0000000001015f14	movq	%rax, 0x30(%rsp)
0000000001015f19	movq	0x58(%rsp), %rax
0000000001015f1e	movq	%rax, (%rsp)
0000000001015f22	movabsq	$0x400000002, %rcx
0000000001015f2c	movq	%rcx, 0x8(%rsp)
0000000001015f31	callq	runtime.casgstatus
0000000001015f36	movq	0x58(%rsp), %rax
0000000001015f3b	movb	$0x1, 0xb0(%rax)
0000000001015f42	movq	%gs:0x30, %rcx
0000000001015f4b	movq	0x30(%rcx), %rcx
0000000001015f4f	movq	0xd0(%rcx), %rdx
0000000001015f56	testb	%al, (%rdx)
0000000001015f58	testb	%al, (%rcx)
0000000001015f5a	leaq	0x1270(%rdx), %rcx
0000000001015f61	movq	%rcx, 0x38(%rsp)
0000000001015f66	movq	%rcx, (%rsp)
0000000001015f6a	movq	0x60(%rsp), %rdx
0000000001015f6f	movq	%rdx, 0x8(%rsp)
0000000001015f74	callq	runtime.gcDrainN
0000000001015f79	movq	0x10(%rsp), %rax
0000000001015f7e	movq	%rax, 0x28(%rsp)
0000000001015f83	leaq	runtime.gcBlackenPromptly(%rip), %rcx
0000000001015f8a	cmpb	$0x0, (%rcx)
0000000001015f8d	jne	0x10160ba
0000000001015f93	movq	0x58(%rsp), %rax
0000000001015f98	movq	%rax, (%rsp)
0000000001015f9c	movabsq	$0x200000004, %rcx
0000000001015fa6	movq	%rcx, 0x8(%rsp)
0000000001015fab	callq	runtime.casgstatus
0000000001015fb0	movq	0x28(%rsp), %rax
0000000001015fb5	xorps	%xmm0, %xmm0
0000000001015fb8	cvtsi2sdq	%rax, %xmm0
0000000001015fbd	mulsd	0xbf063(%rip), %xmm0
0000000001015fc5	cvttsd2si	%xmm0, %rax
0000000001015fca	movq	0x58(%rsp), %rcx
0000000001015fcf	addq	0x170(%rcx), %rax
0000000001015fd6	incq	%rax
0000000001015fd9	movq	%rax, 0x170(%rcx)
0000000001015fe0	movl	$0x1, %eax
0000000001015fe5	leaq	0xa2e14(%rip), %rdx
0000000001015fec	lock
0000000001015fed	xaddl	%eax, (%rdx)
0000000001015ff0	incl	%eax
0000000001015ff2	movl	0xa2df8(%rip), %edx
0000000001015ff8	cmpl	%edx, %eax
0000000001015ffa	ja	0x10160d9
0000000001016000	jne	0x101602d
0000000001016002	movq	runtime.work(%rip), %rdx
0000000001016009	testq	%rdx, %rdx
000000000101600c	jne	0x10160b0
0000000001016012	movl	0xa2dd4(%rip), %edx
0000000001016018	cmpl	%edx, 0xa2dca(%rip)
000000000101601e	jae	0x10160a9
0000000001016024	movl	$0x1, %eax
0000000001016029	testb	%al, %al
000000000101602b	je	0x1016088
000000000101602d	callq	runtime.nanotime
0000000001016032	movq	0x58(%rsp), %rax
0000000001016037	movq	0x30(%rax), %rax
000000000101603b	movq	0xd0(%rax), %rax
0000000001016042	testb	%al, (%rax)
0000000001016044	movq	(%rsp), %rcx
0000000001016048	movq	0x30(%rsp), %rdx
000000000101604d	subq	%rdx, %rcx
0000000001016050	addq	0x1248(%rax), %rcx
0000000001016057	movq	%rcx, 0x1248(%rax)
000000000101605e	cmpq	$0x1388, %rcx
0000000001016065	jle	0x101607e
0000000001016067	leaq	0xbef82(%rip), %rdx
000000000101606e	lock
000000000101606f	xaddq	%rcx, (%rdx)
0000000001016073	movq	$0x0, 0x1248(%rax)
000000000101607e	movq	0x48(%rsp), %rbp
0000000001016083	addq	$0x50, %rsp
0000000001016087	retq
0000000001016088	cmpl	$0x0, 0xbeba1(%rip)
000000000101608f	jne	0x101609a
0000000001016091	movq	%rcx, 0x88(%rcx)
0000000001016098	jmp	0x101602d
000000000101609a	movq	0x40(%rsp), %rdi
000000000101609f	movq	%rcx, %rax
00000000010160a2	callq	runtime.gcWriteBarrier
00000000010160a7	jmp	0x101602d
00000000010160a9	xorl	%eax, %eax
00000000010160ab	jmp	0x1016029
00000000010160b0	movl	$0x1, %eax
00000000010160b5	jmp	0x1016029
00000000010160ba	movq	0x38(%rsp), %rax
00000000010160bf	movq	%rax, (%rsp)
00000000010160c3	callq	"runtime.(*gcWork).dispose"
00000000010160c8	jmp	0x1015f93
00000000010160cd	xorl	%eax, %eax
00000000010160cf	callq	runtime.gcWriteBarrier
00000000010160d4	jmp	0x1015ec7
00000000010160d9	movl	%eax, 0x1c(%rsp)
00000000010160dd	movl	%edx, 0x24(%rsp)
00000000010160e1	callq	runtime.printlock
00000000010160e6	leaq	0x55f90(%rip), %rax
00000000010160ed	movq	%rax, (%rsp)
00000000010160f1	movq	$0x15, 0x8(%rsp)
00000000010160fa	callq	runtime.printstring
00000000010160ff	movl	0x1c(%rsp), %eax
0000000001016103	movq	%rax, (%rsp)
0000000001016107	callq	runtime.printuint
000000000101610c	leaq	0x552f0(%rip), %rax
0000000001016113	movq	%rax, (%rsp)
0000000001016117	movq	$0xd, 0x8(%rsp)
0000000001016120	callq	runtime.printstring
0000000001016125	movl	0x24(%rsp), %eax
0000000001016129	movq	%rax, (%rsp)
000000000101612d	callq	runtime.printuint
0000000001016132	leaq	0x55bdb(%rip), %rax
0000000001016139	movq	%rax, (%rsp)
000000000101613d	movq	$0x14, 0x8(%rsp)
0000000001016146	callq	runtime.printstring
000000000101614b	movzbl	runtime.gcBlackenPromptly(%rip), %eax
0000000001016152	movb	%al, (%rsp)
0000000001016155	callq	runtime.printbool
000000000101615a	callq	runtime.printnl
000000000101615f	callq	runtime.printunlock
0000000001016164	leaq	0x563f9(%rip), %rax
000000000101616b	movq	%rax, (%rsp)
000000000101616f	movq	$0x17, 0x8(%rsp)
0000000001016178	callq	runtime.throw
000000000101617d	ud2
000000000101617f	movl	%ecx, 0x20(%rsp)
0000000001016183	movl	%ebx, 0x24(%rsp)
0000000001016187	callq	runtime.printlock
000000000101618c	leaq	0x56088(%rip), %rax
0000000001016193	movq	%rax, (%rsp)
0000000001016197	movq	$0x16, 0x8(%rsp)
00000000010161a0	callq	runtime.printstring
00000000010161a5	movl	0x20(%rsp), %eax
00000000010161a9	movq	%rax, (%rsp)
00000000010161ad	callq	runtime.printuint
00000000010161b2	leaq	0x5524a(%rip), %rax
00000000010161b9	movq	%rax, (%rsp)
00000000010161bd	movq	$0xd, 0x8(%rsp)
00000000010161c6	callq	runtime.printstring
00000000010161cb	movl	0x24(%rsp), %eax
00000000010161cf	movq	%rax, (%rsp)
00000000010161d3	callq	runtime.printuint
00000000010161d8	callq	runtime.printnl
00000000010161dd	callq	runtime.printunlock
00000000010161e2	leaq	0x55a47(%rip), %rax
00000000010161e9	movq	%rax, (%rsp)
00000000010161ed	movq	$0x13, 0x8(%rsp)
00000000010161f6	callq	runtime.throw
00000000010161fb	ud2
00000000010161fd	callq	runtime.morestackc
0000000001016202	jmp	runtime.gcAssistAlloc1
0000000001016207	int3
0000000001016208	int3
0000000001016209	int3
000000000101620a	int3
000000000101620b	int3
000000000101620c	int3
000000000101620d	int3
000000000101620e	int3
000000000101620f	int3
runtime.gcWakeAllAssists:
0000000001016210	movq	%gs:0x30, %rcx
0000000001016219	cmpq	0x10(%rcx), %rsp
000000000101621d	jbe	0x101628b
000000000101621f	subq	$0x10, %rsp
0000000001016223	movq	%rbp, 0x8(%rsp)
0000000001016228	leaq	0x8(%rsp), %rbp
000000000101622d	leaq	0xa2c4c(%rip), %rax
0000000001016234	movq	%rax, (%rsp)
0000000001016238	callq	runtime.lock
000000000101623d	movq	0xa2c44(%rip), %rax
0000000001016244	movq	%rax, (%rsp)
0000000001016248	callq	runtime.injectglist
000000000101624d	leaq	0xa2c34(%rip), %rax
0000000001016254	testb	%al, (%rax)
0000000001016256	xorl	%eax, %eax
0000000001016258	movq	%rax, 0xa2c29(%rip)
000000000101625f	leaq	0xa2c2a(%rip), %rax
0000000001016266	testb	%al, (%rax)
0000000001016268	xorl	%eax, %eax
000000000101626a	movq	%rax, 0xa2c1f(%rip)
0000000001016271	leaq	0xa2c08(%rip), %rax
0000000001016278	movq	%rax, (%rsp)
000000000101627c	callq	runtime.unlock
0000000001016281	movq	0x8(%rsp), %rbp
0000000001016286	addq	$0x10, %rsp
000000000101628a	retq
000000000101628b	callq	runtime.morestack_noctxt
0000000001016290	jmp	runtime.gcWakeAllAssists
0000000001016295	int3
0000000001016296	int3
0000000001016297	int3
0000000001016298	int3
0000000001016299	int3
000000000101629a	int3
000000000101629b	int3
000000000101629c	int3
000000000101629d	int3
000000000101629e	int3
000000000101629f	int3
runtime.gcParkAssist:
00000000010162a0	movq	%gs:0x30, %rcx
00000000010162a9	cmpq	0x10(%rcx), %rsp
00000000010162ad	jbe	0x10163f3
00000000010162b3	subq	$0x20, %rsp
00000000010162b7	movq	%rbp, 0x18(%rsp)
00000000010162bc	leaq	0x18(%rsp), %rbp
00000000010162c1	leaq	0xa2bb8(%rip), %rax
00000000010162c8	movq	%rax, (%rsp)
00000000010162cc	callq	runtime.lock
00000000010162d1	movl	runtime.gcBlackenEnabled(%rip), %eax
00000000010162d7	testl	%eax, %eax
00000000010162d9	je	0x10163d4
00000000010162df	movq	%gs:0x30, %rax
00000000010162e8	movq	0xa2b99(%rip), %rcx
00000000010162ef	movq	0xa2b9a(%rip), %rdx
00000000010162f6	testq	%rcx, %rcx
00000000010162f9	jne	0x10163b6
00000000010162ff	leaq	0xa2b82(%rip), %rbx
0000000001016306	testb	%al, (%rbx)
0000000001016308	movq	%rax, %rbx
000000000101630b	movq	%rax, 0xa2b76(%rip)
0000000001016312	leaq	0xa2b77(%rip), %rax
0000000001016319	testb	%al, (%rax)
000000000101631b	movq	%rbx, %rax
000000000101631e	movq	%rbx, 0xa2b6b(%rip)
0000000001016325	leaq	0xa0(%rax), %rbx
000000000101632c	testb	%al, (%rbx)
000000000101632e	xorl	%ebx, %ebx
0000000001016330	movq	%rbx, 0xa0(%rax)
0000000001016337	movq	0xbecaa(%rip), %rax
000000000101633e	testq	%rax, %rax
0000000001016341	jle	0x1016387
0000000001016343	movq	%rcx, 0xa2b3e(%rip)
000000000101634a	movq	%rdx, 0xa2b3f(%rip)
0000000001016351	testq	%rdx, %rdx
0000000001016354	je	0x1016368
0000000001016356	leaq	0xa0(%rdx), %rax
000000000101635d	testb	%al, (%rax)
000000000101635f	xorl	%eax, %eax
0000000001016361	movq	%rax, 0xa0(%rdx)
0000000001016368	leaq	0xa2b11(%rip), %rax
000000000101636f	movq	%rax, (%rsp)
0000000001016373	callq	runtime.unlock
0000000001016378	movb	$0x0, 0x28(%rsp)
000000000101637d	movq	0x18(%rsp), %rbp
0000000001016382	addq	$0x20, %rsp
0000000001016386	retq
0000000001016387	leaq	0xa2af2(%rip), %rax
000000000101638e	movq	%rax, (%rsp)
0000000001016392	movw	$0x2a0b, 0x8(%rsp)
0000000001016399	movq	$0x2, 0x10(%rsp)
00000000010163a2	callq	runtime.goparkunlock
00000000010163a7	movb	$0x1, 0x28(%rsp)
00000000010163ac	movq	0x18(%rsp), %rbp
00000000010163b1	addq	$0x20, %rsp
00000000010163b5	retq
00000000010163b6	movq	%rdx, %rsi
00000000010163b9	leaq	0xa0(%rdx), %rdi
00000000010163c0	testb	%al, (%rdi)
00000000010163c2	movq	%rax, %rbx
00000000010163c5	movq	%rax, 0xa0(%rdx)
00000000010163cc	movq	%rsi, %rdx
00000000010163cf	jmp	0x1016312
00000000010163d4	leaq	0xa2aa5(%rip), %rax
00000000010163db	movq	%rax, (%rsp)
00000000010163df	callq	runtime.unlock
00000000010163e4	movb	$0x1, 0x28(%rsp)
00000000010163e9	movq	0x18(%rsp), %rbp
00000000010163ee	addq	$0x20, %rsp
00000000010163f2	retq
00000000010163f3	callq	runtime.morestack_noctxt
00000000010163f8	jmp	runtime.gcParkAssist
00000000010163fd	int3
00000000010163fe	int3
00000000010163ff	int3
runtime.gcFlushBgCredit:
0000000001016400	movq	%gs:0x30, %rcx
0000000001016409	cmpq	0x10(%rcx), %rsp
000000000101640d	jbe	0x10165bf
0000000001016413	subq	$0x38, %rsp
0000000001016417	movq	%rbp, 0x30(%rsp)
000000000101641c	leaq	0x30(%rsp), %rbp
0000000001016421	cmpq	$0x0, 0xa2a5f(%rip)
0000000001016429	je	0x10165a4
000000000101642f	movq	0x40(%rsp), %rax
0000000001016434	xorps	%xmm0, %xmm0
0000000001016437	cvtsi2sdq	%rax, %xmm0
000000000101643c	mulsd	0xbebe4(%rip), %xmm0
0000000001016444	movsd	%xmm0, 0x20(%rsp)
000000000101644a	leaq	0xa2a2f(%rip), %rax
0000000001016451	movq	%rax, (%rsp)
0000000001016455	callq	runtime.lock
000000000101645a	movsd	0x20(%rsp), %xmm0
0000000001016460	cvttsd2si	%xmm0, %rax
0000000001016465	movq	0xa2a1c(%rip), %rcx
000000000101646c	jmp	0x10164ab
000000000101646e	movq	%rax, 0x18(%rsp)
0000000001016473	movq	$0x0, 0x170(%rcx)
000000000101647e	movq	0xa0(%rcx), %rax
0000000001016485	movq	%rax, 0x28(%rsp)
000000000101648a	movq	%rcx, (%rsp)
000000000101648e	movq	$0x0, 0x8(%rsp)
0000000001016497	movb	$0x0, 0x10(%rsp)
000000000101649c	callq	runtime.ready
00000000010164a1	movq	0x18(%rsp), %rax
00000000010164a6	movq	0x28(%rsp), %rcx
00000000010164ab	testq	%rcx, %rcx
00000000010164ae	je	0x1016596
00000000010164b4	testq	%rax, %rax
00000000010164b7	jle	0x101658b
00000000010164bd	movq	0x170(%rcx), %rdx
00000000010164c4	addq	%rdx, %rax
00000000010164c7	testq	%rax, %rax
00000000010164ca	jge	0x101646e
00000000010164cc	movq	%rax, 0x170(%rcx)
00000000010164d3	movq	0xa0(%rcx), %rax
00000000010164da	testq	%rax, %rax
00000000010164dd	je	0x1016586
00000000010164e3	movq	$0x0, 0xa0(%rcx)
00000000010164ee	movq	0xa299b(%rip), %rdx
00000000010164f5	leaq	0xa0(%rdx), %rbx
00000000010164fc	testb	%al, (%rbx)
00000000010164fe	movq	%rcx, %rbx
0000000001016501	movq	%rcx, 0xa0(%rdx)
0000000001016508	leaq	0xa2981(%rip), %rcx
000000000101650f	testb	%al, (%rcx)
0000000001016511	movq	%rbx, 0xa2978(%rip)
0000000001016518	xorl	%ecx, %ecx
000000000101651a	leaq	0xa2967(%rip), %rdx
0000000001016521	testb	%al, (%rdx)
0000000001016523	movq	%rax, %rdx
0000000001016526	movq	%rax, 0xa295b(%rip)
000000000101652d	testq	%rdx, %rdx
0000000001016530	je	0x1016572
0000000001016532	testq	%rcx, %rcx
0000000001016535	jle	0x1016558
0000000001016537	xorps	%xmm0, %xmm0
000000000101653a	cvtsi2sdq	%rcx, %xmm0
000000000101653f	mulsd	0xbead9(%rip), %xmm0
0000000001016547	cvttsd2si	%xmm0, %rax
000000000101654c	leaq	0xbea95(%rip), %rcx
0000000001016553	lock
0000000001016554	xaddq	%rax, (%rcx)
0000000001016558	leaq	0xa2921(%rip), %rax
000000000101655f	movq	%rax, (%rsp)
0000000001016563	callq	runtime.unlock
0000000001016568	movq	0x30(%rsp), %rbp
000000000101656d	addq	$0x38, %rsp
0000000001016571	retq
0000000001016572	leaq	0xa2917(%rip), %rax
0000000001016579	testb	%al, (%rax)
000000000101657b	xorl	%eax, %eax
000000000101657d	movq	%rax, 0xa290c(%rip)
0000000001016584	jmp	0x1016532
0000000001016586	movq	%rcx, %rax
0000000001016589	jmp	0x1016518
000000000101658b	movq	%rax, %rdx
000000000101658e	movq	%rcx, %rax
0000000001016591	movq	%rdx, %rcx
0000000001016594	jmp	0x101651a
0000000001016596	movq	%rax, %rdx
0000000001016599	movq	%rcx, %rax
000000000101659c	movq	%rdx, %rcx
000000000101659f	jmp	0x101651a
00000000010165a4	movq	0x40(%rsp), %rax
00000000010165a9	leaq	0xbea38(%rip), %rcx
00000000010165b0	lock
00000000010165b1	xaddq	%rax, (%rcx)
00000000010165b5	movq	0x30(%rsp), %rbp
00000000010165ba	addq	$0x38, %rsp
00000000010165be	retq
00000000010165bf	callq	runtime.morestack_noctxt
00000000010165c4	jmp	runtime.gcFlushBgCredit
00000000010165c9	int3
00000000010165ca	int3
00000000010165cb	int3
00000000010165cc	int3
00000000010165cd	int3
00000000010165ce	int3
00000000010165cf	int3
runtime.scanstack:
00000000010165d0	movq	%gs:0x30, %rcx
00000000010165d9	leaq	-0x110(%rsp), %rax
00000000010165e1	cmpq	0x18(%rcx), %rax
00000000010165e5	jbe	0x1016a63
00000000010165eb	subq	$0x190, %rsp
00000000010165f2	movq	%rbp, 0x188(%rsp)
00000000010165fa	leaq	0x188(%rsp), %rbp
0000000001016602	movq	0x198(%rsp), %rax
000000000101660a	testb	%al, (%rax)
000000000101660c	leaq	0xb5(%rax), %rcx
0000000001016613	cmpb	$0x0, (%rcx)
0000000001016616	jne	0x10167f2
000000000101661c	movl	0x90(%rax), %ecx
0000000001016622	btl	$0xc, %ecx
0000000001016626	jae	0x10169aa
000000000101662c	movl	0x90(%rax), %ecx
0000000001016632	btrl	$0xc, %ecx
0000000001016636	cmpl	$0x2, %ecx
0000000001016639	ja	0x10167cd
000000000101663f	cmpl	$0x1, %ecx
0000000001016642	jne	0x10167c2
0000000001016648	movq	%gs:0x30, %rcx
0000000001016651	cmpq	%rcx, %rax
0000000001016654	je	0x101681d
000000000101665a	movq	0x30(%rax), %rcx
000000000101665e	testq	%rcx, %rcx
0000000001016661	je	0x1016670
0000000001016663	cmpl	$0x0, 0x10c(%rcx)
000000000101666a	jne	0x1016802
0000000001016670	leaq	0xa27c9(%rip), %rcx
0000000001016677	cmpb	$0x0, (%rcx)
000000000101667a	je	0x10167ac
0000000001016680	cmpq	$0x0, 0x50(%rax)
0000000001016685	jne	0x1016770
000000000101668b	leaq	0x70(%rsp), %rdi
0000000001016690	xorps	%xmm0, %xmm0
0000000001016693	movq	%rbp, -0x10(%rsp)
0000000001016698	leaq	-0x10(%rsp), %rbp
000000000101669d	callq	0x10491f4
00000000010166a2	movq	(%rbp), %rbp
00000000010166a6	movups	%xmm0, 0x170(%rsp)
00000000010166ae	movq	$0x0, 0x180(%rsp)
00000000010166ba	leaq	runtime.scanstack.func1(%rip), %rcx
00000000010166c1	movq	%rcx, 0x170(%rsp)
00000000010166c9	leaq	0x70(%rsp), %rcx
00000000010166ce	movq	%rcx, 0x178(%rsp)
00000000010166d6	movq	0x1a0(%rsp), %rcx
00000000010166de	movq	%rcx, 0x180(%rsp)
00000000010166e6	movq	$-0x1, (%rsp)
00000000010166ee	movq	$-0x1, 0x8(%rsp)
00000000010166f7	movq	$0x0, 0x10(%rsp)
0000000001016700	movq	%rax, 0x18(%rsp)
0000000001016705	movups	%xmm0, 0x20(%rsp)
000000000101670a	movq	$0x7fffffff, 0x30(%rsp)
0000000001016713	leaq	0x170(%rsp), %rcx
000000000101671b	movq	%rcx, 0x38(%rsp)
0000000001016720	movups	%xmm0, 0x40(%rsp)
0000000001016725	callq	runtime.gentraceback
000000000101672a	movq	0x198(%rsp), %rax
0000000001016732	movq	%rax, (%rsp)
0000000001016736	leaq	0x170(%rsp), %rcx
000000000101673e	movq	%rcx, 0x8(%rsp)
0000000001016743	movq	$0x0, 0x10(%rsp)
000000000101674c	callq	runtime.tracebackdefers
0000000001016751	movq	0x198(%rsp), %rax
0000000001016759	movb	$0x1, 0xb5(%rax)
0000000001016760	movq	0x188(%rsp), %rbp
0000000001016768	addq	$0x190, %rsp
000000000101676f	retq
0000000001016770	leaq	0x50(%rax), %rcx
0000000001016774	leaq	runtime.oneptrmask(%rip), %rdx
000000000101677b	movq	%rdx, 0x10(%rsp)
0000000001016780	movq	%rcx, (%rsp)
0000000001016784	movq	$0x8, 0x8(%rsp)
000000000101678d	movq	0x1a0(%rsp), %rcx
0000000001016795	movq	%rcx, 0x18(%rsp)
000000000101679a	callq	runtime.scanblock
000000000101679f	movq	0x198(%rsp), %rax
00000000010167a7	jmp	0x101668b
00000000010167ac	movq	%rax, (%rsp)
00000000010167b0	callq	runtime.shrinkstack
00000000010167b5	movq	0x198(%rsp), %rax
00000000010167bd	jmp	0x1016680
00000000010167c2	cmpl	$0x2, %ecx
00000000010167c5	jne	0x10168f1
00000000010167cb	jmp	0x1016838
00000000010167cd	leal	-0x3(%rcx), %edx
00000000010167d0	cmpl	$0x1, %edx
00000000010167d3	jbe	0x1016648
00000000010167d9	cmpl	$0x6, %ecx
00000000010167dc	jne	0x10168f1
00000000010167e2	movq	0x188(%rsp), %rbp
00000000010167ea	addq	$0x190, %rsp
00000000010167f1	retq
00000000010167f2	movq	0x188(%rsp), %rbp
00000000010167fa	addq	$0x190, %rsp
0000000001016801	retq
0000000001016802	leaq	0x55f40(%rip), %rax
0000000001016809	movq	%rax, (%rsp)
000000000101680d	movq	$0x19, 0x8(%rsp)
0000000001016816	callq	runtime.throw
000000000101681b	ud2
000000000101681d	leaq	0x55d9f(%rip), %rax
0000000001016824	movq	%rax, (%rsp)
0000000001016828	movq	$0x18, 0x8(%rsp)
0000000001016831	callq	runtime.throw
0000000001016836	ud2
0000000001016838	movl	0x90(%rax), %ecx
000000000101683e	movl	%ecx, 0x5c(%rsp)
0000000001016842	movq	0x98(%rax), %rdx
0000000001016849	movq	%rdx, 0x68(%rsp)
000000000101684e	callq	runtime.printlock
0000000001016853	leaq	0x54b0e(%rip), %rax
000000000101685a	movq	%rax, (%rsp)
000000000101685e	movq	$0xc, 0x8(%rsp)
0000000001016867	callq	runtime.printstring
000000000101686c	movq	0x198(%rsp), %rax
0000000001016874	movq	%rax, (%rsp)
0000000001016878	callq	runtime.printpointer
000000000101687d	leaq	0x54459(%rip), %rax
0000000001016884	movq	%rax, (%rsp)
0000000001016888	movq	$0x7, 0x8(%rsp)
0000000001016891	callq	runtime.printstring
0000000001016896	movq	0x68(%rsp), %rax
000000000101689b	movq	%rax, (%rsp)
000000000101689f	callq	runtime.printint
00000000010168a4	leaq	0x552c7(%rip), %rax
00000000010168ab	movq	%rax, (%rsp)
00000000010168af	movq	$0x13, 0x8(%rsp)
00000000010168b8	callq	runtime.printstring
00000000010168bd	movl	0x5c(%rsp), %eax
00000000010168c1	movl	%eax, %eax
00000000010168c3	movq	%rax, (%rsp)
00000000010168c7	callq	runtime.printuint
00000000010168cc	callq	runtime.printnl
00000000010168d1	callq	runtime.printunlock
00000000010168d6	leaq	0x56e12(%rip), %rax
00000000010168dd	movq	%rax, (%rsp)
00000000010168e1	movq	$0x20, 0x8(%rsp)
00000000010168ea	callq	runtime.throw
00000000010168ef	ud2
00000000010168f1	movl	0x90(%rax), %ecx
00000000010168f7	movl	%ecx, 0x64(%rsp)
00000000010168fb	movq	0x98(%rax), %rdx
0000000001016902	movq	%rdx, 0x68(%rsp)
0000000001016907	callq	runtime.printlock
000000000101690c	leaq	0x54a55(%rip), %rax
0000000001016913	movq	%rax, (%rsp)
0000000001016917	movq	$0xc, 0x8(%rsp)
0000000001016920	callq	runtime.printstring
0000000001016925	movq	0x198(%rsp), %rax
000000000101692d	movq	%rax, (%rsp)
0000000001016931	callq	runtime.printpointer
0000000001016936	leaq	0x543a0(%rip), %rax
000000000101693d	movq	%rax, (%rsp)
0000000001016941	movq	$0x7, 0x8(%rsp)
000000000101694a	callq	runtime.printstring
000000000101694f	movq	0x68(%rsp), %rax
0000000001016954	movq	%rax, (%rsp)
0000000001016958	callq	runtime.printint
000000000101695d	leaq	0x5520e(%rip), %rax
0000000001016964	movq	%rax, (%rsp)
0000000001016968	movq	$0x13, 0x8(%rsp)
0000000001016971	callq	runtime.printstring
0000000001016976	movl	0x64(%rsp), %eax
000000000101697a	movl	%eax, %eax
000000000101697c	movq	%rax, (%rsp)
0000000001016980	callq	runtime.printuint
0000000001016985	callq	runtime.printnl
000000000101698a	callq	runtime.printunlock
000000000101698f	leaq	0x54fcd(%rip), %rax
0000000001016996	movq	%rax, (%rsp)
000000000101699a	movq	$0x11, 0x8(%rsp)
00000000010169a3	callq	runtime.throw
00000000010169a8	ud2
00000000010169aa	movl	0x90(%rax), %ecx
00000000010169b0	movl	%ecx, 0x60(%rsp)
00000000010169b4	movq	0x98(%rax), %rdx
00000000010169bb	movq	%rdx, 0x68(%rsp)
00000000010169c0	callq	runtime.printlock
00000000010169c5	leaq	0x55865(%rip), %rax
00000000010169cc	movq	%rax, (%rsp)
00000000010169d0	movq	$0x16, 0x8(%rsp)
00000000010169d9	callq	runtime.printstring
00000000010169de	movq	0x198(%rsp), %rax
00000000010169e6	movq	%rax, (%rsp)
00000000010169ea	callq	runtime.printpointer
00000000010169ef	leaq	0x542e7(%rip), %rax
00000000010169f6	movq	%rax, (%rsp)
00000000010169fa	movq	$0x7, 0x8(%rsp)
0000000001016a03	callq	runtime.printstring
0000000001016a08	movq	0x68(%rsp), %rax
0000000001016a0d	movq	%rax, (%rsp)
0000000001016a11	callq	runtime.printint
0000000001016a16	leaq	0x55155(%rip), %rax
0000000001016a1d	movq	%rax, (%rsp)
0000000001016a21	movq	$0x13, 0x8(%rsp)
0000000001016a2a	callq	runtime.printstring
0000000001016a2f	movl	0x60(%rsp), %eax
0000000001016a33	movl	%eax, %eax
0000000001016a35	movq	%rax, (%rsp)
0000000001016a39	callq	runtime.printhex
0000000001016a3e	callq	runtime.printnl
0000000001016a43	callq	runtime.printunlock
0000000001016a48	leaq	0x5580e(%rip), %rax
0000000001016a4f	movq	%rax, (%rsp)
0000000001016a53	movq	$0x16, 0x8(%rsp)
0000000001016a5c	callq	runtime.throw
0000000001016a61	ud2
0000000001016a63	callq	runtime.morestackc
0000000001016a68	jmp	runtime.scanstack
0000000001016a6d	int3
0000000001016a6e	int3
0000000001016a6f	int3
runtime.scanframeworker:
0000000001016a70	movq	%gs:0x30, %rcx
0000000001016a79	cmpq	0x10(%rcx), %rsp
0000000001016a7d	jbe	0x1016b48
0000000001016a83	subq	$0x50, %rsp
0000000001016a87	movq	%rbp, 0x48(%rsp)
0000000001016a8c	leaq	0x48(%rsp), %rbp
0000000001016a91	movq	0x58(%rsp), %rax
0000000001016a96	movq	%rax, (%rsp)
0000000001016a9a	movq	0x60(%rsp), %rcx
0000000001016a9f	movq	%rcx, 0x8(%rsp)
0000000001016aa4	movb	$0x0, 0x10(%rsp)
0000000001016aa9	callq	runtime.getStackMap
0000000001016aae	movq	0x30(%rsp), %rax
0000000001016ab3	movq	0x20(%rsp), %rcx
0000000001016ab8	movl	0x18(%rsp), %edx
0000000001016abc	movl	0x28(%rsp), %ebx
0000000001016ac0	testl	%edx, %edx
0000000001016ac2	jg	0x1016b01
0000000001016ac4	testl	%ebx, %ebx
0000000001016ac6	jg	0x1016ad2
0000000001016ac8	movq	0x48(%rsp), %rbp
0000000001016acd	addq	$0x50, %rsp
0000000001016ad1	retq
0000000001016ad2	movq	0x58(%rsp), %rcx
0000000001016ad7	movq	0x40(%rcx), %rcx
0000000001016adb	movq	%rcx, (%rsp)
0000000001016adf	movslq	%ebx, %rcx
0000000001016ae2	shlq	$0x3, %rcx
0000000001016ae6	movq	%rcx, 0x8(%rsp)
0000000001016aeb	movq	%rax, 0x10(%rsp)
0000000001016af0	movq	0x68(%rsp), %rax
0000000001016af5	movq	%rax, 0x18(%rsp)
0000000001016afa	callq	runtime.scanblock
0000000001016aff	jmp	0x1016ac8
0000000001016b01	movq	%rax, 0x40(%rsp)
0000000001016b06	movl	%ebx, 0x3c(%rsp)
0000000001016b0a	movslq	%edx, %rax
0000000001016b0d	shlq	$0x3, %rax
0000000001016b11	movq	0x58(%rsp), %rdx
0000000001016b16	movq	0x38(%rdx), %rbx
0000000001016b1a	subq	%rax, %rbx
0000000001016b1d	movq	%rbx, (%rsp)
0000000001016b21	movq	%rax, 0x8(%rsp)
0000000001016b26	movq	%rcx, 0x10(%rsp)
0000000001016b2b	movq	0x68(%rsp), %rax
0000000001016b30	movq	%rax, 0x18(%rsp)
0000000001016b35	callq	runtime.scanblock
0000000001016b3a	movq	0x40(%rsp), %rax
0000000001016b3f	movl	0x3c(%rsp), %ebx
0000000001016b43	jmp	0x1016ac4
0000000001016b48	callq	runtime.morestack_noctxt
0000000001016b4d	jmp	runtime.scanframeworker
0000000001016b52	int3
0000000001016b53	int3
0000000001016b54	int3
0000000001016b55	int3
0000000001016b56	int3
0000000001016b57	int3
0000000001016b58	int3
0000000001016b59	int3
0000000001016b5a	int3
0000000001016b5b	int3
0000000001016b5c	int3
0000000001016b5d	int3
0000000001016b5e	int3
0000000001016b5f	int3
runtime.gcDrain:
0000000001016b60	movq	%gs:0x30, %rcx
0000000001016b69	cmpq	0x10(%rcx), %rsp
0000000001016b6d	jbe	0x1016fc2
0000000001016b73	subq	$0x50, %rsp
0000000001016b77	movq	%rbp, 0x48(%rsp)
0000000001016b7c	leaq	0x48(%rsp), %rbp
0000000001016b81	leaq	0xbe0ac(%rip), %rax
0000000001016b88	cmpb	$0x0, (%rax)
0000000001016b8b	je	0x1016fa7
0000000001016b91	movq	%gs:0x30, %rax
0000000001016b9a	movq	0x30(%rax), %rax
0000000001016b9e	movq	0xc0(%rax), %rax
0000000001016ba5	movq	0x58(%rsp), %rcx
0000000001016baa	movq	0x18(%rcx), %rdx
0000000001016bae	movq	0x60(%rsp), %rbx
0000000001016bb3	testq	$0x18, %rbx
0000000001016bba	je	0x1016f8f
0000000001016bc0	btl	$0x3, %ebx
0000000001016bc4	jae	0x1016f73
0000000001016bca	leaq	0x583e7(%rip), %rsi
0000000001016bd1	leaq	0x186a0(%rdx), %rdi
0000000001016bd8	movq	%rax, 0x38(%rsp)
0000000001016bdd	movq	%rsi, 0x40(%rsp)
0000000001016be2	movl	0xa2203(%rip), %r8d
0000000001016be9	btl	$0x0, %ebx
0000000001016bed	btl	$0x2, %ebx
0000000001016bf1	cmpl	%r8d, 0xa21f0(%rip)
0000000001016bf8	jae	0x1016f6a
0000000001016bfe	movq	%rdx, 0x10(%rsp)
0000000001016c03	movq	%rdi, 0x18(%rsp)
0000000001016c08	btl	$0x0, %ebx
0000000001016c0c	jmp	0x1016c32
0000000001016c0e	movq	0x58(%rsp), %r8
0000000001016c13	movq	0x38(%rsp), %r9
0000000001016c18	movq	%r9, %rax
0000000001016c1b	movq	%r8, %rcx
0000000001016c1e	movq	0x10(%rsp), %rdx
0000000001016c23	movq	0x60(%rsp), %rbx
0000000001016c28	movq	0x40(%rsp), %rsi
0000000001016c2d	movq	0x18(%rsp), %rdi
0000000001016c32	jae	0x1016c47
0000000001016c34	testb	%al, (%rax)
0000000001016c36	leaq	0xb1(%rax), %r8
0000000001016c3d	cmpb	$0x0, (%r8)
0000000001016c41	jne	0x1016f61
0000000001016c47	movl	$0x1, %r8d
0000000001016c4d	leaq	0xa2194(%rip), %r9
0000000001016c54	lock
0000000001016c55	xaddl	%r8d, (%r9)
0000000001016c59	movl	0xa218c(%rip), %r10d
0000000001016c60	cmpl	%r10d, %r8d
0000000001016c63	jae	0x1016cfd
0000000001016c69	movq	%rcx, (%rsp)
0000000001016c6d	movl	%r8d, 0x8(%rsp)
0000000001016c72	callq	runtime.markroot
0000000001016c77	movq	0x40(%rsp), %rdx
0000000001016c7c	testq	%rdx, %rdx
0000000001016c7f	jne	0x1016c8c
0000000001016c81	movq	0x60(%rsp), %rax
0000000001016c86	btl	$0x0, %eax
0000000001016c8a	jmp	0x1016c0e
0000000001016c8c	movq	(%rdx), %rax
0000000001016c8f	callq	*%rax
0000000001016c91	cmpb	$0x0, (%rsp)
0000000001016c95	jne	0x1016caa
0000000001016c97	movq	0x60(%rsp), %rax
0000000001016c9c	btl	$0x0, %eax
0000000001016ca0	movq	0x40(%rsp), %rdx
0000000001016ca5	jmp	0x1016c0e
0000000001016caa	movq	0x10(%rsp), %rax
0000000001016caf	movq	0x58(%rsp), %rcx
0000000001016cb4	movq	0x18(%rcx), %rdx
0000000001016cb8	testq	%rdx, %rdx
0000000001016cbb	jle	0x1016cdc
0000000001016cbd	leaq	runtime.gcController(%rip), %rbx
0000000001016cc4	lock
0000000001016cc5	xaddq	%rdx, (%rbx)
0000000001016cc9	movq	0x60(%rsp), %rdx
0000000001016cce	btl	$0x2, %edx
0000000001016cd2	jb	0x1016ce6
0000000001016cd4	movq	$0x0, 0x18(%rcx)
0000000001016cdc	movq	0x48(%rsp), %rbp
0000000001016ce1	addq	$0x50, %rsp
0000000001016ce5	retq
0000000001016ce6	movq	0x18(%rcx), %rdx
0000000001016cea	subq	%rax, %rdx
0000000001016ced	movq	%rdx, (%rsp)
0000000001016cf1	callq	runtime.gcFlushBgCredit
0000000001016cf6	movq	0x58(%rsp), %rcx
0000000001016cfb	jmp	0x1016cd4
0000000001016cfd	btl	$0x0, %ebx
0000000001016d01	testq	$0x1b, %rbx
0000000001016d08	btl	$0x0, %ebx
0000000001016d0c	jmp	0x1016d28
0000000001016d0e	movq	0x38(%rsp), %r8
0000000001016d13	movq	%r8, %rax
0000000001016d16	movq	0x58(%rsp), %rcx
0000000001016d1b	movq	0x60(%rsp), %rbx
0000000001016d20	movq	%rsi, %rdi
0000000001016d23	movq	0x40(%rsp), %rsi
0000000001016d28	jae	0x1016d3d
0000000001016d2a	testb	%al, (%rax)
0000000001016d2c	leaq	0xb1(%rax), %r8
0000000001016d33	cmpb	$0x0, (%r8)
0000000001016d37	jne	0x1016f59
0000000001016d3d	movq	%rdx, 0x30(%rsp)
0000000001016d42	movq	%rdi, 0x18(%rsp)
0000000001016d47	cmpq	$0x0, 0xa2011(%rip)
0000000001016d4f	je	0x1016f26
0000000001016d55	testq	$0x1b, %rbx
0000000001016d5c	je	0x1016ef5
0000000001016d62	movq	(%rcx), %r8
0000000001016d65	testq	%r8, %r8
0000000001016d68	je	0x1016eed
0000000001016d6e	movq	0x10(%r8), %r9
0000000001016d72	testq	%r9, %r9
0000000001016d75	jne	0x1016ece
0000000001016d7b	xorl	%r8d, %r8d
0000000001016d7e	testq	%r8, %r8
0000000001016d81	je	0x1016e9d
0000000001016d87	testq	%r8, %r8
0000000001016d8a	je	0x1016e95
0000000001016d90	movq	%r8, (%rsp)
0000000001016d94	movq	%rcx, 0x8(%rsp)
0000000001016d99	callq	runtime.scanobject
0000000001016d9e	movq	0x58(%rsp), %rax
0000000001016da3	movq	0x18(%rax), %rcx
0000000001016da7	cmpq	$0x7d0, %rcx
0000000001016dae	jl	0x1016e78
0000000001016db4	leaq	runtime.gcController(%rip), %rbx
0000000001016dbb	lock
0000000001016dbc	xaddq	%rcx, (%rbx)
0000000001016dc0	movq	0x60(%rsp), %rcx
0000000001016dc5	btl	$0x2, %ecx
0000000001016dc9	jb	0x1016e52
0000000001016dcf	movq	0x30(%rsp), %rdx
0000000001016dd4	movq	0x18(%rax), %rbx
0000000001016dd8	movq	$0x0, 0x18(%rax)
0000000001016de0	movq	0x18(%rsp), %rsi
0000000001016de5	subq	%rbx, %rsi
0000000001016de8	testq	%rsi, %rsi
0000000001016deb	jg	0x1016e44
0000000001016ded	movq	0x40(%rsp), %rbx
0000000001016df2	testq	%rbx, %rbx
0000000001016df5	jne	0x1016e07
0000000001016df7	addq	$0x186a0, %rsi
0000000001016dfe	btl	$0x0, %ecx
0000000001016e02	jmp	0x1016d0e
0000000001016e07	movq	%rsi, 0x28(%rsp)
0000000001016e0c	movq	%rdx, 0x20(%rsp)
0000000001016e11	movq	(%rbx), %rax
0000000001016e14	movq	%rbx, %rdx
0000000001016e17	callq	*%rax
0000000001016e19	cmpb	$0x0, (%rsp)
0000000001016e1d	jne	0x1016e3a
0000000001016e1f	movq	0x58(%rsp), %rax
0000000001016e24	movq	0x60(%rsp), %rcx
0000000001016e29	movq	0x20(%rsp), %rdx
0000000001016e2e	movq	0x40(%rsp), %rbx
0000000001016e33	movq	0x28(%rsp), %rsi
0000000001016e38	jmp	0x1016df7
0000000001016e3a	movq	0x20(%rsp), %rax
0000000001016e3f	jmp	0x1016caf
0000000001016e44	btl	$0x0, %ecx
0000000001016e48	movq	0x40(%rsp), %rbx
0000000001016e4d	jmp	0x1016d0e
0000000001016e52	movq	0x18(%rax), %rcx
0000000001016e56	movq	0x30(%rsp), %rdx
0000000001016e5b	subq	%rdx, %rcx
0000000001016e5e	movq	%rcx, (%rsp)
0000000001016e62	callq	runtime.gcFlushBgCredit
0000000001016e67	movq	0x58(%rsp), %rax
0000000001016e6c	movq	0x60(%rsp), %rcx
0000000001016e71	xorl	%edx, %edx
0000000001016e73	jmp	0x1016dd4
0000000001016e78	movq	0x60(%rsp), %rcx
0000000001016e7d	btl	$0x0, %ecx
0000000001016e81	movq	0x40(%rsp), %rbx
0000000001016e86	movq	0x18(%rsp), %rsi
0000000001016e8b	movq	0x30(%rsp), %rdx
0000000001016e90	jmp	0x1016d0e
0000000001016e95	movq	%rdx, %rax
0000000001016e98	jmp	0x1016caf
0000000001016e9d	movq	%rcx, (%rsp)
0000000001016ea1	callq	"runtime.(*gcWork).tryGet"
0000000001016ea6	movq	0x8(%rsp), %r8
0000000001016eab	movq	0x38(%rsp), %rax
0000000001016eb0	movq	0x58(%rsp), %rcx
0000000001016eb5	movq	0x30(%rsp), %rdx
0000000001016eba	movq	0x60(%rsp), %rbx
0000000001016ebf	movq	0x40(%rsp), %rsi
0000000001016ec4	movq	0x18(%rsp), %rdi
0000000001016ec9	jmp	0x1016d87
0000000001016ece	leaq	-0x1(%r9), %r10
0000000001016ed2	movq	%r10, 0x10(%r8)
0000000001016ed6	cmpq	$0xfd, %r10
0000000001016edd	jae	0x1016fa0
0000000001016ee3	movq	0x10(%r8,%r9,8), %r8
0000000001016ee8	jmp	0x1016d7e
0000000001016eed	xorl	%r8d, %r8d
0000000001016ef0	jmp	0x1016d7e
0000000001016ef5	movq	%rcx, (%rsp)
0000000001016ef9	callq	"runtime.(*gcWork).get"
0000000001016efe	movq	0x8(%rsp), %r8
0000000001016f03	movq	0x38(%rsp), %rax
0000000001016f08	movq	0x58(%rsp), %rcx
0000000001016f0d	movq	0x30(%rsp), %rdx
0000000001016f12	movq	0x60(%rsp), %rbx
0000000001016f17	movq	0x40(%rsp), %rsi
0000000001016f1c	movq	0x18(%rsp), %rdi
0000000001016f21	jmp	0x1016d87
0000000001016f26	movq	%rcx, (%rsp)
0000000001016f2a	callq	"runtime.(*gcWork).balance"
0000000001016f2f	movq	0x60(%rsp), %rbx
0000000001016f34	testq	$0x1b, %rbx
0000000001016f3b	movq	0x38(%rsp), %rax
0000000001016f40	movq	0x58(%rsp), %rcx
0000000001016f45	movq	0x30(%rsp), %rdx
0000000001016f4a	movq	0x40(%rsp), %rsi
0000000001016f4f	movq	0x18(%rsp), %rdi
0000000001016f54	jmp	0x1016d5c
0000000001016f59	movq	%rdx, %rax
0000000001016f5c	jmp	0x1016caf
0000000001016f61	btl	$0x0, %ebx
0000000001016f65	jmp	0x1016d01
0000000001016f6a	btl	$0x0, %ebx
0000000001016f6e	jmp	0x1016d01
0000000001016f73	testq	$0x10, %rbx
0000000001016f7a	movl	$0x0, %esi
0000000001016f7f	leaq	0x5802a(%rip), %rdi
0000000001016f86	cmovneq	%rdi, %rsi
0000000001016f8a	jmp	0x1016bd1
0000000001016f8f	movabsq	$0x7fffffffffffffff, %rdi
0000000001016f99	xorl	%esi, %esi
0000000001016f9b	jmp	0x1016bd8
0000000001016fa0	callq	runtime.panicindex
0000000001016fa5	ud2
0000000001016fa7	leaq	0x55418(%rip), %rax
0000000001016fae	movq	%rax, (%rsp)
0000000001016fb2	movq	$0x17, 0x8(%rsp)
0000000001016fbb	callq	runtime.throw
0000000001016fc0	ud2
0000000001016fc2	callq	runtime.morestack_noctxt
0000000001016fc7	jmp	runtime.gcDrain
0000000001016fcc	int3
0000000001016fcd	int3
0000000001016fce	int3
0000000001016fcf	int3
runtime.gcDrainN:
0000000001016fd0	movq	%gs:0x30, %rcx
0000000001016fd9	cmpq	0x18(%rcx), %rsp
0000000001016fdd	jbe	0x10171d3
0000000001016fe3	subq	$0x28, %rsp
0000000001016fe7	movq	%rbp, 0x20(%rsp)
0000000001016fec	leaq	0x20(%rsp), %rbp
0000000001016ff1	leaq	0xbdc3c(%rip), %rax
0000000001016ff8	cmpb	$0x0, (%rax)
0000000001016ffb	je	0x10171b8
0000000001017001	movq	%gs:0x30, %rax
000000000101700a	movq	0x30(%rax), %rax
000000000101700e	movq	0x30(%rsp), %rcx
0000000001017013	movq	0x18(%rcx), %rdx
0000000001017017	negq	%rdx
000000000101701a	movq	0xc0(%rax), %rax
0000000001017021	movq	%rax, 0x18(%rsp)
0000000001017026	movq	0x38(%rsp), %rbx
000000000101702b	jmp	0x1017048
000000000101702d	movq	0x18(%rsp), %rsi
0000000001017032	movq	0x30(%rsp), %rdi
0000000001017037	movq	0x38(%rsp), %r8
000000000101703c	movq	%rdi, %rcx
000000000101703f	movq	%r8, %rbx
0000000001017042	movq	%rax, %rdx
0000000001017045	movq	%rsi, %rax
0000000001017048	testb	%al, (%rax)
000000000101704a	leaq	0xb1(%rax), %rsi
0000000001017051	cmpb	$0x0, (%rsi)
0000000001017054	jne	0x10170e1
000000000101705a	movq	0x18(%rcx), %rsi
000000000101705e	addq	%rdx, %rsi
0000000001017061	cmpq	%rbx, %rsi
0000000001017064	jge	0x10170e1
0000000001017066	movq	%rdx, 0x10(%rsp)
000000000101706b	cmpq	$0x0, 0xa1ced(%rip)
0000000001017073	je	0x101718f
0000000001017079	movq	(%rcx), %rsi
000000000101707c	testq	%rsi, %rsi
000000000101707f	je	0x1017188
0000000001017085	movq	0x10(%rsi), %rdi
0000000001017089	testq	%rdi, %rdi
000000000101708c	jne	0x101716d
0000000001017092	xorl	%esi, %esi
0000000001017094	testq	%rsi, %rsi
0000000001017097	je	0x1017146
000000000101709d	testq	%rsi, %rsi
00000000010170a0	jne	0x10170f7
00000000010170a2	movl	0xa1d44(%rip), %esi
00000000010170a8	cmpl	%esi, 0xa1d3a(%rip)
00000000010170ae	jae	0x10170e1
00000000010170b0	movl	$0x1, %esi
00000000010170b5	leaq	0xa1d2c(%rip), %rdi
00000000010170bc	lock
00000000010170bd	xaddl	%esi, (%rdi)
00000000010170c0	movl	0xa1d26(%rip), %edi
00000000010170c6	cmpl	%edi, %esi
00000000010170c8	jae	0x10170e1
00000000010170ca	movq	%rcx, (%rsp)
00000000010170ce	movl	%esi, 0x8(%rsp)
00000000010170d2	callq	runtime.markroot
00000000010170d7	movq	0x10(%rsp), %rax
00000000010170dc	jmp	0x101702d
00000000010170e1	movq	0x18(%rcx), %rax
00000000010170e5	addq	%rdx, %rax
00000000010170e8	movq	%rax, 0x40(%rsp)
00000000010170ed	movq	0x20(%rsp), %rbp
00000000010170f2	addq	$0x28, %rsp
00000000010170f6	retq
00000000010170f7	movq	%rsi, (%rsp)
00000000010170fb	movq	%rcx, 0x8(%rsp)
0000000001017100	callq	runtime.scanobject
0000000001017105	movq	0x30(%rsp), %rax
000000000101710a	movq	0x18(%rax), %rcx
000000000101710e	cmpq	$0x7d0, %rcx
0000000001017115	jl	0x101713f
0000000001017117	leaq	runtime.gcController(%rip), %rdx
000000000101711e	lock
000000000101711f	xaddq	%rcx, (%rdx)
0000000001017123	movq	0x18(%rax), %rcx
0000000001017127	movq	$0x0, 0x18(%rax)
000000000101712f	movq	0x10(%rsp), %rdx
0000000001017134	addq	%rdx, %rcx
0000000001017137	movq	%rcx, %rax
000000000101713a	jmp	0x101702d
000000000101713f	movq	0x10(%rsp), %rcx
0000000001017144	jmp	0x1017137
0000000001017146	movq	%rcx, (%rsp)
000000000101714a	callq	"runtime.(*gcWork).tryGet"
000000000101714f	movq	0x8(%rsp), %rsi
0000000001017154	movq	0x18(%rsp), %rax
0000000001017159	movq	0x30(%rsp), %rcx
000000000101715e	movq	0x10(%rsp), %rdx
0000000001017163	movq	0x38(%rsp), %rbx
0000000001017168	jmp	0x101709d
000000000101716d	leaq	-0x1(%rdi), %r8
0000000001017171	movq	%r8, 0x10(%rsi)
0000000001017175	cmpq	$0xfd, %r8
000000000101717c	jae	0x10171b1
000000000101717e	movq	0x10(%rsi,%rdi,8), %rsi
0000000001017183	jmp	0x1017094
0000000001017188	xorl	%esi, %esi
000000000101718a	jmp	0x1017094
000000000101718f	movq	%rcx, (%rsp)
0000000001017193	callq	"runtime.(*gcWork).balance"
0000000001017198	movq	0x18(%rsp), %rax
000000000101719d	movq	0x30(%rsp), %rcx
00000000010171a2	movq	0x10(%rsp), %rdx
00000000010171a7	movq	0x38(%rsp), %rbx
00000000010171ac	jmp	0x1017079
00000000010171b1	callq	runtime.panicindex
00000000010171b6	ud2
00000000010171b8	leaq	0x55434(%rip), %rax
00000000010171bf	movq	%rax, (%rsp)
00000000010171c3	movq	$0x18, 0x8(%rsp)
00000000010171cc	callq	runtime.throw
00000000010171d1	ud2
00000000010171d3	callq	runtime.morestackc
00000000010171d8	jmp	runtime.gcDrainN
00000000010171dd	int3
00000000010171de	int3
00000000010171df	int3
runtime.scanblock:
00000000010171e0	movq	%gs:0x30, %rcx
00000000010171e9	cmpq	0x10(%rcx), %rsp
00000000010171ed	jbe	0x1017304
00000000010171f3	subq	$0x50, %rsp
00000000010171f7	movq	%rbp, 0x48(%rsp)
00000000010171fc	leaq	0x48(%rsp), %rbp
0000000001017201	movq	0x68(%rsp), %rax
0000000001017206	movq	0x60(%rsp), %rcx
000000000101720b	movq	0x58(%rsp), %rdx
0000000001017210	xorl	%ebx, %ebx
0000000001017212	cmpq	%rcx, %rbx
0000000001017215	jae	0x10172fa
000000000101721b	movq	%rbx, %rsi
000000000101721e	shrq	$0x6, %rbx
0000000001017222	leaq	(%rax,%rbx), %rdi
0000000001017226	testb	%al, (%rdi)
0000000001017228	movzbl	(%rax,%rbx), %ebx
000000000101722c	testl	%ebx, %ebx
000000000101722e	jne	0x1017236
0000000001017230	leaq	0x40(%rsi), %rbx
0000000001017234	jmp	0x1017212
0000000001017236	xorl	%edi, %edi
0000000001017238	jmp	0x1017243
000000000101723a	incq	%rdi
000000000101723d	shrl	%ebx
000000000101723f	addq	$0x8, %rsi
0000000001017243	cmpq	$0x8, %rdi
0000000001017247	jge	0x10172f2
000000000101724d	cmpq	%rcx, %rsi
0000000001017250	jae	0x10172f2
0000000001017256	btl	$0x0, %ebx
000000000101725a	jae	0x101723a
000000000101725c	leaq	(%rsi,%rdx), %r8
0000000001017260	movq	(%r8), %r8
0000000001017263	testq	%r8, %r8
0000000001017266	je	0x101723a
0000000001017268	movq	%rdi, 0x38(%rsp)
000000000101726d	movq	%rsi, 0x40(%rsp)
0000000001017272	movl	%ebx, 0x34(%rsp)
0000000001017276	movq	%r8, (%rsp)
000000000101727a	movq	%rdx, 0x8(%rsp)
000000000101727f	movq	%rsi, 0x10(%rsp)
0000000001017284	callq	runtime.findObject
0000000001017289	movq	0x18(%rsp), %rax
000000000101728e	movq	0x20(%rsp), %rcx
0000000001017293	movq	0x28(%rsp), %rdx
0000000001017298	testq	%rax, %rax
000000000101729b	jne	0x10172bf
000000000101729d	movq	0x68(%rsp), %rax
00000000010172a2	movq	0x60(%rsp), %rcx
00000000010172a7	movq	0x58(%rsp), %rdx
00000000010172ac	movl	0x34(%rsp), %ebx
00000000010172b0	movq	0x40(%rsp), %rsi
00000000010172b5	movq	0x38(%rsp), %rdi
00000000010172ba	jmp	0x101723a
00000000010172bf	movq	%rax, (%rsp)
00000000010172c3	movq	0x58(%rsp), %rax
00000000010172c8	movq	%rax, 0x8(%rsp)
00000000010172cd	movq	0x40(%rsp), %rbx
00000000010172d2	movq	%rbx, 0x10(%rsp)
00000000010172d7	movq	%rcx, 0x18(%rsp)
00000000010172dc	movq	0x70(%rsp), %rcx
00000000010172e1	movq	%rcx, 0x20(%rsp)
00000000010172e6	movq	%rdx, 0x28(%rsp)
00000000010172eb	callq	runtime.greyobject
00000000010172f0	jmp	0x101729d
00000000010172f2	movq	%rsi, %rbx
00000000010172f5	jmp	0x1017212
00000000010172fa	movq	0x48(%rsp), %rbp
00000000010172ff	addq	$0x50, %rsp
0000000001017303	retq
0000000001017304	callq	runtime.morestack_noctxt
0000000001017309	jmp	runtime.scanblock
000000000101730e	int3
000000000101730f	int3
runtime.scanobject:
0000000001017310	movq	%gs:0x30, %rcx
0000000001017319	leaq	-0x8(%rsp), %rax
000000000101731e	cmpq	0x10(%rcx), %rax
0000000001017322	jbe	0x10176be
0000000001017328	subq	$0x88, %rsp
000000000101732f	movq	%rbp, 0x80(%rsp)
0000000001017337	leaq	0x80(%rsp), %rbp
000000000101733f	movq	0xa7452(%rip), %rax
0000000001017346	testb	%al, (%rax)
0000000001017348	movq	0x90(%rsp), %rdx
0000000001017350	movabsq	$0x800000000000, %rbx
000000000101735a	addq	%rdx, %rbx
000000000101735d	shrq	$0x1a, %rbx
0000000001017361	cmpq	$0x400000, %rbx
0000000001017368	jae	0x10176b7
000000000101736e	movq	(%rax,%rbx,8), %rax
0000000001017372	testq	%rax, %rax
0000000001017375	je	0x1017684
000000000101737b	movq	%rdx, %rsi
000000000101737e	shrq	$0x5, %rdx
0000000001017382	andq	$0x1fffff, %rdx
0000000001017389	addq	%rax, %rdx
000000000101738c	movq	%rsi, %rdi
000000000101738f	shrq	$0x3, %rsi
0000000001017393	andq	$0x3, %rsi
0000000001017397	leaq	0x1fffff(%rax), %r8
000000000101739e	movq	%rdi, %r9
00000000010173a1	shrq	$0xd, %rdi
00000000010173a5	andq	$0x1fff, %rdi
00000000010173ac	movq	0x200000(%rax,%rdi,8), %rdi
00000000010173b4	testb	%al, (%rax)
00000000010173b6	movq	0x68(%rdi), %rax
00000000010173ba	testq	%rax, %rax
00000000010173bd	je	0x101769c
00000000010173c3	cmpq	$0x20000, %rax
00000000010173c9	jbe	0x1017677
00000000010173cf	movq	0x18(%rdi), %r10
00000000010173d3	cmpq	%r10, %r9
00000000010173d6	jne	0x101766a
00000000010173dc	movzbl	0x62(%rdi), %r10d
00000000010173e1	testb	$0x1, %r10b
00000000010173e5	jne	0x1017647
00000000010173eb	movq	%rdi, 0x58(%rsp)
00000000010173f0	movq	%r8, 0x60(%rsp)
00000000010173f5	movl	%ebx, 0x34(%rsp)
00000000010173f9	movl	%esi, 0x30(%rsp)
00000000010173fd	movq	%rdx, 0x68(%rsp)
0000000001017402	leaq	0x20000(%r9), %rax
0000000001017409	movq	0x98(%rsp), %r10
0000000001017411	jmp	0x1017419
0000000001017413	addq	$0x20000, %rax
0000000001017419	movq	0x68(%rdi), %r11
000000000101741d	addq	0x18(%rdi), %r11
0000000001017421	cmpq	%r11, %rax
0000000001017424	jae	0x101749c
0000000001017426	movq	(%r10), %r11
0000000001017429	testq	%r11, %r11
000000000101742c	je	0x1017498
000000000101742e	movq	0x10(%r11), %r12
0000000001017432	cmpq	$0xfd, %r12
0000000001017439	jne	0x1017482
000000000101743b	xorl	%ecx, %ecx
000000000101743d	testb	%cl, %cl
000000000101743f	jne	0x1017413
0000000001017441	movq	%rax, 0x40(%rsp)
0000000001017446	movq	%r10, (%rsp)
000000000101744a	movq	%rax, 0x8(%rsp)
000000000101744f	callq	"runtime.(*gcWork).put"
0000000001017454	movq	0x40(%rsp), %rax
0000000001017459	movq	0x68(%rsp), %rdx
000000000101745e	movl	0x34(%rsp), %ebx
0000000001017462	movl	0x30(%rsp), %esi
0000000001017466	movq	0x58(%rsp), %rdi
000000000101746b	movq	0x60(%rsp), %r8
0000000001017470	movq	0x90(%rsp), %r9
0000000001017478	movq	0x98(%rsp), %r10
0000000001017480	jmp	0x1017413
0000000001017482	jae	0x1017695
0000000001017488	movq	%rax, 0x18(%r11,%r12,8)
000000000101748d	incq	0x10(%r11)
0000000001017491	movl	$0x1, %ecx
0000000001017496	jmp	0x101743d
0000000001017498	xorl	%ecx, %ecx
000000000101749a	jmp	0x101743d
000000000101749c	movq	0x68(%rdi), %rax
00000000010174a0	addq	0x18(%rdi), %rax
00000000010174a4	subq	%r9, %rax
00000000010174a7	cmpq	$0x20000, %rax
00000000010174ad	movl	$0x20000, %edi
00000000010174b2	cmovaq	%rdi, %rax
00000000010174b6	movq	%rax, 0x48(%rsp)
00000000010174bb	xorl	%ecx, %ecx
00000000010174bd	jmp	0x10174c6
00000000010174bf	leaq	0x8(%r11), %rdi
00000000010174c3	movq	%rdi, %rcx
00000000010174c6	cmpq	%rax, %rcx
00000000010174c9	jae	0x101763f
00000000010174cf	movq	%rcx, 0x50(%rsp)
00000000010174d4	testq	%rcx, %rcx
00000000010174d7	je	0x10174e4
00000000010174d9	cmpl	$0x3, %esi
00000000010174dc	jae	0x10175e9
00000000010174e2	incl	%esi
00000000010174e4	movzbl	(%rdx), %edi
00000000010174e7	movq	%rcx, %r11
00000000010174ea	movl	%esi, %ecx
00000000010174ec	movl	%edi, %r12d
00000000010174ef	shrl	%cl, %edi
00000000010174f1	cmpq	$0x8, %r11
00000000010174f5	je	0x1017501
00000000010174f7	btl	$0x4, %edi
00000000010174fb	jae	0x10175c3
0000000001017501	btl	%ecx, %r12d
0000000001017505	jae	0x10174bf
0000000001017507	leaq	(%r11,%r9), %rdi
000000000101750b	movq	(%rdi), %rdi
000000000101750e	testq	%rdi, %rdi
0000000001017511	je	0x10174bf
0000000001017513	movq	%rdi, %r12
0000000001017516	subq	%r9, %rdi
0000000001017519	cmpq	%rax, %rdi
000000000101751c	jb	0x10174bf
000000000101751e	movq	%r8, 0x70(%rsp)
0000000001017523	movl	%ebx, 0x38(%rsp)
0000000001017527	movl	%ecx, 0x3c(%rsp)
000000000101752b	movq	%rdx, 0x78(%rsp)
0000000001017530	movq	%r12, (%rsp)
0000000001017534	movq	%r9, 0x8(%rsp)
0000000001017539	movq	%r11, 0x10(%rsp)
000000000101753e	callq	runtime.findObject
0000000001017543	movq	0x18(%rsp), %rax
0000000001017548	movq	0x20(%rsp), %rcx
000000000101754d	movq	0x28(%rsp), %rdx
0000000001017552	testq	%rax, %rax
0000000001017555	jne	0x101758a
0000000001017557	movq	0x48(%rsp), %rax
000000000101755c	movl	0x3c(%rsp), %ecx
0000000001017560	movq	0x78(%rsp), %rdx
0000000001017565	movl	0x38(%rsp), %ebx
0000000001017569	movl	%ecx, %esi
000000000101756b	movq	0x70(%rsp), %r8
0000000001017570	movq	0x90(%rsp), %r9
0000000001017578	movq	0x98(%rsp), %r10
0000000001017580	movq	0x50(%rsp), %r11
0000000001017585	jmp	0x10174bf
000000000101758a	movq	%rax, (%rsp)
000000000101758e	movq	0x90(%rsp), %rax
0000000001017596	movq	%rax, 0x8(%rsp)
000000000101759b	movq	0x50(%rsp), %rbx
00000000010175a0	movq	%rbx, 0x10(%rsp)
00000000010175a5	movq	%rcx, 0x18(%rsp)
00000000010175aa	movq	0x98(%rsp), %rcx
00000000010175b2	movq	%rcx, 0x20(%rsp)
00000000010175b7	movq	%rdx, 0x28(%rsp)
00000000010175bc	callq	runtime.greyobject
00000000010175c1	jmp	0x1017557
00000000010175c3	movq	0x10(%r10), %rcx
00000000010175c7	addq	%rcx, %rax
00000000010175ca	movq	%rax, 0x10(%r10)
00000000010175ce	movq	0x18(%r10), %rax
00000000010175d2	addq	%r11, %rax
00000000010175d5	movq	%rax, 0x18(%r10)
00000000010175d9	movq	0x80(%rsp), %rbp
00000000010175e1	addq	$0x88, %rsp
00000000010175e8	retq
00000000010175e9	cmpq	%r8, %rdx
00000000010175ec	je	0x10175f8
00000000010175ee	incq	%rdx
00000000010175f1	xorl	%esi, %esi
00000000010175f3	jmp	0x10174e4
00000000010175f8	movq	%rdx, (%rsp)
00000000010175fc	movl	%esi, 0x8(%rsp)
0000000001017600	movl	%ebx, 0xc(%rsp)
0000000001017604	movq	%r8, 0x10(%rsp)
0000000001017609	callq	runtime.heapBits.nextArena
000000000101760e	movl	0x24(%rsp), %ebx
0000000001017612	movl	0x20(%rsp), %esi
0000000001017616	movq	0x28(%rsp), %r8
000000000101761b	movq	0x18(%rsp), %rdx
0000000001017620	movq	0x48(%rsp), %rax
0000000001017625	movq	0x50(%rsp), %rcx
000000000101762a	movq	0x90(%rsp), %r9
0000000001017632	movq	0x98(%rsp), %r10
000000000101763a	jmp	0x10174e4
000000000101763f	movq	%rcx, %r11
0000000001017642	jmp	0x10175c3
0000000001017647	movq	0x98(%rsp), %rcx
000000000101764f	movq	0x10(%rcx), %rdx
0000000001017653	addq	%rdx, %rax
0000000001017656	movq	%rax, 0x10(%rcx)
000000000101765a	movq	0x80(%rsp), %rbp
0000000001017662	addq	$0x88, %rsp
0000000001017669	retq
000000000101766a	movq	0x98(%rsp), %r10
0000000001017672	jmp	0x101749c
0000000001017677	movq	0x98(%rsp), %r10
000000000101767f	jmp	0x10174b6
0000000001017684	movq	%rdx, %rdi
0000000001017687	xorl	%r8d, %r8d
000000000101768a	xorl	%ebx, %ebx
000000000101768c	xorl	%esi, %esi
000000000101768e	xorl	%edx, %edx
0000000001017690	jmp	0x101739e
0000000001017695	callq	runtime.panicindex
000000000101769a	ud2
000000000101769c	leaq	0x5436a(%rip), %rax
00000000010176a3	movq	%rax, (%rsp)
00000000010176a7	movq	$0x11, 0x8(%rsp)
00000000010176b0	callq	runtime.throw
00000000010176b5	ud2
00000000010176b7	callq	runtime.panicindex
00000000010176bc	ud2
00000000010176be	callq	runtime.morestack_noctxt
00000000010176c3	jmp	runtime.scanobject
00000000010176c8	int3
00000000010176c9	int3
00000000010176ca	int3
00000000010176cb	int3
00000000010176cc	int3
00000000010176cd	int3
00000000010176ce	int3
00000000010176cf	int3
runtime.shade:
00000000010176d0	movq	%gs:0x30, %rcx
00000000010176d9	cmpq	0x10(%rcx), %rsp
00000000010176dd	jbe	0x1017790
00000000010176e3	subq	$0x40, %rsp
00000000010176e7	movq	%rbp, 0x38(%rsp)
00000000010176ec	leaq	0x38(%rsp), %rbp
00000000010176f1	movq	0x48(%rsp), %rax
00000000010176f6	movq	%rax, (%rsp)
00000000010176fa	xorps	%xmm0, %xmm0
00000000010176fd	movups	%xmm0, 0x8(%rsp)
0000000001017702	callq	runtime.findObject
0000000001017707	movq	0x18(%rsp), %rax
000000000101770c	movq	0x20(%rsp), %rcx
0000000001017711	movq	0x28(%rsp), %rdx
0000000001017716	testq	%rax, %rax
0000000001017719	jne	0x1017725
000000000101771b	movq	0x38(%rsp), %rbp
0000000001017720	addq	$0x40, %rsp
0000000001017724	retq
0000000001017725	movq	%gs:0x30, %rbx
000000000101772e	movq	0x30(%rbx), %rbx
0000000001017732	movq	0xd0(%rbx), %rsi
0000000001017739	testb	%al, (%rsi)
000000000101773b	testb	%al, (%rbx)
000000000101773d	movq	%rax, (%rsp)
0000000001017741	xorps	%xmm0, %xmm0
0000000001017744	movups	%xmm0, 0x8(%rsp)
0000000001017749	movq	%rcx, 0x18(%rsp)
000000000101774e	leaq	0x1270(%rsi), %rax
0000000001017755	movq	%rax, 0x30(%rsp)
000000000101775a	movq	%rax, 0x20(%rsp)
000000000101775f	movq	%rdx, 0x28(%rsp)
0000000001017764	callq	runtime.greyobject
0000000001017769	cmpl	$0x2, 0xbd388(%rip)
0000000001017770	jne	0x1017782
0000000001017772	movq	0x30(%rsp), %rax
0000000001017777	movq	%rax, (%rsp)
000000000101777b	callq	"runtime.(*gcWork).dispose"
0000000001017780	jmp	0x101771b
0000000001017782	leaq	runtime.gcBlackenPromptly(%rip), %rax
0000000001017789	cmpb	$0x0, (%rax)
000000000101778c	jne	0x1017772
000000000101778e	jmp	0x101771b
0000000001017790	callq	runtime.morestack_noctxt
0000000001017795	jmp	runtime.shade
000000000101779a	int3
000000000101779b	int3
000000000101779c	int3
000000000101779d	int3
000000000101779e	int3
000000000101779f	int3
runtime.greyobject:
00000000010177a0	movq	%gs:0x30, %rcx
00000000010177a9	cmpq	0x10(%rcx), %rsp
00000000010177ad	jbe	0x1017ca9
00000000010177b3	subq	$0x28, %rsp
00000000010177b7	movq	%rbp, 0x20(%rsp)
00000000010177bc	leaq	0x20(%rsp), %rbp
00000000010177c1	movq	0x30(%rsp), %rax
00000000010177c6	testq	$0x7, %rax
00000000010177cc	jne	0x1017c8e
00000000010177d2	movq	0x48(%rsp), %rdx
00000000010177d7	movq	0x50(%rdx), %rbx
00000000010177db	movq	0x58(%rsp), %rcx
00000000010177e0	movq	%rcx, %rsi
00000000010177e3	shrq	$0x3, %rcx
00000000010177e7	movq	%rsi, %rdi
00000000010177ea	andq	$0x7, %rsi
00000000010177ee	movq	%rcx, %r8
00000000010177f1	movq	%rsi, %rcx
00000000010177f4	movl	$0x1, %r9d
00000000010177fa	shll	%cl, %r9d
00000000010177fd	leaq	(%rbx,%r8), %rsi
0000000001017801	leaq	runtime.useCheckmark(%rip), %r10
0000000001017808	cmpb	$0x0, (%r10)
000000000101780c	je	0x10179a3
0000000001017812	testb	%al, (%rsi)
0000000001017814	movzbl	(%r8,%rbx), %ebx
0000000001017819	testb	%r9b, %bl
000000000101781c	je	0x1017b5a
0000000001017822	movq	0xa6f6f(%rip), %rbx
0000000001017829	testb	%al, (%rbx)
000000000101782b	movabsq	$0x800000000000, %rsi
0000000001017835	addq	%rax, %rsi
0000000001017838	shrq	$0x1a, %rsi
000000000101783c	cmpq	$0x400000, %rsi
0000000001017843	jae	0x1017b53
0000000001017849	movq	(%rbx,%rsi,8), %rbx
000000000101784d	testq	%rbx, %rbx
0000000001017850	je	0x1017997
0000000001017856	movq	%rax, %rsi
0000000001017859	shrq	$0x5, %rax
000000000101785d	andq	$0x1fffff, %rax
0000000001017863	addq	%rbx, %rax
0000000001017866	movq	%rsi, %rbx
0000000001017869	shrq	$0x3, %rsi
000000000101786d	andq	$0x3, %rsi
0000000001017871	movq	0x68(%rdx), %rdi
0000000001017875	cmpq	$0x8, %rdi
0000000001017879	jne	0x1017975
000000000101787f	movzbl	(%rax), %r8d
0000000001017883	movl	%esi, %ecx
0000000001017885	shrb	%cl, %r8b
0000000001017888	cmpl	$0x8, %ecx
000000000101788b	sbbl	%r9d, %r9d
000000000101788e	andl	%r9d, %r8d
0000000001017891	testb	$0x1, %r8b
0000000001017895	setne	%r8b
0000000001017899	testb	%r8b, %r8b
000000000101789c	jne	0x101796b
00000000010178a2	cmpq	$0x8, %rdi
00000000010178a6	jne	0x101794a
00000000010178ac	movl	$0x1, %edi
00000000010178b1	shll	%cl, %edi
00000000010178b3	cmpl	$0x20, %ecx
00000000010178b6	sbbl	%r8d, %r8d
00000000010178b9	andl	%edi, %r8d
00000000010178bc	lock
00000000010178bd	orb	%r8b, (%rax)
00000000010178c0	cmpq	$0x8, 0x68(%rdx)
00000000010178c5	jne	0x1017934
00000000010178c7	movzbl	(%rax), %eax
00000000010178ca	shrb	%cl, %al
00000000010178cc	cmpl	$0x8, %ecx
00000000010178cf	sbbl	%edx, %edx
00000000010178d1	andl	%edx, %eax
00000000010178d3	testb	$0x1, %al
00000000010178d5	setne	%al
00000000010178d8	testb	%al, %al
00000000010178da	je	0x1017b38
00000000010178e0	movq	0x50(%rsp), %rax
00000000010178e5	movq	(%rax), %rcx
00000000010178e8	testq	%rcx, %rcx
00000000010178eb	je	0x1017930
00000000010178ed	movq	0x10(%rcx), %rdx
00000000010178f1	cmpq	$0xfd, %rdx
00000000010178f8	jne	0x101791a
00000000010178fa	xorl	%ecx, %ecx
00000000010178fc	testb	%cl, %cl
00000000010178fe	je	0x101790a
0000000001017900	movq	0x20(%rsp), %rbp
0000000001017905	addq	$0x28, %rsp
0000000001017909	retq
000000000101790a	movq	%rax, (%rsp)
000000000101790e	movq	%rbx, 0x8(%rsp)
0000000001017913	callq	"runtime.(*gcWork).put"
0000000001017918	jmp	0x1017900
000000000101791a	jae	0x1017a11
0000000001017920	movq	%rbx, 0x18(%rcx,%rdx,8)
0000000001017925	incq	0x10(%rcx)
0000000001017929	movl	$0x1, %ecx
000000000101792e	jmp	0x10178fc
0000000001017930	xorl	%ecx, %ecx
0000000001017932	jmp	0x10178fc
0000000001017934	movzbl	(%rax), %edx
0000000001017937	incl	%ecx
0000000001017939	shrb	%cl, %dl
000000000101793b	cmpl	$0x8, %ecx
000000000101793e	sbbl	%esi, %esi
0000000001017940	andl	%esi, %edx
0000000001017942	testb	$0x10, %dl
0000000001017945	setne	%al
0000000001017948	jmp	0x10178d8
000000000101794a	leal	0x1(%rcx), %edi
000000000101794d	movl	%edi, %ecx
000000000101794f	movl	$0x10, %r8d
0000000001017955	shll	%cl, %r8d
0000000001017958	cmpl	$0x20, %ecx
000000000101795b	sbbl	%edi, %edi
000000000101795d	andl	%edi, %r8d
0000000001017960	lock
0000000001017961	orb	%r8b, (%rax)
0000000001017964	movl	%esi, %ecx
0000000001017966	jmp	0x10178c0
000000000101796b	movq	0x20(%rsp), %rbp
0000000001017970	addq	$0x28, %rsp
0000000001017974	retq
0000000001017975	movzbl	(%rax), %r9d
0000000001017979	leal	0x1(%rsi), %ecx
000000000101797c	shrb	%cl, %r9b
000000000101797f	cmpl	$0x8, %ecx
0000000001017982	sbbl	%r10d, %r10d
0000000001017985	andl	%r10d, %r9d
0000000001017988	testb	$0x10, %r9b
000000000101798c	setne	%r8b
0000000001017990	movl	%esi, %ecx
0000000001017992	jmp	0x1017899
0000000001017997	movq	%rax, %rbx
000000000101799a	xorl	%esi, %esi
000000000101799c	xorl	%eax, %eax
000000000101799e	jmp	0x1017871
00000000010179a3	cmpl	$0x0, 0xbd382(%rip)
00000000010179aa	jle	0x10179b5
00000000010179ac	movq	0x30(%rdx), %rcx
00000000010179b0	cmpq	%rcx, %rdi
00000000010179b3	jae	0x10179fb
00000000010179b5	testb	%al, (%rsi)
00000000010179b7	movzbl	(%r8,%rbx), %ecx
00000000010179bc	testb	%r9b, %cl
00000000010179bf	jne	0x10179f1
00000000010179c1	lock
00000000010179c2	orb	%r9b, (%rsi)
00000000010179c5	movzbl	0x62(%rdx), %ecx
00000000010179c9	testb	$0x1, %cl
00000000010179cc	jne	0x10179d6
00000000010179ce	movq	%rax, %rbx
00000000010179d1	jmp	0x10178e0
00000000010179d6	movq	0x50(%rsp), %rax
00000000010179db	movq	0x10(%rax), %rcx
00000000010179df	addq	0x68(%rdx), %rcx
00000000010179e3	movq	%rcx, 0x10(%rax)
00000000010179e7	movq	0x20(%rsp), %rbp
00000000010179ec	addq	$0x28, %rsp
00000000010179f0	retq
00000000010179f1	movq	0x20(%rsp), %rbp
00000000010179f6	addq	$0x28, %rsp
00000000010179fa	retq
00000000010179fb	movq	0x48(%rdx), %rcx
00000000010179ff	leaq	(%rcx,%r8), %rdi
0000000001017a03	testb	%al, (%rdi)
0000000001017a05	movzbl	(%r8,%rcx), %ecx
0000000001017a0a	testb	%cl, %r9b
0000000001017a0d	jne	0x10179b5
0000000001017a0f	jmp	0x1017a18
0000000001017a11	callq	runtime.panicindex
0000000001017a16	ud2
0000000001017a18	callq	runtime.printlock
0000000001017a1d	leaq	0x5561b(%rip), %rax
0000000001017a24	movq	%rax, (%rsp)
0000000001017a28	movq	$0x1d, 0x8(%rsp)
0000000001017a31	callq	runtime.printstring
0000000001017a36	movq	0x30(%rsp), %rax
0000000001017a3b	movq	%rax, (%rsp)
0000000001017a3f	callq	runtime.printhex
0000000001017a44	leaq	0x537cd(%rip), %rax
0000000001017a4b	movq	%rax, (%rsp)
0000000001017a4f	movq	$0xc, 0x8(%rsp)
0000000001017a58	callq	runtime.printstring
0000000001017a5d	movq	0x38(%rsp), %rax
0000000001017a62	movq	%rax, (%rsp)
0000000001017a66	callq	runtime.printhex
0000000001017a6b	leaq	0x53011(%rip), %rax
0000000001017a72	movq	%rax, (%rsp)
0000000001017a76	movq	$0x1, 0x8(%rsp)
0000000001017a7f	callq	runtime.printstring
0000000001017a84	movq	0x40(%rsp), %rax
0000000001017a89	movq	%rax, (%rsp)
0000000001017a8d	callq	runtime.printhex
0000000001017a92	leaq	0x53001(%rip), %rax
0000000001017a99	movq	%rax, (%rsp)
0000000001017a9d	movq	$0x2, 0x8(%rsp)
0000000001017aa6	callq	runtime.printstring
0000000001017aab	callq	runtime.printunlock
0000000001017ab0	leaq	0x53088(%rip), %rax
0000000001017ab7	movq	%rax, (%rsp)
0000000001017abb	movq	$0x4, 0x8(%rsp)
0000000001017ac4	movq	0x38(%rsp), %rax
0000000001017ac9	movq	%rax, 0x10(%rsp)
0000000001017ace	movq	0x40(%rsp), %rax
0000000001017ad3	movq	%rax, 0x18(%rsp)
0000000001017ad8	callq	runtime.gcDumpObject
0000000001017add	leaq	0x53009(%rip), %rax
0000000001017ae4	movq	%rax, (%rsp)
0000000001017ae8	movq	$0x3, 0x8(%rsp)
0000000001017af1	movq	0x30(%rsp), %rax
0000000001017af6	movq	%rax, 0x10(%rsp)
0000000001017afb	movq	$-0x1, 0x18(%rsp)
0000000001017b04	callq	runtime.gcDumpObject
0000000001017b09	movq	%gs:0x30, %rax
0000000001017b12	movq	0x30(%rax), %rax
0000000001017b16	movb	$0x2, 0x125(%rax)
0000000001017b1d	leaq	0x540d3(%rip), %rax
0000000001017b24	movq	%rax, (%rsp)
0000000001017b28	movq	$0x13, 0x8(%rsp)
0000000001017b31	callq	runtime.throw
0000000001017b36	ud2
0000000001017b38	leaq	0x566ca(%rip), %rax
0000000001017b3f	movq	%rax, (%rsp)
0000000001017b43	movq	$0x29, 0x8(%rsp)
0000000001017b4c	callq	runtime.throw
0000000001017b51	ud2
0000000001017b53	callq	runtime.panicindex
0000000001017b58	ud2
0000000001017b5a	callq	runtime.printlock
0000000001017b5f	callq	runtime.printlock
0000000001017b64	leaq	0x57101(%rip), %rax
0000000001017b6b	movq	%rax, (%rsp)
0000000001017b6f	movq	$0x44, 0x8(%rsp)
0000000001017b78	callq	runtime.printstring
0000000001017b7d	movq	0x30(%rsp), %rax
0000000001017b82	movq	%rax, (%rsp)
0000000001017b86	callq	runtime.printhex
0000000001017b8b	callq	runtime.printnl
0000000001017b90	callq	runtime.printunlock
0000000001017b95	callq	runtime.printlock
0000000001017b9a	leaq	0x54aca(%rip), %rax
0000000001017ba1	movq	%rax, (%rsp)
0000000001017ba5	movq	$0x18, 0x8(%rsp)
0000000001017bae	callq	runtime.printstring
0000000001017bb3	movq	0x38(%rsp), %rax
0000000001017bb8	movq	%rax, (%rsp)
0000000001017bbc	callq	runtime.printhex
0000000001017bc1	leaq	0x52ebb(%rip), %rax
0000000001017bc8	movq	%rax, (%rsp)
0000000001017bcc	movq	$0x1, 0x8(%rsp)
0000000001017bd5	callq	runtime.printstring
0000000001017bda	movq	0x40(%rsp), %rax
0000000001017bdf	movq	%rax, (%rsp)
0000000001017be3	callq	runtime.printhex
0000000001017be8	leaq	0x52eab(%rip), %rax
0000000001017bef	movq	%rax, (%rsp)
0000000001017bf3	movq	$0x2, 0x8(%rsp)
0000000001017bfc	callq	runtime.printstring
0000000001017c01	callq	runtime.printunlock
0000000001017c06	leaq	0x52f32(%rip), %rax
0000000001017c0d	movq	%rax, (%rsp)
0000000001017c11	movq	$0x4, 0x8(%rsp)
0000000001017c1a	movq	0x38(%rsp), %rax
0000000001017c1f	movq	%rax, 0x10(%rsp)
0000000001017c24	movq	0x40(%rsp), %rax
0000000001017c29	movq	%rax, 0x18(%rsp)
0000000001017c2e	callq	runtime.gcDumpObject
0000000001017c33	leaq	0x52eb3(%rip), %rax
0000000001017c3a	movq	%rax, (%rsp)
0000000001017c3e	movq	$0x3, 0x8(%rsp)
0000000001017c47	movq	0x30(%rsp), %rax
0000000001017c4c	movq	%rax, 0x10(%rsp)
0000000001017c51	movq	$-0x1, 0x18(%rsp)
0000000001017c5a	callq	runtime.gcDumpObject
0000000001017c5f	movq	%gs:0x30, %rax
0000000001017c68	movq	0x30(%rax), %rax
0000000001017c6c	movb	$0x2, 0x125(%rax)
0000000001017c73	leaq	0x557be(%rip), %rax
0000000001017c7a	movq	%rax, (%rsp)
0000000001017c7e	movq	$0x1f, 0x8(%rsp)
0000000001017c87	callq	runtime.throw
0000000001017c8c	ud2
0000000001017c8e	leaq	0x55ea7(%rip), %rax
0000000001017c95	movq	%rax, (%rsp)
0000000001017c99	movq	$0x23, 0x8(%rsp)
0000000001017ca2	callq	runtime.throw
0000000001017ca7	ud2
0000000001017ca9	callq	runtime.morestack_noctxt
0000000001017cae	jmp	runtime.greyobject
0000000001017cb3	int3
0000000001017cb4	int3
0000000001017cb5	int3
0000000001017cb6	int3
0000000001017cb7	int3
0000000001017cb8	int3
0000000001017cb9	int3
0000000001017cba	int3
0000000001017cbb	int3
0000000001017cbc	int3
0000000001017cbd	int3
0000000001017cbe	int3
0000000001017cbf	int3
runtime.gcDumpObject:
0000000001017cc0	movq	%gs:0x30, %rcx
0000000001017cc9	cmpq	0x10(%rcx), %rsp
0000000001017ccd	jbe	0x1018141
0000000001017cd3	subq	$0x68, %rsp
0000000001017cd7	movq	%rbp, 0x60(%rsp)
0000000001017cdc	leaq	0x60(%rsp), %rbp
0000000001017ce1	movq	0x80(%rsp), %rax
0000000001017ce9	movabsq	$0x800000000000, %rcx
0000000001017cf3	addq	%rax, %rcx
0000000001017cf6	shrq	$0x1a, %rcx
0000000001017cfa	cmpq	$0x400000, %rcx
0000000001017d01	jb	0x1018111
0000000001017d07	xorl	%ecx, %ecx
0000000001017d09	movq	%rcx, 0x50(%rsp)
0000000001017d0e	callq	runtime.printlock
0000000001017d13	movq	0x70(%rsp), %rax
0000000001017d18	movq	%rax, (%rsp)
0000000001017d1c	movq	0x78(%rsp), %rcx
0000000001017d21	movq	%rcx, 0x8(%rsp)
0000000001017d26	callq	runtime.printstring
0000000001017d2b	leaq	0x52d58(%rip), %rax
0000000001017d32	movq	%rax, (%rsp)
0000000001017d36	movq	$0x1, 0x8(%rsp)
0000000001017d3f	callq	runtime.printstring
0000000001017d44	movq	0x80(%rsp), %rax
0000000001017d4c	movq	%rax, (%rsp)
0000000001017d50	callq	runtime.printhex
0000000001017d55	callq	runtime.printunlock
0000000001017d5a	movq	0x50(%rsp), %rax
0000000001017d5f	testq	%rax, %rax
0000000001017d62	je	0x10180e4
0000000001017d68	movzbl	0x62(%rax), %ecx
0000000001017d6c	movq	%rcx, 0x48(%rsp)
0000000001017d71	movq	0x80(%rax), %rdx
0000000001017d78	movq	%rdx, 0x40(%rsp)
0000000001017d7d	movq	0x68(%rax), %rbx
0000000001017d81	movq	%rbx, 0x38(%rsp)
0000000001017d86	movq	0x18(%rax), %rsi
0000000001017d8a	movq	%rsi, 0x18(%rsp)
0000000001017d8f	callq	runtime.printlock
0000000001017d94	leaq	0x5323f(%rip), %rax
0000000001017d9b	movq	%rax, (%rsp)
0000000001017d9f	movq	$0xa, 0x8(%rsp)
0000000001017da8	callq	runtime.printstring
0000000001017dad	movq	0x18(%rsp), %rax
0000000001017db2	movq	%rax, (%rsp)
0000000001017db6	callq	runtime.printhex
0000000001017dbb	leaq	0x53131(%rip), %rax
0000000001017dc2	movq	%rax, (%rsp)
0000000001017dc6	movq	$0x9, 0x8(%rsp)
0000000001017dcf	callq	runtime.printstring
0000000001017dd4	movq	0x40(%rsp), %rax
0000000001017dd9	movq	%rax, (%rsp)
0000000001017ddd	callq	runtime.printhex
0000000001017de2	leaq	0x535f3(%rip), %rax
0000000001017de9	movq	%rax, (%rsp)
0000000001017ded	movq	$0xd, 0x8(%rsp)
0000000001017df6	callq	runtime.printstring
0000000001017dfb	movq	0x48(%rsp), %rax
0000000001017e00	movq	%rax, (%rsp)
0000000001017e04	callq	runtime.printuint
0000000001017e09	leaq	0x53450(%rip), %rax
0000000001017e10	movq	%rax, (%rsp)
0000000001017e14	movq	$0xc, 0x8(%rsp)
0000000001017e1d	callq	runtime.printstring
0000000001017e22	movq	0x38(%rsp), %rax
0000000001017e27	movq	%rax, (%rsp)
0000000001017e2b	callq	runtime.printuint
0000000001017e30	leaq	0x530c5(%rip), %rax
0000000001017e37	movq	%rax, (%rsp)
0000000001017e3b	movq	$0x9, 0x8(%rsp)
0000000001017e44	callq	runtime.printstring
0000000001017e49	callq	runtime.printunlock
0000000001017e4e	movq	0x50(%rsp), %rax
0000000001017e53	movzbl	0x64(%rax), %ecx
0000000001017e57	movb	%cl, 0x17(%rsp)
0000000001017e5b	testb	%cl, %cl
0000000001017e5d	jb	0x1017e79
0000000001017e5f	movzbl	%cl, %edx
0000000001017e62	movq	runtime.mSpanStateNames(%rip), %rbx
0000000001017e69	movq	0x9f0a8(%rip), %rsi
0000000001017e70	cmpq	%rsi, %rdx
0000000001017e73	jl	0x10180a1
0000000001017e79	callq	runtime.printlock
0000000001017e7e	leaq	0x5300c(%rip), %rax
0000000001017e85	movq	%rax, (%rsp)
0000000001017e89	movq	$0x8, 0x8(%rsp)
0000000001017e92	callq	runtime.printstring
0000000001017e97	movzbl	0x17(%rsp), %eax
0000000001017e9c	movzbl	%al, %eax
0000000001017e9f	movq	%rax, (%rsp)
0000000001017ea3	callq	runtime.printuint
0000000001017ea8	leaq	0x52beb(%rip), %rax
0000000001017eaf	movq	%rax, (%rsp)
0000000001017eb3	movq	$0x2, 0x8(%rsp)
0000000001017ebc	callq	runtime.printstring
0000000001017ec1	callq	runtime.printunlock
0000000001017ec6	movq	0x50(%rsp), %rax
0000000001017ecb	movq	0x68(%rax), %rcx
0000000001017ecf	cmpb	$0x2, 0x64(%rax)
0000000001017ed3	jne	0x1018094
0000000001017ed9	testq	%rcx, %rcx
0000000001017edc	jne	0x1018094
0000000001017ee2	movq	0x88(%rsp), %rax
0000000001017eea	leaq	0x8(%rax), %rcx
0000000001017eee	movq	%rcx, 0x20(%rsp)
0000000001017ef3	xorl	%edx, %edx
0000000001017ef5	xorl	%ebx, %ebx
0000000001017ef7	jmp	0x1017efd
0000000001017ef9	addq	$0x8, %rdx
0000000001017efd	cmpq	%rcx, %rdx
0000000001017f00	jae	0x1018061
0000000001017f06	cmpq	$0x400, %rdx
0000000001017f0d	jb	0x1017f2b
0000000001017f0f	leaq	-0x80(%rax), %rsi
0000000001017f13	cmpq	%rdx, %rsi
0000000001017f16	jae	0x1017f24
0000000001017f18	leaq	0x80(%rax), %rsi
0000000001017f1f	cmpq	%rsi, %rdx
0000000001017f22	jb	0x1017f2b
0000000001017f24	movl	$0x1, %ebx
0000000001017f29	jmp	0x1017ef9
0000000001017f2b	movq	%rdx, 0x28(%rsp)
0000000001017f30	testb	%bl, %bl
0000000001017f32	jne	0x1018034
0000000001017f38	movq	0x80(%rsp), %rax
0000000001017f40	leaq	(%rdx,%rax), %rcx
0000000001017f44	movq	(%rcx), %rcx
0000000001017f47	movq	%rcx, 0x40(%rsp)
0000000001017f4c	callq	runtime.printlock
0000000001017f51	leaq	0x52b5f(%rip), %rax
0000000001017f58	movq	%rax, (%rsp)
0000000001017f5c	movq	$0x3, 0x8(%rsp)
0000000001017f65	callq	runtime.printstring
0000000001017f6a	movq	0x70(%rsp), %rax
0000000001017f6f	movq	%rax, (%rsp)
0000000001017f73	movq	0x78(%rsp), %rcx
0000000001017f78	movq	%rcx, 0x8(%rsp)
0000000001017f7d	callq	runtime.printstring
0000000001017f82	leaq	0x52afa(%rip), %rax
0000000001017f89	movq	%rax, (%rsp)
0000000001017f8d	movq	$0x1, 0x8(%rsp)
0000000001017f96	callq	runtime.printstring
0000000001017f9b	movq	0x28(%rsp), %rax
0000000001017fa0	movq	%rax, (%rsp)
0000000001017fa4	callq	runtime.printuint
0000000001017fa9	leaq	0x52b67(%rip), %rax
0000000001017fb0	movq	%rax, (%rsp)
0000000001017fb4	movq	$0x4, 0x8(%rsp)
0000000001017fbd	callq	runtime.printstring
0000000001017fc2	movq	0x40(%rsp), %rax
0000000001017fc7	movq	%rax, (%rsp)
0000000001017fcb	callq	runtime.printhex
0000000001017fd0	callq	runtime.printunlock
0000000001017fd5	movq	0x28(%rsp), %rax
0000000001017fda	movq	0x88(%rsp), %rcx
0000000001017fe2	cmpq	%rcx, %rax
0000000001017fe5	je	0x101800f
0000000001017fe7	callq	runtime.printlock
0000000001017fec	callq	runtime.printnl
0000000001017ff1	callq	runtime.printunlock
0000000001017ff6	movq	0x88(%rsp), %rax
0000000001017ffe	movq	0x20(%rsp), %rcx
0000000001018003	movq	0x28(%rsp), %rdx
0000000001018008	xorl	%ebx, %ebx
000000000101800a	jmp	0x1017ef9
000000000101800f	callq	runtime.printlock
0000000001018014	leaq	0x52ad8(%rip), %rax
000000000101801b	movq	%rax, (%rsp)
000000000101801f	movq	$0x4, 0x8(%rsp)
0000000001018028	callq	runtime.printstring
000000000101802d	callq	runtime.printunlock
0000000001018032	jmp	0x1017fe7
0000000001018034	callq	runtime.printlock
0000000001018039	leaq	0x52b47(%rip), %rax
0000000001018040	movq	%rax, (%rsp)
0000000001018044	movq	$0x5, 0x8(%rsp)
000000000101804d	callq	runtime.printstring
0000000001018052	callq	runtime.printunlock
0000000001018057	movq	0x28(%rsp), %rdx
000000000101805c	jmp	0x1017f38
0000000001018061	testb	%bl, %bl
0000000001018063	jne	0x101806f
0000000001018065	movq	0x60(%rsp), %rbp
000000000101806a	addq	$0x68, %rsp
000000000101806e	retq
000000000101806f	callq	runtime.printlock
0000000001018074	leaq	0x52b0c(%rip), %rax
000000000101807b	movq	%rax, (%rsp)
000000000101807f	movq	$0x5, 0x8(%rsp)
0000000001018088	callq	runtime.printstring
000000000101808d	callq	runtime.printunlock
0000000001018092	jmp	0x1018065
0000000001018094	movq	0x88(%rsp), %rax
000000000101809c	jmp	0x1017eee
00000000010180a1	shlq	$0x4, %rdx
00000000010180a5	movq	0x8(%rbx,%rdx), %rax
00000000010180aa	movq	%rax, 0x30(%rsp)
00000000010180af	movq	(%rbx,%rdx), %rcx
00000000010180b3	movq	%rcx, 0x58(%rsp)
00000000010180b8	callq	runtime.printlock
00000000010180bd	movq	0x58(%rsp), %rax
00000000010180c2	movq	%rax, (%rsp)
00000000010180c6	movq	0x30(%rsp), %rax
00000000010180cb	movq	%rax, 0x8(%rsp)
00000000010180d0	callq	runtime.printstring
00000000010180d5	callq	runtime.printnl
00000000010180da	callq	runtime.printunlock
00000000010180df	jmp	0x1017ec6
00000000010180e4	callq	runtime.printlock
00000000010180e9	leaq	0x52be6(%rip), %rax
00000000010180f0	movq	%rax, (%rsp)
00000000010180f4	movq	$0x7, 0x8(%rsp)
00000000010180fd	callq	runtime.printstring
0000000001018102	callq	runtime.printunlock
0000000001018107	movq	0x60(%rsp), %rbp
000000000101810c	addq	$0x68, %rsp
0000000001018110	retq
0000000001018111	movq	0xa6680(%rip), %rdx
0000000001018118	testb	%al, (%rdx)
000000000101811a	movq	(%rdx,%rcx,8), %rcx
000000000101811e	testq	%rcx, %rcx
0000000001018121	je	0x101813a
0000000001018123	shrq	$0xd, %rax
0000000001018127	andq	$0x1fff, %rax
000000000101812d	movq	0x200000(%rcx,%rax,8), %rcx
0000000001018135	jmp	0x1017d09
000000000101813a	xorl	%ecx, %ecx
000000000101813c	jmp	0x1017d09
0000000001018141	callq	runtime.morestack_noctxt
0000000001018146	jmp	runtime.gcDumpObject
000000000101814b	int3
000000000101814c	int3
000000000101814d	int3
000000000101814e	int3
000000000101814f	int3
runtime.gcmarknewobject:
0000000001018150	subq	$0x28, %rsp
0000000001018154	movq	%rbp, 0x20(%rsp)
0000000001018159	leaq	0x20(%rsp), %rbp
000000000101815e	leaq	runtime.useCheckmark(%rip), %rax
0000000001018165	cmpb	$0x0, (%rax)
0000000001018168	je	0x101817a
000000000101816a	leaq	runtime.gcBlackenPromptly(%rip), %rax
0000000001018171	cmpb	$0x0, (%rax)
0000000001018174	je	0x10181fd
000000000101817a	movq	0x30(%rsp), %rax
000000000101817f	movq	%rax, (%rsp)
0000000001018183	callq	runtime.markBitsForAddr
0000000001018188	movzbl	0x10(%rsp), %eax
000000000101818d	movq	0x8(%rsp), %rcx
0000000001018192	lock
0000000001018193	orb	%al, (%rcx)
0000000001018195	movq	%gs:0x30, %rax
000000000101819e	movq	0x30(%rax), %rax
00000000010181a2	movq	0xd0(%rax), %rcx
00000000010181a9	testb	%al, (%rcx)
00000000010181ab	testb	%al, (%rax)
00000000010181ad	leaq	0x1270(%rcx), %rax
00000000010181b4	testb	%al, (%rax)
00000000010181b6	movq	0x38(%rsp), %rdx
00000000010181bb	addq	0x1280(%rcx), %rdx
00000000010181c2	movq	%rdx, 0x1280(%rcx)
00000000010181c9	movq	0x40(%rsp), %rdx
00000000010181ce	addq	0x1288(%rcx), %rdx
00000000010181d5	movq	%rdx, 0x1288(%rcx)
00000000010181dc	leaq	runtime.gcBlackenPromptly(%rip), %rcx
00000000010181e3	cmpb	$0x0, (%rcx)
00000000010181e6	jne	0x10181f2
00000000010181e8	movq	0x20(%rsp), %rbp
00000000010181ed	addq	$0x28, %rsp
00000000010181f1	retq
00000000010181f2	movq	%rax, (%rsp)
00000000010181f6	callq	"runtime.(*gcWork).dispose"
00000000010181fb	jmp	0x10181e8
00000000010181fd	leaq	0x5622b(%rip), %rax
0000000001018204	movq	%rax, (%rsp)
0000000001018208	movq	$0x2c, 0x8(%rsp)
0000000001018211	callq	runtime.throw
0000000001018216	ud2
0000000001018218	int3
0000000001018219	int3
000000000101821a	int3
000000000101821b	int3
000000000101821c	int3
000000000101821d	int3
000000000101821e	int3
000000000101821f	int3
runtime.gcMarkTinyAllocs:
0000000001018220	movq	%gs:0x30, %rcx
0000000001018229	cmpq	0x10(%rcx), %rsp
000000000101822d	jbe	0x1018323
0000000001018233	subq	$0x68, %rsp
0000000001018237	movq	%rbp, 0x60(%rsp)
000000000101823c	leaq	0x60(%rsp), %rbp
0000000001018241	movq	0xa0610(%rip), %rax
0000000001018248	movq	%rax, 0x38(%rsp)
000000000101824d	movq	runtime.allp(%rip), %rcx
0000000001018254	movq	%rcx, 0x58(%rsp)
0000000001018259	xorl	%edx, %edx
000000000101825b	jmp	0x1018260
000000000101825d	incq	%rdx
0000000001018260	cmpq	%rax, %rdx
0000000001018263	jge	0x1018319
0000000001018269	movq	(%rcx,%rdx,8), %rbx
000000000101826d	movq	0x48(%rbx), %rsi
0000000001018271	testq	%rsi, %rsi
0000000001018274	je	0x101825d
0000000001018276	movq	0x10(%rsi), %rdi
000000000101827a	testq	%rdi, %rdi
000000000101827d	je	0x101825d
000000000101827f	movq	%rdx, 0x30(%rsp)
0000000001018284	movq	%rbx, 0x40(%rsp)
0000000001018289	movq	%rsi, 0x50(%rsp)
000000000101828e	movq	%rdi, (%rsp)
0000000001018292	xorps	%xmm0, %xmm0
0000000001018295	movups	%xmm0, 0x8(%rsp)
000000000101829a	callq	runtime.findObject
000000000101829f	movq	0x20(%rsp), %rax
00000000010182a4	movq	0x28(%rsp), %rcx
00000000010182a9	movq	0x50(%rsp), %rdx
00000000010182ae	movq	0x10(%rdx), %rdx
00000000010182b2	movq	%rdx, (%rsp)
00000000010182b6	xorps	%xmm0, %xmm0
00000000010182b9	movups	%xmm0, 0x8(%rsp)
00000000010182be	movq	%rax, 0x18(%rsp)
00000000010182c3	movq	0x40(%rsp), %rax
00000000010182c8	addq	$0x1270, %rax
00000000010182ce	movq	%rax, 0x48(%rsp)
00000000010182d3	movq	%rax, 0x20(%rsp)
00000000010182d8	movq	%rcx, 0x28(%rsp)
00000000010182dd	callq	runtime.greyobject
00000000010182e2	leaq	runtime.gcBlackenPromptly(%rip), %rax
00000000010182e9	cmpb	$0x0, (%rax)
00000000010182ec	jne	0x1018302
00000000010182ee	movq	0x38(%rsp), %rax
00000000010182f3	movq	0x58(%rsp), %rcx
00000000010182f8	movq	0x30(%rsp), %rdx
00000000010182fd	jmp	0x101825d
0000000001018302	movq	0x48(%rsp), %rax
0000000001018307	movq	%rax, (%rsp)
000000000101830b	callq	"runtime.(*gcWork).dispose"
0000000001018310	leaq	runtime.gcBlackenPromptly(%rip), %rax
0000000001018317	jmp	0x10182ee
0000000001018319	movq	0x60(%rsp), %rbp
000000000101831e	addq	$0x68, %rsp
0000000001018322	retq
0000000001018323	callq	runtime.morestack_noctxt
0000000001018328	jmp	runtime.gcMarkTinyAllocs
000000000101832d	int3
000000000101832e	int3
000000000101832f	int3
runtime.initCheckmarks:
0000000001018330	movq	%gs:0x30, %rcx
0000000001018339	cmpq	0x10(%rcx), %rsp
000000000101833d	jbe	0x1018459
0000000001018343	subq	$0x50, %rsp
0000000001018347	movq	%rbp, 0x48(%rsp)
000000000101834c	leaq	0x48(%rsp), %rbp
0000000001018351	movb	$0x1, runtime.useAeshash(%rip)
0000000001018358	movq	0xa6179(%rip), %rcx
000000000101835f	movq	%rcx, 0x38(%rsp)
0000000001018364	movq	0xa6165(%rip), %rdx
000000000101836b	movq	%rdx, 0x40(%rsp)
0000000001018370	xorl	%eax, %eax
0000000001018372	jmp	0x1018377
0000000001018374	incq	%rax
0000000001018377	cmpq	%rcx, %rax
000000000101837a	jge	0x1018448
0000000001018380	movq	(%rdx,%rax,8), %rbx
0000000001018384	cmpb	$0x1, 0x64(%rbx)
0000000001018388	jne	0x1018374
000000000101838a	movq	0xa6407(%rip), %rsi
0000000001018391	testb	%al, (%rsi)
0000000001018393	movq	0x18(%rbx), %rdi
0000000001018397	movabsq	$0x800000000000, %r8
00000000010183a1	leaq	(%rdi,%r8), %r9
00000000010183a5	shrq	$0x1a, %r9
00000000010183a9	cmpq	$0x400000, %r9
00000000010183b0	jae	0x1018452
00000000010183b6	movq	(%rsi,%r9,8), %rsi
00000000010183ba	testq	%rsi, %rsi
00000000010183bd	je	0x101843c
00000000010183bf	movq	%rdi, %r10
00000000010183c2	shrq	$0x5, %rdi
00000000010183c6	andq	$0x1fffff, %rdi
00000000010183cd	addq	%rsi, %rdi
00000000010183d0	shrq	$0x3, %r10
00000000010183d4	andq	$0x3, %r10
00000000010183d8	addq	$0x1fffff, %rsi
00000000010183df	movq	%rax, 0x30(%rsp)
00000000010183e4	movq	0x20(%rbx), %r11
00000000010183e8	shlq	$0xd, %r11
00000000010183ec	movq	0x68(%rbx), %rbx
00000000010183f0	testq	%rbx, %rbx
00000000010183f3	jbe	0x1018438
00000000010183f5	movq	%r11, %rax
00000000010183f8	xorl	%edx, %edx
00000000010183fa	divq	%rbx
00000000010183fd	movq	%rdi, (%rsp)
0000000001018401	movl	%r10d, 0x8(%rsp)
0000000001018406	movl	%r9d, 0xc(%rsp)
000000000101840b	movq	%rsi, 0x10(%rsp)
0000000001018410	movq	%rbx, 0x18(%rsp)
0000000001018415	movq	%rax, 0x20(%rsp)
000000000101841a	movq	%r11, 0x28(%rsp)
000000000101841f	callq	runtime.heapBits.initCheckmarkSpan
0000000001018424	movq	0x30(%rsp), %rax
0000000001018429	movq	0x38(%rsp), %rcx
000000000101842e	movq	0x40(%rsp), %rdx
0000000001018433	jmp	0x1018374
0000000001018438	xorl	%eax, %eax
000000000101843a	jmp	0x10183fd
000000000101843c	xorl	%esi, %esi
000000000101843e	xorl	%r9d, %r9d
0000000001018441	xorl	%r10d, %r10d
0000000001018444	xorl	%edi, %edi
0000000001018446	jmp	0x10183df
0000000001018448	movq	0x48(%rsp), %rbp
000000000101844d	addq	$0x50, %rsp
0000000001018451	retq
0000000001018452	callq	runtime.panicindex
0000000001018457	ud2
0000000001018459	callq	runtime.morestack_noctxt
000000000101845e	jmp	runtime.initCheckmarks
0000000001018463	int3
0000000001018464	int3
0000000001018465	int3
0000000001018466	int3
0000000001018467	int3
0000000001018468	int3
0000000001018469	int3
000000000101846a	int3
000000000101846b	int3
000000000101846c	int3
000000000101846d	int3
000000000101846e	int3
000000000101846f	int3
runtime.clearCheckmarks:
0000000001018470	movq	%gs:0x30, %rcx
0000000001018479	cmpq	0x10(%rcx), %rsp
000000000101847d	jbe	0x1018599
0000000001018483	subq	$0x50, %rsp
0000000001018487	movq	%rbp, 0x48(%rsp)
000000000101848c	leaq	0x48(%rsp), %rbp
0000000001018491	movb	$0x0, runtime.useAeshash(%rip)
0000000001018498	movq	0xa6039(%rip), %rcx
000000000101849f	movq	%rcx, 0x38(%rsp)
00000000010184a4	movq	0xa6025(%rip), %rdx
00000000010184ab	movq	%rdx, 0x40(%rsp)
00000000010184b0	xorl	%eax, %eax
00000000010184b2	jmp	0x10184b7
00000000010184b4	incq	%rax
00000000010184b7	cmpq	%rcx, %rax
00000000010184ba	jge	0x1018588
00000000010184c0	movq	(%rdx,%rax,8), %rbx
00000000010184c4	cmpb	$0x1, 0x64(%rbx)
00000000010184c8	jne	0x10184b4
00000000010184ca	movq	0xa62c7(%rip), %rsi
00000000010184d1	testb	%al, (%rsi)
00000000010184d3	movq	0x18(%rbx), %rdi
00000000010184d7	movabsq	$0x800000000000, %r8
00000000010184e1	leaq	(%rdi,%r8), %r9
00000000010184e5	shrq	$0x1a, %r9
00000000010184e9	cmpq	$0x400000, %r9
00000000010184f0	jae	0x1018592
00000000010184f6	movq	(%rsi,%r9,8), %rsi
00000000010184fa	testq	%rsi, %rsi
00000000010184fd	je	0x101857c
00000000010184ff	movq	%rdi, %r10
0000000001018502	shrq	$0x5, %rdi
0000000001018506	andq	$0x1fffff, %rdi
000000000101850d	addq	%rsi, %rdi
0000000001018510	shrq	$0x3, %r10
0000000001018514	andq	$0x3, %r10
0000000001018518	addq	$0x1fffff, %rsi
000000000101851f	movq	%rax, 0x30(%rsp)
0000000001018524	movq	0x20(%rbx), %r11
0000000001018528	shlq	$0xd, %r11
000000000101852c	movq	0x68(%rbx), %rbx
0000000001018530	testq	%rbx, %rbx
0000000001018533	jbe	0x1018578
0000000001018535	movq	%r11, %rax
0000000001018538	xorl	%edx, %edx
000000000101853a	divq	%rbx
000000000101853d	movq	%rdi, (%rsp)
0000000001018541	movl	%r10d, 0x8(%rsp)
0000000001018546	movl	%r9d, 0xc(%rsp)
000000000101854b	movq	%rsi, 0x10(%rsp)
0000000001018550	movq	%rbx, 0x18(%rsp)
0000000001018555	movq	%rax, 0x20(%rsp)
000000000101855a	movq	%r11, 0x28(%rsp)
000000000101855f	callq	runtime.heapBits.clearCheckmarkSpan
0000000001018564	movq	0x30(%rsp), %rax
0000000001018569	movq	0x38(%rsp), %rcx
000000000101856e	movq	0x40(%rsp), %rdx
0000000001018573	jmp	0x10184b4
0000000001018578	xorl	%eax, %eax
000000000101857a	jmp	0x101853d
000000000101857c	xorl	%esi, %esi
000000000101857e	xorl	%r9d, %r9d
0000000001018581	xorl	%r10d, %r10d
0000000001018584	xorl	%edi, %edi
0000000001018586	jmp	0x101851f
0000000001018588	movq	0x48(%rsp), %rbp
000000000101858d	addq	$0x50, %rsp
0000000001018591	retq
0000000001018592	callq	runtime.panicindex
0000000001018597	ud2
0000000001018599	callq	runtime.morestack_noctxt
000000000101859e	jmp	runtime.clearCheckmarks
00000000010185a3	int3
00000000010185a4	int3
00000000010185a5	int3
00000000010185a6	int3
00000000010185a7	int3
00000000010185a8	int3
00000000010185a9	int3
00000000010185aa	int3
00000000010185ab	int3
00000000010185ac	int3
00000000010185ad	int3
00000000010185ae	int3
00000000010185af	int3
runtime.finishsweep_m:
00000000010185b0	movq	%gs:0x30, %rcx
00000000010185b9	cmpq	0x10(%rcx), %rsp
00000000010185bd	jbe	0x10185f0
00000000010185bf	subq	$0x10, %rsp
00000000010185c3	movq	%rbp, 0x8(%rsp)
00000000010185c8	leaq	0x8(%rsp), %rbp
00000000010185cd	jmp	0x10185d5
00000000010185cf	incl	0xa03a3(%rip)
00000000010185d5	callq	runtime.sweepone
00000000010185da	cmpq	$-0x1, (%rsp)
00000000010185df	jne	0x10185cf
00000000010185e1	callq	runtime.nextMarkBitArenaEpoch
00000000010185e6	movq	0x8(%rsp), %rbp
00000000010185eb	addq	$0x10, %rsp
00000000010185ef	retq
00000000010185f0	callq	runtime.morestack_noctxt
00000000010185f5	jmp	runtime.finishsweep_m
00000000010185f7	int3
00000000010185f8	int3
00000000010185f9	int3
00000000010185fa	int3
00000000010185fb	int3
00000000010185fc	int3
00000000010185fd	int3
00000000010185fe	int3
00000000010185ff	int3
runtime.bgsweep:
0000000001018600	movq	%gs:0x30, %rcx
0000000001018609	cmpq	0x10(%rcx), %rsp
000000000101860d	jbe	0x1018727
0000000001018613	subq	$0x20, %rsp
0000000001018617	movq	%rbp, 0x18(%rsp)
000000000101861c	leaq	0x18(%rsp), %rbp
0000000001018621	movq	%gs:0x30, %rax
000000000101862a	cmpl	$0x0, 0xbc5ff(%rip)
0000000001018631	jne	0x1018716
0000000001018637	movq	%rax, 0xa032a(%rip)
000000000101863e	leaq	runtime.sweep(%rip), %rax
0000000001018645	movq	%rax, (%rsp)
0000000001018649	callq	runtime.lock
000000000101864e	movb	$0x1, 0xa031b(%rip)
0000000001018655	movq	0x28(%rsp), %rax
000000000101865a	movq	%rax, (%rsp)
000000000101865e	leaq	runtime.statictmp_17(%rip), %rax
0000000001018665	movq	%rax, 0x8(%rsp)
000000000101866a	callq	runtime.chansend1
000000000101866f	leaq	runtime.sweep(%rip), %rax
0000000001018676	movq	%rax, (%rsp)
000000000101867a	movw	$0x140c, 0x8(%rsp)
0000000001018681	movq	$0x1, 0x10(%rsp)
000000000101868a	callq	runtime.goparkunlock
000000000101868f	jmp	0x101869c
0000000001018691	incl	0xa02dd(%rip)
0000000001018697	callq	runtime.Gosched
000000000101869c	callq	runtime.gosweepone
00000000010186a1	cmpq	$-0x1, (%rsp)
00000000010186a6	jne	0x1018691
00000000010186a8	jmp	0x10186af
00000000010186aa	callq	runtime.Gosched
00000000010186af	movb	$0x1, (%rsp)
00000000010186b3	callq	runtime.freeSomeWbufs
00000000010186b8	leaq	0x8(%rsp), %rax
00000000010186bd	cmpb	$0x0, (%rax)
00000000010186c0	jne	0x10186aa
00000000010186c2	leaq	runtime.sweep(%rip), %rax
00000000010186c9	movq	%rax, (%rsp)
00000000010186cd	callq	runtime.lock
00000000010186d2	cmpl	$0x0, 0xa5deb(%rip)
00000000010186d9	je	0x1018704
00000000010186db	movb	$0x1, 0xa028e(%rip)
00000000010186e2	leaq	runtime.sweep(%rip), %rax
00000000010186e9	movq	%rax, (%rsp)
00000000010186ed	movw	$0x140c, 0x8(%rsp)
00000000010186f4	movq	$0x1, 0x10(%rsp)
00000000010186fd	callq	runtime.goparkunlock
0000000001018702	jmp	0x101869c
0000000001018704	leaq	runtime.sweep(%rip), %rax
000000000101870b	movq	%rax, (%rsp)
000000000101870f	callq	runtime.unlock
0000000001018714	jmp	0x101869c
0000000001018716	leaq	0xa024b(%rip), %rdi
000000000101871d	callq	runtime.gcWriteBarrier
0000000001018722	jmp	0x101863e
0000000001018727	callq	runtime.morestack_noctxt
000000000101872c	jmp	runtime.bgsweep
0000000001018731	int3
0000000001018732	int3
0000000001018733	int3
0000000001018734	int3
0000000001018735	int3
0000000001018736	int3
0000000001018737	int3
0000000001018738	int3
0000000001018739	int3
000000000101873a	int3
000000000101873b	int3
000000000101873c	int3
000000000101873d	int3
000000000101873e	int3
000000000101873f	int3
runtime.sweepone:
0000000001018740	movq	%gs:0x30, %rcx
0000000001018749	cmpq	0x10(%rcx), %rsp
000000000101874d	jbe	0x1018acc
0000000001018753	subq	$0x60, %rsp
0000000001018757	movq	%rbp, 0x58(%rsp)
000000000101875c	leaq	0x58(%rsp), %rbp
0000000001018761	movq	%gs:0x30, %rcx
000000000101876a	movq	0x30(%rcx), %rdx
000000000101876e	movsd	0xa5de2(%rip), %xmm0
0000000001018776	incl	0x100(%rdx)
000000000101877c	movl	0xa5d42(%rip), %edx
0000000001018782	testl	%edx, %edx
0000000001018784	jne	0x10189fb
000000000101878a	movq	%rcx, 0x50(%rsp)
000000000101878f	movsd	%xmm0, 0x28(%rsp)
0000000001018795	movl	$0x1, %edx
000000000101879a	leaq	0xa5d27(%rip), %rbx
00000000010187a1	lock
00000000010187a2	xaddl	%edx, (%rbx)
00000000010187a5	movl	0xa5d15(%rip), %edx
00000000010187ab	jmp	0x10187af
00000000010187ad	movl	%esi, %edx
00000000010187af	movl	%edx, %esi
00000000010187b1	shrl	%edx
00000000010187b3	andl	$0x1, %edx
00000000010187b6	decl	%edx
00000000010187b8	negl	%edx
00000000010187ba	cmpq	$0x2, %rdx
00000000010187be	jae	0x1018ac5
00000000010187c4	leaq	(%rdx,%rdx,4), %rdx
00000000010187c8	leaq	0xa5d19(%rip), %rdi
00000000010187cf	leaq	0x20(%rdi,%rdx,8), %r8
00000000010187d4	movl	$0xffffffff, %r9d
00000000010187da	lock
00000000010187db	xaddl	%r9d, (%r8)
00000000010187df	decl	%r9d
00000000010187e2	testl	%r9d, %r9d
00000000010187e5	jge	0x10189cb
00000000010187eb	movl	$0x1, %edx
00000000010187f0	lock
00000000010187f1	xaddl	%edx, (%r8)
00000000010187f5	xorl	%eax, %eax
00000000010187f7	testq	%rax, %rax
00000000010187fa	je	0x10189b1
0000000001018800	movzbl	0x64(%rax), %edx
0000000001018804	cmpb	$0x1, %dl
0000000001018807	je	0x1018815
0000000001018809	movl	0x58(%rax), %edi
000000000101880c	cmpl	%esi, %edi
000000000101880e	je	0x10187ad
0000000001018810	jmp	0x1018a19
0000000001018815	movl	0x58(%rax), %edx
0000000001018818	leal	-0x2(%rsi), %edi
000000000101881b	cmpl	%edi, %edx
000000000101881d	jne	0x10187ad
000000000101881f	leal	-0x1(%rsi), %edx
0000000001018822	movq	%rax, %r8
0000000001018825	movl	%edi, %eax
0000000001018827	lock
0000000001018828	cmpxchgl	%edx, 0x58(%r8)
000000000101882d	sete	%dl
0000000001018830	testb	%dl, %dl
0000000001018832	je	0x10187ad
0000000001018838	movq	0x20(%r8), %rax
000000000101883c	movq	%rax, 0x30(%rsp)
0000000001018841	movq	%r8, (%rsp)
0000000001018845	movb	$0x0, 0x8(%rsp)
000000000101884a	callq	"runtime.(*mspan).sweep"
000000000101884f	movzbl	0x10(%rsp), %eax
0000000001018854	testq	%rax, %rax
0000000001018857	movl	$0x0, %eax
000000000101885c	movq	0x30(%rsp), %rcx
0000000001018861	cmovneq	%rcx, %rax
0000000001018865	movl	$0xffffffff, %ecx
000000000101886a	leaq	0xa5c57(%rip), %rdx
0000000001018871	lock
0000000001018872	xaddl	%ecx, (%rdx)
0000000001018875	decl	%ecx
0000000001018877	testl	%ecx, %ecx
0000000001018879	jne	0x101888e
000000000101887b	movl	0xa5c43(%rip), %ecx
0000000001018881	testl	%ecx, %ecx
0000000001018883	je	0x101888e
0000000001018885	cmpl	$0x0, 0xbc4a4(%rip)
000000000101888c	jg	0x10188ad
000000000101888e	movq	0x50(%rsp), %rcx
0000000001018893	movq	0x30(%rcx), %rcx
0000000001018897	addl	$-0x1, 0x100(%rcx)
000000000101889e	movq	%rax, 0x68(%rsp)
00000000010188a3	movq	0x58(%rsp), %rbp
00000000010188a8	addq	$0x60, %rsp
00000000010188ac	retq
00000000010188ad	movq	%rax, 0x30(%rsp)
00000000010188b2	movq	0xbe707(%rip), %rax
00000000010188b9	movq	%rax, 0x48(%rsp)
00000000010188be	movq	0xa5c8b(%rip), %rcx
00000000010188c5	movq	%rcx, 0x40(%rsp)
00000000010188ca	movq	0xa5c6f(%rip), %rdx
00000000010188d1	movq	%rdx, 0x38(%rsp)
00000000010188d6	callq	runtime.printlock
00000000010188db	leaq	0x54bf1(%rip), %rax
00000000010188e2	movq	%rax, (%rsp)
00000000010188e6	movq	$0x1f, 0x8(%rsp)
00000000010188ef	callq	runtime.printstring
00000000010188f4	movq	0x48(%rsp), %rax
00000000010188f9	shrq	$0x14, %rax
00000000010188fd	movq	%rax, (%rsp)
0000000001018901	callq	runtime.printuint
0000000001018906	leaq	0x52c5d(%rip), %rax
000000000101890d	movq	%rax, (%rsp)
0000000001018911	movq	$0xe, 0x8(%rsp)
000000000101891a	callq	runtime.printstring
000000000101891f	movq	0x48(%rsp), %rax
0000000001018924	movq	0x40(%rsp), %rcx
0000000001018929	subq	%rcx, %rax
000000000101892c	shrq	$0x14, %rax
0000000001018930	movq	%rax, (%rsp)
0000000001018934	callq	runtime.printuint
0000000001018939	leaq	0x539ce(%rip), %rax
0000000001018940	movq	%rax, (%rsp)
0000000001018944	movq	$0x17, 0x8(%rsp)
000000000101894d	callq	runtime.printstring
0000000001018952	movq	0x38(%rsp), %rax
0000000001018957	movq	%rax, (%rsp)
000000000101895b	callq	runtime.printuint
0000000001018960	leaq	0x52655(%rip), %rax
0000000001018967	movq	%rax, (%rsp)
000000000101896b	movq	$0xa, 0x8(%rsp)
0000000001018974	callq	runtime.printstring
0000000001018979	movsd	0x28(%rsp), %xmm0
000000000101897f	movsd	%xmm0, (%rsp)
0000000001018984	callq	runtime.printfloat
0000000001018989	leaq	0x528b8(%rip), %rax
0000000001018990	movq	%rax, (%rsp)
0000000001018994	movq	$0xc, 0x8(%rsp)
000000000101899d	callq	runtime.printstring
00000000010189a2	callq	runtime.printunlock
00000000010189a7	movq	0x30(%rsp), %rax
00000000010189ac	jmp	0x101888e
00000000010189b1	movl	$0x1, %edx
00000000010189b6	leaq	0xa5b07(%rip), %rsi
00000000010189bd	xchgl	%edx, (%rsi)
00000000010189bf	movq	$-0x1, %rax
00000000010189c6	jmp	0x1018865
00000000010189cb	movl	%r9d, %r8d
00000000010189ce	shrl	$0x9, %r9d
00000000010189d2	movq	0x8(%rdi,%rdx,8), %rdx
00000000010189d7	leaq	(%rdx,%r9,8), %rdi
00000000010189db	testb	%al, (%rdi)
00000000010189dd	movq	(%rdx,%r9,8), %rdx
00000000010189e1	testb	%al, (%rdx)
00000000010189e3	andl	$0x1ff, %r8d
00000000010189ea	movq	(%rdx,%r8,8), %rax
00000000010189ee	movq	$0x0, (%rdx,%r8,8)
00000000010189f6	jmp	0x10187f7
00000000010189fb	movq	0x30(%rcx), %rax
00000000010189ff	addl	$-0x1, 0x100(%rax)
0000000001018a06	movq	$-0x1, 0x68(%rsp)
0000000001018a0f	movq	0x58(%rsp), %rbp
0000000001018a14	addq	$0x60, %rsp
0000000001018a18	retq
0000000001018a19	movl	%esi, 0x24(%rsp)
0000000001018a1d	movb	%dl, 0x1f(%rsp)
0000000001018a21	movl	%edi, 0x20(%rsp)
0000000001018a25	callq	runtime.printlock
0000000001018a2a	leaq	0x53f93(%rip), %rax
0000000001018a31	movq	%rax, (%rsp)
0000000001018a35	movq	$0x1a, 0x8(%rsp)
0000000001018a3e	callq	runtime.printstring
0000000001018a43	movzbl	0x1f(%rsp), %eax
0000000001018a48	movzbl	%al, %eax
0000000001018a4b	movq	%rax, (%rsp)
0000000001018a4f	callq	runtime.printuint
0000000001018a54	leaq	0x52811(%rip), %rax
0000000001018a5b	movq	%rax, (%rsp)
0000000001018a5f	movq	$0xc, 0x8(%rsp)
0000000001018a68	callq	runtime.printstring
0000000001018a6d	movl	0x20(%rsp), %eax
0000000001018a71	movq	%rax, (%rsp)
0000000001018a75	callq	runtime.printuint
0000000001018a7a	leaq	0x52581(%rip), %rax
0000000001018a81	movq	%rax, (%rsp)
0000000001018a85	movq	$0xa, 0x8(%rsp)
0000000001018a8e	callq	runtime.printstring
0000000001018a93	movl	0x24(%rsp), %eax
0000000001018a97	movq	%rax, (%rsp)
0000000001018a9b	callq	runtime.printuint
0000000001018aa0	callq	runtime.printnl
0000000001018aa5	callq	runtime.printunlock
0000000001018aaa	leaq	0x54a03(%rip), %rax
0000000001018ab1	movq	%rax, (%rsp)
0000000001018ab5	movq	$0x1f, 0x8(%rsp)
0000000001018abe	callq	runtime.throw
0000000001018ac3	ud2
0000000001018ac5	callq	runtime.panicindex
0000000001018aca	ud2
0000000001018acc	callq	runtime.morestack_noctxt
0000000001018ad1	jmp	runtime.sweepone
0000000001018ad6	int3
0000000001018ad7	int3
0000000001018ad8	int3
0000000001018ad9	int3
0000000001018ada	int3
0000000001018adb	int3
0000000001018adc	int3
0000000001018add	int3
0000000001018ade	int3
0000000001018adf	int3
runtime.gosweepone:
0000000001018ae0	movq	%gs:0x30, %rcx
0000000001018ae9	cmpq	0x10(%rcx), %rsp
0000000001018aed	jbe	0x1018b46
0000000001018aef	subq	$0x28, %rsp
0000000001018af3	movq	%rbp, 0x20(%rsp)
0000000001018af8	leaq	0x20(%rsp), %rbp
0000000001018afd	movq	$0x0, 0x8(%rsp)
0000000001018b06	xorps	%xmm0, %xmm0
0000000001018b09	movups	%xmm0, 0x10(%rsp)
0000000001018b0e	leaq	runtime.gosweepone.func1(%rip), %rax
0000000001018b15	movq	%rax, 0x10(%rsp)
0000000001018b1a	leaq	0x8(%rsp), %rax
0000000001018b1f	movq	%rax, 0x18(%rsp)
0000000001018b24	leaq	0x10(%rsp), %rax
0000000001018b29	movq	%rax, (%rsp)
0000000001018b2d	callq	runtime.systemstack
0000000001018b32	movq	0x8(%rsp), %rax
0000000001018b37	movq	%rax, 0x30(%rsp)
0000000001018b3c	movq	0x20(%rsp), %rbp
0000000001018b41	addq	$0x28, %rsp
0000000001018b45	retq
0000000001018b46	callq	runtime.morestack_noctxt
0000000001018b4b	jmp	runtime.gosweepone
0000000001018b4d	int3
0000000001018b4e	int3
0000000001018b4f	int3
runtime.(*mspan).ensureSwept:
0000000001018b50	movq	%gs:0x30, %rcx
0000000001018b59	cmpq	0x10(%rcx), %rsp
0000000001018b5d	jbe	0x1018c1e
0000000001018b63	subq	$0x28, %rsp
0000000001018b67	movq	%rbp, 0x20(%rsp)
0000000001018b6c	leaq	0x20(%rsp), %rbp
0000000001018b71	movq	%gs:0x30, %rcx
0000000001018b7a	movq	0x30(%rcx), %rdx
0000000001018b7e	cmpl	$0x0, 0x100(%rdx)
0000000001018b85	jne	0x1018b98
0000000001018b87	cmpl	$0x0, 0xe8(%rdx)
0000000001018b8e	jne	0x1018b98
0000000001018b90	movq	(%rdx), %rdx
0000000001018b93	cmpq	%rdx, %rcx
0000000001018b96	jne	0x1018c03
0000000001018b98	movl	0xa5922(%rip), %ecx
0000000001018b9e	movq	0x30(%rsp), %rdx
0000000001018ba3	movl	0x58(%rdx), %ebx
0000000001018ba6	cmpl	%ecx, %ebx
0000000001018ba8	je	0x1018bf9
0000000001018baa	leal	-0x2(%rcx), %eax
0000000001018bad	leal	-0x1(%rcx), %ebx
0000000001018bb0	lock
0000000001018bb1	cmpxchgl	%ebx, 0x58(%rdx)
0000000001018bb5	sete	%bl
0000000001018bb8	testb	%bl, %bl
0000000001018bba	jne	0x1018be1
0000000001018bbc	movl	%ecx, 0x1c(%rsp)
0000000001018bc0	jmp	0x1018bd0
0000000001018bc2	callq	runtime.osyield
0000000001018bc7	movl	0x1c(%rsp), %ecx
0000000001018bcb	movq	0x30(%rsp), %rdx
0000000001018bd0	movl	0x58(%rdx), %eax
0000000001018bd3	cmpl	%ecx, %eax
0000000001018bd5	jne	0x1018bc2
0000000001018bd7	movq	0x20(%rsp), %rbp
0000000001018bdc	addq	$0x28, %rsp
0000000001018be0	retq
0000000001018be1	movq	%rdx, (%rsp)
0000000001018be5	movb	$0x0, 0x8(%rsp)
0000000001018bea	callq	"runtime.(*mspan).sweep"
0000000001018bef	movq	0x20(%rsp), %rbp
0000000001018bf4	addq	$0x28, %rsp
0000000001018bf8	retq
0000000001018bf9	movq	0x20(%rsp), %rbp
0000000001018bfe	addq	$0x28, %rsp
0000000001018c02	retq
0000000001018c03	leaq	0x54ddb(%rip), %rax
0000000001018c0a	movq	%rax, (%rsp)
0000000001018c0e	movq	$0x22, 0x8(%rsp)
0000000001018c17	callq	runtime.throw
0000000001018c1c	ud2
0000000001018c1e	callq	runtime.morestack_noctxt
0000000001018c23	jmp	"runtime.(*mspan).ensureSwept"
0000000001018c28	int3
0000000001018c29	int3
0000000001018c2a	int3
0000000001018c2b	int3
0000000001018c2c	int3
0000000001018c2d	int3
0000000001018c2e	int3
0000000001018c2f	int3
runtime.(*mspan).sweep:
0000000001018c30	movq	%gs:0x30, %rcx
0000000001018c39	leaq	-0x40(%rsp), %rax
0000000001018c3e	cmpq	0x10(%rcx), %rax
0000000001018c42	jbe	0x1019576
0000000001018c48	subq	$0xc0, %rsp
0000000001018c4f	movq	%rbp, 0xb8(%rsp)
0000000001018c57	leaq	0xb8(%rsp), %rbp
0000000001018c5f	xorps	%xmm0, %xmm0
0000000001018c62	movups	%xmm0, 0x88(%rsp)
0000000001018c6a	movups	%xmm0, 0x98(%rsp)
0000000001018c72	movups	%xmm0, 0xa8(%rsp)
0000000001018c7a	movq	%gs:0x30, %rdx
0000000001018c83	movq	0x30(%rdx), %rbx
0000000001018c87	cmpl	$0x0, 0x100(%rbx)
0000000001018c8e	jne	0x1018ca5
0000000001018c90	cmpl	$0x0, 0xe8(%rbx)
0000000001018c97	jne	0x1018ca5
0000000001018c99	movq	(%rbx), %rbx
0000000001018c9c	cmpq	%rbx, %rdx
0000000001018c9f	jne	0x101955b
0000000001018ca5	movl	0xa5815(%rip), %ebx
0000000001018cab	movl	%ebx, 0x30(%rsp)
0000000001018caf	movq	0xc8(%rsp), %rsi
0000000001018cb7	movzbl	0x64(%rsi), %edi
0000000001018cbb	movb	%dil, 0x2b(%rsp)
0000000001018cc0	cmpb	$0x1, %dil
0000000001018cc4	jne	0x10194b2
0000000001018cca	movl	0x58(%rsi), %r8d
0000000001018cce	leal	-0x1(%rbx), %r9d
0000000001018cd2	cmpl	%r8d, %r9d
0000000001018cd5	jne	0x10194b2
0000000001018cdb	movl	%r9d, 0x34(%rsp)
0000000001018ce0	leaq	0xabd09(%rip), %rdi
0000000001018ce7	cmpb	$0x0, (%rdi)
0000000001018cea	jne	0x10192d3
0000000001018cf0	movq	0x20(%rsi), %r8
0000000001018cf4	leaq	0xa5845(%rip), %r10
0000000001018cfb	lock
0000000001018cfc	xaddq	%r8, (%r10)
0000000001018d00	movq	0x30(%rdx), %rdx
0000000001018d04	leaq	0x90(%rsi), %r8
0000000001018d0b	testb	%al, (%r8)
0000000001018d0e	movzbl	0x62(%rsi), %r10d
0000000001018d13	movb	%r10b, 0x26(%rsp)
0000000001018d18	movq	0x68(%rsi), %r11
0000000001018d1c	movq	%r11, 0x38(%rsp)
0000000001018d21	movq	0x158(%rdx), %rdx
0000000001018d28	movq	%rdx, 0x78(%rsp)
0000000001018d2d	movq	0x90(%rsi), %r12
0000000001018d34	jmp	0x1018d41
0000000001018d36	movq	%r12, %r8
0000000001018d39	movq	%rdx, %r12
0000000001018d3c	movq	0x78(%rsp), %rdx
0000000001018d41	testq	%r12, %r12
0000000001018d44	je	0x1018e7a
0000000001018d4a	movzwl	0x8(%r12), %eax
0000000001018d50	testq	%r11, %r11
0000000001018d53	je	0x10194ab
0000000001018d59	xorl	%edx, %edx
0000000001018d5b	divq	%r11
0000000001018d5e	movq	%rax, %rdx
0000000001018d61	shrq	$0x3, %rax
0000000001018d65	addq	0x50(%rsi), %rax
0000000001018d69	movq	%rdx, %r13
0000000001018d6c	imulq	%r11, %rdx
0000000001018d70	andq	$0x7, %r13
0000000001018d74	movq	%r13, %rcx
0000000001018d77	movl	$0x1, %r15d
0000000001018d7d	shll	%cl, %r15d
0000000001018d80	movzbl	(%rax), %r14d
0000000001018d84	testb	%r15b, %r14b
0000000001018d87	je	0x1018d8f
0000000001018d89	movq	(%r12), %rdx
0000000001018d8d	jmp	0x1018d36
0000000001018d8f	addq	%r11, %rdx
0000000001018d92	movq	%r12, %r15
0000000001018d95	jmp	0x1018d9f
0000000001018d97	movq	(%r12), %r12
0000000001018d9b	movl	0x30(%rsp), %ebx
0000000001018d9f	testq	%r12, %r12
0000000001018da2	je	0x1018e73
0000000001018da8	movzwl	0x8(%r12), %ebx
0000000001018dae	cmpq	%rdx, %rbx
0000000001018db1	jae	0x1018e6c
0000000001018db7	cmpb	$0x1, 0xa(%r12)
0000000001018dbd	jne	0x1018d97
0000000001018dbf	btsl	%ecx, %r14d
0000000001018dc3	movb	%r14b, (%rax)
0000000001018dc6	movl	$0x1, %eax
0000000001018dcb	movq	%rdx, 0x48(%rsp)
0000000001018dd0	movb	%al, 0x28(%rsp)
0000000001018dd4	jmp	0x1018ddc
0000000001018dd6	movq	%r15, %r8
0000000001018dd9	movq	%rbx, %r15
0000000001018ddc	testq	%r15, %r15
0000000001018ddf	je	0x1018e5d
0000000001018de1	movzwl	0x8(%r15), %ebx
0000000001018de6	cmpq	%rdx, %rbx
0000000001018de9	jae	0x1018e5d
0000000001018deb	movq	0x18(%rsi), %r12
0000000001018def	addq	%r12, %rbx
0000000001018df2	cmpb	$0x1, 0xa(%r15)
0000000001018df7	je	0x1018e02
0000000001018df9	testb	%al, %al
0000000001018dfb	je	0x1018e02
0000000001018dfd	movq	(%r15), %rbx
0000000001018e00	jmp	0x1018dd6
0000000001018e02	movq	%r8, 0x68(%rsp)
0000000001018e07	movq	(%r15), %rax
0000000001018e0a	movq	%rax, 0x70(%rsp)
0000000001018e0f	movq	%rax, (%r8)
0000000001018e12	movq	%r15, (%rsp)
0000000001018e16	movq	%rbx, 0x8(%rsp)
0000000001018e1b	movq	%r11, 0x10(%rsp)
0000000001018e20	callq	runtime.freespecial
0000000001018e25	movzbl	0x28(%rsp), %eax
0000000001018e2a	movq	0x48(%rsp), %rdx
0000000001018e2f	movq	0xc8(%rsp), %rsi
0000000001018e37	leaq	0xabbb2(%rip), %rdi
0000000001018e3e	movl	0x34(%rsp), %r9d
0000000001018e43	movzbl	0x26(%rsp), %r10d
0000000001018e49	movq	0x38(%rsp), %r11
0000000001018e4e	movq	0x70(%rsp), %rbx
0000000001018e53	movq	0x68(%rsp), %r15
0000000001018e58	jmp	0x1018dd6
0000000001018e5d	movl	0x30(%rsp), %ebx
0000000001018e61	movq	%r15, %rdx
0000000001018e64	movq	%r8, %r12
0000000001018e67	jmp	0x1018d36
0000000001018e6c	xorl	%eax, %eax
0000000001018e6e	jmp	0x1018dcb
0000000001018e73	xorl	%eax, %eax
0000000001018e75	jmp	0x1018dcb
0000000001018e7a	cmpl	$0x0, 0xbbe9f(%rip)
0000000001018e81	je	0x1018fdc
0000000001018e87	movq	0x50(%rsi), %rax
0000000001018e8b	movq	%rax, 0x88(%rsp)
0000000001018e93	movb	$0x1, 0x90(%rsp)
0000000001018e9b	movq	$0x0, 0x98(%rsp)
0000000001018ea7	movq	0x48(%rsi), %rax
0000000001018eab	movq	%rax, 0xa0(%rsp)
0000000001018eb3	movb	$0x1, 0xa8(%rsp)
0000000001018ebb	movq	$0x0, 0xb0(%rsp)
0000000001018ec7	xorl	%eax, %eax
0000000001018ec9	jmp	0x1018ed6
0000000001018ecb	incq	0xb0(%rsp)
0000000001018ed3	incq	%rax
0000000001018ed6	movq	0x38(%rsi), %rcx
0000000001018eda	cmpq	%rcx, %rax
0000000001018edd	jae	0x1018fdc
0000000001018ee3	movq	0x88(%rsp), %rcx
0000000001018eeb	movzbl	0x90(%rsp), %r8d
0000000001018ef4	movzbl	(%rcx), %ecx
0000000001018ef7	testb	%r8b, %cl
0000000001018efa	je	0x1018f56
0000000001018efc	movzbl	0x90(%rsp), %ecx
0000000001018f04	cmpb	$-0x80, %cl
0000000001018f07	jne	0x1018f4b
0000000001018f09	incq	0x88(%rsp)
0000000001018f11	movb	$0x1, 0x90(%rsp)
0000000001018f19	incq	0x98(%rsp)
0000000001018f21	movzbl	0xa8(%rsp), %ecx
0000000001018f29	cmpb	$-0x80, %cl
0000000001018f2c	jne	0x1018f40
0000000001018f2e	incq	0xa0(%rsp)
0000000001018f36	movb	$0x1, 0xa8(%rsp)
0000000001018f3e	jmp	0x1018ecb
0000000001018f40	shll	%ecx
0000000001018f42	movb	%cl, 0xa8(%rsp)
0000000001018f49	jmp	0x1018ecb
0000000001018f4b	shll	%ecx
0000000001018f4d	movb	%cl, 0x90(%rsp)
0000000001018f54	jmp	0x1018f19
0000000001018f56	movq	0x30(%rsi), %rcx
0000000001018f5a	cmpq	%rcx, 0xb0(%rsp)
0000000001018f62	jae	0x1018fbe
0000000001018f64	movq	0x68(%rsi), %rcx
0000000001018f68	imulq	%rax, %rcx
0000000001018f6c	addq	0x18(%rsi), %rcx
0000000001018f70	cmpl	$0x0, 0xbbda9(%rip)
0000000001018f77	je	0x1018efc
0000000001018f79	movq	%rax, 0x40(%rsp)
0000000001018f7e	movq	%rcx, (%rsp)
0000000001018f82	movq	%r11, 0x8(%rsp)
0000000001018f87	callq	runtime.tracefree
0000000001018f8c	movq	0x40(%rsp), %rax
0000000001018f91	movq	0x78(%rsp), %rdx
0000000001018f96	movl	0x30(%rsp), %ebx
0000000001018f9a	movq	0xc8(%rsp), %rsi
0000000001018fa2	leaq	0xaba47(%rip), %rdi
0000000001018fa9	movl	0x34(%rsp), %r9d
0000000001018fae	movzbl	0x26(%rsp), %r10d
0000000001018fb4	movq	0x38(%rsp), %r11
0000000001018fb9	jmp	0x1018efc
0000000001018fbe	movq	0xa0(%rsp), %rcx
0000000001018fc6	movzbl	0xa8(%rsp), %r8d
0000000001018fcf	movzbl	(%rcx), %ecx
0000000001018fd2	testb	%r8b, %cl
0000000001018fd5	jne	0x1018f64
0000000001018fd7	jmp	0x1018efc
0000000001018fdc	movq	%rsi, (%rsp)
0000000001018fe0	callq	"runtime.(*mspan).countAlloc"
0000000001018fe5	movq	0x8(%rsp), %rax
0000000001018fea	movzbl	0x26(%rsp), %ecx
0000000001018fef	movl	%ecx, %edx
0000000001018ff1	shrb	%cl
0000000001018ff3	testb	%cl, %cl
0000000001018ff5	jne	0x10192c4
0000000001018ffb	testw	%ax, %ax
0000000001018ffe	jne	0x10192b5
0000000001019004	movq	0xc8(%rsp), %rbx
000000000101900c	movb	$0x1, 0x65(%rbx)
0000000001019010	movl	$0x1, %esi
0000000001019015	movzwl	0x60(%rbx), %edi
0000000001019019	movl	%edi, %r8d
000000000101901c	subl	%eax, %edi
000000000101901e	movw	%di, 0x2c(%rsp)
0000000001019023	cmpw	%r8w, %ax
0000000001019027	ja	0x10193c8
000000000101902d	movb	%cl, 0x2a(%rsp)
0000000001019031	movb	%sil, 0x29(%rsp)
0000000001019036	movw	%ax, 0x60(%rbx)
000000000101903a	movq	%rbx, (%rsp)
000000000101903e	callq	"runtime.(*mspan).nextFreeIndex"
0000000001019043	movq	0xc8(%rsp), %rax
000000000101904b	movq	0x38(%rax), %rcx
000000000101904f	movq	%rcx, 0x60(%rsp)
0000000001019054	movq	0x8(%rsp), %rdx
0000000001019059	movq	%rdx, 0x58(%rsp)
000000000101905e	cmpq	%rcx, %rdx
0000000001019061	movq	$0x0, 0x30(%rax)
0000000001019069	leaq	0xab980(%rip), %rbx
0000000001019070	cmpb	$0x0, (%rbx)
0000000001019073	je	0x10190a9
0000000001019075	movq	%gs:0x30, %rbx
000000000101907e	movq	0x30(%rbx), %rbx
0000000001019082	movq	0xd0(%rbx), %rbx
0000000001019089	testb	%al, (%rbx)
000000000101908b	movzwl	0x2c(%rsp), %esi
0000000001019090	movzwl	%si, %edi
0000000001019093	movq	0x68(%rax), %r8
0000000001019097	imulq	%rdi, %r8
000000000101909b	addq	0x1230(%rbx), %r8
00000000010190a2	movq	%r8, 0x1230(%rbx)
00000000010190a9	movq	0x50(%rax), %rcx
00000000010190ad	movq	%rcx, 0x48(%rax)
00000000010190b1	movq	0x38(%rax), %rcx
00000000010190b5	movq	%rcx, (%rsp)
00000000010190b9	callq	runtime.newMarkBits
00000000010190be	movq	0x8(%rsp), %rax
00000000010190c3	movq	0xc8(%rsp), %rcx
00000000010190cb	movq	%rax, 0x50(%rcx)
00000000010190cf	movq	%rcx, (%rsp)
00000000010190d3	movq	$0x0, 0x8(%rsp)
00000000010190dc	callq	"runtime.(*mspan).refillAllocCache"
00000000010190e1	movzbl	0x29(%rsp), %eax
00000000010190e6	testb	%al, %al
00000000010190e8	je	0x1019296
00000000010190ee	movq	0xc8(%rsp), %rcx
00000000010190f6	movzbl	0x64(%rcx), %edx
00000000010190fa	movb	%dl, 0x2b(%rsp)
00000000010190fe	cmpb	$0x1, %dl
0000000001019101	jne	0x101931f
0000000001019107	movl	0x58(%rcx), %ebx
000000000101910a	movl	0x34(%rsp), %esi
000000000101910e	cmpl	%ebx, %esi
0000000001019110	jne	0x101931f
0000000001019116	movl	0x30(%rsp), %edx
000000000101911a	movl	%edx, %ebx
000000000101911c	xchgl	%edx, 0x58(%rcx)
000000000101911f	movzwl	0x2c(%rsp), %edx
0000000001019124	testw	%dx, %dx
0000000001019127	jbe	0x101928f
000000000101912d	movzbl	0x2a(%rsp), %esi
0000000001019132	testb	%sil, %sil
0000000001019135	je	0x101920e
000000000101913b	movq	0x78(%rsp), %rax
0000000001019140	testb	%al, (%rax)
0000000001019142	movsbq	%sil, %rsi
0000000001019146	cmpq	$0x43, %rsi
000000000101914a	jae	0x1019318
0000000001019150	movq	0x4a8(%rax,%rsi,8), %rdi
0000000001019158	movzwl	%dx, %edx
000000000101915b	addq	%rdi, %rdx
000000000101915e	movq	%rdx, 0x4a8(%rax,%rsi,8)
0000000001019166	movzbl	0x26(%rsp), %eax
000000000101916b	movzbl	%al, %eax
000000000101916e	cmpq	$0x86, %rax
0000000001019174	jae	0x1019311
000000000101917a	shlq	$0x6, %rax
000000000101917e	leaq	0xa5653(%rip), %rdx
0000000001019185	leaq	(%rdx,%rax), %rax
0000000001019189	movq	%rax, (%rsp)
000000000101918d	movq	%rcx, 0x8(%rsp)
0000000001019192	movzbl	0xd0(%rsp), %eax
000000000101919a	movb	%al, 0x10(%rsp)
000000000101919e	movq	0x58(%rsp), %rax
00000000010191a3	movq	0x60(%rsp), %rdx
00000000010191a8	cmpq	%rdx, %rax
00000000010191ab	sete	0x11(%rsp)
00000000010191b0	callq	"runtime.(*mcentral).freeSpan"
00000000010191b5	movzbl	0x18(%rsp), %eax
00000000010191ba	testb	%al, %al
00000000010191bc	je	0x10191d5
00000000010191be	movb	%al, 0xd8(%rsp)
00000000010191c5	movq	0xb8(%rsp), %rbp
00000000010191cd	addq	$0xc0, %rsp
00000000010191d4	retq
00000000010191d5	movb	%al, 0x27(%rsp)
00000000010191d9	movl	0x30(%rsp), %eax
00000000010191dd	shrl	%eax
00000000010191df	andl	$0x1, %eax
00000000010191e2	leaq	(%rax,%rax,4), %rax
00000000010191e6	leaq	0xa52fb(%rip), %rcx
00000000010191ed	leaq	(%rcx,%rax,8), %rax
00000000010191f1	movq	%rax, (%rsp)
00000000010191f5	movq	0xc8(%rsp), %rax
00000000010191fd	movq	%rax, 0x8(%rsp)
0000000001019202	callq	"runtime.(*gcSweepBuf).push"
0000000001019207	movzbl	0x27(%rsp), %eax
000000000101920c	jmp	0x10191be
000000000101920e	testb	%al, %al
0000000001019210	je	0x1019288
0000000001019212	cmpl	$0x0, 0xbbb0f(%rip)
0000000001019219	jle	0x1019269
000000000101921b	movq	$0x0, 0x80(%rcx)
0000000001019226	movq	0x18(%rcx), %rax
000000000101922a	movq	%rax, (%rsp)
000000000101922e	movq	0x38(%rsp), %rax
0000000001019233	movq	%rax, 0x8(%rsp)
0000000001019238	callq	runtime.sysFault
000000000101923d	movq	0x78(%rsp), %rax
0000000001019242	incq	0x4a0(%rax)
0000000001019249	movq	0x498(%rax), %rcx
0000000001019250	movq	0x38(%rsp), %rdx
0000000001019255	addq	%rdx, %rcx
0000000001019258	movq	%rcx, 0x498(%rax)
000000000101925f	movl	$0x1, %eax
0000000001019264	jmp	0x10191ba
0000000001019269	leaq	runtime.mheap_(%rip), %rax
0000000001019270	movq	%rax, (%rsp)
0000000001019274	movq	%rcx, 0x8(%rsp)
0000000001019279	movl	$0x1, 0x10(%rsp)
0000000001019281	callq	"runtime.(*mheap).freeSpan"
0000000001019286	jmp	0x101923d
0000000001019288	xorl	%eax, %eax
000000000101928a	jmp	0x10191ba
000000000101928f	testb	%al, %al
0000000001019291	jmp	0x1019210
0000000001019296	movzwl	0x2c(%rsp), %ecx
000000000101929b	testw	%cx, %cx
000000000101929e	je	0x10190ee
00000000010192a4	movq	0xc8(%rsp), %rcx
00000000010192ac	movl	0x30(%rsp), %ebx
00000000010192b0	jmp	0x101911f
00000000010192b5	movq	0xc8(%rsp), %rbx
00000000010192bd	xorl	%esi, %esi
00000000010192bf	jmp	0x1019015
00000000010192c4	movq	0xc8(%rsp), %rbx
00000000010192cc	xorl	%esi, %esi
00000000010192ce	jmp	0x1019015
00000000010192d3	movq	%rdx, 0x80(%rsp)
00000000010192db	movq	0x20(%rsi), %rax
00000000010192df	shlq	$0xd, %rax
00000000010192e3	movq	%rax, (%rsp)
00000000010192e7	callq	runtime.traceGCSweepSpan
00000000010192ec	movq	0x80(%rsp), %rdx
00000000010192f4	movl	0x30(%rsp), %ebx
00000000010192f8	movq	0xc8(%rsp), %rsi
0000000001019300	leaq	0xab6e9(%rip), %rdi
0000000001019307	movl	0x34(%rsp), %r9d
000000000101930c	jmp	0x1018cf0
0000000001019311	callq	runtime.panicindex
0000000001019316	ud2
0000000001019318	callq	runtime.panicindex
000000000101931d	ud2
000000000101931f	movl	0x58(%rcx), %eax
0000000001019322	movq	%rax, 0x58(%rsp)
0000000001019327	callq	runtime.printlock
000000000101932c	leaq	0x52852(%rip), %rax
0000000001019333	movq	%rax, (%rsp)
0000000001019337	movq	$0x13, 0x8(%rsp)
0000000001019340	callq	runtime.printstring
0000000001019345	movzbl	0x2b(%rsp), %eax
000000000101934a	movzbl	%al, %eax
000000000101934d	movq	%rax, (%rsp)
0000000001019351	callq	runtime.printuint
0000000001019356	leaq	0x51ca5(%rip), %rax
000000000101935d	movq	%rax, (%rsp)
0000000001019361	movq	$0xa, 0x8(%rsp)
000000000101936a	callq	runtime.printstring
000000000101936f	movq	0x58(%rsp), %rax
0000000001019374	movq	%rax, (%rsp)
0000000001019378	callq	runtime.printuint
000000000101937d	leaq	0x523a6(%rip), %rax
0000000001019384	movq	%rax, (%rsp)
0000000001019388	movq	$0x10, 0x8(%rsp)
0000000001019391	callq	runtime.printstring
0000000001019396	movl	0x30(%rsp), %eax
000000000101939a	movq	%rax, (%rsp)
000000000101939e	callq	runtime.printuint
00000000010193a3	callq	runtime.printnl
00000000010193a8	callq	runtime.printunlock
00000000010193ad	leaq	0x54b60(%rip), %rax
00000000010193b4	movq	%rax, (%rsp)
00000000010193b8	movq	$0x27, 0x8(%rsp)
00000000010193c1	callq	runtime.throw
00000000010193c6	ud2
00000000010193c8	movq	%rax, 0x50(%rsp)
00000000010193cd	movw	%r8w, 0x2e(%rsp)
00000000010193d3	movq	0x38(%rbx), %rax
00000000010193d7	movq	%rax, 0x60(%rsp)
00000000010193dc	callq	runtime.printlock
00000000010193e1	leaq	0x524b2(%rip), %rax
00000000010193e8	movq	%rax, (%rsp)
00000000010193ec	movq	$0x10, 0x8(%rsp)
00000000010193f5	callq	runtime.printstring
00000000010193fa	movq	0x60(%rsp), %rax
00000000010193ff	movq	%rax, (%rsp)
0000000001019403	callq	runtime.printuint
0000000001019408	leaq	0x519fa(%rip), %rax
000000000101940f	movq	%rax, (%rsp)
0000000001019413	movq	$0x8, 0x8(%rsp)
000000000101941c	callq	runtime.printstring
0000000001019421	movq	0x50(%rsp), %rax
0000000001019426	movzwl	%ax, %eax
0000000001019429	movq	%rax, (%rsp)
000000000101942d	callq	runtime.printuint
0000000001019432	leaq	0x52b48(%rip), %rax
0000000001019439	movq	%rax, (%rsp)
000000000101943d	movq	$0x15, 0x8(%rsp)
0000000001019446	callq	runtime.printstring
000000000101944b	movzwl	0x2e(%rsp), %eax
0000000001019450	movzwl	%ax, %eax
0000000001019453	movq	%rax, (%rsp)
0000000001019457	callq	runtime.printuint
000000000101945c	leaq	0x519b6(%rip), %rax
0000000001019463	movq	%rax, (%rsp)
0000000001019467	movq	$0x8, 0x8(%rsp)
0000000001019470	callq	runtime.printstring
0000000001019475	movzwl	0x2c(%rsp), %eax
000000000101947a	movzwl	%ax, %eax
000000000101947d	movq	%rax, (%rsp)
0000000001019481	callq	runtime.printuint
0000000001019486	callq	runtime.printnl
000000000101948b	callq	runtime.printunlock
0000000001019490	leaq	0x54278(%rip), %rax
0000000001019497	movq	%rax, (%rsp)
000000000101949b	movq	$0x20, 0x8(%rsp)
00000000010194a4	callq	runtime.throw
00000000010194a9	ud2
00000000010194ab	callq	runtime.panicdivide
00000000010194b0	ud2
00000000010194b2	movl	0x58(%rsi), %eax
00000000010194b5	movq	%rax, 0x58(%rsp)
00000000010194ba	callq	runtime.printlock
00000000010194bf	leaq	0x526bf(%rip), %rax
00000000010194c6	movq	%rax, (%rsp)
00000000010194ca	movq	$0x13, 0x8(%rsp)
00000000010194d3	callq	runtime.printstring
00000000010194d8	movzbl	0x2b(%rsp), %eax
00000000010194dd	movzbl	%al, %eax
00000000010194e0	movq	%rax, (%rsp)
00000000010194e4	callq	runtime.printuint
00000000010194e9	leaq	0x51b12(%rip), %rax
00000000010194f0	movq	%rax, (%rsp)
00000000010194f4	movq	$0xa, 0x8(%rsp)
00000000010194fd	callq	runtime.printstring
0000000001019502	movq	0x58(%rsp), %rax
0000000001019507	movq	%rax, (%rsp)
000000000101950b	callq	runtime.printuint
0000000001019510	leaq	0x52213(%rip), %rax
0000000001019517	movq	%rax, (%rsp)
000000000101951b	movq	$0x10, 0x8(%rsp)
0000000001019524	callq	runtime.printstring
0000000001019529	movl	0x30(%rsp), %eax
000000000101952d	movq	%rax, (%rsp)
0000000001019531	callq	runtime.printuint
0000000001019536	callq	runtime.printnl
000000000101953b	callq	runtime.printunlock
0000000001019540	leaq	0x534cc(%rip), %rax
0000000001019547	movq	%rax, (%rsp)
000000000101954b	movq	$0x1b, 0x8(%rsp)
0000000001019554	callq	runtime.throw
0000000001019559	ud2
000000000101955b	leaq	0x5378d(%rip), %rax
0000000001019562	movq	%rax, (%rsp)
0000000001019566	movq	$0x1c, 0x8(%rsp)
000000000101956f	callq	runtime.throw
0000000001019574	ud2
0000000001019576	callq	runtime.morestack_noctxt
000000000101957b	jmp	"runtime.(*mspan).sweep"
runtime.deductSweepCredit:
0000000001019580	movq	%gs:0x30, %rcx
0000000001019589	cmpq	0x10(%rcx), %rsp
000000000101958d	jbe	0x10196e8
0000000001019593	subq	$0x20, %rsp
0000000001019597	movq	%rbp, 0x18(%rsp)
000000000101959c	leaq	0x18(%rsp), %rbp
00000000010195a1	movsd	0xa4faf(%rip), %xmm0
00000000010195a9	xorps	%xmm1, %xmm1
00000000010195ac	ucomisd	%xmm1, %xmm0
00000000010195b0	jne	0x10195b8
00000000010195b2	jnp	0x10196de
00000000010195b8	leaq	0xab431(%rip), %rax
00000000010195bf	cmpb	$0x0, (%rax)
00000000010195c2	jne	0x10196ca
00000000010195c8	movq	0x28(%rsp), %rcx
00000000010195cd	movq	0x30(%rsp), %rdx
00000000010195d2	jmp	0x101963c
00000000010195d4	leaq	0xab415(%rip), %rax
00000000010195db	movq	0x28(%rsp), %rcx
00000000010195e0	movq	0x30(%rsp), %rdx
00000000010195e5	movq	0x8(%rsp), %rbx
00000000010195ea	movq	0x10(%rsp), %rsi
00000000010195ef	xorps	%xmm1, %xmm1
00000000010195f2	movq	0xa4f47(%rip), %rdi
00000000010195f9	subq	%rbx, %rdi
00000000010195fc	cmpq	%rdi, %rsi
00000000010195ff	jle	0x1019692
0000000001019605	callq	runtime.gosweepone
000000000101960a	cmpq	$-0x1, (%rsp)
000000000101960f	je	0x1019687
0000000001019611	movq	0xa4f30(%rip), %rax
0000000001019618	movq	0x8(%rsp), %rcx
000000000101961d	cmpq	%rcx, %rax
0000000001019620	je	0x10195d4
0000000001019622	movq	0x28(%rsp), %rbx
0000000001019627	movq	0x30(%rsp), %rsi
000000000101962c	leaq	0xab3bd(%rip), %rax
0000000001019633	movq	%rbx, %rcx
0000000001019636	movq	%rsi, %rdx
0000000001019639	xorps	%xmm1, %xmm1
000000000101963c	movq	0xa4f05(%rip), %rbx
0000000001019643	movq	0xbd976(%rip), %rsi
000000000101964a	movq	0xa4eff(%rip), %rdi
0000000001019651	subq	%rdi, %rsi
0000000001019654	addq	%rcx, %rsi
0000000001019657	movsd	0xa4ef9(%rip), %xmm0
000000000101965f	testq	%rsi, %rsi
0000000001019662	jl	0x10196af
0000000001019664	xorps	%xmm2, %xmm2
0000000001019667	cvtsi2sdq	%rsi, %xmm2
000000000101966c	movq	%rbx, 0x8(%rsp)
0000000001019671	mulsd	%xmm2, %xmm0
0000000001019675	cvttsd2si	%xmm0, %rsi
000000000101967a	subq	%rdx, %rsi
000000000101967d	movq	%rsi, 0x10(%rsp)
0000000001019682	jmp	0x10195f2
0000000001019687	xorps	%xmm0, %xmm0
000000000101968a	movsd	%xmm0, 0xa4ec6(%rip)
0000000001019692	leaq	0xab357(%rip), %rax
0000000001019699	cmpb	$0x0, (%rax)
000000000101969c	jne	0x10196a8
000000000101969e	movq	0x18(%rsp), %rbp
00000000010196a3	addq	$0x20, %rsp
00000000010196a7	retq
00000000010196a8	callq	runtime.traceGCSweepDone
00000000010196ad	jmp	0x101969e
00000000010196af	movq	%rsi, %rdi
00000000010196b2	shrq	%rsi
00000000010196b5	andq	$0x1, %rdi
00000000010196b9	orq	%rdi, %rsi
00000000010196bc	xorps	%xmm2, %xmm2
00000000010196bf	cvtsi2sdq	%rsi, %xmm2
00000000010196c4	addsd	%xmm2, %xmm2
00000000010196c8	jmp	0x101966c
00000000010196ca	callq	runtime.traceGCSweepStart
00000000010196cf	leaq	0xab31a(%rip), %rax
00000000010196d6	xorps	%xmm1, %xmm1
00000000010196d9	jmp	0x10195c8
00000000010196de	movq	0x18(%rsp), %rbp
00000000010196e3	addq	$0x20, %rsp
00000000010196e7	retq
00000000010196e8	callq	runtime.morestack_noctxt
00000000010196ed	jmp	runtime.deductSweepCredit
00000000010196f2	int3
00000000010196f3	int3
00000000010196f4	int3
00000000010196f5	int3
00000000010196f6	int3
00000000010196f7	int3
00000000010196f8	int3
00000000010196f9	int3
00000000010196fa	int3
00000000010196fb	int3
00000000010196fc	int3
00000000010196fd	int3
00000000010196fe	int3
00000000010196ff	int3
runtime.(*gcSweepBuf).push:
0000000001019700	movq	%gs:0x30, %rcx
0000000001019709	cmpq	0x10(%rcx), %rsp
000000000101970d	jbe	0x10198a9
0000000001019713	subq	$0x58, %rsp
0000000001019717	movq	%rbp, 0x50(%rsp)
000000000101971c	leaq	0x50(%rsp), %rbp
0000000001019721	movl	$0x1, %eax
0000000001019726	movq	0x60(%rsp), %rcx
000000000101972b	lock
000000000101972c	xaddl	%eax, 0x20(%rcx)
0000000001019730	movl	%eax, 0x24(%rsp)
0000000001019734	movq	0x10(%rcx), %rdx
0000000001019738	movl	%eax, %ebx
000000000101973a	shrq	$0x9, %rax
000000000101973e	movq	%rax, 0x38(%rsp)
0000000001019743	jmp	0x1019761
0000000001019745	movq	%rax, (%rsp)
0000000001019749	callq	runtime.unlock
000000000101974e	movq	0x38(%rsp), %rax
0000000001019753	movq	0x60(%rsp), %rcx
0000000001019758	movl	0x24(%rsp), %ebx
000000000101975c	movq	0x30(%rsp), %rdx
0000000001019761	cmpq	%rdx, %rax
0000000001019764	jb	0x1019896
000000000101976a	movq	%rcx, (%rsp)
000000000101976e	callq	runtime.lock
0000000001019773	movq	0x60(%rsp), %rax
0000000001019778	movq	0x10(%rax), %rcx
000000000101977c	movq	%rcx, 0x30(%rsp)
0000000001019781	movq	0x38(%rsp), %rdx
0000000001019786	cmpq	%rcx, %rdx
0000000001019789	jb	0x1019745
000000000101978b	movq	0x18(%rax), %rbx
000000000101978f	cmpq	%rbx, %rcx
0000000001019792	je	0x101980f
0000000001019794	movq	$0x1000, (%rsp)
000000000101979c	movq	$0x40, 0x8(%rsp)
00000000010197a5	leaq	0xbc16c(%rip), %rax
00000000010197ac	movq	%rax, 0x10(%rsp)
00000000010197b1	callq	runtime.persistentalloc
00000000010197b6	movq	0x18(%rsp), %rax
00000000010197bb	movq	%rax, 0x48(%rsp)
00000000010197c0	movq	0x38(%rsp), %rcx
00000000010197c5	shlq	$0x3, %rcx
00000000010197c9	movq	0x60(%rsp), %rdx
00000000010197ce	addq	0x8(%rdx), %rcx
00000000010197d2	xchgq	%rax, (%rcx)
00000000010197d5	movq	0x30(%rsp), %rax
00000000010197da	incq	%rax
00000000010197dd	xchgq	%rax, 0x10(%rdx)
00000000010197e1	movq	%rdx, (%rsp)
00000000010197e5	callq	runtime.unlock
00000000010197ea	movq	0x48(%rsp), %rax
00000000010197ef	testb	%al, (%rax)
00000000010197f1	movl	0x24(%rsp), %ecx
00000000010197f5	andq	$0x1ff, %rcx
00000000010197fc	movq	0x68(%rsp), %rdx
0000000001019801	movq	%rdx, (%rax,%rcx,8)
0000000001019805	movq	0x50(%rsp), %rbp
000000000101980a	addq	$0x58, %rsp
000000000101980e	retq
000000000101980f	shlq	%rbx
0000000001019812	testq	%rbx, %rbx
0000000001019815	movl	$0x100, %eax
000000000101981a	cmoveq	%rax, %rbx
000000000101981e	movq	%rbx, 0x28(%rsp)
0000000001019823	shlq	$0x3, %rbx
0000000001019827	movq	%rbx, (%rsp)
000000000101982b	movq	$0x40, 0x8(%rsp)
0000000001019834	leaq	0xbc0dd(%rip), %rcx
000000000101983b	movq	%rcx, 0x10(%rsp)
0000000001019840	callq	runtime.persistentalloc
0000000001019845	movq	0x18(%rsp), %rax
000000000101984a	movq	0x60(%rsp), %rcx
000000000101984f	movq	0x18(%rcx), %rdx
0000000001019853	testq	%rdx, %rdx
0000000001019856	jne	0x101986a
0000000001019858	xchgq	%rax, 0x8(%rcx)
000000000101985c	movq	0x28(%rsp), %rax
0000000001019861	movq	%rax, 0x18(%rcx)
0000000001019865	jmp	0x1019794
000000000101986a	movq	%rax, 0x40(%rsp)
000000000101986f	movq	0x8(%rcx), %rbx
0000000001019873	shlq	$0x3, %rdx
0000000001019877	movq	%rdx, 0x10(%rsp)
000000000101987c	movq	%rax, (%rsp)
0000000001019880	movq	%rbx, 0x8(%rsp)
0000000001019885	callq	runtime.memmove
000000000101988a	movq	0x40(%rsp), %rax
000000000101988f	movq	0x60(%rsp), %rcx
0000000001019894	jmp	0x1019858
0000000001019896	movq	0x8(%rcx), %rcx
000000000101989a	leaq	(%rcx,%rax,8), %rcx
000000000101989e	movq	(%rcx), %rcx
00000000010198a1	movq	%rcx, %rax
00000000010198a4	jmp	0x10197ef
00000000010198a9	callq	runtime.morestack_noctxt
00000000010198ae	jmp	"runtime.(*gcSweepBuf).push"
00000000010198b3	int3
00000000010198b4	int3
00000000010198b5	int3
00000000010198b6	int3
00000000010198b7	int3
00000000010198b8	int3
00000000010198b9	int3
00000000010198ba	int3
00000000010198bb	int3
00000000010198bc	int3
00000000010198bd	int3
00000000010198be	int3
00000000010198bf	int3
runtime.(*gcSweepBuf).block:
00000000010198c0	movq	%gs:0x30, %rcx
00000000010198c9	cmpq	0x10(%rcx), %rsp
00000000010198cd	jbe	0x1019976
00000000010198d3	subq	$0x18, %rsp
00000000010198d7	movq	%rbp, 0x10(%rsp)
00000000010198dc	leaq	0x10(%rsp), %rbp
00000000010198e1	movq	0x28(%rsp), %rax
00000000010198e6	testq	%rax, %rax
00000000010198e9	jl	0x101995b
00000000010198eb	movq	0x20(%rsp), %rcx
00000000010198f0	movq	0x10(%rcx), %rdx
00000000010198f4	cmpq	%rdx, %rax
00000000010198f7	jae	0x101995b
00000000010198f9	movq	0x8(%rcx), %rdx
00000000010198fd	leaq	(%rdx,%rax,8), %rdx
0000000001019901	movq	(%rdx), %rdx
0000000001019904	movl	0x20(%rcx), %ecx
0000000001019907	movl	%ecx, %ecx
0000000001019909	movq	%rcx, %rbx
000000000101990c	shrq	$0x9, %rcx
0000000001019910	cmpq	%rcx, %rax
0000000001019913	jae	0x101994d
0000000001019915	testb	%al, (%rdx)
0000000001019917	movl	$0x200, %eax
000000000101991c	jmp	0x1019921
000000000101991e	decq	%rax
0000000001019921	testq	%rax, %rax
0000000001019924	jle	0x1019930
0000000001019926	movq	-0x8(%rdx,%rax,8), %rcx
000000000101992b	testq	%rcx, %rcx
000000000101992e	je	0x101991e
0000000001019930	movq	%rdx, 0x30(%rsp)
0000000001019935	movq	%rax, 0x38(%rsp)
000000000101993a	movq	$0x200, 0x40(%rsp)
0000000001019943	movq	0x10(%rsp), %rbp
0000000001019948	addq	$0x18, %rsp
000000000101994c	retq
000000000101994d	testb	%al, (%rdx)
000000000101994f	andq	$0x1ff, %rbx
0000000001019956	movq	%rbx, %rax
0000000001019959	jmp	0x1019921
000000000101995b	leaq	0x52c49(%rip), %rax
0000000001019962	movq	%rax, (%rsp)
0000000001019966	movq	$0x18, 0x8(%rsp)
000000000101996f	callq	runtime.throw
0000000001019974	ud2
0000000001019976	callq	runtime.morestack_noctxt
000000000101997b	jmp	"runtime.(*gcSweepBuf).block"
runtime.init.1:
0000000001019980	retq
0000000001019981	int3
0000000001019982	int3
0000000001019983	int3
0000000001019984	int3
0000000001019985	int3
0000000001019986	int3
0000000001019987	int3
0000000001019988	int3
0000000001019989	int3
000000000101998a	int3
000000000101998b	int3
000000000101998c	int3
000000000101998d	int3
000000000101998e	int3
000000000101998f	int3
runtime.(*gcWork).init:
0000000001019990	movq	%gs:0x30, %rcx
0000000001019999	cmpq	0x10(%rcx), %rsp
000000000101999d	jbe	0x10199ea
000000000101999f	subq	$0x10, %rsp
00000000010199a3	movq	%rbp, 0x8(%rsp)
00000000010199a8	leaq	0x8(%rsp), %rbp
00000000010199ad	callq	runtime.getempty
00000000010199b2	movq	(%rsp), %rax
00000000010199b6	movq	0x18(%rsp), %rcx
00000000010199bb	movq	%rax, (%rcx)
00000000010199be	callq	runtime.trygetfull
00000000010199c3	movq	(%rsp), %rax
00000000010199c7	testq	%rax, %rax
00000000010199ca	je	0x10199df
00000000010199cc	movq	0x18(%rsp), %rcx
00000000010199d1	movq	%rax, 0x8(%rcx)
00000000010199d5	movq	0x8(%rsp), %rbp
00000000010199da	addq	$0x10, %rsp
00000000010199de	retq
00000000010199df	callq	runtime.getempty
00000000010199e4	movq	(%rsp), %rax
00000000010199e8	jmp	0x10199cc
00000000010199ea	callq	runtime.morestack_noctxt
00000000010199ef	jmp	"runtime.(*gcWork).init"
00000000010199f1	int3
00000000010199f2	int3
00000000010199f3	int3
00000000010199f4	int3
00000000010199f5	int3
00000000010199f6	int3
00000000010199f7	int3
00000000010199f8	int3
00000000010199f9	int3
00000000010199fa	int3
00000000010199fb	int3
00000000010199fc	int3
00000000010199fd	int3
00000000010199fe	int3
00000000010199ff	int3
runtime.(*gcWork).put:
0000000001019a00	movq	%gs:0x30, %rcx
0000000001019a09	cmpq	0x10(%rcx), %rsp
0000000001019a0d	jbe	0x1019af5
0000000001019a13	subq	$0x18, %rsp
0000000001019a17	movq	%rbp, 0x10(%rsp)
0000000001019a1c	leaq	0x10(%rsp), %rbp
0000000001019a21	movq	0x20(%rsp), %rax
0000000001019a26	movq	(%rax), %rcx
0000000001019a29	testq	%rcx, %rcx
0000000001019a2c	je	0x1019ad6
0000000001019a32	cmpq	$0xfd, 0x10(%rcx)
0000000001019a3a	jne	0x1019acf
0000000001019a40	movq	0x8(%rax), %rdx
0000000001019a44	movq	%rdx, (%rax)
0000000001019a47	movq	%rcx, 0x8(%rax)
0000000001019a4b	movq	0x10(%rdx), %rcx
0000000001019a4f	cmpq	$0xfd, %rcx
0000000001019a56	je	0x1019aa3
0000000001019a58	sete	%al
0000000001019a5b	movq	0x10(%rdx), %rcx
0000000001019a5f	cmpq	$0xfd, %rcx
0000000001019a66	jae	0x1019aee
0000000001019a6c	movq	0x28(%rsp), %rbx
0000000001019a71	movq	%rbx, 0x18(%rdx,%rcx,8)
0000000001019a76	incq	0x10(%rdx)
0000000001019a7a	testb	%al, %al
0000000001019a7c	je	0x1019a87
0000000001019a7e	cmpl	$0x1, 0xbb073(%rip)
0000000001019a85	je	0x1019a91
0000000001019a87	movq	0x10(%rsp), %rbp
0000000001019a8c	addq	$0x18, %rsp
0000000001019a90	retq
0000000001019a91	leaq	runtime.gcController(%rip), %rax
0000000001019a98	movq	%rax, (%rsp)
0000000001019a9c	callq	"runtime.(*gcControllerState).enlistWorker"
0000000001019aa1	jmp	0x1019a87
0000000001019aa3	movq	%rcx, 0x8(%rsp)
0000000001019aa8	movq	%rdx, (%rsp)
0000000001019aac	callq	runtime.putfull
0000000001019ab1	callq	runtime.getempty
0000000001019ab6	movq	(%rsp), %rdx
0000000001019aba	movq	0x20(%rsp), %rax
0000000001019abf	movq	%rdx, (%rax)
0000000001019ac2	movq	0x8(%rsp), %rax
0000000001019ac7	cmpq	$0xfd, %rax
0000000001019acd	jmp	0x1019a58
0000000001019acf	movq	%rcx, %rdx
0000000001019ad2	xorl	%eax, %eax
0000000001019ad4	jmp	0x1019a5b
0000000001019ad6	movq	%rax, (%rsp)
0000000001019ada	callq	"runtime.(*gcWork).init"
0000000001019adf	movq	0x20(%rsp), %rax
0000000001019ae4	movq	(%rax), %rdx
0000000001019ae7	xorl	%eax, %eax
0000000001019ae9	jmp	0x1019a5b
0000000001019aee	callq	runtime.panicindex
0000000001019af3	ud2
0000000001019af5	callq	runtime.morestack_noctxt
0000000001019afa	jmp	"runtime.(*gcWork).put"
0000000001019aff	int3
runtime.(*gcWork).putBatch:
0000000001019b00	movq	%gs:0x30, %rcx
0000000001019b09	cmpq	0x10(%rcx), %rsp
0000000001019b0d	jbe	0x1019cc6
0000000001019b13	subq	$0x40, %rsp
0000000001019b17	movq	%rbp, 0x38(%rsp)
0000000001019b1c	leaq	0x38(%rsp), %rbp
0000000001019b21	movq	0x58(%rsp), %rax
0000000001019b26	testq	%rax, %rax
0000000001019b29	je	0x1019cae
0000000001019b2f	movq	0x48(%rsp), %rcx
0000000001019b34	movq	(%rcx), %rdx
0000000001019b37	testq	%rdx, %rdx
0000000001019b3a	je	0x1019c93
0000000001019b40	movq	0x50(%rsp), %rbx
0000000001019b45	movq	0x60(%rsp), %rsi
0000000001019b4a	xorl	%edi, %edi
0000000001019b4c	jmp	0x1019c02
0000000001019b51	movq	%rdx, (%rsp)
0000000001019b55	callq	runtime.putfull
0000000001019b5a	callq	runtime.getempty
0000000001019b5f	movq	0x48(%rsp), %rcx
0000000001019b64	movq	0x8(%rcx), %rdx
0000000001019b68	movq	(%rsp), %rax
0000000001019b6c	movq	%rdx, (%rcx)
0000000001019b6f	movq	%rax, 0x8(%rcx)
0000000001019b73	movq	0x58(%rsp), %rax
0000000001019b78	movq	0x30(%rsp), %rbx
0000000001019b7d	movq	0x60(%rsp), %rsi
0000000001019b82	movl	$0x1, %edi
0000000001019b87	movq	0x10(%rdx), %r8
0000000001019b8b	cmpq	$0xfd, %r8
0000000001019b92	je	0x1019b51
0000000001019b94	leaq	0x18(%rdx), %r9
0000000001019b98	testb	%al, (%r9)
0000000001019b9b	cmpq	$0xfd, %r8
0000000001019ba2	ja	0x1019cbf
0000000001019ba8	leaq	-0xfd(%r8), %r9
0000000001019baf	movq	%r9, %r10
0000000001019bb2	negq	%r9
0000000001019bb5	cmpq	%rax, %r9
0000000001019bb8	cmovgq	%rax, %r9
0000000001019bbc	shlq	$0x3, %r8
0000000001019bc0	sarq	$0x3f, %r10
0000000001019bc4	andq	%r10, %r8
0000000001019bc7	leaq	0x18(%rdx,%r8), %r8
0000000001019bcc	cmpq	%rbx, %r8
0000000001019bcf	jne	0x1019c1b
0000000001019bd1	movq	0x10(%rdx), %r8
0000000001019bd5	addq	%r9, %r8
0000000001019bd8	movq	%r8, 0x10(%rdx)
0000000001019bdc	cmpq	%rax, %r9
0000000001019bdf	ja	0x1019cb8
0000000001019be5	subq	%r9, %rax
0000000001019be8	subq	%r9, %rsi
0000000001019beb	movq	%rsi, %r8
0000000001019bee	negq	%rsi
0000000001019bf1	shlq	$0x3, %r9
0000000001019bf5	sarq	$0x3f, %rsi
0000000001019bf9	andq	%r9, %rsi
0000000001019bfc	addq	%rsi, %rbx
0000000001019bff	movq	%r8, %rsi
0000000001019c02	testq	%rax, %rax
0000000001019c05	jle	0x1019c69
0000000001019c07	movq	%rsi, 0x60(%rsp)
0000000001019c0c	movq	%rax, 0x58(%rsp)
0000000001019c11	movq	%rbx, 0x30(%rsp)
0000000001019c16	jmp	0x1019b87
0000000001019c1b	movq	%rdx, 0x28(%rsp)
0000000001019c20	movq	%r9, 0x20(%rsp)
0000000001019c25	movb	%dil, 0x1f(%rsp)
0000000001019c2a	movq	%r8, (%rsp)
0000000001019c2e	movq	%rbx, 0x8(%rsp)
0000000001019c33	shlq	$0x3, %r9
0000000001019c37	movq	%r9, 0x10(%rsp)
0000000001019c3c	callq	runtime.memmove
0000000001019c41	movq	0x58(%rsp), %rax
0000000001019c46	movq	0x48(%rsp), %rcx
0000000001019c4b	movq	0x28(%rsp), %rdx
0000000001019c50	movq	0x30(%rsp), %rbx
0000000001019c55	movq	0x60(%rsp), %rsi
0000000001019c5a	movzbl	0x1f(%rsp), %edi
0000000001019c5f	movq	0x20(%rsp), %r9
0000000001019c64	jmp	0x1019bd1
0000000001019c69	testb	%dil, %dil
0000000001019c6c	je	0x1019c77
0000000001019c6e	cmpl	$0x1, 0xbae83(%rip)
0000000001019c75	je	0x1019c81
0000000001019c77	movq	0x38(%rsp), %rbp
0000000001019c7c	addq	$0x40, %rsp
0000000001019c80	retq
0000000001019c81	leaq	runtime.gcController(%rip), %rax
0000000001019c88	movq	%rax, (%rsp)
0000000001019c8c	callq	"runtime.(*gcControllerState).enlistWorker"
0000000001019c91	jmp	0x1019c77
0000000001019c93	movq	%rcx, (%rsp)
0000000001019c97	callq	"runtime.(*gcWork).init"
0000000001019c9c	movq	0x48(%rsp), %rcx
0000000001019ca1	movq	(%rcx), %rdx
0000000001019ca4	movq	0x58(%rsp), %rax
0000000001019ca9	jmp	0x1019b40
0000000001019cae	movq	0x38(%rsp), %rbp
0000000001019cb3	addq	$0x40, %rsp
0000000001019cb7	retq
0000000001019cb8	callq	runtime.panicslice
0000000001019cbd	ud2
0000000001019cbf	callq	runtime.panicslice
0000000001019cc4	ud2
0000000001019cc6	callq	runtime.morestack_noctxt
0000000001019ccb	jmp	"runtime.(*gcWork).putBatch"
runtime.(*gcWork).tryGet:
0000000001019cd0	movq	%gs:0x30, %rcx
0000000001019cd9	cmpq	0x10(%rcx), %rsp
0000000001019cdd	jbe	0x1019dac
0000000001019ce3	subq	$0x20, %rsp
0000000001019ce7	movq	%rbp, 0x18(%rsp)
0000000001019cec	leaq	0x18(%rsp), %rbp
0000000001019cf1	movq	0x28(%rsp), %rax
0000000001019cf6	movq	(%rax), %rcx
0000000001019cf9	testq	%rcx, %rcx
0000000001019cfc	je	0x1019d8f
0000000001019d02	cmpq	$0x0, 0x10(%rcx)
0000000001019d07	jne	0x1019d1e
0000000001019d09	movq	0x8(%rax), %rcx
0000000001019d0d	movq	(%rax), %rdx
0000000001019d10	movq	%rcx, (%rax)
0000000001019d13	movq	%rdx, 0x8(%rax)
0000000001019d17	cmpq	$0x0, 0x10(%rcx)
0000000001019d1c	je	0x1019d47
0000000001019d1e	movq	0x10(%rcx), %rax
0000000001019d22	leaq	-0x1(%rax), %rdx
0000000001019d26	movq	%rdx, 0x10(%rcx)
0000000001019d2a	cmpq	$0xfd, %rdx
0000000001019d31	jae	0x1019da5
0000000001019d33	movq	0x10(%rcx,%rax,8), %rax
0000000001019d38	movq	%rax, 0x30(%rsp)
0000000001019d3d	movq	0x18(%rsp), %rbp
0000000001019d42	addq	$0x20, %rsp
0000000001019d46	retq
0000000001019d47	movq	%rcx, 0x10(%rsp)
0000000001019d4c	callq	runtime.trygetfull
0000000001019d51	movq	(%rsp), %rax
0000000001019d55	testq	%rax, %rax
0000000001019d58	je	0x1019d7c
0000000001019d5a	movq	%rax, 0x8(%rsp)
0000000001019d5f	movq	0x10(%rsp), %rax
0000000001019d64	movq	%rax, (%rsp)
0000000001019d68	callq	runtime.putempty
0000000001019d6d	movq	0x8(%rsp), %rcx
0000000001019d72	movq	0x28(%rsp), %rax
0000000001019d77	movq	%rcx, (%rax)
0000000001019d7a	jmp	0x1019d1e
0000000001019d7c	movq	$0x0, 0x30(%rsp)
0000000001019d85	movq	0x18(%rsp), %rbp
0000000001019d8a	addq	$0x20, %rsp
0000000001019d8e	retq
0000000001019d8f	movq	%rax, (%rsp)
0000000001019d93	callq	"runtime.(*gcWork).init"
0000000001019d98	movq	0x28(%rsp), %rax
0000000001019d9d	movq	(%rax), %rcx
0000000001019da0	jmp	0x1019d02
0000000001019da5	callq	runtime.panicindex
0000000001019daa	ud2
0000000001019dac	callq	runtime.morestack_noctxt
0000000001019db1	jmp	"runtime.(*gcWork).tryGet"
0000000001019db6	int3
0000000001019db7	int3
0000000001019db8	int3
0000000001019db9	int3
0000000001019dba	int3
0000000001019dbb	int3
0000000001019dbc	int3
0000000001019dbd	int3
0000000001019dbe	int3
0000000001019dbf	int3
runtime.(*gcWork).get:
0000000001019dc0	movq	%gs:0x30, %rcx
0000000001019dc9	cmpq	0x10(%rcx), %rsp
0000000001019dcd	jbe	0x1019e9c
0000000001019dd3	subq	$0x20, %rsp
0000000001019dd7	movq	%rbp, 0x18(%rsp)
0000000001019ddc	leaq	0x18(%rsp), %rbp
0000000001019de1	movq	0x28(%rsp), %rax
0000000001019de6	movq	(%rax), %rcx
0000000001019de9	testq	%rcx, %rcx
0000000001019dec	je	0x1019e7f
0000000001019df2	cmpq	$0x0, 0x10(%rcx)
0000000001019df7	jne	0x1019e0e
0000000001019df9	movq	0x8(%rax), %rcx
0000000001019dfd	movq	(%rax), %rdx
0000000001019e00	movq	%rcx, (%rax)
0000000001019e03	movq	%rdx, 0x8(%rax)
0000000001019e07	cmpq	$0x0, 0x10(%rcx)
0000000001019e0c	je	0x1019e37
0000000001019e0e	movq	0x10(%rcx), %rax
0000000001019e12	leaq	-0x1(%rax), %rdx
0000000001019e16	movq	%rdx, 0x10(%rcx)
0000000001019e1a	cmpq	$0xfd, %rdx
0000000001019e21	jae	0x1019e95
0000000001019e23	movq	0x10(%rcx,%rax,8), %rax
0000000001019e28	movq	%rax, 0x30(%rsp)
0000000001019e2d	movq	0x18(%rsp), %rbp
0000000001019e32	addq	$0x20, %rsp
0000000001019e36	retq
0000000001019e37	movq	%rcx, 0x10(%rsp)
0000000001019e3c	callq	runtime.getfull
0000000001019e41	movq	(%rsp), %rax
0000000001019e45	testq	%rax, %rax
0000000001019e48	je	0x1019e6c
0000000001019e4a	movq	%rax, 0x8(%rsp)
0000000001019e4f	movq	0x10(%rsp), %rax
0000000001019e54	movq	%rax, (%rsp)
0000000001019e58	callq	runtime.putempty
0000000001019e5d	movq	0x8(%rsp), %rcx
0000000001019e62	movq	0x28(%rsp), %rax
0000000001019e67	movq	%rcx, (%rax)
0000000001019e6a	jmp	0x1019e0e
0000000001019e6c	movq	$0x0, 0x30(%rsp)
0000000001019e75	movq	0x18(%rsp), %rbp
0000000001019e7a	addq	$0x20, %rsp
0000000001019e7e	retq
0000000001019e7f	movq	%rax, (%rsp)
0000000001019e83	callq	"runtime.(*gcWork).init"
0000000001019e88	movq	0x28(%rsp), %rax
0000000001019e8d	movq	(%rax), %rcx
0000000001019e90	jmp	0x1019df2
0000000001019e95	callq	runtime.panicindex
0000000001019e9a	ud2
0000000001019e9c	callq	runtime.morestack_noctxt
0000000001019ea1	jmp	"runtime.(*gcWork).get"
0000000001019ea6	int3
0000000001019ea7	int3
0000000001019ea8	int3
0000000001019ea9	int3
0000000001019eaa	int3
0000000001019eab	int3
0000000001019eac	int3
0000000001019ead	int3
0000000001019eae	int3
0000000001019eaf	int3
runtime.(*gcWork).dispose:
0000000001019eb0	movq	%gs:0x30, %rcx
0000000001019eb9	cmpq	0x10(%rcx), %rsp
0000000001019ebd	jbe	0x1019f7c
0000000001019ec3	subq	$0x10, %rsp
0000000001019ec7	movq	%rbp, 0x8(%rsp)
0000000001019ecc	leaq	0x8(%rsp), %rbp
0000000001019ed1	movq	0x18(%rsp), %rax
0000000001019ed6	movq	(%rax), %rcx
0000000001019ed9	testq	%rcx, %rcx
0000000001019edc	je	0x1019f1f
0000000001019ede	cmpq	$0x0, 0x10(%rcx)
0000000001019ee3	jne	0x1019f6e
0000000001019ee9	movq	%rcx, (%rsp)
0000000001019eed	callq	runtime.putempty
0000000001019ef2	movq	0x18(%rsp), %rax
0000000001019ef7	movq	$0x0, (%rax)
0000000001019efe	movq	0x8(%rax), %rcx
0000000001019f02	cmpq	$0x0, 0x10(%rcx)
0000000001019f07	jne	0x1019f63
0000000001019f09	movq	%rcx, (%rsp)
0000000001019f0d	callq	runtime.putempty
0000000001019f12	movq	0x18(%rsp), %rax
0000000001019f17	movq	$0x0, 0x8(%rax)
0000000001019f1f	movq	0x10(%rax), %rcx
0000000001019f23	testq	%rcx, %rcx
0000000001019f26	je	0x1019f3c
0000000001019f28	leaq	0x9eeb1(%rip), %rdx
0000000001019f2f	lock
0000000001019f30	xaddq	%rcx, (%rdx)
0000000001019f34	movq	$0x0, 0x10(%rax)
0000000001019f3c	movq	0x18(%rax), %rcx
0000000001019f40	testq	%rcx, %rcx
0000000001019f43	je	0x1019f59
0000000001019f45	leaq	runtime.gcController(%rip), %rdx
0000000001019f4c	lock
0000000001019f4d	xaddq	%rcx, (%rdx)
0000000001019f51	movq	$0x0, 0x18(%rax)
0000000001019f59	movq	0x8(%rsp), %rbp
0000000001019f5e	addq	$0x10, %rsp
0000000001019f62	retq
0000000001019f63	movq	%rcx, (%rsp)
0000000001019f67	callq	runtime.putfull
0000000001019f6c	jmp	0x1019f12
0000000001019f6e	movq	%rcx, (%rsp)
0000000001019f72	callq	runtime.putfull
0000000001019f77	jmp	0x1019ef2
0000000001019f7c	callq	runtime.morestack_noctxt
0000000001019f81	jmp	"runtime.(*gcWork).dispose"
0000000001019f86	int3
0000000001019f87	int3
0000000001019f88	int3
0000000001019f89	int3
0000000001019f8a	int3
0000000001019f8b	int3
0000000001019f8c	int3
0000000001019f8d	int3
0000000001019f8e	int3
0000000001019f8f	int3
runtime.(*gcWork).balance:
0000000001019f90	movq	%gs:0x30, %rcx
0000000001019f99	cmpq	0x10(%rcx), %rsp
0000000001019f9d	jbe	0x101a03c
0000000001019fa3	subq	$0x18, %rsp
0000000001019fa7	movq	%rbp, 0x10(%rsp)
0000000001019fac	leaq	0x10(%rsp), %rbp
0000000001019fb1	movq	0x20(%rsp), %rax
0000000001019fb6	movq	(%rax), %rcx
0000000001019fb9	testq	%rcx, %rcx
0000000001019fbc	je	0x101a032
0000000001019fbe	movq	0x8(%rax), %rdx
0000000001019fc2	cmpq	$0x0, 0x10(%rdx)
0000000001019fc7	jne	0x101a015
0000000001019fc9	cmpq	$0x4, 0x10(%rcx)
0000000001019fce	jle	0x101a00b
0000000001019fd0	movq	%rcx, (%rsp)
0000000001019fd4	callq	runtime.handoff
0000000001019fd9	movq	0x8(%rsp), %rax
0000000001019fde	movq	0x20(%rsp), %rcx
0000000001019fe3	movq	%rax, (%rcx)
0000000001019fe6	cmpl	$0x1, 0xbab0b(%rip)
0000000001019fed	je	0x1019ff9
0000000001019fef	movq	0x10(%rsp), %rbp
0000000001019ff4	addq	$0x18, %rsp
0000000001019ff8	retq
0000000001019ff9	leaq	runtime.gcController(%rip), %rax
000000000101a000	movq	%rax, (%rsp)
000000000101a004	callq	"runtime.(*gcControllerState).enlistWorker"
000000000101a009	jmp	0x1019fef
000000000101a00b	movq	0x10(%rsp), %rbp
000000000101a010	addq	$0x18, %rsp
000000000101a014	retq
000000000101a015	movq	%rdx, (%rsp)
000000000101a019	callq	runtime.putfull
000000000101a01e	callq	runtime.getempty
000000000101a023	movq	(%rsp), %rax
000000000101a027	movq	0x20(%rsp), %rcx
000000000101a02c	movq	%rax, 0x8(%rcx)
000000000101a030	jmp	0x1019fe6
000000000101a032	movq	0x10(%rsp), %rbp
000000000101a037	addq	$0x18, %rsp
000000000101a03b	retq
000000000101a03c	callq	runtime.morestack_noctxt
000000000101a041	jmp	"runtime.(*gcWork).balance"
000000000101a046	int3
000000000101a047	int3
000000000101a048	int3
000000000101a049	int3
000000000101a04a	int3
000000000101a04b	int3
000000000101a04c	int3
000000000101a04d	int3
000000000101a04e	int3
000000000101a04f	int3
runtime.(*workbuf).checknonempty:
000000000101a050	movq	%gs:0x30, %rcx
000000000101a059	cmpq	0x10(%rcx), %rsp
000000000101a05d	jbe	0x101a09e
000000000101a05f	subq	$0x18, %rsp
000000000101a063	movq	%rbp, 0x10(%rsp)
000000000101a068	leaq	0x10(%rsp), %rbp
000000000101a06d	movq	0x20(%rsp), %rax
000000000101a072	cmpq	$0x0, 0x10(%rax)
000000000101a077	je	0x101a083
000000000101a079	movq	0x10(%rsp), %rbp
000000000101a07e	addq	$0x18, %rsp
000000000101a082	retq
000000000101a083	leaq	0x51830(%rip), %rax
000000000101a08a	movq	%rax, (%rsp)
000000000101a08e	movq	$0x10, 0x8(%rsp)
000000000101a097	callq	runtime.throw
000000000101a09c	ud2
000000000101a09e	callq	runtime.morestack_noctxt
000000000101a0a3	jmp	"runtime.(*workbuf).checknonempty"
000000000101a0a5	int3
000000000101a0a6	int3
000000000101a0a7	int3
000000000101a0a8	int3
000000000101a0a9	int3
000000000101a0aa	int3
000000000101a0ab	int3
000000000101a0ac	int3
000000000101a0ad	int3
000000000101a0ae	int3
000000000101a0af	int3
runtime.(*workbuf).checkempty:
000000000101a0b0	movq	%gs:0x30, %rcx
000000000101a0b9	cmpq	0x10(%rcx), %rsp
000000000101a0bd	jbe	0x101a0fe
000000000101a0bf	subq	$0x18, %rsp
000000000101a0c3	movq	%rbp, 0x10(%rsp)
000000000101a0c8	leaq	0x10(%rsp), %rbp
000000000101a0cd	movq	0x20(%rsp), %rax
000000000101a0d2	cmpq	$0x0, 0x10(%rax)
000000000101a0d7	jne	0x101a0e3
000000000101a0d9	movq	0x10(%rsp), %rbp
000000000101a0de	addq	$0x18, %rsp
000000000101a0e2	retq
000000000101a0e3	leaq	0x51e5a(%rip), %rax
000000000101a0ea	movq	%rax, (%rsp)
000000000101a0ee	movq	$0x14, 0x8(%rsp)
000000000101a0f7	callq	runtime.throw
000000000101a0fc	ud2
000000000101a0fe	callq	runtime.morestack_noctxt
000000000101a103	jmp	"runtime.(*workbuf).checkempty"
000000000101a105	int3
000000000101a106	int3
000000000101a107	int3
000000000101a108	int3
000000000101a109	int3
000000000101a10a	int3
000000000101a10b	int3
000000000101a10c	int3
000000000101a10d	int3
000000000101a10e	int3
000000000101a10f	int3
runtime.getempty:
000000000101a110	movq	%gs:0x30, %rcx
000000000101a119	cmpq	0x10(%rcx), %rsp
000000000101a11d	jbe	0x101a32c
000000000101a123	subq	$0x58, %rsp
000000000101a127	movq	%rbp, 0x50(%rsp)
000000000101a12c	leaq	0x50(%rsp), %rbp
000000000101a131	cmpq	$0x0, 0x9ec2f(%rip)
000000000101a139	jne	0x101a2db
000000000101a13f	xorl	%eax, %eax
000000000101a141	testq	%rax, %rax
000000000101a144	jne	0x101a1e4
000000000101a14a	movq	%rax, 0x28(%rsp)
000000000101a14f	movq	$0x0, 0x20(%rsp)
000000000101a158	cmpq	$0x0, 0x9ec58(%rip)
000000000101a160	jne	0x101a26f
000000000101a166	cmpq	$0x0, 0x20(%rsp)
000000000101a16c	je	0x101a1f3
000000000101a172	xorl	%ecx, %ecx
000000000101a174	jmp	0x101a17b
000000000101a176	movq	0x18(%rsp), %rcx
000000000101a17b	leaq	0x800(%rcx), %rdx
000000000101a182	cmpq	$0x8000, %rdx
000000000101a189	ja	0x101a1e4
000000000101a18b	movq	%rcx, 0x10(%rsp)
000000000101a190	movq	%rdx, 0x18(%rsp)
000000000101a195	movq	%rax, 0x38(%rsp)
000000000101a19a	movq	0x20(%rsp), %rax
000000000101a19f	movq	0x18(%rax), %rdx
000000000101a1a3	addq	%rcx, %rdx
000000000101a1a6	movq	%rdx, 0x30(%rsp)
000000000101a1ab	testb	%al, (%rax)
000000000101a1ad	movq	$0x0, 0x10(%rdx)
000000000101a1b5	movq	%rdx, (%rsp)
000000000101a1b9	callq	runtime.lfnodeValidate
000000000101a1be	movq	0x10(%rsp), %rax
000000000101a1c3	testq	%rax, %rax
000000000101a1c6	jne	0x101a1cf
000000000101a1c8	movq	0x30(%rsp), %rax
000000000101a1cd	jmp	0x101a176
000000000101a1cf	movq	0x30(%rsp), %rax
000000000101a1d4	movq	%rax, (%rsp)
000000000101a1d8	callq	runtime.putempty
000000000101a1dd	movq	0x38(%rsp), %rax
000000000101a1e2	jmp	0x101a176
000000000101a1e4	movq	%rax, 0x60(%rsp)
000000000101a1e9	movq	0x50(%rsp), %rbp
000000000101a1ee	addq	$0x58, %rsp
000000000101a1f2	retq
000000000101a1f3	xorps	%xmm0, %xmm0
000000000101a1f6	movups	%xmm0, 0x40(%rsp)
000000000101a1fb	leaq	runtime.getempty.func1(%rip), %rax
000000000101a202	movq	%rax, 0x40(%rsp)
000000000101a207	leaq	0x20(%rsp), %rax
000000000101a20c	movq	%rax, 0x48(%rsp)
000000000101a211	leaq	0x40(%rsp), %rax
000000000101a216	movq	%rax, (%rsp)
000000000101a21a	callq	runtime.systemstack
000000000101a21f	cmpq	$0x0, 0x20(%rsp)
000000000101a225	je	0x101a311
000000000101a22b	leaq	0x9eb7e(%rip), %rax
000000000101a232	movq	%rax, (%rsp)
000000000101a236	callq	runtime.lock
000000000101a23b	leaq	0x9eb86(%rip), %rax
000000000101a242	movq	%rax, (%rsp)
000000000101a246	movq	0x20(%rsp), %rax
000000000101a24b	movq	%rax, 0x8(%rsp)
000000000101a250	callq	"runtime.(*mSpanList).insert"
000000000101a255	leaq	0x9eb54(%rip), %rax
000000000101a25c	movq	%rax, (%rsp)
000000000101a260	callq	runtime.unlock
000000000101a265	movq	0x28(%rsp), %rax
000000000101a26a	jmp	0x101a172
000000000101a26f	leaq	0x9eb3a(%rip), %rax
000000000101a276	movq	%rax, (%rsp)
000000000101a27a	callq	runtime.lock
000000000101a27f	movq	0x9eb32(%rip), %rax
000000000101a286	movq	%rax, 0x20(%rsp)
000000000101a28b	testq	%rax, %rax
000000000101a28e	jne	0x101a2aa
000000000101a290	leaq	0x9eb19(%rip), %rax
000000000101a297	movq	%rax, (%rsp)
000000000101a29b	callq	runtime.unlock
000000000101a2a0	movq	0x28(%rsp), %rax
000000000101a2a5	jmp	0x101a166
000000000101a2aa	leaq	0x9eb07(%rip), %rcx
000000000101a2b1	movq	%rcx, (%rsp)
000000000101a2b5	movq	%rax, 0x8(%rsp)
000000000101a2ba	callq	"runtime.(*mSpanList).remove"
000000000101a2bf	leaq	0x9eb02(%rip), %rax
000000000101a2c6	movq	%rax, (%rsp)
000000000101a2ca	movq	0x20(%rsp), %rax
000000000101a2cf	movq	%rax, 0x8(%rsp)
000000000101a2d4	callq	"runtime.(*mSpanList).insert"
000000000101a2d9	jmp	0x101a290
000000000101a2db	leaq	0x9ea86(%rip), %rax
000000000101a2e2	movq	%rax, (%rsp)
000000000101a2e6	callq	"runtime.(*lfstack).pop"
000000000101a2eb	movq	0x8(%rsp), %rax
000000000101a2f0	testq	%rax, %rax
000000000101a2f3	je	0x101a141
000000000101a2f9	movq	%rax, 0x30(%rsp)
000000000101a2fe	movq	%rax, (%rsp)
000000000101a302	callq	"runtime.(*workbuf).checkempty"
000000000101a307	movq	0x30(%rsp), %rax
000000000101a30c	jmp	0x101a141
000000000101a311	leaq	0x51187(%rip), %rax
000000000101a318	movq	%rax, (%rsp)
000000000101a31c	movq	$0xd, 0x8(%rsp)
000000000101a325	callq	runtime.throw
000000000101a32a	ud2
000000000101a32c	callq	runtime.morestack_noctxt
000000000101a331	jmp	runtime.getempty
000000000101a336	int3
000000000101a337	int3
000000000101a338	int3
000000000101a339	int3
000000000101a33a	int3
000000000101a33b	int3
000000000101a33c	int3
000000000101a33d	int3
000000000101a33e	int3
000000000101a33f	int3
runtime.putempty:
000000000101a340	movq	%gs:0x30, %rcx
000000000101a349	cmpq	0x10(%rcx), %rsp
000000000101a34d	jbe	0x101a391
000000000101a34f	subq	$0x18, %rsp
000000000101a353	movq	%rbp, 0x10(%rsp)
000000000101a358	leaq	0x10(%rsp), %rbp
000000000101a35d	movq	0x20(%rsp), %rax
000000000101a362	movq	%rax, (%rsp)
000000000101a366	callq	"runtime.(*workbuf).checkempty"
000000000101a36b	movq	0x20(%rsp), %rax
000000000101a370	testb	%al, (%rax)
000000000101a372	movq	%rax, 0x8(%rsp)
000000000101a377	leaq	0x9e9ea(%rip), %rax
000000000101a37e	movq	%rax, (%rsp)
000000000101a382	callq	"runtime.(*lfstack).push"
000000000101a387	movq	0x10(%rsp), %rbp
000000000101a38c	addq	$0x18, %rsp
000000000101a390	retq
000000000101a391	callq	runtime.morestack_noctxt
000000000101a396	jmp	runtime.putempty
000000000101a398	int3
000000000101a399	int3
000000000101a39a	int3
000000000101a39b	int3
000000000101a39c	int3
000000000101a39d	int3
000000000101a39e	int3
000000000101a39f	int3
runtime.putfull:
000000000101a3a0	movq	%gs:0x30, %rcx
000000000101a3a9	cmpq	0x10(%rcx), %rsp
000000000101a3ad	jbe	0x101a3f1
000000000101a3af	subq	$0x18, %rsp
000000000101a3b3	movq	%rbp, 0x10(%rsp)
000000000101a3b8	leaq	0x10(%rsp), %rbp
000000000101a3bd	movq	0x20(%rsp), %rax
000000000101a3c2	movq	%rax, (%rsp)
000000000101a3c6	callq	"runtime.(*workbuf).checknonempty"
000000000101a3cb	movq	0x20(%rsp), %rax
000000000101a3d0	testb	%al, (%rax)
000000000101a3d2	movq	%rax, 0x8(%rsp)
000000000101a3d7	leaq	runtime.work(%rip), %rax
000000000101a3de	movq	%rax, (%rsp)
000000000101a3e2	callq	"runtime.(*lfstack).push"
000000000101a3e7	movq	0x10(%rsp), %rbp
000000000101a3ec	addq	$0x18, %rsp
000000000101a3f0	retq
000000000101a3f1	callq	runtime.morestack_noctxt
000000000101a3f6	jmp	runtime.putfull
000000000101a3f8	int3
000000000101a3f9	int3
000000000101a3fa	int3
000000000101a3fb	int3
000000000101a3fc	int3
000000000101a3fd	int3
000000000101a3fe	int3
000000000101a3ff	int3
runtime.trygetfull:
000000000101a400	movq	%gs:0x30, %rcx
000000000101a409	cmpq	0x10(%rcx), %rsp
000000000101a40d	jbe	0x101a468
000000000101a40f	subq	$0x20, %rsp
000000000101a413	movq	%rbp, 0x18(%rsp)
000000000101a418	leaq	0x18(%rsp), %rbp
000000000101a41d	leaq	runtime.work(%rip), %rax
000000000101a424	movq	%rax, (%rsp)
000000000101a428	callq	"runtime.(*lfstack).pop"
000000000101a42d	movq	0x8(%rsp), %rax
000000000101a432	testq	%rax, %rax
000000000101a435	je	0x101a459
000000000101a437	movq	%rax, 0x10(%rsp)
000000000101a43c	movq	%rax, (%rsp)
000000000101a440	callq	"runtime.(*workbuf).checknonempty"
000000000101a445	movq	0x10(%rsp), %rax
000000000101a44a	movq	%rax, 0x28(%rsp)
000000000101a44f	movq	0x18(%rsp), %rbp
000000000101a454	addq	$0x20, %rsp
000000000101a458	retq
000000000101a459	movq	%rax, 0x28(%rsp)
000000000101a45e	movq	0x18(%rsp), %rbp
000000000101a463	addq	$0x20, %rsp
000000000101a467	retq
000000000101a468	callq	runtime.morestack_noctxt
000000000101a46d	jmp	runtime.trygetfull
000000000101a46f	int3
runtime.getfull:
000000000101a470	movq	%gs:0x30, %rcx
000000000101a479	cmpq	0x10(%rcx), %rsp
000000000101a47d	jbe	0x101a767
000000000101a483	subq	$0x38, %rsp
000000000101a487	movq	%rbp, 0x30(%rsp)
000000000101a48c	leaq	0x30(%rsp), %rbp
000000000101a491	leaq	runtime.work(%rip), %rax
000000000101a498	movq	%rax, (%rsp)
000000000101a49c	callq	"runtime.(*lfstack).pop"
000000000101a4a1	movq	0x8(%rsp), %rax
000000000101a4a6	testq	%rax, %rax
000000000101a4a9	jne	0x101a5cb
000000000101a4af	movl	$0x1, %eax
000000000101a4b4	leaq	0x9e945(%rip), %rcx
000000000101a4bb	lock
000000000101a4bc	xaddl	%eax, (%rcx)
000000000101a4bf	incl	%eax
000000000101a4c1	movl	0x9e929(%rip), %edx
000000000101a4c7	cmpl	%edx, %eax
000000000101a4c9	ja	0x101a6e9
000000000101a4cf	xorl	%eax, %eax
000000000101a4d1	jmp	0x101a4e3
000000000101a4d3	movq	0x20(%rsp), %rdx
000000000101a4d8	leaq	0x1(%rdx), %rax
000000000101a4dc	leaq	0x9e91d(%rip), %rcx
000000000101a4e3	movq	%rax, 0x20(%rsp)
000000000101a4e8	cmpq	$0x0, 0x9e870(%rip)
000000000101a4f0	jne	0x101a550
000000000101a4f2	movl	0x9e8f8(%rip), %edx
000000000101a4f8	cmpl	%edx, 0x9e902(%rip)
000000000101a4fe	jne	0x101a50e
000000000101a500	movl	0x9e8e6(%rip), %edx
000000000101a506	cmpl	%edx, 0x9e8dc(%rip)
000000000101a50c	jae	0x101a53d
000000000101a50e	cmpq	$0xa, %rax
000000000101a512	jl	0x101a52f
000000000101a514	cmpq	$0x14, %rax
000000000101a518	jge	0x101a521
000000000101a51a	callq	runtime.osyield
000000000101a51f	jmp	0x101a4d3
000000000101a521	movl	$0x64, (%rsp)
000000000101a528	callq	runtime.usleep
000000000101a52d	jmp	0x101a4d3
000000000101a52f	movl	$0x14, (%rsp)
000000000101a536	callq	runtime.procyield
000000000101a53b	jmp	0x101a4d3
000000000101a53d	movq	$0x0, 0x40(%rsp)
000000000101a546	movq	0x30(%rsp), %rbp
000000000101a54b	addq	$0x38, %rsp
000000000101a54f	retq
000000000101a550	movl	$0xffffffff, %edx
000000000101a555	lock
000000000101a556	xaddl	%edx, (%rcx)
000000000101a559	decl	%edx
000000000101a55b	movl	0x9e88f(%rip), %ebx
000000000101a561	cmpl	%edx, %ebx
000000000101a563	je	0x101a66b
000000000101a569	leaq	runtime.work(%rip), %rax
000000000101a570	movq	%rax, (%rsp)
000000000101a574	callq	"runtime.(*lfstack).pop"
000000000101a579	movq	0x8(%rsp), %rax
000000000101a57e	testq	%rax, %rax
000000000101a581	jne	0x101a5a9
000000000101a583	movl	$0x1, %eax
000000000101a588	leaq	0x9e871(%rip), %rcx
000000000101a58f	lock
000000000101a590	xaddl	%eax, (%rcx)
000000000101a593	incl	%eax
000000000101a595	movl	0x9e855(%rip), %edx
000000000101a59b	cmpl	%edx, %eax
000000000101a59d	ja	0x101a5ed
000000000101a59f	movq	0x20(%rsp), %rax
000000000101a5a4	jmp	0x101a4f2
000000000101a5a9	movq	%rax, 0x28(%rsp)
000000000101a5ae	movq	%rax, (%rsp)
000000000101a5b2	callq	"runtime.(*workbuf).checknonempty"
000000000101a5b7	movq	0x28(%rsp), %rax
000000000101a5bc	movq	%rax, 0x40(%rsp)
000000000101a5c1	movq	0x30(%rsp), %rbp
000000000101a5c6	addq	$0x38, %rsp
000000000101a5ca	retq
000000000101a5cb	movq	%rax, 0x28(%rsp)
000000000101a5d0	movq	%rax, (%rsp)
000000000101a5d4	callq	"runtime.(*workbuf).checknonempty"
000000000101a5d9	movq	0x28(%rsp), %rax
000000000101a5de	movq	%rax, 0x40(%rsp)
000000000101a5e3	movq	0x30(%rsp), %rbp
000000000101a5e8	addq	$0x38, %rsp
000000000101a5ec	retq
000000000101a5ed	movl	%eax, 0x14(%rsp)
000000000101a5f1	movl	%edx, 0x1c(%rsp)
000000000101a5f5	callq	runtime.printlock
000000000101a5fa	leaq	0x51a7c(%rip), %rax
000000000101a601	movq	%rax, (%rsp)
000000000101a605	movq	$0x15, 0x8(%rsp)
000000000101a60e	callq	runtime.printstring
000000000101a613	movl	0x14(%rsp), %eax
000000000101a617	movq	%rax, (%rsp)
000000000101a61b	callq	runtime.printuint
000000000101a620	leaq	0x50ddc(%rip), %rax
000000000101a627	movq	%rax, (%rsp)
000000000101a62b	movq	$0xd, 0x8(%rsp)
000000000101a634	callq	runtime.printstring
000000000101a639	movl	0x1c(%rsp), %eax
000000000101a63d	movq	%rax, (%rsp)
000000000101a641	callq	runtime.printuint
000000000101a646	callq	runtime.printnl
000000000101a64b	callq	runtime.printunlock
000000000101a650	leaq	0x51f0d(%rip), %rax
000000000101a657	movq	%rax, (%rsp)
000000000101a65b	movq	$0x17, 0x8(%rsp)
000000000101a664	callq	runtime.throw
000000000101a669	ud2
000000000101a66b	movl	%edx, 0x18(%rsp)
000000000101a66f	movl	%ebx, 0x1c(%rsp)
000000000101a673	callq	runtime.printlock
000000000101a678	leaq	0x519fe(%rip), %rax
000000000101a67f	movq	%rax, (%rsp)
000000000101a683	movq	$0x15, 0x8(%rsp)
000000000101a68c	callq	runtime.printstring
000000000101a691	movl	0x18(%rsp), %eax
000000000101a695	movq	%rax, (%rsp)
000000000101a699	callq	runtime.printuint
000000000101a69e	leaq	0x50d5e(%rip), %rax
000000000101a6a5	movq	%rax, (%rsp)
000000000101a6a9	movq	$0xd, 0x8(%rsp)
000000000101a6b2	callq	runtime.printstring
000000000101a6b7	movl	0x1c(%rsp), %eax
000000000101a6bb	movq	%rax, (%rsp)
000000000101a6bf	callq	runtime.printuint
000000000101a6c4	callq	runtime.printnl
000000000101a6c9	callq	runtime.printunlock
000000000101a6ce	leaq	0x51e8f(%rip), %rax
000000000101a6d5	movq	%rax, (%rsp)
000000000101a6d9	movq	$0x17, 0x8(%rsp)
000000000101a6e2	callq	runtime.throw
000000000101a6e7	ud2
000000000101a6e9	movl	%eax, 0x10(%rsp)
000000000101a6ed	movl	%edx, 0x1c(%rsp)
000000000101a6f1	callq	runtime.printlock
000000000101a6f6	leaq	0x51980(%rip), %rax
000000000101a6fd	movq	%rax, (%rsp)
000000000101a701	movq	$0x15, 0x8(%rsp)
000000000101a70a	callq	runtime.printstring
000000000101a70f	movl	0x10(%rsp), %eax
000000000101a713	movq	%rax, (%rsp)
000000000101a717	callq	runtime.printuint
000000000101a71c	leaq	0x50ce0(%rip), %rax
000000000101a723	movq	%rax, (%rsp)
000000000101a727	movq	$0xd, 0x8(%rsp)
000000000101a730	callq	runtime.printstring
000000000101a735	movl	0x1c(%rsp), %eax
000000000101a739	movq	%rax, (%rsp)
000000000101a73d	callq	runtime.printuint
000000000101a742	callq	runtime.printnl
000000000101a747	callq	runtime.printunlock
000000000101a74c	leaq	0x51e11(%rip), %rax
000000000101a753	movq	%rax, (%rsp)
000000000101a757	movq	$0x17, 0x8(%rsp)
000000000101a760	callq	runtime.throw
000000000101a765	ud2
000000000101a767	callq	runtime.morestack_noctxt
000000000101a76c	jmp	runtime.getfull
000000000101a771	int3
000000000101a772	int3
000000000101a773	int3
000000000101a774	int3
000000000101a775	int3
000000000101a776	int3
000000000101a777	int3
000000000101a778	int3
000000000101a779	int3
000000000101a77a	int3
000000000101a77b	int3
000000000101a77c	int3
000000000101a77d	int3
000000000101a77e	int3
000000000101a77f	int3
runtime.handoff:
000000000101a780	movq	%gs:0x30, %rcx
000000000101a789	cmpq	0x10(%rcx), %rsp
000000000101a78d	jbe	0x101a82a
000000000101a793	subq	$0x28, %rsp
000000000101a797	movq	%rbp, 0x20(%rsp)
000000000101a79c	leaq	0x20(%rsp), %rbp
000000000101a7a1	callq	runtime.getempty
000000000101a7a6	movq	(%rsp), %rax
000000000101a7aa	movq	0x30(%rsp), %rcx
000000000101a7af	movq	0x10(%rcx), %rdx
000000000101a7b3	movq	%rdx, %rbx
000000000101a7b6	sarq	$0x3f, %rdx
000000000101a7ba	shrq	$0x3f, %rdx
000000000101a7be	addq	%rbx, %rdx
000000000101a7c1	sarq	%rdx
000000000101a7c4	subq	%rdx, %rbx
000000000101a7c7	movq	%rbx, 0x10(%rcx)
000000000101a7cb	movq	%rdx, 0x10(%rax)
000000000101a7cf	movq	0x10(%rcx), %rbx
000000000101a7d3	cmpq	$0xfd, %rbx
000000000101a7da	jae	0x101a823
000000000101a7dc	movq	%rax, 0x18(%rsp)
000000000101a7e1	leaq	0x18(%rcx,%rbx,8), %rbx
000000000101a7e6	movq	%rbx, 0x8(%rsp)
000000000101a7eb	leaq	0x18(%rax), %rbx
000000000101a7ef	movq	%rbx, (%rsp)
000000000101a7f3	shlq	$0x3, %rdx
000000000101a7f7	movq	%rdx, 0x10(%rsp)
000000000101a7fc	callq	runtime.memmove
000000000101a801	movq	0x30(%rsp), %rax
000000000101a806	movq	%rax, (%rsp)
000000000101a80a	callq	runtime.putfull
000000000101a80f	movq	0x18(%rsp), %rax
000000000101a814	movq	%rax, 0x38(%rsp)
000000000101a819	movq	0x20(%rsp), %rbp
000000000101a81e	addq	$0x28, %rsp
000000000101a822	retq
000000000101a823	callq	runtime.panicindex
000000000101a828	ud2
000000000101a82a	callq	runtime.morestack_noctxt
000000000101a82f	jmp	runtime.handoff
000000000101a834	int3
000000000101a835	int3
000000000101a836	int3
000000000101a837	int3
000000000101a838	int3
000000000101a839	int3
000000000101a83a	int3
000000000101a83b	int3
000000000101a83c	int3
000000000101a83d	int3
000000000101a83e	int3
000000000101a83f	int3
runtime.prepareFreeWorkbufs:
000000000101a840	movq	%gs:0x30, %rcx
000000000101a849	cmpq	0x10(%rcx), %rsp
000000000101a84d	jbe	0x101a8d7
000000000101a853	subq	$0x18, %rsp
000000000101a857	movq	%rbp, 0x10(%rsp)
000000000101a85c	leaq	0x10(%rsp), %rbp
000000000101a861	leaq	0x9e548(%rip), %rax
000000000101a868	movq	%rax, (%rsp)
000000000101a86c	callq	runtime.lock
000000000101a871	cmpq	$0x0, 0x9e4e7(%rip)
000000000101a879	jne	0x101a8bc
000000000101a87b	movq	$0x0, 0x9e4e2(%rip)
000000000101a886	leaq	0x9e52b(%rip), %rax
000000000101a88d	movq	%rax, (%rsp)
000000000101a891	leaq	0x9e530(%rip), %rax
000000000101a898	movq	%rax, 0x8(%rsp)
000000000101a89d	callq	"runtime.(*mSpanList).takeAll"
000000000101a8a2	leaq	0x9e507(%rip), %rax
000000000101a8a9	movq	%rax, (%rsp)
000000000101a8ad	callq	runtime.unlock
000000000101a8b2	movq	0x10(%rsp), %rbp
000000000101a8b7	addq	$0x18, %rsp
000000000101a8bb	retq
000000000101a8bc	leaq	0x537b1(%rip), %rax
000000000101a8c3	movq	%rax, (%rsp)
000000000101a8c7	movq	$0x28, 0x8(%rsp)
000000000101a8d0	callq	runtime.throw
000000000101a8d5	ud2
000000000101a8d7	callq	runtime.morestack_noctxt
000000000101a8dc	jmp	runtime.prepareFreeWorkbufs
000000000101a8e1	int3
000000000101a8e2	int3
000000000101a8e3	int3
000000000101a8e4	int3
000000000101a8e5	int3
000000000101a8e6	int3
000000000101a8e7	int3
000000000101a8e8	int3
000000000101a8e9	int3
000000000101a8ea	int3
000000000101a8eb	int3
000000000101a8ec	int3
000000000101a8ed	int3
000000000101a8ee	int3
000000000101a8ef	int3
runtime.freeSomeWbufs:
000000000101a8f0	movq	%gs:0x30, %rcx
000000000101a8f9	cmpq	0x10(%rcx), %rsp
000000000101a8fd	jbe	0x101a9c5
000000000101a903	subq	$0x28, %rsp
000000000101a907	movq	%rbp, 0x20(%rsp)
000000000101a90c	leaq	0x20(%rsp), %rbp
000000000101a911	leaq	0x9e498(%rip), %rax
000000000101a918	movq	%rax, (%rsp)
000000000101a91c	callq	runtime.lock
000000000101a921	cmpl	$0x0, 0xba1d0(%rip)
000000000101a928	je	0x101a949
000000000101a92a	leaq	0x9e47f(%rip), %rax
000000000101a931	movq	%rax, (%rsp)
000000000101a935	callq	runtime.unlock
000000000101a93a	movb	$0x0, 0x38(%rsp)
000000000101a93f	movq	0x20(%rsp), %rbp
000000000101a944	addq	$0x28, %rsp
000000000101a948	retq
000000000101a949	leaq	0x9e468(%rip), %rax
000000000101a950	testb	%al, (%rax)
000000000101a952	cmpq	$0x0, 0x9e45e(%rip)
000000000101a95a	je	0x101a92a
000000000101a95c	movq	$0x0, 0x10(%rsp)
000000000101a965	movb	$0x0, 0x18(%rsp)
000000000101a96a	leaq	runtime.freeSomeWbufs.func1(%rip), %rax
000000000101a971	movq	%rax, 0x10(%rsp)
000000000101a976	movzbl	0x30(%rsp), %eax
000000000101a97b	movb	%al, 0x18(%rsp)
000000000101a97f	leaq	0x10(%rsp), %rax
000000000101a984	movq	%rax, (%rsp)
000000000101a988	callq	runtime.systemstack
000000000101a98d	movq	0x9e424(%rip), %rax
000000000101a994	movq	%rax, 0x8(%rsp)
000000000101a999	cmpq	$0x0, %rax
000000000101a99d	leaq	0x9e40c(%rip), %rcx
000000000101a9a4	movq	%rcx, (%rsp)
000000000101a9a8	callq	runtime.unlock
000000000101a9ad	movq	0x8(%rsp), %rax
000000000101a9b2	cmpq	$0x0, %rax
000000000101a9b6	setne	0x38(%rsp)
000000000101a9bb	movq	0x20(%rsp), %rbp
000000000101a9c0	addq	$0x28, %rsp
000000000101a9c4	retq
000000000101a9c5	callq	runtime.morestack_noctxt
000000000101a9ca	jmp	runtime.freeSomeWbufs
000000000101a9cf	int3
runtime.recordspan:
000000000101a9d0	movq	%gs:0x30, %rcx
000000000101a9d9	cmpq	0x10(%rcx), %rsp
000000000101a9dd	jbe	0x101abbd
000000000101a9e3	subq	$0x40, %rsp
000000000101a9e7	movq	%rbp, 0x38(%rsp)
000000000101a9ec	leaq	0x38(%rsp), %rbp
000000000101a9f1	xorps	%xmm0, %xmm0
000000000101a9f4	movups	%xmm0, 0x20(%rsp)
000000000101a9f9	movups	%xmm0, 0x28(%rsp)
000000000101a9fe	movq	0x48(%rsp), %rax
000000000101aa03	testb	%al, (%rax)
000000000101aa05	movq	0x1040(%rax), %rcx
000000000101aa0c	movq	0x1038(%rax), %rdx
000000000101aa13	cmpq	%rcx, %rdx
000000000101aa16	jge	0x101aa5d
000000000101aa18	movq	0x1038(%rax), %rcx
000000000101aa1f	movq	0x1040(%rax), %rdx
000000000101aa26	leaq	0x1(%rcx), %rbx
000000000101aa2a	cmpq	%rdx, %rbx
000000000101aa2d	ja	0x101ab9b
000000000101aa33	movq	%rbx, 0x1038(%rax)
000000000101aa3a	movq	0x1030(%rax), %rax
000000000101aa41	cmpq	%rbx, %rcx
000000000101aa44	jae	0x101ab94
000000000101aa4a	movq	0x50(%rsp), %rdx
000000000101aa4f	movq	%rdx, (%rax,%rcx,8)
000000000101aa53	movq	0x38(%rsp), %rbp
000000000101aa58	addq	$0x40, %rsp
000000000101aa5c	retq
000000000101aa5d	movq	$0x0, 0x20(%rsp)
000000000101aa66	xorps	%xmm0, %xmm0
000000000101aa69	movups	%xmm0, 0x28(%rsp)
000000000101aa6e	leaq	(%rcx,%rcx,2), %rax
000000000101aa72	movq	%rax, %rcx
000000000101aa75	sarq	$0x3f, %rax
000000000101aa79	shrq	$0x3f, %rax
000000000101aa7d	addq	%rcx, %rax
000000000101aa80	sarq	%rax
000000000101aa83	cmpq	$0x2000, %rax
000000000101aa89	movl	$0x2000, %ecx
000000000101aa8e	cmovgq	%rax, %rcx
000000000101aa92	movq	%rcx, 0x18(%rsp)
000000000101aa97	shlq	$0x3, %rcx
000000000101aa9b	movq	%rcx, (%rsp)
000000000101aa9f	leaq	0xbae7a(%rip), %rcx
000000000101aaa6	movq	%rcx, 0x8(%rsp)
000000000101aaab	callq	runtime.sysAlloc
000000000101aab0	movq	0x10(%rsp), %rax
000000000101aab5	movq	%rax, 0x20(%rsp)
000000000101aaba	testq	%rax, %rax
000000000101aabd	je	0x101aba2
000000000101aac3	movq	0x48(%rsp), %rax
000000000101aac8	movq	0x1038(%rax), %rcx
000000000101aacf	movq	%rcx, 0x28(%rsp)
000000000101aad4	movq	0x18(%rsp), %rdx
000000000101aad9	movq	%rdx, 0x30(%rsp)
000000000101aade	movq	0x1038(%rax), %rdx
000000000101aae5	movq	0x1030(%rax), %rbx
000000000101aaec	testq	%rdx, %rdx
000000000101aaef	jle	0x101ab02
000000000101aaf1	movq	0x20(%rsp), %rsi
000000000101aaf6	cmpq	%rdx, %rcx
000000000101aaf9	cmovgq	%rdx, %rcx
000000000101aafd	cmpq	%rbx, %rsi
000000000101ab00	jne	0x101ab73
000000000101ab02	leaq	0x1030(%rax), %rcx
000000000101ab09	testb	%al, (%rcx)
000000000101ab0b	movq	0x1040(%rax), %rcx
000000000101ab12	movq	0x1030(%rax), %rdx
000000000101ab19	movq	0x30(%rsp), %rbx
000000000101ab1e	movq	0x20(%rsp), %rsi
000000000101ab23	movq	0x28(%rsp), %rdi
000000000101ab28	cmpq	$0x0, 0x1038(%rax)
000000000101ab30	movq	%rdi, 0x1038(%rax)
000000000101ab37	movq	%rbx, 0x1040(%rax)
000000000101ab3e	movq	%rsi, 0x1030(%rax)
000000000101ab45	je	0x101aa18
000000000101ab4b	movq	%rdx, (%rsp)
000000000101ab4f	shlq	$0x3, %rcx
000000000101ab53	movq	%rcx, 0x8(%rsp)
000000000101ab58	leaq	0xbadc1(%rip), %rax
000000000101ab5f	movq	%rax, 0x10(%rsp)
000000000101ab64	callq	runtime.sysFree
000000000101ab69	movq	0x48(%rsp), %rax
000000000101ab6e	jmp	0x101aa18
000000000101ab73	movq	%rsi, (%rsp)
000000000101ab77	movq	%rbx, 0x8(%rsp)
000000000101ab7c	shlq	$0x3, %rcx
000000000101ab80	movq	%rcx, 0x10(%rsp)
000000000101ab85	callq	runtime.memmove
000000000101ab8a	movq	0x48(%rsp), %rax
000000000101ab8f	jmp	0x101ab02
000000000101ab94	callq	runtime.panicindex
000000000101ab99	ud2
000000000101ab9b	callq	runtime.panicslice
000000000101aba0	ud2
000000000101aba2	leaq	0x52968(%rip), %rax
000000000101aba9	movq	%rax, (%rsp)
000000000101abad	movq	$0x1f, 0x8(%rsp)
000000000101abb6	callq	runtime.throw
000000000101abbb	ud2
000000000101abbd	callq	runtime.morestack_noctxt
000000000101abc2	jmp	runtime.recordspan
000000000101abc7	int3
000000000101abc8	int3
000000000101abc9	int3
000000000101abca	int3
000000000101abcb	int3
000000000101abcc	int3
000000000101abcd	int3
000000000101abce	int3
000000000101abcf	int3
runtime.inHeapOrStack:
000000000101abd0	movabsq	$0x800000000000, %rax
000000000101abda	movq	0x8(%rsp), %rcx
000000000101abdf	addq	%rcx, %rax
000000000101abe2	shrq	$0x1a, %rax
000000000101abe6	cmpq	$0x400000, %rax
000000000101abec	jb	0x101ac25
000000000101abee	xorl	%eax, %eax
000000000101abf0	testq	%rax, %rax
000000000101abf3	je	0x101abfe
000000000101abf5	movq	0x18(%rax), %rdx
000000000101abf9	cmpq	%rdx, %rcx
000000000101abfc	jae	0x101ac04
000000000101abfe	movb	$0x0, 0x10(%rsp)
000000000101ac03	retq
000000000101ac04	movzbl	0x64(%rax), %edx
000000000101ac08	decl	%edx
000000000101ac0a	cmpb	$0x1, %dl
000000000101ac0d	ja	0x101ac1f
000000000101ac0f	movq	0x80(%rax), %rax
000000000101ac16	cmpq	%rax, %rcx
000000000101ac19	setb	0x10(%rsp)
000000000101ac1e	retq
000000000101ac1f	movb	$0x0, 0x10(%rsp)
000000000101ac24	retq
000000000101ac25	movq	0xa3b6c(%rip), %rdx
000000000101ac2c	testb	%al, (%rdx)
000000000101ac2e	movq	(%rdx,%rax,8), %rax
000000000101ac32	testq	%rax, %rax
000000000101ac35	je	0x101ac52
000000000101ac37	movq	%rcx, %rdx
000000000101ac3a	shrq	$0xd, %rcx
000000000101ac3e	andq	$0x1fff, %rcx
000000000101ac45	movq	0x200000(%rax,%rcx,8), %rax
000000000101ac4d	movq	%rdx, %rcx
000000000101ac50	jmp	0x101abf0
000000000101ac52	xorl	%eax, %eax
000000000101ac54	jmp	0x101abf0
000000000101ac56	int3
000000000101ac57	int3
000000000101ac58	int3
000000000101ac59	int3
000000000101ac5a	int3
000000000101ac5b	int3
000000000101ac5c	int3
000000000101ac5d	int3
000000000101ac5e	int3
000000000101ac5f	int3
runtime.spanOfHeap:
000000000101ac60	movabsq	$0x800000000000, %rax
000000000101ac6a	movq	0x8(%rsp), %rcx
000000000101ac6f	addq	%rcx, %rax
000000000101ac72	shrq	$0x1a, %rax
000000000101ac76	cmpq	$0x400000, %rax
000000000101ac7c	jb	0x101acb0
000000000101ac7e	xorl	%eax, %eax
000000000101ac80	testq	%rax, %rax
000000000101ac83	je	0x101ac8e
000000000101ac85	movq	0x18(%rax), %rdx
000000000101ac89	cmpq	%rdx, %rcx
000000000101ac8c	jae	0x101ac98
000000000101ac8e	movq	$0x0, 0x10(%rsp)
000000000101ac97	retq
000000000101ac98	movq	0x80(%rax), %rdx
000000000101ac9f	cmpq	%rdx, %rcx
000000000101aca2	jae	0x101ac8e
000000000101aca4	cmpb	$0x1, 0x64(%rax)
000000000101aca8	jne	0x101ac8e
000000000101acaa	movq	%rax, 0x10(%rsp)
000000000101acaf	retq
000000000101acb0	movq	0xa3ae1(%rip), %rdx
000000000101acb7	testb	%al, (%rdx)
000000000101acb9	movq	(%rdx,%rax,8), %rax
000000000101acbd	testq	%rax, %rax
000000000101acc0	je	0x101acdd
000000000101acc2	movq	%rcx, %rdx
000000000101acc5	shrq	$0xd, %rcx
000000000101acc9	andq	$0x1fff, %rcx
000000000101acd0	movq	0x200000(%rax,%rcx,8), %rax
000000000101acd8	movq	%rdx, %rcx
000000000101acdb	jmp	0x101ac80
000000000101acdd	xorl	%eax, %eax
000000000101acdf	jmp	0x101ac80
000000000101ace1	int3
000000000101ace2	int3
000000000101ace3	int3
000000000101ace4	int3
000000000101ace5	int3
000000000101ace6	int3
000000000101ace7	int3
000000000101ace8	int3
000000000101ace9	int3
000000000101acea	int3
000000000101aceb	int3
000000000101acec	int3
000000000101aced	int3
000000000101acee	int3
000000000101acef	int3
runtime.(*mheap).init:
000000000101acf0	movq	%gs:0x30, %rcx
000000000101acf9	cmpq	0x10(%rcx), %rsp
000000000101acfd	jbe	0x101b1df
000000000101ad03	subq	$0x8, %rsp
000000000101ad07	movq	%rbp, (%rsp)
000000000101ad0b	leaq	(%rsp), %rbp
000000000101ad0f	movq	0x10(%rsp), %rcx
000000000101ad14	testb	%al, (%rcx)
000000000101ad16	leaq	0x3548(%rcx), %rdx
000000000101ad1d	testb	%al, (%rdx)
000000000101ad1f	movq	$0x30, 0x3548(%rcx)
000000000101ad2a	cmpl	$0x0, 0xb9eff(%rip)
000000000101ad31	jne	0x101b1be
000000000101ad37	xorps	%xmm0, %xmm0
000000000101ad3a	movups	%xmm0, 0x3550(%rcx)
000000000101ad41	xorps	%xmm0, %xmm0
000000000101ad44	movups	%xmm0, 0x3560(%rcx)
000000000101ad4b	movl	$0x0, 0x3570(%rcx)
000000000101ad55	movq	$0x0, 0x3578(%rcx)
000000000101ad60	cmpl	$0x0, 0xb9ec9(%rip)
000000000101ad67	jne	0x101b1a3
000000000101ad6d	leaq	0xbabac(%rip), %rax
000000000101ad74	movq	%rax, 0x3580(%rcx)
000000000101ad7b	movb	$0x1, 0x3588(%rcx)
000000000101ad82	leaq	0x34b8(%rcx), %rdx
000000000101ad89	testb	%al, (%rdx)
000000000101ad8b	movq	$0x98, 0x34b8(%rcx)
000000000101ad96	cmpl	$0x0, 0xb9e93(%rip)
000000000101ad9d	jne	0x101b172
000000000101ada3	leaq	0x5428e(%rip), %rdx
000000000101adaa	movq	%rdx, 0x34c0(%rcx)
000000000101adb1	movq	%rcx, 0x34c8(%rcx)
000000000101adb8	movups	%xmm0, 0x34d0(%rcx)
000000000101adbf	movl	$0x0, 0x34e0(%rcx)
000000000101adc9	movq	$0x0, 0x34e8(%rcx)
000000000101add4	cmpl	$0x0, 0xb9e55(%rip)
000000000101addb	jne	0x101b150
000000000101ade1	leaq	0xbab10(%rip), %rdx
000000000101ade8	movq	%rdx, 0x34f0(%rcx)
000000000101adef	movb	$0x1, 0x34f8(%rcx)
000000000101adf6	leaq	0x3500(%rcx), %rdx
000000000101adfd	testb	%al, (%rdx)
000000000101adff	movq	$0x6c0, 0x3500(%rcx)
000000000101ae0a	cmpl	$0x0, 0xb9e1f(%rip)
000000000101ae11	jne	0x101b125
000000000101ae17	movups	%xmm0, 0x3508(%rcx)
000000000101ae1e	movups	%xmm0, 0x3518(%rcx)
000000000101ae25	movl	$0x0, 0x3528(%rcx)
000000000101ae2f	movq	$0x0, 0x3530(%rcx)
000000000101ae3a	cmpl	$0x0, 0xb9def(%rip)
000000000101ae41	jne	0x101b103
000000000101ae47	leaq	0xbaaba(%rip), %rdx
000000000101ae4e	movq	%rdx, 0x3538(%rcx)
000000000101ae55	movb	$0x1, 0x3540(%rcx)
000000000101ae5c	leaq	0x3590(%rcx), %rdx
000000000101ae63	testb	%al, (%rdx)
000000000101ae65	movq	$0x30, 0x3590(%rcx)
000000000101ae70	cmpl	$0x0, 0xb9db9(%rip)
000000000101ae77	jne	0x101b0d8
000000000101ae7d	movups	%xmm0, 0x3598(%rcx)
000000000101ae84	movups	%xmm0, 0x35a8(%rcx)
000000000101ae8b	movl	$0x0, 0x35b8(%rcx)
000000000101ae95	movq	$0x0, 0x35c0(%rcx)
000000000101aea0	cmpl	$0x0, 0xb9d89(%rip)
000000000101aea7	jne	0x101b0c4
000000000101aead	movq	%rax, 0x35c8(%rcx)
000000000101aeb4	movb	$0x1, 0x35d0(%rcx)
000000000101aebb	leaq	0x35d8(%rcx), %rdx
000000000101aec2	testb	%al, (%rdx)
000000000101aec4	movq	$0x18, 0x35d8(%rcx)
000000000101aecf	cmpl	$0x0, 0xb9d5a(%rip)
000000000101aed6	jne	0x101b099
000000000101aedc	movups	%xmm0, 0x35e0(%rcx)
000000000101aee3	movups	%xmm0, 0x35f0(%rcx)
000000000101aeea	movl	$0x0, 0x3600(%rcx)
000000000101aef4	movq	$0x0, 0x3608(%rcx)
000000000101aeff	cmpl	$0x0, 0xb9d2a(%rip)
000000000101af06	jne	0x101b085
000000000101af0c	movq	%rax, 0x3610(%rcx)
000000000101af13	movb	$0x1, 0x3618(%rcx)
000000000101af1a	leaq	0x3628(%rcx), %rdx
000000000101af21	testb	%al, (%rdx)
000000000101af23	movq	$0x18, 0x3628(%rcx)
000000000101af2e	cmpl	$0x0, 0xb9cfb(%rip)
000000000101af35	jne	0x101b05a
000000000101af3b	movups	%xmm0, 0x3630(%rcx)
000000000101af42	movups	%xmm0, 0x3640(%rcx)
000000000101af49	movl	$0x0, 0x3650(%rcx)
000000000101af53	movq	$0x0, 0x3658(%rcx)
000000000101af5e	cmpl	$0x0, 0xb9ccb(%rip)
000000000101af65	jne	0x101b046
000000000101af6b	movq	%rax, 0x3660(%rcx)
000000000101af72	movb	$0x1, 0x3668(%rcx)
000000000101af79	movb	$0x0, 0x34f8(%rcx)
000000000101af80	xorl	%eax, %eax
000000000101af82	jmp	0x101afb9
000000000101af84	movq	%rax, %rdx
000000000101af87	shlq	$0x4, %rax
000000000101af8b	movq	$0x0, 0x8(%rcx,%rax)
000000000101af94	movq	$0x0, 0x10(%rcx,%rax)
000000000101af9d	movq	$0x0, 0x810(%rcx,%rax)
000000000101afa9	movq	$0x0, 0x818(%rcx,%rax)
000000000101afb5	leaq	0x1(%rdx), %rax
000000000101afb9	cmpq	$0x80, %rax
000000000101afbf	jl	0x101af84
000000000101afc1	leaq	0x1010(%rcx), %rax
000000000101afc8	testb	%al, (%rax)
000000000101afca	movups	%xmm0, 0x1010(%rcx)
000000000101afd1	xorl	%eax, %eax
000000000101afd3	jmp	0x101b035
000000000101afd5	movq	%rax, %rdx
000000000101afd8	shlq	$0x6, %rax
000000000101afdc	leaq	0x1338(%rcx,%rax), %rbx
000000000101afe4	testb	%al, (%rbx)
000000000101afe6	movb	%dl, 0x1340(%rcx,%rax)
000000000101afed	leaq	0x1348(%rcx,%rax), %rbx
000000000101aff5	testb	%al, (%rbx)
000000000101aff7	movq	$0x0, 0x1348(%rcx,%rax)
000000000101b003	movq	$0x0, 0x1350(%rcx,%rax)
000000000101b00f	leaq	0x1358(%rcx,%rax), %rbx
000000000101b017	testb	%al, (%rbx)
000000000101b019	movq	$0x0, 0x1358(%rcx,%rax)
000000000101b025	movq	$0x0, 0x1360(%rcx,%rax)
000000000101b031	leaq	0x1(%rdx), %rax
000000000101b035	cmpq	$0x86, %rax
000000000101b03b	jl	0x101afd5
000000000101b03d	movq	(%rsp), %rbp
000000000101b041	addq	$0x8, %rsp
000000000101b045	retq
000000000101b046	leaq	0x3660(%rcx), %rdi
000000000101b04d	callq	runtime.gcWriteBarrier
000000000101b052	xorps	%xmm0, %xmm0
000000000101b055	jmp	0x101af72
000000000101b05a	leaq	0x3630(%rcx), %rdi
000000000101b061	xorl	%eax, %eax
000000000101b063	callq	runtime.gcWriteBarrier
000000000101b068	leaq	0x3638(%rcx), %rdi
000000000101b06f	xorl	%eax, %eax
000000000101b071	callq	runtime.gcWriteBarrier
000000000101b076	leaq	0xba8a3(%rip), %rax
000000000101b07d	xorps	%xmm0, %xmm0
000000000101b080	jmp	0x101af42
000000000101b085	leaq	0x3610(%rcx), %rdi
000000000101b08c	callq	runtime.gcWriteBarrier
000000000101b091	xorps	%xmm0, %xmm0
000000000101b094	jmp	0x101af13
000000000101b099	leaq	0x35e0(%rcx), %rdi
000000000101b0a0	xorl	%eax, %eax
000000000101b0a2	callq	runtime.gcWriteBarrier
000000000101b0a7	leaq	0x35e8(%rcx), %rdi
000000000101b0ae	xorl	%eax, %eax
000000000101b0b0	callq	runtime.gcWriteBarrier
000000000101b0b5	leaq	0xba864(%rip), %rax
000000000101b0bc	xorps	%xmm0, %xmm0
000000000101b0bf	jmp	0x101aee3
000000000101b0c4	leaq	0x35c8(%rcx), %rdi
000000000101b0cb	callq	runtime.gcWriteBarrier
000000000101b0d0	xorps	%xmm0, %xmm0
000000000101b0d3	jmp	0x101aeb4
000000000101b0d8	leaq	0x3598(%rcx), %rdi
000000000101b0df	xorl	%eax, %eax
000000000101b0e1	callq	runtime.gcWriteBarrier
000000000101b0e6	leaq	0x35a0(%rcx), %rdi
000000000101b0ed	xorl	%eax, %eax
000000000101b0ef	callq	runtime.gcWriteBarrier
000000000101b0f4	leaq	0xba825(%rip), %rax
000000000101b0fb	xorps	%xmm0, %xmm0
000000000101b0fe	jmp	0x101ae84
000000000101b103	leaq	0x3538(%rcx), %rdi
000000000101b10a	leaq	0xba7f7(%rip), %rax
000000000101b111	callq	runtime.gcWriteBarrier
000000000101b116	leaq	0xba803(%rip), %rax
000000000101b11d	xorps	%xmm0, %xmm0
000000000101b120	jmp	0x101ae55
000000000101b125	leaq	0x3508(%rcx), %rdi
000000000101b12c	xorl	%eax, %eax
000000000101b12e	callq	runtime.gcWriteBarrier
000000000101b133	leaq	0x3510(%rcx), %rdi
000000000101b13a	xorl	%eax, %eax
000000000101b13c	callq	runtime.gcWriteBarrier
000000000101b141	leaq	0xba7d8(%rip), %rax
000000000101b148	xorps	%xmm0, %xmm0
000000000101b14b	jmp	0x101ae1e
000000000101b150	leaq	0x34f0(%rcx), %rdi
000000000101b157	leaq	0xba79a(%rip), %rax
000000000101b15e	callq	runtime.gcWriteBarrier
000000000101b163	leaq	0xba7b6(%rip), %rax
000000000101b16a	xorps	%xmm0, %xmm0
000000000101b16d	jmp	0x101adef
000000000101b172	leaq	0x34c0(%rcx), %rdi
000000000101b179	leaq	0x53eb8(%rip), %rax
000000000101b180	callq	runtime.gcWriteBarrier
000000000101b185	leaq	0x34c8(%rcx), %rdi
000000000101b18c	movq	%rcx, %rax
000000000101b18f	callq	runtime.gcWriteBarrier
000000000101b194	leaq	0xba785(%rip), %rax
000000000101b19b	xorps	%xmm0, %xmm0
000000000101b19e	jmp	0x101adb8
000000000101b1a3	leaq	0x3580(%rcx), %rdi
000000000101b1aa	leaq	0xba76f(%rip), %rax
000000000101b1b1	callq	runtime.gcWriteBarrier
000000000101b1b6	xorps	%xmm0, %xmm0
000000000101b1b9	jmp	0x101ad7b
000000000101b1be	leaq	0x3550(%rcx), %rdi
000000000101b1c5	xorl	%eax, %eax
000000000101b1c7	callq	runtime.gcWriteBarrier
000000000101b1cc	leaq	0x3558(%rcx), %rdi
000000000101b1d3	xorl	%eax, %eax
000000000101b1d5	callq	runtime.gcWriteBarrier
000000000101b1da	jmp	0x101ad41
000000000101b1df	callq	runtime.morestack_noctxt
000000000101b1e4	jmp	"runtime.(*mheap).init"
000000000101b1e9	int3
000000000101b1ea	int3
000000000101b1eb	int3
000000000101b1ec	int3
000000000101b1ed	int3
000000000101b1ee	int3
000000000101b1ef	int3
runtime.(*mheap).reclaimList:
000000000101b1f0	movq	%gs:0x30, %rcx
000000000101b1f9	cmpq	0x10(%rcx), %rsp
000000000101b1fd	jbe	0x101b336
000000000101b203	subq	$0x48, %rsp
000000000101b207	movq	%rbp, 0x40(%rsp)
000000000101b20c	leaq	0x40(%rsp), %rbp
000000000101b211	movl	0xa32a9(%rip), %ecx
000000000101b217	movl	%ecx, 0x1c(%rsp)
000000000101b21b	xorl	%eax, %eax
000000000101b21d	jmp	0x101b30a
000000000101b222	movq	(%rbx), %rbx
000000000101b225	movq	%r8, %rax
000000000101b228	testq	%rbx, %rbx
000000000101b22b	je	0x101b32e
000000000101b231	movl	0x58(%rbx), %esi
000000000101b234	leal	-0x2(%rcx), %edi
000000000101b237	cmpl	%edi, %esi
000000000101b239	jne	0x101b326
000000000101b23f	leal	-0x1(%rcx), %esi
000000000101b242	movq	%rax, %r8
000000000101b245	movl	%edi, %eax
000000000101b247	lock
000000000101b248	cmpxchgl	%esi, 0x58(%rbx)
000000000101b24c	sete	%sil
000000000101b250	testb	%sil, %sil
000000000101b253	jne	0x101b26c
000000000101b255	leal	-0x1(%rcx), %esi
000000000101b258	cmpl	%esi, 0x58(%rbx)
000000000101b25b	je	0x101b222
000000000101b25d	movq	%r8, 0x68(%rsp)
000000000101b262	movq	0x40(%rsp), %rbp
000000000101b267	addq	$0x48, %rsp
000000000101b26b	retq
000000000101b26c	movq	%rbx, 0x38(%rsp)
000000000101b271	movq	%r8, 0x30(%rsp)
000000000101b276	movq	%rdx, (%rsp)
000000000101b27a	movq	%rbx, 0x8(%rsp)
000000000101b27f	callq	"runtime.(*mSpanList).remove"
000000000101b284	movq	0x58(%rsp), %rax
000000000101b289	movq	%rax, (%rsp)
000000000101b28d	movq	0x38(%rsp), %rcx
000000000101b292	movq	%rcx, 0x8(%rsp)
000000000101b297	callq	"runtime.(*mSpanList).insertBack"
000000000101b29c	movq	0x50(%rsp), %rax
000000000101b2a1	testb	%al, (%rax)
000000000101b2a3	movq	%rax, (%rsp)
000000000101b2a7	callq	runtime.unlock
000000000101b2ac	movq	0x38(%rsp), %rax
000000000101b2b1	movq	0x20(%rax), %rcx
000000000101b2b5	movq	%rcx, 0x20(%rsp)
000000000101b2ba	movq	%rax, (%rsp)
000000000101b2be	movb	$0x0, 0x8(%rsp)
000000000101b2c3	callq	"runtime.(*mspan).sweep"
000000000101b2c8	movzbl	0x10(%rsp), %eax
000000000101b2cd	movq	%rax, 0x28(%rsp)
000000000101b2d2	movq	0x50(%rsp), %rcx
000000000101b2d7	movq	%rcx, (%rsp)
000000000101b2db	callq	runtime.lock
000000000101b2e0	movq	0x20(%rsp), %rax
000000000101b2e5	movq	0x30(%rsp), %rcx
000000000101b2ea	addq	%rcx, %rax
000000000101b2ed	movq	0x28(%rsp), %rdx
000000000101b2f2	testq	%rdx, %rdx
000000000101b2f5	cmovneq	%rax, %rcx
000000000101b2f9	movq	0x60(%rsp), %rax
000000000101b2fe	cmpq	%rax, %rcx
000000000101b301	jae	0x101b317
000000000101b303	movq	%rcx, %rax
000000000101b306	movl	0x1c(%rsp), %ecx
000000000101b30a	movq	0x58(%rsp), %rdx
000000000101b30f	movq	(%rdx), %rbx
000000000101b312	jmp	0x101b228
000000000101b317	movq	%rcx, 0x68(%rsp)
000000000101b31c	movq	0x40(%rsp), %rbp
000000000101b321	addq	$0x48, %rsp
000000000101b325	retq
000000000101b326	movq	%rax, %r8
000000000101b329	jmp	0x101b255
000000000101b32e	movq	%rax, %r8
000000000101b331	jmp	0x101b25d
000000000101b336	callq	runtime.morestack_noctxt
000000000101b33b	jmp	"runtime.(*mheap).reclaimList"
runtime.(*mheap).reclaim:
000000000101b340	movq	%gs:0x30, %rcx
000000000101b349	cmpq	0x10(%rcx), %rsp
000000000101b34d	jbe	0x101b4e0
000000000101b353	subq	$0x40, %rsp
000000000101b357	movq	%rbp, 0x38(%rsp)
000000000101b35c	leaq	0x38(%rsp), %rbp
000000000101b361	movq	0x48(%rsp), %rax
000000000101b366	movq	0x50(%rsp), %rcx
000000000101b36b	movq	%rcx, %rdx
000000000101b36e	jmp	0x101b389
000000000101b370	movq	0x30(%rsp), %rbx
000000000101b375	leaq	0x1(%rbx), %rcx
000000000101b379	movq	0x48(%rsp), %rbx
000000000101b37e	movq	0x50(%rsp), %rsi
000000000101b383	movq	%rbx, %rax
000000000101b386	movq	%rsi, %rdx
000000000101b389	cmpq	$0x80, %rcx
000000000101b390	jge	0x101b3d7
000000000101b392	testb	%al, (%rax)
000000000101b394	cmpq	$0x80, %rcx
000000000101b39b	jae	0x101b4d9
000000000101b3a1	movq	%rcx, 0x30(%rsp)
000000000101b3a6	shlq	$0x4, %rcx
000000000101b3aa	leaq	0x810(%rcx,%rax), %rcx
000000000101b3b2	movq	%rcx, 0x8(%rsp)
000000000101b3b7	movq	%rax, (%rsp)
000000000101b3bb	movq	%rdx, 0x10(%rsp)
000000000101b3c0	callq	"runtime.(*mheap).reclaimList"
000000000101b3c5	cmpq	$0x0, 0x18(%rsp)
000000000101b3cb	je	0x101b370
000000000101b3cd	movq	0x38(%rsp), %rbp
000000000101b3d2	addq	$0x40, %rsp
000000000101b3d6	retq
000000000101b3d7	testb	%al, (%rax)
000000000101b3d9	leaq	0x1010(%rax), %rcx
000000000101b3e0	movq	%rcx, 0x8(%rsp)
000000000101b3e5	movq	%rax, (%rsp)
000000000101b3e9	movq	%rdx, 0x10(%rsp)
000000000101b3ee	callq	"runtime.(*mheap).reclaimList"
000000000101b3f3	cmpq	$0x0, 0x18(%rsp)
000000000101b3f9	jne	0x101b4cf
000000000101b3ff	movq	0x50(%rsp), %rax
000000000101b404	movq	0x48(%rsp), %rcx
000000000101b409	xorl	%edx, %edx
000000000101b40b	xorl	%ebx, %ebx
000000000101b40d	jmp	0x101b428
000000000101b40f	movq	0x28(%rsp), %rsi
000000000101b414	leaq	0x1(%rsi), %rdx
000000000101b418	movq	0x48(%rsp), %rsi
000000000101b41d	movq	%rsi, %rcx
000000000101b420	movq	%rax, %rbx
000000000101b423	movq	0x50(%rsp), %rax
000000000101b428	movq	%rbx, 0x20(%rsp)
000000000101b42d	cmpq	%rax, %rdx
000000000101b430	jge	0x101b483
000000000101b432	cmpq	$0x80, %rdx
000000000101b439	jge	0x101b483
000000000101b43b	movq	%rdx, 0x28(%rsp)
000000000101b440	shlq	$0x4, %rdx
000000000101b444	leaq	0x810(%rdx,%rcx), %rdx
000000000101b44c	movq	%rdx, 0x8(%rsp)
000000000101b451	movq	%rcx, (%rsp)
000000000101b455	subq	%rbx, %rax
000000000101b458	movq	%rax, 0x10(%rsp)
000000000101b45d	callq	"runtime.(*mheap).reclaimList"
000000000101b462	movq	0x18(%rsp), %rax
000000000101b467	movq	0x20(%rsp), %rcx
000000000101b46c	addq	%rcx, %rax
000000000101b46f	movq	0x50(%rsp), %rcx
000000000101b474	cmpq	%rcx, %rax
000000000101b477	jb	0x101b40f
000000000101b479	movq	0x38(%rsp), %rbp
000000000101b47e	addq	$0x40, %rsp
000000000101b482	retq
000000000101b483	movq	%rcx, (%rsp)
000000000101b487	callq	runtime.unlock
000000000101b48c	movq	0x20(%rsp), %rax
000000000101b491	movq	%rax, 0x20(%rsp)
000000000101b496	callq	runtime.sweepone
000000000101b49b	movq	(%rsp), %rax
000000000101b49f	cmpq	$-0x1, %rax
000000000101b4a3	je	0x101b4b7
000000000101b4a5	movq	0x20(%rsp), %rcx
000000000101b4aa	addq	%rcx, %rax
000000000101b4ad	movq	0x50(%rsp), %rcx
000000000101b4b2	cmpq	%rcx, %rax
000000000101b4b5	jb	0x101b491
000000000101b4b7	movq	0x48(%rsp), %rax
000000000101b4bc	movq	%rax, (%rsp)
000000000101b4c0	callq	runtime.lock
000000000101b4c5	movq	0x38(%rsp), %rbp
000000000101b4ca	addq	$0x40, %rsp
000000000101b4ce	retq
000000000101b4cf	movq	0x38(%rsp), %rbp
000000000101b4d4	addq	$0x40, %rsp
000000000101b4d8	retq
000000000101b4d9	callq	runtime.panicindex
000000000101b4de	ud2
000000000101b4e0	callq	runtime.morestack_noctxt
000000000101b4e5	jmp	"runtime.(*mheap).reclaim"
000000000101b4ea	int3
000000000101b4eb	int3
000000000101b4ec	int3
000000000101b4ed	int3
000000000101b4ee	int3
000000000101b4ef	int3
runtime.(*mheap).alloc_m:
000000000101b4f0	movq	%gs:0x30, %rcx
000000000101b4f9	cmpq	0x10(%rcx), %rsp
000000000101b4fd	jbe	0x101b809
000000000101b503	subq	$0x38, %rsp
000000000101b507	movq	%rbp, 0x30(%rsp)
000000000101b50c	leaq	0x30(%rsp), %rbp
000000000101b511	movq	%gs:0x30, %rax
000000000101b51a	movq	0x30(%rax), %rcx
000000000101b51e	movq	(%rcx), %rcx
000000000101b521	cmpq	%rcx, %rax
000000000101b524	jne	0x101b7ee
000000000101b52a	movq	%rax, 0x28(%rsp)
000000000101b52f	movq	0x40(%rsp), %rax
000000000101b534	testb	%al, (%rax)
000000000101b536	movq	%rax, (%rsp)
000000000101b53a	callq	runtime.lock
000000000101b53f	movq	0x40(%rsp), %rax
000000000101b544	cmpl	$0x0, 0x1024(%rax)
000000000101b54b	jne	0x101b580
000000000101b54d	leaq	0xa949c(%rip), %rcx
000000000101b554	cmpb	$0x0, (%rcx)
000000000101b557	jne	0x101b7d8
000000000101b55d	movq	%rax, (%rsp)
000000000101b561	movq	0x48(%rsp), %rcx
000000000101b566	movq	%rcx, 0x8(%rsp)
000000000101b56b	callq	"runtime.(*mheap).reclaim"
000000000101b570	leaq	0xa9479(%rip), %rax
000000000101b577	cmpb	$0x0, (%rax)
000000000101b57a	jne	0x101b7ce
000000000101b580	movq	0x28(%rsp), %rax
000000000101b585	movq	0x30(%rax), %rcx
000000000101b589	movq	0x158(%rcx), %rcx
000000000101b590	movq	0x8(%rcx), %rcx
000000000101b594	addq	0xbba2d(%rip), %rcx
000000000101b59b	movq	%rcx, 0xbba26(%rip)
000000000101b5a2	movq	0x30(%rax), %rcx
000000000101b5a6	movq	0x158(%rcx), %rcx
000000000101b5ad	movq	$0x0, 0x8(%rcx)
000000000101b5b5	movq	0x30(%rax), %rcx
000000000101b5b9	movq	0x158(%rcx), %rcx
000000000101b5c0	movq	0x20(%rcx), %rcx
000000000101b5c4	addq	0xbb9dd(%rip), %rcx
000000000101b5cb	movq	%rcx, 0xbb9d6(%rip)
000000000101b5d2	movq	0x30(%rax), %rax
000000000101b5d6	movq	0x158(%rax), %rax
000000000101b5dd	movq	$0x0, 0x20(%rax)
000000000101b5e5	movq	0x40(%rsp), %rax
000000000101b5ea	movq	%rax, (%rsp)
000000000101b5ee	movq	0x48(%rsp), %rcx
000000000101b5f3	movq	%rcx, 0x8(%rsp)
000000000101b5f8	leaq	0xba2c9(%rip), %rdx
000000000101b5ff	movq	%rdx, 0x10(%rsp)
000000000101b604	callq	"runtime.(*mheap).allocSpanLocked"
000000000101b609	movq	0x18(%rsp), %rax
000000000101b60e	movq	%rax, 0x20(%rsp)
000000000101b613	testq	%rax, %rax
000000000101b616	jne	0x101b66d
000000000101b618	cmpl	$0x0, 0xb94d1(%rip)
000000000101b61f	jne	0x101b656
000000000101b621	leaq	0xa93c8(%rip), %rcx
000000000101b628	cmpb	$0x0, (%rcx)
000000000101b62b	jne	0x101b64f
000000000101b62d	movq	0x40(%rsp), %rax
000000000101b632	movq	%rax, (%rsp)
000000000101b636	callq	runtime.unlock
000000000101b63b	movq	0x20(%rsp), %rax
000000000101b640	movq	%rax, 0x58(%rsp)
000000000101b645	movq	0x30(%rsp), %rbp
000000000101b64a	addq	$0x38, %rsp
000000000101b64e	retq
000000000101b64f	callq	runtime.traceHeapAlloc
000000000101b654	jmp	0x101b62d
000000000101b656	leaq	runtime.gcController(%rip), %rax
000000000101b65d	movq	%rax, (%rsp)
000000000101b661	callq	"runtime.(*gcControllerState).revise"
000000000101b666	movq	0x20(%rsp), %rax
000000000101b66b	jmp	0x101b621
000000000101b66d	movq	0x40(%rsp), %rcx
000000000101b672	movl	0x1020(%rcx), %edx
000000000101b678	xchgl	%edx, 0x58(%rax)
000000000101b67b	movl	0x1020(%rcx), %edx
000000000101b681	shrl	%edx
000000000101b683	andl	$0x1, %edx
000000000101b686	leaq	(%rdx,%rdx,4), %rdx
000000000101b68a	leaq	0x1048(%rcx,%rdx,8), %rdx
000000000101b692	movq	%rdx, (%rsp)
000000000101b696	movq	%rax, 0x8(%rsp)
000000000101b69b	callq	"runtime.(*gcSweepBuf).push"
000000000101b6a0	movq	0x20(%rsp), %rax
000000000101b6a5	movb	$0x1, 0x64(%rax)
000000000101b6a9	movw	$0x0, 0x60(%rax)
000000000101b6af	movzbl	0x50(%rsp), %ecx
000000000101b6b4	movb	%cl, 0x62(%rax)
000000000101b6b7	shrb	%cl
000000000101b6b9	testb	%cl, %cl
000000000101b6bb	jne	0x101b77d
000000000101b6c1	movq	0x20(%rax), %rcx
000000000101b6c5	shlq	$0xd, %rcx
000000000101b6c9	movq	%rcx, 0x68(%rax)
000000000101b6cd	movb	$0x0, 0x66(%rax)
000000000101b6d1	movw	$0x0, 0x5c(%rax)
000000000101b6d7	movb	$0x0, 0x67(%rax)
000000000101b6db	movw	$0x0, 0x5e(%rax)
000000000101b6e1	movq	0x40(%rsp), %rcx
000000000101b6e6	movq	0x1098(%rcx), %rdx
000000000101b6ed	movq	0x48(%rsp), %rbx
000000000101b6f2	addq	%rbx, %rdx
000000000101b6f5	movq	%rdx, 0x1098(%rcx)
000000000101b6fc	movzbl	0x51(%rsp), %edx
000000000101b701	testb	%dl, %dl
000000000101b703	je	0x101b75c
000000000101b705	incq	0xba1cc(%rip)
000000000101b70c	movq	0x68(%rax), %rdx
000000000101b710	addq	0xa2e49(%rip), %rdx
000000000101b717	movq	%rdx, 0xa2e42(%rip)
000000000101b71e	incq	0xa2e43(%rip)
000000000101b725	shlq	$0xd, %rbx
000000000101b729	leaq	0xbb890(%rip), %rdx
000000000101b730	lock
000000000101b731	xaddq	%rbx, (%rdx)
000000000101b735	movq	0x20(%rax), %rdx
000000000101b739	cmpq	$0x80, %rdx
000000000101b740	jae	0x101b766
000000000101b742	shlq	$0x4, %rdx
000000000101b746	leaq	0x810(%rcx,%rdx), %rdx
000000000101b74e	movq	%rdx, (%rsp)
000000000101b752	movq	%rax, 0x8(%rsp)
000000000101b757	callq	"runtime.(*mSpanList).insertBack"
000000000101b75c	movq	0x20(%rsp), %rax
000000000101b761	jmp	0x101b618
000000000101b766	leaq	0x1010(%rcx), %rdx
000000000101b76d	movq	%rdx, (%rsp)
000000000101b771	movq	%rax, 0x8(%rsp)
000000000101b776	callq	"runtime.(*mSpanList).insertBack"
000000000101b77b	jmp	0x101b75c
000000000101b77d	movsbq	%cl, %rcx
000000000101b781	cmpq	$0x43, %rcx
000000000101b785	jae	0x101b7e7
000000000101b787	leaq	runtime.class_to_size(%rip), %rdx
000000000101b78e	movzwl	(%rdx,%rcx,2), %edx
000000000101b792	movq	%rdx, 0x68(%rax)
000000000101b796	leaq	(%rcx,%rcx,2), %rcx
000000000101b79a	movq	%rcx, %rdx
000000000101b79d	shlq	%rcx
000000000101b7a0	leaq	runtime.class_to_divmagic(%rip), %rbx
000000000101b7a7	movzbl	(%rbx,%rcx), %esi
000000000101b7ab	movb	%sil, 0x66(%rax)
000000000101b7af	movzwl	0x2(%rbx,%rdx,2), %esi
000000000101b7b4	movw	%si, 0x5c(%rax)
000000000101b7b8	movzbl	0x1(%rbx,%rcx), %ecx
000000000101b7bd	movb	%cl, 0x67(%rax)
000000000101b7c0	movzwl	0x4(%rbx,%rdx,2), %ecx
000000000101b7c5	movw	%cx, 0x5e(%rax)
000000000101b7c9	jmp	0x101b6e1
000000000101b7ce	callq	runtime.traceGCSweepDone
000000000101b7d3	jmp	0x101b580
000000000101b7d8	callq	runtime.traceGCSweepStart
000000000101b7dd	movq	0x40(%rsp), %rax
000000000101b7e2	jmp	0x101b55d
000000000101b7e7	callq	runtime.panicindex
000000000101b7ec	ud2
000000000101b7ee	leaq	0x51586(%rip), %rax
000000000101b7f5	movq	%rax, (%rsp)
000000000101b7f9	movq	$0x1c, 0x8(%rsp)
000000000101b802	callq	runtime.throw
000000000101b807	ud2
000000000101b809	callq	runtime.morestack_noctxt
000000000101b80e	jmp	"runtime.(*mheap).alloc_m"
000000000101b813	int3
000000000101b814	int3
000000000101b815	int3
000000000101b816	int3
000000000101b817	int3
000000000101b818	int3
000000000101b819	int3
000000000101b81a	int3
000000000101b81b	int3
000000000101b81c	int3
000000000101b81d	int3
000000000101b81e	int3
000000000101b81f	int3
runtime.(*mheap).alloc:
000000000101b820	movq	%gs:0x30, %rcx
000000000101b829	cmpq	0x10(%rcx), %rsp
000000000101b82d	jbe	0x101b8fc
000000000101b833	subq	$0x48, %rsp
000000000101b837	movq	%rbp, 0x40(%rsp)
000000000101b83c	leaq	0x40(%rsp), %rbp
000000000101b841	movq	$0x0, 0x10(%rsp)
000000000101b84a	movq	$0x0, 0x18(%rsp)
000000000101b853	xorps	%xmm0, %xmm0
000000000101b856	movups	%xmm0, 0x20(%rsp)
000000000101b85b	movups	%xmm0, 0x30(%rsp)
000000000101b860	leaq	"runtime.(*mheap).alloc.func1"(%rip), %rax
000000000101b867	movq	%rax, 0x18(%rsp)
000000000101b86c	movq	0x50(%rsp), %rax
000000000101b871	movq	%rax, 0x20(%rsp)
000000000101b876	movq	0x58(%rsp), %rax
000000000101b87b	movq	%rax, 0x28(%rsp)
000000000101b880	movzbl	0x60(%rsp), %eax
000000000101b885	movb	%al, 0x30(%rsp)
000000000101b889	movzbl	0x61(%rsp), %eax
000000000101b88e	movb	%al, 0x31(%rsp)
000000000101b892	leaq	0x10(%rsp), %rax
000000000101b897	movq	%rax, 0x38(%rsp)
000000000101b89c	leaq	0x18(%rsp), %rax
000000000101b8a1	movq	%rax, (%rsp)
000000000101b8a5	callq	runtime.systemstack
000000000101b8aa	movq	0x10(%rsp), %rax
000000000101b8af	testq	%rax, %rax
000000000101b8b2	je	0x101b8cc
000000000101b8b4	movzbl	0x62(%rsp), %ecx
000000000101b8b9	testb	%cl, %cl
000000000101b8bb	je	0x101b8c3
000000000101b8bd	cmpb	$0x0, 0x65(%rax)
000000000101b8c1	jne	0x101b8e0
000000000101b8c3	movq	0x10(%rsp), %rax
000000000101b8c8	movb	$0x0, 0x65(%rax)
000000000101b8cc	movq	0x10(%rsp), %rax
000000000101b8d1	movq	%rax, 0x68(%rsp)
000000000101b8d6	movq	0x40(%rsp), %rbp
000000000101b8db	addq	$0x48, %rsp
000000000101b8df	retq
000000000101b8e0	movq	0x20(%rax), %rcx
000000000101b8e4	shlq	$0xd, %rcx
000000000101b8e8	movq	0x18(%rax), %rax
000000000101b8ec	movq	%rcx, 0x8(%rsp)
000000000101b8f1	movq	%rax, (%rsp)
000000000101b8f5	callq	runtime.memclrNoHeapPointers
000000000101b8fa	jmp	0x101b8c3
000000000101b8fc	callq	runtime.morestack_noctxt
000000000101b901	jmp	"runtime.(*mheap).alloc"
000000000101b906	int3
000000000101b907	int3
000000000101b908	int3
000000000101b909	int3
000000000101b90a	int3
000000000101b90b	int3
000000000101b90c	int3
000000000101b90d	int3
000000000101b90e	int3
000000000101b90f	int3
runtime.(*mheap).allocManual:
000000000101b910	movq	%gs:0x30, %rcx
000000000101b919	cmpq	0x18(%rcx), %rsp
000000000101b91d	jbe	0x101b9e6
000000000101b923	subq	$0x30, %rsp
000000000101b927	movq	%rbp, 0x28(%rsp)
000000000101b92c	leaq	0x28(%rsp), %rbp
000000000101b931	movq	0x38(%rsp), %rax
000000000101b936	testb	%al, (%rax)
000000000101b938	movq	%rax, (%rsp)
000000000101b93c	callq	runtime.lock
000000000101b941	movq	0x38(%rsp), %rax
000000000101b946	movq	%rax, (%rsp)
000000000101b94a	movq	0x40(%rsp), %rcx
000000000101b94f	movq	%rcx, 0x8(%rsp)
000000000101b954	movq	0x48(%rsp), %rcx
000000000101b959	movq	%rcx, 0x10(%rsp)
000000000101b95e	callq	"runtime.(*mheap).allocSpanLocked"
000000000101b963	movq	0x18(%rsp), %rax
000000000101b968	movq	%rax, 0x20(%rsp)
000000000101b96d	testq	%rax, %rax
000000000101b970	je	0x101b9c4
000000000101b972	movb	$0x2, 0x64(%rax)
000000000101b976	movq	$0x0, 0x28(%rax)
000000000101b97e	movw	$0x0, 0x60(%rax)
000000000101b984	movb	$0x0, 0x62(%rax)
000000000101b988	movq	$0x0, 0x38(%rax)
000000000101b990	movq	$0x0, 0x68(%rax)
000000000101b998	movq	0x20(%rax), %rcx
000000000101b99c	shlq	$0xd, %rcx
000000000101b9a0	addq	0x18(%rax), %rcx
000000000101b9a4	movq	%rcx, 0x80(%rax)
000000000101b9ab	movq	0xb9f06(%rip), %rcx
000000000101b9b2	movq	0x20(%rax), %rdx
000000000101b9b6	shlq	$0xd, %rdx
000000000101b9ba	subq	%rdx, %rcx
000000000101b9bd	movq	%rcx, 0xb9ef4(%rip)
000000000101b9c4	movq	0x38(%rsp), %rax
000000000101b9c9	movq	%rax, (%rsp)
000000000101b9cd	callq	runtime.unlock
000000000101b9d2	movq	0x20(%rsp), %rax
000000000101b9d7	movq	%rax, 0x50(%rsp)
000000000101b9dc	movq	0x28(%rsp), %rbp
000000000101b9e1	addq	$0x30, %rsp
000000000101b9e5	retq
000000000101b9e6	callq	runtime.morestackc
000000000101b9eb	jmp	"runtime.(*mheap).allocManual"
runtime.(*mheap).setSpans:
000000000101b9f0	subq	$0x8, %rsp
000000000101b9f4	movq	%rbp, (%rsp)
000000000101b9f8	leaq	(%rsp), %rbp
000000000101b9fc	movq	0x10(%rsp), %rax
000000000101ba01	testb	%al, (%rax)
000000000101ba03	movq	0x12f8(%rax), %rcx
000000000101ba0a	testb	%al, (%rcx)
000000000101ba0c	movq	0x18(%rsp), %rdx
000000000101ba11	movabsq	$0x800000000000, %rbx
000000000101ba1b	leaq	(%rbx,%rdx), %rsi
000000000101ba1f	shrq	$0x1a, %rsi
000000000101ba23	cmpq	$0x400000, %rsi
000000000101ba2a	jae	0x101baab
000000000101ba2c	movq	%rdx, %rdi
000000000101ba2f	shrq	$0xd, %rdx
000000000101ba33	movq	(%rcx,%rsi,8), %rcx
000000000101ba37	movq	0x20(%rsp), %rsi
000000000101ba3c	movq	0x28(%rsp), %r8
000000000101ba41	xorl	%r9d, %r9d
000000000101ba44	jmp	0x101ba5b
000000000101ba46	testb	%al, (%rcx)
000000000101ba48	andq	$0x1fff, %r10
000000000101ba4f	movq	%r8, 0x200000(%rcx,%r10,8)
000000000101ba57	leaq	0x1(%r11), %r9
000000000101ba5b	cmpq	%rsi, %r9
000000000101ba5e	jae	0x101ba9b
000000000101ba60	leaq	(%rdx,%r9), %r10
000000000101ba64	testq	$0x1fff, %r10
000000000101ba6b	jne	0x101ba96
000000000101ba6d	movq	0x12f8(%rax), %rcx
000000000101ba74	testb	%al, (%rcx)
000000000101ba76	movq	%r9, %r11
000000000101ba79	shlq	$0xd, %r9
000000000101ba7d	addq	%rdi, %r9
000000000101ba80	addq	%rbx, %r9
000000000101ba83	shrq	$0x1a, %r9
000000000101ba87	cmpq	$0x400000, %r9
000000000101ba8e	jae	0x101baa4
000000000101ba90	movq	(%rcx,%r9,8), %rcx
000000000101ba94	jmp	0x101ba46
000000000101ba96	movq	%r9, %r11
000000000101ba99	jmp	0x101ba46
000000000101ba9b	movq	(%rsp), %rbp
000000000101ba9f	addq	$0x8, %rsp
000000000101baa3	retq
000000000101baa4	callq	runtime.panicindex
000000000101baa9	ud2
000000000101baab	callq	runtime.panicindex
000000000101bab0	ud2
000000000101bab2	int3
000000000101bab3	int3
000000000101bab4	int3
000000000101bab5	int3
000000000101bab6	int3
000000000101bab7	int3
000000000101bab8	int3
000000000101bab9	int3
000000000101baba	int3
000000000101babb	int3
000000000101babc	int3
000000000101babd	int3
000000000101babe	int3
000000000101babf	int3
runtime.(*mheap).allocSpanLocked:
000000000101bac0	movq	%gs:0x30, %rcx
000000000101bac9	cmpq	0x10(%rcx), %rsp
000000000101bacd	jbe	0x101be8c
000000000101bad3	subq	$0x38, %rsp
000000000101bad7	movq	%rbp, 0x30(%rsp)
000000000101badc	leaq	0x30(%rsp), %rbp
000000000101bae1	movq	0x40(%rsp), %rax
000000000101bae6	movq	0x48(%rsp), %rcx
000000000101baeb	movq	%rcx, %rdx
000000000101baee	jmp	0x101baf4
000000000101baf0	leaq	0x1(%rbx), %rcx
000000000101baf4	cmpq	$0x80, %rcx
000000000101bafb	jge	0x101bd95
000000000101bb01	testb	%al, (%rax)
000000000101bb03	cmpq	$0x80, %rcx
000000000101bb0a	jae	0x101be85
000000000101bb10	movq	%rcx, %rbx
000000000101bb13	shlq	$0x4, %rcx
000000000101bb17	leaq	0x8(%rax,%rcx), %rsi
000000000101bb1c	movq	0x8(%rax,%rcx), %rcx
000000000101bb21	testq	%rcx, %rcx
000000000101bb24	je	0x101baf0
000000000101bb26	movq	%rcx, 0x28(%rsp)
000000000101bb2b	movq	%rsi, (%rsp)
000000000101bb2f	movq	%rcx, 0x8(%rsp)
000000000101bb34	callq	"runtime.(*mSpanList).remove"
000000000101bb39	movq	0x28(%rsp), %rax
000000000101bb3e	cmpb	$0x3, 0x64(%rax)
000000000101bb42	jne	0x101be6a
000000000101bb48	movq	0x20(%rax), %rcx
000000000101bb4c	movq	0x48(%rsp), %rdx
000000000101bb51	cmpq	%rdx, %rcx
000000000101bb54	jb	0x101be4f
000000000101bb5a	movq	0x78(%rax), %rcx
000000000101bb5e	testq	%rcx, %rcx
000000000101bb61	jbe	0x101bb80
000000000101bb63	movq	0xb9d66(%rip), %rbx
000000000101bb6a	shlq	$0xd, %rcx
000000000101bb6e	subq	%rcx, %rbx
000000000101bb71	movq	%rbx, 0xb9d58(%rip)
000000000101bb78	movq	$0x0, 0x78(%rax)
000000000101bb80	movq	%rax, 0x20(%rsp)
000000000101bb85	movq	0x20(%rax), %rcx
000000000101bb89	cmpq	%rdx, %rcx
000000000101bb8c	ja	0x101bbfe
000000000101bb8e	movq	$0x0, 0x70(%rax)
000000000101bb96	movq	0x18(%rax), %rcx
000000000101bb9a	movq	0x40(%rsp), %rbx
000000000101bb9f	movq	%rbx, (%rsp)
000000000101bba3	movq	%rcx, 0x8(%rsp)
000000000101bba8	movq	%rdx, 0x10(%rsp)
000000000101bbad	movq	%rax, 0x18(%rsp)
000000000101bbb2	callq	"runtime.(*mheap).setSpans"
000000000101bbb7	movq	0x50(%rsp), %rax
000000000101bbbc	movq	(%rax), %rcx
000000000101bbbf	movq	0x48(%rsp), %rdx
000000000101bbc4	shlq	$0xd, %rdx
000000000101bbc8	addq	%rdx, %rcx
000000000101bbcb	movq	%rcx, (%rax)
000000000101bbce	movq	0xb9ceb(%rip), %rax
000000000101bbd5	subq	%rdx, %rax
000000000101bbd8	movq	%rax, 0xb9ce1(%rip)
000000000101bbdf	movq	0x20(%rsp), %rax
000000000101bbe4	cmpq	$0x0, 0x10(%rax)
000000000101bbe9	jne	0x101be1f
000000000101bbef	movq	%rax, 0x58(%rsp)
000000000101bbf4	movq	0x30(%rsp), %rbp
000000000101bbf9	addq	$0x38, %rsp
000000000101bbfd	retq
000000000101bbfe	movq	0x40(%rsp), %rax
000000000101bc03	testb	%al, (%rax)
000000000101bc05	leaq	0x34b8(%rax), %rcx
000000000101bc0c	movq	%rcx, (%rsp)
000000000101bc10	callq	"runtime.(*fixalloc).alloc"
000000000101bc15	movq	0x8(%rsp), %rax
000000000101bc1a	movq	0x48(%rsp), %rcx
000000000101bc1f	movq	%rcx, %rdx
000000000101bc22	shlq	$0xd, %rcx
000000000101bc26	movq	0x20(%rsp), %rbx
000000000101bc2b	addq	0x18(%rbx), %rcx
000000000101bc2f	movq	0x20(%rbx), %rsi
000000000101bc33	xorps	%xmm0, %xmm0
000000000101bc36	movups	%xmm0, (%rax)
000000000101bc39	movq	$0x0, 0x10(%rax)
000000000101bc41	movq	%rcx, 0x18(%rax)
000000000101bc45	subq	%rdx, %rsi
000000000101bc48	movq	%rsi, 0x20(%rax)
000000000101bc4c	movl	$0x0, 0x60(%rax)
000000000101bc53	movq	$0x0, 0x68(%rax)
000000000101bc5b	movb	$0x0, 0x64(%rax)
000000000101bc5f	movups	%xmm0, 0x70(%rax)
000000000101bc63	movups	%xmm0, 0x88(%rax)
000000000101bc6a	movb	$0x0, 0x65(%rax)
000000000101bc6e	movq	$0x0, 0x30(%rax)
000000000101bc76	movups	%xmm0, 0x48(%rax)
000000000101bc7a	movq	%rdx, 0x20(%rbx)
000000000101bc7e	movq	0x40(%rsp), %rcx
000000000101bc83	movq	0x12f8(%rcx), %rsi
000000000101bc8a	testb	%al, (%rsi)
000000000101bc8c	movq	0x18(%rax), %rdi
000000000101bc90	movabsq	$0x7fffffffffff, %r8
000000000101bc9a	leaq	(%r8,%rdi), %r9
000000000101bc9e	shrq	$0x1a, %r9
000000000101bca2	cmpq	$0x400000, %r9
000000000101bca9	jae	0x101be48
000000000101bcaf	movq	(%rsi,%r9,8), %rsi
000000000101bcb3	testb	%al, (%rsi)
000000000101bcb5	decq	%rdi
000000000101bcb8	shrq	$0xd, %rdi
000000000101bcbc	andq	$0x1fff, %rdi
000000000101bcc3	movq	%rbx, 0x200000(%rsi,%rdi,8)
000000000101bccb	movq	0x12f8(%rcx), %rsi
000000000101bcd2	testb	%al, (%rsi)
000000000101bcd4	movq	0x18(%rax), %rdi
000000000101bcd8	movabsq	$0x800000000000, %r9
000000000101bce2	addq	%rdi, %r9
000000000101bce5	shrq	$0x1a, %r9
000000000101bce9	cmpq	$0x400000, %r9
000000000101bcf0	jae	0x101be41
000000000101bcf6	movq	(%rsi,%r9,8), %rsi
000000000101bcfa	testb	%al, (%rsi)
000000000101bcfc	shrq	$0xd, %rdi
000000000101bd00	andq	$0x1fff, %rdi
000000000101bd07	movq	%rax, 0x200000(%rsi,%rdi,8)
000000000101bd0f	movq	0x12f8(%rcx), %rsi
000000000101bd16	testb	%al, (%rsi)
000000000101bd18	movq	0x20(%rax), %rdi
000000000101bd1c	shlq	$0xd, %rdi
000000000101bd20	addq	0x18(%rax), %rdi
000000000101bd24	addq	%rdi, %r8
000000000101bd27	shrq	$0x1a, %r8
000000000101bd2b	cmpq	$0x400000, %r8
000000000101bd32	jae	0x101be3a
000000000101bd38	movq	(%rsi,%r8,8), %rdx
000000000101bd3c	testb	%al, (%rdx)
000000000101bd3e	leaq	-0x1(%rdi), %rsi
000000000101bd42	shrq	$0xd, %rsi
000000000101bd46	andq	$0x1fff, %rsi
000000000101bd4d	movq	%rax, 0x200000(%rdx,%rsi,8)
000000000101bd55	movzbl	0x65(%rbx), %edx
000000000101bd59	movb	%dl, 0x65(%rax)
000000000101bd5c	movb	$0x2, 0x64(%rbx)
000000000101bd60	movb	$0x2, 0x64(%rax)
000000000101bd64	movq	0x70(%rbx), %rdx
000000000101bd68	movq	%rdx, 0x18(%rsp)
000000000101bd6d	movq	%rcx, (%rsp)
000000000101bd71	movq	%rax, 0x8(%rsp)
000000000101bd76	movw	$0x0, 0x10(%rsp)
000000000101bd7d	callq	"runtime.(*mheap).freeSpanLocked"
000000000101bd82	movq	0x20(%rsp), %rax
000000000101bd87	movb	$0x3, 0x64(%rax)
000000000101bd8b	movq	0x48(%rsp), %rdx
000000000101bd90	jmp	0x101bb8e
000000000101bd95	movq	%rax, (%rsp)
000000000101bd99	movq	%rdx, 0x8(%rsp)
000000000101bd9e	callq	"runtime.(*mheap).allocLarge"
000000000101bda3	movq	0x10(%rsp), %rax
000000000101bda8	testq	%rax, %rax
000000000101bdab	jne	0x101bb3e
000000000101bdb1	movq	0x40(%rsp), %rax
000000000101bdb6	movq	%rax, (%rsp)
000000000101bdba	movq	0x48(%rsp), %rcx
000000000101bdbf	movq	%rcx, 0x8(%rsp)
000000000101bdc4	callq	"runtime.(*mheap).grow"
000000000101bdc9	leaq	0x10(%rsp), %rax
000000000101bdce	cmpb	$0x0, (%rax)
000000000101bdd1	jne	0x101bde6
000000000101bdd3	movq	$0x0, 0x58(%rsp)
000000000101bddc	movq	0x30(%rsp), %rbp
000000000101bde1	addq	$0x38, %rsp
000000000101bde5	retq
000000000101bde6	movq	0x40(%rsp), %rax
000000000101bdeb	movq	%rax, (%rsp)
000000000101bdef	movq	0x48(%rsp), %rcx
000000000101bdf4	movq	%rcx, 0x8(%rsp)
000000000101bdf9	callq	"runtime.(*mheap).allocLarge"
000000000101bdfe	movq	0x10(%rsp), %rax
000000000101be03	testq	%rax, %rax
000000000101be06	jne	0x101bb3e
000000000101be0c	movq	$0x0, 0x58(%rsp)
000000000101be15	movq	0x30(%rsp), %rbp
000000000101be1a	addq	$0x38, %rsp
000000000101be1e	retq
000000000101be1f	leaq	0x4f686(%rip), %rax
000000000101be26	movq	%rax, (%rsp)
000000000101be2a	movq	$0xd, 0x8(%rsp)
000000000101be33	callq	runtime.throw
000000000101be38	ud2
000000000101be3a	callq	runtime.panicindex
000000000101be3f	ud2
000000000101be41	callq	runtime.panicindex
000000000101be46	ud2
000000000101be48	callq	runtime.panicindex
000000000101be4d	ud2
000000000101be4f	leaq	0x5132a(%rip), %rax
000000000101be56	movq	%rax, (%rsp)
000000000101be5a	movq	$0x1e, 0x8(%rsp)
000000000101be63	callq	runtime.throw
000000000101be68	ud2
000000000101be6a	leaq	0x51b52(%rip), %rax
000000000101be71	movq	%rax, (%rsp)
000000000101be75	movq	$0x22, 0x8(%rsp)
000000000101be7e	callq	runtime.throw
000000000101be83	ud2
000000000101be85	callq	runtime.panicindex
000000000101be8a	ud2
000000000101be8c	callq	runtime.morestack_noctxt
000000000101be91	jmp	"runtime.(*mheap).allocSpanLocked"
000000000101be96	int3
000000000101be97	int3
000000000101be98	int3
000000000101be99	int3
000000000101be9a	int3
000000000101be9b	int3
000000000101be9c	int3
000000000101be9d	int3
000000000101be9e	int3
000000000101be9f	int3
runtime.(*mheap).allocLarge:
000000000101bea0	movq	%gs:0x30, %rcx
000000000101bea9	cmpq	0x10(%rcx), %rsp
000000000101bead	jbe	0x101bef1
000000000101beaf	subq	$0x20, %rsp
000000000101beb3	movq	%rbp, 0x18(%rsp)
000000000101beb8	leaq	0x18(%rsp), %rbp
000000000101bebd	movq	0x28(%rsp), %rax
000000000101bec2	testb	%al, (%rax)
000000000101bec4	addq	$0x808, %rax
000000000101beca	movq	%rax, (%rsp)
000000000101bece	movq	0x30(%rsp), %rax
000000000101bed3	movq	%rax, 0x8(%rsp)
000000000101bed8	callq	"runtime.(*mTreap).remove"
000000000101bedd	movq	0x10(%rsp), %rax
000000000101bee2	movq	%rax, 0x38(%rsp)
000000000101bee7	movq	0x18(%rsp), %rbp
000000000101beec	addq	$0x20, %rsp
000000000101bef0	retq
000000000101bef1	callq	runtime.morestack_noctxt
000000000101bef6	jmp	"runtime.(*mheap).allocLarge"
000000000101bef8	int3
000000000101bef9	int3
000000000101befa	int3
000000000101befb	int3
000000000101befc	int3
000000000101befd	int3
000000000101befe	int3
000000000101beff	int3
runtime.(*mheap).grow:
000000000101bf00	movq	%gs:0x30, %rcx
000000000101bf09	cmpq	0x10(%rcx), %rsp
000000000101bf0d	jbe	0x101c0d9
000000000101bf13	subq	$0x50, %rsp
000000000101bf17	movq	%rbp, 0x48(%rsp)
000000000101bf1c	leaq	0x48(%rsp), %rbp
000000000101bf21	movq	0x58(%rsp), %rax
000000000101bf26	movq	%rax, (%rsp)
000000000101bf2a	movq	0x60(%rsp), %rcx
000000000101bf2f	shlq	$0xd, %rcx
000000000101bf33	movq	%rcx, 0x30(%rsp)
000000000101bf38	movq	%rcx, 0x8(%rsp)
000000000101bf3d	callq	"runtime.(*mheap).sysAlloc"
000000000101bf42	movq	0x10(%rsp), %rax
000000000101bf47	movq	0x18(%rsp), %rcx
000000000101bf4c	testq	%rax, %rax
000000000101bf4f	je	0x101c04d
000000000101bf55	movq	%rax, 0x38(%rsp)
000000000101bf5a	movq	%rcx, 0x20(%rsp)
000000000101bf5f	movq	0x58(%rsp), %rax
000000000101bf64	testb	%al, (%rax)
000000000101bf66	leaq	0x34b8(%rax), %rcx
000000000101bf6d	movq	%rcx, (%rsp)
000000000101bf71	callq	"runtime.(*fixalloc).alloc"
000000000101bf76	movq	0x8(%rsp), %rax
000000000101bf7b	movq	%rax, 0x40(%rsp)
000000000101bf80	movq	0x38(%rsp), %rcx
000000000101bf85	xorps	%xmm0, %xmm0
000000000101bf88	movups	%xmm0, (%rax)
000000000101bf8b	movq	$0x0, 0x10(%rax)
000000000101bf93	movq	%rcx, 0x18(%rax)
000000000101bf97	movq	0x20(%rsp), %rcx
000000000101bf9c	shrq	$0xd, %rcx
000000000101bfa0	movq	%rcx, 0x20(%rax)
000000000101bfa4	movl	$0x0, 0x60(%rax)
000000000101bfab	movq	$0x0, 0x68(%rax)
000000000101bfb3	movb	$0x0, 0x64(%rax)
000000000101bfb7	movups	%xmm0, 0x70(%rax)
000000000101bfbb	movups	%xmm0, 0x88(%rax)
000000000101bfc2	movb	$0x0, 0x65(%rax)
000000000101bfc6	movq	$0x0, 0x30(%rax)
000000000101bfce	movups	%xmm0, 0x48(%rax)
000000000101bfd2	movq	0x20(%rax), %rcx
000000000101bfd6	movq	0x18(%rax), %rdx
000000000101bfda	movq	%rcx, 0x10(%rsp)
000000000101bfdf	movq	0x58(%rsp), %rcx
000000000101bfe4	movq	%rcx, (%rsp)
000000000101bfe8	movq	%rdx, 0x8(%rsp)
000000000101bfed	movq	%rax, 0x18(%rsp)
000000000101bff2	callq	"runtime.(*mheap).setSpans"
000000000101bff7	movq	0x58(%rsp), %rax
000000000101bffc	movl	0x1020(%rax), %ecx
000000000101c002	movq	0x40(%rsp), %rdx
000000000101c007	xchgl	%ecx, 0x58(%rdx)
000000000101c00a	movb	$0x1, 0x64(%rdx)
000000000101c00e	movq	0x1098(%rax), %rcx
000000000101c015	addq	0x20(%rdx), %rcx
000000000101c019	movq	%rcx, 0x1098(%rax)
000000000101c020	movq	%rax, (%rsp)
000000000101c024	movq	%rdx, 0x8(%rsp)
000000000101c029	movw	$0x100, 0x10(%rsp)
000000000101c030	movq	$0x0, 0x18(%rsp)
000000000101c039	callq	"runtime.(*mheap).freeSpanLocked"
000000000101c03e	movb	$0x1, 0x68(%rsp)
000000000101c043	movq	0x48(%rsp), %rbp
000000000101c048	addq	$0x50, %rsp
000000000101c04c	retq
000000000101c04d	movq	0xb9864(%rip), %rax
000000000101c054	movq	%rax, 0x28(%rsp)
000000000101c059	callq	runtime.printlock
000000000101c05e	leaq	0x52087(%rip), %rax
000000000101c065	movq	%rax, (%rsp)
000000000101c069	movq	$0x28, 0x8(%rsp)
000000000101c072	callq	runtime.printstring
000000000101c077	movq	0x30(%rsp), %rax
000000000101c07c	movq	%rax, (%rsp)
000000000101c080	callq	runtime.printuint
000000000101c085	leaq	0x4f39e(%rip), %rax
000000000101c08c	movq	%rax, (%rsp)
000000000101c090	movq	$0xd, 0x8(%rsp)
000000000101c099	callq	runtime.printstring
000000000101c09e	movq	0x28(%rsp), %rax
000000000101c0a3	movq	%rax, (%rsp)
000000000101c0a7	callq	runtime.printuint
000000000101c0ac	leaq	0x4ee0a(%rip), %rax
000000000101c0b3	movq	%rax, (%rsp)
000000000101c0b7	movq	$0x9, 0x8(%rsp)
000000000101c0c0	callq	runtime.printstring
000000000101c0c5	callq	runtime.printunlock
000000000101c0ca	movb	$0x0, 0x68(%rsp)
000000000101c0cf	movq	0x48(%rsp), %rbp
000000000101c0d4	addq	$0x50, %rsp
000000000101c0d8	retq
000000000101c0d9	callq	runtime.morestack_noctxt
000000000101c0de	jmp	"runtime.(*mheap).grow"
000000000101c0e3	int3
000000000101c0e4	int3
000000000101c0e5	int3
000000000101c0e6	int3
000000000101c0e7	int3
000000000101c0e8	int3
000000000101c0e9	int3
000000000101c0ea	int3
000000000101c0eb	int3
000000000101c0ec	int3
000000000101c0ed	int3
000000000101c0ee	int3
000000000101c0ef	int3
runtime.(*mheap).freeSpan:
000000000101c0f0	movq	%gs:0x30, %rcx
000000000101c0f9	cmpq	0x10(%rcx), %rsp
000000000101c0fd	jbe	0x101c166
000000000101c0ff	subq	$0x30, %rsp
000000000101c103	movq	%rbp, 0x28(%rsp)
000000000101c108	leaq	0x28(%rsp), %rbp
000000000101c10d	xorps	%xmm0, %xmm0
000000000101c110	movups	%xmm0, 0x8(%rsp)
000000000101c115	movq	$0x0, 0x18(%rsp)
000000000101c11e	movl	$0x0, 0x20(%rsp)
000000000101c126	leaq	"runtime.(*mheap).freeSpan.func1"(%rip), %rax
000000000101c12d	movq	%rax, 0x8(%rsp)
000000000101c132	movq	0x38(%rsp), %rax
000000000101c137	movq	%rax, 0x10(%rsp)
000000000101c13c	movq	0x40(%rsp), %rax
000000000101c141	movq	%rax, 0x18(%rsp)
000000000101c146	movl	0x48(%rsp), %eax
000000000101c14a	movl	%eax, 0x20(%rsp)
000000000101c14e	leaq	0x8(%rsp), %rax
000000000101c153	movq	%rax, (%rsp)
000000000101c157	callq	runtime.systemstack
000000000101c15c	movq	0x28(%rsp), %rbp
000000000101c161	addq	$0x30, %rsp
000000000101c165	retq
000000000101c166	callq	runtime.morestack_noctxt
000000000101c16b	jmp	"runtime.(*mheap).freeSpan"
000000000101c16d	int3
000000000101c16e	int3
000000000101c16f	int3
runtime.(*mheap).freeManual:
000000000101c170	movq	%gs:0x30, %rcx
000000000101c179	cmpq	0x18(%rcx), %rsp
000000000101c17d	jbe	0x101c216
000000000101c183	subq	$0x28, %rsp
000000000101c187	movq	%rbp, 0x20(%rsp)
000000000101c18c	leaq	0x20(%rsp), %rbp
000000000101c191	movq	0x38(%rsp), %rax
000000000101c196	movb	$0x1, 0x65(%rax)
000000000101c19a	movq	0x30(%rsp), %rcx
000000000101c19f	testb	%al, (%rcx)
000000000101c1a1	movq	%rcx, (%rsp)
000000000101c1a5	callq	runtime.lock
000000000101c1aa	movq	0x40(%rsp), %rax
000000000101c1af	movq	(%rax), %rcx
000000000101c1b2	movq	0x38(%rsp), %rdx
000000000101c1b7	movq	0x20(%rdx), %rbx
000000000101c1bb	shlq	$0xd, %rbx
000000000101c1bf	subq	%rbx, %rcx
000000000101c1c2	movq	%rcx, (%rax)
000000000101c1c5	movq	0x20(%rdx), %rax
000000000101c1c9	shlq	$0xd, %rax
000000000101c1cd	addq	0xb96e4(%rip), %rax
000000000101c1d4	movq	%rax, 0xb96dd(%rip)
000000000101c1db	movq	0x30(%rsp), %rax
000000000101c1e0	movq	%rax, (%rsp)
000000000101c1e4	movq	%rdx, 0x8(%rsp)
000000000101c1e9	movw	$0x100, 0x10(%rsp)
000000000101c1f0	movq	$0x0, 0x18(%rsp)
000000000101c1f9	callq	"runtime.(*mheap).freeSpanLocked"
000000000101c1fe	movq	0x30(%rsp), %rax
000000000101c203	movq	%rax, (%rsp)
000000000101c207	callq	runtime.unlock
000000000101c20c	movq	0x20(%rsp), %rbp
000000000101c211	addq	$0x28, %rsp
000000000101c215	retq
000000000101c216	callq	runtime.morestackc
000000000101c21b	jmp	"runtime.(*mheap).freeManual"
runtime.(*mheap).freeSpanLocked:
000000000101c220	movq	%gs:0x30, %rcx
000000000101c229	cmpq	0x10(%rcx), %rsp
000000000101c22d	jbe	0x101c7f0
000000000101c233	subq	$0x40, %rsp
000000000101c237	movq	%rbp, 0x38(%rsp)
000000000101c23c	leaq	0x38(%rsp), %rbp
000000000101c241	movq	0x50(%rsp), %rax
000000000101c246	movzbl	0x64(%rax), %ecx
000000000101c24a	cmpb	$0x1, %cl
000000000101c24d	jne	0x101c67b
000000000101c253	movzwl	0x60(%rax), %ecx
000000000101c257	movw	%cx, 0x16(%rsp)
000000000101c25c	testw	%cx, %cx
000000000101c25f	jne	0x101c6a7
000000000101c265	movq	0x48(%rsp), %rdx
000000000101c26a	testb	%al, (%rdx)
000000000101c26c	movl	0x1020(%rdx), %ebx
000000000101c272	cmpl	%ebx, 0x58(%rax)
000000000101c275	jne	0x101c6a7
000000000101c27b	movq	0x1098(%rdx), %rcx
000000000101c282	subq	0x20(%rax), %rcx
000000000101c286	movq	%rcx, 0x1098(%rdx)
000000000101c28d	movzbl	0x58(%rsp), %ecx
000000000101c292	testb	%cl, %cl
000000000101c294	je	0x101c2af
000000000101c296	movq	0xb962b(%rip), %rcx
000000000101c29d	movq	0x20(%rax), %rbx
000000000101c2a1	shlq	$0xd, %rbx
000000000101c2a5	subq	%rbx, %rcx
000000000101c2a8	movq	%rcx, 0xb9619(%rip)
000000000101c2af	movzbl	0x59(%rsp), %ecx
000000000101c2b4	testb	%cl, %cl
000000000101c2b6	je	0x101c2ce
000000000101c2b8	movq	0x20(%rax), %rcx
000000000101c2bc	shlq	$0xd, %rcx
000000000101c2c0	addq	0xb95f9(%rip), %rcx
000000000101c2c7	movq	%rcx, 0xb95f2(%rip)
000000000101c2ce	movb	$0x3, 0x64(%rax)
000000000101c2d2	cmpq	$0x0, 0x10(%rax)
000000000101c2d7	je	0x101c306
000000000101c2d9	movq	0x20(%rax), %rcx
000000000101c2dd	cmpq	$0x80, %rcx
000000000101c2e4	jae	0x101c66d
000000000101c2ea	testb	%al, (%rdx)
000000000101c2ec	shlq	$0x4, %rcx
000000000101c2f0	leaq	0x810(%rdx,%rcx), %rcx
000000000101c2f8	movq	%rcx, (%rsp)
000000000101c2fc	movq	%rax, 0x8(%rsp)
000000000101c301	callq	"runtime.(*mSpanList).remove"
000000000101c306	movq	0x60(%rsp), %rax
000000000101c30b	movq	0x50(%rsp), %rcx
000000000101c310	movq	%rax, 0x70(%rcx)
000000000101c314	testq	%rax, %rax
000000000101c317	je	0x101c656
000000000101c31d	movq	$0x0, 0x78(%rcx)
000000000101c325	movq	0x18(%rcx), %rax
000000000101c329	movabsq	$0x7fffffffffff, %rdx
000000000101c333	leaq	(%rdx,%rax), %rbx
000000000101c337	shrq	$0x1a, %rbx
000000000101c33b	cmpq	$0x400000, %rbx
000000000101c342	jb	0x101c621
000000000101c348	xorl	%eax, %eax
000000000101c34a	testq	%rax, %rax
000000000101c34d	je	0x101c617
000000000101c353	cmpb	$0x3, 0x64(%rax)
000000000101c357	jne	0x101c617
000000000101c35d	movq	0x18(%rax), %rbx
000000000101c361	movq	%rbx, 0x18(%rcx)
000000000101c365	movq	0x20(%rcx), %rbx
000000000101c369	addq	0x20(%rax), %rbx
000000000101c36d	movq	%rbx, 0x20(%rcx)
000000000101c371	movq	0x78(%rax), %rbx
000000000101c375	movq	%rbx, 0x78(%rcx)
000000000101c379	movzbl	0x65(%rcx), %ebx
000000000101c37d	movzbl	0x65(%rax), %esi
000000000101c381	orl	%ebx, %esi
000000000101c383	movb	%sil, 0x65(%rcx)
000000000101c387	movq	0x48(%rsp), %rbx
000000000101c38c	testb	%al, (%rbx)
000000000101c38e	movq	0x12f8(%rbx), %rsi
000000000101c395	testb	%al, (%rsi)
000000000101c397	movq	0x18(%rax), %rdi
000000000101c39b	movabsq	$0x800000000000, %r8
000000000101c3a5	leaq	(%r8,%rdi), %r9
000000000101c3a9	shrq	$0x1a, %r9
000000000101c3ad	cmpq	$0x400000, %r9
000000000101c3b4	jae	0x101c6a0
000000000101c3ba	movq	%rax, 0x30(%rsp)
000000000101c3bf	movq	(%rsi,%r9,8), %rsi
000000000101c3c3	testb	%al, (%rsi)
000000000101c3c5	shrq	$0xd, %rdi
000000000101c3c9	andq	$0x1fff, %rdi
000000000101c3d0	movq	%rcx, 0x200000(%rsi,%rdi,8)
000000000101c3d8	movq	0x20(%rax), %rsi
000000000101c3dc	cmpq	$0x80, %rsi
000000000101c3e3	jb	0x101c5fb
000000000101c3e9	leaq	0x808(%rbx), %rcx
000000000101c3f0	movq	%rcx, (%rsp)
000000000101c3f4	movq	%rax, 0x8(%rsp)
000000000101c3f9	callq	"runtime.(*mTreap).removeSpan"
000000000101c3fe	movq	0x30(%rsp), %rax
000000000101c403	movb	$0x0, 0x64(%rax)
000000000101c407	movq	0x48(%rsp), %rcx
000000000101c40c	leaq	0x34b8(%rcx), %rdx
000000000101c413	testb	%al, (%rdx)
000000000101c415	movq	0x34e8(%rcx), %rdx
000000000101c41c	subq	0x34b8(%rcx), %rdx
000000000101c423	movq	%rdx, 0x34e8(%rcx)
000000000101c42a	movq	0x34d0(%rcx), %rdx
000000000101c431	movq	%rdx, (%rax)
000000000101c434	movq	%rax, 0x34d0(%rcx)
000000000101c43b	movq	0x50(%rsp), %rax
000000000101c440	movq	0x20(%rax), %rdx
000000000101c444	movq	%rdx, %rbx
000000000101c447	shlq	$0xd, %rdx
000000000101c44b	addq	0x18(%rax), %rdx
000000000101c44f	movabsq	$0x800000000000, %rsi
000000000101c459	addq	%rdx, %rsi
000000000101c45c	shrq	$0x1a, %rsi
000000000101c460	cmpq	$0x400000, %rsi
000000000101c467	jb	0x101c5ca
000000000101c46d	xorl	%edx, %edx
000000000101c46f	testq	%rdx, %rdx
000000000101c472	je	0x101c560
000000000101c478	cmpb	$0x3, 0x64(%rdx)
000000000101c47c	jne	0x101c560
000000000101c482	movq	0x20(%rdx), %rsi
000000000101c486	addq	%rsi, %rbx
000000000101c489	movq	%rbx, 0x20(%rax)
000000000101c48d	movq	0x78(%rax), %rbx
000000000101c491	addq	0x78(%rdx), %rbx
000000000101c495	movq	%rbx, 0x78(%rax)
000000000101c499	movzbl	0x65(%rax), %ebx
000000000101c49d	movzbl	0x65(%rdx), %esi
000000000101c4a1	orl	%ebx, %esi
000000000101c4a3	movb	%sil, 0x65(%rax)
000000000101c4a7	testb	%al, (%rcx)
000000000101c4a9	movq	0x12f8(%rcx), %rbx
000000000101c4b0	testb	%al, (%rbx)
000000000101c4b2	movq	0x20(%rax), %rsi
000000000101c4b6	shlq	$0xd, %rsi
000000000101c4ba	addq	0x18(%rax), %rsi
000000000101c4be	movabsq	$0x7fffffffffff, %rdi
000000000101c4c8	addq	%rsi, %rdi
000000000101c4cb	shrq	$0x1a, %rdi
000000000101c4cf	cmpq	$0x400000, %rdi
000000000101c4d6	jae	0x101c699
000000000101c4dc	movq	%rdx, 0x30(%rsp)
000000000101c4e1	movq	(%rbx,%rdi,8), %rbx
000000000101c4e5	testb	%al, (%rbx)
000000000101c4e7	decq	%rsi
000000000101c4ea	shrq	$0xd, %rsi
000000000101c4ee	andq	$0x1fff, %rsi
000000000101c4f5	movq	%rax, 0x200000(%rbx,%rsi,8)
000000000101c4fd	movq	0x20(%rdx), %rbx
000000000101c501	cmpq	$0x80, %rbx
000000000101c508	jb	0x101c5ae
000000000101c50e	leaq	0x808(%rcx), %rax
000000000101c515	movq	%rax, (%rsp)
000000000101c519	movq	%rdx, 0x8(%rsp)
000000000101c51e	callq	"runtime.(*mTreap).removeSpan"
000000000101c523	movq	0x30(%rsp), %rax
000000000101c528	movb	$0x0, 0x64(%rax)
000000000101c52c	movq	0x48(%rsp), %rcx
000000000101c531	leaq	0x34b8(%rcx), %rdx
000000000101c538	testb	%al, (%rdx)
000000000101c53a	movq	0x34e8(%rcx), %rdx
000000000101c541	subq	0x34b8(%rcx), %rdx
000000000101c548	movq	%rdx, 0x34e8(%rcx)
000000000101c54f	movq	0x34d0(%rcx), %rdx
000000000101c556	movq	%rdx, (%rax)
000000000101c559	movq	%rax, 0x34d0(%rcx)
000000000101c560	movq	0x50(%rsp), %rax
000000000101c565	movq	0x20(%rax), %rdx
000000000101c569	cmpq	$0x80, %rdx
000000000101c570	jb	0x101c593
000000000101c572	testb	%al, (%rcx)
000000000101c574	addq	$0x808, %rcx
000000000101c57b	movq	%rcx, (%rsp)
000000000101c57f	movq	%rax, 0x8(%rsp)
000000000101c584	callq	"runtime.(*mTreap).insert"
000000000101c589	movq	0x38(%rsp), %rbp
000000000101c58e	addq	$0x40, %rsp
000000000101c592	retq
000000000101c593	testb	%al, (%rcx)
000000000101c595	shlq	$0x4, %rdx
000000000101c599	leaq	0x8(%rdx,%rcx), %rcx
000000000101c59e	movq	%rcx, (%rsp)
000000000101c5a2	movq	%rax, 0x8(%rsp)
000000000101c5a7	callq	"runtime.(*mSpanList).insert"
000000000101c5ac	jmp	0x101c589
000000000101c5ae	shlq	$0x4, %rbx
000000000101c5b2	leaq	0x8(%rbx,%rcx), %rax
000000000101c5b7	movq	%rax, (%rsp)
000000000101c5bb	movq	%rdx, 0x8(%rsp)
000000000101c5c0	callq	"runtime.(*mSpanList).remove"
000000000101c5c5	jmp	0x101c523
000000000101c5ca	movq	0xa21c7(%rip), %rdi
000000000101c5d1	testb	%al, (%rdi)
000000000101c5d3	movq	(%rdi,%rsi,8), %rsi
000000000101c5d7	testq	%rsi, %rsi
000000000101c5da	je	0x101c5f4
000000000101c5dc	shrq	$0xd, %rdx
000000000101c5e0	andq	$0x1fff, %rdx
000000000101c5e7	movq	0x200000(%rsi,%rdx,8), %rdx
000000000101c5ef	jmp	0x101c46f
000000000101c5f4	xorl	%edx, %edx
000000000101c5f6	jmp	0x101c46f
000000000101c5fb	shlq	$0x4, %rsi
000000000101c5ff	leaq	0x8(%rsi,%rbx), %rcx
000000000101c604	movq	%rcx, (%rsp)
000000000101c608	movq	%rax, 0x8(%rsp)
000000000101c60d	callq	"runtime.(*mSpanList).remove"
000000000101c612	jmp	0x101c3fe
000000000101c617	movq	0x48(%rsp), %rcx
000000000101c61c	jmp	0x101c43b
000000000101c621	movq	0xa2170(%rip), %rsi
000000000101c628	testb	%al, (%rsi)
000000000101c62a	movq	(%rsi,%rbx,8), %rbx
000000000101c62e	testq	%rbx, %rbx
000000000101c631	je	0x101c64f
000000000101c633	leaq	-0x1(%rax), %rsi
000000000101c637	shrq	$0xd, %rsi
000000000101c63b	andq	$0x1fff, %rsi
000000000101c642	movq	0x200000(%rbx,%rsi,8), %rax
000000000101c64a	jmp	0x101c34a
000000000101c64f	xorl	%eax, %eax
000000000101c651	jmp	0x101c34a
000000000101c656	callq	runtime.nanotime
000000000101c65b	movq	(%rsp), %rax
000000000101c65f	movq	0x50(%rsp), %rcx
000000000101c664	movq	%rax, 0x70(%rcx)
000000000101c668	jmp	0x101c31d
000000000101c66d	testb	%al, (%rdx)
000000000101c66f	leaq	0x1010(%rdx), %rcx
000000000101c676	jmp	0x101c2f8
000000000101c67b	cmpb	$0x2, %cl
000000000101c67e	jne	0x101c7d5
000000000101c684	cmpw	$0x0, 0x60(%rax)
000000000101c689	jne	0x101c7ba
000000000101c68f	movq	0x48(%rsp), %rdx
000000000101c694	jmp	0x101c28d
000000000101c699	callq	runtime.panicindex
000000000101c69e	ud2
000000000101c6a0	callq	runtime.panicindex
000000000101c6a5	ud2
000000000101c6a7	movq	0x48(%rsp), %rcx
000000000101c6ac	testb	%al, (%rcx)
000000000101c6ae	movl	0x58(%rax), %edx
000000000101c6b1	movq	%rdx, 0x28(%rsp)
000000000101c6b6	movl	0x1020(%rcx), %ecx
000000000101c6bc	movq	%rcx, 0x20(%rsp)
000000000101c6c1	movq	0x18(%rax), %rbx
000000000101c6c5	movq	%rbx, 0x18(%rsp)
000000000101c6ca	callq	runtime.printlock
000000000101c6cf	leaq	0x505fd(%rip), %rax
000000000101c6d6	movq	%rax, (%rsp)
000000000101c6da	movq	$0x1c, 0x8(%rsp)
000000000101c6e3	callq	runtime.printstring
000000000101c6e8	movq	0x50(%rsp), %rax
000000000101c6ed	movq	%rax, (%rsp)
000000000101c6f1	callq	runtime.printpointer
000000000101c6f6	leaq	0x4e4c6(%rip), %rax
000000000101c6fd	movq	%rax, (%rsp)
000000000101c701	movq	$0x5, 0x8(%rsp)
000000000101c70a	callq	runtime.printstring
000000000101c70f	movq	0x18(%rsp), %rax
000000000101c714	movq	%rax, (%rsp)
000000000101c718	callq	runtime.printhex
000000000101c71d	leaq	0x4eae8(%rip), %rax
000000000101c724	movq	%rax, (%rsp)
000000000101c728	movq	$0xc, 0x8(%rsp)
000000000101c731	callq	runtime.printstring
000000000101c736	movzwl	0x16(%rsp), %eax
000000000101c73b	movzwl	%ax, %eax
000000000101c73e	movq	%rax, (%rsp)
000000000101c742	callq	runtime.printuint
000000000101c747	leaq	0x4e8aa(%rip), %rax
000000000101c74e	movq	%rax, (%rsp)
000000000101c752	movq	$0xa, 0x8(%rsp)
000000000101c75b	callq	runtime.printstring
000000000101c760	movq	0x28(%rsp), %rax
000000000101c765	movq	%rax, (%rsp)
000000000101c769	callq	runtime.printuint
000000000101c76e	leaq	0x4e312(%rip), %rax
000000000101c775	movq	%rax, (%rsp)
000000000101c779	movq	$0x1, 0x8(%rsp)
000000000101c782	callq	runtime.printstring
000000000101c787	movq	0x20(%rsp), %rax
000000000101c78c	movq	%rax, (%rsp)
000000000101c790	callq	runtime.printuint
000000000101c795	callq	runtime.printnl
000000000101c79a	callq	runtime.printunlock
000000000101c79f	leaq	0x5132d(%rip), %rax
000000000101c7a6	movq	%rax, (%rsp)
000000000101c7aa	movq	$0x23, 0x8(%rsp)
000000000101c7b3	callq	runtime.throw
000000000101c7b8	ud2
000000000101c7ba	leaq	0x519cd(%rip), %rax
000000000101c7c1	movq	%rax, (%rsp)
000000000101c7c5	movq	$0x29, 0x8(%rsp)
000000000101c7ce	callq	runtime.throw
000000000101c7d3	ud2
000000000101c7d5	leaq	0x51989(%rip), %rax
000000000101c7dc	movq	%rax, (%rsp)
000000000101c7e0	movq	$0x29, 0x8(%rsp)
000000000101c7e9	callq	runtime.throw
000000000101c7ee	ud2
000000000101c7f0	callq	runtime.morestack_noctxt
000000000101c7f5	jmp	"runtime.(*mheap).freeSpanLocked"
000000000101c7fa	int3
000000000101c7fb	int3
000000000101c7fc	int3
000000000101c7fd	int3
000000000101c7fe	int3
000000000101c7ff	int3
runtime.scavengeTreapNode:
000000000101c800	movq	%gs:0x30, %rcx
000000000101c809	cmpq	0x10(%rcx), %rsp
000000000101c80d	jbe	0x101c91c
000000000101c813	subq	$0x20, %rsp
000000000101c817	movq	%rbp, 0x18(%rsp)
000000000101c81c	leaq	0x18(%rsp), %rbp
000000000101c821	movq	0x28(%rsp), %rax
000000000101c826	movq	0x20(%rax), %rax
000000000101c82a	movq	0x30(%rsp), %rcx
000000000101c82f	subq	0x70(%rax), %rcx
000000000101c833	movq	0x38(%rsp), %rdx
000000000101c838	cmpq	%rdx, %rcx
000000000101c83b	jbe	0x101c918
000000000101c841	movq	0x78(%rax), %rcx
000000000101c845	movq	0x20(%rax), %rdx
000000000101c849	cmpq	%rdx, %rcx
000000000101c84c	je	0x101c914
000000000101c852	shlq	$0xd, %rdx
000000000101c856	movq	0x18(%rax), %rbx
000000000101c85a	addq	%rbx, %rdx
000000000101c85d	movq	runtime.physPageSize(%rip), %rsi
000000000101c864	cmpq	$0x2000, %rsi
000000000101c86b	jbe	0x101c90c
000000000101c871	leaq	-0x1(%rbx,%rsi), %rbx
000000000101c876	leaq	-0x1(%rsi), %rdi
000000000101c87a	notq	%rdi
000000000101c87d	andq	%rdi, %rbx
000000000101c880	andq	%rdx, %rdi
000000000101c883	cmpq	%rbx, %rdi
000000000101c886	jbe	0x101c8f9
000000000101c888	subq	%rbx, %rdi
000000000101c88b	shlq	$0xd, %rcx
000000000101c88f	movq	%rdi, %rdx
000000000101c892	subq	%rcx, %rdi
000000000101c895	cmpq	$0x2000, %rsi
000000000101c89c	jbe	0x101c8a3
000000000101c89e	testq	%rdi, %rdi
000000000101c8a1	je	0x101c8e6
000000000101c8a3	movq	%rdi, 0x10(%rsp)
000000000101c8a8	movq	0xb9021(%rip), %rcx
000000000101c8af	addq	%rdi, %rcx
000000000101c8b2	movq	%rcx, 0xb9017(%rip)
000000000101c8b9	movq	%rdx, %rcx
000000000101c8bc	shrq	$0xd, %rdx
000000000101c8c0	movq	%rdx, 0x78(%rax)
000000000101c8c4	movq	%rbx, (%rsp)
000000000101c8c8	movq	%rcx, 0x8(%rsp)
000000000101c8cd	callq	runtime.sysUnused
000000000101c8d2	movq	0x10(%rsp), %rax
000000000101c8d7	movq	%rax, 0x40(%rsp)
000000000101c8dc	movq	0x18(%rsp), %rbp
000000000101c8e1	addq	$0x20, %rsp
000000000101c8e5	retq
000000000101c8e6	movq	$0x0, 0x40(%rsp)
000000000101c8ef	movq	0x18(%rsp), %rbp
000000000101c8f4	addq	$0x20, %rsp
000000000101c8f8	retq
000000000101c8f9	movq	$0x0, 0x40(%rsp)
000000000101c902	movq	0x18(%rsp), %rbp
000000000101c907	addq	$0x20, %rsp
000000000101c90b	retq
000000000101c90c	movq	%rdx, %rdi
000000000101c90f	jmp	0x101c888
000000000101c914	xorl	%eax, %eax
000000000101c916	jmp	0x101c8d7
000000000101c918	xorl	%eax, %eax
000000000101c91a	jmp	0x101c8d7
000000000101c91c	callq	runtime.morestack_noctxt
000000000101c921	jmp	runtime.scavengeTreapNode
000000000101c926	int3
000000000101c927	int3
000000000101c928	int3
000000000101c929	int3
000000000101c92a	int3
000000000101c92b	int3
000000000101c92c	int3
000000000101c92d	int3
000000000101c92e	int3
000000000101c92f	int3
runtime.scavengelist:
000000000101c930	movq	%gs:0x30, %rcx
000000000101c939	cmpq	0x10(%rcx), %rsp
000000000101c93d	jbe	0x101ca72
000000000101c943	subq	$0x30, %rsp
000000000101c947	movq	%rbp, 0x28(%rsp)
000000000101c94c	leaq	0x28(%rsp), %rbp
000000000101c951	movq	0x38(%rsp), %rax
000000000101c956	movq	(%rax), %rax
000000000101c959	testq	%rax, %rax
000000000101c95c	je	0x101ca5f
000000000101c962	movq	0x48(%rsp), %rcx
000000000101c967	movq	0x40(%rsp), %rdx
000000000101c96c	xorl	%ebx, %ebx
000000000101c96e	jmp	0x101c976
000000000101c970	movq	(%rax), %rax
000000000101c973	movq	%rdi, %rdx
000000000101c976	testq	%rax, %rax
000000000101c979	je	0x101ca50
000000000101c97f	movq	0x70(%rax), %rsi
000000000101c983	movq	%rdx, %rdi
000000000101c986	subq	%rsi, %rdx
000000000101c989	cmpq	%rcx, %rdx
000000000101c98c	jbe	0x101c970
000000000101c98e	movq	0x78(%rax), %rdx
000000000101c992	movq	0x20(%rax), %rsi
000000000101c996	cmpq	%rsi, %rdx
000000000101c999	je	0x101c970
000000000101c99b	shlq	$0xd, %rsi
000000000101c99f	movq	0x18(%rax), %r8
000000000101c9a3	addq	%r8, %rsi
000000000101c9a6	movq	runtime.physPageSize(%rip), %r9
000000000101c9ad	cmpq	$0x2000, %r9
000000000101c9b4	jbe	0x101ca4b
000000000101c9ba	leaq	-0x1(%r8,%r9), %r8
000000000101c9bf	leaq	-0x1(%r9), %r10
000000000101c9c3	notq	%r10
000000000101c9c6	andq	%r10, %r8
000000000101c9c9	andq	%rsi, %r10
000000000101c9cc	cmpq	%r8, %r10
000000000101c9cf	jbe	0x101c970
000000000101c9d1	movq	%rbx, 0x10(%rsp)
000000000101c9d6	subq	%r8, %r10
000000000101c9d9	shlq	$0xd, %rdx
000000000101c9dd	movq	%r10, %rsi
000000000101c9e0	subq	%rdx, %r10
000000000101c9e3	cmpq	$0x2000, %r9
000000000101c9ea	jbe	0x101c9f5
000000000101c9ec	testq	%r10, %r10
000000000101c9ef	je	0x101c970
000000000101c9f5	movq	%rax, 0x20(%rsp)
000000000101c9fa	movq	%r10, 0x18(%rsp)
000000000101c9ff	movq	0xb8eca(%rip), %rcx
000000000101ca06	addq	%r10, %rcx
000000000101ca09	movq	%rcx, 0xb8ec0(%rip)
000000000101ca10	movq	%rsi, %rcx
000000000101ca13	shrq	$0xd, %rsi
000000000101ca17	movq	%rsi, 0x78(%rax)
000000000101ca1b	movq	%r8, (%rsp)
000000000101ca1f	movq	%rcx, 0x8(%rsp)
000000000101ca24	callq	runtime.sysUnused
000000000101ca29	movq	0x18(%rsp), %rax
000000000101ca2e	movq	0x10(%rsp), %rcx
000000000101ca33	leaq	(%rcx,%rax), %rbx
000000000101ca37	movq	0x20(%rsp), %rax
000000000101ca3c	movq	0x48(%rsp), %rcx
000000000101ca41	movq	0x40(%rsp), %rdi
000000000101ca46	jmp	0x101c970
000000000101ca4b	movq	%rsi, %r10
000000000101ca4e	jmp	0x101c9d1
000000000101ca50	movq	%rbx, 0x50(%rsp)
000000000101ca55	movq	0x28(%rsp), %rbp
000000000101ca5a	addq	$0x30, %rsp
000000000101ca5e	retq
000000000101ca5f	movq	$0x0, 0x50(%rsp)
000000000101ca68	movq	0x28(%rsp), %rbp
000000000101ca6d	addq	$0x30, %rsp
000000000101ca71	retq
000000000101ca72	callq	runtime.morestack_noctxt
000000000101ca77	jmp	runtime.scavengelist
000000000101ca7c	int3
000000000101ca7d	int3
000000000101ca7e	int3
000000000101ca7f	int3
runtime.(*mheap).scavenge:
000000000101ca80	movq	%gs:0x30, %rcx
000000000101ca89	cmpq	0x10(%rcx), %rsp
000000000101ca8d	jbe	0x101cd87
000000000101ca93	subq	$0x68, %rsp
000000000101ca97	movq	%rbp, 0x60(%rsp)
000000000101ca9c	leaq	0x60(%rsp), %rbp
000000000101caa1	movq	%gs:0x30, %rax
000000000101caaa	movq	%rax, 0x58(%rsp)
000000000101caaf	movq	0x30(%rax), %rcx
000000000101cab3	incl	0xe8(%rcx)
000000000101cab9	movq	0x70(%rsp), %rcx
000000000101cabe	testb	%al, (%rcx)
000000000101cac0	movq	%rcx, (%rsp)
000000000101cac4	callq	runtime.lock
000000000101cac9	xorl	%eax, %eax
000000000101cacb	xorl	%ecx, %ecx
000000000101cacd	jmp	0x101cb1a
000000000101cacf	movq	%rax, 0x28(%rsp)
000000000101cad4	shlq	$0x4, %rax
000000000101cad8	movq	0x70(%rsp), %rdx
000000000101cadd	leaq	0x8(%rdx,%rax), %rax
000000000101cae2	movq	%rax, (%rsp)
000000000101cae6	movq	0x80(%rsp), %rax
000000000101caee	movq	%rax, 0x8(%rsp)
000000000101caf3	movq	0x88(%rsp), %rbx
000000000101cafb	movq	%rbx, 0x10(%rsp)
000000000101cb00	callq	runtime.scavengelist
000000000101cb05	movq	0x28(%rsp), %rax
000000000101cb0a	incq	%rax
000000000101cb0d	movq	0x18(%rsp), %rcx
000000000101cb12	movq	0x20(%rsp), %rdx
000000000101cb17	addq	%rdx, %rcx
000000000101cb1a	movq	%rcx, 0x20(%rsp)
000000000101cb1f	cmpq	$0x80, %rax
000000000101cb25	jl	0x101cacf
000000000101cb27	movq	0x70(%rsp), %rax
000000000101cb2c	movq	0x808(%rax), %rcx
000000000101cb33	movq	%rcx, (%rsp)
000000000101cb37	movq	0x80(%rsp), %rcx
000000000101cb3f	movq	%rcx, 0x8(%rsp)
000000000101cb44	movq	0x88(%rsp), %rcx
000000000101cb4c	movq	%rcx, 0x10(%rsp)
000000000101cb51	callq	runtime.scavengetreap
000000000101cb56	movq	0x18(%rsp), %rax
000000000101cb5b	movq	%rax, 0x50(%rsp)
000000000101cb60	movq	0x70(%rsp), %rcx
000000000101cb65	movq	%rcx, (%rsp)
000000000101cb69	callq	runtime.unlock
000000000101cb6e	movq	0x58(%rsp), %rax
000000000101cb73	movq	0x30(%rax), %rax
000000000101cb77	addl	$-0x1, 0xe8(%rax)
000000000101cb7e	movq	0x50(%rsp), %rax
000000000101cb83	movq	0x20(%rsp), %rcx
000000000101cb88	addq	%rcx, %rax
000000000101cb8b	cmpl	$0x0, 0xb81ae(%rip)
000000000101cb92	jle	0x101ccfc
000000000101cb98	testq	%rax, %rax
000000000101cb9b	ja	0x101cd06
000000000101cba1	movq	0xb8d20(%rip), %rax
000000000101cba8	movq	%rax, 0x48(%rsp)
000000000101cbad	movq	0xb8d0c(%rip), %rcx
000000000101cbb4	movq	%rcx, 0x40(%rsp)
000000000101cbb9	movq	0xb8cf8(%rip), %rdx
000000000101cbc0	movq	%rdx, 0x38(%rsp)
000000000101cbc5	movq	0xb8d04(%rip), %rbx
000000000101cbcc	movq	%rbx, 0x30(%rsp)
000000000101cbd1	callq	runtime.printlock
000000000101cbd6	leaq	0x4df9a(%rip), %rax
000000000101cbdd	movq	%rax, (%rsp)
000000000101cbe1	movq	$0x4, 0x8(%rsp)
000000000101cbea	callq	runtime.printstring
000000000101cbef	movl	0x78(%rsp), %eax
000000000101cbf3	movslq	%eax, %rax
000000000101cbf6	movq	%rax, (%rsp)
000000000101cbfa	callq	runtime.printint
000000000101cbff	leaq	0x4e335(%rip), %rax
000000000101cc06	movq	%rax, (%rsp)
000000000101cc0a	movq	$0x9, 0x8(%rsp)
000000000101cc13	callq	runtime.printstring
000000000101cc18	movq	0x48(%rsp), %rax
000000000101cc1d	shrq	$0x14, %rax
000000000101cc21	movq	%rax, (%rsp)
000000000101cc25	callq	runtime.printuint
000000000101cc2a	leaq	0x4e210(%rip), %rax
000000000101cc31	movq	%rax, (%rsp)
000000000101cc35	movq	$0x8, 0x8(%rsp)
000000000101cc3e	callq	runtime.printstring
000000000101cc43	movq	0x40(%rsp), %rax
000000000101cc48	shrq	$0x14, %rax
000000000101cc4c	movq	%rax, (%rsp)
000000000101cc50	callq	runtime.printuint
000000000101cc55	leaq	0x4e088(%rip), %rax
000000000101cc5c	movq	%rax, (%rsp)
000000000101cc60	movq	$0x7, 0x8(%rsp)
000000000101cc69	callq	runtime.printstring
000000000101cc6e	movq	0x38(%rsp), %rax
000000000101cc73	shrq	$0x14, %rax
000000000101cc77	movq	%rax, (%rsp)
000000000101cc7b	callq	runtime.printuint
000000000101cc80	leaq	0x4e62d(%rip), %rax
000000000101cc87	movq	%rax, (%rsp)
000000000101cc8b	movq	$0xc, 0x8(%rsp)
000000000101cc94	callq	runtime.printstring
000000000101cc99	movq	0x30(%rsp), %rax
000000000101cc9e	shrq	$0x14, %rax
000000000101cca2	movq	%rax, (%rsp)
000000000101cca6	callq	runtime.printuint
000000000101ccab	leaq	0x4e5f6(%rip), %rax
000000000101ccb2	movq	%rax, (%rsp)
000000000101ccb6	movq	$0xc, 0x8(%rsp)
000000000101ccbf	callq	runtime.printstring
000000000101ccc4	movq	0x38(%rsp), %rax
000000000101ccc9	movq	0x30(%rsp), %rcx
000000000101ccce	subq	%rcx, %rax
000000000101ccd1	shrq	$0x14, %rax
000000000101ccd5	movq	%rax, (%rsp)
000000000101ccd9	callq	runtime.printuint
000000000101ccde	leaq	0x4df42(%rip), %rax
000000000101cce5	movq	%rax, (%rsp)
000000000101cce9	movq	$0x6, 0x8(%rsp)
000000000101ccf2	callq	runtime.printstring
000000000101ccf7	callq	runtime.printunlock
000000000101ccfc	movq	0x60(%rsp), %rbp
000000000101cd01	addq	$0x68, %rsp
000000000101cd05	retq
000000000101cd06	movq	%rax, 0x20(%rsp)
000000000101cd0b	callq	runtime.printlock
000000000101cd10	leaq	0x4de60(%rip), %rax
000000000101cd17	movq	%rax, (%rsp)
000000000101cd1b	movq	$0x4, 0x8(%rsp)
000000000101cd24	callq	runtime.printstring
000000000101cd29	movl	0x78(%rsp), %eax
000000000101cd2d	movslq	%eax, %rcx
000000000101cd30	movq	%rcx, (%rsp)
000000000101cd34	callq	runtime.printint
000000000101cd39	leaq	0x4dd60(%rip), %rax
000000000101cd40	movq	%rax, (%rsp)
000000000101cd44	movq	$0x2, 0x8(%rsp)
000000000101cd4d	callq	runtime.printstring
000000000101cd52	movq	0x20(%rsp), %rax
000000000101cd57	shrq	$0x14, %rax
000000000101cd5b	movq	%rax, (%rsp)
000000000101cd5f	callq	runtime.printuint
000000000101cd64	leaq	0x4e609(%rip), %rax
000000000101cd6b	movq	%rax, (%rsp)
000000000101cd6f	movq	$0xd, 0x8(%rsp)
000000000101cd78	callq	runtime.printstring
000000000101cd7d	callq	runtime.printunlock
000000000101cd82	jmp	0x101cba1
000000000101cd87	callq	runtime.morestack_noctxt
000000000101cd8c	jmp	"runtime.(*mheap).scavenge"
000000000101cd91	int3
000000000101cd92	int3
000000000101cd93	int3
000000000101cd94	int3
000000000101cd95	int3
000000000101cd96	int3
000000000101cd97	int3
000000000101cd98	int3
000000000101cd99	int3
000000000101cd9a	int3
000000000101cd9b	int3
000000000101cd9c	int3
000000000101cd9d	int3
000000000101cd9e	int3
000000000101cd9f	int3
runtime.(*mSpanList).remove:
000000000101cda0	movq	%gs:0x30, %rcx
000000000101cda9	cmpq	0x10(%rcx), %rsp
000000000101cdad	jbe	0x101cf28
000000000101cdb3	subq	$0x30, %rsp
000000000101cdb7	movq	%rbp, 0x28(%rsp)
000000000101cdbc	leaq	0x28(%rsp), %rbp
000000000101cdc1	movq	0x40(%rsp), %rax
000000000101cdc6	movq	0x10(%rax), %rcx
000000000101cdca	movq	0x38(%rsp), %rdx
000000000101cdcf	cmpq	%rdx, %rcx
000000000101cdd2	jne	0x101ce24
000000000101cdd4	movq	(%rdx), %rcx
000000000101cdd7	cmpq	%rax, %rcx
000000000101cdda	jne	0x101ce18
000000000101cddc	movq	(%rax), %rcx
000000000101cddf	movq	%rcx, (%rdx)
000000000101cde2	movq	0x8(%rdx), %rcx
000000000101cde6	cmpq	%rcx, %rax
000000000101cde9	jne	0x101ce0b
000000000101cdeb	movq	0x8(%rax), %rcx
000000000101cdef	movq	%rcx, 0x8(%rdx)
000000000101cdf3	xorps	%xmm0, %xmm0
000000000101cdf6	movups	%xmm0, (%rax)
000000000101cdf9	movq	$0x0, 0x10(%rax)
000000000101ce01	movq	0x28(%rsp), %rbp
000000000101ce06	addq	$0x30, %rsp
000000000101ce0a	retq
000000000101ce0b	movq	(%rax), %rcx
000000000101ce0e	movq	0x8(%rax), %rdx
000000000101ce12	movq	%rdx, 0x8(%rcx)
000000000101ce16	jmp	0x101cdf3
000000000101ce18	movq	0x8(%rax), %rcx
000000000101ce1c	movq	(%rax), %rbx
000000000101ce1f	movq	%rbx, (%rcx)
000000000101ce22	jmp	0x101cde2
000000000101ce24	movq	%rcx, 0x20(%rsp)
000000000101ce29	movq	0x20(%rax), %rcx
000000000101ce2d	movq	%rcx, 0x10(%rsp)
000000000101ce32	movq	0x8(%rax), %rdx
000000000101ce36	movq	%rdx, 0x18(%rsp)
000000000101ce3b	callq	runtime.printlock
000000000101ce40	leaq	0x516c6(%rip), %rax
000000000101ce47	movq	%rax, (%rsp)
000000000101ce4b	movq	$0x2d, 0x8(%rsp)
000000000101ce54	callq	runtime.printstring
000000000101ce59	movq	0x10(%rsp), %rax
000000000101ce5e	movq	%rax, (%rsp)
000000000101ce62	callq	runtime.printuint
000000000101ce67	leaq	0x4ddfb(%rip), %rax
000000000101ce6e	movq	%rax, (%rsp)
000000000101ce72	movq	$0x6, 0x8(%rsp)
000000000101ce7b	callq	runtime.printstring
000000000101ce80	movq	0x40(%rsp), %rax
000000000101ce85	movq	%rax, (%rsp)
000000000101ce89	callq	runtime.printpointer
000000000101ce8e	leaq	0x4ddce(%rip), %rax
000000000101ce95	movq	%rax, (%rsp)
000000000101ce99	movq	$0x6, 0x8(%rsp)
000000000101cea2	callq	runtime.printstring
000000000101cea7	movq	0x18(%rsp), %rax
000000000101ceac	movq	%rax, (%rsp)
000000000101ceb0	callq	runtime.printpointer
000000000101ceb5	leaq	0x4e294(%rip), %rax
000000000101cebc	movq	%rax, (%rsp)
000000000101cec0	movq	$0xb, 0x8(%rsp)
000000000101cec9	callq	runtime.printstring
000000000101cece	movq	0x20(%rsp), %rax
000000000101ced3	movq	%rax, (%rsp)
000000000101ced7	callq	runtime.printpointer
000000000101cedc	leaq	0x4dd6e(%rip), %rax
000000000101cee3	movq	%rax, (%rsp)
000000000101cee7	movq	$0x6, 0x8(%rsp)
000000000101cef0	callq	runtime.printstring
000000000101cef5	movq	0x38(%rsp), %rax
000000000101cefa	movq	%rax, (%rsp)
000000000101cefe	callq	runtime.printpointer
000000000101cf03	callq	runtime.printnl
000000000101cf08	callq	runtime.printunlock
000000000101cf0d	leaq	0x4e876(%rip), %rax
000000000101cf14	movq	%rax, (%rsp)
000000000101cf18	movq	$0x10, 0x8(%rsp)
000000000101cf21	callq	runtime.throw
000000000101cf26	ud2
000000000101cf28	callq	runtime.morestack_noctxt
000000000101cf2d	jmp	"runtime.(*mSpanList).remove"
000000000101cf32	int3
000000000101cf33	int3
000000000101cf34	int3
000000000101cf35	int3
000000000101cf36	int3
000000000101cf37	int3
000000000101cf38	int3
000000000101cf39	int3
000000000101cf3a	int3
000000000101cf3b	int3
000000000101cf3c	int3
000000000101cf3d	int3
000000000101cf3e	int3
000000000101cf3f	int3
runtime.(*mSpanList).insert:
000000000101cf40	movq	%gs:0x30, %rcx
000000000101cf49	cmpq	0x10(%rcx), %rsp
000000000101cf4d	jbe	0x101d04b
000000000101cf53	subq	$0x30, %rsp
000000000101cf57	movq	%rbp, 0x28(%rsp)
000000000101cf5c	leaq	0x28(%rsp), %rbp
000000000101cf61	movq	0x40(%rsp), %rax
000000000101cf66	movq	(%rax), %rcx
000000000101cf69	movq	%rcx, 0x20(%rsp)
000000000101cf6e	testq	%rcx, %rcx
000000000101cf71	jne	0x101cfaf
000000000101cf73	cmpq	$0x0, 0x8(%rax)
000000000101cf78	jne	0x101cfaf
000000000101cf7a	cmpq	$0x0, 0x10(%rax)
000000000101cf7f	jne	0x101cfaf
000000000101cf81	movq	0x38(%rsp), %rcx
000000000101cf86	movq	(%rcx), %rdx
000000000101cf89	movq	%rdx, (%rax)
000000000101cf8c	movq	(%rcx), %rdx
000000000101cf8f	testq	%rdx, %rdx
000000000101cf92	je	0x101cfa9
000000000101cf94	movq	%rax, 0x8(%rdx)
000000000101cf98	movq	%rax, (%rcx)
000000000101cf9b	movq	%rcx, 0x10(%rax)
000000000101cf9f	movq	0x28(%rsp), %rbp
000000000101cfa4	addq	$0x30, %rsp
000000000101cfa8	retq
000000000101cfa9	movq	%rax, 0x8(%rcx)
000000000101cfad	jmp	0x101cf98
000000000101cfaf	movq	0x8(%rax), %rcx
000000000101cfb3	movq	%rcx, 0x18(%rsp)
000000000101cfb8	movq	0x10(%rax), %rdx
000000000101cfbc	movq	%rdx, 0x10(%rsp)
000000000101cfc1	callq	runtime.printlock
000000000101cfc6	leaq	0x508ac(%rip), %rax
000000000101cfcd	movq	%rax, (%rsp)
000000000101cfd1	movq	$0x21, 0x8(%rsp)
000000000101cfda	callq	runtime.printstring
000000000101cfdf	movq	0x40(%rsp), %rax
000000000101cfe4	movq	%rax, (%rsp)
000000000101cfe8	callq	runtime.printpointer
000000000101cfed	callq	runtime.printsp
000000000101cff2	movq	0x20(%rsp), %rax
000000000101cff7	movq	%rax, (%rsp)
000000000101cffb	callq	runtime.printpointer
000000000101d000	callq	runtime.printsp
000000000101d005	movq	0x18(%rsp), %rax
000000000101d00a	movq	%rax, (%rsp)
000000000101d00e	callq	runtime.printpointer
000000000101d013	callq	runtime.printsp
000000000101d018	movq	0x10(%rsp), %rax
000000000101d01d	movq	%rax, (%rsp)
000000000101d021	callq	runtime.printpointer
000000000101d026	callq	runtime.printnl
000000000101d02b	callq	runtime.printunlock
000000000101d030	leaq	0x4e743(%rip), %rax
000000000101d037	movq	%rax, (%rsp)
000000000101d03b	movq	$0x10, 0x8(%rsp)
000000000101d044	callq	runtime.throw
000000000101d049	ud2
000000000101d04b	callq	runtime.morestack_noctxt
000000000101d050	jmp	"runtime.(*mSpanList).insert"
000000000101d055	int3
000000000101d056	int3
000000000101d057	int3
000000000101d058	int3
000000000101d059	int3
000000000101d05a	int3
000000000101d05b	int3
000000000101d05c	int3
000000000101d05d	int3
000000000101d05e	int3
000000000101d05f	int3
runtime.(*mSpanList).insertBack:
000000000101d060	movq	%gs:0x30, %rcx
000000000101d069	cmpq	0x10(%rcx), %rsp
000000000101d06d	jbe	0x101d16d
000000000101d073	subq	$0x30, %rsp
000000000101d077	movq	%rbp, 0x28(%rsp)
000000000101d07c	leaq	0x28(%rsp), %rbp
000000000101d081	movq	0x40(%rsp), %rax
000000000101d086	movq	(%rax), %rcx
000000000101d089	movq	%rcx, 0x20(%rsp)
000000000101d08e	testq	%rcx, %rcx
000000000101d091	jne	0x101d0d1
000000000101d093	cmpq	$0x0, 0x8(%rax)
000000000101d098	jne	0x101d0d1
000000000101d09a	cmpq	$0x0, 0x10(%rax)
000000000101d09f	jne	0x101d0d1
000000000101d0a1	movq	0x38(%rsp), %rcx
000000000101d0a6	movq	0x8(%rcx), %rdx
000000000101d0aa	movq	%rdx, 0x8(%rax)
000000000101d0ae	movq	0x8(%rcx), %rdx
000000000101d0b2	testq	%rdx, %rdx
000000000101d0b5	je	0x101d0cc
000000000101d0b7	movq	%rax, (%rdx)
000000000101d0ba	movq	%rax, 0x8(%rcx)
000000000101d0be	movq	%rcx, 0x10(%rax)
000000000101d0c2	movq	0x28(%rsp), %rbp
000000000101d0c7	addq	$0x30, %rsp
000000000101d0cb	retq
000000000101d0cc	movq	%rax, (%rcx)
000000000101d0cf	jmp	0x101d0ba
000000000101d0d1	movq	0x8(%rax), %rcx
000000000101d0d5	movq	%rcx, 0x18(%rsp)
000000000101d0da	movq	0x10(%rax), %rdx
000000000101d0de	movq	%rdx, 0x10(%rsp)
000000000101d0e3	callq	runtime.printlock
000000000101d0e8	leaq	0x50d1e(%rip), %rax
000000000101d0ef	movq	%rax, (%rsp)
000000000101d0f3	movq	$0x25, 0x8(%rsp)
000000000101d0fc	callq	runtime.printstring
000000000101d101	movq	0x40(%rsp), %rax
000000000101d106	movq	%rax, (%rsp)
000000000101d10a	callq	runtime.printpointer
000000000101d10f	callq	runtime.printsp
000000000101d114	movq	0x20(%rsp), %rax
000000000101d119	movq	%rax, (%rsp)
000000000101d11d	callq	runtime.printpointer
000000000101d122	callq	runtime.printsp
000000000101d127	movq	0x18(%rsp), %rax
000000000101d12c	movq	%rax, (%rsp)
000000000101d130	callq	runtime.printpointer
000000000101d135	callq	runtime.printsp
000000000101d13a	movq	0x10(%rsp), %rax
000000000101d13f	movq	%rax, (%rsp)
000000000101d143	callq	runtime.printpointer
000000000101d148	callq	runtime.printnl
000000000101d14d	callq	runtime.printunlock
000000000101d152	leaq	0x4ec0b(%rip), %rax
000000000101d159	movq	%rax, (%rsp)
000000000101d15d	movq	$0x14, 0x8(%rsp)
000000000101d166	callq	runtime.throw
000000000101d16b	ud2
000000000101d16d	callq	runtime.morestack_noctxt
000000000101d172	jmp	"runtime.(*mSpanList).insertBack"
000000000101d177	int3
000000000101d178	int3
000000000101d179	int3
000000000101d17a	int3
000000000101d17b	int3
000000000101d17c	int3
000000000101d17d	int3
000000000101d17e	int3
000000000101d17f	int3
runtime.(*mSpanList).takeAll:
000000000101d180	movq	0x10(%rsp), %rax
000000000101d185	movq	(%rax), %rcx
000000000101d188	testq	%rcx, %rcx
000000000101d18b	je	0x101d1d7
000000000101d18d	movq	0x8(%rsp), %rdx
000000000101d192	jmp	0x101d19b
000000000101d194	movq	%rdx, 0x10(%rcx)
000000000101d198	movq	(%rcx), %rcx
000000000101d19b	testq	%rcx, %rcx
000000000101d19e	jne	0x101d194
000000000101d1a0	movq	(%rdx), %rcx
000000000101d1a3	testq	%rcx, %rcx
000000000101d1a6	je	0x101d1c7
000000000101d1a8	movq	0x8(%rax), %rbx
000000000101d1ac	movq	%rcx, (%rbx)
000000000101d1af	movq	(%rdx), %rcx
000000000101d1b2	movq	0x8(%rax), %rbx
000000000101d1b6	movq	%rbx, 0x8(%rcx)
000000000101d1ba	movq	(%rax), %rcx
000000000101d1bd	movq	%rcx, (%rdx)
000000000101d1c0	xorps	%xmm0, %xmm0
000000000101d1c3	movups	%xmm0, (%rax)
000000000101d1c6	retq
000000000101d1c7	movq	0x8(%rax), %rcx
000000000101d1cb	movq	(%rax), %rbx
000000000101d1ce	movq	%rbx, (%rdx)
000000000101d1d1	movq	%rcx, 0x8(%rdx)
000000000101d1d5	jmp	0x101d1c0
000000000101d1d7	retq
000000000101d1d8	int3
000000000101d1d9	int3
000000000101d1da	int3
000000000101d1db	int3
000000000101d1dc	int3
000000000101d1dd	int3
000000000101d1de	int3
000000000101d1df	int3
runtime.addspecial:
000000000101d1e0	movq	%gs:0x30, %rcx
000000000101d1e9	cmpq	0x10(%rcx), %rsp
000000000101d1ed	jbe	0x101d397
000000000101d1f3	subq	$0x40, %rsp
000000000101d1f7	movq	%rbp, 0x38(%rsp)
000000000101d1fc	leaq	0x38(%rsp), %rbp
000000000101d201	movq	0x48(%rsp), %rax
000000000101d206	movq	%rax, (%rsp)
000000000101d20a	callq	runtime.spanOfHeap
000000000101d20f	movq	0x8(%rsp), %rax
000000000101d214	testq	%rax, %rax
000000000101d217	je	0x101d37c
000000000101d21d	movq	%rax, 0x20(%rsp)
000000000101d222	movq	%gs:0x30, %rcx
000000000101d22b	movq	0x30(%rcx), %rdx
000000000101d22f	incl	0x100(%rdx)
000000000101d235	movq	0x30(%rcx), %rcx
000000000101d239	movq	%rcx, 0x28(%rsp)
000000000101d23e	movq	%rax, (%rsp)
000000000101d242	callq	"runtime.(*mspan).ensureSwept"
000000000101d247	movq	0x48(%rsp), %rax
000000000101d24c	movq	0x20(%rsp), %rcx
000000000101d251	subq	0x18(%rcx), %rax
000000000101d255	movq	%rax, 0x18(%rsp)
000000000101d25a	movq	0x50(%rsp), %rdx
000000000101d25f	movzbl	0xa(%rdx), %ebx
000000000101d263	movb	%bl, 0x17(%rsp)
000000000101d267	leaq	0x88(%rcx), %rsi
000000000101d26e	movq	%rsi, 0x30(%rsp)
000000000101d273	movq	%rsi, (%rsp)
000000000101d277	callq	runtime.lock
000000000101d27c	movq	0x20(%rsp), %rax
000000000101d281	addq	$0x90, %rax
000000000101d287	movzbl	0x17(%rsp), %ecx
000000000101d28c	movq	0x18(%rsp), %rdx
000000000101d291	jmp	0x101d296
000000000101d293	movq	%rbx, %rax
000000000101d296	movq	(%rax), %rbx
000000000101d299	testq	%rbx, %rbx
000000000101d29c	je	0x101d2c0
000000000101d29e	movzwl	0x8(%rbx), %esi
000000000101d2a2	cmpq	%rsi, %rdx
000000000101d2a5	jne	0x101d2b3
000000000101d2a7	movzbl	0xa(%rbx), %edi
000000000101d2ab	cmpb	%dil, %cl
000000000101d2ae	je	0x101d327
000000000101d2b0	cmpq	%rsi, %rdx
000000000101d2b3	jb	0x101d2c0
000000000101d2b5	jne	0x101d293
000000000101d2b7	movzbl	0xa(%rbx), %esi
000000000101d2bb	cmpb	%sil, %cl
000000000101d2be	jae	0x101d293
000000000101d2c0	movq	0x50(%rsp), %rcx
000000000101d2c5	movw	%dx, 0x8(%rcx)
000000000101d2c9	movq	(%rax), %rdx
000000000101d2cc	movq	%rdx, (%rcx)
000000000101d2cf	movq	%rcx, (%rax)
000000000101d2d2	movq	0x30(%rsp), %rax
000000000101d2d7	movq	%rax, (%rsp)
000000000101d2db	callq	runtime.unlock
000000000101d2e0	movq	%gs:0x30, %rax
000000000101d2e9	movq	0x28(%rsp), %rcx
000000000101d2ee	movl	0x100(%rcx), %edx
000000000101d2f4	leal	-0x1(%rdx), %ebx
000000000101d2f7	movl	%ebx, 0x100(%rcx)
000000000101d2fd	cmpl	$0x1, %edx
000000000101d300	jne	0x101d318
000000000101d302	testb	%al, (%rax)
000000000101d304	leaq	0xb1(%rax), %rcx
000000000101d30b	cmpb	$0x0, (%rcx)
000000000101d30e	je	0x101d318
000000000101d310	movq	$-0x522, 0x10(%rax)
000000000101d318	movb	$0x1, 0x58(%rsp)
000000000101d31d	movq	0x38(%rsp), %rbp
000000000101d322	addq	$0x40, %rsp
000000000101d326	retq
000000000101d327	movq	0x30(%rsp), %rax
000000000101d32c	movq	%rax, (%rsp)
000000000101d330	callq	runtime.unlock
000000000101d335	movq	%gs:0x30, %rax
000000000101d33e	movq	0x28(%rsp), %rcx
000000000101d343	movl	0x100(%rcx), %edx
000000000101d349	leal	-0x1(%rdx), %ebx
000000000101d34c	movl	%ebx, 0x100(%rcx)
000000000101d352	cmpl	$0x1, %edx
000000000101d355	jne	0x101d36d
000000000101d357	testb	%al, (%rax)
000000000101d359	leaq	0xb1(%rax), %rcx
000000000101d360	cmpb	$0x0, (%rcx)
000000000101d363	je	0x101d36d
000000000101d365	movq	$-0x522, 0x10(%rax)
000000000101d36d	movb	$0x0, 0x58(%rsp)
000000000101d372	movq	0x38(%rsp), %rbp
000000000101d377	addq	$0x40, %rsp
000000000101d37b	retq
000000000101d37c	leaq	0x4fbf1(%rip), %rax
000000000101d383	movq	%rax, (%rsp)
000000000101d387	movq	$0x1d, 0x8(%rsp)
000000000101d390	callq	runtime.throw
000000000101d395	ud2
000000000101d397	callq	runtime.morestack_noctxt
000000000101d39c	jmp	runtime.addspecial
000000000101d3a1	int3
000000000101d3a2	int3
000000000101d3a3	int3
000000000101d3a4	int3
000000000101d3a5	int3
000000000101d3a6	int3
000000000101d3a7	int3
000000000101d3a8	int3
000000000101d3a9	int3
000000000101d3aa	int3
000000000101d3ab	int3
000000000101d3ac	int3
000000000101d3ad	int3
000000000101d3ae	int3
000000000101d3af	int3
runtime.setprofilebucket:
000000000101d3b0	movq	%gs:0x30, %rcx
000000000101d3b9	cmpq	0x10(%rcx), %rsp
000000000101d3bd	jbe	0x101d45f
000000000101d3c3	subq	$0x28, %rsp
000000000101d3c7	movq	%rbp, 0x20(%rsp)
000000000101d3cc	leaq	0x20(%rsp), %rbp
000000000101d3d1	leaq	0xa36e8(%rip), %rax
000000000101d3d8	movq	%rax, (%rsp)
000000000101d3dc	callq	runtime.lock
000000000101d3e1	leaq	0xa3690(%rip), %rax
000000000101d3e8	movq	%rax, (%rsp)
000000000101d3ec	callq	"runtime.(*fixalloc).alloc"
000000000101d3f1	movq	0x8(%rsp), %rax
000000000101d3f6	movq	%rax, 0x18(%rsp)
000000000101d3fb	leaq	0xa36be(%rip), %rcx
000000000101d402	movq	%rcx, (%rsp)
000000000101d406	callq	runtime.unlock
000000000101d40b	movq	0x18(%rsp), %rax
000000000101d410	movb	$0x2, 0xa(%rax)
000000000101d414	movq	0x38(%rsp), %rcx
000000000101d419	movq	%rcx, 0x10(%rax)
000000000101d41d	movq	%rax, 0x8(%rsp)
000000000101d422	movq	0x30(%rsp), %rax
000000000101d427	movq	%rax, (%rsp)
000000000101d42b	callq	runtime.addspecial
000000000101d430	leaq	0x10(%rsp), %rax
000000000101d435	cmpb	$0x0, (%rax)
000000000101d438	je	0x101d444
000000000101d43a	movq	0x20(%rsp), %rbp
000000000101d43f	addq	$0x28, %rsp
000000000101d443	retq
000000000101d444	leaq	0x509e7(%rip), %rax
000000000101d44b	movq	%rax, (%rsp)
000000000101d44f	movq	$0x25, 0x8(%rsp)
000000000101d458	callq	runtime.throw
000000000101d45d	ud2
000000000101d45f	callq	runtime.morestack_noctxt
000000000101d464	jmp	runtime.setprofilebucket
000000000101d469	int3
000000000101d46a	int3
000000000101d46b	int3
000000000101d46c	int3
000000000101d46d	int3
000000000101d46e	int3
000000000101d46f	int3
runtime.freespecial:
000000000101d470	movq	%gs:0x30, %rcx
000000000101d479	cmpq	0x10(%rcx), %rsp
000000000101d47d	jbe	0x101d5c3
000000000101d483	subq	$0x30, %rsp
000000000101d487	movq	%rbp, 0x28(%rsp)
000000000101d48c	leaq	0x28(%rsp), %rbp
000000000101d491	movq	0x38(%rsp), %rax
000000000101d496	movzbl	0xa(%rax), %ecx
000000000101d49a	cmpb	$0x1, %cl
000000000101d49d	je	0x101d51d
000000000101d49f	cmpb	$0x2, %cl
000000000101d4a2	jne	0x101d5a8
000000000101d4a8	movq	0x10(%rax), %rcx
000000000101d4ac	movq	%rcx, (%rsp)
000000000101d4b0	movq	0x48(%rsp), %rcx
000000000101d4b5	movq	%rcx, 0x8(%rsp)
000000000101d4ba	callq	runtime.mProf_Free
000000000101d4bf	leaq	0xa35fa(%rip), %rax
000000000101d4c6	movq	%rax, (%rsp)
000000000101d4ca	callq	runtime.lock
000000000101d4cf	leaq	0xa35a2(%rip), %rax
000000000101d4d6	testb	%al, (%rax)
000000000101d4d8	movq	0xa35c9(%rip), %rax
000000000101d4df	subq	0xa3592(%rip), %rax
000000000101d4e6	movq	%rax, 0xa35bb(%rip)
000000000101d4ed	movq	0xa359c(%rip), %rax
000000000101d4f4	movq	0x38(%rsp), %rcx
000000000101d4f9	movq	%rax, (%rcx)
000000000101d4fc	movq	%rcx, 0xa358d(%rip)
000000000101d503	leaq	0xa35b6(%rip), %rax
000000000101d50a	movq	%rax, (%rsp)
000000000101d50e	callq	runtime.unlock
000000000101d513	movq	0x28(%rsp), %rbp
000000000101d518	addq	$0x30, %rsp
000000000101d51c	retq
000000000101d51d	movq	0x10(%rax), %rcx
000000000101d521	movq	0x18(%rax), %rdx
000000000101d525	movq	0x20(%rax), %rbx
000000000101d529	movq	0x28(%rax), %rsi
000000000101d52d	movq	%rsi, 0x20(%rsp)
000000000101d532	movq	0x40(%rsp), %rsi
000000000101d537	movq	%rsi, (%rsp)
000000000101d53b	movq	%rcx, 0x8(%rsp)
000000000101d540	movq	%rdx, 0x10(%rsp)
000000000101d545	movq	%rbx, 0x18(%rsp)
000000000101d54a	callq	runtime.queuefinalizer
000000000101d54f	leaq	0xa356a(%rip), %rax
000000000101d556	movq	%rax, (%rsp)
000000000101d55a	callq	runtime.lock
000000000101d55f	leaq	0xa34ca(%rip), %rax
000000000101d566	testb	%al, (%rax)
000000000101d568	movq	0xa34f1(%rip), %rax
000000000101d56f	subq	0xa34ba(%rip), %rax
000000000101d576	movq	%rax, 0xa34e3(%rip)
000000000101d57d	movq	0xa34c4(%rip), %rax
000000000101d584	movq	0x38(%rsp), %rcx
000000000101d589	movq	%rax, (%rcx)
000000000101d58c	movq	%rcx, 0xa34b5(%rip)
000000000101d593	leaq	0xa3526(%rip), %rax
000000000101d59a	movq	%rax, (%rsp)
000000000101d59e	callq	runtime.unlock
000000000101d5a3	jmp	0x101d513
000000000101d5a8	leaq	0x4e21b(%rip), %rax
000000000101d5af	movq	%rax, (%rsp)
000000000101d5b3	movq	$0x10, 0x8(%rsp)
000000000101d5bc	callq	runtime.throw
000000000101d5c1	ud2
000000000101d5c3	callq	runtime.morestack_noctxt
000000000101d5c8	jmp	runtime.freespecial
000000000101d5cd	int3
000000000101d5ce	int3
000000000101d5cf	int3
runtime.newMarkBits:
000000000101d5d0	movq	%gs:0x30, %rcx
000000000101d5d9	cmpq	0x10(%rcx), %rsp
000000000101d5dd	jbe	0x101d8ba
000000000101d5e3	subq	$0x40, %rsp
000000000101d5e7	movq	%rbp, 0x38(%rsp)
000000000101d5ec	leaq	0x38(%rsp), %rbp
000000000101d5f1	movq	0x9b398(%rip), %rax
000000000101d5f8	movq	0x48(%rsp), %rcx
000000000101d5fd	addq	$0x3f, %rcx
000000000101d601	shrq	$0x6, %rcx
000000000101d605	movq	%rcx, %rdx
000000000101d608	shlq	$0x3, %rcx
000000000101d60c	testq	%rax, %rax
000000000101d60f	je	0x101d625
000000000101d611	movq	(%rax), %rbx
000000000101d614	leaq	(%rbx,%rdx,8), %rbx
000000000101d618	cmpq	$0xfff0, %rbx
000000000101d61f	jbe	0x101d84b
000000000101d625	xorl	%eax, %eax
000000000101d627	testq	%rax, %rax
000000000101d62a	jne	0x101d83c
000000000101d630	movq	%rcx, 0x18(%rsp)
000000000101d635	movq	%rdx, 0x10(%rsp)
000000000101d63a	leaq	runtime.gcBitsArenas(%rip), %rax
000000000101d641	movq	%rax, (%rsp)
000000000101d645	callq	runtime.lock
000000000101d64a	movq	0x9b33f(%rip), %rax
000000000101d651	testq	%rax, %rax
000000000101d654	je	0x101d832
000000000101d65a	movq	(%rax), %rcx
000000000101d65d	movq	0x10(%rsp), %rdx
000000000101d662	leaq	(%rcx,%rdx,8), %rcx
000000000101d666	cmpq	$0xfff0, %rcx
000000000101d66d	jbe	0x101d7f7
000000000101d673	xorl	%eax, %eax
000000000101d675	testq	%rax, %rax
000000000101d678	jne	0x101d7ce
000000000101d67e	callq	runtime.newArenaMayUnlock
000000000101d683	movq	(%rsp), %rax
000000000101d687	movq	0x9b302(%rip), %rcx
000000000101d68e	testq	%rcx, %rcx
000000000101d691	je	0x101d7c4
000000000101d697	movq	(%rcx), %rdx
000000000101d69a	movq	0x10(%rsp), %rbx
000000000101d69f	leaq	(%rdx,%rbx,8), %rdx
000000000101d6a3	cmpq	$0xfff0, %rdx
000000000101d6aa	jbe	0x101d789
000000000101d6b0	xorl	%ecx, %ecx
000000000101d6b2	testq	%rcx, %rcx
000000000101d6b5	jne	0x101d74e
000000000101d6bb	testq	%rax, %rax
000000000101d6be	je	0x101d6d0
000000000101d6c0	movq	(%rax), %rcx
000000000101d6c3	leaq	(%rcx,%rbx,8), %rcx
000000000101d6c7	cmpq	$0xfff0, %rcx
000000000101d6ce	jbe	0x101d719
000000000101d6d0	xorl	%ecx, %ecx
000000000101d6d2	testq	%rcx, %rcx
000000000101d6d5	je	0x101d883
000000000101d6db	movq	%rcx, 0x30(%rsp)
000000000101d6e0	movq	0x9b2a9(%rip), %rcx
000000000101d6e7	movq	%rcx, 0x8(%rax)
000000000101d6eb	leaq	0x9b29e(%rip), %rcx
000000000101d6f2	xchgq	%rax, (%rcx)
000000000101d6f5	leaq	runtime.gcBitsArenas(%rip), %rax
000000000101d6fc	movq	%rax, (%rsp)
000000000101d700	callq	runtime.unlock
000000000101d705	movq	0x30(%rsp), %rax
000000000101d70a	movq	%rax, 0x50(%rsp)
000000000101d70f	movq	0x38(%rsp), %rbp
000000000101d714	addq	$0x40, %rsp
000000000101d718	retq
000000000101d719	movq	0x18(%rsp), %rcx
000000000101d71e	movq	%rcx, %rdx
000000000101d721	lock
000000000101d722	xaddq	%rcx, (%rax)
000000000101d726	leaq	(%rcx,%rbx,8), %rcx
000000000101d72a	cmpq	$0xfff0, %rcx
000000000101d731	jbe	0x101d737
000000000101d733	xorl	%ecx, %ecx
000000000101d735	jmp	0x101d6d2
000000000101d737	subq	%rdx, %rcx
000000000101d73a	cmpq	$0xfff0, %rcx
000000000101d741	jae	0x101d89e
000000000101d747	leaq	0x10(%rax,%rcx), %rcx
000000000101d74c	jmp	0x101d6d2
000000000101d74e	movq	%rcx, 0x28(%rsp)
000000000101d753	movq	0x9b22e(%rip), %rcx
000000000101d75a	movq	%rcx, 0x8(%rax)
000000000101d75e	movq	%rax, 0x9b223(%rip)
000000000101d765	leaq	runtime.gcBitsArenas(%rip), %rax
000000000101d76c	movq	%rax, (%rsp)
000000000101d770	callq	runtime.unlock
000000000101d775	movq	0x28(%rsp), %rax
000000000101d77a	movq	%rax, 0x50(%rsp)
000000000101d77f	movq	0x38(%rsp), %rbp
000000000101d784	addq	$0x40, %rsp
000000000101d788	retq
000000000101d789	movq	0x18(%rsp), %rdx
000000000101d78e	movq	%rdx, %rsi
000000000101d791	lock
000000000101d792	xaddq	%rdx, (%rcx)
000000000101d796	leaq	(%rdx,%rbx,8), %rdx
000000000101d79a	cmpq	$0xfff0, %rdx
000000000101d7a1	jbe	0x101d7aa
000000000101d7a3	xorl	%ecx, %ecx
000000000101d7a5	jmp	0x101d6b2
000000000101d7aa	subq	%rsi, %rdx
000000000101d7ad	cmpq	$0xfff0, %rdx
000000000101d7b4	jae	0x101d8a5
000000000101d7ba	leaq	0x10(%rdx,%rcx), %rcx
000000000101d7bf	jmp	0x101d6b2
000000000101d7c4	movq	0x10(%rsp), %rbx
000000000101d7c9	jmp	0x101d6b0
000000000101d7ce	movq	%rax, 0x20(%rsp)
000000000101d7d3	leaq	runtime.gcBitsArenas(%rip), %rax
000000000101d7da	movq	%rax, (%rsp)
000000000101d7de	callq	runtime.unlock
000000000101d7e3	movq	0x20(%rsp), %rax
000000000101d7e8	movq	%rax, 0x50(%rsp)
000000000101d7ed	movq	0x38(%rsp), %rbp
000000000101d7f2	addq	$0x40, %rsp
000000000101d7f6	retq
000000000101d7f7	movq	0x18(%rsp), %rcx
000000000101d7fc	movq	%rcx, %rbx
000000000101d7ff	lock
000000000101d800	xaddq	%rcx, (%rax)
000000000101d804	leaq	(%rcx,%rdx,8), %rcx
000000000101d808	cmpq	$0xfff0, %rcx
000000000101d80f	jbe	0x101d818
000000000101d811	xorl	%eax, %eax
000000000101d813	jmp	0x101d675
000000000101d818	subq	%rbx, %rcx
000000000101d81b	cmpq	$0xfff0, %rcx
000000000101d822	jae	0x101d8ac
000000000101d828	leaq	0x10(%rcx,%rax), %rax
000000000101d82d	jmp	0x101d675
000000000101d832	movq	0x10(%rsp), %rdx
000000000101d837	jmp	0x101d673
000000000101d83c	movq	%rax, 0x50(%rsp)
000000000101d841	movq	0x38(%rsp), %rbp
000000000101d846	addq	$0x40, %rsp
000000000101d84a	retq
000000000101d84b	movq	%rcx, %rbx
000000000101d84e	lock
000000000101d84f	xaddq	%rcx, (%rax)
000000000101d853	leaq	(%rcx,%rdx,8), %rcx
000000000101d857	cmpq	$0xfff0, %rcx
000000000101d85e	jbe	0x101d86a
000000000101d860	movq	%rbx, %rcx
000000000101d863	xorl	%eax, %eax
000000000101d865	jmp	0x101d627
000000000101d86a	subq	%rbx, %rcx
000000000101d86d	cmpq	$0xfff0, %rcx
000000000101d874	jae	0x101d8b3
000000000101d876	leaq	0x10(%rax,%rcx), %rax
000000000101d87b	movq	%rbx, %rcx
000000000101d87e	jmp	0x101d627
000000000101d883	leaq	0x4e0ea(%rip), %rax
000000000101d88a	movq	%rax, (%rsp)
000000000101d88e	movq	$0x11, 0x8(%rsp)
000000000101d897	callq	runtime.throw
000000000101d89c	ud2
000000000101d89e	callq	runtime.panicindex
000000000101d8a3	ud2
000000000101d8a5	callq	runtime.panicindex
000000000101d8aa	ud2
000000000101d8ac	callq	runtime.panicindex
000000000101d8b1	ud2
000000000101d8b3	callq	runtime.panicindex
000000000101d8b8	ud2
000000000101d8ba	callq	runtime.morestack_noctxt
000000000101d8bf	jmp	runtime.newMarkBits
000000000101d8c4	int3
000000000101d8c5	int3
000000000101d8c6	int3
000000000101d8c7	int3
000000000101d8c8	int3
000000000101d8c9	int3
000000000101d8ca	int3
000000000101d8cb	int3
000000000101d8cc	int3
000000000101d8cd	int3
000000000101d8ce	int3
000000000101d8cf	int3
runtime.newAllocBits:
000000000101d8d0	movq	%gs:0x30, %rcx
000000000101d8d9	cmpq	0x10(%rcx), %rsp
000000000101d8dd	jbe	0x101d90f
000000000101d8df	subq	$0x18, %rsp
000000000101d8e3	movq	%rbp, 0x10(%rsp)
000000000101d8e8	leaq	0x10(%rsp), %rbp
000000000101d8ed	movq	0x20(%rsp), %rax
000000000101d8f2	movq	%rax, (%rsp)
000000000101d8f6	callq	runtime.newMarkBits
000000000101d8fb	movq	0x8(%rsp), %rax
000000000101d900	movq	%rax, 0x28(%rsp)
000000000101d905	movq	0x10(%rsp), %rbp
000000000101d90a	addq	$0x18, %rsp
000000000101d90e	retq
000000000101d90f	callq	runtime.morestack_noctxt
000000000101d914	jmp	runtime.newAllocBits
000000000101d916	int3
000000000101d917	int3
000000000101d918	int3
000000000101d919	int3
000000000101d91a	int3
000000000101d91b	int3
000000000101d91c	int3
000000000101d91d	int3
000000000101d91e	int3
000000000101d91f	int3
runtime.nextMarkBitArenaEpoch:
000000000101d920	movq	%gs:0x30, %rcx
000000000101d929	cmpq	0x10(%rcx), %rsp
000000000101d92d	jbe	0x101d9d4
000000000101d933	subq	$0x10, %rsp
000000000101d937	movq	%rbp, 0x8(%rsp)
000000000101d93c	leaq	0x8(%rsp), %rbp
000000000101d941	leaq	runtime.gcBitsArenas(%rip), %rax
000000000101d948	movq	%rax, (%rsp)
000000000101d94c	callq	runtime.lock
000000000101d951	movq	0x9b048(%rip), %rax
000000000101d958	testq	%rax, %rax
000000000101d95b	je	0x101d989
000000000101d95d	movq	0x9b024(%rip), %rcx
000000000101d964	testq	%rcx, %rcx
000000000101d967	jne	0x101d96e
000000000101d969	jmp	0x101d9cb
000000000101d96b	movq	%rdx, %rax
000000000101d96e	movq	0x8(%rax), %rdx
000000000101d972	testq	%rdx, %rdx
000000000101d975	jne	0x101d96b
000000000101d977	movq	%rcx, 0x8(%rax)
000000000101d97b	movq	0x9b01e(%rip), %rax
000000000101d982	movq	%rax, 0x9afff(%rip)
000000000101d989	movq	0x9b008(%rip), %rax
000000000101d990	movq	%rax, 0x9b009(%rip)
000000000101d997	movq	0x9aff2(%rip), %rax
000000000101d99e	movq	%rax, 0x9aff3(%rip)
000000000101d9a5	xorl	%eax, %eax
000000000101d9a7	leaq	0x9afe2(%rip), %rcx
000000000101d9ae	xchgq	%rax, (%rcx)
000000000101d9b1	leaq	runtime.gcBitsArenas(%rip), %rax
000000000101d9b8	movq	%rax, (%rsp)
000000000101d9bc	callq	runtime.unlock
000000000101d9c1	movq	0x8(%rsp), %rbp
000000000101d9c6	addq	$0x10, %rsp
000000000101d9ca	retq
000000000101d9cb	movq	%rax, 0x9afb6(%rip)
000000000101d9d2	jmp	0x101d989
000000000101d9d4	callq	runtime.morestack_noctxt
000000000101d9d9	jmp	runtime.nextMarkBitArenaEpoch
000000000101d9de	int3
000000000101d9df	int3
runtime.newArenaMayUnlock:
000000000101d9e0	movq	%gs:0x30, %rcx
000000000101d9e9	cmpq	0x10(%rcx), %rsp
000000000101d9ed	jbe	0x101dabc
000000000101d9f3	subq	$0x30, %rsp
000000000101d9f7	movq	%rbp, 0x28(%rsp)
000000000101d9fc	leaq	0x28(%rsp), %rbp
000000000101da01	movq	0x9af80(%rip), %rax
000000000101da08	testq	%rax, %rax
000000000101da0b	je	0x101da52
000000000101da0d	movq	%rax, 0x20(%rsp)
000000000101da12	movq	0x8(%rax), %rcx
000000000101da16	movq	%rcx, 0x9af6b(%rip)
000000000101da1d	movq	%rax, (%rsp)
000000000101da21	movq	$0x10000, 0x8(%rsp)
000000000101da2a	callq	runtime.memclrNoHeapPointers
000000000101da2f	movq	0x20(%rsp), %rax
000000000101da34	movq	$0x0, 0x8(%rax)
000000000101da3c	movq	$0x0, (%rax)
000000000101da43	movq	%rax, 0x38(%rsp)
000000000101da48	movq	0x28(%rsp), %rbp
000000000101da4d	addq	$0x30, %rsp
000000000101da51	retq
000000000101da52	leaq	runtime.gcBitsArenas(%rip), %rax
000000000101da59	movq	%rax, (%rsp)
000000000101da5d	callq	runtime.unlock
000000000101da62	movq	$0x10000, (%rsp)
000000000101da6a	leaq	0xb7ea7(%rip), %rax
000000000101da71	movq	%rax, 0x8(%rsp)
000000000101da76	callq	runtime.sysAlloc
000000000101da7b	movq	0x10(%rsp), %rax
000000000101da80	testq	%rax, %rax
000000000101da83	je	0x101daa1
000000000101da85	movq	%rax, 0x18(%rsp)
000000000101da8a	leaq	runtime.gcBitsArenas(%rip), %rax
000000000101da91	movq	%rax, (%rsp)
000000000101da95	callq	runtime.lock
000000000101da9a	movq	0x18(%rsp), %rax
000000000101da9f	jmp	0x101da34
000000000101daa1	leaq	0x4fa69(%rip), %rax
000000000101daa8	movq	%rax, (%rsp)
000000000101daac	movq	$0x1f, 0x8(%rsp)
000000000101dab5	callq	runtime.throw
000000000101daba	ud2
000000000101dabc	callq	runtime.morestack_noctxt
000000000101dac1	jmp	runtime.newArenaMayUnlock
000000000101dac6	int3
000000000101dac7	int3
000000000101dac8	int3
000000000101dac9	int3
000000000101daca	int3
000000000101dacb	int3
000000000101dacc	int3
000000000101dacd	int3
000000000101dace	int3
000000000101dacf	int3
runtime.newBucket:
000000000101dad0	movq	%gs:0x30, %rcx
000000000101dad9	cmpq	0x10(%rcx), %rsp
000000000101dadd	jbe	0x101db95
000000000101dae3	subq	$0x30, %rsp
000000000101dae7	movq	%rbp, 0x28(%rsp)
000000000101daec	leaq	0x28(%rsp), %rbp
000000000101daf1	movq	0x40(%rsp), %rax
000000000101daf6	shlq	$0x3, %rax
000000000101dafa	movq	0x38(%rsp), %rdx
000000000101daff	cmpq	$0x1, %rdx
000000000101db03	jne	0x101db6a
000000000101db05	addq	$0xb0, %rax
000000000101db0b	movq	%rax, 0x20(%rsp)
000000000101db10	movq	%rax, (%rsp)
000000000101db14	movq	$0x0, 0x8(%rsp)
000000000101db1d	leaq	0xb7dec(%rip), %rcx
000000000101db24	movq	%rcx, 0x10(%rsp)
000000000101db29	callq	runtime.persistentalloc
000000000101db2e	movq	0x18(%rsp), %rax
000000000101db33	movq	runtime.bucketmem(%rip), %rcx
000000000101db3a	movq	0x20(%rsp), %rdx
000000000101db3f	addq	%rdx, %rcx
000000000101db42	movq	%rcx, runtime.bucketmem(%rip)
000000000101db49	movq	0x38(%rsp), %rcx
000000000101db4e	movq	%rcx, 0x10(%rax)
000000000101db52	movq	0x40(%rsp), %rcx
000000000101db57	movq	%rcx, 0x28(%rax)
000000000101db5b	movq	%rax, 0x48(%rsp)
000000000101db60	movq	0x28(%rsp), %rbp
000000000101db65	addq	$0x30, %rsp
000000000101db69	retq
000000000101db6a	leaq	-0x2(%rdx), %rbx
000000000101db6e	cmpq	$0x1, %rbx
000000000101db72	ja	0x101db7a
000000000101db74	addq	$0x40, %rax
000000000101db78	jmp	0x101db0b
000000000101db7a	leaq	0x4ef34(%rip), %rax
000000000101db81	movq	%rax, (%rsp)
000000000101db85	movq	$0x1b, 0x8(%rsp)
000000000101db8e	callq	runtime.throw
000000000101db93	ud2
000000000101db95	callq	runtime.morestack_noctxt
000000000101db9a	jmp	runtime.newBucket
000000000101db9f	int3
runtime.(*bucket).mp:
000000000101dba0	movq	%gs:0x30, %rcx
000000000101dba9	cmpq	0x10(%rcx), %rsp
000000000101dbad	jbe	0x101dbfc
000000000101dbaf	subq	$0x18, %rsp
000000000101dbb3	movq	%rbp, 0x10(%rsp)
000000000101dbb8	leaq	0x10(%rsp), %rbp
000000000101dbbd	movq	0x20(%rsp), %rax
000000000101dbc2	cmpq	$0x1, 0x10(%rax)
000000000101dbc7	jne	0x101dbe1
000000000101dbc9	movq	0x28(%rax), %rcx
000000000101dbcd	leaq	0x30(%rax,%rcx,8), %rax
000000000101dbd2	movq	%rax, 0x28(%rsp)
000000000101dbd7	movq	0x10(%rsp), %rbp
000000000101dbdc	addq	$0x18, %rsp
000000000101dbe0	retq
000000000101dbe1	leaq	0x4e1f4(%rip), %rax
000000000101dbe8	movq	%rax, (%rsp)
000000000101dbec	movq	$0x14, 0x8(%rsp)
000000000101dbf5	callq	runtime.throw
000000000101dbfa	ud2
000000000101dbfc	callq	runtime.morestack_noctxt
000000000101dc01	jmp	"runtime.(*bucket).mp"
000000000101dc03	int3
000000000101dc04	int3
000000000101dc05	int3
000000000101dc06	int3
000000000101dc07	int3
000000000101dc08	int3
000000000101dc09	int3
000000000101dc0a	int3
000000000101dc0b	int3
000000000101dc0c	int3
000000000101dc0d	int3
000000000101dc0e	int3
000000000101dc0f	int3
runtime.(*bucket).bp:
000000000101dc10	movq	%gs:0x30, %rcx
000000000101dc19	cmpq	0x10(%rcx), %rsp
000000000101dc1d	jbe	0x101dc75
000000000101dc1f	subq	$0x18, %rsp
000000000101dc23	movq	%rbp, 0x10(%rsp)
000000000101dc28	leaq	0x10(%rsp), %rbp
000000000101dc2d	movq	0x20(%rsp), %rax
000000000101dc32	movq	0x10(%rax), %rcx
000000000101dc36	cmpq	$0x2, %rcx
000000000101dc3a	je	0x101dc42
000000000101dc3c	cmpq	$0x3, %rcx
000000000101dc40	jne	0x101dc5a
000000000101dc42	movq	0x28(%rax), %rcx
000000000101dc46	leaq	0x30(%rax,%rcx,8), %rax
000000000101dc4b	movq	%rax, 0x28(%rsp)
000000000101dc50	movq	0x10(%rsp), %rbp
000000000101dc55	addq	$0x18, %rsp
000000000101dc59	retq
000000000101dc5a	leaq	0x4e167(%rip), %rax
000000000101dc61	movq	%rax, (%rsp)
000000000101dc65	movq	$0x14, 0x8(%rsp)
000000000101dc6e	callq	runtime.throw
000000000101dc73	ud2
000000000101dc75	callq	runtime.morestack_noctxt
000000000101dc7a	jmp	"runtime.(*bucket).bp"
000000000101dc7c	int3
000000000101dc7d	int3
000000000101dc7e	int3
000000000101dc7f	int3
runtime.stkbucket:
000000000101dc80	movq	%gs:0x30, %rcx
000000000101dc89	cmpq	0x10(%rcx), %rsp
000000000101dc8d	jbe	0x101dfa6
000000000101dc93	subq	$0x58, %rsp
000000000101dc97	movq	%rbp, 0x50(%rsp)
000000000101dc9c	leaq	0x50(%rsp), %rbp
000000000101dca1	cmpq	$0x0, 0x9aaef(%rip)
000000000101dca9	je	0x101df2a
000000000101dcaf	movq	0x70(%rsp), %rcx
000000000101dcb4	movq	0x78(%rsp), %rdx
000000000101dcb9	xorl	%eax, %eax
000000000101dcbb	xorl	%ebx, %ebx
000000000101dcbd	jmp	0x101dcde
000000000101dcbf	movq	(%rcx,%rax,8), %rsi
000000000101dcc3	incq	%rax
000000000101dcc6	addq	%rbx, %rsi
000000000101dcc9	movq	%rsi, %rdi
000000000101dccc	shlq	$0xa, %rsi
000000000101dcd0	leaq	(%rdi,%rsi), %rbx
000000000101dcd4	movq	%rbx, %rsi
000000000101dcd7	shrq	$0x6, %rbx
000000000101dcdb	xorq	%rsi, %rbx
000000000101dcde	cmpq	%rdx, %rax
000000000101dce1	jl	0x101dcbf
000000000101dce3	movq	runtime.buckhash(%rip), %rsi
000000000101dcea	testb	%al, (%rsi)
000000000101dcec	movq	0x68(%rsp), %rdi
000000000101dcf1	addq	%rdi, %rbx
000000000101dcf4	movq	%rbx, %r8
000000000101dcf7	shlq	$0xa, %rbx
000000000101dcfb	addq	%r8, %rbx
000000000101dcfe	movq	%rbx, %r8
000000000101dd01	shrq	$0x6, %rbx
000000000101dd05	xorq	%rbx, %r8
000000000101dd08	leaq	(%r8,%r8,8), %rbx
000000000101dd0c	movq	%rbx, %r8
000000000101dd0f	shrq	$0xb, %rbx
000000000101dd13	xorq	%r8, %rbx
000000000101dd16	movabsq	$-0x4595e043ace6e56e, %rax
000000000101dd20	movq	%rdx, %r8
000000000101dd23	mulq	%rbx
000000000101dd26	shrq	$0x11, %rdx
000000000101dd2a	imulq	$0x2bf1f, %rdx, %rdx
000000000101dd31	movq	%rbx, %r9
000000000101dd34	subq	%rdx, %rbx
000000000101dd37	cmpq	$0x2bf1f, %rbx
000000000101dd3e	jae	0x101df84
000000000101dd44	movq	%r9, 0x40(%rsp)
000000000101dd49	movq	%rbx, 0x38(%rsp)
000000000101dd4e	movq	(%rsi,%rbx,8), %rax
000000000101dd52	movq	0x60(%rsp), %rdx
000000000101dd57	jmp	0x101dd5c
000000000101dd59	movq	(%rax), %rax
000000000101dd5c	testq	%rax, %rax
000000000101dd5f	je	0x101de0c
000000000101dd65	movq	0x10(%rax), %rsi
000000000101dd69	cmpq	%rdx, %rsi
000000000101dd6c	jne	0x101dd59
000000000101dd6e	movq	0x18(%rax), %rsi
000000000101dd72	cmpq	%rsi, %r9
000000000101dd75	jne	0x101dd59
000000000101dd77	movq	0x20(%rax), %rsi
000000000101dd7b	cmpq	%rsi, %rdi
000000000101dd7e	jne	0x101dd59
000000000101dd80	leaq	0x30(%rax), %rsi
000000000101dd84	testb	%al, (%rsi)
000000000101dd86	movq	0x28(%rax), %r10
000000000101dd8a	cmpq	$0x20, %r10
000000000101dd8e	ja	0x101df7d
000000000101dd94	movq	%rax, 0x48(%rsp)
000000000101dd99	movq	%rsi, (%rsp)
000000000101dd9d	movq	%r10, 0x8(%rsp)
000000000101dda2	movq	%r10, 0x10(%rsp)
000000000101dda7	movq	%rcx, 0x18(%rsp)
000000000101ddac	movq	%r8, 0x20(%rsp)
000000000101ddb1	movq	0x80(%rsp), %rax
000000000101ddb9	movq	%rax, 0x28(%rsp)
000000000101ddbe	callq	runtime.eqslice
000000000101ddc3	leaq	0x30(%rsp), %rax
000000000101ddc8	cmpb	$0x0, (%rax)
000000000101ddcb	jne	0x101ddf5
000000000101ddcd	movq	0x48(%rsp), %rax
000000000101ddd2	movq	0x70(%rsp), %rcx
000000000101ddd7	movq	0x60(%rsp), %rdx
000000000101dddc	movq	0x38(%rsp), %rbx
000000000101dde1	movq	0x68(%rsp), %rdi
000000000101dde6	movq	0x78(%rsp), %r8
000000000101ddeb	movq	0x40(%rsp), %r9
000000000101ddf0	jmp	0x101dd59
000000000101ddf5	movq	0x48(%rsp), %rax
000000000101ddfa	movq	%rax, 0x90(%rsp)
000000000101de02	movq	0x50(%rsp), %rbp
000000000101de07	addq	$0x58, %rsp
000000000101de0b	retq
000000000101de0c	movzbl	0x88(%rsp), %eax
000000000101de14	testb	%al, %al
000000000101de16	je	0x101df14
000000000101de1c	movq	%rdx, (%rsp)
000000000101de20	movq	%r8, 0x8(%rsp)
000000000101de25	callq	runtime.newBucket
000000000101de2a	movq	0x10(%rsp), %rax
000000000101de2f	leaq	0x30(%rax), %rcx
000000000101de33	testb	%al, (%rcx)
000000000101de35	movq	0x28(%rax), %rdx
000000000101de39	cmpq	$0x20, %rdx
000000000101de3d	ja	0x101df76
000000000101de43	movq	0x78(%rsp), %rbx
000000000101de48	cmpq	%rbx, %rdx
000000000101de4b	cmovgq	%rbx, %rdx
000000000101de4f	movq	0x70(%rsp), %rbx
000000000101de54	cmpq	%rbx, %rcx
000000000101de57	jne	0x101deee
000000000101de5d	movq	0x40(%rsp), %rcx
000000000101de62	movq	%rcx, 0x18(%rax)
000000000101de66	movq	0x68(%rsp), %rcx
000000000101de6b	movq	%rcx, 0x20(%rax)
000000000101de6f	movq	runtime.buckhash(%rip), %rcx
000000000101de76	testb	%al, (%rcx)
000000000101de78	movq	0x38(%rsp), %rdx
000000000101de7d	movq	(%rcx,%rdx,8), %rcx
000000000101de81	movq	%rcx, (%rax)
000000000101de84	movq	runtime.buckhash(%rip), %rcx
000000000101de8b	testb	%al, (%rcx)
000000000101de8d	movq	%rax, (%rcx,%rdx,8)
000000000101de91	movq	0x60(%rsp), %rcx
000000000101de96	cmpq	$0x1, %rcx
000000000101de9a	jne	0x101dec0
000000000101de9c	movq	runtime.mbuckets(%rip), %rcx
000000000101dea3	movq	%rcx, 0x8(%rax)
000000000101dea7	movq	%rax, runtime.mbuckets(%rip)
000000000101deae	movq	%rax, 0x90(%rsp)
000000000101deb6	movq	0x50(%rsp), %rbp
000000000101debb	addq	$0x58, %rsp
000000000101debf	retq
000000000101dec0	cmpq	$0x3, %rcx
000000000101dec4	jne	0x101deda
000000000101dec6	movq	runtime.xbuckets(%rip), %rcx
000000000101decd	movq	%rcx, 0x8(%rax)
000000000101ded1	movq	%rax, runtime.xbuckets(%rip)
000000000101ded8	jmp	0x101deae
000000000101deda	movq	runtime.bbuckets(%rip), %rcx
000000000101dee1	movq	%rcx, 0x8(%rax)
000000000101dee5	movq	%rax, runtime.bbuckets(%rip)
000000000101deec	jmp	0x101deae
000000000101deee	movq	%rax, 0x48(%rsp)
000000000101def3	movq	%rcx, (%rsp)
000000000101def7	movq	%rbx, 0x8(%rsp)
000000000101defc	shlq	$0x3, %rdx
000000000101df00	movq	%rdx, 0x10(%rsp)
000000000101df05	callq	runtime.memmove
000000000101df0a	movq	0x48(%rsp), %rax
000000000101df0f	jmp	0x101de5d
000000000101df14	movq	$0x0, 0x90(%rsp)
000000000101df20	movq	0x50(%rsp), %rbp
000000000101df25	addq	$0x58, %rsp
000000000101df29	retq
000000000101df2a	movq	$0x15f8f8, (%rsp)
000000000101df32	leaq	0xb79d7(%rip), %rax
000000000101df39	movq	%rax, 0x8(%rsp)
000000000101df3e	callq	runtime.sysAlloc
000000000101df43	movq	0x10(%rsp), %rax
000000000101df48	cmpl	$0x0, 0xb6ce1(%rip)
000000000101df4f	jne	0x101df68
000000000101df51	movq	%rax, runtime.buckhash(%rip)
000000000101df58	cmpq	$0x0, 0x9a838(%rip)
000000000101df60	jne	0x101dcaf
000000000101df66	jmp	0x101df8b
000000000101df68	leaq	runtime.buckhash(%rip), %rdi
000000000101df6f	callq	runtime.gcWriteBarrier
000000000101df74	jmp	0x101df58
000000000101df76	callq	runtime.panicslice
000000000101df7b	ud2
000000000101df7d	callq	runtime.panicslice
000000000101df82	ud2
000000000101df84	callq	runtime.panicindex
000000000101df89	ud2
000000000101df8b	leaq	0x4f57f(%rip), %rax
000000000101df92	movq	%rax, (%rsp)
000000000101df96	movq	$0x1f, 0x8(%rsp)
000000000101df9f	callq	runtime.throw
000000000101dfa4	ud2
000000000101dfa6	callq	runtime.morestack_noctxt
000000000101dfab	jmp	runtime.stkbucket
runtime.eqslice:
000000000101dfb0	movq	0x10(%rsp), %rax
000000000101dfb5	movq	0x28(%rsp), %rcx
000000000101dfba	cmpq	%rcx, %rax
000000000101dfbd	jne	0x101dfee
000000000101dfbf	movq	0x20(%rsp), %rcx
000000000101dfc4	movq	0x8(%rsp), %rdx
000000000101dfc9	xorl	%ebx, %ebx
000000000101dfcb	jmp	0x101dfd0
000000000101dfcd	incq	%rbx
000000000101dfd0	cmpq	%rax, %rbx
000000000101dfd3	jge	0x101dfe8
000000000101dfd5	movq	(%rdx,%rbx,8), %rsi
000000000101dfd9	movq	(%rcx,%rbx,8), %rdi
000000000101dfdd	cmpq	%rdi, %rsi
000000000101dfe0	je	0x101dfcd
000000000101dfe2	movb	$0x0, 0x38(%rsp)
000000000101dfe7	retq
000000000101dfe8	movb	$0x1, 0x38(%rsp)
000000000101dfed	retq
000000000101dfee	movb	$0x0, 0x38(%rsp)
000000000101dff3	retq
000000000101dff4	int3
000000000101dff5	int3
000000000101dff6	int3
000000000101dff7	int3
000000000101dff8	int3
000000000101dff9	int3
000000000101dffa	int3
000000000101dffb	int3
000000000101dffc	int3
000000000101dffd	int3
000000000101dffe	int3
000000000101dfff	int3
runtime.mProf_NextCycle:
000000000101e000	movq	%gs:0x30, %rcx
000000000101e009	cmpq	0x10(%rcx), %rsp
000000000101e00d	jbe	0x101e071
000000000101e00f	subq	$0x10, %rsp
000000000101e013	movq	%rbp, 0x8(%rsp)
000000000101e018	leaq	0x8(%rsp), %rbp
000000000101e01d	leaq	runtime.proflock(%rip), %rax
000000000101e024	movq	%rax, (%rsp)
000000000101e028	callq	runtime.lock
000000000101e02d	movl	runtime.mProf(%rip), %eax
000000000101e033	incl	%eax
000000000101e035	movl	$0xaaaaaaab, %ecx
000000000101e03a	imulq	%rax, %rcx
000000000101e03e	shrq	$0x3a, %rcx
000000000101e042	leal	(%rcx,%rcx,2), %ecx
000000000101e045	shll	$0x19, %ecx
000000000101e048	subl	%ecx, %eax
000000000101e04a	movl	%eax, runtime.mProf(%rip)
000000000101e050	movb	$0x0, 0xb6b4d(%rip)
000000000101e057	leaq	runtime.proflock(%rip), %rax
000000000101e05e	movq	%rax, (%rsp)
000000000101e062	callq	runtime.unlock
000000000101e067	movq	0x8(%rsp), %rbp
000000000101e06c	addq	$0x10, %rsp
000000000101e070	retq
000000000101e071	callq	runtime.morestack_noctxt
000000000101e076	jmp	runtime.mProf_NextCycle
000000000101e078	int3
000000000101e079	int3
000000000101e07a	int3
000000000101e07b	int3
000000000101e07c	int3
000000000101e07d	int3
000000000101e07e	int3
000000000101e07f	int3
runtime.mProf_Flush:
000000000101e080	movq	%gs:0x30, %rcx
000000000101e089	cmpq	0x10(%rcx), %rsp
000000000101e08d	jbe	0x101e0e1
000000000101e08f	subq	$0x10, %rsp
000000000101e093	movq	%rbp, 0x8(%rsp)
000000000101e098	leaq	0x8(%rsp), %rbp
000000000101e09d	leaq	runtime.proflock(%rip), %rax
000000000101e0a4	movq	%rax, (%rsp)
000000000101e0a8	callq	runtime.lock
000000000101e0ad	leaq	0xb6af0(%rip), %rax
000000000101e0b4	cmpb	$0x0, (%rax)
000000000101e0b7	je	0x101e0d3
000000000101e0b9	leaq	runtime.proflock(%rip), %rax
000000000101e0c0	movq	%rax, (%rsp)
000000000101e0c4	callq	runtime.unlock
000000000101e0c9	movq	0x8(%rsp), %rbp
000000000101e0ce	addq	$0x10, %rsp
000000000101e0d2	retq
000000000101e0d3	callq	runtime.mProf_FlushLocked
000000000101e0d8	movb	$0x1, 0xb6ac5(%rip)
000000000101e0df	jmp	0x101e0b9
000000000101e0e1	callq	runtime.morestack_noctxt
000000000101e0e6	jmp	runtime.mProf_Flush
000000000101e0e8	int3
000000000101e0e9	int3
000000000101e0ea	int3
000000000101e0eb	int3
000000000101e0ec	int3
000000000101e0ed	int3
000000000101e0ee	int3
000000000101e0ef	int3
runtime.mProf_FlushLocked:
000000000101e0f0	movq	%gs:0x30, %rcx
000000000101e0f9	cmpq	0x10(%rcx), %rsp
000000000101e0fd	jbe	0x101e1ca
000000000101e103	subq	$0x28, %rsp
000000000101e107	movq	%rbp, 0x20(%rsp)
000000000101e10c	leaq	0x20(%rsp), %rbp
000000000101e111	movl	runtime.mProf(%rip), %eax
000000000101e117	movl	%eax, 0x14(%rsp)
000000000101e11b	movq	runtime.mbuckets(%rip), %rcx
000000000101e122	jmp	0x101e1b7
000000000101e127	movq	%rcx, 0x18(%rsp)
000000000101e12c	movq	%rcx, (%rsp)
000000000101e130	callq	"runtime.(*bucket).mp"
000000000101e135	movq	0x8(%rsp), %rax
000000000101e13a	movl	$0xaaaaaaab, %ecx
000000000101e13f	movl	0x14(%rsp), %edx
000000000101e143	imulq	%rdx, %rcx
000000000101e147	shrq	$0x21, %rcx
000000000101e14b	leal	(%rcx,%rcx,2), %ecx
000000000101e14e	movl	%edx, %ebx
000000000101e150	subl	%ecx, %edx
000000000101e152	shlq	$0x5, %rdx
000000000101e156	movq	0x20(%rax,%rdx), %rcx
000000000101e15b	addq	(%rax), %rcx
000000000101e15e	movq	%rcx, (%rax)
000000000101e161	movq	0x28(%rax,%rdx), %rcx
000000000101e166	addq	0x8(%rax), %rcx
000000000101e16a	movq	%rcx, 0x8(%rax)
000000000101e16e	movq	0x30(%rax,%rdx), %rcx
000000000101e173	addq	0x10(%rax), %rcx
000000000101e177	movq	%rcx, 0x10(%rax)
000000000101e17b	movq	0x38(%rax,%rdx), %rcx
000000000101e180	addq	0x18(%rax), %rcx
000000000101e184	movq	%rcx, 0x18(%rax)
000000000101e188	movq	$0x0, 0x20(%rax,%rdx)
000000000101e191	movq	$0x0, 0x28(%rax,%rdx)
000000000101e19a	movq	$0x0, 0x30(%rax,%rdx)
000000000101e1a3	movq	$0x0, 0x38(%rax,%rdx)
000000000101e1ac	movq	0x18(%rsp), %rax
000000000101e1b1	movq	0x8(%rax), %rcx
000000000101e1b5	movl	%ebx, %eax
000000000101e1b7	testq	%rcx, %rcx
000000000101e1ba	jne	0x101e127
000000000101e1c0	movq	0x20(%rsp), %rbp
000000000101e1c5	addq	$0x28, %rsp
000000000101e1c9	retq
000000000101e1ca	callq	runtime.morestack_noctxt
000000000101e1cf	jmp	runtime.mProf_FlushLocked
000000000101e1d4	int3
000000000101e1d5	int3
000000000101e1d6	int3
000000000101e1d7	int3
000000000101e1d8	int3
000000000101e1d9	int3
000000000101e1da	int3
000000000101e1db	int3
000000000101e1dc	int3
000000000101e1dd	int3
000000000101e1de	int3
000000000101e1df	int3
runtime.mProf_Malloc:
000000000101e1e0	movq	%gs:0x30, %rcx
000000000101e1e9	leaq	-0xf0(%rsp), %rax
000000000101e1f1	cmpq	0x10(%rcx), %rax
000000000101e1f5	jbe	0x101e39a
000000000101e1fb	subq	$0x170, %rsp
000000000101e202	movq	%rbp, 0x168(%rsp)
000000000101e20a	leaq	0x168(%rsp), %rbp
000000000101e212	leaq	0x48(%rsp), %rdi
000000000101e217	xorps	%xmm0, %xmm0
000000000101e21a	movq	%rbp, -0x10(%rsp)
000000000101e21f	leaq	-0x10(%rsp), %rbp
000000000101e224	callq	0x10491f4
000000000101e229	movq	(%rbp), %rbp
000000000101e22d	movq	$0x4, (%rsp)
000000000101e235	leaq	0x48(%rsp), %rax
000000000101e23a	movq	%rax, 0x8(%rsp)
000000000101e23f	movq	$0x20, 0x10(%rsp)
000000000101e248	movq	$0x20, 0x18(%rsp)
000000000101e251	callq	runtime.callers
000000000101e256	movq	0x20(%rsp), %rax
000000000101e25b	movq	%rax, 0x40(%rsp)
000000000101e260	leaq	runtime.proflock(%rip), %rcx
000000000101e267	movq	%rcx, (%rsp)
000000000101e26b	callq	runtime.lock
000000000101e270	movq	0x40(%rsp), %rax
000000000101e275	cmpq	$0x20, %rax
000000000101e279	ja	0x101e393
000000000101e27f	movq	$0x1, (%rsp)
000000000101e287	movq	0x180(%rsp), %rcx
000000000101e28f	movq	%rcx, 0x8(%rsp)
000000000101e294	leaq	0x48(%rsp), %rdx
000000000101e299	movq	%rdx, 0x10(%rsp)
000000000101e29e	movq	%rax, 0x18(%rsp)
000000000101e2a3	movq	$0x20, 0x20(%rsp)
000000000101e2ac	movb	$0x1, 0x28(%rsp)
000000000101e2b1	callq	runtime.stkbucket
000000000101e2b6	movq	0x30(%rsp), %rax
000000000101e2bb	movq	%rax, 0x148(%rsp)
000000000101e2c3	movl	runtime.mProf(%rip), %ecx
000000000101e2c9	movl	%ecx, 0x3c(%rsp)
000000000101e2cd	movq	%rax, (%rsp)
000000000101e2d1	callq	"runtime.(*bucket).mp"
000000000101e2d6	movq	0x8(%rsp), %rax
000000000101e2db	testb	%al, (%rax)
000000000101e2dd	movl	0x3c(%rsp), %ecx
000000000101e2e1	addl	$0x2, %ecx
000000000101e2e4	movl	$0xaaaaaaab, %edx
000000000101e2e9	imulq	%rcx, %rdx
000000000101e2ed	shrq	$0x21, %rdx
000000000101e2f1	leal	(%rdx,%rdx,2), %edx
000000000101e2f4	subl	%edx, %ecx
000000000101e2f6	shlq	$0x5, %rcx
000000000101e2fa	movq	0x20(%rax,%rcx), %rdx
000000000101e2ff	incq	%rdx
000000000101e302	movq	%rdx, 0x20(%rax,%rcx)
000000000101e307	movq	0x30(%rax,%rcx), %rdx
000000000101e30c	movq	0x180(%rsp), %rbx
000000000101e314	addq	%rbx, %rdx
000000000101e317	movq	%rdx, 0x30(%rax,%rcx)
000000000101e31c	leaq	runtime.proflock(%rip), %rax
000000000101e323	movq	%rax, (%rsp)
000000000101e327	callq	runtime.unlock
000000000101e32c	xorps	%xmm0, %xmm0
000000000101e32f	movups	%xmm0, 0x150(%rsp)
000000000101e337	movq	$0x0, 0x160(%rsp)
000000000101e343	leaq	runtime.mProf_Malloc.func1(%rip), %rax
000000000101e34a	movq	%rax, 0x150(%rsp)
000000000101e352	movq	0x178(%rsp), %rax
000000000101e35a	movq	%rax, 0x158(%rsp)
000000000101e362	movq	0x148(%rsp), %rax
000000000101e36a	movq	%rax, 0x160(%rsp)
000000000101e372	leaq	0x150(%rsp), %rax
000000000101e37a	movq	%rax, (%rsp)
000000000101e37e	callq	runtime.systemstack
000000000101e383	movq	0x168(%rsp), %rbp
000000000101e38b	addq	$0x170, %rsp
000000000101e392	retq
000000000101e393	callq	runtime.panicslice
000000000101e398	ud2
000000000101e39a	callq	runtime.morestack_noctxt
000000000101e39f	jmp	runtime.mProf_Malloc
000000000101e3a4	int3
000000000101e3a5	int3
000000000101e3a6	int3
000000000101e3a7	int3
000000000101e3a8	int3
000000000101e3a9	int3
000000000101e3aa	int3
000000000101e3ab	int3
000000000101e3ac	int3
000000000101e3ad	int3
000000000101e3ae	int3
000000000101e3af	int3
runtime.mProf_Free:
000000000101e3b0	movq	%gs:0x30, %rcx
000000000101e3b9	cmpq	0x10(%rcx), %rsp
000000000101e3bd	jbe	0x101e455
000000000101e3c3	subq	$0x20, %rsp
000000000101e3c7	movq	%rbp, 0x18(%rsp)
000000000101e3cc	leaq	0x18(%rsp), %rbp
000000000101e3d1	leaq	runtime.proflock(%rip), %rax
000000000101e3d8	movq	%rax, (%rsp)
000000000101e3dc	callq	runtime.lock
000000000101e3e1	movl	runtime.mProf(%rip), %eax
000000000101e3e7	movl	%eax, 0x14(%rsp)
000000000101e3eb	movq	0x28(%rsp), %rcx
000000000101e3f0	movq	%rcx, (%rsp)
000000000101e3f4	callq	"runtime.(*bucket).mp"
000000000101e3f9	movq	0x8(%rsp), %rax
000000000101e3fe	testb	%al, (%rax)
000000000101e400	movl	0x14(%rsp), %ecx
000000000101e404	incl	%ecx
000000000101e406	movl	$0xaaaaaaab, %edx
000000000101e40b	imulq	%rcx, %rdx
000000000101e40f	shrq	$0x21, %rdx
000000000101e413	leal	(%rdx,%rdx,2), %edx
000000000101e416	subl	%edx, %ecx
000000000101e418	shlq	$0x5, %rcx
000000000101e41c	movq	0x28(%rax,%rcx), %rdx
000000000101e421	incq	%rdx
000000000101e424	movq	%rdx, 0x28(%rax,%rcx)
000000000101e429	movq	0x38(%rax,%rcx), %rdx
000000000101e42e	movq	0x30(%rsp), %rbx
000000000101e433	addq	%rbx, %rdx
000000000101e436	movq	%rdx, 0x38(%rax,%rcx)
000000000101e43b	leaq	runtime.proflock(%rip), %rax
000000000101e442	movq	%rax, (%rsp)
000000000101e446	callq	runtime.unlock
000000000101e44b	movq	0x18(%rsp), %rbp
000000000101e450	addq	$0x20, %rsp
000000000101e454	retq
000000000101e455	callq	runtime.morestack_noctxt
000000000101e45a	jmp	runtime.mProf_Free
000000000101e45f	int3
runtime.blockevent:
000000000101e460	movq	%gs:0x30, %rcx
000000000101e469	cmpq	0x10(%rcx), %rsp
000000000101e46d	jbe	0x101e4d6
000000000101e46f	subq	$0x20, %rsp
000000000101e473	movq	%rbp, 0x18(%rsp)
000000000101e478	leaq	0x18(%rsp), %rbp
000000000101e47d	movq	0x28(%rsp), %rax
000000000101e482	testq	%rax, %rax
000000000101e485	movl	$0x1, %ecx
000000000101e48a	cmovleq	%rcx, %rax
000000000101e48e	movq	%rax, 0x28(%rsp)
000000000101e493	movq	%rax, (%rsp)
000000000101e497	callq	runtime.blocksampled
000000000101e49c	leaq	0x8(%rsp), %rax
000000000101e4a1	cmpb	$0x0, (%rax)
000000000101e4a4	jne	0x101e4b0
000000000101e4a6	movq	0x18(%rsp), %rbp
000000000101e4ab	addq	$0x20, %rsp
000000000101e4af	retq
000000000101e4b0	movq	0x28(%rsp), %rax
000000000101e4b5	movq	%rax, (%rsp)
000000000101e4b9	movq	0x30(%rsp), %rax
000000000101e4be	incq	%rax
000000000101e4c1	movq	%rax, 0x8(%rsp)
000000000101e4c6	movq	$0x2, 0x10(%rsp)
000000000101e4cf	callq	runtime.saveblockevent
000000000101e4d4	jmp	0x101e4a6
000000000101e4d6	callq	runtime.morestack_noctxt
000000000101e4db	jmp	runtime.blockevent
000000000101e4dd	int3
000000000101e4de	int3
000000000101e4df	int3
runtime.blocksampled:
000000000101e4e0	movq	runtime.blockprofilerate(%rip), %rcx
000000000101e4e7	testq	%rcx, %rcx
000000000101e4ea	jg	0x101e4f2
000000000101e4ec	movb	$0x0, 0x10(%rsp)
000000000101e4f1	retq
000000000101e4f2	movq	0x8(%rsp), %rdx
000000000101e4f7	cmpq	%rdx, %rcx
000000000101e4fa	jle	0x101e55d
000000000101e4fc	movq	%gs:0x30, %rbx
000000000101e505	movq	0x30(%rbx), %rbx
000000000101e509	movl	0x11c(%rbx), %esi
000000000101e50f	movl	0x120(%rbx), %edi
000000000101e515	movl	%esi, %r8d
000000000101e518	shll	$0x11, %esi
000000000101e51b	xorl	%r8d, %esi
000000000101e51e	movl	%edi, %r8d
000000000101e521	xorl	%esi, %edi
000000000101e523	shrl	$0x7, %esi
000000000101e526	xorl	%edi, %esi
000000000101e528	movl	%r8d, %edi
000000000101e52b	shrl	$0x10, %r8d
000000000101e52f	xorl	%esi, %r8d
000000000101e532	leal	(%rdi,%r8), %eax
000000000101e536	movq	%rdx, %rsi
000000000101e539	cmpq	$-0x1, %rcx
000000000101e53d	je	0x101e546
000000000101e53f	cqto
000000000101e541	idivq	%rcx
000000000101e544	jmp	0x101e54b
000000000101e546	negq	%rax
000000000101e549	xorl	%edx, %edx
000000000101e54b	movl	%edi, 0x11c(%rbx)
000000000101e551	movl	%r8d, 0x120(%rbx)
000000000101e558	cmpq	%rsi, %rdx
000000000101e55b	jg	0x101e4ec
000000000101e55d	movb	$0x1, 0x10(%rsp)
000000000101e562	retq
000000000101e563	int3
000000000101e564	int3
000000000101e565	int3
000000000101e566	int3
000000000101e567	int3
000000000101e568	int3
000000000101e569	int3
000000000101e56a	int3
000000000101e56b	int3
000000000101e56c	int3
000000000101e56d	int3
000000000101e56e	int3
000000000101e56f	int3
runtime.saveblockevent:
000000000101e570	movq	%gs:0x30, %rcx
000000000101e579	leaq	-0xd0(%rsp), %rax
000000000101e581	cmpq	0x10(%rcx), %rax
000000000101e585	jbe	0x101e713
000000000101e58b	subq	$0x150, %rsp
000000000101e592	movq	%rbp, 0x148(%rsp)
000000000101e59a	leaq	0x148(%rsp), %rbp
000000000101e5a2	movq	%gs:0x30, %rax
000000000101e5ab	leaq	0x40(%rsp), %rdi
000000000101e5b0	xorps	%xmm0, %xmm0
000000000101e5b3	movq	%rbp, -0x10(%rsp)
000000000101e5b8	leaq	-0x10(%rsp), %rbp
000000000101e5bd	callq	0x10491f4
000000000101e5c2	movq	(%rbp), %rbp
000000000101e5c6	movq	0x30(%rax), %rcx
000000000101e5ca	movq	0xc0(%rcx), %rcx
000000000101e5d1	testq	%rcx, %rcx
000000000101e5d4	je	0x101e5df
000000000101e5d6	cmpq	%rax, %rcx
000000000101e5d9	jne	0x101e6d0
000000000101e5df	movq	0x160(%rsp), %rax
000000000101e5e7	movq	%rax, (%rsp)
000000000101e5eb	leaq	0x40(%rsp), %rax
000000000101e5f0	movq	%rax, 0x8(%rsp)
000000000101e5f5	movq	$0x20, 0x10(%rsp)
000000000101e5fe	movq	$0x20, 0x18(%rsp)
000000000101e607	callq	runtime.callers
000000000101e60c	movq	0x20(%rsp), %rax
000000000101e611	movq	%rax, 0x38(%rsp)
000000000101e616	leaq	runtime.proflock(%rip), %rcx
000000000101e61d	movq	%rcx, (%rsp)
000000000101e621	callq	runtime.lock
000000000101e626	movq	0x38(%rsp), %rax
000000000101e62b	cmpq	$0x20, %rax
000000000101e62f	ja	0x101e70c
000000000101e635	movq	0x168(%rsp), %rcx
000000000101e63d	movq	%rcx, (%rsp)
000000000101e641	movq	$0x0, 0x8(%rsp)
000000000101e64a	leaq	0x40(%rsp), %rcx
000000000101e64f	movq	%rcx, 0x10(%rsp)
000000000101e654	movq	%rax, 0x18(%rsp)
000000000101e659	movq	$0x20, 0x20(%rsp)
000000000101e662	movb	$0x1, 0x28(%rsp)
000000000101e667	callq	runtime.stkbucket
000000000101e66c	movq	0x30(%rsp), %rax
000000000101e671	movq	%rax, 0x140(%rsp)
000000000101e679	movq	%rax, (%rsp)
000000000101e67d	callq	"runtime.(*bucket).bp"
000000000101e682	movq	0x8(%rsp), %rax
000000000101e687	incq	(%rax)
000000000101e68a	movq	0x140(%rsp), %rax
000000000101e692	movq	%rax, (%rsp)
000000000101e696	callq	"runtime.(*bucket).bp"
000000000101e69b	movq	0x8(%rsp), %rax
000000000101e6a0	movq	0x158(%rsp), %rcx
000000000101e6a8	addq	0x8(%rax), %rcx
000000000101e6ac	movq	%rcx, 0x8(%rax)
000000000101e6b0	leaq	runtime.proflock(%rip), %rax
000000000101e6b7	movq	%rax, (%rsp)
000000000101e6bb	callq	runtime.unlock
000000000101e6c0	movq	0x148(%rsp), %rbp
000000000101e6c8	addq	$0x150, %rsp
000000000101e6cf	retq
000000000101e6d0	movq	%rcx, (%rsp)
000000000101e6d4	movq	0x160(%rsp), %rax
000000000101e6dc	movq	%rax, 0x8(%rsp)
000000000101e6e1	leaq	0x40(%rsp), %rax
000000000101e6e6	movq	%rax, 0x10(%rsp)
000000000101e6eb	movq	$0x20, 0x18(%rsp)
000000000101e6f4	movq	$0x20, 0x20(%rsp)
000000000101e6fd	callq	runtime.gcallers
000000000101e702	movq	0x28(%rsp), %rax
000000000101e707	jmp	0x101e611
000000000101e70c	callq	runtime.panicslice
000000000101e711	ud2
000000000101e713	callq	runtime.morestack_noctxt
000000000101e718	jmp	runtime.saveblockevent
000000000101e71d	int3
000000000101e71e	int3
000000000101e71f	int3
sync.event:
000000000101e720	movq	%gs:0x30, %rcx
000000000101e729	cmpq	0x10(%rcx), %rsp
000000000101e72d	jbe	0x101e7ea
000000000101e733	subq	$0x20, %rsp
000000000101e737	movq	%rbp, 0x18(%rsp)
000000000101e73c	leaq	0x18(%rsp), %rbp
000000000101e741	movq	runtime.mutexprofilerate(%rip), %rcx
000000000101e748	movq	0x28(%rsp), %rdx
000000000101e74d	testq	%rdx, %rdx
000000000101e750	movl	$0x0, %ebx
000000000101e755	cmovlq	%rbx, %rdx
000000000101e759	testq	%rcx, %rcx
000000000101e75c	jle	0x101e7bf
000000000101e75e	movq	%gs:0x30, %rbx
000000000101e767	movq	0x30(%rbx), %rbx
000000000101e76b	movl	0x11c(%rbx), %esi
000000000101e771	movl	0x120(%rbx), %edi
000000000101e777	movl	%esi, %r8d
000000000101e77a	shll	$0x11, %esi
000000000101e77d	xorl	%r8d, %esi
000000000101e780	movl	%edi, %r8d
000000000101e783	xorl	%esi, %edi
000000000101e785	shrl	$0x7, %esi
000000000101e788	xorl	%edi, %esi
000000000101e78a	movl	%r8d, %edi
000000000101e78d	shrl	$0x10, %r8d
000000000101e791	xorl	%esi, %r8d
000000000101e794	leal	(%rdi,%r8), %eax
000000000101e798	movq	%rdx, %rsi
000000000101e79b	cmpq	$-0x1, %rcx
000000000101e79f	je	0x101e7a8
000000000101e7a1	cqto
000000000101e7a3	idivq	%rcx
000000000101e7a6	jmp	0x101e7ad
000000000101e7a8	negq	%rax
000000000101e7ab	xorl	%edx, %edx
000000000101e7ad	movl	%edi, 0x11c(%rbx)
000000000101e7b3	movl	%r8d, 0x120(%rbx)
000000000101e7ba	testq	%rdx, %rdx
000000000101e7bd	je	0x101e7c9
000000000101e7bf	movq	0x18(%rsp), %rbp
000000000101e7c4	addq	$0x20, %rsp
000000000101e7c8	retq
000000000101e7c9	movq	%rsi, (%rsp)
000000000101e7cd	movq	0x30(%rsp), %rax
000000000101e7d2	incq	%rax
000000000101e7d5	movq	%rax, 0x8(%rsp)
000000000101e7da	movq	$0x3, 0x10(%rsp)
000000000101e7e3	callq	runtime.saveblockevent
000000000101e7e8	jmp	0x101e7bf
000000000101e7ea	callq	runtime.morestack_noctxt
000000000101e7ef	jmp	sync.event
000000000101e7f4	int3
000000000101e7f5	int3
000000000101e7f6	int3
000000000101e7f7	int3
000000000101e7f8	int3
000000000101e7f9	int3
000000000101e7fa	int3
000000000101e7fb	int3
000000000101e7fc	int3
000000000101e7fd	int3
000000000101e7fe	int3
000000000101e7ff	int3
runtime.tracealloc:
000000000101e800	movq	%gs:0x30, %rcx
000000000101e809	cmpq	0x10(%rcx), %rsp
000000000101e80d	jbe	0x101ea71
000000000101e813	subq	$0x60, %rsp
000000000101e817	movq	%rbp, 0x58(%rsp)
000000000101e81c	leaq	0x58(%rsp), %rbp
000000000101e821	leaq	runtime.tracelock(%rip), %rax
000000000101e828	movq	%rax, (%rsp)
000000000101e82c	callq	runtime.lock
000000000101e831	movq	%gs:0x30, %rax
000000000101e83a	movq	%rax, 0x28(%rsp)
000000000101e83f	movq	0x30(%rax), %rcx
000000000101e843	movb	$0x2, 0x125(%rcx)
000000000101e84a	movq	0x78(%rsp), %rcx
000000000101e84f	testq	%rcx, %rcx
000000000101e852	je	0x101e9fb
000000000101e858	movq	%rcx, (%rsp)
000000000101e85c	callq	"runtime.(*_type).string"
000000000101e861	movq	0x10(%rsp), %rax
000000000101e866	movq	%rax, 0x20(%rsp)
000000000101e86b	movq	0x8(%rsp), %rcx
000000000101e870	movq	%rcx, 0x30(%rsp)
000000000101e875	callq	runtime.printlock
000000000101e87a	leaq	0x4c969(%rip), %rax
000000000101e881	movq	%rax, (%rsp)
000000000101e885	movq	$0xb, 0x8(%rsp)
000000000101e88e	callq	runtime.printstring
000000000101e893	movq	0x68(%rsp), %rax
000000000101e898	movq	%rax, (%rsp)
000000000101e89c	callq	runtime.printpointer
000000000101e8a1	leaq	0x4c1f4(%rip), %rax
000000000101e8a8	movq	%rax, (%rsp)
000000000101e8ac	movq	$0x2, 0x8(%rsp)
000000000101e8b5	callq	runtime.printstring
000000000101e8ba	movq	0x70(%rsp), %rax
000000000101e8bf	movq	%rax, (%rsp)
000000000101e8c3	callq	runtime.printhex
000000000101e8c8	leaq	0x4c1cd(%rip), %rax
000000000101e8cf	movq	%rax, (%rsp)
000000000101e8d3	movq	$0x2, 0x8(%rsp)
000000000101e8dc	callq	runtime.printstring
000000000101e8e1	movq	0x30(%rsp), %rax
000000000101e8e6	movq	%rax, (%rsp)
000000000101e8ea	movq	0x20(%rsp), %rax
000000000101e8ef	movq	%rax, 0x8(%rsp)
000000000101e8f4	callq	runtime.printstring
000000000101e8f9	leaq	0x4c19a(%rip), %rax
000000000101e900	movq	%rax, (%rsp)
000000000101e904	movq	$0x2, 0x8(%rsp)
000000000101e90d	callq	runtime.printstring
000000000101e912	callq	runtime.printunlock
000000000101e917	movq	0x28(%rsp), %rax
000000000101e91c	movq	0x30(%rax), %rcx
000000000101e920	movq	0xc0(%rcx), %rcx
000000000101e927	testq	%rcx, %rcx
000000000101e92a	je	0x101e935
000000000101e92c	cmpq	%rcx, %rax
000000000101e92f	jne	0x101e9bc
000000000101e935	movq	%rax, (%rsp)
000000000101e939	callq	runtime.goroutineheader
000000000101e93e	xorps	%xmm0, %xmm0
000000000101e941	movups	%xmm0, 0x38(%rsp)
000000000101e946	movups	%xmm0, 0x48(%rsp)
000000000101e94b	leaq	runtime.tracealloc.func1(%rip), %rax
000000000101e952	movq	%rax, 0x38(%rsp)
000000000101e957	movq	0x60(%rsp), %rax
000000000101e95c	movq	%rax, 0x40(%rsp)
000000000101e961	leaq	0x68(%rsp), %rax
000000000101e966	movq	%rax, 0x48(%rsp)
000000000101e96b	movq	0x28(%rsp), %rax
000000000101e970	movq	%rax, 0x50(%rsp)
000000000101e975	leaq	0x38(%rsp), %rcx
000000000101e97a	movq	%rcx, (%rsp)
000000000101e97e	callq	runtime.systemstack
000000000101e983	callq	runtime.printlock
000000000101e988	callq	runtime.printnl
000000000101e98d	callq	runtime.printunlock
000000000101e992	movq	0x28(%rsp), %rax
000000000101e997	movq	0x30(%rax), %rax
000000000101e99b	movb	$0x0, 0x125(%rax)
000000000101e9a2	leaq	runtime.tracelock(%rip), %rax
000000000101e9a9	movq	%rax, (%rsp)
000000000101e9ad	callq	runtime.unlock
000000000101e9b2	movq	0x58(%rsp), %rbp
000000000101e9b7	addq	$0x60, %rsp
000000000101e9bb	retq
000000000101e9bc	movq	%rcx, (%rsp)
000000000101e9c0	callq	runtime.goroutineheader
000000000101e9c5	movq	0x28(%rsp), %rax
000000000101e9ca	movq	0x30(%rax), %rcx
000000000101e9ce	movq	0xc0(%rcx), %rcx
000000000101e9d5	movq	%rcx, 0x18(%rsp)
000000000101e9da	movq	$-0x1, (%rsp)
000000000101e9e2	movq	$-0x1, 0x8(%rsp)
000000000101e9eb	movq	$0x0, 0x10(%rsp)
000000000101e9f4	callq	runtime.traceback
000000000101e9f9	jmp	0x101e983
000000000101e9fb	callq	runtime.printlock
000000000101ea00	leaq	0x4c7e3(%rip), %rax
000000000101ea07	movq	%rax, (%rsp)
000000000101ea0b	movq	$0xb, 0x8(%rsp)
000000000101ea14	callq	runtime.printstring
000000000101ea19	movq	0x68(%rsp), %rax
000000000101ea1e	movq	%rax, (%rsp)
000000000101ea22	callq	runtime.printpointer
000000000101ea27	leaq	0x4c06e(%rip), %rax
000000000101ea2e	movq	%rax, (%rsp)
000000000101ea32	movq	$0x2, 0x8(%rsp)
000000000101ea3b	callq	runtime.printstring
000000000101ea40	movq	0x70(%rsp), %rax
000000000101ea45	movq	%rax, (%rsp)
000000000101ea49	callq	runtime.printhex
000000000101ea4e	leaq	0x4c045(%rip), %rax
000000000101ea55	movq	%rax, (%rsp)
000000000101ea59	movq	$0x2, 0x8(%rsp)
000000000101ea62	callq	runtime.printstring
000000000101ea67	callq	runtime.printunlock
000000000101ea6c	jmp	0x101e917
000000000101ea71	callq	runtime.morestack_noctxt
000000000101ea76	jmp	runtime.tracealloc
000000000101ea7b	int3
000000000101ea7c	int3
000000000101ea7d	int3
000000000101ea7e	int3
000000000101ea7f	int3
runtime.tracefree:
000000000101ea80	movq	%gs:0x30, %rcx
000000000101ea89	cmpq	0x10(%rcx), %rsp
000000000101ea8d	jbe	0x101ebc7
000000000101ea93	subq	$0x40, %rsp
000000000101ea97	movq	%rbp, 0x38(%rsp)
000000000101ea9c	leaq	0x38(%rsp), %rbp
000000000101eaa1	leaq	runtime.tracelock(%rip), %rax
000000000101eaa8	movq	%rax, (%rsp)
000000000101eaac	callq	runtime.lock
000000000101eab1	movq	%gs:0x30, %rax
000000000101eaba	movq	%rax, 0x10(%rsp)
000000000101eabf	movq	0x30(%rax), %rcx
000000000101eac3	movb	$0x2, 0x125(%rcx)
000000000101eaca	callq	runtime.printlock
000000000101eacf	leaq	0x4c5c2(%rip), %rax
000000000101ead6	movq	%rax, (%rsp)
000000000101eada	movq	$0xa, 0x8(%rsp)
000000000101eae3	callq	runtime.printstring
000000000101eae8	movq	0x48(%rsp), %rax
000000000101eaed	movq	%rax, (%rsp)
000000000101eaf1	callq	runtime.printpointer
000000000101eaf6	leaq	0x4bf9f(%rip), %rax
000000000101eafd	movq	%rax, (%rsp)
000000000101eb01	movq	$0x2, 0x8(%rsp)
000000000101eb0a	callq	runtime.printstring
000000000101eb0f	movq	0x50(%rsp), %rax
000000000101eb14	movq	%rax, (%rsp)
000000000101eb18	callq	runtime.printhex
000000000101eb1d	leaq	0x4bf76(%rip), %rax
000000000101eb24	movq	%rax, (%rsp)
000000000101eb28	movq	$0x2, 0x8(%rsp)
000000000101eb31	callq	runtime.printstring
000000000101eb36	callq	runtime.printunlock
000000000101eb3b	movq	0x10(%rsp), %rax
000000000101eb40	movq	%rax, (%rsp)
000000000101eb44	callq	runtime.goroutineheader
000000000101eb49	xorps	%xmm0, %xmm0
000000000101eb4c	movups	%xmm0, 0x18(%rsp)
000000000101eb51	movups	%xmm0, 0x28(%rsp)
000000000101eb56	leaq	runtime.tracefree.func1(%rip), %rax
000000000101eb5d	movq	%rax, 0x18(%rsp)
000000000101eb62	movq	0x40(%rsp), %rax
000000000101eb67	movq	%rax, 0x20(%rsp)
000000000101eb6c	leaq	0x48(%rsp), %rax
000000000101eb71	movq	%rax, 0x28(%rsp)
000000000101eb76	movq	0x10(%rsp), %rax
000000000101eb7b	movq	%rax, 0x30(%rsp)
000000000101eb80	leaq	0x18(%rsp), %rcx
000000000101eb85	movq	%rcx, (%rsp)
000000000101eb89	callq	runtime.systemstack
000000000101eb8e	callq	runtime.printlock
000000000101eb93	callq	runtime.printnl
000000000101eb98	callq	runtime.printunlock
000000000101eb9d	movq	0x10(%rsp), %rax
000000000101eba2	movq	0x30(%rax), %rax
000000000101eba6	movb	$0x0, 0x125(%rax)
000000000101ebad	leaq	runtime.tracelock(%rip), %rax
000000000101ebb4	movq	%rax, (%rsp)
000000000101ebb8	callq	runtime.unlock
000000000101ebbd	movq	0x38(%rsp), %rbp
000000000101ebc2	addq	$0x40, %rsp
000000000101ebc6	retq
000000000101ebc7	callq	runtime.morestack_noctxt
000000000101ebcc	jmp	runtime.tracefree
000000000101ebd1	int3
000000000101ebd2	int3
000000000101ebd3	int3
000000000101ebd4	int3
000000000101ebd5	int3
000000000101ebd6	int3
000000000101ebd7	int3
000000000101ebd8	int3
000000000101ebd9	int3
000000000101ebda	int3
000000000101ebdb	int3
000000000101ebdc	int3
000000000101ebdd	int3
000000000101ebde	int3
000000000101ebdf	int3
runtime.tracegc:
000000000101ebe0	movq	%gs:0x30, %rcx
000000000101ebe9	cmpq	0x10(%rcx), %rsp
000000000101ebed	jbe	0x101ecb7
000000000101ebf3	subq	$0x20, %rsp
000000000101ebf7	movq	%rbp, 0x18(%rsp)
000000000101ebfc	leaq	0x18(%rsp), %rbp
000000000101ec01	leaq	runtime.tracelock(%rip), %rax
000000000101ec08	movq	%rax, (%rsp)
000000000101ec0c	callq	runtime.lock
000000000101ec11	movq	%gs:0x30, %rax
000000000101ec1a	movq	%rax, 0x10(%rsp)
000000000101ec1f	movq	0x30(%rax), %rcx
000000000101ec23	movb	$0x2, 0x125(%rcx)
000000000101ec2a	callq	runtime.printlock
000000000101ec2f	leaq	0x4c46c(%rip), %rax
000000000101ec36	movq	%rax, (%rsp)
000000000101ec3a	movq	$0xa, 0x8(%rsp)
000000000101ec43	callq	runtime.printstring
000000000101ec48	callq	runtime.printunlock
000000000101ec4d	movq	0x10(%rsp), %rax
000000000101ec52	movq	%rax, (%rsp)
000000000101ec56	callq	runtime.tracebackothers
000000000101ec5b	callq	runtime.printlock
000000000101ec60	leaq	0x4c6c5(%rip), %rax
000000000101ec67	movq	%rax, (%rsp)
000000000101ec6b	movq	$0xc, 0x8(%rsp)
000000000101ec74	callq	runtime.printstring
000000000101ec79	callq	runtime.printunlock
000000000101ec7e	callq	runtime.printlock
000000000101ec83	callq	runtime.printnl
000000000101ec88	callq	runtime.printunlock
000000000101ec8d	movq	0x10(%rsp), %rax
000000000101ec92	movq	0x30(%rax), %rax
000000000101ec96	movb	$0x0, 0x125(%rax)
000000000101ec9d	leaq	runtime.tracelock(%rip), %rax
000000000101eca4	movq	%rax, (%rsp)
000000000101eca8	callq	runtime.unlock
000000000101ecad	movq	0x18(%rsp), %rbp
000000000101ecb2	addq	$0x20, %rsp
000000000101ecb6	retq
000000000101ecb7	callq	runtime.morestack_noctxt
000000000101ecbc	jmp	runtime.tracegc
000000000101ecc1	int3
000000000101ecc2	int3
000000000101ecc3	int3
000000000101ecc4	int3
000000000101ecc5	int3
000000000101ecc6	int3
000000000101ecc7	int3
000000000101ecc8	int3
000000000101ecc9	int3
000000000101ecca	int3
000000000101eccb	int3
000000000101eccc	int3
000000000101eccd	int3
000000000101ecce	int3
000000000101eccf	int3
runtime.init.2:
000000000101ecd0	movq	%gs:0x30, %rcx
000000000101ecd9	cmpq	0x10(%rcx), %rsp
000000000101ecdd	jbe	0x101ed50
000000000101ecdf	subq	$0x18, %rsp
000000000101ece3	movq	%rbp, 0x10(%rsp)
000000000101ece8	leaq	0x10(%rsp), %rbp
000000000101eced	cmpq	$0x1690, 0x97478(%rip)
000000000101ecf8	jne	0x101ed04
000000000101ecfa	movq	0x10(%rsp), %rbp
000000000101ecff	addq	$0x18, %rsp
000000000101ed03	retq
000000000101ed04	callq	runtime.printlock
000000000101ed09	movq	runtime.sizeof_C_MStats(%rip), %rax
000000000101ed10	movq	%rax, (%rsp)
000000000101ed14	callq	runtime.printuint
000000000101ed19	callq	runtime.printsp
000000000101ed1e	movq	$0x1690, (%rsp)
000000000101ed26	callq	runtime.printuint
000000000101ed2b	callq	runtime.printnl
000000000101ed30	callq	runtime.printunlock
000000000101ed35	leaq	0x4eeb0(%rip), %rax
000000000101ed3c	movq	%rax, (%rsp)
000000000101ed40	movq	$0x24, 0x8(%rsp)
000000000101ed49	callq	runtime.throw
000000000101ed4e	ud2
000000000101ed50	callq	runtime.morestack_noctxt
000000000101ed55	jmp	runtime.init.2
000000000101ed5a	int3
000000000101ed5b	int3
000000000101ed5c	int3
000000000101ed5d	int3
000000000101ed5e	int3
000000000101ed5f	int3
runtime.cachestats:
000000000101ed60	movq	%gs:0x30, %rcx
000000000101ed69	cmpq	0x10(%rcx), %rsp
000000000101ed6d	jbe	0x101edd7
000000000101ed6f	subq	$0x28, %rsp
000000000101ed73	movq	%rbp, 0x20(%rsp)
000000000101ed78	leaq	0x20(%rsp), %rbp
000000000101ed7d	movq	runtime.allp(%rip), %rax
000000000101ed84	movq	%rax, 0x18(%rsp)
000000000101ed89	movq	0x99ac8(%rip), %rcx
000000000101ed90	movq	%rcx, 0x10(%rsp)
000000000101ed95	xorl	%edx, %edx
000000000101ed97	jmp	0x101ed9c
000000000101ed99	incq	%rdx
000000000101ed9c	cmpq	%rcx, %rdx
000000000101ed9f	jge	0x101edcd
000000000101eda1	movq	(%rax,%rdx,8), %rbx
000000000101eda5	movq	0x48(%rbx), %rbx
000000000101eda9	testq	%rbx, %rbx
000000000101edac	je	0x101ed99
000000000101edae	movq	%rdx, 0x8(%rsp)
000000000101edb3	movq	%rbx, (%rsp)
000000000101edb7	callq	runtime.purgecachedstats
000000000101edbc	movq	0x18(%rsp), %rax
000000000101edc1	movq	0x10(%rsp), %rcx
000000000101edc6	movq	0x8(%rsp), %rdx
000000000101edcb	jmp	0x101ed99
000000000101edcd	movq	0x20(%rsp), %rbp
000000000101edd2	addq	$0x28, %rsp
000000000101edd6	retq
000000000101edd7	callq	runtime.morestack_noctxt
000000000101eddc	jmp	runtime.cachestats
000000000101edde	int3
000000000101eddf	int3
runtime.flushmcache:
000000000101ede0	movq	%gs:0x30, %rcx
000000000101ede9	cmpq	0x10(%rcx), %rsp
000000000101eded	jbe	0x101ee59
000000000101edef	subq	$0x18, %rsp
000000000101edf3	movq	%rbp, 0x10(%rsp)
000000000101edf8	leaq	0x10(%rsp), %rbp
000000000101edfd	movq	0x99a54(%rip), %rax
000000000101ee04	movq	runtime.allp(%rip), %rcx
000000000101ee0b	movq	0x20(%rsp), %rdx
000000000101ee10	cmpq	%rax, %rdx
000000000101ee13	jae	0x101ee52
000000000101ee15	movq	(%rcx,%rdx,8), %rax
000000000101ee19	movq	0x48(%rax), %rax
000000000101ee1d	testq	%rax, %rax
000000000101ee20	je	0x101ee48
000000000101ee22	movq	%rax, 0x8(%rsp)
000000000101ee27	movq	%rax, (%rsp)
000000000101ee2b	callq	"runtime.(*mcache).releaseAll"
000000000101ee30	movq	0x8(%rsp), %rax
000000000101ee35	movq	%rax, (%rsp)
000000000101ee39	callq	runtime.stackcache_clear
000000000101ee3e	movq	0x10(%rsp), %rbp
000000000101ee43	addq	$0x18, %rsp
000000000101ee47	retq
000000000101ee48	movq	0x10(%rsp), %rbp
000000000101ee4d	addq	$0x18, %rsp
000000000101ee51	retq
000000000101ee52	callq	runtime.panicindex
000000000101ee57	ud2
000000000101ee59	callq	runtime.morestack_noctxt
000000000101ee5e	jmp	runtime.flushmcache
runtime.purgecachedstats:
000000000101ee60	movq	0x8(%rsp), %rax
000000000101ee65	movq	0x8(%rax), %rcx
000000000101ee69	addq	0xb8158(%rip), %rcx
000000000101ee70	movq	%rcx, 0xb8151(%rip)
000000000101ee77	movq	$0x0, 0x8(%rax)
000000000101ee7f	movq	0x20(%rax), %rcx
000000000101ee83	addq	0xb811e(%rip), %rcx
000000000101ee8a	movq	%rcx, 0xb8117(%rip)
000000000101ee91	movq	$0x0, 0x20(%rax)
000000000101ee99	movq	0x498(%rax), %rcx
000000000101eea0	addq	0x9f6c9(%rip), %rcx
000000000101eea7	movq	%rcx, 0x9f6c2(%rip)
000000000101eeae	movq	$0x0, 0x498(%rax)
000000000101eeb9	movq	0x4a0(%rax), %rcx
000000000101eec0	addq	0x9f6b1(%rip), %rcx
000000000101eec7	movq	%rcx, 0x9f6aa(%rip)
000000000101eece	movq	$0x0, 0x4a0(%rax)
000000000101eed9	xorl	%ecx, %ecx
000000000101eedb	jmp	0x101ef06
000000000101eedd	leaq	0x9f69c(%rip), %rdx
000000000101eee4	movq	(%rdx,%rcx,8), %rbx
000000000101eee8	movq	0x4a8(%rax,%rcx,8), %rsi
000000000101eef0	addq	%rsi, %rbx
000000000101eef3	movq	%rbx, (%rdx,%rcx,8)
000000000101eef7	movq	$0x0, 0x4a8(%rax,%rcx,8)
000000000101ef03	incq	%rcx
000000000101ef06	cmpq	$0x43, %rcx
000000000101ef0a	jl	0x101eedd
000000000101ef0c	retq
000000000101ef0d	int3
000000000101ef0e	int3
000000000101ef0f	int3
runtime.mSysStatInc:
000000000101ef10	subq	$0x20, %rsp
000000000101ef14	movq	%rbp, 0x18(%rsp)
000000000101ef19	leaq	0x18(%rsp), %rbp
000000000101ef1e	movq	0x28(%rsp), %rax
000000000101ef23	testq	%rax, %rax
000000000101ef26	je	0x101efbc
000000000101ef2c	movq	0x30(%rsp), %rcx
000000000101ef31	movq	%rcx, %rdx
000000000101ef34	lock
000000000101ef35	xaddq	%rcx, (%rax)
000000000101ef39	leaq	(%rdx,%rcx), %rax
000000000101ef3d	cmpq	%rdx, %rax
000000000101ef40	jb	0x101ef4c
000000000101ef42	movq	0x18(%rsp), %rbp
000000000101ef47	addq	$0x20, %rsp
000000000101ef4b	retq
000000000101ef4c	movq	%rax, 0x10(%rsp)
000000000101ef51	callq	runtime.printlock
000000000101ef56	leaq	0x4dfde(%rip), %rax
000000000101ef5d	movq	%rax, (%rsp)
000000000101ef61	movq	$0x1c, 0x8(%rsp)
000000000101ef6a	callq	runtime.printstring
000000000101ef6f	movq	0x10(%rsp), %rax
000000000101ef74	movq	%rax, (%rsp)
000000000101ef78	callq	runtime.printuint
000000000101ef7d	leaq	0x4bb9f(%rip), %rax
000000000101ef84	movq	%rax, (%rsp)
000000000101ef88	movq	$0x4, 0x8(%rsp)
000000000101ef91	callq	runtime.printstring
000000000101ef96	movq	0x30(%rsp), %rax
000000000101ef9b	movq	%rax, (%rsp)
000000000101ef9f	callq	runtime.printuint
000000000101efa4	callq	runtime.printnl
000000000101efa9	callq	runtime.printunlock
000000000101efae	movl	$0x2, (%rsp)
000000000101efb5	callq	runtime.exit
000000000101efba	jmp	0x101ef42
000000000101efbc	movq	0x18(%rsp), %rbp
000000000101efc1	addq	$0x20, %rsp
000000000101efc5	retq
000000000101efc6	int3
000000000101efc7	int3
000000000101efc8	int3
000000000101efc9	int3
000000000101efca	int3
000000000101efcb	int3
000000000101efcc	int3
000000000101efcd	int3
000000000101efce	int3
000000000101efcf	int3
runtime.mSysStatDec:
000000000101efd0	subq	$0x20, %rsp
000000000101efd4	movq	%rbp, 0x18(%rsp)
000000000101efd9	leaq	0x18(%rsp), %rbp
000000000101efde	movq	0x28(%rsp), %rax
000000000101efe3	testq	%rax, %rax
000000000101efe6	je	0x101f082
000000000101efec	movq	0x30(%rsp), %rcx
000000000101eff1	movq	%rcx, %rdx
000000000101eff4	negq	%rcx
000000000101eff7	lock
000000000101eff8	xaddq	%rcx, (%rax)
000000000101effc	subq	%rdx, %rcx
000000000101efff	leaq	(%rcx,%rdx), %rax
000000000101f003	cmpq	%rdx, %rax
000000000101f006	jb	0x101f012
000000000101f008	movq	0x18(%rsp), %rbp
000000000101f00d	addq	$0x20, %rsp
000000000101f011	retq
000000000101f012	movq	%rcx, 0x10(%rsp)
000000000101f017	callq	runtime.printlock
000000000101f01c	leaq	0x4e073(%rip), %rax
000000000101f023	movq	%rax, (%rsp)
000000000101f027	movq	$0x1d, 0x8(%rsp)
000000000101f030	callq	runtime.printstring
000000000101f035	movq	0x10(%rsp), %rax
000000000101f03a	movq	%rax, (%rsp)
000000000101f03e	callq	runtime.printuint
000000000101f043	leaq	0x4bad9(%rip), %rax
000000000101f04a	movq	%rax, (%rsp)
000000000101f04e	movq	$0x4, 0x8(%rsp)
000000000101f057	callq	runtime.printstring
000000000101f05c	movq	0x30(%rsp), %rax
000000000101f061	movq	%rax, (%rsp)
000000000101f065	callq	runtime.printuint
000000000101f06a	callq	runtime.printnl
000000000101f06f	callq	runtime.printunlock
000000000101f074	movl	$0x2, (%rsp)
000000000101f07b	callq	runtime.exit
000000000101f080	jmp	0x101f008
000000000101f082	movq	0x18(%rsp), %rbp
000000000101f087	addq	$0x20, %rsp
000000000101f08b	retq
000000000101f08c	int3
000000000101f08d	int3
000000000101f08e	int3
000000000101f08f	int3
runtime.(*wbBuf).reset:
000000000101f090	movq	%gs:0x30, %rcx
000000000101f099	cmpq	0x10(%rcx), %rsp
000000000101f09d	jbe	0x101f11b
000000000101f09f	subq	$0x18, %rsp
000000000101f0a3	movq	%rbp, 0x10(%rsp)
000000000101f0a8	leaq	0x10(%rsp), %rbp
000000000101f0ad	movq	0x20(%rsp), %rax
000000000101f0b2	leaq	0x10(%rax), %rcx
000000000101f0b6	movq	%rcx, (%rax)
000000000101f0b9	leaq	runtime.gcBlackenPromptly(%rip), %rdx
000000000101f0c0	cmpb	$0x0, (%rdx)
000000000101f0c3	je	0x101f0e7
000000000101f0c5	leaq	0x20(%rax), %rcx
000000000101f0c9	movq	%rcx, 0x8(%rax)
000000000101f0cd	movq	0x8(%rax), %rcx
000000000101f0d1	subq	(%rax), %rcx
000000000101f0d4	testq	$0xf, %rcx
000000000101f0db	jne	0x101f100
000000000101f0dd	movq	0x10(%rsp), %rbp
000000000101f0e2	addq	$0x18, %rsp
000000000101f0e6	retq
000000000101f0e7	leaq	0xb5b47(%rip), %rdx
000000000101f0ee	cmpb	$0x0, (%rdx)
000000000101f0f1	jne	0x101f0c5
000000000101f0f3	addq	$0x1000, %rcx
000000000101f0fa	movq	%rcx, 0x8(%rax)
000000000101f0fe	jmp	0x101f0cd
000000000101f100	leaq	0x4e2d4(%rip), %rax
000000000101f107	movq	%rax, (%rsp)
000000000101f10b	movq	$0x1f, 0x8(%rsp)
000000000101f114	callq	runtime.throw
000000000101f119	ud2
000000000101f11b	callq	runtime.morestack_noctxt
000000000101f120	jmp	"runtime.(*wbBuf).reset"
000000000101f125	int3
000000000101f126	int3
000000000101f127	int3
000000000101f128	int3
000000000101f129	int3
000000000101f12a	int3
000000000101f12b	int3
000000000101f12c	int3
000000000101f12d	int3
000000000101f12e	int3
000000000101f12f	int3
runtime.wbBufFlush:
000000000101f130	subq	$0x18, %rsp
000000000101f134	movq	%rbp, 0x10(%rsp)
000000000101f139	leaq	0x10(%rsp), %rbp
000000000101f13e	movq	%gs:0x30, %rax
000000000101f147	movq	0x30(%rax), %rax
000000000101f14b	cmpl	$0x0, 0x104(%rax)
000000000101f152	jg	0x101f1de
000000000101f158	leaq	0xb5ad6(%rip), %rax
000000000101f15f	cmpb	$0x0, (%rax)
000000000101f162	je	0x101f16e
000000000101f164	movq	0x20(%rsp), %rax
000000000101f169	testq	%rax, %rax
000000000101f16c	jne	0x101f188
000000000101f16e	leaq	0x4ff6b(%rip), %rax
000000000101f175	movq	%rax, (%rsp)
000000000101f179	callq	runtime.systemstack
000000000101f17e	movq	0x10(%rsp), %rbp
000000000101f183	addq	$0x18, %rsp
000000000101f187	retq
000000000101f188	movq	%rax, (%rsp)
000000000101f18c	movq	0x28(%rsp), %rax
000000000101f191	movq	%rax, 0x8(%rsp)
000000000101f196	callq	runtime.cgoCheckWriteBarrier
000000000101f19b	leaq	0xb5a92(%rip), %rax
000000000101f1a2	cmpb	$0x0, (%rax)
000000000101f1a5	jne	0x101f16e
000000000101f1a7	movq	%gs:0x30, %rax
000000000101f1b0	movq	0x30(%rax), %rax
000000000101f1b4	movq	0xd0(%rax), %rax
000000000101f1bb	testb	%al, (%rax)
000000000101f1bd	leaq	0x1290(%rax), %rcx
000000000101f1c4	testb	%al, (%rcx)
000000000101f1c6	leaq	0x12a0(%rax), %rcx
000000000101f1cd	movq	%rcx, 0x1290(%rax)
000000000101f1d4	movq	0x10(%rsp), %rbp
000000000101f1d9	addq	$0x18, %rsp
000000000101f1dd	retq
000000000101f1de	movq	0xd0(%rax), %rax
000000000101f1e5	testb	%al, (%rax)
000000000101f1e7	leaq	0x1290(%rax), %rcx
000000000101f1ee	testb	%al, (%rcx)
000000000101f1f0	leaq	0x12a0(%rax), %rcx
000000000101f1f7	movq	%rcx, 0x1290(%rax)
000000000101f1fe	movq	0x10(%rsp), %rbp
000000000101f203	addq	$0x18, %rsp
000000000101f207	retq
000000000101f208	int3
000000000101f209	int3
000000000101f20a	int3
000000000101f20b	int3
000000000101f20c	int3
000000000101f20d	int3
000000000101f20e	int3
000000000101f20f	int3
runtime.wbBufFlush1:
000000000101f210	movq	%gs:0x30, %rcx
000000000101f219	cmpq	0x18(%rcx), %rsp
000000000101f21d	jbe	0x101f474
000000000101f223	subq	$0x60, %rsp
000000000101f227	movq	%rbp, 0x58(%rsp)
000000000101f22c	leaq	0x58(%rsp), %rbp
000000000101f231	movq	0x68(%rsp), %rax
000000000101f236	testb	%al, (%rax)
000000000101f238	leaq	0x12a0(%rax), %rcx
000000000101f23f	testb	%al, (%rcx)
000000000101f241	leaq	0x12a0(%rax), %rdx
000000000101f248	movq	0x1290(%rax), %rbx
000000000101f24f	subq	%rdx, %rbx
000000000101f252	shrq	$0x3, %rbx
000000000101f256	cmpq	$0x200, %rbx
000000000101f25d	ja	0x101f46d
000000000101f263	movq	%rcx, 0x50(%rsp)
000000000101f268	movq	%rbx, 0x40(%rsp)
000000000101f26d	leaq	0x1290(%rax), %rcx
000000000101f274	movq	%rcx, (%rsp)
000000000101f278	callq	"runtime.(*wbBuf).reset"
000000000101f27d	leaq	runtime.useCheckmark(%rip), %rax
000000000101f284	cmpb	$0x0, (%rax)
000000000101f287	jne	0x101f424
000000000101f28d	movq	0x68(%rsp), %rax
000000000101f292	leaq	0x1270(%rax), %rcx
000000000101f299	movq	%rcx, 0x48(%rsp)
000000000101f29e	movq	0x40(%rsp), %rdx
000000000101f2a3	xorl	%ebx, %ebx
000000000101f2a5	xorl	%esi, %esi
000000000101f2a7	jmp	0x101f2ac
000000000101f2a9	incq	%rbx
000000000101f2ac	cmpq	%rdx, %rbx
000000000101f2af	jge	0x101f3c7
000000000101f2b5	movq	0x12a0(%rax,%rbx,8), %rdi
000000000101f2bd	cmpq	$0x1000, %rdi
000000000101f2c4	jb	0x101f2a9
000000000101f2c6	movq	%rbx, 0x38(%rsp)
000000000101f2cb	movq	%rsi, 0x30(%rsp)
000000000101f2d0	movq	%rdi, (%rsp)
000000000101f2d4	xorps	%xmm0, %xmm0
000000000101f2d7	movups	%xmm0, 0x8(%rsp)
000000000101f2dc	callq	runtime.findObject
000000000101f2e1	movq	0x18(%rsp), %rax
000000000101f2e6	movq	0x20(%rsp), %rcx
000000000101f2eb	movq	0x28(%rsp), %rdx
000000000101f2f0	testq	%rax, %rax
000000000101f2f3	jne	0x101f310
000000000101f2f5	movq	0x68(%rsp), %rax
000000000101f2fa	movq	0x48(%rsp), %rcx
000000000101f2ff	movq	0x40(%rsp), %rdx
000000000101f304	movq	0x38(%rsp), %rbx
000000000101f309	movq	0x30(%rsp), %rsi
000000000101f30e	jmp	0x101f2a9
000000000101f310	movq	%rdx, %rbx
000000000101f313	shrq	$0x3, %rdx
000000000101f317	addq	0x50(%rcx), %rdx
000000000101f31b	andq	$0x7, %rbx
000000000101f31f	movq	%rcx, %rsi
000000000101f322	movq	%rbx, %rcx
000000000101f325	movl	$0x1, %edi
000000000101f32a	shll	%cl, %edi
000000000101f32c	movzbl	(%rdx), %ebx
000000000101f32f	testb	%dil, %bl
000000000101f332	je	0x101f352
000000000101f334	movq	0x68(%rsp), %rax
000000000101f339	movq	0x48(%rsp), %rcx
000000000101f33e	movq	0x40(%rsp), %rdx
000000000101f343	movq	0x38(%rsp), %rbx
000000000101f348	movq	0x30(%rsp), %rsi
000000000101f34d	jmp	0x101f2a9
000000000101f352	lock
000000000101f353	orb	%dil, (%rdx)
000000000101f356	movzbl	0x62(%rsi), %ecx
000000000101f35a	testb	$0x1, %cl
000000000101f35d	je	0x101f391
000000000101f35f	movq	0x48(%rsp), %rcx
000000000101f364	testb	%al, (%rcx)
000000000101f366	movq	0x68(%rsp), %rax
000000000101f36b	movq	0x1280(%rax), %rdi
000000000101f372	addq	0x68(%rsi), %rdi
000000000101f376	movq	%rdi, 0x1280(%rax)
000000000101f37d	movq	0x40(%rsp), %rdx
000000000101f382	movq	0x38(%rsp), %rbx
000000000101f387	movq	0x30(%rsp), %rsi
000000000101f38c	jmp	0x101f2a9
000000000101f391	movq	0x30(%rsp), %rcx
000000000101f396	movq	0x40(%rsp), %rdx
000000000101f39b	cmpq	%rdx, %rcx
000000000101f39e	jae	0x101f466
000000000101f3a4	movq	0x68(%rsp), %rdi
000000000101f3a9	movq	%rax, 0x12a0(%rdi,%rcx,8)
000000000101f3b1	leaq	0x1(%rcx), %rsi
000000000101f3b5	movq	%rdi, %rax
000000000101f3b8	movq	0x48(%rsp), %rcx
000000000101f3bd	movq	0x38(%rsp), %rbx
000000000101f3c2	jmp	0x101f2a9
000000000101f3c7	cmpq	$0x200, %rsi
000000000101f3ce	ja	0x101f45f
000000000101f3d4	movq	%rcx, (%rsp)
000000000101f3d8	movq	0x50(%rsp), %rax
000000000101f3dd	movq	%rax, 0x8(%rsp)
000000000101f3e2	movq	%rsi, 0x10(%rsp)
000000000101f3e7	movq	$0x200, 0x18(%rsp)
000000000101f3f0	callq	"runtime.(*gcWork).putBatch"
000000000101f3f5	cmpl	$0x2, 0xb56fc(%rip)
000000000101f3fc	jne	0x101f416
000000000101f3fe	movq	0x48(%rsp), %rax
000000000101f403	movq	%rax, (%rsp)
000000000101f407	callq	"runtime.(*gcWork).dispose"
000000000101f40c	movq	0x58(%rsp), %rbp
000000000101f411	addq	$0x60, %rsp
000000000101f415	retq
000000000101f416	leaq	runtime.gcBlackenPromptly(%rip), %rax
000000000101f41d	cmpb	$0x0, (%rax)
000000000101f420	jne	0x101f3fe
000000000101f422	jmp	0x101f40c
000000000101f424	xorl	%eax, %eax
000000000101f426	jmp	0x101f44b
000000000101f428	movq	%rax, 0x38(%rsp)
000000000101f42d	movq	0x68(%rsp), %rcx
000000000101f432	movq	0x12a0(%rcx,%rax,8), %rdx
000000000101f43a	movq	%rdx, (%rsp)
000000000101f43e	callq	runtime.shade
000000000101f443	movq	0x38(%rsp), %rax
000000000101f448	incq	%rax
000000000101f44b	movq	0x40(%rsp), %rcx
000000000101f450	cmpq	%rcx, %rax
000000000101f453	jl	0x101f428
000000000101f455	movq	0x58(%rsp), %rbp
000000000101f45a	addq	$0x60, %rsp
000000000101f45e	retq
000000000101f45f	callq	runtime.panicslice
000000000101f464	ud2
000000000101f466	callq	runtime.panicindex
000000000101f46b	ud2
000000000101f46d	callq	runtime.panicslice
000000000101f472	ud2
000000000101f474	callq	runtime.morestackc
000000000101f479	jmp	runtime.wbBufFlush1
000000000101f47e	int3
000000000101f47f	int3
runtime.netpollready:
000000000101f480	movq	%gs:0x30, %rcx
000000000101f489	cmpq	0x10(%rcx), %rsp
000000000101f48d	jbe	0x101f57a
000000000101f493	subq	$0x30, %rsp
000000000101f497	movq	%rbp, 0x28(%rsp)
000000000101f49c	leaq	0x28(%rsp), %rbp
000000000101f4a1	movq	$0x0, 0x20(%rsp)
000000000101f4aa	movq	$0x0, 0x18(%rsp)
000000000101f4b3	movl	0x48(%rsp), %eax
000000000101f4b7	cmpl	$0x72, %eax
000000000101f4ba	jne	0x101f56a
000000000101f4c0	movq	0x40(%rsp), %rax
000000000101f4c5	movq	%rax, (%rsp)
000000000101f4c9	movl	$0x72, 0x8(%rsp)
000000000101f4d1	movb	$0x1, 0xc(%rsp)
000000000101f4d6	callq	runtime.netpollunblock
000000000101f4db	movq	0x10(%rsp), %rax
000000000101f4e0	movq	%rax, 0x20(%rsp)
000000000101f4e5	movl	0x48(%rsp), %eax
000000000101f4e9	cmpl	$0x77, %eax
000000000101f4ec	jne	0x101f561
000000000101f4ee	movq	0x40(%rsp), %rax
000000000101f4f3	movq	%rax, (%rsp)
000000000101f4f7	movl	$0x77, 0x8(%rsp)
000000000101f4ff	movb	$0x1, 0xc(%rsp)
000000000101f504	callq	runtime.netpollunblock
000000000101f509	movq	0x10(%rsp), %rax
000000000101f50e	movq	%rax, 0x18(%rsp)
000000000101f513	movq	0x20(%rsp), %rax
000000000101f518	testq	%rax, %rax
000000000101f51b	je	0x101f55a
000000000101f51d	movq	0x38(%rsp), %rcx
000000000101f522	movq	(%rcx), %rdx
000000000101f525	movq	%rdx, 0xa0(%rax)
000000000101f52c	movq	0x20(%rsp), %rax
000000000101f531	movq	%rax, (%rcx)
000000000101f534	movq	0x18(%rsp), %rax
000000000101f539	testq	%rax, %rax
000000000101f53c	je	0x101f550
000000000101f53e	movq	(%rcx), %rdx
000000000101f541	movq	%rdx, 0xa0(%rax)
000000000101f548	movq	0x18(%rsp), %rax
000000000101f54d	movq	%rax, (%rcx)
000000000101f550	movq	0x28(%rsp), %rbp
000000000101f555	addq	$0x30, %rsp
000000000101f559	retq
000000000101f55a	movq	0x38(%rsp), %rcx
000000000101f55f	jmp	0x101f534
000000000101f561	cmpl	$0xe9, %eax
000000000101f566	je	0x101f4ee
000000000101f568	jmp	0x101f513
000000000101f56a	cmpl	$0xe9, %eax
000000000101f56f	je	0x101f4c0
000000000101f575	jmp	0x101f4e5
000000000101f57a	callq	runtime.morestack_noctxt
000000000101f57f	jmp	runtime.netpollready
000000000101f584	int3
000000000101f585	int3
000000000101f586	int3
000000000101f587	int3
000000000101f588	int3
000000000101f589	int3
000000000101f58a	int3
000000000101f58b	int3
000000000101f58c	int3
000000000101f58d	int3
000000000101f58e	int3
000000000101f58f	int3
runtime.netpollunblock:
000000000101f590	subq	$0x10, %rsp
000000000101f594	movq	%rbp, 0x8(%rsp)
000000000101f599	leaq	0x8(%rsp), %rbp
000000000101f59e	movq	0x18(%rsp), %rcx
000000000101f5a3	testb	%al, (%rcx)
000000000101f5a5	leaq	0x28(%rcx), %rdx
000000000101f5a9	addq	$0x78, %rcx
000000000101f5ad	movl	0x20(%rsp), %ebx
000000000101f5b1	cmpl	$0x77, %ebx
000000000101f5b4	cmoveq	%rcx, %rdx
000000000101f5b8	movzbl	0x24(%rsp), %ecx
000000000101f5bd	movq	(%rdx), %rax
000000000101f5c0	cmpq	$0x1, %rax
000000000101f5c4	je	0x101f615
000000000101f5c6	testq	%rax, %rax
000000000101f5c9	jne	0x101f5cf
000000000101f5cb	testb	%cl, %cl
000000000101f5cd	je	0x101f602
000000000101f5cf	movq	%rax, (%rsp)
000000000101f5d3	movzbl	%cl, %ebx
000000000101f5d6	lock
000000000101f5d7	cmpxchgq	%rbx, (%rdx)
000000000101f5db	sete	%bl
000000000101f5de	testb	%bl, %bl
000000000101f5e0	je	0x101f5bd
000000000101f5e2	movq	(%rsp), %rax
000000000101f5e6	cmpq	$0x2, %rax
000000000101f5ea	movl	$0x0, %ecx
000000000101f5ef	cmoveq	%rcx, %rax
000000000101f5f3	movq	%rax, 0x28(%rsp)
000000000101f5f8	movq	0x8(%rsp), %rbp
000000000101f5fd	addq	$0x10, %rsp
000000000101f601	retq
000000000101f602	movq	$0x0, 0x28(%rsp)
000000000101f60b	movq	0x8(%rsp), %rbp
000000000101f610	addq	$0x10, %rsp
000000000101f614	retq
000000000101f615	movq	$0x0, 0x28(%rsp)
000000000101f61e	movq	0x8(%rsp), %rbp
000000000101f623	addq	$0x10, %rsp
000000000101f627	retq
000000000101f628	int3
000000000101f629	int3
000000000101f62a	int3
000000000101f62b	int3
000000000101f62c	int3
000000000101f62d	int3
000000000101f62e	int3
000000000101f62f	int3
runtime.netpoll:
000000000101f630	movq	%gs:0x30, %rcx
000000000101f639	leaq	-0x7f0(%rsp), %rax
000000000101f641	cmpq	0x10(%rcx), %rax
000000000101f645	jbe	0x101f867
000000000101f64b	subq	$0x870, %rsp
000000000101f652	movq	%rbp, 0x868(%rsp)
000000000101f65a	leaq	0x868(%rsp), %rbp
000000000101f662	cmpl	$-0x1, 0x96abb(%rip)
000000000101f669	je	0x101f7c6
000000000101f66f	xorps	%xmm0, %xmm0
000000000101f672	movups	%xmm0, 0x50(%rsp)
000000000101f677	movzbl	0x878(%rsp), %edx
000000000101f67f	testb	%dl, %dl
000000000101f681	je	0x101f7bc
000000000101f687	xorl	%eax, %eax
000000000101f689	movq	%rax, 0x60(%rsp)
000000000101f68e	leaq	0x68(%rsp), %rdi
000000000101f693	movl	$0x100, %ecx
000000000101f698	movq	%rax, %rbx
000000000101f69b	xorl	%eax, %eax
000000000101f69d	rep		stosq	%rax, %es:(%rdi)
000000000101f6a0	jmp	0x101f741
000000000101f6a5	leaq	0x1(%rdx), %rcx
000000000101f6a9	movslq	%eax, %rdx
000000000101f6ac	cmpq	%rdx, %rcx
000000000101f6af	jge	0x101f728
000000000101f6b1	cmpq	$0x40, %rcx
000000000101f6b5	jae	0x101f7e2
000000000101f6bb	movq	%rcx, %rdx
000000000101f6be	shlq	$0x5, %rcx
000000000101f6c2	movzwl	0x70(%rsp,%rcx), %ebx
000000000101f6c7	cmpw	$-0x2, %bx
000000000101f6cb	jne	0x101f705
000000000101f6cd	movl	$0x77, %ebx
000000000101f6d2	testl	%ebx, %ebx
000000000101f6d4	je	0x101f6a5
000000000101f6d6	movq	%rdx, 0x48(%rsp)
000000000101f6db	movq	0x80(%rsp,%rcx), %rax
000000000101f6e3	movq	%rax, 0x8(%rsp)
000000000101f6e8	leaq	0x40(%rsp), %rax
000000000101f6ed	movq	%rax, (%rsp)
000000000101f6f1	movl	%ebx, 0x10(%rsp)
000000000101f6f5	callq	runtime.netpollready
000000000101f6fa	movl	0x3c(%rsp), %eax
000000000101f6fe	movq	0x48(%rsp), %rdx
000000000101f703	jmp	0x101f6a5
000000000101f705	cmpw	$-0x1, %bx
000000000101f709	jne	0x101f724
000000000101f70b	movzwl	0x72(%rsp,%rcx), %esi
000000000101f710	testw	$0x8000, %si
000000000101f715	movl	$0x72, %ebx
000000000101f71a	movl	$0xe9, %esi
000000000101f71f	cmovnel	%esi, %ebx
000000000101f722	jmp	0x101f6d2
000000000101f724	xorl	%ebx, %ebx
000000000101f726	jmp	0x101f6d2
000000000101f728	movzbl	0x878(%rsp), %eax
000000000101f730	testb	%al, %al
000000000101f732	je	0x101f79f
000000000101f734	cmpq	$0x0, 0x40(%rsp)
000000000101f73a	jne	0x101f79f
000000000101f73c	movq	0x60(%rsp), %rbx
000000000101f741	leaq	0x68(%rsp), %rax
000000000101f746	movq	%rax, 0x18(%rsp)
000000000101f74b	movl	runtime.kq(%rip), %eax
000000000101f751	movl	%eax, (%rsp)
000000000101f754	movq	$0x0, 0x8(%rsp)
000000000101f75d	movl	$0x0, 0x10(%rsp)
000000000101f765	movl	$0x40, 0x20(%rsp)
000000000101f76d	movq	%rbx, 0x28(%rsp)
000000000101f772	callq	runtime.kevent
000000000101f777	movl	0x30(%rsp), %eax
000000000101f77b	movl	%eax, 0x3c(%rsp)
000000000101f77f	testl	%eax, %eax
000000000101f781	jge	0x101f78f
000000000101f783	cmpl	$-0x4, %eax
000000000101f786	jne	0x101f7e9
000000000101f788	movq	0x60(%rsp), %rbx
000000000101f78d	jmp	0x101f741
000000000101f78f	movq	$0x0, 0x40(%rsp)
000000000101f798	xorl	%ecx, %ecx
000000000101f79a	jmp	0x101f6a9
000000000101f79f	movq	0x40(%rsp), %rax
000000000101f7a4	movq	%rax, 0x880(%rsp)
000000000101f7ac	movq	0x868(%rsp), %rbp
000000000101f7b4	addq	$0x870, %rsp
000000000101f7bb	retq
000000000101f7bc	leaq	0x50(%rsp), %rax
000000000101f7c1	jmp	0x101f689
000000000101f7c6	movq	$0x0, 0x880(%rsp)
000000000101f7d2	movq	0x868(%rsp), %rbp
000000000101f7da	addq	$0x870, %rsp
000000000101f7e1	retq
000000000101f7e2	callq	runtime.panicindex
000000000101f7e7	ud2
000000000101f7e9	callq	runtime.printlock
000000000101f7ee	leaq	0x4c9fa(%rip), %rax
000000000101f7f5	movq	%rax, (%rsp)
000000000101f7f9	movq	$0x16, 0x8(%rsp)
000000000101f802	callq	runtime.printstring
000000000101f807	movslq	runtime.kq(%rip), %rax
000000000101f80e	movq	%rax, (%rsp)
000000000101f812	callq	runtime.printint
000000000101f817	leaq	0x4bb7d(%rip), %rax
000000000101f81e	movq	%rax, (%rsp)
000000000101f822	movq	$0xd, 0x8(%rsp)
000000000101f82b	callq	runtime.printstring
000000000101f830	movl	0x3c(%rsp), %eax
000000000101f834	negl	%eax
000000000101f836	movslq	%eax, %rax
000000000101f839	movq	%rax, (%rsp)
000000000101f83d	callq	runtime.printint
000000000101f842	callq	runtime.printnl
000000000101f847	callq	runtime.printunlock
000000000101f84c	leaq	0x4cc70(%rip), %rax
000000000101f853	movq	%rax, (%rsp)
000000000101f857	movq	$0x17, 0x8(%rsp)
000000000101f860	callq	runtime.throw
000000000101f865	ud2
000000000101f867	callq	runtime.morestack_noctxt
000000000101f86c	jmp	runtime.netpoll
000000000101f871	int3
000000000101f872	int3
000000000101f873	int3
000000000101f874	int3
000000000101f875	int3
000000000101f876	int3
000000000101f877	int3
000000000101f878	int3
000000000101f879	int3
000000000101f87a	int3
000000000101f87b	int3
000000000101f87c	int3
000000000101f87d	int3
000000000101f87e	int3
000000000101f87f	int3
runtime.semacreate:
000000000101f880	subq	$0x20, %rsp
000000000101f884	movq	%rbp, 0x18(%rsp)
000000000101f889	leaq	0x18(%rsp), %rbp
000000000101f88e	movq	0x28(%rsp), %rax
000000000101f893	testb	%al, (%rax)
000000000101f895	leaq	0x338(%rax), %rcx
000000000101f89c	cmpb	$0x0, (%rcx)
000000000101f89f	je	0x101f8ab
000000000101f8a1	movq	0x18(%rsp), %rbp
000000000101f8a6	addq	$0x20, %rsp
000000000101f8aa	retq
000000000101f8ab	movb	$0x1, 0x338(%rax)
000000000101f8b2	leaq	0x340(%rax), %rcx
000000000101f8b9	movq	%rcx, (%rsp)
000000000101f8bd	movq	$0x0, 0x8(%rsp)
000000000101f8c6	callq	runtime.pthread_mutex_init
000000000101f8cb	cmpl	$0x0, 0x10(%rsp)
000000000101f8d0	jne	0x101f91b
000000000101f8d2	movq	0x28(%rsp), %rax
000000000101f8d7	addq	$0x380, %rax
000000000101f8dd	movq	%rax, (%rsp)
000000000101f8e1	movq	$0x0, 0x8(%rsp)
000000000101f8ea	callq	runtime.pthread_cond_init
000000000101f8ef	cmpl	$0x0, 0x10(%rsp)
000000000101f8f4	jne	0x101f900
000000000101f8f6	movq	0x18(%rsp), %rbp
000000000101f8fb	addq	$0x20, %rsp
000000000101f8ff	retq
000000000101f900	leaq	0x4c08f(%rip), %rax
000000000101f907	movq	%rax, (%rsp)
000000000101f90b	movq	$0x11, 0x8(%rsp)
000000000101f914	callq	runtime.throw
000000000101f919	ud2
000000000101f91b	leaq	0x4c1e1(%rip), %rax
000000000101f922	movq	%rax, (%rsp)
000000000101f926	movq	$0x12, 0x8(%rsp)
000000000101f92f	callq	runtime.throw
000000000101f934	ud2
000000000101f936	int3
000000000101f937	int3
000000000101f938	int3
000000000101f939	int3
000000000101f93a	int3
000000000101f93b	int3
000000000101f93c	int3
000000000101f93d	int3
000000000101f93e	int3
000000000101f93f	int3
runtime.semasleep:
000000000101f940	subq	$0x50, %rsp
000000000101f944	movq	%rbp, 0x48(%rsp)
000000000101f949	leaq	0x48(%rsp), %rbp
000000000101f94e	movq	0x58(%rsp), %rax
000000000101f953	testq	%rax, %rax
000000000101f956	jge	0x101fac4
000000000101f95c	xorl	%ecx, %ecx
000000000101f95e	movq	%rcx, 0x20(%rsp)
000000000101f963	movq	%gs:0x30, %rax
000000000101f96c	movq	0x30(%rax), %rax
000000000101f970	movq	%rax, 0x38(%rsp)
000000000101f975	testb	%al, (%rax)
000000000101f977	leaq	0x340(%rax), %rdx
000000000101f97e	movq	%rdx, 0x40(%rsp)
000000000101f983	movq	%rdx, (%rsp)
000000000101f987	callq	runtime.pthread_mutex_lock
000000000101f98c	movq	0x38(%rsp), %rax
000000000101f991	movq	0x3b0(%rax), %rcx
000000000101f998	testq	%rcx, %rcx
000000000101f99b	jg	0x101fa9a
000000000101f9a1	movq	0x58(%rsp), %rcx
000000000101f9a6	testq	%rcx, %rcx
000000000101f9a9	jge	0x101f9c7
000000000101f9ab	movq	0x40(%rsp), %rcx
000000000101f9b0	movq	%rcx, 0x8(%rsp)
000000000101f9b5	leaq	0x380(%rax), %rdx
000000000101f9bc	movq	%rdx, (%rsp)
000000000101f9c0	callq	runtime.pthread_cond_wait
000000000101f9c5	jmp	0x101f98c
000000000101f9c7	callq	runtime.nanotime
000000000101f9cc	movq	(%rsp), %rax
000000000101f9d0	movq	0x20(%rsp), %rcx
000000000101f9d5	subq	%rcx, %rax
000000000101f9d8	movq	0x58(%rsp), %rdx
000000000101f9dd	cmpq	%rdx, %rax
000000000101f9e0	jge	0x101fa7a
000000000101f9e6	xorps	%xmm0, %xmm0
000000000101f9e9	movups	%xmm0, 0x28(%rsp)
000000000101f9ee	subq	%rax, %rdx
000000000101f9f1	movq	%rdx, %rax
000000000101f9f4	movabsq	$0x44b82fa09b5a52cc, %rbx
000000000101f9fe	movq	%rdx, %rsi
000000000101fa01	imulq	%rbx
000000000101fa04	movq	%rsi, %rdi
000000000101fa07	sarq	$0x3f, %rsi
000000000101fa0b	sarq	$0x1c, %rdx
000000000101fa0f	subq	%rsi, %rdx
000000000101fa12	movq	%rdx, 0x28(%rsp)
000000000101fa17	imulq	$0x3b9aca00, %rdx, %rdx
000000000101fa1e	subq	%rdx, %rdi
000000000101fa21	movq	%rdi, 0x30(%rsp)
000000000101fa26	movq	0x40(%rsp), %rdx
000000000101fa2b	movq	%rdx, 0x8(%rsp)
000000000101fa30	movq	0x38(%rsp), %rsi
000000000101fa35	leaq	0x380(%rsi), %rdi
000000000101fa3c	movq	%rdi, (%rsp)
000000000101fa40	leaq	0x28(%rsp), %rdi
000000000101fa45	movq	%rdi, 0x10(%rsp)
000000000101fa4a	callq	runtime.pthread_cond_timedwait_relative_np
000000000101fa4f	cmpl	$0x3c, 0x18(%rsp)
000000000101fa54	jne	0x101f98c
000000000101fa5a	movq	0x40(%rsp), %rax
000000000101fa5f	movq	%rax, (%rsp)
000000000101fa63	callq	runtime.pthread_mutex_unlock
000000000101fa68	movl	$0xffffffff, 0x60(%rsp)
000000000101fa70	movq	0x48(%rsp), %rbp
000000000101fa75	addq	$0x50, %rsp
000000000101fa79	retq
000000000101fa7a	movq	0x40(%rsp), %rax
000000000101fa7f	movq	%rax, (%rsp)
000000000101fa83	callq	runtime.pthread_mutex_unlock
000000000101fa88	movl	$0xffffffff, 0x60(%rsp)
000000000101fa90	movq	0x48(%rsp), %rbp
000000000101fa95	addq	$0x50, %rsp
000000000101fa99	retq
000000000101fa9a	decq	%rcx
000000000101fa9d	movq	%rcx, 0x3b0(%rax)
000000000101faa4	movq	0x40(%rsp), %rax
000000000101faa9	movq	%rax, (%rsp)
000000000101faad	callq	runtime.pthread_mutex_unlock
000000000101fab2	movl	$0x0, 0x60(%rsp)
000000000101faba	movq	0x48(%rsp), %rbp
000000000101fabf	addq	$0x50, %rsp
000000000101fac3	retq
000000000101fac4	callq	runtime.nanotime
000000000101fac9	movq	(%rsp), %rcx
000000000101facd	jmp	0x101f95e
000000000101fad2	int3
000000000101fad3	int3
000000000101fad4	int3
000000000101fad5	int3
000000000101fad6	int3
000000000101fad7	int3
000000000101fad8	int3
000000000101fad9	int3
000000000101fada	int3
000000000101fadb	int3
000000000101fadc	int3
000000000101fadd	int3
000000000101fade	int3
000000000101fadf	int3
runtime.semawakeup:
000000000101fae0	subq	$0x20, %rsp
000000000101fae4	movq	%rbp, 0x18(%rsp)
000000000101fae9	leaq	0x18(%rsp), %rbp
000000000101faee	movq	0x28(%rsp), %rax
000000000101faf3	testb	%al, (%rax)
000000000101faf5	leaq	0x340(%rax), %rcx
000000000101fafc	movq	%rcx, 0x10(%rsp)
000000000101fb01	movq	%rcx, (%rsp)
000000000101fb05	callq	runtime.pthread_mutex_lock
000000000101fb0a	movq	0x28(%rsp), %rax
000000000101fb0f	movq	0x3b0(%rax), %rcx
000000000101fb16	incq	%rcx
000000000101fb19	movq	%rcx, 0x3b0(%rax)
000000000101fb20	testq	%rcx, %rcx
000000000101fb23	jg	0x101fb3d
000000000101fb25	movq	0x10(%rsp), %rax
000000000101fb2a	movq	%rax, (%rsp)
000000000101fb2e	callq	runtime.pthread_mutex_unlock
000000000101fb33	movq	0x18(%rsp), %rbp
000000000101fb38	addq	$0x20, %rsp
000000000101fb3c	retq
000000000101fb3d	addq	$0x380, %rax
000000000101fb43	movq	%rax, (%rsp)
000000000101fb47	callq	runtime.pthread_cond_signal
000000000101fb4c	jmp	0x101fb25
000000000101fb4e	int3
000000000101fb4f	int3
runtime.osinit:
000000000101fb50	movq	%gs:0x30, %rcx
000000000101fb59	cmpq	0x10(%rcx), %rsp
000000000101fb5d	jbe	0x101fb95
000000000101fb5f	subq	$0x10, %rsp
000000000101fb63	movq	%rbp, 0x8(%rsp)
000000000101fb68	leaq	0x8(%rsp), %rbp
000000000101fb6d	callq	runtime.getncpu
000000000101fb72	movl	(%rsp), %eax
000000000101fb75	movl	%eax, runtime.ncpu(%rip)
000000000101fb7b	callq	runtime.getPageSize
000000000101fb80	movq	(%rsp), %rax
000000000101fb84	movq	%rax, runtime.physPageSize(%rip)
000000000101fb8b	movq	0x8(%rsp), %rbp
000000000101fb90	addq	$0x10, %rsp
000000000101fb94	retq
000000000101fb95	callq	runtime.morestack_noctxt
000000000101fb9a	jmp	runtime.osinit
000000000101fb9c	int3
000000000101fb9d	int3
000000000101fb9e	int3
000000000101fb9f	int3
runtime.getncpu:
000000000101fba0	movq	%gs:0x30, %rcx
000000000101fba9	cmpq	0x10(%rcx), %rsp
000000000101fbad	jbe	0x101fc4b
000000000101fbb3	subq	$0x58, %rsp
000000000101fbb7	movq	%rbp, 0x50(%rsp)
000000000101fbbc	leaq	0x50(%rsp), %rbp
000000000101fbc1	movq	$0x0, 0x48(%rsp)
000000000101fbca	movabsq	$0x300000006, %rax
000000000101fbd4	movq	%rax, 0x48(%rsp)
000000000101fbd9	movl	$0x0, 0x3c(%rsp)
000000000101fbe1	movq	$0x4, 0x40(%rsp)
000000000101fbea	leaq	0x48(%rsp), %rax
000000000101fbef	movq	%rax, (%rsp)
000000000101fbf3	movl	$0x2, 0x8(%rsp)
000000000101fbfb	leaq	0x3c(%rsp), %rax
000000000101fc00	movq	%rax, 0x10(%rsp)
000000000101fc05	leaq	0x40(%rsp), %rax
000000000101fc0a	movq	%rax, 0x18(%rsp)
000000000101fc0f	xorps	%xmm0, %xmm0
000000000101fc12	movups	%xmm0, 0x20(%rsp)
000000000101fc17	callq	runtime.sysctl
000000000101fc1c	cmpl	$0x0, 0x30(%rsp)
000000000101fc21	jl	0x101fc2b
000000000101fc23	movl	0x3c(%rsp), %eax
000000000101fc27	testl	%eax, %eax
000000000101fc29	jg	0x101fc3d
000000000101fc2b	movl	$0x1, 0x60(%rsp)
000000000101fc33	movq	0x50(%rsp), %rbp
000000000101fc38	addq	$0x58, %rsp
000000000101fc3c	retq
000000000101fc3d	movl	%eax, 0x60(%rsp)
000000000101fc41	movq	0x50(%rsp), %rbp
000000000101fc46	addq	$0x58, %rsp
000000000101fc4a	retq
000000000101fc4b	callq	runtime.morestack_noctxt
000000000101fc50	jmp	runtime.getncpu
000000000101fc55	int3
000000000101fc56	int3
000000000101fc57	int3
000000000101fc58	int3
000000000101fc59	int3
000000000101fc5a	int3
000000000101fc5b	int3
000000000101fc5c	int3
000000000101fc5d	int3
000000000101fc5e	int3
000000000101fc5f	int3
runtime.getPageSize:
000000000101fc60	movq	%gs:0x30, %rcx
000000000101fc69	cmpq	0x10(%rcx), %rsp
000000000101fc6d	jbe	0x101fd0d
000000000101fc73	subq	$0x58, %rsp
000000000101fc77	movq	%rbp, 0x50(%rsp)
000000000101fc7c	leaq	0x50(%rsp), %rbp
000000000101fc81	movq	$0x0, 0x48(%rsp)
000000000101fc8a	movabsq	$0x700000006, %rax
000000000101fc94	movq	%rax, 0x48(%rsp)
000000000101fc99	movl	$0x0, 0x3c(%rsp)
000000000101fca1	movq	$0x4, 0x40(%rsp)
000000000101fcaa	leaq	0x48(%rsp), %rax
000000000101fcaf	movq	%rax, (%rsp)
000000000101fcb3	movl	$0x2, 0x8(%rsp)
000000000101fcbb	leaq	0x3c(%rsp), %rax
000000000101fcc0	movq	%rax, 0x10(%rsp)
000000000101fcc5	leaq	0x40(%rsp), %rax
000000000101fcca	movq	%rax, 0x18(%rsp)
000000000101fccf	xorps	%xmm0, %xmm0
000000000101fcd2	movups	%xmm0, 0x20(%rsp)
000000000101fcd7	callq	runtime.sysctl
000000000101fcdc	cmpl	$0x0, 0x30(%rsp)
000000000101fce1	jl	0x101fceb
000000000101fce3	movl	0x3c(%rsp), %eax
000000000101fce7	testl	%eax, %eax
000000000101fce9	jg	0x101fcfe
000000000101fceb	movq	$0x0, 0x60(%rsp)
000000000101fcf4	movq	0x50(%rsp), %rbp
000000000101fcf9	addq	$0x58, %rsp
000000000101fcfd	retq
000000000101fcfe	movq	%rax, 0x60(%rsp)
000000000101fd03	movq	0x50(%rsp), %rbp
000000000101fd08	addq	$0x58, %rsp
000000000101fd0c	retq
000000000101fd0d	callq	runtime.morestack_noctxt
000000000101fd12	jmp	runtime.getPageSize
000000000101fd17	int3
000000000101fd18	int3
000000000101fd19	int3
000000000101fd1a	int3
000000000101fd1b	int3
000000000101fd1c	int3
000000000101fd1d	int3
000000000101fd1e	int3
000000000101fd1f	int3
runtime.getRandomData:
000000000101fd20	subq	$0x38, %rsp
000000000101fd24	movq	%rbp, 0x30(%rsp)
000000000101fd29	leaq	0x30(%rsp), %rbp
000000000101fd2e	movq	runtime.urandom_dev(%rip), %rax
000000000101fd35	cmpq	$0x0, 0x971fb(%rip)
000000000101fd3d	jbe	0x101fdd0
000000000101fd43	movq	%rax, (%rsp)
000000000101fd47	movq	$0x0, 0x8(%rsp)
000000000101fd50	callq	runtime.open
000000000101fd55	movl	0x10(%rsp), %eax
000000000101fd59	movq	0x48(%rsp), %rcx
000000000101fd5e	testq	%rcx, %rcx
000000000101fd61	jbe	0x101fdc9
000000000101fd63	movl	%eax, 0x24(%rsp)
000000000101fd67	movq	0x40(%rsp), %rdx
000000000101fd6c	movq	%rdx, 0x8(%rsp)
000000000101fd71	movl	%eax, (%rsp)
000000000101fd74	movl	%ecx, 0x10(%rsp)
000000000101fd78	callq	runtime.read
000000000101fd7d	movslq	0x18(%rsp), %rax
000000000101fd82	movq	%rax, 0x28(%rsp)
000000000101fd87	movl	0x24(%rsp), %ecx
000000000101fd8b	movl	%ecx, (%rsp)
000000000101fd8e	callq	runtime.closefd
000000000101fd93	movq	0x40(%rsp), %rax
000000000101fd98	movq	%rax, (%rsp)
000000000101fd9c	movq	0x48(%rsp), %rax
000000000101fda1	movq	%rax, 0x8(%rsp)
000000000101fda6	movq	0x50(%rsp), %rax
000000000101fdab	movq	%rax, 0x10(%rsp)
000000000101fdb0	movq	0x28(%rsp), %rax
000000000101fdb5	movq	%rax, 0x18(%rsp)
000000000101fdba	callq	runtime.extendRandom
000000000101fdbf	movq	0x30(%rsp), %rbp
000000000101fdc4	addq	$0x38, %rsp
000000000101fdc8	retq
000000000101fdc9	callq	runtime.panicindex
000000000101fdce	ud2
000000000101fdd0	callq	runtime.panicindex
000000000101fdd5	ud2
000000000101fdd7	int3
000000000101fdd8	int3
000000000101fdd9	int3
000000000101fdda	int3
000000000101fddb	int3
000000000101fddc	int3
000000000101fddd	int3
000000000101fdde	int3
000000000101fddf	int3
runtime.goenvs:
000000000101fde0	movq	%gs:0x30, %rcx
000000000101fde9	cmpq	0x10(%rcx), %rsp
000000000101fded	jbe	0x101fe09
000000000101fdef	subq	$0x8, %rsp
000000000101fdf3	movq	%rbp, (%rsp)
000000000101fdf7	leaq	(%rsp), %rbp
000000000101fdfb	callq	runtime.goenvs_unix
000000000101fe00	movq	(%rsp), %rbp
000000000101fe04	addq	$0x8, %rsp
000000000101fe08	retq
000000000101fe09	callq	runtime.morestack_noctxt
000000000101fe0e	jmp	runtime.goenvs
runtime.newosproc:
000000000101fe10	movq	%gs:0x30, %rcx
000000000101fe19	cmpq	0x10(%rcx), %rsp
000000000101fe1d	jbe	0x1020057
000000000101fe23	subq	$0x80, %rsp
000000000101fe2a	movq	%rbp, 0x78(%rsp)
000000000101fe2f	leaq	0x78(%rsp), %rbp
000000000101fe34	movq	0x88(%rsp), %rax
000000000101fe3c	movq	(%rax), %rax
000000000101fe3f	testb	%al, (%rax)
000000000101fe41	xorps	%xmm0, %xmm0
000000000101fe44	movups	%xmm0, 0x28(%rsp)
000000000101fe49	movups	%xmm0, 0x38(%rsp)
000000000101fe4e	movups	%xmm0, 0x48(%rsp)
000000000101fe53	movups	%xmm0, 0x58(%rsp)
000000000101fe58	leaq	0x28(%rsp), %rax
000000000101fe5d	movq	%rax, (%rsp)
000000000101fe61	callq	runtime.pthread_attr_init
000000000101fe66	cmpl	$0x0, 0x8(%rsp)
000000000101fe6b	je	0x101fea6
000000000101fe6d	movq	runtime.failthreadcreate(%rip), %rax
000000000101fe74	movq	0x9707d(%rip), %rcx
000000000101fe7b	testq	%rcx, %rcx
000000000101fe7e	jbe	0x1020050
000000000101fe84	movq	%rax, 0x8(%rsp)
000000000101fe89	movq	$0x2, (%rsp)
000000000101fe91	movl	%ecx, 0x10(%rsp)
000000000101fe95	callq	runtime.write
000000000101fe9a	movl	$0x1, (%rsp)
000000000101fea1	callq	runtime.exit
000000000101fea6	leaq	0x28(%rsp), %rax
000000000101feab	movq	%rax, (%rsp)
000000000101feaf	movq	$0x10000, 0x8(%rsp)
000000000101feb8	callq	runtime.pthread_attr_setstacksize
000000000101febd	cmpl	$0x0, 0x10(%rsp)
000000000101fec2	je	0x101fefd
000000000101fec4	movq	runtime.failthreadcreate(%rip), %rax
000000000101fecb	movq	0x97026(%rip), %rcx
000000000101fed2	testq	%rcx, %rcx
000000000101fed5	jbe	0x1020049
000000000101fedb	movq	%rax, 0x8(%rsp)
000000000101fee0	movq	$0x2, (%rsp)
000000000101fee8	movl	%ecx, 0x10(%rsp)
000000000101feec	callq	runtime.write
000000000101fef1	movl	$0x1, (%rsp)
000000000101fef8	callq	runtime.exit
000000000101fefd	leaq	0x28(%rsp), %rax
000000000101ff02	movq	%rax, (%rsp)
000000000101ff06	movq	$0x2, 0x8(%rsp)
000000000101ff0f	callq	runtime.pthread_attr_setdetachstate
000000000101ff14	cmpl	$0x0, 0x10(%rsp)
000000000101ff19	je	0x101ff54
000000000101ff1b	movq	runtime.failthreadcreate(%rip), %rax
000000000101ff22	movq	0x96fcf(%rip), %rcx
000000000101ff29	testq	%rcx, %rcx
000000000101ff2c	jbe	0x1020042
000000000101ff32	movq	%rax, 0x8(%rsp)
000000000101ff37	movq	$0x2, (%rsp)
000000000101ff3f	movl	%ecx, 0x10(%rsp)
000000000101ff43	callq	runtime.write
000000000101ff48	movl	$0x1, (%rsp)
000000000101ff4f	callq	runtime.exit
000000000101ff54	movl	$0x0, 0x20(%rsp)
000000000101ff5c	movl	$0x3, (%rsp)
000000000101ff63	leaq	runtime.sigset_all(%rip), %rax
000000000101ff6a	movq	%rax, 0x8(%rsp)
000000000101ff6f	leaq	0x20(%rsp), %rax
000000000101ff74	movq	%rax, 0x10(%rsp)
000000000101ff79	callq	runtime.sigprocmask
000000000101ff7e	leaq	0x376fb(%rip), %rax
000000000101ff85	movq	%rax, 0x68(%rsp)
000000000101ff8a	leaq	0x4efcf(%rip), %rax
000000000101ff91	movq	%rax, 0x70(%rsp)
000000000101ff96	testb	%al, (%rax)
000000000101ff98	leaq	0x70(%rsp), %rax
000000000101ff9d	testb	%al, (%rax)
000000000101ff9f	movq	0x4efba(%rip), %rax
000000000101ffa6	leaq	0x28(%rsp), %rcx
000000000101ffab	movq	%rcx, (%rsp)
000000000101ffaf	movq	%rax, 0x8(%rsp)
000000000101ffb4	movq	0x88(%rsp), %rax
000000000101ffbc	movq	%rax, 0x10(%rsp)
000000000101ffc1	callq	runtime.pthread_create
000000000101ffc6	movl	0x18(%rsp), %eax
000000000101ffca	movl	%eax, 0x24(%rsp)
000000000101ffce	cmpl	$0x0, %eax
000000000101ffd1	movl	$0x3, (%rsp)
000000000101ffd8	leaq	0x20(%rsp), %rcx
000000000101ffdd	movq	%rcx, 0x8(%rsp)
000000000101ffe2	movq	$0x0, 0x10(%rsp)
000000000101ffeb	callq	runtime.sigprocmask
000000000101fff0	movl	0x24(%rsp), %eax
000000000101fff4	cmpl	$0x0, %eax
000000000101fff7	je	0x102002e
000000000101fff9	movq	0x96ef8(%rip), %rax
0000000001020000	movq	runtime.failthreadcreate(%rip), %rcx
0000000001020007	testq	%rax, %rax
000000000102000a	jbe	0x102003b
000000000102000c	movq	%rcx, 0x8(%rsp)
0000000001020011	movq	$0x2, (%rsp)
0000000001020019	movl	%eax, 0x10(%rsp)
000000000102001d	callq	runtime.write
0000000001020022	movl	$0x1, (%rsp)
0000000001020029	callq	runtime.exit
000000000102002e	movq	0x78(%rsp), %rbp
0000000001020033	addq	$0x80, %rsp
000000000102003a	retq
000000000102003b	callq	runtime.panicindex
0000000001020040	ud2
0000000001020042	callq	runtime.panicindex
0000000001020047	ud2
0000000001020049	callq	runtime.panicindex
000000000102004e	ud2
0000000001020050	callq	runtime.panicindex
0000000001020055	ud2
0000000001020057	callq	runtime.morestack_noctxt
000000000102005c	jmp	runtime.newosproc
0000000001020061	int3
0000000001020062	int3
0000000001020063	int3
0000000001020064	int3
0000000001020065	int3
0000000001020066	int3
0000000001020067	int3
0000000001020068	int3
0000000001020069	int3
000000000102006a	int3
000000000102006b	int3
000000000102006c	int3
000000000102006d	int3
000000000102006e	int3
000000000102006f	int3
runtime.mpreinit:
0000000001020070	movq	%gs:0x30, %rcx
0000000001020079	cmpq	0x10(%rcx), %rsp
000000000102007d	jbe	0x10200ea
000000000102007f	subq	$0x18, %rsp
0000000001020083	movq	%rbp, 0x10(%rsp)
0000000001020088	leaq	0x10(%rsp), %rbp
000000000102008d	movl	$0x8000, (%rsp)
0000000001020094	callq	runtime.malg
0000000001020099	movq	0x20(%rsp), %rax
000000000102009e	testb	%al, (%rax)
00000000010200a0	movq	0x8(%rsp), %rcx
00000000010200a5	cmpl	$0x0, 0xb4b84(%rip)
00000000010200ac	jne	0x10200d6
00000000010200ae	movq	%rcx, 0x50(%rax)
00000000010200b2	testb	%al, (%rcx)
00000000010200b4	cmpl	$0x0, 0xb4b75(%rip)
00000000010200bb	jne	0x10200cb
00000000010200bd	movq	%rax, 0x30(%rcx)
00000000010200c1	movq	0x10(%rsp), %rbp
00000000010200c6	addq	$0x18, %rsp
00000000010200ca	retq
00000000010200cb	leaq	0x30(%rcx), %rdi
00000000010200cf	callq	runtime.gcWriteBarrier
00000000010200d4	jmp	0x10200c1
00000000010200d6	leaq	0x50(%rax), %rdi
00000000010200da	movq	%rax, %rdx
00000000010200dd	movq	%rcx, %rax
00000000010200e0	callq	runtime.gcWriteBarrier
00000000010200e5	movq	%rdx, %rax
00000000010200e8	jmp	0x10200b2
00000000010200ea	callq	runtime.morestack_noctxt
00000000010200ef	jmp	runtime.mpreinit
00000000010200f4	int3
00000000010200f5	int3
00000000010200f6	int3
00000000010200f7	int3
00000000010200f8	int3
00000000010200f9	int3
00000000010200fa	int3
00000000010200fb	int3
00000000010200fc	int3
00000000010200fd	int3
00000000010200fe	int3
00000000010200ff	int3
runtime.minit:
0000000001020100	movq	%gs:0x30, %rcx
0000000001020109	cmpq	0x10(%rcx), %rsp
000000000102010d	jbe	0x102012e
000000000102010f	subq	$0x8, %rsp
0000000001020113	movq	%rbp, (%rsp)
0000000001020117	leaq	(%rsp), %rbp
000000000102011b	callq	runtime.minitSignalStack
0000000001020120	callq	runtime.minitSignalMask
0000000001020125	movq	(%rsp), %rbp
0000000001020129	addq	$0x8, %rsp
000000000102012d	retq
000000000102012e	callq	runtime.morestack_noctxt
0000000001020133	jmp	runtime.minit
0000000001020135	int3
0000000001020136	int3
0000000001020137	int3
0000000001020138	int3
0000000001020139	int3
000000000102013a	int3
000000000102013b	int3
000000000102013c	int3
000000000102013d	int3
000000000102013e	int3
000000000102013f	int3
runtime.unminit:
0000000001020140	callq	runtime.unminitSignals
0000000001020145	retq
0000000001020146	int3
0000000001020147	int3
0000000001020148	int3
0000000001020149	int3
000000000102014a	int3
000000000102014b	int3
000000000102014c	int3
000000000102014d	int3
000000000102014e	int3
000000000102014f	int3
runtime.osyield:
0000000001020150	subq	$0x10, %rsp
0000000001020154	movq	%rbp, 0x8(%rsp)
0000000001020159	leaq	0x8(%rsp), %rbp
000000000102015e	movl	$0x1, (%rsp)
0000000001020165	callq	runtime.usleep
000000000102016a	movq	0x8(%rsp), %rbp
000000000102016f	addq	$0x10, %rsp
0000000001020173	retq
0000000001020174	int3
0000000001020175	int3
0000000001020176	int3
0000000001020177	int3
0000000001020178	int3
0000000001020179	int3
000000000102017a	int3
000000000102017b	int3
000000000102017c	int3
000000000102017d	int3
000000000102017e	int3
000000000102017f	int3
runtime.setsig:
0000000001020180	subq	$0x60, %rsp
0000000001020184	movq	%rbp, 0x58(%rsp)
0000000001020189	leaq	0x58(%rsp), %rbp
000000000102018e	xorps	%xmm0, %xmm0
0000000001020191	movups	%xmm0, 0x28(%rsp)
0000000001020196	movups	%xmm0, 0x38(%rsp)
000000000102019b	movups	%xmm0, 0x48(%rsp)
00000000010201a0	xorps	%xmm0, %xmm0
00000000010201a3	movups	%xmm0, 0x18(%rsp)
00000000010201a8	movl	$0x43, 0x24(%rsp)
00000000010201b0	movl	$0xffffffff, 0x20(%rsp)
00000000010201b8	leaq	0x3bb21(%rip), %rax
00000000010201bf	movq	%rax, 0x38(%rsp)
00000000010201c4	leaq	0x4ee9d(%rip), %rax
00000000010201cb	movq	%rax, 0x40(%rsp)
00000000010201d0	testb	%al, (%rax)
00000000010201d2	leaq	0x40(%rsp), %rax
00000000010201d7	testb	%al, (%rax)
00000000010201d9	movq	0x4ee88(%rip), %rax
00000000010201e0	movq	0x70(%rsp), %rcx
00000000010201e5	cmpq	%rax, %rcx
00000000010201e8	jne	0x1020281
00000000010201ee	leaq	runtime.iscgo(%rip), %rax
00000000010201f5	cmpb	$0x0, (%rax)
00000000010201f8	je	0x1020257
00000000010201fa	leaq	0x3747f(%rip), %rax
0000000001020201	movq	%rax, 0x28(%rsp)
0000000001020206	leaq	0x4ebb3(%rip), %rax
000000000102020d	movq	%rax, 0x30(%rsp)
0000000001020212	testb	%al, (%rax)
0000000001020214	leaq	0x30(%rsp), %rax
0000000001020219	testb	%al, (%rax)
000000000102021b	movq	0x4eb9e(%rip), %rax
0000000001020222	leaq	0x18(%rsp), %rcx
0000000001020227	testb	%al, (%rcx)
0000000001020229	movq	%rax, 0x18(%rsp)
000000000102022e	movl	0x68(%rsp), %eax
0000000001020232	movl	%eax, (%rsp)
0000000001020235	leaq	0x18(%rsp), %rax
000000000102023a	movq	%rax, 0x8(%rsp)
000000000102023f	movq	$0x0, 0x10(%rsp)
0000000001020248	callq	runtime.sigaction
000000000102024d	movq	0x58(%rsp), %rbp
0000000001020252	addq	$0x60, %rsp
0000000001020256	retq
0000000001020257	leaq	0x37422(%rip), %rcx
000000000102025e	movq	%rcx, 0x48(%rsp)
0000000001020263	leaq	0x4ee16(%rip), %rcx
000000000102026a	movq	%rcx, 0x50(%rsp)
000000000102026f	testb	%al, (%rcx)
0000000001020271	leaq	0x50(%rsp), %rcx
0000000001020276	testb	%al, (%rcx)
0000000001020278	movq	0x4ee01(%rip), %rax
000000000102027f	jmp	0x1020222
0000000001020281	movq	%rcx, %rax
0000000001020284	jmp	0x1020222
0000000001020286	int3
0000000001020287	int3
0000000001020288	int3
0000000001020289	int3
000000000102028a	int3
000000000102028b	int3
000000000102028c	int3
000000000102028d	int3
000000000102028e	int3
000000000102028f	int3
runtime.setsigstack:
0000000001020290	subq	$0x40, %rsp
0000000001020294	movq	%rbp, 0x38(%rsp)
0000000001020299	leaq	0x38(%rsp), %rbp
000000000102029e	xorps	%xmm0, %xmm0
00000000010202a1	movups	%xmm0, 0x28(%rsp)
00000000010202a6	movl	0x48(%rsp), %eax
00000000010202aa	movl	%eax, (%rsp)
00000000010202ad	movq	$0x0, 0x8(%rsp)
00000000010202b6	leaq	0x28(%rsp), %rcx
00000000010202bb	movq	%rcx, 0x10(%rsp)
00000000010202c0	callq	runtime.sigaction
00000000010202c5	leaq	0x28(%rsp), %rax
00000000010202ca	testb	%al, (%rax)
00000000010202cc	movq	0x28(%rsp), %rax
00000000010202d1	movl	0x34(%rsp), %ecx
00000000010202d5	btl	$0x0, %ecx
00000000010202d9	jae	0x10202e5
00000000010202db	movq	0x38(%rsp), %rbp
00000000010202e0	addq	$0x40, %rsp
00000000010202e4	retq
00000000010202e5	xorps	%xmm0, %xmm0
00000000010202e8	movups	%xmm0, 0x18(%rsp)
00000000010202ed	leaq	0x18(%rsp), %rcx
00000000010202f2	testb	%al, (%rcx)
00000000010202f4	movq	%rax, 0x18(%rsp)
00000000010202f9	movl	0x30(%rsp), %eax
00000000010202fd	movl	%eax, 0x20(%rsp)
0000000001020301	movl	0x34(%rsp), %eax
0000000001020305	orl	$0x1, %eax
0000000001020308	movl	%eax, 0x24(%rsp)
000000000102030c	movl	0x48(%rsp), %eax
0000000001020310	movl	%eax, (%rsp)
0000000001020313	leaq	0x18(%rsp), %rax
0000000001020318	movq	%rax, 0x8(%rsp)
000000000102031d	movq	$0x0, 0x10(%rsp)
0000000001020326	callq	runtime.sigaction
000000000102032b	movq	0x38(%rsp), %rbp
0000000001020330	addq	$0x40, %rsp
0000000001020334	retq
0000000001020335	int3
0000000001020336	int3
0000000001020337	int3
0000000001020338	int3
0000000001020339	int3
000000000102033a	int3
000000000102033b	int3
000000000102033c	int3
000000000102033d	int3
000000000102033e	int3
000000000102033f	int3
runtime.getsig:
0000000001020340	subq	$0x30, %rsp
0000000001020344	movq	%rbp, 0x28(%rsp)
0000000001020349	leaq	0x28(%rsp), %rbp
000000000102034e	xorps	%xmm0, %xmm0
0000000001020351	movups	%xmm0, 0x18(%rsp)
0000000001020356	movl	0x38(%rsp), %eax
000000000102035a	movl	%eax, (%rsp)
000000000102035d	movq	$0x0, 0x8(%rsp)
0000000001020366	leaq	0x18(%rsp), %rax
000000000102036b	movq	%rax, 0x10(%rsp)
0000000001020370	callq	runtime.sigaction
0000000001020375	leaq	0x18(%rsp), %rax
000000000102037a	testb	%al, (%rax)
000000000102037c	movq	0x18(%rsp), %rax
0000000001020381	movq	%rax, 0x40(%rsp)
0000000001020386	movq	0x28(%rsp), %rbp
000000000102038b	addq	$0x30, %rsp
000000000102038f	retq
runtime.sysargs:
0000000001020390	movq	%gs:0x30, %rcx
0000000001020399	cmpq	0x10(%rcx), %rsp
000000000102039d	jbe	0x102047e
00000000010203a3	subq	$0x20, %rsp
00000000010203a7	movq	%rbp, 0x18(%rsp)
00000000010203ac	leaq	0x18(%rsp), %rbp
00000000010203b1	movl	0x28(%rsp), %eax
00000000010203b5	incl	%eax
00000000010203b7	movq	0x30(%rsp), %rcx
00000000010203bc	jmp	0x10203c0
00000000010203be	incl	%eax
00000000010203c0	movslq	%eax, %rdx
00000000010203c3	leaq	(%rcx,%rdx,8), %rbx
00000000010203c7	testb	%al, (%rbx)
00000000010203c9	movq	(%rcx,%rdx,8), %rdx
00000000010203cd	testq	%rdx, %rdx
00000000010203d0	jne	0x10203be
00000000010203d2	incl	%eax
00000000010203d4	movslq	%eax, %rax
00000000010203d7	leaq	(%rcx,%rax,8), %rdx
00000000010203db	testb	%al, (%rdx)
00000000010203dd	movq	(%rcx,%rax,8), %rax
00000000010203e1	movq	%rax, (%rsp)
00000000010203e5	callq	runtime.gostringnocopy
00000000010203ea	movq	0x10(%rsp), %rax
00000000010203ef	movq	0x8(%rsp), %rcx
00000000010203f4	movq	%rax, 0x9840d(%rip)
00000000010203fb	cmpl	$0x0, 0xb482e(%rip)
0000000001020402	jne	0x1020467
0000000001020404	movq	%rcx, os.executablePath(%rip)
000000000102040b	cmpq	$0x10, %rax
000000000102040f	jle	0x102044f
0000000001020411	movabsq	$0x6261747563657865, %rdx
000000000102041b	cmpq	%rdx, (%rcx)
000000000102041e	jne	0x102044f
0000000001020420	movabsq	$0x3d687461705f656c, %rdx
000000000102042a	cmpq	%rdx, 0x8(%rcx)
000000000102042e	jne	0x102044f
0000000001020430	leaq	-0x10(%rax), %rdx
0000000001020434	movq	%rdx, 0x983cd(%rip)
000000000102043b	leaq	0x10(%rcx), %rax
000000000102043f	cmpl	$0x0, 0xb47ea(%rip)
0000000001020446	jne	0x1020459
0000000001020448	movq	%rax, os.executablePath(%rip)
000000000102044f	movq	0x18(%rsp), %rbp
0000000001020454	addq	$0x20, %rsp
0000000001020458	retq
0000000001020459	leaq	os.executablePath(%rip), %rdi
0000000001020460	callq	runtime.gcWriteBarrier
0000000001020465	jmp	0x102044f
0000000001020467	leaq	os.executablePath(%rip), %rdi
000000000102046e	movq	%rax, %rdx
0000000001020471	movq	%rcx, %rax
0000000001020474	callq	runtime.gcWriteBarrier
0000000001020479	movq	%rdx, %rax
000000000102047c	jmp	0x102040b
000000000102047e	callq	runtime.morestack_noctxt
0000000001020483	jmp	runtime.sysargs
0000000001020488	int3
0000000001020489	int3
000000000102048a	int3
000000000102048b	int3
000000000102048c	int3
000000000102048d	int3
000000000102048e	int3
000000000102048f	int3
runtime.panicCheckMalloc:
0000000001020490	movq	%gs:0x30, %rcx
0000000001020499	cmpq	0x10(%rcx), %rsp
000000000102049d	jbe	0x102052b
00000000010204a3	subq	$0x20, %rsp
00000000010204a7	movq	%rbp, 0x18(%rsp)
00000000010204ac	leaq	0x18(%rsp), %rbp
00000000010204b1	movq	%gs:0x30, %rax
00000000010204ba	testq	%rax, %rax
00000000010204bd	je	0x10204d1
00000000010204bf	movq	0x30(%rax), %rax
00000000010204c3	testq	%rax, %rax
00000000010204c6	je	0x10204d1
00000000010204c8	cmpl	$0x0, 0xe8(%rax)
00000000010204cf	jne	0x10204db
00000000010204d1	movq	0x18(%rsp), %rbp
00000000010204d6	addq	$0x20, %rsp
00000000010204da	retq
00000000010204db	movq	0x28(%rsp), %rax
00000000010204e0	leaq	"go.itab.runtime.errorString,error"(%rip), %rcx
00000000010204e7	cmpq	%rcx, %rax
00000000010204ea	jne	0x1020508
00000000010204ec	movq	0x30(%rsp), %rax
00000000010204f1	movq	0x8(%rax), %rcx
00000000010204f5	movq	(%rax), %rax
00000000010204f8	movq	%rax, (%rsp)
00000000010204fc	movq	%rcx, 0x8(%rsp)
0000000001020501	callq	runtime.throw
0000000001020506	ud2
0000000001020508	movq	%rax, (%rsp)
000000000102050c	leaq	0x3bacd(%rip), %rax
0000000001020513	movq	%rax, 0x8(%rsp)
0000000001020518	leaq	0x3c6e1(%rip), %rax
000000000102051f	movq	%rax, 0x10(%rsp)
0000000001020524	callq	runtime.panicdottypeI
0000000001020529	ud2
000000000102052b	callq	runtime.morestack_noctxt
0000000001020530	jmp	runtime.panicCheckMalloc
0000000001020535	int3
0000000001020536	int3
0000000001020537	int3
0000000001020538	int3
0000000001020539	int3
000000000102053a	int3
000000000102053b	int3
000000000102053c	int3
000000000102053d	int3
000000000102053e	int3
000000000102053f	int3
runtime.panicindex:
0000000001020540	movq	%gs:0x30, %rcx
0000000001020549	cmpq	0x10(%rcx), %rsp
000000000102054d	jbe	0x102065f
0000000001020553	subq	$0x28, %rsp
0000000001020557	movq	%rbp, 0x20(%rsp)
000000000102055c	leaq	0x20(%rsp), %rbp
0000000001020561	movq	0x28(%rsp), %rax
0000000001020566	movq	%rax, (%rsp)
000000000102056a	callq	runtime.findfunc
000000000102056f	movq	0x10(%rsp), %rax
0000000001020574	movq	0x8(%rsp), %rcx
0000000001020579	movq	%rcx, (%rsp)
000000000102057d	movq	%rax, 0x8(%rsp)
0000000001020582	callq	runtime.funcname
0000000001020587	movq	0x10(%rsp), %rax
000000000102058c	cmpq	$0x8, 0x18(%rsp)
0000000001020592	jge	0x1020604
0000000001020594	xorl	%eax, %eax
0000000001020596	testb	%al, %al
0000000001020598	je	0x10205cf
000000000102059a	movq	0x96877(%rip), %rax
00000000010205a1	movq	runtime.indexError(%rip), %rcx
00000000010205a8	leaq	"go.itab.runtime.errorString,error"(%rip), %rdx
00000000010205af	cmpq	%rdx, %rcx
00000000010205b2	jne	0x102063c
00000000010205b8	movq	0x8(%rax), %rcx
00000000010205bc	movq	(%rax), %rax
00000000010205bf	movq	%rax, (%rsp)
00000000010205c3	movq	%rcx, 0x8(%rsp)
00000000010205c8	callq	runtime.throw
00000000010205cd	ud2
00000000010205cf	movq	0x96842(%rip), %rax
00000000010205d6	movq	runtime.indexError(%rip), %rcx
00000000010205dd	movq	%rcx, (%rsp)
00000000010205e1	movq	%rax, 0x8(%rsp)
00000000010205e6	callq	runtime.panicCheckMalloc
00000000010205eb	movq	0x96826(%rip), %rax
00000000010205f2	movq	runtime.indexError(%rip), %rcx
00000000010205f9	testq	%rcx, %rcx
00000000010205fc	je	0x102062c
00000000010205fe	movq	0x8(%rcx), %rcx
0000000001020602	jmp	0x102062c
0000000001020604	movq	%rax, (%rsp)
0000000001020608	leaq	0x4a872(%rip), %rax
000000000102060f	movq	%rax, 0x8(%rsp)
0000000001020614	movq	$0x8, 0x10(%rsp)
000000000102061d	callq	runtime.memequal
0000000001020622	movzbl	0x18(%rsp), %eax
0000000001020627	jmp	0x1020596
000000000102062c	movq	%rcx, (%rsp)
0000000001020630	movq	%rax, 0x8(%rsp)
0000000001020635	callq	runtime.gopanic
000000000102063a	ud2
000000000102063c	movq	%rcx, (%rsp)
0000000001020640	leaq	0x3b999(%rip), %rax
0000000001020647	movq	%rax, 0x8(%rsp)
000000000102064c	leaq	0x3c5ad(%rip), %rax
0000000001020653	movq	%rax, 0x10(%rsp)
0000000001020658	callq	runtime.panicdottypeI
000000000102065d	ud2
000000000102065f	callq	runtime.morestack_noctxt
0000000001020664	jmp	runtime.panicindex
0000000001020669	int3
000000000102066a	int3
000000000102066b	int3
000000000102066c	int3
000000000102066d	int3
000000000102066e	int3
000000000102066f	int3
runtime.panicslice:
0000000001020670	movq	%gs:0x30, %rcx
0000000001020679	cmpq	0x10(%rcx), %rsp
000000000102067d	jbe	0x102078f
0000000001020683	subq	$0x28, %rsp
0000000001020687	movq	%rbp, 0x20(%rsp)
000000000102068c	leaq	0x20(%rsp), %rbp
0000000001020691	movq	0x28(%rsp), %rax
0000000001020696	movq	%rax, (%rsp)
000000000102069a	callq	runtime.findfunc
000000000102069f	movq	0x10(%rsp), %rax
00000000010206a4	movq	0x8(%rsp), %rcx
00000000010206a9	movq	%rcx, (%rsp)
00000000010206ad	movq	%rax, 0x8(%rsp)
00000000010206b2	callq	runtime.funcname
00000000010206b7	movq	0x10(%rsp), %rax
00000000010206bc	cmpq	$0x8, 0x18(%rsp)
00000000010206c2	jge	0x1020734
00000000010206c4	xorl	%eax, %eax
00000000010206c6	testb	%al, %al
00000000010206c8	je	0x10206ff
00000000010206ca	movq	0x96777(%rip), %rax
00000000010206d1	movq	runtime.sliceError(%rip), %rcx
00000000010206d8	leaq	"go.itab.runtime.errorString,error"(%rip), %rdx
00000000010206df	cmpq	%rdx, %rcx
00000000010206e2	jne	0x102076c
00000000010206e8	movq	0x8(%rax), %rcx
00000000010206ec	movq	(%rax), %rax
00000000010206ef	movq	%rax, (%rsp)
00000000010206f3	movq	%rcx, 0x8(%rsp)
00000000010206f8	callq	runtime.throw
00000000010206fd	ud2
00000000010206ff	movq	0x96742(%rip), %rax
0000000001020706	movq	runtime.sliceError(%rip), %rcx
000000000102070d	movq	%rcx, (%rsp)
0000000001020711	movq	%rax, 0x8(%rsp)
0000000001020716	callq	runtime.panicCheckMalloc
000000000102071b	movq	0x96726(%rip), %rax
0000000001020722	movq	runtime.sliceError(%rip), %rcx
0000000001020729	testq	%rcx, %rcx
000000000102072c	je	0x102075c
000000000102072e	movq	0x8(%rcx), %rcx
0000000001020732	jmp	0x102075c
0000000001020734	movq	%rax, (%rsp)
0000000001020738	leaq	0x4a742(%rip), %rax
000000000102073f	movq	%rax, 0x8(%rsp)
0000000001020744	movq	$0x8, 0x10(%rsp)
000000000102074d	callq	runtime.memequal
0000000001020752	movzbl	0x18(%rsp), %eax
0000000001020757	jmp	0x10206c6
000000000102075c	movq	%rcx, (%rsp)
0000000001020760	movq	%rax, 0x8(%rsp)
0000000001020765	callq	runtime.gopanic
000000000102076a	ud2
000000000102076c	movq	%rcx, (%rsp)
0000000001020770	leaq	0x3b869(%rip), %rax
0000000001020777	movq	%rax, 0x8(%rsp)
000000000102077c	leaq	0x3c47d(%rip), %rax
0000000001020783	movq	%rax, 0x10(%rsp)
0000000001020788	callq	runtime.panicdottypeI
000000000102078d	ud2
000000000102078f	callq	runtime.morestack_noctxt
0000000001020794	jmp	runtime.panicslice
0000000001020799	int3
000000000102079a	int3
000000000102079b	int3
000000000102079c	int3
000000000102079d	int3
000000000102079e	int3
000000000102079f	int3
runtime.panicdivide:
00000000010207a0	movq	%gs:0x30, %rcx
00000000010207a9	cmpq	0x10(%rcx), %rsp
00000000010207ad	jbe	0x1020800
00000000010207af	subq	$0x18, %rsp
00000000010207b3	movq	%rbp, 0x10(%rsp)
00000000010207b8	leaq	0x10(%rsp), %rbp
00000000010207bd	movq	0x96634(%rip), %rax
00000000010207c4	movq	runtime.divideError(%rip), %rcx
00000000010207cb	movq	%rcx, (%rsp)
00000000010207cf	movq	%rax, 0x8(%rsp)
00000000010207d4	callq	runtime.panicCheckMalloc
00000000010207d9	movq	runtime.divideError(%rip), %rax
00000000010207e0	movq	0x96611(%rip), %rcx
00000000010207e7	testq	%rax, %rax
00000000010207ea	je	0x10207f0
00000000010207ec	movq	0x8(%rax), %rax
00000000010207f0	movq	%rax, (%rsp)
00000000010207f4	movq	%rcx, 0x8(%rsp)
00000000010207f9	callq	runtime.gopanic
00000000010207fe	ud2
0000000001020800	callq	runtime.morestack_noctxt
0000000001020805	jmp	runtime.panicdivide
0000000001020807	int3
0000000001020808	int3
0000000001020809	int3
000000000102080a	int3
000000000102080b	int3
000000000102080c	int3
000000000102080d	int3
000000000102080e	int3
000000000102080f	int3
runtime.panicoverflow:
0000000001020810	movq	%gs:0x30, %rcx
0000000001020819	cmpq	0x10(%rcx), %rsp
000000000102081d	jbe	0x1020870
000000000102081f	subq	$0x18, %rsp
0000000001020823	movq	%rbp, 0x10(%rsp)
0000000001020828	leaq	0x10(%rsp), %rbp
000000000102082d	movq	0x96604(%rip), %rax
0000000001020834	movq	runtime.overflowError(%rip), %rcx
000000000102083b	movq	%rcx, (%rsp)
000000000102083f	movq	%rax, 0x8(%rsp)
0000000001020844	callq	runtime.panicCheckMalloc
0000000001020849	movq	runtime.overflowError(%rip), %rax
0000000001020850	movq	0x965e1(%rip), %rcx
0000000001020857	testq	%rax, %rax
000000000102085a	je	0x1020860
000000000102085c	movq	0x8(%rax), %rax
0000000001020860	movq	%rax, (%rsp)
0000000001020864	movq	%rcx, 0x8(%rsp)
0000000001020869	callq	runtime.gopanic
000000000102086e	ud2
0000000001020870	callq	runtime.morestack_noctxt
0000000001020875	jmp	runtime.panicoverflow
0000000001020877	int3
0000000001020878	int3
0000000001020879	int3
000000000102087a	int3
000000000102087b	int3
000000000102087c	int3
000000000102087d	int3
000000000102087e	int3
000000000102087f	int3
runtime.panicfloat:
0000000001020880	movq	%gs:0x30, %rcx
0000000001020889	cmpq	0x10(%rcx), %rsp
000000000102088d	jbe	0x10208e0
000000000102088f	subq	$0x18, %rsp
0000000001020893	movq	%rbp, 0x10(%rsp)
0000000001020898	leaq	0x10(%rsp), %rbp
000000000102089d	movq	0x96564(%rip), %rax
00000000010208a4	movq	runtime.floatError(%rip), %rcx
00000000010208ab	movq	%rcx, (%rsp)
00000000010208af	movq	%rax, 0x8(%rsp)
00000000010208b4	callq	runtime.panicCheckMalloc
00000000010208b9	movq	runtime.floatError(%rip), %rax
00000000010208c0	movq	0x96541(%rip), %rcx
00000000010208c7	testq	%rax, %rax
00000000010208ca	je	0x10208d0
00000000010208cc	movq	0x8(%rax), %rax
00000000010208d0	movq	%rax, (%rsp)
00000000010208d4	movq	%rcx, 0x8(%rsp)
00000000010208d9	callq	runtime.gopanic
00000000010208de	ud2
00000000010208e0	callq	runtime.morestack_noctxt
00000000010208e5	jmp	runtime.panicfloat
00000000010208e7	int3
00000000010208e8	int3
00000000010208e9	int3
00000000010208ea	int3
00000000010208eb	int3
00000000010208ec	int3
00000000010208ed	int3
00000000010208ee	int3
00000000010208ef	int3
runtime.panicmem:
00000000010208f0	movq	%gs:0x30, %rcx
00000000010208f9	cmpq	0x10(%rcx), %rsp
00000000010208fd	jbe	0x1020950
00000000010208ff	subq	$0x18, %rsp
0000000001020903	movq	%rbp, 0x10(%rsp)
0000000001020908	leaq	0x10(%rsp), %rbp
000000000102090d	movq	0x96514(%rip), %rax
0000000001020914	movq	runtime.memoryError(%rip), %rcx
000000000102091b	movq	%rcx, (%rsp)
000000000102091f	movq	%rax, 0x8(%rsp)
0000000001020924	callq	runtime.panicCheckMalloc
0000000001020929	movq	runtime.memoryError(%rip), %rax
0000000001020930	movq	0x964f1(%rip), %rcx
0000000001020937	testq	%rax, %rax
000000000102093a	je	0x1020940
000000000102093c	movq	0x8(%rax), %rax
0000000001020940	movq	%rax, (%rsp)
0000000001020944	movq	%rcx, 0x8(%rsp)
0000000001020949	callq	runtime.gopanic
000000000102094e	ud2
0000000001020950	callq	runtime.morestack_noctxt
0000000001020955	jmp	runtime.panicmem
0000000001020957	int3
0000000001020958	int3
0000000001020959	int3
000000000102095a	int3
000000000102095b	int3
000000000102095c	int3
000000000102095d	int3
000000000102095e	int3
000000000102095f	int3
runtime.throwinit:
0000000001020960	movq	%gs:0x30, %rcx
0000000001020969	cmpq	0x10(%rcx), %rsp
000000000102096d	jbe	0x1020998
000000000102096f	subq	$0x18, %rsp
0000000001020973	movq	%rbp, 0x10(%rsp)
0000000001020978	leaq	0x10(%rsp), %rbp
000000000102097d	leaq	0x4df0e(%rip), %rax
0000000001020984	movq	%rax, (%rsp)
0000000001020988	movq	$0x32, 0x8(%rsp)
0000000001020991	callq	runtime.throw
0000000001020996	ud2
0000000001020998	callq	runtime.morestack_noctxt
000000000102099d	jmp	runtime.throwinit
000000000102099f	int3
runtime.deferproc:
00000000010209a0	subq	$0x28, %rsp
00000000010209a4	movq	%rbp, 0x20(%rsp)
00000000010209a9	leaq	0x20(%rsp), %rbp
00000000010209ae	movq	%gs:0x30, %rax
00000000010209b7	movq	0x30(%rax), %rcx
00000000010209bb	movq	0xc0(%rcx), %rcx
00000000010209c2	cmpq	%rax, %rcx
00000000010209c5	jne	0x1020aa6
00000000010209cb	leaq	0x38(%rsp), %rax
00000000010209d0	movq	%rax, 0x18(%rsp)
00000000010209d5	movl	0x30(%rsp), %ecx
00000000010209d9	movl	%ecx, (%rsp)
00000000010209dc	callq	runtime.newdefer
00000000010209e1	movq	0x8(%rsp), %rax
00000000010209e6	cmpq	$0x0, 0x20(%rax)
00000000010209eb	jne	0x1020a8b
00000000010209f1	movq	0x38(%rsp), %rcx
00000000010209f6	cmpl	$0x0, 0xb4233(%rip)
00000000010209fd	jne	0x1020a74
00000000010209ff	movq	%rcx, 0x18(%rax)
0000000001020a03	movq	0x28(%rsp), %rcx
0000000001020a08	movq	%rcx, 0x10(%rax)
0000000001020a0c	leaq	0x30(%rsp), %rcx
0000000001020a11	movq	%rcx, 0x8(%rax)
0000000001020a15	movl	0x30(%rsp), %ecx
0000000001020a19	testl	%ecx, %ecx
0000000001020a1b	jne	0x1020a2c
0000000001020a1d	callq	runtime.return0
0000000001020a22	movq	0x20(%rsp), %rbp
0000000001020a27	addq	$0x28, %rsp
0000000001020a2b	retq
0000000001020a2c	movq	0x18(%rsp), %rdx
0000000001020a31	addq	$0x8, %rdx
0000000001020a35	cmpl	$0x8, %ecx
0000000001020a38	jne	0x1020a4f
0000000001020a3a	cmpl	$0x0, (%rax)
0000000001020a3d	jne	0x1020a49
0000000001020a3f	xorl	%eax, %eax
0000000001020a41	movq	(%rdx), %rcx
0000000001020a44	movq	%rcx, (%rax)
0000000001020a47	jmp	0x1020a1d
0000000001020a49	addq	$0x30, %rax
0000000001020a4d	jmp	0x1020a41
0000000001020a4f	cmpl	$0x0, (%rax)
0000000001020a52	jne	0x1020a6e
0000000001020a54	xorl	%eax, %eax
0000000001020a56	movq	%rax, (%rsp)
0000000001020a5a	movq	%rdx, 0x8(%rsp)
0000000001020a5f	movslq	%ecx, %rax
0000000001020a62	movq	%rax, 0x10(%rsp)
0000000001020a67	callq	runtime.memmove
0000000001020a6c	jmp	0x1020a1d
0000000001020a6e	addq	$0x30, %rax
0000000001020a72	jmp	0x1020a56
0000000001020a74	leaq	0x18(%rax), %rdi
0000000001020a78	movq	%rax, %rdx
0000000001020a7b	movq	%rcx, %rax
0000000001020a7e	callq	runtime.gcWriteBarrier
0000000001020a83	movq	%rdx, %rax
0000000001020a86	jmp	0x1020a03
0000000001020a8b	leaq	0x4d60a(%rip), %rax
0000000001020a92	movq	%rax, (%rsp)
0000000001020a96	movq	$0x28, 0x8(%rsp)
0000000001020a9f	callq	runtime.throw
0000000001020aa4	ud2
0000000001020aa6	leaq	0x4b528(%rip), %rax
0000000001020aad	movq	%rax, (%rsp)
0000000001020ab1	movq	$0x15, 0x8(%rsp)
0000000001020aba	callq	runtime.throw
0000000001020abf	ud2
0000000001020ac1	int3
0000000001020ac2	int3
0000000001020ac3	int3
0000000001020ac4	int3
0000000001020ac5	int3
0000000001020ac6	int3
0000000001020ac7	int3
0000000001020ac8	int3
0000000001020ac9	int3
0000000001020aca	int3
0000000001020acb	int3
0000000001020acc	int3
0000000001020acd	int3
0000000001020ace	int3
0000000001020acf	int3
runtime.testdefersizes:
0000000001020ad0	movq	%gs:0x30, %rcx
0000000001020ad9	cmpq	0x10(%rcx), %rsp
0000000001020add	jbe	0x1020d0f
0000000001020ae3	subq	$0x48, %rsp
0000000001020ae7	movq	%rbp, 0x40(%rsp)
0000000001020aec	leaq	0x40(%rsp), %rbp
0000000001020af1	movq	$0x0, 0x2c(%rsp)
0000000001020afa	xorps	%xmm0, %xmm0
0000000001020afd	movups	%xmm0, 0x30(%rsp)
0000000001020b02	xorl	%eax, %eax
0000000001020b04	jmp	0x1020b19
0000000001020b06	movq	%rax, %rcx
0000000001020b09	shlq	$0x2, %rax
0000000001020b0d	movl	$0xffffffff, 0x2c(%rsp,%rax)
0000000001020b15	leaq	0x1(%rcx), %rax
0000000001020b19	cmpq	$0x5, %rax
0000000001020b1d	jl	0x1020b06
0000000001020b1f	xorl	%eax, %eax
0000000001020b21	jmp	0x1020b26
0000000001020b23	incq	%rax
0000000001020b26	testq	%rax, %rax
0000000001020b29	ja	0x1020c46
0000000001020b2f	xorl	%ecx, %ecx
0000000001020b31	cmpq	$0x5, %rcx
0000000001020b35	jae	0x1020c3c
0000000001020b3b	leaq	0x30(%rax), %rdx
0000000001020b3f	testq	%rax, %rax
0000000001020b42	movl	$0x30, %ebx
0000000001020b47	cmovbeq	%rbx, %rdx
0000000001020b4b	cmpq	$0x8000, %rdx
0000000001020b52	jae	0x1020bfc
0000000001020b58	cmpq	$0x3f8, %rdx
0000000001020b5f	ja	0x1020bbb
0000000001020b61	addq	$0x7, %rdx
0000000001020b65	shrq	$0x3, %rdx
0000000001020b69	cmpq	$0x81, %rdx
0000000001020b70	jae	0x1020d08
0000000001020b76	leaq	runtime.size_to_class8(%rip), %rsi
0000000001020b7d	movzbl	(%rdx,%rsi), %edx
0000000001020b81	cmpq	$0x43, %rdx
0000000001020b85	jae	0x1020d08
0000000001020b8b	leaq	runtime.class_to_size(%rip), %rdi
0000000001020b92	movzwl	(%rdi,%rdx,2), %edx
0000000001020b96	movl	0x2c(%rsp,%rcx,4), %r8d
0000000001020b9b	testl	%r8d, %r8d
0000000001020b9e	jge	0x1020bad
0000000001020ba0	shlq	$0x2, %rcx
0000000001020ba4	movl	%edx, 0x2c(%rsp,%rcx)
0000000001020ba8	jmp	0x1020b23
0000000001020bad	cmpl	%edx, %r8d
0000000001020bb0	je	0x1020b23
0000000001020bb6	jmp	0x1020c53
0000000001020bbb	addq	$-0x381, %rdx
0000000001020bc2	shrq	$0x7, %rdx
0000000001020bc6	cmpq	$0xf9, %rdx
0000000001020bcd	jae	0x1020d01
0000000001020bd3	leaq	runtime.size_to_class128(%rip), %rsi
0000000001020bda	movzbl	(%rdx,%rsi), %edx
0000000001020bde	cmpq	$0x43, %rdx
0000000001020be2	jae	0x1020d01
0000000001020be8	leaq	runtime.class_to_size(%rip), %rdi
0000000001020bef	movzwl	(%rdi,%rdx,2), %edx
0000000001020bf3	leaq	runtime.size_to_class8(%rip), %rsi
0000000001020bfa	jmp	0x1020b96
0000000001020bfc	leaq	0x2000(%rdx), %rsi
0000000001020c03	cmpq	%rdx, %rsi
0000000001020c06	jae	0x1020c1b
0000000001020c08	leaq	runtime.size_to_class8(%rip), %rsi
0000000001020c0f	leaq	runtime.class_to_size(%rip), %rdi
0000000001020c16	jmp	0x1020b96
0000000001020c1b	addq	$0x1fff, %rdx
0000000001020c22	andq	$-0x2000, %rdx
0000000001020c29	leaq	runtime.size_to_class8(%rip), %rsi
0000000001020c30	leaq	runtime.class_to_size(%rip), %rdi
0000000001020c37	jmp	0x1020b96
0000000001020c3c	movq	0x40(%rsp), %rbp
0000000001020c41	addq	$0x48, %rsp
0000000001020c45	retq
0000000001020c46	leaq	0xf(%rax), %rcx
0000000001020c4a	shrq	$0x4, %rcx
0000000001020c4e	jmp	0x1020b31
0000000001020c53	movq	%rcx, 0x20(%rsp)
0000000001020c58	movq	%rdx, 0x10(%rsp)
0000000001020c5d	movq	%rax, 0x18(%rsp)
0000000001020c62	callq	runtime.printlock
0000000001020c67	leaq	0x4b925(%rip), %rax
0000000001020c6e	movq	%rax, (%rsp)
0000000001020c72	movq	$0x18, 0x8(%rsp)
0000000001020c7b	callq	runtime.printstring
0000000001020c80	movq	0x18(%rsp), %rax
0000000001020c85	movq	%rax, (%rsp)
0000000001020c89	callq	runtime.printuint
0000000001020c8e	leaq	0x49f33(%rip), %rax
0000000001020c95	movq	%rax, (%rsp)
0000000001020c99	movq	$0x5, 0x8(%rsp)
0000000001020ca2	callq	runtime.printstring
0000000001020ca7	movq	0x10(%rsp), %rax
0000000001020cac	movq	%rax, (%rsp)
0000000001020cb0	callq	runtime.printuint
0000000001020cb5	leaq	0x4a1f8(%rip), %rax
0000000001020cbc	movq	%rax, (%rsp)
0000000001020cc0	movq	$0x9, 0x8(%rsp)
0000000001020cc9	callq	runtime.printstring
0000000001020cce	movq	0x20(%rsp), %rax
0000000001020cd3	movq	%rax, (%rsp)
0000000001020cd7	callq	runtime.printuint
0000000001020cdc	callq	runtime.printnl
0000000001020ce1	callq	runtime.printunlock
0000000001020ce6	leaq	0x4b0b3(%rip), %rax
0000000001020ced	movq	%rax, (%rsp)
0000000001020cf1	movq	$0x14, 0x8(%rsp)
0000000001020cfa	callq	runtime.throw
0000000001020cff	ud2
0000000001020d01	callq	runtime.panicindex
0000000001020d06	ud2
0000000001020d08	callq	runtime.panicindex
0000000001020d0d	ud2
0000000001020d0f	callq	runtime.morestack_noctxt
0000000001020d14	jmp	runtime.testdefersizes
0000000001020d19	int3
0000000001020d1a	int3
0000000001020d1b	int3
0000000001020d1c	int3
0000000001020d1d	int3
0000000001020d1e	int3
0000000001020d1f	int3
runtime.init.3:
0000000001020d20	movq	%gs:0x30, %rcx
0000000001020d29	cmpq	0x10(%rcx), %rsp
0000000001020d2d	jbe	0x1020d8b
0000000001020d2f	subq	$0x18, %rsp
0000000001020d33	movq	%rbp, 0x10(%rsp)
0000000001020d38	leaq	0x10(%rsp), %rbp
0000000001020d3d	xorps	%xmm0, %xmm0
0000000001020d40	movups	%xmm0, (%rsp)
0000000001020d44	movq	runtime.statictmp_19(%rip), %rcx
0000000001020d4b	leaq	0x33e0e(%rip), %rdx
0000000001020d52	movq	%rdx, (%rsp)
0000000001020d56	movq	%rcx, 0x8(%rsp)
0000000001020d5b	movq	(%rsp), %rcx
0000000001020d5f	movq	0x30(%rcx), %rax
0000000001020d63	cmpl	$0x0, 0xb3ec6(%rip)
0000000001020d6a	jne	0x1020d7d
0000000001020d6c	movq	%rax, runtime.deferType(%rip)
0000000001020d73	movq	0x10(%rsp), %rbp
0000000001020d78	addq	$0x18, %rsp
0000000001020d7c	retq
0000000001020d7d	leaq	runtime.deferType(%rip), %rdi
0000000001020d84	callq	runtime.gcWriteBarrier
0000000001020d89	jmp	0x1020d73
0000000001020d8b	callq	runtime.morestack_noctxt
0000000001020d90	jmp	runtime.init.3
0000000001020d92	int3
0000000001020d93	int3
0000000001020d94	int3
0000000001020d95	int3
0000000001020d96	int3
0000000001020d97	int3
0000000001020d98	int3
0000000001020d99	int3
0000000001020d9a	int3
0000000001020d9b	int3
0000000001020d9c	int3
0000000001020d9d	int3
0000000001020d9e	int3
0000000001020d9f	int3
runtime.newdefer:
0000000001020da0	subq	$0x60, %rsp
0000000001020da4	movq	%rbp, 0x58(%rsp)
0000000001020da9	leaq	0x58(%rsp), %rbp
0000000001020dae	movq	$0x0, 0x18(%rsp)
0000000001020db7	movl	0x68(%rsp), %ecx
0000000001020dbb	movslq	%ecx, %rdx
0000000001020dbe	testq	%rdx, %rdx
0000000001020dc1	ja	0x1020f84
0000000001020dc7	xorl	%eax, %eax
0000000001020dc9	movq	%gs:0x30, %rdx
0000000001020dd2	movq	%rdx, 0x10(%rsp)
0000000001020dd7	cmpq	$0x5, %rax
0000000001020ddb	jae	0x1020e6e
0000000001020de1	movq	0x30(%rdx), %rbx
0000000001020de5	movq	0xd0(%rbx), %rbx
0000000001020dec	testb	%al, (%rbx)
0000000001020dee	leaq	(%rax,%rax,2), %rsi
0000000001020df2	movq	0x60(%rbx,%rsi,8), %r8
0000000001020df7	testq	%r8, %r8
0000000001020dfa	jne	0x1020e10
0000000001020dfc	leaq	0x97d45(%rip), %r8
0000000001020e03	movq	(%r8,%rax,8), %r8
0000000001020e07	testq	%r8, %r8
0000000001020e0a	jne	0x1020f2d
0000000001020e10	movq	0x60(%rbx,%rsi,8), %r8
0000000001020e15	movq	0x58(%rbx,%rsi,8), %r9
0000000001020e1a	testq	%r8, %r8
0000000001020e1d	jle	0x1020e6e
0000000001020e1f	movq	-0x8(%r9,%r8,8), %r9
0000000001020e24	movq	%r9, 0x18(%rsp)
0000000001020e29	leaq	-0x1(%r8), %r9
0000000001020e2d	movq	0x58(%rbx,%rsi,8), %r10
0000000001020e32	movq	0x60(%rbx,%rsi,8), %r11
0000000001020e37	cmpq	%r11, %r9
0000000001020e3a	jae	0x1020f98
0000000001020e40	leaq	-0x8(%r10,%r8,8), %rdi
0000000001020e45	cmpl	$0x0, 0xb3de4(%rip)
0000000001020e4c	jne	0x1020f21
0000000001020e52	movq	$0x0, -0x8(%r10,%r8,8)
0000000001020e5b	movq	0x68(%rbx,%rsi,8), %r8
0000000001020e60	cmpq	%r8, %r9
0000000001020e63	ja	0x1020f91
0000000001020e69	movq	%r9, 0x60(%rbx,%rsi,8)
0000000001020e6e	cmpq	$0x0, 0x18(%rsp)
0000000001020e74	je	0x1020ed1
0000000001020e76	movq	0x18(%rsp), %rbx
0000000001020e7b	movl	%ecx, (%rbx)
0000000001020e7d	movq	0x18(%rsp), %rcx
0000000001020e82	testb	%al, (%rcx)
0000000001020e84	movq	0x28(%rdx), %rax
0000000001020e88	cmpl	$0x0, 0xb3da1(%rip)
0000000001020e8f	jne	0x1020ec6
0000000001020e91	movq	%rax, 0x28(%rcx)
0000000001020e95	movq	0x18(%rsp), %rax
0000000001020e9a	cmpl	$0x0, 0xb3d8f(%rip)
0000000001020ea1	jne	0x1020ebb
0000000001020ea3	movq	%rax, 0x28(%rdx)
0000000001020ea7	movq	0x18(%rsp), %rax
0000000001020eac	movq	%rax, 0x70(%rsp)
0000000001020eb1	movq	0x58(%rsp), %rbp
0000000001020eb6	addq	$0x60, %rsp
0000000001020eba	retq
0000000001020ebb	leaq	0x28(%rdx), %rdi
0000000001020ebf	callq	runtime.gcWriteBarrier
0000000001020ec4	jmp	0x1020ea7
0000000001020ec6	leaq	0x28(%rcx), %rdi
0000000001020eca	callq	runtime.gcWriteBarrier
0000000001020ecf	jmp	0x1020e95
0000000001020ed1	movq	$0x0, 0x28(%rsp)
0000000001020eda	movl	$0x0, 0x30(%rsp)
0000000001020ee2	movq	$0x0, 0x38(%rsp)
0000000001020eeb	leaq	runtime.newdefer.func2(%rip), %rax
0000000001020ef2	movq	%rax, 0x28(%rsp)
0000000001020ef7	movl	%ecx, 0x30(%rsp)
0000000001020efb	leaq	0x18(%rsp), %rax
0000000001020f00	movq	%rax, 0x38(%rsp)
0000000001020f05	leaq	0x28(%rsp), %rax
0000000001020f0a	movq	%rax, (%rsp)
0000000001020f0e	callq	runtime.systemstack
0000000001020f13	movl	0x68(%rsp), %ecx
0000000001020f17	movq	0x10(%rsp), %rdx
0000000001020f1c	jmp	0x1020e76
0000000001020f21	xorl	%eax, %eax
0000000001020f23	callq	runtime.gcWriteBarrier
0000000001020f28	jmp	0x1020e5b
0000000001020f2d	movq	%rbx, 0x20(%rsp)
0000000001020f32	movq	%rsi, 0x8(%rsp)
0000000001020f37	xorps	%xmm0, %xmm0
0000000001020f3a	movups	%xmm0, 0x40(%rsp)
0000000001020f3f	movq	$0x0, 0x50(%rsp)
0000000001020f48	leaq	runtime.newdefer.func1(%rip), %rcx
0000000001020f4f	movq	%rcx, 0x40(%rsp)
0000000001020f54	movq	%rbx, 0x48(%rsp)
0000000001020f59	movq	%rax, 0x50(%rsp)
0000000001020f5e	leaq	0x40(%rsp), %rax
0000000001020f63	movq	%rax, (%rsp)
0000000001020f67	callq	runtime.systemstack
0000000001020f6c	movl	0x68(%rsp), %ecx
0000000001020f70	movq	0x10(%rsp), %rdx
0000000001020f75	movq	0x20(%rsp), %rbx
0000000001020f7a	movq	0x8(%rsp), %rsi
0000000001020f7f	jmp	0x1020e10
0000000001020f84	leaq	0xf(%rdx), %rax
0000000001020f88	shrq	$0x4, %rax
0000000001020f8c	jmp	0x1020dc9
0000000001020f91	callq	runtime.panicslice
0000000001020f96	ud2
0000000001020f98	callq	runtime.panicindex
0000000001020f9d	ud2
0000000001020f9f	int3
runtime.freedefer:
0000000001020fa0	subq	$0x78, %rsp
0000000001020fa4	movq	%rbp, 0x70(%rsp)
0000000001020fa9	leaq	0x70(%rsp), %rbp
0000000001020fae	movq	0x80(%rsp), %rax
0000000001020fb6	cmpq	$0x0, 0x20(%rax)
0000000001020fbb	jne	0x1021189
0000000001020fc1	cmpq	$0x0, 0x18(%rax)
0000000001020fc6	jne	0x1021177
0000000001020fcc	movslq	(%rax), %rcx
0000000001020fcf	testq	%rcx, %rcx
0000000001020fd2	ja	0x102116a
0000000001020fd8	xorl	%ecx, %ecx
0000000001020fda	cmpq	$0x5, %rcx
0000000001020fde	jae	0x1021160
0000000001020fe4	movq	%gs:0x30, %rdx
0000000001020fed	movq	0x30(%rdx), %rdx
0000000001020ff1	movq	0xd0(%rdx), %rdx
0000000001020ff8	movq	%rdx, 0x50(%rsp)
0000000001020ffd	testb	%al, (%rdx)
0000000001020fff	leaq	(%rcx,%rcx,2), %rbx
0000000001021003	movq	%rbx, 0x40(%rsp)
0000000001021008	leaq	0x58(%rdx,%rbx,8), %rsi
000000000102100d	movq	%rsi, 0x48(%rsp)
0000000001021012	movq	0x68(%rdx,%rbx,8), %r8
0000000001021017	cmpq	%r8, 0x8(%rsi)
000000000102101b	je	0x102110f
0000000001021021	movl	$0x0, (%rax)
0000000001021027	movb	$0x0, 0x4(%rax)
000000000102102b	xorps	%xmm0, %xmm0
000000000102102e	movups	%xmm0, 0x8(%rax)
0000000001021032	cmpl	$0x0, 0xb3bf7(%rip)
0000000001021039	jne	0x10210f9
000000000102103f	movq	$0x0, 0x28(%rax)
0000000001021047	movq	0x60(%rdx,%rbx,8), %rcx
000000000102104c	movq	0x58(%rdx,%rbx,8), %r8
0000000001021051	movq	0x68(%rdx,%rbx,8), %r9
0000000001021056	leaq	0x1(%rcx), %r10
000000000102105a	cmpq	%r9, %r10
000000000102105d	jg	0x102108a
000000000102105f	leaq	0x1(%rcx), %rsi
0000000001021063	movq	%rsi, 0x60(%rdx,%rbx,8)
0000000001021068	leaq	(%r8,%rcx,8), %rdi
000000000102106c	cmpl	$0x0, 0xb3bbd(%rip)
0000000001021073	jne	0x1021083
0000000001021075	movq	%rax, (%r8,%rcx,8)
0000000001021079	movq	0x70(%rsp), %rbp
000000000102107e	addq	$0x78, %rsp
0000000001021082	retq
0000000001021083	callq	runtime.gcWriteBarrier
0000000001021088	jmp	0x1021079
000000000102108a	leaq	0x33acf(%rip), %rax
0000000001021091	movq	%rax, (%rsp)
0000000001021095	movq	%r8, 0x8(%rsp)
000000000102109a	movq	%rcx, 0x10(%rsp)
000000000102109f	movq	%r9, 0x18(%rsp)
00000000010210a4	movq	%r10, 0x20(%rsp)
00000000010210a9	callq	runtime.growslice
00000000010210ae	movq	0x28(%rsp), %rax
00000000010210b3	movq	0x30(%rsp), %rcx
00000000010210b8	movq	0x38(%rsp), %rdx
00000000010210bd	movq	0x40(%rsp), %rbx
00000000010210c2	movq	0x50(%rsp), %rsi
00000000010210c7	movq	%rdx, 0x68(%rsi,%rbx,8)
00000000010210cc	cmpl	$0x0, 0xb3b5d(%rip)
00000000010210d3	jne	0x10210ed
00000000010210d5	movq	%rax, 0x58(%rsi,%rbx,8)
00000000010210da	movq	%rsi, %rdx
00000000010210dd	movq	%rax, %r8
00000000010210e0	movq	0x80(%rsp), %rax
00000000010210e8	jmp	0x102105f
00000000010210ed	movq	0x48(%rsp), %rdi
00000000010210f2	callq	runtime.gcWriteBarrier
00000000010210f7	jmp	0x10210da
00000000010210f9	leaq	0x28(%rax), %rdi
00000000010210fd	movq	%rax, %rcx
0000000001021100	xorl	%eax, %eax
0000000001021102	callq	runtime.gcWriteBarrier
0000000001021107	movq	%rcx, %rax
000000000102110a	jmp	0x1021047
000000000102110f	xorps	%xmm0, %xmm0
0000000001021112	movups	%xmm0, 0x58(%rsp)
0000000001021117	movq	$0x0, 0x68(%rsp)
0000000001021120	leaq	runtime.freedefer.func1(%rip), %rax
0000000001021127	movq	%rax, 0x58(%rsp)
000000000102112c	movq	%rdx, 0x60(%rsp)
0000000001021131	movq	%rcx, 0x68(%rsp)
0000000001021136	leaq	0x58(%rsp), %rax
000000000102113b	movq	%rax, (%rsp)
000000000102113f	callq	runtime.systemstack
0000000001021144	movq	0x80(%rsp), %rax
000000000102114c	movq	0x50(%rsp), %rdx
0000000001021151	movq	0x40(%rsp), %rbx
0000000001021156	movq	0x48(%rsp), %rsi
000000000102115b	jmp	0x1021021
0000000001021160	movq	0x70(%rsp), %rbp
0000000001021165	addq	$0x78, %rsp
0000000001021169	retq
000000000102116a	addq	$0xf, %rcx
000000000102116e	shrq	$0x4, %rcx
0000000001021172	jmp	0x1020fda
0000000001021177	callq	runtime.freedeferfn
000000000102117c	movq	0x80(%rsp), %rax
0000000001021184	jmp	0x1020fcc
0000000001021189	callq	runtime.freedeferpanic
000000000102118e	movq	0x80(%rsp), %rax
0000000001021196	jmp	0x1020fc1
000000000102119b	int3
000000000102119c	int3
000000000102119d	int3
000000000102119e	int3
000000000102119f	int3
runtime.freedeferpanic:
00000000010211a0	movq	%gs:0x30, %rcx
00000000010211a9	cmpq	0x10(%rcx), %rsp
00000000010211ad	jbe	0x10211d8
00000000010211af	subq	$0x18, %rsp
00000000010211b3	movq	%rbp, 0x10(%rsp)
00000000010211b8	leaq	0x10(%rsp), %rbp
00000000010211bd	leaq	0x4c0ca(%rip), %rax
00000000010211c4	movq	%rax, (%rsp)
00000000010211c8	movq	$0x1e, 0x8(%rsp)
00000000010211d1	callq	runtime.throw
00000000010211d6	ud2
00000000010211d8	callq	runtime.morestack_noctxt
00000000010211dd	jmp	runtime.freedeferpanic
00000000010211df	int3
runtime.freedeferfn:
00000000010211e0	movq	%gs:0x30, %rcx
00000000010211e9	cmpq	0x10(%rcx), %rsp
00000000010211ed	jbe	0x1021218
00000000010211ef	subq	$0x18, %rsp
00000000010211f3	movq	%rbp, 0x10(%rsp)
00000000010211f8	leaq	0x10(%rsp), %rbp
00000000010211fd	leaq	0x4b73e(%rip), %rax
0000000001021204	movq	%rax, (%rsp)
0000000001021208	movq	$0x1a, 0x8(%rsp)
0000000001021211	callq	runtime.throw
0000000001021216	ud2
0000000001021218	callq	runtime.morestack_noctxt
000000000102121d	jmp	runtime.freedeferfn
000000000102121f	int3
runtime.deferreturn:
0000000001021220	subq	$0x40, %rsp
0000000001021224	movq	%rbp, 0x38(%rsp)
0000000001021229	leaq	0x38(%rsp), %rbp
000000000102122e	movq	%gs:0x30, %rcx
0000000001021237	movq	0x28(%rcx), %rdx
000000000102123b	testq	%rdx, %rdx
000000000102123e	je	0x102132e
0000000001021244	leaq	0x48(%rsp), %rbx
0000000001021249	cmpq	%rbx, 0x8(%rdx)
000000000102124d	jne	0x1021324
0000000001021253	movl	(%rdx), %ebx
0000000001021255	testl	%ebx, %ebx
0000000001021257	jne	0x10212d3
0000000001021259	movq	0x18(%rdx), %rbx
000000000102125d	cmpl	$0x0, 0xb39cc(%rip)
0000000001021264	jne	0x10212c6
0000000001021266	movq	$0x0, 0x18(%rdx)
000000000102126e	movq	%rbx, 0x20(%rsp)
0000000001021273	testb	%al, (%rcx)
0000000001021275	movq	0x28(%rdx), %rax
0000000001021279	cmpl	$0x0, 0xb39b0(%rip)
0000000001021280	jne	0x10212bb
0000000001021282	movq	%rax, 0x28(%rcx)
0000000001021286	movq	%rdx, (%rsp)
000000000102128a	callq	runtime.freedefer
000000000102128f	leaq	0x48(%rsp), %rax
0000000001021294	movq	%rax, 0x30(%rsp)
0000000001021299	movq	0x20(%rsp), %rax
000000000102129e	movq	%rax, (%rsp)
00000000010212a2	movq	0x30(%rsp), %rax
00000000010212a7	movq	%rax, 0x8(%rsp)
00000000010212ac	callq	runtime.jmpdefer
00000000010212b1	movq	0x38(%rsp), %rbp
00000000010212b6	addq	$0x40, %rsp
00000000010212ba	retq
00000000010212bb	leaq	0x28(%rcx), %rdi
00000000010212bf	callq	runtime.gcWriteBarrier
00000000010212c4	jmp	0x1021286
00000000010212c6	leaq	0x18(%rdx), %rdi
00000000010212ca	xorl	%eax, %eax
00000000010212cc	callq	runtime.gcWriteBarrier
00000000010212d1	jmp	0x102126e
00000000010212d3	cmpl	$0x8, %ebx
00000000010212d6	jne	0x10212ec
00000000010212d8	leaq	0x30(%rdx), %rbx
00000000010212dc	testb	%al, (%rbx)
00000000010212de	movq	0x30(%rdx), %rbx
00000000010212e2	movq	%rbx, 0x48(%rsp)
00000000010212e7	jmp	0x1021259
00000000010212ec	movq	%rcx, 0x18(%rsp)
00000000010212f1	movq	%rdx, 0x28(%rsp)
00000000010212f6	movslq	%ebx, %rax
00000000010212f9	movq	%rax, 0x10(%rsp)
00000000010212fe	leaq	0x48(%rsp), %rax
0000000001021303	movq	%rax, (%rsp)
0000000001021307	leaq	0x30(%rdx), %rcx
000000000102130b	movq	%rcx, 0x8(%rsp)
0000000001021310	callq	runtime.memmove
0000000001021315	movq	0x18(%rsp), %rcx
000000000102131a	movq	0x28(%rsp), %rdx
000000000102131f	jmp	0x1021259
0000000001021324	movq	0x38(%rsp), %rbp
0000000001021329	addq	$0x40, %rsp
000000000102132d	retq
000000000102132e	movq	0x38(%rsp), %rbp
0000000001021333	addq	$0x40, %rsp
0000000001021337	retq
0000000001021338	int3
0000000001021339	int3
000000000102133a	int3
000000000102133b	int3
000000000102133c	int3
000000000102133d	int3
000000000102133e	int3
000000000102133f	int3
runtime.preprintpanics:
0000000001021340	movq	%gs:0x30, %rcx
0000000001021349	cmpq	0x10(%rcx), %rsp
000000000102134d	jbe	0x102152a
0000000001021353	subq	$0x70, %rsp
0000000001021357	movq	%rbp, 0x68(%rsp)
000000000102135c	leaq	0x68(%rsp), %rbp
0000000001021361	movl	$0x0, (%rsp)
0000000001021368	leaq	0x4dc51(%rip), %rax
000000000102136f	movq	%rax, 0x8(%rsp)
0000000001021374	callq	runtime.deferproc
0000000001021379	testl	%eax, %eax
000000000102137b	jne	0x102151a
0000000001021381	movq	0x78(%rsp), %rax
0000000001021386	jmp	0x102138c
0000000001021388	movq	0x18(%rax), %rax
000000000102138c	testq	%rax, %rax
000000000102138f	je	0x102150a
0000000001021395	movq	0x10(%rax), %rcx
0000000001021399	movq	0x8(%rax), %rdx
000000000102139d	testq	%rdx, %rdx
00000000010213a0	je	0x1021388
00000000010213a2	movq	%rax, 0x78(%rsp)
00000000010213a7	movq	%rcx, 0x40(%rsp)
00000000010213ac	movq	%rdx, 0x30(%rsp)
00000000010213b1	leaq	0x3b848(%rip), %rax
00000000010213b8	movq	%rax, (%rsp)
00000000010213bc	movq	%rdx, 0x8(%rsp)
00000000010213c1	movq	%rcx, 0x10(%rsp)
00000000010213c6	callq	runtime.assertE2I2
00000000010213cb	movq	0x20(%rsp), %rax
00000000010213d0	movq	0x18(%rsp), %rcx
00000000010213d5	movq	0x78(%rsp), %rdx
00000000010213da	leaq	0x10(%rdx), %rbx
00000000010213de	movq	%rbx, 0x38(%rsp)
00000000010213e3	leaq	0x28(%rsp), %rsi
00000000010213e8	cmpb	$0x0, (%rsi)
00000000010213eb	je	0x1021459
00000000010213ed	movq	0x18(%rcx), %rcx
00000000010213f1	movq	%rax, (%rsp)
00000000010213f5	callq	*%rcx
00000000010213f7	movq	0x10(%rsp), %rax
00000000010213fc	movq	0x8(%rsp), %rcx
0000000001021401	movq	%rcx, 0x58(%rsp)
0000000001021406	movq	%rax, 0x60(%rsp)
000000000102140b	leaq	0x36f0e(%rip), %rax
0000000001021412	movq	%rax, (%rsp)
0000000001021416	leaq	0x58(%rsp), %rcx
000000000102141b	movq	%rcx, 0x8(%rsp)
0000000001021420	callq	runtime.convT2Estring
0000000001021425	movq	0x18(%rsp), %rax
000000000102142a	movq	0x10(%rsp), %rcx
000000000102142f	movq	0x78(%rsp), %rdx
0000000001021434	movq	%rcx, 0x8(%rdx)
0000000001021438	cmpl	$0x0, 0xb37f1(%rip)
000000000102143f	jne	0x102144d
0000000001021441	movq	%rax, 0x10(%rdx)
0000000001021445	movq	%rdx, %rax
0000000001021448	jmp	0x1021388
000000000102144d	movq	0x38(%rsp), %rdi
0000000001021452	callq	runtime.gcWriteBarrier
0000000001021457	jmp	0x1021445
0000000001021459	leaq	0x3b820(%rip), %rax
0000000001021460	movq	%rax, (%rsp)
0000000001021464	movq	0x30(%rsp), %rcx
0000000001021469	movq	%rcx, 0x8(%rsp)
000000000102146e	movq	0x40(%rsp), %rcx
0000000001021473	movq	%rcx, 0x10(%rsp)
0000000001021478	callq	runtime.assertE2I2
000000000102147d	movq	0x20(%rsp), %rax
0000000001021482	movq	0x18(%rsp), %rcx
0000000001021487	leaq	0x28(%rsp), %rdx
000000000102148c	cmpb	$0x0, (%rdx)
000000000102148f	jne	0x102149b
0000000001021491	movq	0x78(%rsp), %rax
0000000001021496	jmp	0x1021388
000000000102149b	movq	0x18(%rcx), %rcx
000000000102149f	movq	%rax, (%rsp)
00000000010214a3	callq	*%rcx
00000000010214a5	movq	0x10(%rsp), %rax
00000000010214aa	movq	0x8(%rsp), %rcx
00000000010214af	movq	%rcx, 0x48(%rsp)
00000000010214b4	movq	%rax, 0x50(%rsp)
00000000010214b9	leaq	0x36e60(%rip), %rax
00000000010214c0	movq	%rax, (%rsp)
00000000010214c4	leaq	0x48(%rsp), %rcx
00000000010214c9	movq	%rcx, 0x8(%rsp)
00000000010214ce	callq	runtime.convT2Estring
00000000010214d3	movq	0x10(%rsp), %rax
00000000010214d8	movq	0x18(%rsp), %rcx
00000000010214dd	movq	0x78(%rsp), %rdx
00000000010214e2	movq	%rax, 0x8(%rdx)
00000000010214e6	cmpl	$0x0, 0xb3743(%rip)
00000000010214ed	jne	0x10214fb
00000000010214ef	movq	%rcx, 0x10(%rdx)
00000000010214f3	movq	%rdx, %rax
00000000010214f6	jmp	0x1021388
00000000010214fb	movq	0x38(%rsp), %rdi
0000000001021500	movq	%rcx, %rax
0000000001021503	callq	runtime.gcWriteBarrier
0000000001021508	jmp	0x10214f3
000000000102150a	nop
000000000102150b	callq	runtime.deferreturn
0000000001021510	movq	0x68(%rsp), %rbp
0000000001021515	addq	$0x70, %rsp
0000000001021519	retq
000000000102151a	nop
000000000102151b	callq	runtime.deferreturn
0000000001021520	movq	0x68(%rsp), %rbp
0000000001021525	addq	$0x70, %rsp
0000000001021529	retq
000000000102152a	callq	runtime.morestack_noctxt
000000000102152f	jmp	runtime.preprintpanics
0000000001021534	int3
0000000001021535	int3
0000000001021536	int3
0000000001021537	int3
0000000001021538	int3
0000000001021539	int3
000000000102153a	int3
000000000102153b	int3
000000000102153c	int3
000000000102153d	int3
000000000102153e	int3
000000000102153f	int3
runtime.printpanics:
0000000001021540	movq	%gs:0x30, %rcx
0000000001021549	cmpq	0x10(%rcx), %rsp
000000000102154d	jbe	0x102162e
0000000001021553	subq	$0x18, %rsp
0000000001021557	movq	%rbp, 0x10(%rsp)
000000000102155c	leaq	0x10(%rsp), %rbp
0000000001021561	movq	0x20(%rsp), %rax
0000000001021566	movq	0x18(%rax), %rcx
000000000102156a	testq	%rcx, %rcx
000000000102156d	jne	0x10215fd
0000000001021573	callq	runtime.printlock
0000000001021578	leaq	0x497b2(%rip), %rax
000000000102157f	movq	%rax, (%rsp)
0000000001021583	movq	$0x7, 0x8(%rsp)
000000000102158c	callq	runtime.printstring
0000000001021591	callq	runtime.printunlock
0000000001021596	movq	0x20(%rsp), %rax
000000000102159b	movq	0x8(%rax), %rcx
000000000102159f	movq	0x10(%rax), %rdx
00000000010215a3	movq	%rcx, (%rsp)
00000000010215a7	movq	%rdx, 0x8(%rsp)
00000000010215ac	callq	runtime.printany
00000000010215b1	movq	0x20(%rsp), %rax
00000000010215b6	addq	$0x20, %rax
00000000010215ba	cmpb	$0x0, (%rax)
00000000010215bd	jne	0x10215d8
00000000010215bf	callq	runtime.printlock
00000000010215c4	callq	runtime.printnl
00000000010215c9	callq	runtime.printunlock
00000000010215ce	movq	0x10(%rsp), %rbp
00000000010215d3	addq	$0x18, %rsp
00000000010215d7	retq
00000000010215d8	callq	runtime.printlock
00000000010215dd	leaq	0x49c1c(%rip), %rax
00000000010215e4	movq	%rax, (%rsp)
00000000010215e8	movq	$0xc, 0x8(%rsp)
00000000010215f1	callq	runtime.printstring
00000000010215f6	callq	runtime.printunlock
00000000010215fb	jmp	0x10215bf
00000000010215fd	movq	%rcx, (%rsp)
0000000001021601	callq	runtime.printpanics
0000000001021606	callq	runtime.printlock
000000000102160b	leaq	0x4947c(%rip), %rax
0000000001021612	movq	%rax, (%rsp)
0000000001021616	movq	$0x1, 0x8(%rsp)
000000000102161f	callq	runtime.printstring
0000000001021624	callq	runtime.printunlock
0000000001021629	jmp	0x1021573
000000000102162e	callq	runtime.morestack_noctxt
0000000001021633	jmp	runtime.printpanics
0000000001021638	int3
0000000001021639	int3
000000000102163a	int3
000000000102163b	int3
000000000102163c	int3
000000000102163d	int3
000000000102163e	int3
000000000102163f	int3
runtime.gopanic:
0000000001021640	movq	%gs:0x30, %rcx
0000000001021649	leaq	-0x8(%rsp), %rax
000000000102164e	cmpq	0x10(%rcx), %rax
0000000001021652	jbe	0x1021ba3
0000000001021658	subq	$0x88, %rsp
000000000102165f	movq	%rbp, 0x80(%rsp)
0000000001021667	leaq	0x80(%rsp), %rbp
000000000102166f	movq	%gs:0x30, %rcx
0000000001021678	movq	0x30(%rcx), %rdx
000000000102167c	movq	0xc0(%rdx), %rbx
0000000001021683	cmpq	%rcx, %rbx
0000000001021686	jne	0x1021b38
000000000102168c	cmpl	$0x0, 0xe8(%rdx)
0000000001021693	jne	0x1021acd
0000000001021699	movq	%rcx, 0x38(%rsp)
000000000102169e	cmpq	$0x0, 0xf8(%rdx)
00000000010216a6	jne	0x10219ed
00000000010216ac	cmpl	$0x0, 0x100(%rdx)
00000000010216b3	jne	0x1021982
00000000010216b9	movq	$0x0, 0x58(%rsp)
00000000010216c2	xorps	%xmm0, %xmm0
00000000010216c5	movups	%xmm0, 0x60(%rsp)
00000000010216ca	movups	%xmm0, 0x70(%rsp)
00000000010216cf	movq	0x90(%rsp), %rdx
00000000010216d7	movq	%rdx, 0x60(%rsp)
00000000010216dc	movq	0x98(%rsp), %rdx
00000000010216e4	movq	%rdx, 0x68(%rsp)
00000000010216e9	movq	0x20(%rcx), %rdx
00000000010216ed	movq	%rdx, 0x70(%rsp)
00000000010216f2	leaq	0x58(%rsp), %rdx
00000000010216f7	movq	%rdx, 0x20(%rcx)
00000000010216fb	movl	$0x1, %ebx
0000000001021700	leaq	runtime.runningPanicDefers(%rip), %rsi
0000000001021707	lock
0000000001021708	xaddl	%ebx, (%rsi)
000000000102170b	jmp	0x102171e
000000000102170d	movq	0x38(%rsp), %rcx
0000000001021712	leaq	0x58(%rsp), %rdx
0000000001021717	leaq	runtime.runningPanicDefers(%rip), %rsi
000000000102171e	movq	0x28(%rcx), %rbx
0000000001021722	testq	%rbx, %rbx
0000000001021725	je	0x10218ec
000000000102172b	leaq	0x28(%rcx), %rdi
000000000102172f	leaq	0x4(%rbx), %r8
0000000001021733	cmpb	$0x0, (%r8)
0000000001021737	je	0x102179c
0000000001021739	movq	0x20(%rbx), %r8
000000000102173d	testq	%r8, %r8
0000000001021740	je	0x1021747
0000000001021742	movb	$0x1, 0x21(%r8)
0000000001021747	movq	$0x0, 0x20(%rbx)
000000000102174f	cmpl	$0x0, 0xb34da(%rip)
0000000001021756	jne	0x1021783
0000000001021758	movq	$0x0, 0x18(%rbx)
0000000001021760	movq	0x28(%rbx), %rax
0000000001021764	cmpl	$0x0, 0xb34c5(%rip)
000000000102176b	jne	0x102177c
000000000102176d	movq	%rax, 0x28(%rcx)
0000000001021771	movq	%rbx, (%rsp)
0000000001021775	callq	runtime.freedefer
000000000102177a	jmp	0x102170d
000000000102177c	callq	runtime.gcWriteBarrier
0000000001021781	jmp	0x1021771
0000000001021783	leaq	0x18(%rbx), %r8
0000000001021787	movq	%rdi, %rax
000000000102178a	movq	%r8, %rdi
000000000102178d	movq	%rax, %r9
0000000001021790	xorl	%eax, %eax
0000000001021792	callq	runtime.gcWriteBarrier
0000000001021797	movq	%r9, %rdi
000000000102179a	jmp	0x1021760
000000000102179c	movq	%rdi, 0x50(%rsp)
00000000010217a1	movq	%rbx, 0x48(%rsp)
00000000010217a6	movb	$0x1, 0x4(%rbx)
00000000010217aa	movq	%rdx, 0x20(%rbx)
00000000010217ae	movq	$0x0, (%rsp)
00000000010217b6	callq	runtime.getargp
00000000010217bb	movq	0x8(%rsp), %rax
00000000010217c0	movq	%rax, 0x58(%rsp)
00000000010217c5	movq	0x48(%rsp), %rax
00000000010217ca	movl	(%rax), %ecx
00000000010217cc	testl	%ecx, %ecx
00000000010217ce	jne	0x10218e3
00000000010217d4	xorl	%edx, %edx
00000000010217d6	movq	0x18(%rax), %rbx
00000000010217da	movl	%ecx, 0x1c(%rsp)
00000000010217de	movq	$0x0, (%rsp)
00000000010217e6	movq	%rbx, 0x8(%rsp)
00000000010217eb	movq	%rdx, 0x10(%rsp)
00000000010217f0	movl	%ecx, 0x18(%rsp)
00000000010217f4	callq	runtime.reflectcall
00000000010217f9	movq	$0x0, 0x58(%rsp)
0000000001021802	movq	0x38(%rsp), %rax
0000000001021807	movq	0x28(%rax), %rcx
000000000102180b	movq	0x48(%rsp), %rdx
0000000001021810	cmpq	%rdx, %rcx
0000000001021813	jne	0x1021967
0000000001021819	movq	$0x0, 0x20(%rdx)
0000000001021821	cmpl	$0x0, 0xb3408(%rip)
0000000001021828	jne	0x10218cd
000000000102182e	movq	$0x0, 0x18(%rdx)
0000000001021836	movq	0x28(%rdx), %rcx
000000000102183a	cmpl	$0x0, 0xb33ef(%rip)
0000000001021841	jne	0x10218bb
0000000001021843	movq	%rcx, 0x28(%rax)
0000000001021847	movq	0x10(%rdx), %rax
000000000102184b	movq	%rax, 0x20(%rsp)
0000000001021850	movq	0x8(%rdx), %rcx
0000000001021854	movq	%rcx, 0x30(%rsp)
0000000001021859	movq	%rdx, (%rsp)
000000000102185d	callq	runtime.freedefer
0000000001021862	leaq	0x78(%rsp), %rax
0000000001021867	cmpb	$0x0, (%rax)
000000000102186a	je	0x102170d
0000000001021870	movl	$0xffffffff, %eax
0000000001021875	leaq	runtime.runningPanicDefers(%rip), %rcx
000000000102187c	lock
000000000102187d	xaddl	%eax, (%rcx)
0000000001021880	movq	0x70(%rsp), %rax
0000000001021885	movq	0x38(%rsp), %rcx
000000000102188a	movq	%rax, 0x20(%rcx)
000000000102188e	jmp	0x1021898
0000000001021890	movq	0x18(%rax), %rax
0000000001021894	movq	%rax, 0x20(%rcx)
0000000001021898	movq	0x20(%rcx), %rax
000000000102189c	testq	%rax, %rax
000000000102189f	je	0x10218ad
00000000010218a1	leaq	0x21(%rax), %rdx
00000000010218a5	cmpb	$0x0, (%rdx)
00000000010218a8	jne	0x1021890
00000000010218aa	testq	%rax, %rax
00000000010218ad	jne	0x1021924
00000000010218af	movl	$0x0, 0xe0(%rcx)
00000000010218b9	jmp	0x1021924
00000000010218bb	movq	0x50(%rsp), %rdi
00000000010218c0	movq	%rcx, %rax
00000000010218c3	callq	runtime.gcWriteBarrier
00000000010218c8	jmp	0x1021847
00000000010218cd	leaq	0x18(%rdx), %rdi
00000000010218d1	movq	%rax, %rcx
00000000010218d4	xorl	%eax, %eax
00000000010218d6	callq	runtime.gcWriteBarrier
00000000010218db	movq	%rcx, %rax
00000000010218de	jmp	0x1021836
00000000010218e3	leaq	0x30(%rax), %rdx
00000000010218e7	jmp	0x10217d6
00000000010218ec	movq	0x20(%rcx), %rax
00000000010218f0	movq	%rax, (%rsp)
00000000010218f4	callq	runtime.preprintpanics
00000000010218f9	movq	0x38(%rsp), %rax
00000000010218fe	movq	0x20(%rax), %rax
0000000001021902	movq	%rax, (%rsp)
0000000001021906	callq	runtime.fatalpanic
000000000102190b	xorl	%eax, %eax
000000000102190d	movq	$0x0, (%rax)
0000000001021914	movq	0x80(%rsp), %rbp
000000000102191c	addq	$0x88, %rsp
0000000001021923	retq
0000000001021924	movq	0x30(%rsp), %rax
0000000001021929	movq	%rax, 0x100(%rcx)
0000000001021930	movq	0x20(%rsp), %rax
0000000001021935	movq	%rax, 0x108(%rcx)
000000000102193c	leaq	0x4d6fd(%rip), %rax
0000000001021943	movq	%rax, (%rsp)
0000000001021947	callq	runtime.mcall
000000000102194c	leaq	0x49d7d(%rip), %rax
0000000001021953	movq	%rax, (%rsp)
0000000001021957	movq	$0xf, 0x8(%rsp)
0000000001021960	callq	runtime.throw
0000000001021965	ud2
0000000001021967	leaq	0x4ac0d(%rip), %rax
000000000102196e	movq	%rax, (%rsp)
0000000001021972	movq	$0x18, 0x8(%rsp)
000000000102197b	callq	runtime.throw
0000000001021980	ud2
0000000001021982	callq	runtime.printlock
0000000001021987	leaq	0x493a3(%rip), %rax
000000000102198e	movq	%rax, (%rsp)
0000000001021992	movq	$0x7, 0x8(%rsp)
000000000102199b	callq	runtime.printstring
00000000010219a0	callq	runtime.printunlock
00000000010219a5	movq	0x90(%rsp), %rax
00000000010219ad	movq	%rax, (%rsp)
00000000010219b1	movq	0x98(%rsp), %rax
00000000010219b9	movq	%rax, 0x8(%rsp)
00000000010219be	callq	runtime.printany
00000000010219c3	callq	runtime.printlock
00000000010219c8	callq	runtime.printnl
00000000010219cd	callq	runtime.printunlock
00000000010219d2	leaq	0x4a290(%rip), %rax
00000000010219d9	movq	%rax, (%rsp)
00000000010219dd	movq	$0x13, 0x8(%rsp)
00000000010219e6	callq	runtime.throw
00000000010219eb	ud2
00000000010219ed	callq	runtime.printlock
00000000010219f2	leaq	0x49338(%rip), %rax
00000000010219f9	movq	%rax, (%rsp)
00000000010219fd	movq	$0x7, 0x8(%rsp)
0000000001021a06	callq	runtime.printstring
0000000001021a0b	callq	runtime.printunlock
0000000001021a10	movq	0x90(%rsp), %rax
0000000001021a18	movq	%rax, (%rsp)
0000000001021a1c	movq	0x98(%rsp), %rax
0000000001021a24	movq	%rax, 0x8(%rsp)
0000000001021a29	callq	runtime.printany
0000000001021a2e	callq	runtime.printlock
0000000001021a33	callq	runtime.printnl
0000000001021a38	callq	runtime.printunlock
0000000001021a3d	callq	runtime.printlock
0000000001021a42	leaq	0x4a483(%rip), %rax
0000000001021a49	movq	%rax, (%rsp)
0000000001021a4d	movq	$0x14, 0x8(%rsp)
0000000001021a56	callq	runtime.printstring
0000000001021a5b	callq	runtime.printunlock
0000000001021a60	movq	0x38(%rsp), %rax
0000000001021a65	movq	0x30(%rax), %rax
0000000001021a69	movq	0xf8(%rax), %rcx
0000000001021a70	movq	%rcx, 0x28(%rsp)
0000000001021a75	movq	0xf0(%rax), %rax
0000000001021a7c	movq	%rax, 0x40(%rsp)
0000000001021a81	callq	runtime.printlock
0000000001021a86	movq	0x40(%rsp), %rax
0000000001021a8b	movq	%rax, (%rsp)
0000000001021a8f	movq	0x28(%rsp), %rax
0000000001021a94	movq	%rax, 0x8(%rsp)
0000000001021a99	callq	runtime.printstring
0000000001021a9e	callq	runtime.printunlock
0000000001021aa3	callq	runtime.printlock
0000000001021aa8	callq	runtime.printnl
0000000001021aad	callq	runtime.printunlock
0000000001021ab2	leaq	0x4a997(%rip), %rax
0000000001021ab9	movq	%rax, (%rsp)
0000000001021abd	movq	$0x17, 0x8(%rsp)
0000000001021ac6	callq	runtime.throw
0000000001021acb	ud2
0000000001021acd	callq	runtime.printlock
0000000001021ad2	leaq	0x49258(%rip), %rax
0000000001021ad9	movq	%rax, (%rsp)
0000000001021add	movq	$0x7, 0x8(%rsp)
0000000001021ae6	callq	runtime.printstring
0000000001021aeb	callq	runtime.printunlock
0000000001021af0	movq	0x90(%rsp), %rax
0000000001021af8	movq	%rax, (%rsp)
0000000001021afc	movq	0x98(%rsp), %rax
0000000001021b04	movq	%rax, 0x8(%rsp)
0000000001021b09	callq	runtime.printany
0000000001021b0e	callq	runtime.printlock
0000000001021b13	callq	runtime.printnl
0000000001021b18	callq	runtime.printunlock
0000000001021b1d	leaq	0x4a11f(%rip), %rax
0000000001021b24	movq	%rax, (%rsp)
0000000001021b28	movq	$0x13, 0x8(%rsp)
0000000001021b31	callq	runtime.throw
0000000001021b36	ud2
0000000001021b38	callq	runtime.printlock
0000000001021b3d	leaq	0x491ed(%rip), %rax
0000000001021b44	movq	%rax, (%rsp)
0000000001021b48	movq	$0x7, 0x8(%rsp)
0000000001021b51	callq	runtime.printstring
0000000001021b56	callq	runtime.printunlock
0000000001021b5b	movq	0x90(%rsp), %rax
0000000001021b63	movq	%rax, (%rsp)
0000000001021b67	movq	0x98(%rsp), %rax
0000000001021b6f	movq	%rax, 0x8(%rsp)
0000000001021b74	callq	runtime.printany
0000000001021b79	callq	runtime.printlock
0000000001021b7e	callq	runtime.printnl
0000000001021b83	callq	runtime.printunlock
0000000001021b88	leaq	0x4a485(%rip), %rax
0000000001021b8f	movq	%rax, (%rsp)
0000000001021b93	movq	$0x15, 0x8(%rsp)
0000000001021b9c	callq	runtime.throw
0000000001021ba1	ud2
0000000001021ba3	callq	runtime.morestack_noctxt
0000000001021ba8	jmp	runtime.gopanic
0000000001021bad	int3
0000000001021bae	int3
0000000001021baf	int3
runtime.getargp:
0000000001021bb0	leaq	0x8(%rsp), %rax
0000000001021bb5	movq	%rax, 0x10(%rsp)
0000000001021bba	retq
0000000001021bbb	int3
0000000001021bbc	int3
0000000001021bbd	int3
0000000001021bbe	int3
0000000001021bbf	int3
runtime.gorecover:
0000000001021bc0	movq	%gs:0x30, %rax
0000000001021bc9	movq	0x20(%rax), %rax
0000000001021bcd	testq	%rax, %rax
0000000001021bd0	je	0x1021bdb
0000000001021bd2	leaq	0x20(%rax), %rcx
0000000001021bd6	cmpb	$0x0, (%rcx)
0000000001021bd9	je	0x1021be4
0000000001021bdb	xorps	%xmm0, %xmm0
0000000001021bde	movups	%xmm0, 0x10(%rsp)
0000000001021be3	retq
0000000001021be4	movq	(%rax), %rcx
0000000001021be7	movq	0x8(%rsp), %rdx
0000000001021bec	cmpq	%rcx, %rdx
0000000001021bef	jne	0x1021bdb
0000000001021bf1	movb	$0x1, 0x20(%rax)
0000000001021bf5	movq	0x10(%rax), %rcx
0000000001021bf9	movq	0x8(%rax), %rax
0000000001021bfd	movq	%rax, 0x10(%rsp)
0000000001021c02	movq	%rcx, 0x18(%rsp)
0000000001021c07	retq
0000000001021c08	int3
0000000001021c09	int3
0000000001021c0a	int3
0000000001021c0b	int3
0000000001021c0c	int3
0000000001021c0d	int3
0000000001021c0e	int3
0000000001021c0f	int3
runtime.throw:
0000000001021c10	subq	$0x28, %rsp
0000000001021c14	movq	%rbp, 0x20(%rsp)
0000000001021c19	leaq	0x20(%rsp), %rbp
0000000001021c1e	xorps	%xmm0, %xmm0
0000000001021c21	movups	%xmm0, 0x8(%rsp)
0000000001021c26	movq	$0x0, 0x18(%rsp)
0000000001021c2f	leaq	runtime.throw.func1(%rip), %rax
0000000001021c36	movq	%rax, 0x8(%rsp)
0000000001021c3b	movq	0x30(%rsp), %rax
0000000001021c40	movq	%rax, 0x10(%rsp)
0000000001021c45	movq	0x38(%rsp), %rax
0000000001021c4a	movq	%rax, 0x18(%rsp)
0000000001021c4f	leaq	0x8(%rsp), %rax
0000000001021c54	movq	%rax, (%rsp)
0000000001021c58	callq	runtime.systemstack
0000000001021c5d	movq	%gs:0x30, %rax
0000000001021c66	movq	0x30(%rax), %rax
0000000001021c6a	cmpl	$0x0, 0xec(%rax)
0000000001021c71	jne	0x1021c7d
0000000001021c73	movl	$0x1, 0xec(%rax)
0000000001021c7d	callq	runtime.fatalthrow
0000000001021c82	xorl	%eax, %eax
0000000001021c84	movq	$0x0, (%rax)
0000000001021c8b	movq	0x20(%rsp), %rbp
0000000001021c90	addq	$0x28, %rsp
0000000001021c94	retq
0000000001021c95	int3
0000000001021c96	int3
0000000001021c97	int3
0000000001021c98	int3
0000000001021c99	int3
0000000001021c9a	int3
0000000001021c9b	int3
0000000001021c9c	int3
0000000001021c9d	int3
0000000001021c9e	int3
0000000001021c9f	int3
runtime.recovery:
0000000001021ca0	movq	%gs:0x30, %rcx
0000000001021ca9	cmpq	0x10(%rcx), %rsp
0000000001021cad	jbe	0x1021ddf
0000000001021cb3	subq	$0x30, %rsp
0000000001021cb7	movq	%rbp, 0x28(%rsp)
0000000001021cbc	leaq	0x28(%rsp), %rbp
0000000001021cc1	movq	0x38(%rsp), %rax
0000000001021cc6	movq	0x100(%rax), %rcx
0000000001021ccd	movq	0x108(%rax), %rdx
0000000001021cd4	testq	%rcx, %rcx
0000000001021cd7	je	0x1021cf4
0000000001021cd9	movq	%rcx, 0x10(%rsp)
0000000001021cde	movq	(%rax), %rbx
0000000001021ce1	movq	%rbx, 0x20(%rsp)
0000000001021ce6	cmpq	%rbx, %rcx
0000000001021ce9	jb	0x1021d23
0000000001021ceb	movq	0x8(%rax), %rsi
0000000001021cef	cmpq	%rcx, %rsi
0000000001021cf2	jb	0x1021d23
0000000001021cf4	movq	%rcx, 0x38(%rax)
0000000001021cf8	movq	%rdx, 0x40(%rax)
0000000001021cfc	movq	$0x0, 0x60(%rax)
0000000001021d04	movq	$0x1, 0x58(%rax)
0000000001021d0c	addq	$0x38, %rax
0000000001021d10	movq	%rax, (%rsp)
0000000001021d14	callq	runtime.gogo
0000000001021d19	movq	0x28(%rsp), %rbp
0000000001021d1e	addq	$0x30, %rsp
0000000001021d22	retq
0000000001021d23	movq	0x8(%rax), %rax
0000000001021d27	movq	%rax, 0x18(%rsp)
0000000001021d2c	callq	runtime.printlock
0000000001021d31	leaq	0x49254(%rip), %rax
0000000001021d38	movq	%rax, (%rsp)
0000000001021d3c	movq	$0x9, 0x8(%rsp)
0000000001021d45	callq	runtime.printstring
0000000001021d4a	movq	0x10(%rsp), %rax
0000000001021d4f	movq	%rax, (%rsp)
0000000001021d53	callq	runtime.printhex
0000000001021d58	leaq	0x4918b(%rip), %rax
0000000001021d5f	movq	%rax, (%rsp)
0000000001021d63	movq	$0x9, 0x8(%rsp)
0000000001021d6c	callq	runtime.printstring
0000000001021d71	movq	0x20(%rsp), %rax
0000000001021d76	movq	%rax, (%rsp)
0000000001021d7a	callq	runtime.printhex
0000000001021d7f	leaq	0x48d16(%rip), %rax
0000000001021d86	movq	%rax, (%rsp)
0000000001021d8a	movq	$0x2, 0x8(%rsp)
0000000001021d93	callq	runtime.printstring
0000000001021d98	movq	0x18(%rsp), %rax
0000000001021d9d	movq	%rax, (%rsp)
0000000001021da1	callq	runtime.printhex
0000000001021da6	leaq	0x48cf9(%rip), %rax
0000000001021dad	movq	%rax, (%rsp)
0000000001021db1	movq	$0x2, 0x8(%rsp)
0000000001021dba	callq	runtime.printstring
0000000001021dbf	callq	runtime.printunlock
0000000001021dc4	leaq	0x49525(%rip), %rax
0000000001021dcb	movq	%rax, (%rsp)
0000000001021dcf	movq	$0xc, 0x8(%rsp)
0000000001021dd8	callq	runtime.throw
0000000001021ddd	ud2
0000000001021ddf	callq	runtime.morestack_noctxt
0000000001021de4	jmp	runtime.recovery
0000000001021de9	int3
0000000001021dea	int3
0000000001021deb	int3
0000000001021dec	int3
0000000001021ded	int3
0000000001021dee	int3
0000000001021def	int3
runtime.fatalthrow:
0000000001021df0	subq	$0x30, %rsp
0000000001021df4	movq	%rbp, 0x28(%rsp)
0000000001021df9	leaq	0x28(%rsp), %rbp
0000000001021dfe	movq	%gs:0x30, %rax
0000000001021e07	xorps	%xmm0, %xmm0
0000000001021e0a	movups	%xmm0, 0x8(%rsp)
0000000001021e0f	movups	%xmm0, 0x18(%rsp)
0000000001021e14	leaq	runtime.fatalthrow.func1(%rip), %rcx
0000000001021e1b	movq	%rcx, 0x8(%rsp)
0000000001021e20	movq	%rax, 0x10(%rsp)
0000000001021e25	movq	0x30(%rsp), %rax
0000000001021e2a	movq	%rax, 0x18(%rsp)
0000000001021e2f	leaq	0x38(%rsp), %rax
0000000001021e34	movq	%rax, 0x20(%rsp)
0000000001021e39	leaq	0x8(%rsp), %rax
0000000001021e3e	movq	%rax, (%rsp)
0000000001021e42	callq	runtime.systemstack
0000000001021e47	xorl	%eax, %eax
0000000001021e49	movq	$0x0, (%rax)
0000000001021e50	movq	0x28(%rsp), %rbp
0000000001021e55	addq	$0x30, %rsp
0000000001021e59	retq
0000000001021e5a	int3
0000000001021e5b	int3
0000000001021e5c	int3
0000000001021e5d	int3
0000000001021e5e	int3
0000000001021e5f	int3
runtime.fatalpanic:
0000000001021e60	subq	$0x48, %rsp
0000000001021e64	movq	%rbp, 0x40(%rsp)
0000000001021e69	leaq	0x40(%rsp), %rbp
0000000001021e6e	movq	%gs:0x30, %rax
0000000001021e77	movb	$0x0, 0xf(%rsp)
0000000001021e7c	xorps	%xmm0, %xmm0
0000000001021e7f	movups	%xmm0, 0x10(%rsp)
0000000001021e84	movups	%xmm0, 0x20(%rsp)
0000000001021e89	movups	%xmm0, 0x30(%rsp)
0000000001021e8e	leaq	runtime.fatalpanic.func1(%rip), %rcx
0000000001021e95	movq	%rcx, 0x10(%rsp)
0000000001021e9a	movq	0x50(%rsp), %rcx
0000000001021e9f	movq	%rcx, 0x18(%rsp)
0000000001021ea4	movq	%rax, 0x20(%rsp)
0000000001021ea9	movq	0x48(%rsp), %rax
0000000001021eae	movq	%rax, 0x28(%rsp)
0000000001021eb3	leaq	0x50(%rsp), %rax
0000000001021eb8	movq	%rax, 0x30(%rsp)
0000000001021ebd	leaq	0xf(%rsp), %rax
0000000001021ec2	movq	%rax, 0x38(%rsp)
0000000001021ec7	leaq	0x10(%rsp), %rcx
0000000001021ecc	movq	%rcx, (%rsp)
0000000001021ed0	callq	runtime.systemstack
0000000001021ed5	leaq	0xf(%rsp), %rax
0000000001021eda	cmpb	$0x0, (%rax)
0000000001021edd	jne	0x1021f02
0000000001021edf	leaq	0x4cf52(%rip), %rax
0000000001021ee6	movq	%rax, (%rsp)
0000000001021eea	callq	runtime.systemstack
0000000001021eef	xorl	%eax, %eax
0000000001021ef1	movq	$0x0, (%rax)
0000000001021ef8	movq	0x40(%rsp), %rbp
0000000001021efd	addq	$0x48, %rsp
0000000001021f01	retq
0000000001021f02	callq	runtime.crash
0000000001021f07	jmp	0x1021edf
0000000001021f09	int3
0000000001021f0a	int3
0000000001021f0b	int3
0000000001021f0c	int3
0000000001021f0d	int3
0000000001021f0e	int3
0000000001021f0f	int3
runtime.startpanic_m:
0000000001021f10	movq	%gs:0x30, %rcx
0000000001021f19	cmpq	0x10(%rcx), %rsp
0000000001021f1d	jbe	0x10220d2
0000000001021f23	subq	$0x20, %rsp
0000000001021f27	movq	%rbp, 0x18(%rsp)
0000000001021f2c	leaq	0x18(%rsp), %rbp
0000000001021f31	movq	%gs:0x30, %rcx
0000000001021f3a	cmpq	$0x0, 0x9ea5e(%rip)
0000000001021f42	je	0x10220a0
0000000001021f48	movq	0x30(%rcx), %rdx
0000000001021f4c	incl	0xe8(%rdx)
0000000001021f52	movq	0x30(%rcx), %rdx
0000000001021f56	cmpl	$0x0, 0x100(%rdx)
0000000001021f5d	jge	0x1021f69
0000000001021f5f	movl	$0x1, 0x100(%rdx)
0000000001021f69	movq	0x30(%rcx), %rdx
0000000001021f6d	movl	0x104(%rdx), %ebx
0000000001021f73	testl	%ebx, %ebx
0000000001021f75	jne	0x1022004
0000000001021f7b	movl	$0x1, 0x104(%rdx)
0000000001021f85	xorps	%xmm0, %xmm0
0000000001021f88	movups	%xmm0, 0xf0(%rcx)
0000000001021f8f	cmpl	$0x0, 0xb2c9a(%rip)
0000000001021f96	jne	0x1021ff4
0000000001021f98	movq	$0x0, 0xe8(%rcx)
0000000001021fa3	movl	$0x1, %eax
0000000001021fa8	leaq	runtime.panicking(%rip), %rcx
0000000001021faf	lock
0000000001021fb0	xaddl	%eax, (%rcx)
0000000001021fb3	leaq	runtime.paniclk(%rip), %rax
0000000001021fba	movq	%rax, (%rsp)
0000000001021fbe	callq	runtime.lock
0000000001021fc3	cmpl	$0x0, 0xb2d8a(%rip)
0000000001021fca	jle	0x1021fe9
0000000001021fcc	movb	$0x1, (%rsp)
0000000001021fd0	callq	runtime.schedtrace
0000000001021fd5	callq	runtime.freezetheworld
0000000001021fda	movb	$0x1, 0x28(%rsp)
0000000001021fdf	movq	0x18(%rsp), %rbp
0000000001021fe4	addq	$0x20, %rsp
0000000001021fe8	retq
0000000001021fe9	cmpl	$0x0, 0xb2d60(%rip)
0000000001021ff0	jg	0x1021fcc
0000000001021ff2	jmp	0x1021fd5
0000000001021ff4	leaq	0xe8(%rcx), %rdi
0000000001021ffb	xorl	%eax, %eax
0000000001021ffd	callq	runtime.gcWriteBarrier
0000000001022002	jmp	0x1021fa3
0000000001022004	cmpl	$0x1, %ebx
0000000001022007	je	0x1022064
0000000001022009	cmpl	$0x2, %ebx
000000000102200c	je	0x1022029
000000000102200e	movl	$0x5, (%rsp)
0000000001022015	callq	runtime.exit
000000000102201a	movb	$0x0, 0x28(%rsp)
000000000102201f	movq	0x18(%rsp), %rbp
0000000001022024	addq	$0x20, %rsp
0000000001022028	retq
0000000001022029	movl	$0x3, 0x104(%rdx)
0000000001022033	callq	runtime.printlock
0000000001022038	leaq	0x4a65c(%rip), %rax
000000000102203f	movq	%rax, (%rsp)
0000000001022043	movq	$0x18, 0x8(%rsp)
000000000102204c	callq	runtime.printstring
0000000001022051	callq	runtime.printunlock
0000000001022056	movl	$0x4, (%rsp)
000000000102205d	callq	runtime.exit
0000000001022062	jmp	0x102200e
0000000001022064	movl	$0x2, 0x104(%rdx)
000000000102206e	callq	runtime.printlock
0000000001022073	leaq	0x49bdc(%rip), %rax
000000000102207a	movq	%rax, (%rsp)
000000000102207e	movq	$0x13, 0x8(%rsp)
0000000001022087	callq	runtime.printstring
000000000102208c	callq	runtime.printunlock
0000000001022091	movb	$0x0, 0x28(%rsp)
0000000001022096	movq	0x18(%rsp), %rbp
000000000102209b	addq	$0x20, %rsp
000000000102209f	retq
00000000010220a0	movq	%rcx, 0x10(%rsp)
00000000010220a5	callq	runtime.printlock
00000000010220aa	leaq	0x4c541(%rip), %rax
00000000010220b1	movq	%rax, (%rsp)
00000000010220b5	movq	$0x2e, 0x8(%rsp)
00000000010220be	callq	runtime.printstring
00000000010220c3	callq	runtime.printunlock
00000000010220c8	movq	0x10(%rsp), %rcx
00000000010220cd	jmp	0x1021f48
00000000010220d2	callq	runtime.morestack_noctxt
00000000010220d7	jmp	runtime.startpanic_m
00000000010220dc	int3
00000000010220dd	int3
00000000010220de	int3
00000000010220df	int3
runtime.dopanic_m:
00000000010220e0	movq	%gs:0x30, %rcx
00000000010220e9	cmpq	0x10(%rcx), %rsp
00000000010220ed	jbe	0x102245e
00000000010220f3	subq	$0x60, %rsp
00000000010220f7	movq	%rbp, 0x58(%rsp)
00000000010220fc	leaq	0x58(%rsp), %rbp
0000000001022101	movq	0x68(%rsp), %rax
0000000001022106	movl	0xe0(%rax), %ecx
000000000102210c	testl	%ecx, %ecx
000000000102210e	je	0x1022230
0000000001022114	cmpl	$0x20, %ecx
0000000001022117	jb	0x1022437
000000000102211d	xorl	%edx, %edx
000000000102211f	xorl	%ebx, %ebx
0000000001022121	testq	%rdx, %rdx
0000000001022124	je	0x10223fe
000000000102212a	movq	%rdx, 0x30(%rsp)
000000000102212f	movq	%rbx, 0x50(%rsp)
0000000001022134	callq	runtime.printlock
0000000001022139	leaq	0x48d09(%rip), %rax
0000000001022140	movq	%rax, (%rsp)
0000000001022144	movq	$0x8, 0x8(%rsp)
000000000102214d	callq	runtime.printstring
0000000001022152	movq	0x50(%rsp), %rax
0000000001022157	movq	%rax, (%rsp)
000000000102215b	movq	0x30(%rsp), %rax
0000000001022160	movq	%rax, 0x8(%rsp)
0000000001022165	callq	runtime.printstring
000000000102216a	callq	runtime.printunlock
000000000102216f	movq	0x68(%rsp), %rax
0000000001022174	movq	0x100(%rax), %rcx
000000000102217b	movq	%rcx, 0x48(%rsp)
0000000001022180	movq	0x108(%rax), %rdx
0000000001022187	movq	%rdx, 0x40(%rsp)
000000000102218c	movq	0x110(%rax), %rbx
0000000001022193	movq	%rbx, 0x38(%rsp)
0000000001022198	callq	runtime.printlock
000000000102219d	leaq	0x48a95(%rip), %rax
00000000010221a4	movq	%rax, (%rsp)
00000000010221a8	movq	$0x6, 0x8(%rsp)
00000000010221b1	callq	runtime.printstring
00000000010221b6	movq	0x48(%rsp), %rax
00000000010221bb	movq	%rax, (%rsp)
00000000010221bf	callq	runtime.printhex
00000000010221c4	leaq	0x48a62(%rip), %rax
00000000010221cb	movq	%rax, (%rsp)
00000000010221cf	movq	$0x6, 0x8(%rsp)
00000000010221d8	callq	runtime.printstring
00000000010221dd	movq	0x40(%rsp), %rax
00000000010221e2	movq	%rax, (%rsp)
00000000010221e6	callq	runtime.printhex
00000000010221eb	leaq	0x48919(%rip), %rax
00000000010221f2	movq	%rax, (%rsp)
00000000010221f6	movq	$0x4, 0x8(%rsp)
00000000010221ff	callq	runtime.printstring
0000000001022204	movq	0x38(%rsp), %rax
0000000001022209	movq	%rax, (%rsp)
000000000102220d	callq	runtime.printhex
0000000001022212	leaq	0x4888d(%rip), %rax
0000000001022219	movq	%rax, (%rsp)
000000000102221d	movq	$0x2, 0x8(%rsp)
0000000001022226	callq	runtime.printstring
000000000102222b	callq	runtime.printunlock
0000000001022230	movq	%gs:0x30, %rax
0000000001022239	movl	runtime.traceback_cache(%rip), %ecx
000000000102223f	movq	0x30(%rax), %rax
0000000001022243	cmpl	$0x0, 0xec(%rax)
000000000102224a	jle	0x10223f2
0000000001022250	movl	$0x1, %edx
0000000001022255	movl	%ecx, 0x28(%rsp)
0000000001022259	movzbl	0x125(%rax), %eax
0000000001022260	movzbl	%al, %ebx
0000000001022263	shrl	$0x2, %ecx
0000000001022266	testb	%al, %al
0000000001022268	cmovnel	%ebx, %ecx
000000000102226b	movq	%gs:0x30, %rax
0000000001022274	testl	%ecx, %ecx
0000000001022276	jle	0x102230a
000000000102227c	movq	0x68(%rsp), %rbx
0000000001022281	movq	0x30(%rbx), %rdi
0000000001022285	movq	0xc0(%rdi), %r8
000000000102228c	cmpq	%rbx, %r8
000000000102228f	setne	%r8b
0000000001022293	movq	(%rdi), %rdi
0000000001022296	orl	%edx, %r8d
0000000001022299	movb	%r8b, 0x27(%rsp)
000000000102229e	cmpq	%rbx, %rdi
00000000010222a1	jne	0x10223a5
00000000010222a7	cmpl	$0x2, %ecx
00000000010222aa	jl	0x102238f
00000000010222b0	callq	runtime.printlock
00000000010222b5	leaq	0x494ee(%rip), %rax
00000000010222bc	movq	%rax, (%rsp)
00000000010222c0	movq	$0x10, 0x8(%rsp)
00000000010222c9	callq	runtime.printstring
00000000010222ce	callq	runtime.printunlock
00000000010222d3	movq	0x70(%rsp), %rax
00000000010222d8	movq	%rax, (%rsp)
00000000010222dc	movq	0x78(%rsp), %rax
00000000010222e1	movq	%rax, 0x8(%rsp)
00000000010222e6	movq	$0x0, 0x10(%rsp)
00000000010222ef	movq	0x68(%rsp), %rax
00000000010222f4	movq	%rax, 0x18(%rsp)
00000000010222f9	callq	runtime.traceback
00000000010222fe	leaq	runtime.didothers(%rip), %rax
0000000001022305	cmpb	$0x0, (%rax)
0000000001022308	je	0x102236c
000000000102230a	leaq	runtime.paniclk(%rip), %rax
0000000001022311	movq	%rax, (%rsp)
0000000001022315	callq	runtime.unlock
000000000102231a	movl	$0xffffffff, %eax
000000000102231f	leaq	runtime.panicking(%rip), %rcx
0000000001022326	lock
0000000001022327	xaddl	%eax, (%rcx)
000000000102232a	decl	%eax
000000000102232c	testl	%eax, %eax
000000000102232e	jne	0x102234a
0000000001022330	movl	0x28(%rsp), %eax
0000000001022334	btl	$0x0, %eax
0000000001022338	setb	0x80(%rsp)
0000000001022340	movq	0x58(%rsp), %rbp
0000000001022345	addq	$0x60, %rsp
0000000001022349	retq
000000000102234a	leaq	runtime.deadlock(%rip), %rax
0000000001022351	movq	%rax, (%rsp)
0000000001022355	callq	runtime.lock
000000000102235a	leaq	runtime.deadlock(%rip), %rax
0000000001022361	movq	%rax, (%rsp)
0000000001022365	callq	runtime.lock
000000000102236a	jmp	0x1022330
000000000102236c	movzbl	0x27(%rsp), %eax
0000000001022371	testb	%al, %al
0000000001022373	je	0x102230a
0000000001022375	movb	$0x1, runtime.cgoHasExtraM(%rip)
000000000102237c	movq	0x68(%rsp), %rax
0000000001022381	movq	%rax, (%rsp)
0000000001022385	callq	runtime.tracebackothers
000000000102238a	jmp	0x102230a
000000000102238f	movq	0x30(%rax), %rax
0000000001022393	cmpl	$0x0, 0xec(%rax)
000000000102239a	jg	0x10222b0
00000000010223a0	jmp	0x10222fe
00000000010223a5	callq	runtime.printlock
00000000010223aa	callq	runtime.printnl
00000000010223af	callq	runtime.printunlock
00000000010223b4	movq	0x68(%rsp), %rax
00000000010223b9	movq	%rax, (%rsp)
00000000010223bd	callq	runtime.goroutineheader
00000000010223c2	movq	0x70(%rsp), %rax
00000000010223c7	movq	%rax, (%rsp)
00000000010223cb	movq	0x78(%rsp), %rax
00000000010223d0	movq	%rax, 0x8(%rsp)
00000000010223d5	movq	$0x0, 0x10(%rsp)
00000000010223de	movq	0x68(%rsp), %rax
00000000010223e3	movq	%rax, 0x18(%rsp)
00000000010223e8	callq	runtime.traceback
00000000010223ed	jmp	0x10222fe
00000000010223f2	btl	$0x1, %ecx
00000000010223f6	setb	%dl
00000000010223f9	jmp	0x1022255
00000000010223fe	movl	%ecx, 0x2c(%rsp)
0000000001022402	callq	runtime.printlock
0000000001022407	leaq	0x48a3b(%rip), %rax
000000000102240e	movq	%rax, (%rsp)
0000000001022412	movq	$0x8, 0x8(%rsp)
000000000102241b	callq	runtime.printstring
0000000001022420	movl	0x2c(%rsp), %eax
0000000001022424	movq	%rax, (%rsp)
0000000001022428	callq	runtime.printhex
000000000102242d	callq	runtime.printunlock
0000000001022432	jmp	0x102216f
0000000001022437	cmpq	$0x20, %rcx
000000000102243b	jae	0x1022457
000000000102243d	leaq	(%rcx,%rcx,2), %rsi
0000000001022441	leaq	runtime.sigtable(%rip), %rdi
0000000001022448	movq	0x10(%rdi,%rsi,8), %rdx
000000000102244d	movq	0x8(%rdi,%rsi,8), %rbx
0000000001022452	jmp	0x1022121
0000000001022457	callq	runtime.panicindex
000000000102245c	ud2
000000000102245e	callq	runtime.morestack_noctxt
0000000001022463	jmp	runtime.dopanic_m
0000000001022468	int3
0000000001022469	int3
000000000102246a	int3
000000000102246b	int3
000000000102246c	int3
000000000102246d	int3
000000000102246e	int3
000000000102246f	int3
runtime.shouldPushSigpanic:
0000000001022470	movq	%gs:0x30, %rcx
0000000001022479	cmpq	0x10(%rcx), %rsp
000000000102247d	jbe	0x1022515
0000000001022483	subq	$0x20, %rsp
0000000001022487	movq	%rbp, 0x18(%rsp)
000000000102248c	leaq	0x18(%rsp), %rbp
0000000001022491	movq	0x30(%rsp), %rax
0000000001022496	testq	%rax, %rax
0000000001022499	je	0x1022506
000000000102249b	movq	0x28(%rsp), %rcx
00000000010224a0	movq	0x30(%rcx), %rcx
00000000010224a4	testb	%al, (%rcx)
00000000010224a6	addq	$0x115, %rcx
00000000010224ad	cmpb	$0x0, (%rcx)
00000000010224b0	je	0x10224c1
00000000010224b2	movb	$0x1, 0x40(%rsp)
00000000010224b7	movq	0x18(%rsp), %rbp
00000000010224bc	addq	$0x20, %rsp
00000000010224c0	retq
00000000010224c1	movq	%rax, (%rsp)
00000000010224c5	callq	runtime.findfunc
00000000010224ca	cmpq	$0x0, 0x8(%rsp)
00000000010224d0	jne	0x10224b2
00000000010224d2	movq	0x38(%rsp), %rax
00000000010224d7	movq	%rax, (%rsp)
00000000010224db	callq	runtime.findfunc
00000000010224e0	cmpq	$0x0, 0x8(%rsp)
00000000010224e6	je	0x10224f7
00000000010224e8	movb	$0x0, 0x40(%rsp)
00000000010224ed	movq	0x18(%rsp), %rbp
00000000010224f2	addq	$0x20, %rsp
00000000010224f6	retq
00000000010224f7	movb	$0x1, 0x40(%rsp)
00000000010224fc	movq	0x18(%rsp), %rbp
0000000001022501	addq	$0x20, %rsp
0000000001022505	retq
0000000001022506	movb	$0x0, 0x40(%rsp)
000000000102250b	movq	0x18(%rsp), %rbp
0000000001022510	addq	$0x20, %rsp
0000000001022514	retq
0000000001022515	callq	runtime.morestack_noctxt
000000000102251a	jmp	runtime.shouldPushSigpanic
000000000102251f	int3
runtime.recordForPanic:
0000000001022520	movq	%gs:0x30, %rcx
0000000001022529	cmpq	0x10(%rcx), %rsp
000000000102252d	jbe	0x102265f
0000000001022533	subq	$0x30, %rsp
0000000001022537	movq	%rbp, 0x28(%rsp)
000000000102253c	leaq	0x28(%rsp), %rbp
0000000001022541	callq	runtime.printlock
0000000001022546	movl	runtime.panicking(%rip), %eax
000000000102254c	testl	%eax, %eax
000000000102254e	jne	0x1022649
0000000001022554	movq	0x40(%rsp), %rax
0000000001022559	movq	0x48(%rsp), %rcx
000000000102255e	movq	0x38(%rsp), %rdx
0000000001022563	xorl	%ebx, %ebx
0000000001022565	jmp	0x102259a
0000000001022567	movq	runtime.printBacklogIndex(%rip), %rsi
000000000102256e	addq	%r8, %rsi
0000000001022571	movq	%rsi, %r10
0000000001022574	sarq	$0x3f, %rsi
0000000001022578	shrq	$0x37, %rsi
000000000102257c	addq	%r10, %rsi
000000000102257f	sarq	$0x9, %rsi
0000000001022583	shlq	$0x9, %rsi
0000000001022587	subq	%rsi, %r10
000000000102258a	movq	%r10, runtime.printBacklogIndex(%rip)
0000000001022591	addq	%r8, %rbx
0000000001022594	movq	%rdi, %rax
0000000001022597	movq	%r9, %rcx
000000000102259a	cmpq	%rax, %rbx
000000000102259d	jge	0x1022649
00000000010225a3	movq	runtime.printBacklogIndex(%rip), %rsi
00000000010225aa	cmpq	$0x200, %rsi
00000000010225b1	ja	0x1022658
00000000010225b7	leaq	-0x200(%rsi), %rdi
00000000010225be	movq	%rdi, %r8
00000000010225c1	sarq	$0x3f, %rdi
00000000010225c5	andq	%rdi, %rsi
00000000010225c8	cmpq	%rax, %rbx
00000000010225cb	ja	0x1022658
00000000010225d1	negq	%r8
00000000010225d4	movq	%rax, %rdi
00000000010225d7	subq	%rbx, %rax
00000000010225da	cmpq	%rax, %r8
00000000010225dd	cmovgq	%rax, %r8
00000000010225e1	leaq	runtime.printBacklog(%rip), %rax
00000000010225e8	addq	%rax, %rsi
00000000010225eb	movq	%rcx, %r9
00000000010225ee	subq	%rbx, %rcx
00000000010225f1	negq	%rcx
00000000010225f4	sarq	$0x3f, %rcx
00000000010225f8	andq	%rbx, %rcx
00000000010225fb	addq	%rdx, %rcx
00000000010225fe	cmpq	%rcx, %rsi
0000000001022601	je	0x1022567
0000000001022607	movq	%rbx, 0x20(%rsp)
000000000102260c	movq	%r8, 0x18(%rsp)
0000000001022611	movq	%rsi, (%rsp)
0000000001022615	movq	%rcx, 0x8(%rsp)
000000000102261a	movq	%r8, 0x10(%rsp)
000000000102261f	callq	runtime.memmove
0000000001022624	leaq	runtime.printBacklog(%rip), %rax
000000000102262b	movq	0x38(%rsp), %rdx
0000000001022630	movq	0x20(%rsp), %rbx
0000000001022635	movq	0x40(%rsp), %rdi
000000000102263a	movq	0x18(%rsp), %r8
000000000102263f	movq	0x48(%rsp), %r9
0000000001022644	jmp	0x1022567
0000000001022649	callq	runtime.printunlock
000000000102264e	movq	0x28(%rsp), %rbp
0000000001022653	addq	$0x30, %rsp
0000000001022657	retq
0000000001022658	callq	runtime.panicslice
000000000102265d	ud2
000000000102265f	callq	runtime.morestack_noctxt
0000000001022664	jmp	runtime.recordForPanic
0000000001022669	int3
000000000102266a	int3
000000000102266b	int3
000000000102266c	int3
000000000102266d	int3
000000000102266e	int3
000000000102266f	int3
runtime.printlock:
0000000001022670	movq	%gs:0x30, %rcx
0000000001022679	cmpq	0x10(%rcx), %rsp
000000000102267d	jbe	0x10226e1
000000000102267f	subq	$0x18, %rsp
0000000001022683	movq	%rbp, 0x10(%rsp)
0000000001022688	leaq	0x10(%rsp), %rbp
000000000102268d	movq	%gs:0x30, %rax
0000000001022696	movq	0x30(%rax), %rax
000000000102269a	incl	0x100(%rax)
00000000010226a0	movzbl	0x114(%rax), %ecx
00000000010226a7	leal	0x1(%rcx), %edx
00000000010226aa	movb	%dl, 0x114(%rax)
00000000010226b0	testb	%cl, %cl
00000000010226b2	je	0x10226c5
00000000010226b4	addl	$-0x1, 0x100(%rax)
00000000010226bb	movq	0x10(%rsp), %rbp
00000000010226c0	addq	$0x18, %rsp
00000000010226c4	retq
00000000010226c5	movq	%rax, 0x8(%rsp)
00000000010226ca	leaq	runtime.debuglock(%rip), %rax
00000000010226d1	movq	%rax, (%rsp)
00000000010226d5	callq	runtime.lock
00000000010226da	movq	0x8(%rsp), %rax
00000000010226df	jmp	0x10226b4
00000000010226e1	callq	runtime.morestack_noctxt
00000000010226e6	jmp	runtime.printlock
00000000010226e8	int3
00000000010226e9	int3
00000000010226ea	int3
00000000010226eb	int3
00000000010226ec	int3
00000000010226ed	int3
00000000010226ee	int3
00000000010226ef	int3
runtime.printunlock:
00000000010226f0	movq	%gs:0x30, %rcx
00000000010226f9	cmpq	0x10(%rcx), %rsp
00000000010226fd	jbe	0x102274b
00000000010226ff	subq	$0x10, %rsp
0000000001022703	movq	%rbp, 0x8(%rsp)
0000000001022708	leaq	0x8(%rsp), %rbp
000000000102270d	movq	%gs:0x30, %rax
0000000001022716	movq	0x30(%rax), %rax
000000000102271a	movzbl	0x114(%rax), %ecx
0000000001022721	leal	-0x1(%rcx), %edx
0000000001022724	movb	%dl, 0x114(%rax)
000000000102272a	cmpb	$0x1, %cl
000000000102272d	je	0x1022739
000000000102272f	movq	0x8(%rsp), %rbp
0000000001022734	addq	$0x10, %rsp
0000000001022738	retq
0000000001022739	leaq	runtime.debuglock(%rip), %rax
0000000001022740	movq	%rax, (%rsp)
0000000001022744	callq	runtime.unlock
0000000001022749	jmp	0x102272f
000000000102274b	callq	runtime.morestack_noctxt
0000000001022750	jmp	runtime.printunlock
0000000001022752	int3
0000000001022753	int3
0000000001022754	int3
0000000001022755	int3
0000000001022756	int3
0000000001022757	int3
0000000001022758	int3
0000000001022759	int3
000000000102275a	int3
000000000102275b	int3
000000000102275c	int3
000000000102275d	int3
000000000102275e	int3
000000000102275f	int3
runtime.gwrite:
0000000001022760	movq	%gs:0x30, %rcx
0000000001022769	cmpq	0x10(%rcx), %rsp
000000000102276d	jbe	0x102288e
0000000001022773	subq	$0x30, %rsp
0000000001022777	movq	%rbp, 0x28(%rsp)
000000000102277c	leaq	0x28(%rsp), %rbp
0000000001022781	movq	0x40(%rsp), %rax
0000000001022786	testq	%rax, %rax
0000000001022789	je	0x102287d
000000000102278f	movq	0x38(%rsp), %rcx
0000000001022794	movq	%rcx, (%rsp)
0000000001022798	movq	%rax, 0x8(%rsp)
000000000102279d	movq	0x48(%rsp), %rdx
00000000010227a2	movq	%rdx, 0x10(%rsp)
00000000010227a7	callq	runtime.recordForPanic
00000000010227ac	movq	%gs:0x30, %rax
00000000010227b5	testq	%rax, %rax
00000000010227b8	je	0x1022851
00000000010227be	movq	0xf8(%rax), %rcx
00000000010227c5	movq	0xf0(%rax), %rdx
00000000010227cc	movq	0xe8(%rax), %rbx
00000000010227d3	testq	%rbx, %rbx
00000000010227d6	je	0x1022851
00000000010227d8	subq	%rdx, %rcx
00000000010227db	movq	0x40(%rsp), %rsi
00000000010227e0	cmpq	%rsi, %rcx
00000000010227e3	movq	%rcx, %rdi
00000000010227e6	cmovgq	%rsi, %rcx
00000000010227ea	negq	%rdi
00000000010227ed	sarq	$0x3f, %rdi
00000000010227f1	andq	%rdi, %rdx
00000000010227f4	addq	%rbx, %rdx
00000000010227f7	movq	0x38(%rsp), %rbx
00000000010227fc	cmpq	%rbx, %rdx
00000000010227ff	jne	0x1022828
0000000001022801	movq	0xf8(%rax), %rdx
0000000001022808	movq	0xf0(%rax), %rbx
000000000102280f	addq	%rbx, %rcx
0000000001022812	cmpq	%rdx, %rcx
0000000001022815	ja	0x1022887
0000000001022817	movq	%rcx, 0xf0(%rax)
000000000102281e	movq	0x28(%rsp), %rbp
0000000001022823	addq	$0x30, %rsp
0000000001022827	retq
0000000001022828	movq	%rax, 0x20(%rsp)
000000000102282d	movq	%rcx, 0x18(%rsp)
0000000001022832	movq	%rdx, (%rsp)
0000000001022836	movq	%rbx, 0x8(%rsp)
000000000102283b	movq	%rcx, 0x10(%rsp)
0000000001022840	callq	runtime.memmove
0000000001022845	movq	0x20(%rsp), %rax
000000000102284a	movq	0x18(%rsp), %rcx
000000000102284f	jmp	0x1022801
0000000001022851	movq	0x38(%rsp), %rax
0000000001022856	movq	%rax, (%rsp)
000000000102285a	movq	0x40(%rsp), %rax
000000000102285f	movq	%rax, 0x8(%rsp)
0000000001022864	movq	0x48(%rsp), %rax
0000000001022869	movq	%rax, 0x10(%rsp)
000000000102286e	callq	runtime.writeErr
0000000001022873	movq	0x28(%rsp), %rbp
0000000001022878	addq	$0x30, %rsp
000000000102287c	retq
000000000102287d	movq	0x28(%rsp), %rbp
0000000001022882	addq	$0x30, %rsp
0000000001022886	retq
0000000001022887	callq	runtime.panicslice
000000000102288c	ud2
000000000102288e	callq	runtime.morestack_noctxt
0000000001022893	jmp	runtime.gwrite
0000000001022898	int3
0000000001022899	int3
000000000102289a	int3
000000000102289b	int3
000000000102289c	int3
000000000102289d	int3
000000000102289e	int3
000000000102289f	int3
runtime.printsp:
00000000010228a0	movq	%gs:0x30, %rcx
00000000010228a9	cmpq	0x10(%rcx), %rsp
00000000010228ad	jbe	0x10228e0
00000000010228af	subq	$0x18, %rsp
00000000010228b3	movq	%rbp, 0x10(%rsp)
00000000010228b8	leaq	0x10(%rsp), %rbp
00000000010228bd	leaq	"go.string.*"(%rip), %rax
00000000010228c4	movq	%rax, (%rsp)
00000000010228c8	movq	$0x1, 0x8(%rsp)
00000000010228d1	callq	runtime.printstring
00000000010228d6	movq	0x10(%rsp), %rbp
00000000010228db	addq	$0x18, %rsp
00000000010228df	retq
00000000010228e0	callq	runtime.morestack_noctxt
00000000010228e5	jmp	runtime.printsp
00000000010228e7	int3
00000000010228e8	int3
00000000010228e9	int3
00000000010228ea	int3
00000000010228eb	int3
00000000010228ec	int3
00000000010228ed	int3
00000000010228ee	int3
00000000010228ef	int3
runtime.printnl:
00000000010228f0	movq	%gs:0x30, %rcx
00000000010228f9	cmpq	0x10(%rcx), %rsp
00000000010228fd	jbe	0x1022930
00000000010228ff	subq	$0x18, %rsp
0000000001022903	movq	%rbp, 0x10(%rsp)
0000000001022908	leaq	0x10(%rsp), %rbp
000000000102290d	leaq	0x48179(%rip), %rax
0000000001022914	movq	%rax, (%rsp)
0000000001022918	movq	$0x1, 0x8(%rsp)
0000000001022921	callq	runtime.printstring
0000000001022926	movq	0x10(%rsp), %rbp
000000000102292b	addq	$0x18, %rsp
000000000102292f	retq
0000000001022930	callq	runtime.morestack_noctxt
0000000001022935	jmp	runtime.printnl
0000000001022937	int3
0000000001022938	int3
0000000001022939	int3
000000000102293a	int3
000000000102293b	int3
000000000102293c	int3
000000000102293d	int3
000000000102293e	int3
000000000102293f	int3
runtime.printbool:
0000000001022940	movq	%gs:0x30, %rcx
0000000001022949	cmpq	0x10(%rcx), %rsp
000000000102294d	jbe	0x10229a4
000000000102294f	subq	$0x18, %rsp
0000000001022953	movq	%rbp, 0x10(%rsp)
0000000001022958	leaq	0x10(%rsp), %rbp
000000000102295d	movzbl	0x20(%rsp), %eax
0000000001022962	testb	%al, %al
0000000001022964	je	0x1022989
0000000001022966	leaq	0x48216(%rip), %rax
000000000102296d	movq	%rax, (%rsp)
0000000001022971	movq	$0x4, 0x8(%rsp)
000000000102297a	callq	runtime.printstring
000000000102297f	movq	0x10(%rsp), %rbp
0000000001022984	addq	$0x18, %rsp
0000000001022988	retq
0000000001022989	leaq	0x4826f(%rip), %rax
0000000001022990	movq	%rax, (%rsp)
0000000001022994	movq	$0x5, 0x8(%rsp)
000000000102299d	callq	runtime.printstring
00000000010229a2	jmp	0x102297f
00000000010229a4	callq	runtime.morestack_noctxt
00000000010229a9	jmp	runtime.printbool
00000000010229ab	int3
00000000010229ac	int3
00000000010229ad	int3
00000000010229ae	int3
00000000010229af	int3
runtime.printfloat:
00000000010229b0	movq	%gs:0x30, %rcx
00000000010229b9	cmpq	0x10(%rcx), %rsp
00000000010229bd	jbe	0x1022c43
00000000010229c3	subq	$0x38, %rsp
00000000010229c7	movq	%rbp, 0x30(%rsp)
00000000010229cc	leaq	0x30(%rsp), %rbp
00000000010229d1	movsd	0x40(%rsp), %xmm0
00000000010229d7	ucomisd	%xmm0, %xmm0
00000000010229db	jne	0x1022c20
00000000010229e1	jp	0x1022c20
00000000010229e7	movups	%xmm0, %xmm1
00000000010229ea	addsd	%xmm0, %xmm0
00000000010229ee	ucomisd	%xmm0, %xmm1
00000000010229f2	jne	0x1022c18
00000000010229f8	jp	0x1022c18
00000000010229fe	xorps	%xmm2, %xmm2
0000000001022a01	ucomisd	%xmm2, %xmm1
0000000001022a05	ja	0x1022bf5
0000000001022a0b	ucomisd	%xmm0, %xmm1
0000000001022a0f	jne	0x1022a1d
0000000001022a11	jp	0x1022a1d
0000000001022a13	ucomisd	%xmm1, %xmm2
0000000001022a17	ja	0x1022bd2
0000000001022a1d	movq	$0x0, 0x22(%rsp)
0000000001022a26	movq	$0x0, 0x28(%rsp)
0000000001022a2f	movb	$0x2b, 0x22(%rsp)
0000000001022a34	ucomisd	%xmm1, %xmm2
0000000001022a38	jne	0x1022b54
0000000001022a3e	jp	0x1022b54
0000000001022a44	movsd	($f64.3ff0000000000000)(%rip), %xmm0
0000000001022a4c	divsd	%xmm1, %xmm0
0000000001022a50	ucomisd	%xmm0, %xmm2
0000000001022a54	jbe	0x1022a5b
0000000001022a56	movb	$0x2d, 0x22(%rsp)
0000000001022a5b	xorl	%eax, %eax
0000000001022a5d	xorl	%ecx, %ecx
0000000001022a5f	jmp	0x1022a8e
0000000001022a61	cvttsd2si	%xmm1, %rdx
0000000001022a66	leaq	0x30(%rdx), %rbx
0000000001022a6a	leaq	0x22(%rsp), %rsi
0000000001022a6f	movb	%bl, 0x2(%rcx,%rsi)
0000000001022a73	incq	%rcx
0000000001022a76	xorps	%xmm0, %xmm0
0000000001022a79	cvtsi2sdq	%rdx, %xmm0
0000000001022a7e	subsd	%xmm0, %xmm1
0000000001022a82	movsd	($f64.4024000000000000)(%rip), %xmm0
0000000001022a8a	mulsd	%xmm0, %xmm1
0000000001022a8e	cmpq	$0x7, %rcx
0000000001022a92	jl	0x1022a61
0000000001022a94	movzbl	0x24(%rsp), %ecx
0000000001022a99	movb	%cl, 0x23(%rsp)
0000000001022a9d	movb	$0x2e, 0x24(%rsp)
0000000001022aa2	movw	$0x2b65, 0x2b(%rsp)
0000000001022aa9	testq	%rax, %rax
0000000001022aac	jge	0x1022ab6
0000000001022aae	movb	$0x2d, 0x2c(%rsp)
0000000001022ab3	negq	%rax
0000000001022ab6	movq	%rax, 0x18(%rsp)
0000000001022abb	movabsq	$-0x5c28f5c28f5c28f5, %rcx
0000000001022ac5	imulq	%rcx
0000000001022ac8	movq	0x18(%rsp), %rcx
0000000001022acd	addq	%rcx, %rdx
0000000001022ad0	sarq	$0x6, %rdx
0000000001022ad4	movq	%rcx, %rbx
0000000001022ad7	sarq	$0x3f, %rcx
0000000001022adb	subq	%rcx, %rdx
0000000001022ade	addl	$0x30, %edx
0000000001022ae1	movb	%dl, 0x2d(%rsp)
0000000001022ae5	movabsq	$-0x3333333333333333, %rax
0000000001022aef	imulq	%rbx
0000000001022af2	addq	%rbx, %rdx
0000000001022af5	sarq	$0x3, %rdx
0000000001022af9	subq	%rcx, %rdx
0000000001022afc	movzbl	%dl, %ecx
0000000001022aff	imull	$0x19a, %ecx, %ecx
0000000001022b05	shrl	$0xc, %ecx
0000000001022b08	leal	(%rcx,%rcx,4), %ecx
0000000001022b0b	shll	%ecx
0000000001022b0d	movq	%rdx, %rsi
0000000001022b10	subl	%ecx, %edx
0000000001022b12	leal	0x30(%rdx), %ecx
0000000001022b15	movb	%cl, 0x2e(%rsp)
0000000001022b19	leaq	(%rsi,%rsi,4), %rcx
0000000001022b1d	shlq	%rcx
0000000001022b20	subq	%rcx, %rbx
0000000001022b23	leal	0x30(%rbx), %ecx
0000000001022b26	movb	%cl, 0x2f(%rsp)
0000000001022b2a	leaq	0x22(%rsp), %rcx
0000000001022b2f	movq	%rcx, (%rsp)
0000000001022b33	movq	$0xe, 0x8(%rsp)
0000000001022b3c	movq	$0xe, 0x10(%rsp)
0000000001022b45	callq	runtime.gwrite
0000000001022b4a	movq	0x30(%rsp), %rbp
0000000001022b4f	addq	$0x38, %rsp
0000000001022b53	retq
0000000001022b54	jbe	0x1022b67
0000000001022b56	movb	$0x2d, 0x22(%rsp)
0000000001022b5b	movsd	($f64.8000000000000000)(%rip), %xmm0
0000000001022b63	pxor	%xmm0, %xmm1
0000000001022b67	xorl	%eax, %eax
0000000001022b69	jmp	0x1022b72
0000000001022b6b	incq	%rax
0000000001022b6e	divsd	%xmm0, %xmm1
0000000001022b72	movsd	($f64.4024000000000000)(%rip), %xmm0
0000000001022b7a	ucomisd	%xmm0, %xmm1
0000000001022b7e	jae	0x1022b6b
0000000001022b80	jmp	0x1022b89
0000000001022b82	decq	%rax
0000000001022b85	mulsd	%xmm0, %xmm1
0000000001022b89	movsd	($f64.3ff0000000000000)(%rip), %xmm2
0000000001022b91	ucomisd	%xmm1, %xmm2
0000000001022b95	ja	0x1022b82
0000000001022b97	xorl	%ecx, %ecx
0000000001022b99	movsd	($f64.4014000000000000)(%rip), %xmm2
0000000001022ba1	jmp	0x1022baa
0000000001022ba3	incq	%rcx
0000000001022ba6	divsd	%xmm0, %xmm2
0000000001022baa	cmpq	$0x7, %rcx
0000000001022bae	jl	0x1022ba3
0000000001022bb0	addsd	%xmm1, %xmm2
0000000001022bb4	ucomisd	%xmm0, %xmm2
0000000001022bb8	jb	0x1022bcd
0000000001022bba	leaq	0x1(%rax), %rcx
0000000001022bbe	divsd	%xmm0, %xmm2
0000000001022bc2	movups	%xmm2, %xmm1
0000000001022bc5	movq	%rcx, %rax
0000000001022bc8	jmp	0x1022a5d
0000000001022bcd	movq	%rax, %rcx
0000000001022bd0	jmp	0x1022bc2
0000000001022bd2	leaq	0x47f4e(%rip), %rax
0000000001022bd9	movq	%rax, (%rsp)
0000000001022bdd	movq	$0x4, 0x8(%rsp)
0000000001022be6	callq	runtime.printstring
0000000001022beb	movq	0x30(%rsp), %rbp
0000000001022bf0	addq	$0x38, %rsp
0000000001022bf4	retq
0000000001022bf5	leaq	0x47f23(%rip), %rax
0000000001022bfc	movq	%rax, (%rsp)
0000000001022c00	movq	$0x4, 0x8(%rsp)
0000000001022c09	callq	runtime.printstring
0000000001022c0e	movq	0x30(%rsp), %rbp
0000000001022c13	addq	$0x38, %rsp
0000000001022c17	retq
0000000001022c18	xorps	%xmm2, %xmm2
0000000001022c1b	jmp	0x1022a0f
0000000001022c20	leaq	0x47ea5(%rip), %rax
0000000001022c27	movq	%rax, (%rsp)
0000000001022c2b	movq	$0x3, 0x8(%rsp)
0000000001022c34	callq	runtime.printstring
0000000001022c39	movq	0x30(%rsp), %rbp
0000000001022c3e	addq	$0x38, %rsp
0000000001022c42	retq
0000000001022c43	callq	runtime.morestack_noctxt
0000000001022c48	jmp	runtime.printfloat
0000000001022c4d	int3
0000000001022c4e	int3
0000000001022c4f	int3
runtime.printcomplex:
0000000001022c50	movq	%gs:0x30, %rcx
0000000001022c59	cmpq	0x10(%rcx), %rsp
0000000001022c5d	jbe	0x1022cd3
0000000001022c5f	subq	$0x18, %rsp
0000000001022c63	movq	%rbp, 0x10(%rsp)
0000000001022c68	leaq	0x10(%rsp), %rbp
0000000001022c6d	callq	runtime.printlock
0000000001022c72	leaq	0x47e08(%rip), %rax
0000000001022c79	movq	%rax, (%rsp)
0000000001022c7d	movq	$0x1, 0x8(%rsp)
0000000001022c86	callq	runtime.printstring
0000000001022c8b	movsd	0x20(%rsp), %xmm0
0000000001022c91	movsd	%xmm0, (%rsp)
0000000001022c96	callq	runtime.printfloat
0000000001022c9b	movsd	0x28(%rsp), %xmm0
0000000001022ca1	movsd	%xmm0, (%rsp)
0000000001022ca6	callq	runtime.printfloat
0000000001022cab	leaq	0x47df6(%rip), %rax
0000000001022cb2	movq	%rax, (%rsp)
0000000001022cb6	movq	$0x2, 0x8(%rsp)
0000000001022cbf	callq	runtime.printstring
0000000001022cc4	callq	runtime.printunlock
0000000001022cc9	movq	0x10(%rsp), %rbp
0000000001022cce	addq	$0x18, %rsp
0000000001022cd2	retq
0000000001022cd3	callq	runtime.morestack_noctxt
0000000001022cd8	jmp	runtime.printcomplex
0000000001022cdd	int3
0000000001022cde	int3
0000000001022cdf	int3
runtime.printuint:
0000000001022ce0	movq	%gs:0x30, %rcx
0000000001022ce9	leaq	-0x8(%rsp), %rax
0000000001022cee	cmpq	0x10(%rcx), %rax
0000000001022cf2	jbe	0x1022dd2
0000000001022cf8	subq	$0x88, %rsp
0000000001022cff	movq	%rbp, 0x80(%rsp)
0000000001022d07	leaq	0x80(%rsp), %rbp
0000000001022d0f	movq	$0x0, 0x1c(%rsp)
0000000001022d18	leaq	0x20(%rsp), %rdi
0000000001022d1d	xorps	%xmm0, %xmm0
0000000001022d20	leaq	-0x20(%rdi), %rdi
0000000001022d24	movq	%rbp, -0x10(%rsp)
0000000001022d29	leaq	-0x10(%rsp), %rbp
0000000001022d2e	callq	0x1049221
0000000001022d33	movq	(%rbp), %rbp
0000000001022d37	movq	0x90(%rsp), %rcx
0000000001022d3f	movl	$0x63, %eax
0000000001022d44	jmp	0x1022d4d
0000000001022d46	leaq	-0x1(%rsi), %rax
0000000001022d4a	movq	%rdx, %rcx
0000000001022d4d	testq	%rax, %rax
0000000001022d50	jle	0x1022dc6
0000000001022d52	movq	%rax, %rdx
0000000001022d55	movq	%rcx, %rax
0000000001022d58	movabsq	$-0x3333333333333333, %rbx
0000000001022d62	movq	%rdx, %rsi
0000000001022d65	mulq	%rbx
0000000001022d68	shrq	$0x3, %rdx
0000000001022d6c	leaq	(%rdx,%rdx,4), %rdi
0000000001022d70	shlq	%rdi
0000000001022d73	movq	%rcx, %r8
0000000001022d76	subq	%rdi, %rcx
0000000001022d79	addq	$0x30, %rcx
0000000001022d7d	movb	%cl, 0x1c(%rsp,%rsi)
0000000001022d81	cmpq	$0xa, %r8
0000000001022d85	jae	0x1022d46
0000000001022d87	cmpq	$0x64, %rsi
0000000001022d8b	ja	0x1022dcb
0000000001022d8d	leaq	-0x64(%rsi), %rax
0000000001022d91	movq	%rax, %rcx
0000000001022d94	sarq	$0x3f, %rax
0000000001022d98	andq	%rax, %rsi
0000000001022d9b	leaq	0x1c(%rsp,%rsi), %rax
0000000001022da0	movq	%rax, (%rsp)
0000000001022da4	negq	%rcx
0000000001022da7	movq	%rcx, 0x8(%rsp)
0000000001022dac	movq	%rcx, 0x10(%rsp)
0000000001022db1	callq	runtime.gwrite
0000000001022db6	movq	0x80(%rsp), %rbp
0000000001022dbe	addq	$0x88, %rsp
0000000001022dc5	retq
0000000001022dc6	movq	%rax, %rsi
0000000001022dc9	jmp	0x1022d87
0000000001022dcb	callq	runtime.panicslice
0000000001022dd0	ud2
0000000001022dd2	callq	runtime.morestack_noctxt
0000000001022dd7	jmp	runtime.printuint
0000000001022ddc	int3
0000000001022ddd	int3
0000000001022dde	int3
0000000001022ddf	int3
runtime.printint:
0000000001022de0	movq	%gs:0x30, %rcx
0000000001022de9	cmpq	0x10(%rcx), %rsp
0000000001022ded	jbe	0x1022e3d
0000000001022def	subq	$0x18, %rsp
0000000001022df3	movq	%rbp, 0x10(%rsp)
0000000001022df8	leaq	0x10(%rsp), %rbp
0000000001022dfd	movq	0x20(%rsp), %rax
0000000001022e02	testq	%rax, %rax
0000000001022e05	jl	0x1022e1a
0000000001022e07	movq	%rax, (%rsp)
0000000001022e0b	callq	runtime.printuint
0000000001022e10	movq	0x10(%rsp), %rbp
0000000001022e15	addq	$0x18, %rsp
0000000001022e19	retq
0000000001022e1a	leaq	0x47c64(%rip), %rax
0000000001022e21	movq	%rax, (%rsp)
0000000001022e25	movq	$0x1, 0x8(%rsp)
0000000001022e2e	callq	runtime.printstring
0000000001022e33	movq	0x20(%rsp), %rax
0000000001022e38	negq	%rax
0000000001022e3b	jmp	0x1022e07
0000000001022e3d	callq	runtime.morestack_noctxt
0000000001022e42	jmp	runtime.printint
0000000001022e44	int3
0000000001022e45	int3
0000000001022e46	int3
0000000001022e47	int3
0000000001022e48	int3
0000000001022e49	int3
0000000001022e4a	int3
0000000001022e4b	int3
0000000001022e4c	int3
0000000001022e4d	int3
0000000001022e4e	int3
0000000001022e4f	int3
runtime.printhex:
0000000001022e50	movq	%gs:0x30, %rcx
0000000001022e59	leaq	-0x8(%rsp), %rax
0000000001022e5e	cmpq	0x10(%rcx), %rax
0000000001022e62	jbe	0x1022f46
0000000001022e68	subq	$0x88, %rsp
0000000001022e6f	movq	%rbp, 0x80(%rsp)
0000000001022e77	leaq	0x80(%rsp), %rbp
0000000001022e7f	movq	$0x0, 0x1c(%rsp)
0000000001022e88	leaq	0x20(%rsp), %rdi
0000000001022e8d	xorps	%xmm0, %xmm0
0000000001022e90	leaq	-0x20(%rdi), %rdi
0000000001022e94	movq	%rbp, -0x10(%rsp)
0000000001022e99	leaq	-0x10(%rsp), %rbp
0000000001022e9e	callq	0x1049221
0000000001022ea3	movq	(%rbp), %rbp
0000000001022ea7	movq	0x90(%rsp), %rax
0000000001022eaf	movl	$0x63, %ecx
0000000001022eb4	jmp	0x1022ec0
0000000001022eb6	decq	%rcx
0000000001022eb9	shrq	$0x4, %rdx
0000000001022ebd	movq	%rdx, %rax
0000000001022ec0	testq	%rcx, %rcx
0000000001022ec3	jle	0x1022ee1
0000000001022ec5	movq	%rax, %rdx
0000000001022ec8	andq	$0xf, %rax
0000000001022ecc	leaq	0x48887(%rip), %rbx
0000000001022ed3	movzbl	(%rbx,%rax), %eax
0000000001022ed7	movb	%al, 0x1c(%rsp,%rcx)
0000000001022edb	cmpq	$0x10, %rdx
0000000001022edf	jae	0x1022eb6
0000000001022ee1	leaq	-0x1(%rcx), %rax
0000000001022ee5	cmpq	$0x64, %rax
0000000001022ee9	jae	0x1022f3f
0000000001022eeb	movb	$0x78, 0x1b(%rsp,%rcx)
0000000001022ef0	leaq	-0x2(%rcx), %rax
0000000001022ef4	cmpq	$0x64, %rax
0000000001022ef8	jae	0x1022f38
0000000001022efa	movb	$0x30, 0x1a(%rsp,%rcx)
0000000001022eff	addq	$-0x66, %rcx
0000000001022f03	movq	%rcx, %rdx
0000000001022f06	sarq	$0x3f, %rcx
0000000001022f0a	andq	%rcx, %rax
0000000001022f0d	leaq	0x1c(%rsp,%rax), %rax
0000000001022f12	movq	%rax, (%rsp)
0000000001022f16	negq	%rdx
0000000001022f19	movq	%rdx, 0x8(%rsp)
0000000001022f1e	movq	%rdx, 0x10(%rsp)
0000000001022f23	callq	runtime.gwrite
0000000001022f28	movq	0x80(%rsp), %rbp
0000000001022f30	addq	$0x88, %rsp
0000000001022f37	retq
0000000001022f38	callq	runtime.panicindex
0000000001022f3d	ud2
0000000001022f3f	callq	runtime.panicindex
0000000001022f44	ud2
0000000001022f46	callq	runtime.morestack_noctxt
0000000001022f4b	jmp	runtime.printhex
runtime.printpointer:
0000000001022f50	movq	%gs:0x30, %rcx
0000000001022f59	cmpq	0x10(%rcx), %rsp
0000000001022f5d	jbe	0x1022f85
0000000001022f5f	subq	$0x10, %rsp
0000000001022f63	movq	%rbp, 0x8(%rsp)
0000000001022f68	leaq	0x8(%rsp), %rbp
0000000001022f6d	movq	0x18(%rsp), %rax
0000000001022f72	movq	%rax, (%rsp)
0000000001022f76	callq	runtime.printhex
0000000001022f7b	movq	0x8(%rsp), %rbp
0000000001022f80	addq	$0x10, %rsp
0000000001022f84	retq
0000000001022f85	callq	runtime.morestack_noctxt
0000000001022f8a	jmp	runtime.printpointer
0000000001022f8c	int3
0000000001022f8d	int3
0000000001022f8e	int3
0000000001022f8f	int3
runtime.printstring:
0000000001022f90	movq	%gs:0x30, %rcx
0000000001022f99	cmpq	0x10(%rcx), %rsp
0000000001022f9d	jbe	0x1023012
0000000001022f9f	subq	$0x48, %rsp
0000000001022fa3	movq	%rbp, 0x40(%rsp)
0000000001022fa8	leaq	0x40(%rsp), %rbp
0000000001022fad	movq	0x50(%rsp), %rax
0000000001022fb2	movq	%rax, 0x18(%rsp)
0000000001022fb7	movq	0x58(%rsp), %rax
0000000001022fbc	movq	%rax, 0x20(%rsp)
0000000001022fc1	movq	$0x0, 0x28(%rsp)
0000000001022fca	xorps	%xmm0, %xmm0
0000000001022fcd	movups	%xmm0, 0x30(%rsp)
0000000001022fd2	movq	0x18(%rsp), %rax
0000000001022fd7	movq	%rax, 0x28(%rsp)
0000000001022fdc	movq	0x20(%rsp), %rax
0000000001022fe1	movq	%rax, 0x30(%rsp)
0000000001022fe6	movq	0x20(%rsp), %rcx
0000000001022feb	movq	%rcx, 0x38(%rsp)
0000000001022ff0	movq	0x28(%rsp), %rdx
0000000001022ff5	movq	%rdx, (%rsp)
0000000001022ff9	movq	%rax, 0x8(%rsp)
0000000001022ffe	movq	%rcx, 0x10(%rsp)
0000000001023003	callq	runtime.gwrite
0000000001023008	movq	0x40(%rsp), %rbp
000000000102300d	addq	$0x48, %rsp
0000000001023011	retq
0000000001023012	callq	runtime.morestack_noctxt
0000000001023017	jmp	runtime.printstring
000000000102301c	int3
000000000102301d	int3
000000000102301e	int3
000000000102301f	int3
runtime.printslice:
0000000001023020	movq	%gs:0x30, %rcx
0000000001023029	cmpq	0x10(%rcx), %rsp
000000000102302d	jbe	0x10230de
0000000001023033	subq	$0x28, %rsp
0000000001023037	movq	%rbp, 0x20(%rsp)
000000000102303c	leaq	0x20(%rsp), %rbp
0000000001023041	movq	0x40(%rsp), %rax
0000000001023046	movq	%rax, 0x18(%rsp)
000000000102304b	movq	0x38(%rsp), %rcx
0000000001023050	movq	%rcx, 0x10(%rsp)
0000000001023055	callq	runtime.printlock
000000000102305a	leaq	0x47a2b(%rip), %rax
0000000001023061	movq	%rax, (%rsp)
0000000001023065	movq	$0x1, 0x8(%rsp)
000000000102306e	callq	runtime.printstring
0000000001023073	movq	0x10(%rsp), %rax
0000000001023078	movq	%rax, (%rsp)
000000000102307c	callq	runtime.printint
0000000001023081	leaq	0x479ff(%rip), %rax
0000000001023088	movq	%rax, (%rsp)
000000000102308c	movq	$0x1, 0x8(%rsp)
0000000001023095	callq	runtime.printstring
000000000102309a	movq	0x18(%rsp), %rax
000000000102309f	movq	%rax, (%rsp)
00000000010230a3	callq	runtime.printint
00000000010230a8	leaq	0x479e0(%rip), %rax
00000000010230af	movq	%rax, (%rsp)
00000000010230b3	movq	$0x1, 0x8(%rsp)
00000000010230bc	callq	runtime.printstring
00000000010230c1	callq	runtime.printunlock
00000000010230c6	movq	0x30(%rsp), %rax
00000000010230cb	movq	%rax, (%rsp)
00000000010230cf	callq	runtime.printpointer
00000000010230d4	movq	0x20(%rsp), %rbp
00000000010230d9	addq	$0x28, %rsp
00000000010230dd	retq
00000000010230de	callq	runtime.morestack_noctxt
00000000010230e3	jmp	runtime.printslice
00000000010230e8	int3
00000000010230e9	int3
00000000010230ea	int3
00000000010230eb	int3
00000000010230ec	int3
00000000010230ed	int3
00000000010230ee	int3
00000000010230ef	int3
runtime.printeface:
00000000010230f0	movq	%gs:0x30, %rcx
00000000010230f9	cmpq	0x10(%rcx), %rsp
00000000010230fd	jbe	0x102318c
0000000001023103	subq	$0x18, %rsp
0000000001023107	movq	%rbp, 0x10(%rsp)
000000000102310c	leaq	0x10(%rsp), %rbp
0000000001023111	callq	runtime.printlock
0000000001023116	leaq	0x47964(%rip), %rax
000000000102311d	movq	%rax, (%rsp)
0000000001023121	movq	$0x1, 0x8(%rsp)
000000000102312a	callq	runtime.printstring
000000000102312f	movq	0x20(%rsp), %rax
0000000001023134	movq	%rax, (%rsp)
0000000001023138	callq	runtime.printpointer
000000000102313d	leaq	0x47940(%rip), %rax
0000000001023144	movq	%rax, (%rsp)
0000000001023148	movq	$0x1, 0x8(%rsp)
0000000001023151	callq	runtime.printstring
0000000001023156	movq	0x28(%rsp), %rax
000000000102315b	movq	%rax, (%rsp)
000000000102315f	callq	runtime.printpointer
0000000001023164	leaq	0x47917(%rip), %rax
000000000102316b	movq	%rax, (%rsp)
000000000102316f	movq	$0x1, 0x8(%rsp)
0000000001023178	callq	runtime.printstring
000000000102317d	callq	runtime.printunlock
0000000001023182	movq	0x10(%rsp), %rbp
0000000001023187	addq	$0x18, %rsp
000000000102318b	retq
000000000102318c	callq	runtime.morestack_noctxt
0000000001023191	jmp	runtime.printeface
0000000001023196	int3
0000000001023197	int3
0000000001023198	int3
0000000001023199	int3
000000000102319a	int3
000000000102319b	int3
000000000102319c	int3
000000000102319d	int3
000000000102319e	int3
000000000102319f	int3
runtime.hexdumpWords:
00000000010231a0	movq	%gs:0x30, %rcx
00000000010231a9	cmpq	0x10(%rcx), %rsp
00000000010231ad	jbe	0x10233e4
00000000010231b3	subq	$0x60, %rsp
00000000010231b7	movq	%rbp, 0x58(%rsp)
00000000010231bc	leaq	0x58(%rsp), %rbp
00000000010231c1	callq	runtime.printlock
00000000010231c6	movb	$0x0, 0x27(%rsp)
00000000010231cb	movb	$0x20, 0x27(%rsp)
00000000010231d0	xorl	%eax, %eax
00000000010231d2	jmp	0x10231dd
00000000010231d4	movq	0x30(%rsp), %rcx
00000000010231d9	leaq	0x8(%rcx), %rax
00000000010231dd	movq	0x68(%rsp), %rcx
00000000010231e2	leaq	(%rax,%rcx), %rbx
00000000010231e6	movq	0x70(%rsp), %rsi
00000000010231eb	cmpq	%rsi, %rbx
00000000010231ee	jae	0x10233c6
00000000010231f4	movq	%rax, 0x30(%rsp)
00000000010231f9	movq	%rbx, 0x40(%rsp)
00000000010231fe	testq	$0xf, %rax
0000000001023204	jne	0x1023246
0000000001023206	testq	%rax, %rax
0000000001023209	jne	0x10233ad
000000000102320f	movq	%rbx, (%rsp)
0000000001023213	movq	0x4bc7e(%rip), %rax
000000000102321a	leaq	0x4bc77(%rip), %rdx
0000000001023221	callq	*%rax
0000000001023223	callq	runtime.printlock
0000000001023228	leaq	0x47871(%rip), %rax
000000000102322f	movq	%rax, (%rsp)
0000000001023233	movq	$0x2, 0x8(%rsp)
000000000102323c	callq	runtime.printstring
0000000001023241	callq	runtime.printunlock
0000000001023246	movq	0x78(%rsp), %rdx
000000000102324b	testq	%rdx, %rdx
000000000102324e	jne	0x1023381
0000000001023254	leaq	0x27(%rsp), %rax
0000000001023259	movq	%rax, (%rsp)
000000000102325d	movq	$0x1, 0x8(%rsp)
0000000001023266	movq	$0x1, 0x10(%rsp)
000000000102326f	callq	runtime.gwrite
0000000001023274	movq	0x40(%rsp), %rax
0000000001023279	movq	(%rax), %rax
000000000102327c	movq	%rax, 0x28(%rsp)
0000000001023281	movq	%rax, (%rsp)
0000000001023285	movq	0x4bc0c(%rip), %rcx
000000000102328c	leaq	0x4bc05(%rip), %rdx
0000000001023293	callq	*%rcx
0000000001023295	callq	runtime.printlock
000000000102329a	callq	runtime.printsp
000000000102329f	callq	runtime.printunlock
00000000010232a4	movq	0x28(%rsp), %rax
00000000010232a9	movq	%rax, (%rsp)
00000000010232ad	callq	runtime.findfunc
00000000010232b2	movq	0x10(%rsp), %rax
00000000010232b7	movq	0x8(%rsp), %rcx
00000000010232bc	testq	%rcx, %rcx
00000000010232bf	je	0x10231d4
00000000010232c5	movq	%rcx, 0x50(%rsp)
00000000010232ca	movq	%rcx, (%rsp)
00000000010232ce	movq	%rax, 0x8(%rsp)
00000000010232d3	callq	runtime.funcname
00000000010232d8	movq	0x18(%rsp), %rax
00000000010232dd	movq	%rax, 0x38(%rsp)
00000000010232e2	movq	0x10(%rsp), %rcx
00000000010232e7	movq	%rcx, 0x48(%rsp)
00000000010232ec	movq	0x50(%rsp), %rdx
00000000010232f1	movq	(%rdx), %rdx
00000000010232f4	movq	%rdx, 0x40(%rsp)
00000000010232f9	callq	runtime.printlock
00000000010232fe	leaq	0x47784(%rip), %rax
0000000001023305	movq	%rax, (%rsp)
0000000001023309	movq	$0x1, 0x8(%rsp)
0000000001023312	callq	runtime.printstring
0000000001023317	movq	0x48(%rsp), %rax
000000000102331c	movq	%rax, (%rsp)
0000000001023320	movq	0x38(%rsp), %rax
0000000001023325	movq	%rax, 0x8(%rsp)
000000000102332a	callq	runtime.printstring
000000000102332f	leaq	0x4774d(%rip), %rax
0000000001023336	movq	%rax, (%rsp)
000000000102333a	movq	$0x1, 0x8(%rsp)
0000000001023343	callq	runtime.printstring
0000000001023348	movq	0x28(%rsp), %rax
000000000102334d	movq	0x40(%rsp), %rcx
0000000001023352	subq	%rcx, %rax
0000000001023355	movq	%rax, (%rsp)
0000000001023359	callq	runtime.printuint
000000000102335e	leaq	0x4773d(%rip), %rax
0000000001023365	movq	%rax, (%rsp)
0000000001023369	movq	$0x2, 0x8(%rsp)
0000000001023372	callq	runtime.printstring
0000000001023377	callq	runtime.printunlock
000000000102337c	jmp	0x10231d4
0000000001023381	movq	0x40(%rsp), %rax
0000000001023386	movq	%rax, (%rsp)
000000000102338a	movq	(%rdx), %rcx
000000000102338d	callq	*%rcx
000000000102338f	movzbl	0x8(%rsp), %eax
0000000001023394	movb	%al, 0x27(%rsp)
0000000001023398	movzbl	%al, %eax
000000000102339b	testb	%al, %al
000000000102339d	jne	0x1023254
00000000010233a3	movb	$0x20, 0x27(%rsp)
00000000010233a8	jmp	0x1023254
00000000010233ad	callq	runtime.printlock
00000000010233b2	callq	runtime.printnl
00000000010233b7	callq	runtime.printunlock
00000000010233bc	movq	0x40(%rsp), %rbx
00000000010233c1	jmp	0x102320f
00000000010233c6	callq	runtime.printlock
00000000010233cb	callq	runtime.printnl
00000000010233d0	callq	runtime.printunlock
00000000010233d5	callq	runtime.printunlock
00000000010233da	movq	0x58(%rsp), %rbp
00000000010233df	addq	$0x60, %rsp
00000000010233e3	retq
00000000010233e4	callq	runtime.morestack_noctxt
00000000010233e9	jmp	runtime.hexdumpWords
00000000010233ee	int3
00000000010233ef	int3
runtime.main:
00000000010233f0	movq	%gs:0x30, %rcx
00000000010233f9	cmpq	0x10(%rcx), %rsp
00000000010233fd	jbe	0x102373a
0000000001023403	subq	$0x40, %rsp
0000000001023407	movq	%rbp, 0x38(%rsp)
000000000102340c	leaq	0x38(%rsp), %rbp
0000000001023411	movq	%gs:0x30, %rax
000000000102341a	movq	%rax, 0x30(%rsp)
000000000102341f	movq	0x30(%rax), %rcx
0000000001023423	movq	(%rcx), %rcx
0000000001023426	movq	$0x0, 0x130(%rcx)
0000000001023431	movq	$0x3b9aca00, 0x92d2c(%rip)
000000000102343c	movb	$0x1, runtime.lfenceBeforeRdtsc(%rip)
0000000001023443	leaq	0x4ba76(%rip), %rcx
000000000102344a	movq	%rcx, (%rsp)
000000000102344e	callq	runtime.systemstack
0000000001023453	movq	%gs:0x30, %rax
000000000102345c	movq	0x30(%rax), %rax
0000000001023460	incl	0x26c(%rax)
0000000001023466	movq	%gs:0x30, %rax
000000000102346f	movq	0x30(%rax), %rcx
0000000001023473	leaq	0x160(%rcx), %rdx
000000000102347a	testb	%al, (%rdx)
000000000102347c	movq	%rax, %rdx
000000000102347f	movq	%rax, 0x160(%rcx)
0000000001023486	leaq	0xd8(%rdx), %rax
000000000102348d	testb	%al, (%rax)
000000000102348f	movq	0x30(%rdx), %rax
0000000001023493	movq	%rax, 0xd8(%rdx)
000000000102349a	leaq	runtime.m0(%rip), %rax
00000000010234a1	movq	0x30(%rsp), %rcx
00000000010234a6	cmpq	%rax, 0x30(%rcx)
00000000010234aa	jne	0x102371f
00000000010234b0	callq	runtime.init
00000000010234b5	callq	runtime.nanotime
00000000010234ba	cmpq	$0x0, (%rsp)
00000000010234bf	je	0x1023704
00000000010234c5	movb	$0x1, 0x27(%rsp)
00000000010234ca	leaq	0x27(%rsp), %rax
00000000010234cf	movq	%rax, 0x10(%rsp)
00000000010234d4	movl	$0x8, (%rsp)
00000000010234db	leaq	0x4b9e6(%rip), %rax
00000000010234e2	movq	%rax, 0x8(%rsp)
00000000010234e7	callq	runtime.deferproc
00000000010234ec	testl	%eax, %eax
00000000010234ee	jne	0x1023688
00000000010234f4	callq	runtime.nanotime
00000000010234f9	movq	(%rsp), %rax
00000000010234fd	movq	%rax, runtime.runtimeInitTime(%rip)
0000000001023504	callq	runtime.gcenable
0000000001023509	leaq	0x34550(%rip), %rax
0000000001023510	movq	%rax, (%rsp)
0000000001023514	movq	$0x0, 0x8(%rsp)
000000000102351d	callq	runtime.makechan
0000000001023522	movq	0x10(%rsp), %rax
0000000001023527	cmpl	$0x0, 0xb1702(%rip)
000000000102352e	jne	0x1023677
0000000001023534	movq	%rax, runtime.main_init_done(%rip)
000000000102353b	leaq	runtime.iscgo(%rip), %rax
0000000001023542	cmpb	$0x0, (%rax)
0000000001023545	je	0x102359d
0000000001023547	cmpq	$0x0, 0x95209(%rip)
000000000102354f	je	0x10236e9
0000000001023555	cmpq	$0x0, 0x9520b(%rip)
000000000102355d	je	0x10236ce
0000000001023563	cmpq	$0x0, 0x95205(%rip)
000000000102356b	je	0x10236b3
0000000001023571	cmpq	$0x0, 0x951d7(%rip)
0000000001023579	je	0x1023698
000000000102357f	callq	runtime.startTemplateThread
0000000001023584	movq	__cgo_notify_runtime_init_done(%rip), %rax
000000000102358b	movq	%rax, (%rsp)
000000000102358f	movq	$0x0, 0x8(%rsp)
0000000001023598	callq	runtime.cgocall
000000000102359d	movq	0x4b92c(%rip), %rax
00000000010235a4	leaq	0x4b925(%rip), %rdx
00000000010235ab	callq	*%rax
00000000010235ad	movq	runtime.main_init_done(%rip), %rax
00000000010235b4	movq	%rax, (%rsp)
00000000010235b8	callq	runtime.closechan
00000000010235bd	movb	$0x0, 0x27(%rsp)
00000000010235c2	callq	runtime.unlockOSThread
00000000010235c7	leaq	runtime.isarchive(%rip), %rax
00000000010235ce	cmpb	$0x0, (%rax)
00000000010235d1	jne	0x1023667
00000000010235d7	leaq	runtime.islibrary(%rip), %rax
00000000010235de	cmpb	$0x0, (%rax)
00000000010235e1	jne	0x1023667
00000000010235e7	movq	0x4b8ea(%rip), %rax
00000000010235ee	leaq	0x4b8e3(%rip), %rdx
00000000010235f5	callq	*%rax
00000000010235f7	movl	runtime.runningPanicDefers(%rip), %eax
00000000010235fd	testl	%eax, %eax
00000000010235ff	je	0x1023629
0000000001023601	xorl	%eax, %eax
0000000001023603	jmp	0x1023617
0000000001023605	movq	%rax, 0x28(%rsp)
000000000102360a	callq	runtime.Gosched
000000000102360f	movq	0x28(%rsp), %rax
0000000001023614	incq	%rax
0000000001023617	cmpq	$0x3e8, %rax
000000000102361d	jge	0x1023629
000000000102361f	movl	runtime.runningPanicDefers(%rip), %ecx
0000000001023625	testl	%ecx, %ecx
0000000001023627	jne	0x1023605
0000000001023629	movl	runtime.panicking(%rip), %eax
000000000102362f	testl	%eax, %eax
0000000001023631	jne	0x1023649
0000000001023633	movl	$0x0, (%rsp)
000000000102363a	callq	runtime.exit
000000000102363f	xorl	%eax, %eax
0000000001023641	movl	$0x0, (%rax)
0000000001023647	jmp	0x102363f
0000000001023649	xorps	%xmm0, %xmm0
000000000102364c	movups	%xmm0, (%rsp)
0000000001023650	movw	$0x1008, 0x10(%rsp)
0000000001023657	movq	$0x1, 0x18(%rsp)
0000000001023660	callq	runtime.gopark
0000000001023665	jmp	0x1023633
0000000001023667	nop
0000000001023668	callq	runtime.deferreturn
000000000102366d	movq	0x38(%rsp), %rbp
0000000001023672	addq	$0x40, %rsp
0000000001023676	retq
0000000001023677	leaq	runtime.main_init_done(%rip), %rdi
000000000102367e	callq	runtime.gcWriteBarrier
0000000001023683	jmp	0x102353b
0000000001023688	nop
0000000001023689	callq	runtime.deferreturn
000000000102368e	movq	0x38(%rsp), %rbp
0000000001023693	addq	$0x40, %rsp
0000000001023697	retq
0000000001023698	leaq	0x4a6ff(%rip), %rax
000000000102369f	movq	%rax, (%rsp)
00000000010236a3	movq	$0x25, 0x8(%rsp)
00000000010236ac	callq	runtime.throw
00000000010236b1	ud2
00000000010236b3	leaq	0x488dc(%rip), %rax
00000000010236ba	movq	%rax, (%rsp)
00000000010236be	movq	$0x15, 0x8(%rsp)
00000000010236c7	callq	runtime.throw
00000000010236cc	ud2
00000000010236ce	leaq	0x484d6(%rip), %rax
00000000010236d5	movq	%rax, (%rsp)
00000000010236d9	movq	$0x13, 0x8(%rsp)
00000000010236e2	callq	runtime.throw
00000000010236e7	ud2
00000000010236e9	leaq	0x48fdc(%rip), %rax
00000000010236f0	movq	%rax, (%rsp)
00000000010236f4	movq	$0x19, 0x8(%rsp)
00000000010236fd	callq	runtime.throw
0000000001023702	ud2
0000000001023704	leaq	0x48d2e(%rip), %rax
000000000102370b	movq	%rax, (%rsp)
000000000102370f	movq	$0x17, 0x8(%rsp)
0000000001023718	callq	runtime.throw
000000000102371d	ud2
000000000102371f	leaq	0x48ab3(%rip), %rax
0000000001023726	movq	%rax, (%rsp)
000000000102372a	movq	$0x16, 0x8(%rsp)
0000000001023733	callq	runtime.throw
0000000001023738	ud2
000000000102373a	callq	runtime.morestack_noctxt
000000000102373f	jmp	runtime.main
0000000001023744	int3
0000000001023745	int3
0000000001023746	int3
0000000001023747	int3
0000000001023748	int3
0000000001023749	int3
000000000102374a	int3
000000000102374b	int3
000000000102374c	int3
000000000102374d	int3
000000000102374e	int3
000000000102374f	int3
runtime.init.4:
0000000001023750	movq	%gs:0x30, %rcx
0000000001023759	cmpq	0x10(%rcx), %rsp
000000000102375d	jbe	0x102378f
000000000102375f	subq	$0x18, %rsp
0000000001023763	movq	%rbp, 0x10(%rsp)
0000000001023768	leaq	0x10(%rsp), %rbp
000000000102376d	movl	$0x0, (%rsp)
0000000001023774	leaq	0x4b6c5(%rip), %rax
000000000102377b	movq	%rax, 0x8(%rsp)
0000000001023780	callq	runtime.newproc
0000000001023785	movq	0x10(%rsp), %rbp
000000000102378a	addq	$0x18, %rsp
000000000102378e	retq
000000000102378f	callq	runtime.morestack_noctxt
0000000001023794	jmp	runtime.init.4
0000000001023796	int3
0000000001023797	int3
0000000001023798	int3
0000000001023799	int3
000000000102379a	int3
000000000102379b	int3
000000000102379c	int3
000000000102379d	int3
000000000102379e	int3
000000000102379f	int3
runtime.forcegchelper:
00000000010237a0	movq	%gs:0x30, %rcx
00000000010237a9	cmpq	0x10(%rcx), %rsp
00000000010237ad	jbe	0x10238b0
00000000010237b3	subq	$0x28, %rsp
00000000010237b7	movq	%rbp, 0x20(%rsp)
00000000010237bc	leaq	0x20(%rsp), %rbp
00000000010237c1	movq	%gs:0x30, %rax
00000000010237ca	cmpl	$0x0, 0xb145f(%rip)
00000000010237d1	jne	0x1023884
00000000010237d7	movq	%rax, 0x950da(%rip)
00000000010237de	jmp	0x102380c
00000000010237e0	callq	runtime.nanotime
00000000010237e5	movq	(%rsp), %rax
00000000010237e9	movq	$0x0, (%rsp)
00000000010237f1	movq	$0x2, 0x8(%rsp)
00000000010237fa	movq	%rax, 0x10(%rsp)
00000000010237ff	movl	$0x0, 0x18(%rsp)
0000000001023807	callq	runtime.gcStart
000000000102380c	leaq	runtime.forcegc(%rip), %rax
0000000001023813	movq	%rax, (%rsp)
0000000001023817	callq	runtime.lock
000000000102381c	cmpl	$0x0, 0x9509d(%rip)
0000000001023823	jne	0x1023895
0000000001023825	movl	$0x1, %eax
000000000102382a	leaq	0x9508f(%rip), %rcx
0000000001023831	xchgl	%eax, (%rcx)
0000000001023833	leaq	runtime.forcegc(%rip), %rax
000000000102383a	movq	%rax, (%rsp)
000000000102383e	movw	$0x1410, 0x8(%rsp)
0000000001023845	movq	$0x1, 0x10(%rsp)
000000000102384e	callq	runtime.goparkunlock
0000000001023853	cmpl	$0x0, 0xb14e6(%rip)
000000000102385a	jle	0x10237e0
000000000102385c	callq	runtime.printlock
0000000001023861	leaq	0x477c2(%rip), %rax
0000000001023868	movq	%rax, (%rsp)
000000000102386c	movq	$0xa, 0x8(%rsp)
0000000001023875	callq	runtime.printstring
000000000102387a	callq	runtime.printunlock
000000000102387f	jmp	0x10237e0
0000000001023884	leaq	0x9502d(%rip), %rdi
000000000102388b	callq	runtime.gcWriteBarrier
0000000001023890	jmp	0x102380c
0000000001023895	leaq	0x48590(%rip), %rax
000000000102389c	movq	%rax, (%rsp)
00000000010238a0	movq	$0x14, 0x8(%rsp)
00000000010238a9	callq	runtime.throw
00000000010238ae	ud2
00000000010238b0	callq	runtime.morestack_noctxt
00000000010238b5	jmp	runtime.forcegchelper
00000000010238ba	int3
00000000010238bb	int3
00000000010238bc	int3
00000000010238bd	int3
00000000010238be	int3
00000000010238bf	int3
runtime.Gosched:
00000000010238c0	subq	$0x10, %rsp
00000000010238c4	movq	%rbp, 0x8(%rsp)
00000000010238c9	leaq	0x8(%rsp), %rbp
00000000010238ce	leaq	0x4b5bb(%rip), %rax
00000000010238d5	movq	%rax, (%rsp)
00000000010238d9	callq	runtime.mcall
00000000010238de	movq	0x8(%rsp), %rbp
00000000010238e3	addq	$0x10, %rsp
00000000010238e7	retq
00000000010238e8	int3
00000000010238e9	int3
00000000010238ea	int3
00000000010238eb	int3
00000000010238ec	int3
00000000010238ed	int3
00000000010238ee	int3
00000000010238ef	int3
runtime.gopark:
00000000010238f0	movq	%gs:0x30, %rcx
00000000010238f9	cmpq	0x10(%rcx), %rsp
00000000010238fd	jbe	0x1023a24
0000000001023903	subq	$0x18, %rsp
0000000001023907	movq	%rbp, 0x10(%rsp)
000000000102390c	leaq	0x10(%rsp), %rbp
0000000001023911	movq	%gs:0x30, %rcx
000000000102391a	movq	0x30(%rcx), %rdx
000000000102391e	incl	0x100(%rdx)
0000000001023924	movq	0x30(%rcx), %rdx
0000000001023928	testb	%al, (%rcx)
000000000102392a	movq	0xc0(%rdx), %rcx
0000000001023931	movl	0x90(%rcx), %ebx
0000000001023937	cmpl	$0x2, %ebx
000000000102393a	je	0x1023948
000000000102393c	cmpl	$0x1002, %ebx
0000000001023942	jne	0x1023a09
0000000001023948	cmpl	$0x0, 0xb12e1(%rip)
000000000102394f	jne	0x10239f3
0000000001023955	movq	0x28(%rsp), %rbx
000000000102395a	movq	%rbx, 0x280(%rdx)
0000000001023961	movq	0x20(%rsp), %rax
0000000001023966	cmpl	$0x0, 0xb12c3(%rip)
000000000102396d	jne	0x10239e5
000000000102396f	movq	%rax, 0x278(%rdx)
0000000001023976	movzbl	0x30(%rsp), %eax
000000000102397b	movb	%al, 0xb0(%rcx)
0000000001023981	movzbl	0x31(%rsp), %eax
0000000001023986	movb	%al, 0x288(%rdx)
000000000102398c	movq	0x38(%rsp), %rax
0000000001023991	movq	%rax, 0x290(%rdx)
0000000001023998	movq	%gs:0x30, %rax
00000000010239a1	movl	0x100(%rdx), %ecx
00000000010239a7	leal	-0x1(%rcx), %ebx
00000000010239aa	movl	%ebx, 0x100(%rdx)
00000000010239b0	cmpl	$0x1, %ecx
00000000010239b3	jne	0x10239cb
00000000010239b5	testb	%al, (%rax)
00000000010239b7	leaq	0xb1(%rax), %rcx
00000000010239be	cmpb	$0x0, (%rcx)
00000000010239c1	je	0x10239cb
00000000010239c3	movq	$-0x522, 0x10(%rax)
00000000010239cb	leaq	0x4b5ce(%rip), %rax
00000000010239d2	movq	%rax, (%rsp)
00000000010239d6	callq	runtime.mcall
00000000010239db	movq	0x10(%rsp), %rbp
00000000010239e0	addq	$0x18, %rsp
00000000010239e4	retq
00000000010239e5	leaq	0x278(%rdx), %rdi
00000000010239ec	callq	runtime.gcWriteBarrier
00000000010239f1	jmp	0x1023976
00000000010239f3	leaq	0x280(%rdx), %rdi
00000000010239fa	movq	0x28(%rsp), %rax
00000000010239ff	callq	runtime.gcWriteBarrier
0000000001023a04	jmp	0x1023961
0000000001023a09	leaq	0x48458(%rip), %rax
0000000001023a10	movq	%rax, (%rsp)
0000000001023a14	movq	$0x14, 0x8(%rsp)
0000000001023a1d	callq	runtime.throw
0000000001023a22	ud2
0000000001023a24	callq	runtime.morestack_noctxt
0000000001023a29	jmp	runtime.gopark
0000000001023a2e	int3
0000000001023a2f	int3
runtime.goparkunlock:
0000000001023a30	movq	%gs:0x30, %rcx
0000000001023a39	cmpq	0x10(%rcx), %rsp
0000000001023a3d	jbe	0x1023a8d
0000000001023a3f	subq	$0x28, %rsp
0000000001023a43	movq	%rbp, 0x20(%rsp)
0000000001023a48	leaq	0x20(%rsp), %rbp
0000000001023a4d	leaq	0x4b554(%rip), %rax
0000000001023a54	movq	%rax, (%rsp)
0000000001023a58	movq	0x30(%rsp), %rax
0000000001023a5d	movq	%rax, 0x8(%rsp)
0000000001023a62	movzbl	0x38(%rsp), %eax
0000000001023a67	movb	%al, 0x10(%rsp)
0000000001023a6b	movzbl	0x39(%rsp), %eax
0000000001023a70	movb	%al, 0x11(%rsp)
0000000001023a74	movq	0x40(%rsp), %rax
0000000001023a79	movq	%rax, 0x18(%rsp)
0000000001023a7e	callq	runtime.gopark
0000000001023a83	movq	0x20(%rsp), %rbp
0000000001023a88	addq	$0x28, %rsp
0000000001023a8c	retq
0000000001023a8d	callq	runtime.morestack_noctxt
0000000001023a92	jmp	runtime.goparkunlock
0000000001023a94	int3
0000000001023a95	int3
0000000001023a96	int3
0000000001023a97	int3
0000000001023a98	int3
0000000001023a99	int3
0000000001023a9a	int3
0000000001023a9b	int3
0000000001023a9c	int3
0000000001023a9d	int3
0000000001023a9e	int3
0000000001023a9f	int3
runtime.goready:
0000000001023aa0	movq	%gs:0x30, %rcx
0000000001023aa9	cmpq	0x10(%rcx), %rsp
0000000001023aad	jbe	0x1023b06
0000000001023aaf	subq	$0x28, %rsp
0000000001023ab3	movq	%rbp, 0x20(%rsp)
0000000001023ab8	leaq	0x20(%rsp), %rbp
0000000001023abd	xorps	%xmm0, %xmm0
0000000001023ac0	movups	%xmm0, 0x8(%rsp)
0000000001023ac5	movq	$0x0, 0x18(%rsp)
0000000001023ace	leaq	runtime.goready.func1(%rip), %rax
0000000001023ad5	movq	%rax, 0x8(%rsp)
0000000001023ada	movq	0x30(%rsp), %rax
0000000001023adf	movq	%rax, 0x10(%rsp)
0000000001023ae4	movq	0x38(%rsp), %rax
0000000001023ae9	movq	%rax, 0x18(%rsp)
0000000001023aee	leaq	0x8(%rsp), %rax
0000000001023af3	movq	%rax, (%rsp)
0000000001023af7	callq	runtime.systemstack
0000000001023afc	movq	0x20(%rsp), %rbp
0000000001023b01	addq	$0x28, %rsp
0000000001023b05	retq
0000000001023b06	callq	runtime.morestack_noctxt
0000000001023b0b	jmp	runtime.goready
0000000001023b0d	int3
0000000001023b0e	int3
0000000001023b0f	int3
runtime.acquireSudog:
0000000001023b10	subq	$0x68, %rsp
0000000001023b14	movq	%rbp, 0x60(%rsp)
0000000001023b19	leaq	0x60(%rsp), %rbp
0000000001023b1e	movq	%gs:0x30, %rcx
0000000001023b27	movq	0x30(%rcx), %rdx
0000000001023b2b	incl	0x100(%rdx)
0000000001023b31	movq	0x30(%rcx), %rdx
0000000001023b35	movq	%rdx, 0x40(%rsp)
0000000001023b3a	movq	0xd0(%rdx), %rbx
0000000001023b41	testb	%al, (%rcx)
0000000001023b43	cmpq	$0x0, 0xe08(%rbx)
0000000001023b4b	jne	0x1023e66
0000000001023b51	movq	%rbx, 0x58(%rsp)
0000000001023b56	leaq	0x94fd3(%rip), %rax
0000000001023b5d	movq	%rax, (%rsp)
0000000001023b61	callq	runtime.lock
0000000001023b66	movq	0x58(%rsp), %rax
0000000001023b6b	leaq	0xe00(%rax), %rcx
0000000001023b72	movq	%rcx, 0x50(%rsp)
0000000001023b77	movq	0xe10(%rax), %rdx
0000000001023b7e	shrq	%rdx
0000000001023b81	cmpq	%rdx, 0xe08(%rax)
0000000001023b88	jge	0x1023caf
0000000001023b8e	movq	0x94fa3(%rip), %rdx
0000000001023b95	testq	%rdx, %rdx
0000000001023b98	je	0x1023caf
0000000001023b9e	movq	0x10(%rdx), %rbx
0000000001023ba2	cmpl	$0x0, 0xb1087(%rip)
0000000001023ba9	jne	0x1023c8a
0000000001023baf	movq	%rbx, 0x94f82(%rip)
0000000001023bb6	movq	$0x0, 0x10(%rdx)
0000000001023bbe	movq	0xe08(%rax), %rbx
0000000001023bc5	leaq	0x1(%rbx), %rsi
0000000001023bc9	movq	0xe00(%rax), %r8
0000000001023bd0	movq	0xe10(%rax), %r9
0000000001023bd7	cmpq	%r9, %rsi
0000000001023bda	jg	0x1023c10
0000000001023bdc	leaq	0x1(%rbx), %rsi
0000000001023be0	movq	%rsi, 0xe08(%rax)
0000000001023be7	leaq	(%r8,%rbx,8), %rdi
0000000001023beb	cmpl	$0x0, 0xb103e(%rip)
0000000001023bf2	jne	0x1023bfd
0000000001023bf4	movq	%rdx, (%r8,%rbx,8)
0000000001023bf8	jmp	0x1023b77
0000000001023bfd	movq	%rax, %rbx
0000000001023c00	movq	%rdx, %rax
0000000001023c03	callq	runtime.gcWriteBarrier
0000000001023c08	movq	%rbx, %rax
0000000001023c0b	jmp	0x1023b77
0000000001023c10	movq	%rdx, 0x48(%rsp)
0000000001023c15	leaq	0x323c4(%rip), %rax
0000000001023c1c	movq	%rax, (%rsp)
0000000001023c20	movq	%r8, 0x8(%rsp)
0000000001023c25	movq	%rbx, 0x10(%rsp)
0000000001023c2a	movq	%r9, 0x18(%rsp)
0000000001023c2f	movq	%rsi, 0x20(%rsp)
0000000001023c34	callq	runtime.growslice
0000000001023c39	movq	0x28(%rsp), %rax
0000000001023c3e	movq	0x30(%rsp), %rcx
0000000001023c43	movq	0x38(%rsp), %rdx
0000000001023c48	movq	0x58(%rsp), %rbx
0000000001023c4d	movq	%rdx, 0xe10(%rbx)
0000000001023c54	cmpl	$0x0, 0xb0fd5(%rip)
0000000001023c5b	jne	0x1023c7e
0000000001023c5d	movq	%rax, 0xe00(%rbx)
0000000001023c64	movq	0x48(%rsp), %rdx
0000000001023c69	movq	%rcx, %rbx
0000000001023c6c	movq	%rax, %r8
0000000001023c6f	movq	0x58(%rsp), %rax
0000000001023c74	movq	0x50(%rsp), %rcx
0000000001023c79	jmp	0x1023bdc
0000000001023c7e	movq	0x50(%rsp), %rdi
0000000001023c83	callq	runtime.gcWriteBarrier
0000000001023c88	jmp	0x1023c64
0000000001023c8a	leaq	0x94ea7(%rip), %rdi
0000000001023c91	movq	%rax, %rsi
0000000001023c94	movq	%rbx, %rax
0000000001023c97	callq	runtime.gcWriteBarrier
0000000001023c9c	leaq	0x10(%rdx), %rdi
0000000001023ca0	xorl	%eax, %eax
0000000001023ca2	callq	runtime.gcWriteBarrier
0000000001023ca7	movq	%rsi, %rax
0000000001023caa	jmp	0x1023bbe
0000000001023caf	leaq	0x94e7a(%rip), %rax
0000000001023cb6	movq	%rax, (%rsp)
0000000001023cba	callq	runtime.unlock
0000000001023cbf	movq	0x58(%rsp), %rax
0000000001023cc4	cmpq	$0x0, 0xe08(%rax)
0000000001023ccc	je	0x1023d81
0000000001023cd2	movq	0xe08(%rax), %rcx
0000000001023cd9	movq	0xe00(%rax), %rdx
0000000001023ce0	leaq	-0x1(%rcx), %rbx
0000000001023ce4	cmpq	%rcx, %rbx
0000000001023ce7	jae	0x1023e90
0000000001023ced	movq	-0x8(%rdx,%rcx,8), %rsi
0000000001023cf2	leaq	-0x8(%rdx,%rcx,8), %rdi
0000000001023cf7	cmpl	$0x0, 0xb0f32(%rip)
0000000001023cfe	jne	0x1023d72
0000000001023d00	movq	$0x0, -0x8(%rdx,%rcx,8)
0000000001023d09	movq	0xe10(%rax), %rcx
0000000001023d10	cmpq	%rcx, %rbx
0000000001023d13	ja	0x1023e89
0000000001023d19	movq	%rbx, 0xe08(%rax)
0000000001023d20	cmpq	$0x0, 0x20(%rsi)
0000000001023d25	jne	0x1023e6e
0000000001023d2b	movq	%gs:0x30, %rax
0000000001023d34	movq	0x40(%rsp), %rcx
0000000001023d39	movl	0x100(%rcx), %edx
0000000001023d3f	leal	-0x1(%rdx), %ebx
0000000001023d42	movl	%ebx, 0x100(%rcx)
0000000001023d48	cmpl	$0x1, %edx
0000000001023d4b	jne	0x1023d63
0000000001023d4d	testb	%al, (%rax)
0000000001023d4f	leaq	0xb1(%rax), %rcx
0000000001023d56	cmpb	$0x0, (%rcx)
0000000001023d59	je	0x1023d63
0000000001023d5b	movq	$-0x522, 0x10(%rax)
0000000001023d63	movq	%rsi, 0x70(%rsp)
0000000001023d68	movq	0x60(%rsp), %rbp
0000000001023d6d	addq	$0x68, %rsp
0000000001023d71	retq
0000000001023d72	movq	%rax, %rcx
0000000001023d75	xorl	%eax, %eax
0000000001023d77	callq	runtime.gcWriteBarrier
0000000001023d7c	movq	%rcx, %rax
0000000001023d7f	jmp	0x1023d09
0000000001023d81	leaq	0x43498(%rip), %rax
0000000001023d88	movq	%rax, (%rsp)
0000000001023d8c	callq	runtime.newobject
0000000001023d91	movq	0x58(%rsp), %rax
0000000001023d96	movq	0xe10(%rax), %rcx
0000000001023d9d	movq	0xe00(%rax), %rdx
0000000001023da4	movq	0xe08(%rax), %rbx
0000000001023dab	leaq	0x1(%rbx), %rsi
0000000001023daf	movq	0x8(%rsp), %rdi
0000000001023db4	cmpq	%rcx, %rsi
0000000001023db7	jg	0x1023df3
0000000001023db9	leaq	0x1(%rbx), %rcx
0000000001023dbd	movq	%rcx, 0xe08(%rax)
0000000001023dc4	leaq	(%rdx,%rbx,8), %rcx
0000000001023dc8	cmpl	$0x0, 0xb0e61(%rip)
0000000001023dcf	jne	0x1023dda
0000000001023dd1	movq	%rdi, (%rdx,%rbx,8)
0000000001023dd5	jmp	0x1023cd2
0000000001023dda	movq	%rdi, %rdx
0000000001023ddd	movq	%rcx, %rdi
0000000001023de0	movq	%rax, %rbx
0000000001023de3	movq	%rdx, %rax
0000000001023de6	callq	runtime.gcWriteBarrier
0000000001023deb	movq	%rbx, %rax
0000000001023dee	jmp	0x1023cd2
0000000001023df3	movq	%rdi, 0x48(%rsp)
0000000001023df8	leaq	0x321e1(%rip), %rax
0000000001023dff	movq	%rax, (%rsp)
0000000001023e03	movq	%rdx, 0x8(%rsp)
0000000001023e08	movq	%rbx, 0x10(%rsp)
0000000001023e0d	movq	%rcx, 0x18(%rsp)
0000000001023e12	movq	%rsi, 0x20(%rsp)
0000000001023e17	callq	runtime.growslice
0000000001023e1c	movq	0x28(%rsp), %rax
0000000001023e21	movq	0x30(%rsp), %rcx
0000000001023e26	movq	0x38(%rsp), %rdx
0000000001023e2b	movq	0x58(%rsp), %rbx
0000000001023e30	movq	%rdx, 0xe10(%rbx)
0000000001023e37	cmpl	$0x0, 0xb0df2(%rip)
0000000001023e3e	jne	0x1023e5a
0000000001023e40	movq	%rax, 0xe00(%rbx)
0000000001023e47	movq	0x48(%rsp), %rdi
0000000001023e4c	movq	%rax, %rdx
0000000001023e4f	movq	%rbx, %rax
0000000001023e52	movq	%rcx, %rbx
0000000001023e55	jmp	0x1023db9
0000000001023e5a	movq	0x50(%rsp), %rdi
0000000001023e5f	callq	runtime.gcWriteBarrier
0000000001023e64	jmp	0x1023e47
0000000001023e66	movq	%rbx, %rax
0000000001023e69	jmp	0x1023cd2
0000000001023e6e	leaq	0x4a410(%rip), %rax
0000000001023e75	movq	%rax, (%rsp)
0000000001023e79	movq	$0x2a, 0x8(%rsp)
0000000001023e82	callq	runtime.throw
0000000001023e87	ud2
0000000001023e89	callq	runtime.panicslice
0000000001023e8e	ud2
0000000001023e90	callq	runtime.panicindex
0000000001023e95	ud2
0000000001023e97	int3
0000000001023e98	int3
0000000001023e99	int3
0000000001023e9a	int3
0000000001023e9b	int3
0000000001023e9c	int3
0000000001023e9d	int3
0000000001023e9e	int3
0000000001023e9f	int3
runtime.releaseSudog:
0000000001023ea0	subq	$0x68, %rsp
0000000001023ea4	movq	%rbp, 0x60(%rsp)
0000000001023ea9	leaq	0x60(%rsp), %rbp
0000000001023eae	movq	0x70(%rsp), %rax
0000000001023eb3	cmpq	$0x0, 0x20(%rax)
0000000001023eb8	jne	0x1024215
0000000001023ebe	leaq	0x8(%rax), %rcx
0000000001023ec2	cmpb	$0x0, (%rcx)
0000000001023ec5	jne	0x10241fa
0000000001023ecb	cmpq	$0x0, 0x10(%rax)
0000000001023ed0	jne	0x10241df
0000000001023ed6	cmpq	$0x0, 0x18(%rax)
0000000001023edb	jne	0x10241c4
0000000001023ee1	cmpq	$0x0, 0x48(%rax)
0000000001023ee6	jne	0x10241a9
0000000001023eec	cmpq	$0x0, 0x58(%rax)
0000000001023ef1	jne	0x102418e
0000000001023ef7	movq	%gs:0x30, %rcx
0000000001023f00	cmpq	$0x0, 0x88(%rcx)
0000000001023f08	jne	0x1024173
0000000001023f0e	movq	0x30(%rcx), %rdx
0000000001023f12	incl	0x100(%rdx)
0000000001023f18	movq	0x30(%rcx), %rdx
0000000001023f1c	movq	%rdx, 0x40(%rsp)
0000000001023f21	movq	0xd0(%rdx), %rbx
0000000001023f28	movq	%rbx, 0x58(%rsp)
0000000001023f2d	testb	%al, (%rcx)
0000000001023f2f	movq	0xe10(%rbx), %rcx
0000000001023f36	cmpq	%rcx, 0xe08(%rbx)
0000000001023f3d	jne	0x1024046
0000000001023f43	xorl	%ecx, %ecx
0000000001023f45	xorl	%esi, %esi
0000000001023f47	jmp	0x1023f4c
0000000001023f49	movq	%r11, %rsi
0000000001023f4c	movq	0xe08(%rbx), %r8
0000000001023f53	movq	0xe00(%rbx), %r9
0000000001023f5a	movq	0xe10(%rbx), %r10
0000000001023f61	shrq	%r10
0000000001023f64	cmpq	%r10, %r8
0000000001023f67	jle	0x1023ff1
0000000001023f6d	leaq	-0x1(%r8), %r10
0000000001023f71	cmpq	%r8, %r10
0000000001023f74	jae	0x102416c
0000000001023f7a	movq	-0x8(%r9,%r8,8), %r11
0000000001023f7f	leaq	-0x8(%r9,%r8,8), %rdi
0000000001023f84	cmpl	$0x0, 0xb0ca5(%rip)
0000000001023f8b	jne	0x1023fe2
0000000001023f8d	movq	$0x0, -0x8(%r9,%r8,8)
0000000001023f96	movq	0xe10(%rbx), %r8
0000000001023f9d	cmpq	%r8, %r10
0000000001023fa0	ja	0x1024165
0000000001023fa6	movq	%r10, 0xe08(%rbx)
0000000001023fad	testq	%rcx, %rcx
0000000001023fb0	je	0x1023fda
0000000001023fb2	testb	%al, (%rsi)
0000000001023fb4	cmpl	$0x0, 0xb0c75(%rip)
0000000001023fbb	jne	0x1023fc3
0000000001023fbd	movq	%r11, 0x10(%rsi)
0000000001023fc1	jmp	0x1023f49
0000000001023fc3	leaq	0x10(%rsi), %rdi
0000000001023fc7	movq	%rax, %rsi
0000000001023fca	movq	%r11, %rax
0000000001023fcd	callq	runtime.gcWriteBarrier
0000000001023fd2	movq	%rsi, %rax
0000000001023fd5	jmp	0x1023f49
0000000001023fda	movq	%r11, %rcx
0000000001023fdd	jmp	0x1023f49
0000000001023fe2	movq	%rax, %r8
0000000001023fe5	xorl	%eax, %eax
0000000001023fe7	callq	runtime.gcWriteBarrier
0000000001023fec	movq	%r8, %rax
0000000001023fef	jmp	0x1023f96
0000000001023ff1	movq	%rsi, 0x48(%rsp)
0000000001023ff6	movq	%rcx, 0x50(%rsp)
0000000001023ffb	leaq	0x94b2e(%rip), %rax
0000000001024002	movq	%rax, (%rsp)
0000000001024006	callq	runtime.lock
000000000102400b	movq	0x48(%rsp), %rax
0000000001024010	testb	%al, (%rax)
0000000001024012	movq	0x94b1f(%rip), %rcx
0000000001024019	cmpl	$0x0, 0xb0c10(%rip)
0000000001024020	jne	0x1024143
0000000001024026	movq	%rcx, 0x10(%rax)
000000000102402a	movq	0x50(%rsp), %rax
000000000102402f	movq	%rax, 0x94b02(%rip)
0000000001024036	leaq	0x94af3(%rip), %rax
000000000102403d	movq	%rax, (%rsp)
0000000001024041	callq	runtime.unlock
0000000001024046	movq	0x58(%rsp), %rcx
000000000102404b	movq	0xe08(%rcx), %rdx
0000000001024052	leaq	0x1(%rdx), %rbx
0000000001024056	movq	0xe10(%rcx), %rsi
000000000102405d	movq	0xe00(%rcx), %r8
0000000001024064	cmpq	%rsi, %rbx
0000000001024067	jg	0x10240d8
0000000001024069	leaq	0x1(%rdx), %rbx
000000000102406d	movq	%rbx, 0xe08(%rcx)
0000000001024074	leaq	(%r8,%rdx,8), %rdi
0000000001024078	cmpl	$0x0, 0xb0bb1(%rip)
000000000102407f	jne	0x10240cc
0000000001024081	movq	0x70(%rsp), %rax
0000000001024086	movq	%rax, (%r8,%rdx,8)
000000000102408a	movq	%gs:0x30, %rax
0000000001024093	movq	0x40(%rsp), %rcx
0000000001024098	movl	0x100(%rcx), %edx
000000000102409e	leal	-0x1(%rdx), %ebx
00000000010240a1	movl	%ebx, 0x100(%rcx)
00000000010240a7	cmpl	$0x1, %edx
00000000010240aa	jne	0x10240c2
00000000010240ac	testb	%al, (%rax)
00000000010240ae	leaq	0xb1(%rax), %rcx
00000000010240b5	cmpb	$0x0, (%rcx)
00000000010240b8	je	0x10240c2
00000000010240ba	movq	$-0x522, 0x10(%rax)
00000000010240c2	movq	0x60(%rsp), %rbp
00000000010240c7	addq	$0x68, %rsp
00000000010240cb	retq
00000000010240cc	movq	0x70(%rsp), %rax
00000000010240d1	callq	runtime.gcWriteBarrier
00000000010240d6	jmp	0x102408a
00000000010240d8	leaq	0x31f01(%rip), %rax
00000000010240df	movq	%rax, (%rsp)
00000000010240e3	movq	%r8, 0x8(%rsp)
00000000010240e8	movq	%rdx, 0x10(%rsp)
00000000010240ed	movq	%rsi, 0x18(%rsp)
00000000010240f2	movq	%rbx, 0x20(%rsp)
00000000010240f7	callq	runtime.growslice
00000000010240fc	movq	0x28(%rsp), %rax
0000000001024101	movq	0x30(%rsp), %rcx
0000000001024106	movq	0x38(%rsp), %rdx
000000000102410b	movq	0x58(%rsp), %rbx
0000000001024110	movq	%rdx, 0xe10(%rbx)
0000000001024117	cmpl	$0x0, 0xb0b12(%rip)
000000000102411e	jne	0x1024135
0000000001024120	movq	%rax, 0xe00(%rbx)
0000000001024127	movq	%rcx, %rdx
000000000102412a	movq	%rax, %r8
000000000102412d	movq	%rbx, %rcx
0000000001024130	jmp	0x1024069
0000000001024135	leaq	0xe00(%rbx), %rdi
000000000102413c	callq	runtime.gcWriteBarrier
0000000001024141	jmp	0x1024127
0000000001024143	leaq	0x10(%rax), %rdi
0000000001024147	movq	%rcx, %rax
000000000102414a	callq	runtime.gcWriteBarrier
000000000102414f	leaq	0x949e2(%rip), %rdi
0000000001024156	movq	0x50(%rsp), %rax
000000000102415b	callq	runtime.gcWriteBarrier
0000000001024160	jmp	0x1024036
0000000001024165	callq	runtime.panicslice
000000000102416a	ud2
000000000102416c	callq	runtime.panicindex
0000000001024171	ud2
0000000001024173	leaq	0x4a25f(%rip), %rax
000000000102417a	movq	%rax, (%rsp)
000000000102417e	movq	$0x2b, 0x8(%rsp)
0000000001024187	callq	runtime.throw
000000000102418c	ud2
000000000102418e	leaq	0x48f1e(%rip), %rax
0000000001024195	movq	%rax, (%rsp)
0000000001024199	movq	$0x1d, 0x8(%rsp)
00000000010241a2	callq	runtime.throw
00000000010241a7	ud2
00000000010241a9	leaq	0x49b14(%rip), %rax
00000000010241b0	movq	%rax, (%rsp)
00000000010241b4	movq	$0x24, 0x8(%rsp)
00000000010241bd	callq	runtime.throw
00000000010241c2	ud2
00000000010241c4	leaq	0x49504(%rip), %rax
00000000010241cb	movq	%rax, (%rsp)
00000000010241cf	movq	$0x20, 0x8(%rsp)
00000000010241d8	callq	runtime.throw
00000000010241dd	ud2
00000000010241df	leaq	0x494c9(%rip), %rax
00000000010241e6	movq	%rax, (%rsp)
00000000010241ea	movq	$0x20, 0x8(%rsp)
00000000010241f3	callq	runtime.throw
00000000010241f8	ud2
00000000010241fa	leaq	0x49ced(%rip), %rax
0000000001024201	movq	%rax, (%rsp)
0000000001024205	movq	$0x26, 0x8(%rsp)
000000000102420e	callq	runtime.throw
0000000001024213	ud2
0000000001024215	leaq	0x49473(%rip), %rax
000000000102421c	movq	%rax, (%rsp)
0000000001024220	movq	$0x20, 0x8(%rsp)
0000000001024229	callq	runtime.throw
000000000102422e	ud2
runtime.funcPC:
0000000001024230	movq	0x10(%rsp), %rax
0000000001024235	leaq	0x10(%rsp), %rcx
000000000102423a	testb	%al, (%rcx)
000000000102423c	movq	(%rax), %rax
000000000102423f	movq	%rax, 0x18(%rsp)
0000000001024244	retq
0000000001024245	int3
0000000001024246	int3
0000000001024247	int3
0000000001024248	int3
0000000001024249	int3
000000000102424a	int3
000000000102424b	int3
000000000102424c	int3
000000000102424d	int3
000000000102424e	int3
000000000102424f	int3
runtime.badmcall:
0000000001024250	movq	%gs:0x30, %rcx
0000000001024259	cmpq	0x10(%rcx), %rsp
000000000102425d	jbe	0x1024288
000000000102425f	subq	$0x18, %rsp
0000000001024263	movq	%rbp, 0x10(%rsp)
0000000001024268	leaq	0x10(%rsp), %rbp
000000000102426d	leaq	0x49a2c(%rip), %rax
0000000001024274	movq	%rax, (%rsp)
0000000001024278	movq	$0x24, 0x8(%rsp)
0000000001024281	callq	runtime.throw
0000000001024286	ud2
0000000001024288	callq	runtime.morestack_noctxt
000000000102428d	jmp	runtime.badmcall
000000000102428f	int3
runtime.badmcall2:
0000000001024290	movq	%gs:0x30, %rcx
0000000001024299	cmpq	0x10(%rcx), %rsp
000000000102429d	jbe	0x10242c8
000000000102429f	subq	$0x18, %rsp
00000000010242a3	movq	%rbp, 0x10(%rsp)
00000000010242a8	leaq	0x10(%rsp), %rbp
00000000010242ad	leaq	0x4937b(%rip), %rax
00000000010242b4	movq	%rax, (%rsp)
00000000010242b8	movq	$0x20, 0x8(%rsp)
00000000010242c1	callq	runtime.throw
00000000010242c6	ud2
00000000010242c8	callq	runtime.morestack_noctxt
00000000010242cd	jmp	runtime.badmcall2
00000000010242cf	int3
runtime.badreflectcall:
00000000010242d0	movq	%gs:0x30, %rcx
00000000010242d9	cmpq	0x10(%rcx), %rsp
00000000010242dd	jbe	0x102430b
00000000010242df	subq	$0x18, %rsp
00000000010242e3	movq	%rbp, 0x10(%rsp)
00000000010242e8	leaq	0x10(%rsp), %rbp
00000000010242ed	leaq	0x37e0c(%rip), %rax
00000000010242f4	movq	%rax, (%rsp)
00000000010242f8	leaq	runtime.statictmp_20(%rip), %rax
00000000010242ff	movq	%rax, 0x8(%rsp)
0000000001024304	callq	runtime.gopanic
0000000001024309	ud2
000000000102430b	callq	runtime.morestack_noctxt
0000000001024310	jmp	runtime.badreflectcall
0000000001024312	int3
0000000001024313	int3
0000000001024314	int3
0000000001024315	int3
0000000001024316	int3
0000000001024317	int3
0000000001024318	int3
0000000001024319	int3
000000000102431a	int3
000000000102431b	int3
000000000102431c	int3
000000000102431d	int3
000000000102431e	int3
000000000102431f	int3
runtime.badmorestackg0:
0000000001024320	subq	$0x28, %rsp
0000000001024324	movq	%rbp, 0x20(%rsp)
0000000001024329	leaq	0x20(%rsp), %rbp
000000000102432e	movq	runtime.badmorestackg0Msg(%rip), %rax
0000000001024335	movq	0x92a7c(%rip), %rcx
000000000102433c	movl	%ecx, 0x10(%rsp)
0000000001024340	movq	$0x2, (%rsp)
0000000001024348	movq	%rax, 0x8(%rsp)
000000000102434d	callq	runtime.write
0000000001024352	movq	0x20(%rsp), %rbp
0000000001024357	addq	$0x28, %rsp
000000000102435b	retq
000000000102435c	int3
000000000102435d	int3
000000000102435e	int3
000000000102435f	int3
runtime.badmorestackgsignal:
0000000001024360	subq	$0x28, %rsp
0000000001024364	movq	%rbp, 0x20(%rsp)
0000000001024369	leaq	0x20(%rsp), %rbp
000000000102436e	movq	runtime.badmorestackgsignalMsg(%rip), %rax
0000000001024375	movq	0x92a4c(%rip), %rcx
000000000102437c	movl	%ecx, 0x10(%rsp)
0000000001024380	movq	$0x2, (%rsp)
0000000001024388	movq	%rax, 0x8(%rsp)
000000000102438d	callq	runtime.write
0000000001024392	movq	0x20(%rsp), %rbp
0000000001024397	addq	$0x28, %rsp
000000000102439b	retq
000000000102439c	int3
000000000102439d	int3
000000000102439e	int3
000000000102439f	int3
runtime.badctxt:
00000000010243a0	subq	$0x18, %rsp
00000000010243a4	movq	%rbp, 0x10(%rsp)
00000000010243a9	leaq	0x10(%rsp), %rbp
00000000010243ae	leaq	0x46bb3(%rip), %rax
00000000010243b5	movq	%rax, (%rsp)
00000000010243b9	movq	$0x9, 0x8(%rsp)
00000000010243c2	callq	runtime.throw
00000000010243c7	ud2
00000000010243c9	int3
00000000010243ca	int3
00000000010243cb	int3
00000000010243cc	int3
00000000010243cd	int3
00000000010243ce	int3
00000000010243cf	int3
runtime.allgadd:
00000000010243d0	movq	%gs:0x30, %rcx
00000000010243d9	cmpq	0x10(%rcx), %rsp
00000000010243dd	jbe	0x1024505
00000000010243e3	subq	$0x48, %rsp
00000000010243e7	movq	%rbp, 0x40(%rsp)
00000000010243ec	leaq	0x40(%rsp), %rbp
00000000010243f1	movq	0x50(%rsp), %rax
00000000010243f6	movl	0x90(%rax), %ecx
00000000010243fc	testl	%ecx, %ecx
00000000010243fe	je	0x10244ea
0000000001024404	leaq	runtime.allglock(%rip), %rax
000000000102440b	movq	%rax, (%rsp)
000000000102440f	callq	runtime.lock
0000000001024414	movq	0x9441d(%rip), %rax
000000000102441b	leaq	0x1(%rax), %rcx
000000000102441f	movq	0x9441a(%rip), %rdx
0000000001024426	movq	runtime.allgs(%rip), %rbx
000000000102442d	cmpq	%rdx, %rcx
0000000001024430	jg	0x1024487
0000000001024432	leaq	0x1(%rax), %rcx
0000000001024436	movq	%rcx, 0x943fb(%rip)
000000000102443d	leaq	(%rbx,%rax,8), %rdi
0000000001024441	cmpl	$0x0, 0xb07e8(%rip)
0000000001024448	jne	0x102447b
000000000102444a	movq	0x50(%rsp), %rcx
000000000102444f	movq	%rcx, (%rbx,%rax,8)
0000000001024453	movq	0x943de(%rip), %rax
000000000102445a	movq	%rax, runtime.allglen(%rip)
0000000001024461	leaq	runtime.allglock(%rip), %rax
0000000001024468	movq	%rax, (%rsp)
000000000102446c	callq	runtime.unlock
0000000001024471	movq	0x40(%rsp), %rbp
0000000001024476	addq	$0x48, %rsp
000000000102447a	retq
000000000102447b	movq	0x50(%rsp), %rax
0000000001024480	callq	runtime.gcWriteBarrier
0000000001024485	jmp	0x1024453
0000000001024487	leaq	0x30cd2(%rip), %rsi
000000000102448e	movq	%rsi, (%rsp)
0000000001024492	movq	%rbx, 0x8(%rsp)
0000000001024497	movq	%rax, 0x10(%rsp)
000000000102449c	movq	%rdx, 0x18(%rsp)
00000000010244a1	movq	%rcx, 0x20(%rsp)
00000000010244a6	callq	runtime.growslice
00000000010244ab	movq	0x28(%rsp), %rax
00000000010244b0	movq	0x30(%rsp), %rcx
00000000010244b5	movq	0x38(%rsp), %rdx
00000000010244ba	movq	%rdx, 0x9437f(%rip)
00000000010244c1	cmpl	$0x0, 0xb0768(%rip)
00000000010244c8	jne	0x10244dc
00000000010244ca	movq	%rax, runtime.allgs(%rip)
00000000010244d1	movq	%rax, %rbx
00000000010244d4	movq	%rcx, %rax
00000000010244d7	jmp	0x1024432
00000000010244dc	leaq	runtime.allgs(%rip), %rdi
00000000010244e3	callq	runtime.gcWriteBarrier
00000000010244e8	jmp	0x10244d1
00000000010244ea	leaq	0x4820d(%rip), %rax
00000000010244f1	movq	%rax, (%rsp)
00000000010244f5	movq	$0x19, 0x8(%rsp)
00000000010244fe	callq	runtime.throw
0000000001024503	ud2
0000000001024505	callq	runtime.morestack_noctxt
000000000102450a	jmp	runtime.allgadd
000000000102450f	int3
runtime.cpuinit:
0000000001024510	movq	%gs:0x30, %rcx
0000000001024519	cmpq	0x10(%rcx), %rsp
000000000102451d	jbe	0x10246d5
0000000001024523	subq	$0x48, %rsp
0000000001024527	movq	%rbp, 0x40(%rsp)
000000000102452c	leaq	0x40(%rsp), %rbp
0000000001024531	xorps	%xmm0, %xmm0
0000000001024534	movups	%xmm0, 0x30(%rsp)
0000000001024539	leaq	0x46929(%rip), %rax
0000000001024540	movq	%rax, (%rsp)
0000000001024544	movq	$0x8, 0x8(%rsp)
000000000102454d	callq	runtime.haveexperiment
0000000001024552	leaq	0x10(%rsp), %rax
0000000001024557	cmpb	$0x0, (%rax)
000000000102455a	je	0x10246c5
0000000001024560	movb	$0x1, runtime.noptrbss(%rip)
0000000001024567	xorl	%eax, %eax
0000000001024569	jmp	0x102456d
000000000102456b	incl	%eax
000000000102456d	movl	runtime.argc(%rip), %ecx
0000000001024573	leal	0x1(%rax,%rcx), %ecx
0000000001024577	movslq	%ecx, %rcx
000000000102457a	shlq	$0x3, %rcx
000000000102457e	addq	runtime.argv(%rip), %rcx
0000000001024585	cmpq	$0x0, (%rcx)
0000000001024589	jne	0x102456b
000000000102458b	movl	%eax, 0x20(%rsp)
000000000102458f	xorl	%ecx, %ecx
0000000001024591	jmp	0x102459e
0000000001024593	movl	0x24(%rsp), %edx
0000000001024597	leal	0x1(%rdx), %ecx
000000000102459a	movl	0x20(%rsp), %eax
000000000102459e	cmpl	%eax, %ecx
00000000010245a0	jge	0x10246bc
00000000010245a6	movl	%ecx, 0x24(%rsp)
00000000010245aa	movl	runtime.argc(%rip), %eax
00000000010245b0	leal	0x1(%rax,%rcx), %eax
00000000010245b4	movslq	%eax, %rax
00000000010245b7	shlq	$0x3, %rax
00000000010245bb	addq	runtime.argv(%rip), %rax
00000000010245c2	movq	(%rax), %rax
00000000010245c5	movq	%rax, 0x28(%rsp)
00000000010245ca	movq	%rax, (%rsp)
00000000010245ce	callq	runtime.findnull
00000000010245d3	movq	0x8(%rsp), %rax
00000000010245d8	xorps	%xmm0, %xmm0
00000000010245db	movups	%xmm0, 0x30(%rsp)
00000000010245e0	movq	0x28(%rsp), %rcx
00000000010245e5	movq	%rcx, 0x30(%rsp)
00000000010245ea	movq	%rax, 0x38(%rsp)
00000000010245ef	movq	0x30(%rsp), %rdx
00000000010245f4	cmpq	$0xb, %rax
00000000010245f8	jge	0x102468f
00000000010245fe	xorl	%eax, %eax
0000000001024600	testb	%al, %al
0000000001024602	je	0x1024593
0000000001024604	movq	%rcx, (%rsp)
0000000001024608	callq	runtime.gostring
000000000102460d	movq	0x10(%rsp), %rax
0000000001024612	movq	0x8(%rsp), %rcx
0000000001024617	cmpq	$0xb, %rax
000000000102461b	jb	0x10246ce
0000000001024621	addq	$-0xb, %rax
0000000001024625	movq	%rax, %rdx
0000000001024628	negq	%rax
000000000102462b	sarq	$0x3f, %rax
000000000102462f	andq	$0xb, %rax
0000000001024633	addq	%rcx, %rax
0000000001024636	movq	%rax, (%rsp)
000000000102463a	movq	%rdx, 0x8(%rsp)
000000000102463f	callq	"internal/cpu.initialize"
0000000001024644	movzbl	0xb089b(%rip), %eax
000000000102464b	movb	%al, runtime.support_erms(%rip)
0000000001024651	movzbl	0xb0892(%rip), %eax
0000000001024658	movb	%al, runtime.support_popcnt(%rip)
000000000102465e	movzbl	0xb0886(%rip), %eax
0000000001024665	movb	%al, runtime.support_sse2(%rip)
000000000102466b	movzbl	0xb087c(%rip), %eax
0000000001024672	movb	%al, runtime.support_sse41(%rip)
0000000001024678	movzbl	0xb0909(%rip), %eax
000000000102467f	movb	%al, runtime.arm64_support_atomics(%rip)
0000000001024685	movq	0x40(%rsp), %rbp
000000000102468a	addq	$0x48, %rsp
000000000102468e	retq
000000000102468f	movq	%rdx, (%rsp)
0000000001024693	leaq	0x46acc(%rip), %rax
000000000102469a	movq	%rax, 0x8(%rsp)
000000000102469f	movq	$0xb, 0x10(%rsp)
00000000010246a8	callq	runtime.memequal
00000000010246ad	movzbl	0x18(%rsp), %eax
00000000010246b2	movq	0x28(%rsp), %rcx
00000000010246b7	jmp	0x1024600
00000000010246bc	xorl	%edx, %edx
00000000010246be	xorl	%eax, %eax
00000000010246c0	jmp	0x1024636
00000000010246c5	xorl	%edx, %edx
00000000010246c7	xorl	%eax, %eax
00000000010246c9	jmp	0x1024636
00000000010246ce	callq	runtime.panicslice
00000000010246d3	ud2
00000000010246d5	callq	runtime.morestack_noctxt
00000000010246da	jmp	runtime.cpuinit
00000000010246df	int3
runtime.schedinit:
00000000010246e0	movq	%gs:0x30, %rcx
00000000010246e9	cmpq	0x10(%rcx), %rsp
00000000010246ed	jbe	0x102490a
00000000010246f3	subq	$0x60, %rsp
00000000010246f7	movq	%rbp, 0x58(%rsp)
00000000010246fc	leaq	0x58(%rsp), %rbp
0000000001024701	movq	%gs:0x30, %rax
000000000102470a	movq	%rax, 0x38(%rsp)
000000000102470f	movl	$0x2710, 0x943b7(%rip)
0000000001024719	leaq	0x32f60(%rip), %rcx
0000000001024720	movq	%rcx, 0x48(%rsp)
0000000001024725	leaq	0x4a95c(%rip), %rcx
000000000102472c	movq	%rcx, 0x50(%rsp)
0000000001024731	testb	%al, (%rcx)
0000000001024733	leaq	0x50(%rsp), %rcx
0000000001024738	testb	%al, (%rcx)
000000000102473a	movq	0x4a947(%rip), %rcx
0000000001024741	movq	%rcx, runtime.skipPC(%rip)
0000000001024748	callq	runtime.moduledataverify
000000000102474d	callq	runtime.stackinit
0000000001024752	callq	runtime.mallocinit
0000000001024757	movq	0x38(%rsp), %rax
000000000102475c	movq	0x30(%rax), %rcx
0000000001024760	movq	%rcx, (%rsp)
0000000001024764	callq	runtime.mcommoninit
0000000001024769	callq	runtime.cpuinit
000000000102476e	callq	runtime.alginit
0000000001024773	callq	runtime.modulesinit
0000000001024778	callq	runtime.typelinksinit
000000000102477d	callq	runtime.itabsinit
0000000001024782	movq	0x38(%rsp), %rax
0000000001024787	movq	0x30(%rax), %rcx
000000000102478b	movq	%rcx, (%rsp)
000000000102478f	callq	runtime.msigsave
0000000001024794	movq	0x38(%rsp), %rax
0000000001024799	movq	0x30(%rax), %rax
000000000102479d	movl	0x80(%rax), %eax
00000000010247a3	movl	%eax, runtime.initSigmask(%rip)
00000000010247a9	callq	runtime.goargs
00000000010247ae	callq	runtime.goenvs
00000000010247b3	callq	runtime.parsedebugvars
00000000010247b8	callq	runtime.gcinit
00000000010247bd	callq	runtime.nanotime
00000000010247c2	movq	(%rsp), %rax
00000000010247c6	movq	%rax, 0x942db(%rip)
00000000010247cd	movl	runtime.ncpu(%rip), %eax
00000000010247d3	movl	%eax, 0x24(%rsp)
00000000010247d7	leaq	0x46856(%rip), %rcx
00000000010247de	movq	%rcx, (%rsp)
00000000010247e2	movq	$0xa, 0x8(%rsp)
00000000010247eb	callq	runtime.gogetenv
00000000010247f0	movq	0x10(%rsp), %rax
00000000010247f5	movq	0x18(%rsp), %rcx
00000000010247fa	movq	%rax, (%rsp)
00000000010247fe	movq	%rcx, 0x8(%rsp)
0000000001024803	callq	runtime.atoi32
0000000001024808	movl	0x10(%rsp), %eax
000000000102480c	leaq	0x14(%rsp), %rcx
0000000001024811	cmpb	$0x0, (%rcx)
0000000001024814	je	0x10248e6
000000000102481a	testl	%eax, %eax
000000000102481c	jle	0x10248e6
0000000001024822	movl	%eax, (%rsp)
0000000001024825	callq	runtime.procresize
000000000102482a	cmpq	$0x0, 0x8(%rsp)
0000000001024830	jne	0x10248ef
0000000001024836	cmpl	$0x1, 0xb04e7(%rip)
000000000102483d	jle	0x102489b
000000000102483f	movb	$0x1, 0xb03ef(%rip)
0000000001024846	movb	$0x1, 0xb03e3(%rip)
000000000102484d	movq	runtime.allp(%rip), %rcx
0000000001024854	movq	%rcx, 0x40(%rsp)
0000000001024859	movq	0x93ff8(%rip), %rdx
0000000001024860	movq	%rdx, 0x30(%rsp)
0000000001024865	xorl	%eax, %eax
0000000001024867	jmp	0x1024896
0000000001024869	movq	%rax, 0x28(%rsp)
000000000102486e	movq	(%rcx,%rax,8), %rdx
0000000001024872	testb	%al, (%rdx)
0000000001024874	addq	$0x1290, %rdx
000000000102487b	movq	%rdx, (%rsp)
000000000102487f	callq	"runtime.(*wbBuf).reset"
0000000001024884	movq	0x28(%rsp), %rax
0000000001024889	incq	%rax
000000000102488c	movq	0x40(%rsp), %rcx
0000000001024891	movq	0x30(%rsp), %rdx
0000000001024896	cmpq	%rdx, %rax
0000000001024899	jl	0x1024869
000000000102489b	cmpq	$0x0, 0x92545(%rip)
00000000010248a3	jne	0x10248c7
00000000010248a5	movq	$0x7, 0x92538(%rip)
00000000010248b0	cmpl	$0x0, 0xb0379(%rip)
00000000010248b7	jne	0x10248d1
00000000010248b9	leaq	0x4650b(%rip), %rax
00000000010248c0	movq	%rax, runtime.buildVersion(%rip)
00000000010248c7	movq	0x58(%rsp), %rbp
00000000010248cc	addq	$0x60, %rsp
00000000010248d0	retq
00000000010248d1	leaq	runtime.buildVersion(%rip), %rdi
00000000010248d8	leaq	0x464ec(%rip), %rax
00000000010248df	callq	runtime.gcWriteBarrier
00000000010248e4	jmp	0x10248c7
00000000010248e6	movl	0x24(%rsp), %eax
00000000010248ea	jmp	0x1024822
00000000010248ef	leaq	0x49b0e(%rip), %rax
00000000010248f6	movq	%rax, (%rsp)
00000000010248fa	movq	$0x2b, 0x8(%rsp)
0000000001024903	callq	runtime.throw
0000000001024908	ud2
000000000102490a	callq	runtime.morestack_noctxt
000000000102490f	jmp	runtime.schedinit
0000000001024914	int3
0000000001024915	int3
0000000001024916	int3
0000000001024917	int3
0000000001024918	int3
0000000001024919	int3
000000000102491a	int3
000000000102491b	int3
000000000102491c	int3
000000000102491d	int3
000000000102491e	int3
000000000102491f	int3
runtime.checkmcount:
0000000001024920	movq	%gs:0x30, %rcx
0000000001024929	cmpq	0x10(%rcx), %rsp
000000000102492d	jbe	0x10249ce
0000000001024933	subq	$0x20, %rsp
0000000001024937	movq	%rbp, 0x18(%rsp)
000000000102493c	leaq	0x18(%rsp), %rbp
0000000001024941	movl	0x94189(%rip), %eax
0000000001024947	movq	0x9417a(%rip), %rcx
000000000102494e	subq	0x94183(%rip), %rcx
0000000001024955	cmpl	%eax, %ecx
0000000001024957	jg	0x1024963
0000000001024959	movq	0x18(%rsp), %rbp
000000000102495e	addq	$0x20, %rsp
0000000001024962	retq
0000000001024963	movl	%eax, 0x14(%rsp)
0000000001024967	callq	runtime.printlock
000000000102496c	leaq	0x47eb7(%rip), %rax
0000000001024973	movq	%rax, (%rsp)
0000000001024977	movq	$0x19, 0x8(%rsp)
0000000001024980	callq	runtime.printstring
0000000001024985	movl	0x14(%rsp), %eax
0000000001024989	movslq	%eax, %rax
000000000102498c	movq	%rax, (%rsp)
0000000001024990	callq	runtime.printint
0000000001024995	leaq	0x46ba4(%rip), %rax
000000000102499c	movq	%rax, (%rsp)
00000000010249a0	movq	$0xe, 0x8(%rsp)
00000000010249a9	callq	runtime.printstring
00000000010249ae	callq	runtime.printunlock
00000000010249b3	leaq	0x47086(%rip), %rax
00000000010249ba	movq	%rax, (%rsp)
00000000010249be	movq	$0x11, 0x8(%rsp)
00000000010249c7	callq	runtime.throw
00000000010249cc	ud2
00000000010249ce	callq	runtime.morestack_noctxt
00000000010249d3	jmp	runtime.checkmcount
00000000010249d8	int3
00000000010249d9	int3
00000000010249da	int3
00000000010249db	int3
00000000010249dc	int3
00000000010249dd	int3
00000000010249de	int3
00000000010249df	int3
runtime.mcommoninit:
00000000010249e0	movq	%gs:0x30, %rcx
00000000010249e9	cmpq	0x10(%rcx), %rsp
00000000010249ed	jbe	0x1024bc0
00000000010249f3	subq	$0x30, %rsp
00000000010249f7	movq	%rbp, 0x28(%rsp)
00000000010249fc	leaq	0x28(%rsp), %rbp
0000000001024a01	movq	%gs:0x30, %rax
0000000001024a0a	movq	0x30(%rax), %rcx
0000000001024a0e	movq	(%rcx), %rcx
0000000001024a11	cmpq	%rcx, %rax
0000000001024a14	jne	0x1024b6c
0000000001024a1a	leaq	0x9408f(%rip), %rax
0000000001024a21	movq	%rax, (%rsp)
0000000001024a25	callq	runtime.lock
0000000001024a2a	movq	0x94097(%rip), %rax
0000000001024a31	leaq	0x1(%rax), %rcx
0000000001024a35	cmpq	%rax, %rcx
0000000001024a38	jl	0x1024ba5
0000000001024a3e	movq	0x38(%rsp), %rcx
0000000001024a43	movq	%rax, 0xe0(%rcx)
0000000001024a4a	incq	0x94077(%rip)
0000000001024a51	callq	runtime.checkmcount
0000000001024a56	movq	0x38(%rsp), %rax
0000000001024a5b	movq	0xe0(%rax), %rcx
0000000001024a62	imull	$0x5f356495, %ecx, %ecx
0000000001024a68	movl	%ecx, 0x11c(%rax)
0000000001024a6e	callq	runtime.cputicks
0000000001024a73	movq	(%rsp), %rax
0000000001024a77	movq	0x38(%rsp), %rcx
0000000001024a7c	movl	%eax, 0x120(%rcx)
0000000001024a82	movl	0x11c(%rcx), %edx
0000000001024a88	orl	%eax, %edx
0000000001024a8a	testl	%edx, %edx
0000000001024a8c	jne	0x1024a98
0000000001024a8e	movl	$0x1, 0x120(%rcx)
0000000001024a98	movq	%rcx, (%rsp)
0000000001024a9c	callq	runtime.mpreinit
0000000001024aa1	movq	0x38(%rsp), %rax
0000000001024aa6	movq	0x50(%rax), %rcx
0000000001024aaa	testq	%rcx, %rcx
0000000001024aad	je	0x1024abd
0000000001024aaf	movq	(%rcx), %rdx
0000000001024ab2	addq	$0x370, %rdx
0000000001024ab9	movq	%rdx, 0x18(%rcx)
0000000001024abd	movq	runtime.allm(%rip), %rcx
0000000001024ac4	cmpl	$0x0, 0xb0165(%rip)
0000000001024acb	jne	0x1024b52
0000000001024ad1	movq	%rcx, 0x148(%rax)
0000000001024ad8	leaq	runtime.allm(%rip), %rcx
0000000001024adf	movq	%rcx, (%rsp)
0000000001024ae3	movq	%rax, 0x8(%rsp)
0000000001024ae8	callq	runtime.atomicstorep
0000000001024aed	leaq	0x93fbc(%rip), %rax
0000000001024af4	movq	%rax, (%rsp)
0000000001024af8	callq	runtime.unlock
0000000001024afd	leaq	runtime.iscgo(%rip), %rax
0000000001024b04	cmpb	$0x0, (%rax)
0000000001024b07	jne	0x1024b13
0000000001024b09	movq	0x28(%rsp), %rbp
0000000001024b0e	addq	$0x30, %rsp
0000000001024b12	retq
0000000001024b13	leaq	0x37226(%rip), %rax
0000000001024b1a	movq	%rax, (%rsp)
0000000001024b1e	callq	runtime.newobject
0000000001024b23	movq	0x8(%rsp), %rax
0000000001024b28	cmpl	$0x0, 0xb0101(%rip)
0000000001024b2f	jne	0x1024b3f
0000000001024b31	movq	0x38(%rsp), %rcx
0000000001024b36	movq	%rax, 0x138(%rcx)
0000000001024b3d	jmp	0x1024b09
0000000001024b3f	movq	0x38(%rsp), %rcx
0000000001024b44	leaq	0x138(%rcx), %rdi
0000000001024b4b	callq	runtime.gcWriteBarrier
0000000001024b50	jmp	0x1024b09
0000000001024b52	leaq	0x148(%rax), %rdi
0000000001024b59	movq	%rax, %rdx
0000000001024b5c	movq	%rcx, %rax
0000000001024b5f	callq	runtime.gcWriteBarrier
0000000001024b64	movq	%rdx, %rax
0000000001024b67	jmp	0x1024ad8
0000000001024b6c	movq	0x38(%rsp), %rax
0000000001024b71	leaq	0x168(%rax), %rcx
0000000001024b78	testb	%al, (%rcx)
0000000001024b7a	testb	%al, (%rax)
0000000001024b7c	movq	$0x1, (%rsp)
0000000001024b84	movq	%rcx, 0x8(%rsp)
0000000001024b89	movq	$0x20, 0x10(%rsp)
0000000001024b92	movq	$0x20, 0x18(%rsp)
0000000001024b9b	callq	runtime.callers
0000000001024ba0	jmp	0x1024a1a
0000000001024ba5	leaq	0x48017(%rip), %rax
0000000001024bac	movq	%rax, (%rsp)
0000000001024bb0	movq	$0x1b, 0x8(%rsp)
0000000001024bb9	callq	runtime.throw
0000000001024bbe	ud2
0000000001024bc0	callq	runtime.morestack_noctxt
0000000001024bc5	jmp	runtime.mcommoninit
0000000001024bca	int3
0000000001024bcb	int3
0000000001024bcc	int3
0000000001024bcd	int3
0000000001024bce	int3
0000000001024bcf	int3
runtime.ready:
0000000001024bd0	movq	%gs:0x30, %rcx
0000000001024bd9	cmpq	0x10(%rcx), %rsp
0000000001024bdd	jbe	0x1024e4c
0000000001024be3	subq	$0x40, %rsp
0000000001024be7	movq	%rbp, 0x38(%rsp)
0000000001024bec	leaq	0x38(%rsp), %rbp
0000000001024bf1	leaq	0x9fdf8(%rip), %rax
0000000001024bf8	cmpb	$0x0, (%rax)
0000000001024bfb	jne	0x1024ccb
0000000001024c01	movq	0x48(%rsp), %rax
0000000001024c06	movl	0x90(%rax), %ecx
0000000001024c0c	movq	%gs:0x30, %rdx
0000000001024c15	movq	0x30(%rdx), %rbx
0000000001024c19	incl	0x100(%rbx)
0000000001024c1f	btrl	$0xc, %ecx
0000000001024c23	cmpl	$0x4, %ecx
0000000001024c26	jne	0x1024ce8
0000000001024c2c	movq	%rdx, 0x30(%rsp)
0000000001024c31	movq	%rax, (%rsp)
0000000001024c35	movabsq	$0x100000004, %rcx
0000000001024c3f	movq	%rcx, 0x8(%rsp)
0000000001024c44	callq	runtime.casgstatus
0000000001024c49	movq	0x30(%rsp), %rax
0000000001024c4e	movq	0x30(%rax), %rcx
0000000001024c52	movq	0xd0(%rcx), %rcx
0000000001024c59	movq	%rcx, (%rsp)
0000000001024c5d	movq	0x48(%rsp), %rcx
0000000001024c62	movq	%rcx, 0x8(%rsp)
0000000001024c67	movzbl	0x58(%rsp), %ecx
0000000001024c6c	movb	%cl, 0x10(%rsp)
0000000001024c70	callq	runtime.runqput
0000000001024c75	movl	0x93e75(%rip), %eax
0000000001024c7b	testl	%eax, %eax
0000000001024c7d	je	0x1024c89
0000000001024c7f	movl	0x93e6f(%rip), %eax
0000000001024c85	testl	%eax, %eax
0000000001024c87	je	0x1024cc4
0000000001024c89	movq	0x30(%rsp), %rax
0000000001024c8e	movq	0x30(%rax), %rcx
0000000001024c92	addl	$-0x1, 0x100(%rcx)
0000000001024c99	movq	0x30(%rax), %rcx
0000000001024c9d	cmpl	$0x0, 0x100(%rcx)
0000000001024ca4	jne	0x1024cba
0000000001024ca6	leaq	0xb1(%rax), %rcx
0000000001024cad	cmpb	$0x0, (%rcx)
0000000001024cb0	je	0x1024cba
0000000001024cb2	movq	$-0x522, 0x10(%rax)
0000000001024cba	movq	0x38(%rsp), %rbp
0000000001024cbf	addq	$0x40, %rsp
0000000001024cc3	retq
0000000001024cc4	callq	runtime.wakep
0000000001024cc9	jmp	0x1024c89
0000000001024ccb	movq	0x48(%rsp), %rax
0000000001024cd0	movq	%rax, (%rsp)
0000000001024cd4	movq	0x50(%rsp), %rcx
0000000001024cd9	movq	%rcx, 0x8(%rsp)
0000000001024cde	callq	runtime.traceGoUnpark
0000000001024ce3	jmp	0x1024c01
0000000001024ce8	movq	%gs:0x30, %rcx
0000000001024cf1	movq	%rcx, 0x28(%rsp)
0000000001024cf6	movl	0x90(%rax), %edx
0000000001024cfc	movl	%edx, 0x18(%rsp)
0000000001024d00	movq	0x98(%rax), %rbx
0000000001024d07	movq	%rbx, 0x20(%rsp)
0000000001024d0c	callq	runtime.printlock
0000000001024d11	leaq	0x46b72(%rip), %rax
0000000001024d18	movq	%rax, (%rsp)
0000000001024d1c	movq	$0x10, 0x8(%rsp)
0000000001024d25	callq	runtime.printstring
0000000001024d2a	movq	0x48(%rsp), %rax
0000000001024d2f	movq	%rax, (%rsp)
0000000001024d33	callq	runtime.printpointer
0000000001024d38	leaq	0x45f9e(%rip), %rax
0000000001024d3f	movq	%rax, (%rsp)
0000000001024d43	movq	$0x7, 0x8(%rsp)
0000000001024d4c	callq	runtime.printstring
0000000001024d51	movq	0x20(%rsp), %rax
0000000001024d56	movq	%rax, (%rsp)
0000000001024d5a	callq	runtime.printint
0000000001024d5f	leaq	0x46e0c(%rip), %rax
0000000001024d66	movq	%rax, (%rsp)
0000000001024d6a	movq	$0x13, 0x8(%rsp)
0000000001024d73	callq	runtime.printstring
0000000001024d78	movl	0x18(%rsp), %eax
0000000001024d7c	movl	%eax, %eax
0000000001024d7e	movq	%rax, (%rsp)
0000000001024d82	callq	runtime.printuint
0000000001024d87	callq	runtime.printnl
0000000001024d8c	callq	runtime.printunlock
0000000001024d91	movq	0x28(%rsp), %rax
0000000001024d96	movl	0x90(%rax), %ecx
0000000001024d9c	movl	%ecx, 0x1c(%rsp)
0000000001024da0	movq	0x98(%rax), %rdx
0000000001024da7	movq	%rdx, 0x20(%rsp)
0000000001024dac	callq	runtime.printlock
0000000001024db1	leaq	0x46ac2(%rip), %rax
0000000001024db8	movq	%rax, (%rsp)
0000000001024dbc	movq	$0x10, 0x8(%rsp)
0000000001024dc5	callq	runtime.printstring
0000000001024dca	movq	0x28(%rsp), %rax
0000000001024dcf	movq	%rax, (%rsp)
0000000001024dd3	callq	runtime.printpointer
0000000001024dd8	leaq	0x45efe(%rip), %rax
0000000001024ddf	movq	%rax, (%rsp)
0000000001024de3	movq	$0x7, 0x8(%rsp)
0000000001024dec	callq	runtime.printstring
0000000001024df1	movq	0x20(%rsp), %rax
0000000001024df6	movq	%rax, (%rsp)
0000000001024dfa	callq	runtime.printint
0000000001024dff	leaq	0x46d59(%rip), %rax
0000000001024e06	movq	%rax, (%rsp)
0000000001024e0a	movq	$0x13, 0x8(%rsp)
0000000001024e13	callq	runtime.printstring
0000000001024e18	movl	0x1c(%rsp), %eax
0000000001024e1c	movl	%eax, %eax
0000000001024e1e	movq	%rax, (%rsp)
0000000001024e22	callq	runtime.printuint
0000000001024e27	callq	runtime.printnl
0000000001024e2c	callq	runtime.printunlock
0000000001024e31	leaq	0x472db(%rip), %rax
0000000001024e38	movq	%rax, (%rsp)
0000000001024e3c	movq	$0x16, 0x8(%rsp)
0000000001024e45	callq	runtime.throw
0000000001024e4a	ud2
0000000001024e4c	callq	runtime.morestack_noctxt
0000000001024e51	jmp	runtime.ready
0000000001024e56	int3
0000000001024e57	int3
0000000001024e58	int3
0000000001024e59	int3
0000000001024e5a	int3
0000000001024e5b	int3
0000000001024e5c	int3
0000000001024e5d	int3
0000000001024e5e	int3
0000000001024e5f	int3
runtime.gcprocs:
0000000001024e60	movq	%gs:0x30, %rcx
0000000001024e69	cmpq	0x10(%rcx), %rsp
0000000001024e6d	jbe	0x1024eec
0000000001024e6f	subq	$0x20, %rsp
0000000001024e73	movq	%rbp, 0x18(%rsp)
0000000001024e78	leaq	0x18(%rsp), %rbp
0000000001024e7d	leaq	0x93c2c(%rip), %rax
0000000001024e84	movq	%rax, (%rsp)
0000000001024e88	callq	runtime.lock
0000000001024e8d	movl	runtime.gomaxprocs(%rip), %eax
0000000001024e93	movl	%eax, 0xc(%rsp)
0000000001024e97	movl	runtime.ncpu(%rip), %ecx
0000000001024e9d	movl	%ecx, 0x14(%rsp)
0000000001024ea1	movl	0x93c19(%rip), %edx
0000000001024ea7	movl	%edx, 0x10(%rsp)
0000000001024eab	leaq	0x93bfe(%rip), %rbx
0000000001024eb2	movq	%rbx, (%rsp)
0000000001024eb6	callq	runtime.unlock
0000000001024ebb	movl	0xc(%rsp), %eax
0000000001024ebf	movl	0x14(%rsp), %ecx
0000000001024ec3	cmpl	%ecx, %eax
0000000001024ec5	cmovgl	%ecx, %eax
0000000001024ec8	cmpl	$0x20, %eax
0000000001024ecb	movl	$0x20, %ecx
0000000001024ed0	cmovgl	%ecx, %eax
0000000001024ed3	movl	0x10(%rsp), %ecx
0000000001024ed7	incl	%ecx
0000000001024ed9	cmpl	%ecx, %eax
0000000001024edb	cmovgl	%ecx, %eax
0000000001024ede	movl	%eax, 0x28(%rsp)
0000000001024ee2	movq	0x18(%rsp), %rbp
0000000001024ee7	addq	$0x20, %rsp
0000000001024eeb	retq
0000000001024eec	callq	runtime.morestack_noctxt
0000000001024ef1	jmp	runtime.gcprocs
0000000001024ef6	int3
0000000001024ef7	int3
0000000001024ef8	int3
0000000001024ef9	int3
0000000001024efa	int3
0000000001024efb	int3
0000000001024efc	int3
0000000001024efd	int3
0000000001024efe	int3
0000000001024eff	int3
runtime.needaddgcproc:
0000000001024f00	movq	%gs:0x30, %rcx
0000000001024f09	cmpq	0x10(%rcx), %rsp
0000000001024f0d	jbe	0x1024f8c
0000000001024f0f	subq	$0x20, %rsp
0000000001024f13	movq	%rbp, 0x18(%rsp)
0000000001024f18	leaq	0x18(%rsp), %rbp
0000000001024f1d	leaq	0x93b8c(%rip), %rax
0000000001024f24	movq	%rax, (%rsp)
0000000001024f28	callq	runtime.lock
0000000001024f2d	movl	runtime.gomaxprocs(%rip), %eax
0000000001024f33	movl	%eax, 0xc(%rsp)
0000000001024f37	movl	runtime.ncpu(%rip), %ecx
0000000001024f3d	movl	%ecx, 0x14(%rsp)
0000000001024f41	movl	0x93b79(%rip), %edx
0000000001024f47	movl	%edx, 0x10(%rsp)
0000000001024f4b	leaq	0x93b5e(%rip), %rbx
0000000001024f52	movq	%rbx, (%rsp)
0000000001024f56	callq	runtime.unlock
0000000001024f5b	movl	0xc(%rsp), %eax
0000000001024f5f	movl	0x14(%rsp), %ecx
0000000001024f63	cmpl	%ecx, %eax
0000000001024f65	cmovgl	%ecx, %eax
0000000001024f68	cmpl	$0x20, %eax
0000000001024f6b	movl	$0x20, %ecx
0000000001024f70	cmovgl	%ecx, %eax
0000000001024f73	movl	0x10(%rsp), %ecx
0000000001024f77	incl	%ecx
0000000001024f79	subl	%ecx, %eax
0000000001024f7b	testl	%eax, %eax
0000000001024f7d	setg	0x28(%rsp)
0000000001024f82	movq	0x18(%rsp), %rbp
0000000001024f87	addq	$0x20, %rsp
0000000001024f8b	retq
0000000001024f8c	callq	runtime.morestack_noctxt
0000000001024f91	jmp	runtime.needaddgcproc
0000000001024f96	int3
0000000001024f97	int3
0000000001024f98	int3
0000000001024f99	int3
0000000001024f9a	int3
0000000001024f9b	int3
0000000001024f9c	int3
0000000001024f9d	int3
0000000001024f9e	int3
0000000001024f9f	int3
runtime.helpgc:
0000000001024fa0	movq	%gs:0x30, %rcx
0000000001024fa9	cmpq	0x10(%rcx), %rsp
0000000001024fad	jbe	0x1025123
0000000001024fb3	subq	$0x30, %rsp
0000000001024fb7	movq	%rbp, 0x28(%rsp)
0000000001024fbc	leaq	0x28(%rsp), %rbp
0000000001024fc1	movq	%gs:0x30, %rax
0000000001024fca	movq	%rax, 0x20(%rsp)
0000000001024fcf	leaq	0x93ada(%rip), %rcx
0000000001024fd6	movq	%rcx, (%rsp)
0000000001024fda	callq	runtime.lock
0000000001024fdf	movl	0x38(%rsp), %eax
0000000001024fe3	movq	0x20(%rsp), %rcx
0000000001024fe8	movl	$0x1, %edx
0000000001024fed	xorl	%ebx, %ebx
0000000001024fef	jmp	0x1025032
0000000001024ff1	movl	%edx, 0x14(%rsp)
0000000001024ff5	movq	%rbx, 0x18(%rsp)
0000000001024ffa	movq	(%rdi,%rbx,8), %rax
0000000001024ffe	movq	0x48(%rax), %rax
0000000001025002	movq	%rax, 0x158(%rsi)
0000000001025009	leaq	0x140(%rsi), %rax
0000000001025010	movq	%rax, (%rsp)
0000000001025014	callq	runtime.notewakeup
0000000001025019	movl	0x14(%rsp), %eax
000000000102501d	leal	0x1(%rax), %edx
0000000001025020	movq	0x18(%rsp), %rax
0000000001025025	leaq	0x1(%rax), %rbx
0000000001025029	movl	0x38(%rsp), %eax
000000000102502d	movq	0x20(%rsp), %rcx
0000000001025032	cmpl	%eax, %edx
0000000001025034	jge	0x10250d9
000000000102503a	movq	0x93817(%rip), %rsi
0000000001025041	movq	runtime.allp(%rip), %rdi
0000000001025048	cmpq	%rsi, %rbx
000000000102504b	jae	0x102511c
0000000001025051	movq	(%rdi,%rbx,8), %rsi
0000000001025055	movq	0x30(%rcx), %rdi
0000000001025059	movq	0x158(%rdi), %rdi
0000000001025060	leaq	0x1(%rbx), %r8
0000000001025064	cmpq	%rdi, 0x48(%rsi)
0000000001025068	cmoveq	%r8, %rbx
000000000102506c	movq	0x93a45(%rip), %rsi
0000000001025073	testq	%rsi, %rsi
0000000001025076	je	0x1025090
0000000001025078	movq	0x150(%rsi), %rdi
000000000102507f	movq	%rdi, 0x93a32(%rip)
0000000001025086	addl	$-0x1, 0x93a33(%rip)
000000000102508d	testq	%rsi, %rsi
0000000001025090	je	0x1025101
0000000001025092	movl	%edx, 0x10c(%rsi)
0000000001025098	movq	runtime.allp(%rip), %rdi
000000000102509f	movq	0x937b2(%rip), %r8
00000000010250a6	cmpq	%r8, %rbx
00000000010250a9	jae	0x10250fa
00000000010250ab	leaq	0xd0(%rsi), %r8
00000000010250b2	testb	%al, (%r8)
00000000010250b5	movq	(%rdi,%rbx,8), %rdi
00000000010250b9	movq	%rdi, 0xd0(%rsi)
00000000010250c0	movq	runtime.allp(%rip), %rdi
00000000010250c7	movq	0x9378a(%rip), %r8
00000000010250ce	cmpq	%r8, %rbx
00000000010250d1	jb	0x1024ff1
00000000010250d7	jmp	0x10250f3
00000000010250d9	leaq	0x939d0(%rip), %rax
00000000010250e0	movq	%rax, (%rsp)
00000000010250e4	callq	runtime.unlock
00000000010250e9	movq	0x28(%rsp), %rbp
00000000010250ee	addq	$0x30, %rsp
00000000010250f2	retq
00000000010250f3	callq	runtime.panicindex
00000000010250f8	ud2
00000000010250fa	callq	runtime.panicindex
00000000010250ff	ud2
0000000001025101	leaq	0x46ef7(%rip), %rax
0000000001025108	movq	%rax, (%rsp)
000000000102510c	movq	$0x15, 0x8(%rsp)
0000000001025115	callq	runtime.throw
000000000102511a	ud2
000000000102511c	callq	runtime.panicindex
0000000001025121	ud2
0000000001025123	callq	runtime.morestack_noctxt
0000000001025128	jmp	runtime.helpgc
000000000102512d	int3
000000000102512e	int3
000000000102512f	int3
runtime.freezetheworld:
0000000001025130	movq	%gs:0x30, %rcx
0000000001025139	cmpq	0x10(%rcx), %rsp
000000000102513d	jbe	0x10251cc
0000000001025143	subq	$0x18, %rsp
0000000001025147	movq	%rbp, 0x10(%rsp)
000000000102514c	leaq	0x10(%rsp), %rbp
0000000001025151	movl	$0x1, %eax
0000000001025156	leaq	runtime.freezing(%rip), %rcx
000000000102515d	xchgl	%eax, (%rcx)
000000000102515f	xorl	%eax, %eax
0000000001025161	jmp	0x1025177
0000000001025163	movl	$0x3e8, (%rsp)
000000000102516a	callq	runtime.usleep
000000000102516f	movq	0x8(%rsp), %rax
0000000001025174	incq	%rax
0000000001025177	cmpq	$0x5, %rax
000000000102517b	jge	0x10251a5
000000000102517d	movq	%rax, 0x8(%rsp)
0000000001025182	movl	$0x7fffffff, 0x939f0(%rip)
000000000102518c	movl	$0x1, %eax
0000000001025191	leaq	0x939e0(%rip), %rcx
0000000001025198	xchgl	%eax, (%rcx)
000000000102519a	callq	runtime.preemptall
000000000102519f	cmpb	$0x0, (%rsp)
00000000010251a3	jne	0x1025163
00000000010251a5	movl	$0x3e8, (%rsp)
00000000010251ac	callq	runtime.usleep
00000000010251b1	callq	runtime.preemptall
00000000010251b6	movl	$0x3e8, (%rsp)
00000000010251bd	callq	runtime.usleep
00000000010251c2	movq	0x10(%rsp), %rbp
00000000010251c7	addq	$0x18, %rsp
00000000010251cb	retq
00000000010251cc	callq	runtime.morestack_noctxt
00000000010251d1	jmp	runtime.freezetheworld
00000000010251d6	int3
00000000010251d7	int3
00000000010251d8	int3
00000000010251d9	int3
00000000010251da	int3
00000000010251db	int3
00000000010251dc	int3
00000000010251dd	int3
00000000010251de	int3
00000000010251df	int3
runtime.casfrom_Gscanstatus:
00000000010251e0	movq	%gs:0x30, %rcx
00000000010251e9	cmpq	0x10(%rcx), %rsp
00000000010251ed	jbe	0x1025623
00000000010251f3	subq	$0x40, %rsp
00000000010251f7	movq	%rbp, 0x38(%rsp)
00000000010251fc	leaq	0x38(%rsp), %rbp
0000000001025201	movl	0x50(%rsp), %eax
0000000001025205	leal	-0x1001(%rax), %ecx
000000000102520b	cmpl	$0x3, %ecx
000000000102520e	ja	0x1025438
0000000001025214	movl	%eax, %ecx
0000000001025216	btrl	$0xc, %eax
000000000102521a	movl	0x54(%rsp), %edx
000000000102521e	cmpl	%eax, %edx
0000000001025220	jne	0x1025244
0000000001025222	movl	%ecx, %eax
0000000001025224	movq	0x48(%rsp), %rbx
0000000001025229	lock
000000000102522a	cmpxchgl	%edx, 0x90(%rbx)
0000000001025231	sete	%sil
0000000001025235	testb	%sil, %sil
0000000001025238	je	0x102524d
000000000102523a	movq	0x38(%rsp), %rbp
000000000102523f	addq	$0x40, %rsp
0000000001025243	retq
0000000001025244	movq	0x48(%rsp), %rbx
0000000001025249	xorl	%esi, %esi
000000000102524b	jmp	0x1025235
000000000102524d	callq	runtime.printlock
0000000001025252	leaq	0x48d57(%rip), %rax
0000000001025259	movq	%rax, (%rsp)
000000000102525d	movq	$0x27, 0x8(%rsp)
0000000001025266	callq	runtime.printstring
000000000102526b	movq	0x48(%rsp), %rax
0000000001025270	movq	%rax, (%rsp)
0000000001025274	callq	runtime.printpointer
0000000001025279	leaq	0x45cb2(%rip), %rax
0000000001025280	movq	%rax, (%rsp)
0000000001025284	movq	$0x9, 0x8(%rsp)
000000000102528d	callq	runtime.printstring
0000000001025292	movl	0x50(%rsp), %eax
0000000001025296	movq	%rax, (%rsp)
000000000102529a	callq	runtime.printhex
000000000102529f	leaq	0x45c83(%rip), %rax
00000000010252a6	movq	%rax, (%rsp)
00000000010252aa	movq	$0x9, 0x8(%rsp)
00000000010252b3	callq	runtime.printstring
00000000010252b8	movl	0x54(%rsp), %eax
00000000010252bc	movq	%rax, (%rsp)
00000000010252c0	callq	runtime.printhex
00000000010252c5	callq	runtime.printnl
00000000010252ca	callq	runtime.printunlock
00000000010252cf	movq	%gs:0x30, %rax
00000000010252d8	movq	%rax, 0x28(%rsp)
00000000010252dd	movq	0x48(%rsp), %rcx
00000000010252e2	movl	0x90(%rcx), %edx
00000000010252e8	movl	%edx, 0x1c(%rsp)
00000000010252ec	movq	0x98(%rcx), %rbx
00000000010252f3	movq	%rbx, 0x20(%rsp)
00000000010252f8	callq	runtime.printlock
00000000010252fd	leaq	0x46586(%rip), %rax
0000000001025304	movq	%rax, (%rsp)
0000000001025308	movq	$0x10, 0x8(%rsp)
0000000001025311	callq	runtime.printstring
0000000001025316	movq	0x48(%rsp), %rax
000000000102531b	movq	%rax, (%rsp)
000000000102531f	callq	runtime.printpointer
0000000001025324	leaq	0x459b2(%rip), %rax
000000000102532b	movq	%rax, (%rsp)
000000000102532f	movq	$0x7, 0x8(%rsp)
0000000001025338	callq	runtime.printstring
000000000102533d	movq	0x20(%rsp), %rax
0000000001025342	movq	%rax, (%rsp)
0000000001025346	callq	runtime.printint
000000000102534b	leaq	0x46820(%rip), %rax
0000000001025352	movq	%rax, (%rsp)
0000000001025356	movq	$0x13, 0x8(%rsp)
000000000102535f	callq	runtime.printstring
0000000001025364	movl	0x1c(%rsp), %eax
0000000001025368	movl	%eax, %eax
000000000102536a	movq	%rax, (%rsp)
000000000102536e	callq	runtime.printuint
0000000001025373	callq	runtime.printnl
0000000001025378	callq	runtime.printunlock
000000000102537d	movq	0x28(%rsp), %rax
0000000001025382	movl	0x90(%rax), %ecx
0000000001025388	movl	%ecx, 0x10(%rsp)
000000000102538c	movq	0x98(%rax), %rdx
0000000001025393	movq	%rdx, 0x20(%rsp)
0000000001025398	callq	runtime.printlock
000000000102539d	leaq	0x464d6(%rip), %rax
00000000010253a4	movq	%rax, (%rsp)
00000000010253a8	movq	$0x10, 0x8(%rsp)
00000000010253b1	callq	runtime.printstring
00000000010253b6	movq	0x28(%rsp), %rax
00000000010253bb	movq	%rax, (%rsp)
00000000010253bf	callq	runtime.printpointer
00000000010253c4	leaq	0x45912(%rip), %rax
00000000010253cb	movq	%rax, (%rsp)
00000000010253cf	movq	$0x7, 0x8(%rsp)
00000000010253d8	callq	runtime.printstring
00000000010253dd	movq	0x20(%rsp), %rax
00000000010253e2	movq	%rax, (%rsp)
00000000010253e6	callq	runtime.printint
00000000010253eb	leaq	0x4676d(%rip), %rax
00000000010253f2	movq	%rax, (%rsp)
00000000010253f6	movq	$0x13, 0x8(%rsp)
00000000010253ff	callq	runtime.printstring
0000000001025404	movl	0x10(%rsp), %eax
0000000001025408	movl	%eax, %eax
000000000102540a	movq	%rax, (%rsp)
000000000102540e	callq	runtime.printuint
0000000001025413	callq	runtime.printnl
0000000001025418	callq	runtime.printunlock
000000000102541d	leaq	0x49505(%rip), %rax
0000000001025424	movq	%rax, (%rsp)
0000000001025428	movq	$0x34, 0x8(%rsp)
0000000001025431	callq	runtime.throw
0000000001025436	ud2
0000000001025438	callq	runtime.printlock
000000000102543d	leaq	0x48f3f(%rip), %rax
0000000001025444	movq	%rax, (%rsp)
0000000001025448	movq	$0x2b, 0x8(%rsp)
0000000001025451	callq	runtime.printstring
0000000001025456	movq	0x48(%rsp), %rax
000000000102545b	movq	%rax, (%rsp)
000000000102545f	callq	runtime.printpointer
0000000001025464	leaq	0x45ac7(%rip), %rax
000000000102546b	movq	%rax, (%rsp)
000000000102546f	movq	$0x9, 0x8(%rsp)
0000000001025478	callq	runtime.printstring
000000000102547d	movl	0x50(%rsp), %eax
0000000001025481	movq	%rax, (%rsp)
0000000001025485	callq	runtime.printhex
000000000102548a	leaq	0x45a98(%rip), %rax
0000000001025491	movq	%rax, (%rsp)
0000000001025495	movq	$0x9, 0x8(%rsp)
000000000102549e	callq	runtime.printstring
00000000010254a3	movl	0x54(%rsp), %eax
00000000010254a7	movq	%rax, (%rsp)
00000000010254ab	callq	runtime.printhex
00000000010254b0	callq	runtime.printnl
00000000010254b5	callq	runtime.printunlock
00000000010254ba	movq	%gs:0x30, %rax
00000000010254c3	movq	%rax, 0x30(%rsp)
00000000010254c8	movq	0x48(%rsp), %rcx
00000000010254cd	movl	0x90(%rcx), %edx
00000000010254d3	movl	%edx, 0x18(%rsp)
00000000010254d7	movq	0x98(%rcx), %rbx
00000000010254de	movq	%rbx, 0x20(%rsp)
00000000010254e3	callq	runtime.printlock
00000000010254e8	leaq	0x4639b(%rip), %rax
00000000010254ef	movq	%rax, (%rsp)
00000000010254f3	movq	$0x10, 0x8(%rsp)
00000000010254fc	callq	runtime.printstring
0000000001025501	movq	0x48(%rsp), %rax
0000000001025506	movq	%rax, (%rsp)
000000000102550a	callq	runtime.printpointer
000000000102550f	leaq	0x457c7(%rip), %rax
0000000001025516	movq	%rax, (%rsp)
000000000102551a	movq	$0x7, 0x8(%rsp)
0000000001025523	callq	runtime.printstring
0000000001025528	movq	0x20(%rsp), %rax
000000000102552d	movq	%rax, (%rsp)
0000000001025531	callq	runtime.printint
0000000001025536	leaq	0x46635(%rip), %rax
000000000102553d	movq	%rax, (%rsp)
0000000001025541	movq	$0x13, 0x8(%rsp)
000000000102554a	callq	runtime.printstring
000000000102554f	movl	0x18(%rsp), %eax
0000000001025553	movl	%eax, %eax
0000000001025555	movq	%rax, (%rsp)
0000000001025559	callq	runtime.printuint
000000000102555e	callq	runtime.printnl
0000000001025563	callq	runtime.printunlock
0000000001025568	movq	0x30(%rsp), %rax
000000000102556d	movl	0x90(%rax), %ecx
0000000001025573	movl	%ecx, 0x14(%rsp)
0000000001025577	movq	0x98(%rax), %rdx
000000000102557e	movq	%rdx, 0x20(%rsp)
0000000001025583	callq	runtime.printlock
0000000001025588	leaq	0x462eb(%rip), %rax
000000000102558f	movq	%rax, (%rsp)
0000000001025593	movq	$0x10, 0x8(%rsp)
000000000102559c	callq	runtime.printstring
00000000010255a1	movq	0x30(%rsp), %rax
00000000010255a6	movq	%rax, (%rsp)
00000000010255aa	callq	runtime.printpointer
00000000010255af	leaq	0x45727(%rip), %rax
00000000010255b6	movq	%rax, (%rsp)
00000000010255ba	movq	$0x7, 0x8(%rsp)
00000000010255c3	callq	runtime.printstring
00000000010255c8	movq	0x20(%rsp), %rax
00000000010255cd	movq	%rax, (%rsp)
00000000010255d1	callq	runtime.printint
00000000010255d6	leaq	0x46582(%rip), %rax
00000000010255dd	movq	%rax, (%rsp)
00000000010255e1	movq	$0x13, 0x8(%rsp)
00000000010255ea	callq	runtime.printstring
00000000010255ef	movl	0x14(%rsp), %eax
00000000010255f3	movl	%eax, %eax
00000000010255f5	movq	%rax, (%rsp)
00000000010255f9	callq	runtime.printuint
00000000010255fe	callq	runtime.printnl
0000000001025603	callq	runtime.printunlock
0000000001025608	leaq	0x49459(%rip), %rax
000000000102560f	movq	%rax, (%rsp)
0000000001025613	movq	$0x37, 0x8(%rsp)
000000000102561c	callq	runtime.throw
0000000001025621	ud2
0000000001025623	callq	runtime.morestack_noctxt
0000000001025628	jmp	runtime.casfrom_Gscanstatus
000000000102562d	int3
000000000102562e	int3
000000000102562f	int3
runtime.castogscanstatus:
0000000001025630	movq	%gs:0x30, %rcx
0000000001025639	cmpq	0x10(%rcx), %rsp
000000000102563d	jbe	0x1025701
0000000001025643	subq	$0x18, %rsp
0000000001025647	movq	%rbp, 0x10(%rsp)
000000000102564c	leaq	0x10(%rsp), %rbp
0000000001025651	movl	0x28(%rsp), %eax
0000000001025655	leal	-0x1(%rax), %ecx
0000000001025658	cmpl	$0x3, %ecx
000000000102565b	ja	0x102568b
000000000102565d	movl	%eax, %ecx
000000000102565f	btsl	$0xc, %eax
0000000001025663	movl	0x2c(%rsp), %edx
0000000001025667	cmpl	%eax, %edx
0000000001025669	jne	0x102568b
000000000102566b	movl	%ecx, %eax
000000000102566d	movq	0x20(%rsp), %rbx
0000000001025672	lock
0000000001025673	cmpxchgl	%edx, 0x90(%rbx)
000000000102567a	sete	%cl
000000000102567d	movb	%cl, 0x30(%rsp)
0000000001025681	movq	0x10(%rsp), %rbp
0000000001025686	addq	$0x18, %rsp
000000000102568a	retq
000000000102568b	callq	runtime.printlock
0000000001025690	leaq	0x481c1(%rip), %rax
0000000001025697	movq	%rax, (%rsp)
000000000102569b	movq	$0x21, 0x8(%rsp)
00000000010256a4	callq	runtime.printstring
00000000010256a9	movl	0x28(%rsp), %eax
00000000010256ad	movq	%rax, (%rsp)
00000000010256b1	callq	runtime.printhex
00000000010256b6	leaq	0x45754(%rip), %rax
00000000010256bd	movq	%rax, (%rsp)
00000000010256c1	movq	$0x8, 0x8(%rsp)
00000000010256ca	callq	runtime.printstring
00000000010256cf	movl	0x2c(%rsp), %eax
00000000010256d3	movq	%rax, (%rsp)
00000000010256d7	callq	runtime.printhex
00000000010256dc	callq	runtime.printnl
00000000010256e1	callq	runtime.printunlock
00000000010256e6	leaq	0x460fd(%rip), %rax
00000000010256ed	movq	%rax, (%rsp)
00000000010256f1	movq	$0x10, 0x8(%rsp)
00000000010256fa	callq	runtime.throw
00000000010256ff	ud2
0000000001025701	callq	runtime.morestack_noctxt
0000000001025706	jmp	runtime.castogscanstatus
000000000102570b	int3
000000000102570c	int3
000000000102570d	int3
000000000102570e	int3
000000000102570f	int3
runtime.casgstatus:
0000000001025710	subq	$0x58, %rsp
0000000001025714	movq	%rbp, 0x50(%rsp)
0000000001025719	leaq	0x50(%rsp), %rbp
000000000102571e	movl	0x68(%rsp), %eax
0000000001025722	btl	$0xc, %eax
0000000001025726	jae	0x10258dd
000000000102572c	xorps	%xmm0, %xmm0
000000000102572f	movups	%xmm0, 0x28(%rsp)
0000000001025734	leaq	runtime.casgstatus.func1(%rip), %rcx
000000000102573b	movq	%rcx, 0x28(%rsp)
0000000001025740	movl	%eax, 0x30(%rsp)
0000000001025744	movl	0x6c(%rsp), %ecx
0000000001025748	movl	%ecx, 0x34(%rsp)
000000000102574c	leaq	0x28(%rsp), %rdx
0000000001025751	movq	%rdx, (%rsp)
0000000001025755	callq	runtime.systemstack
000000000102575a	movl	0x68(%rsp), %eax
000000000102575e	cmpl	$0x2, %eax
0000000001025761	jne	0x10258d3
0000000001025767	movq	0x60(%rsp), %rcx
000000000102576c	testb	%al, (%rcx)
000000000102576e	leaq	0xb5(%rcx), %rdx
0000000001025775	cmpb	$0x0, (%rdx)
0000000001025778	jne	0x1025889
000000000102577e	movl	0x6c(%rsp), %edx
0000000001025782	xorl	%ebx, %ebx
0000000001025784	xorl	%esi, %esi
0000000001025786	jmp	0x10257e5
0000000001025788	movq	%rax, 0x10(%rsp)
000000000102578d	movl	$0x1, (%rsp)
0000000001025794	callq	runtime.procyield
0000000001025799	movq	0x10(%rsp), %rax
000000000102579e	incq	%rax
00000000010257a1	movq	0x60(%rsp), %rcx
00000000010257a6	movl	0x68(%rsp), %edx
00000000010257aa	movq	0x18(%rsp), %rcx
00000000010257af	movq	0x60(%rsp), %rdx
00000000010257b4	movl	0x68(%rsp), %ebx
00000000010257b8	cmpq	$0xa, %rax
00000000010257bc	jge	0x10257c8
00000000010257be	movl	0x90(%rdx), %esi
00000000010257c4	cmpl	%esi, %ebx
00000000010257c6	jne	0x1025788
00000000010257c8	movq	0x20(%rsp), %rdi
00000000010257cd	incq	%rdi
00000000010257d0	movl	0x6c(%rsp), %r8d
00000000010257d5	movl	%ebx, %eax
00000000010257d7	movl	%r8d, %edx
00000000010257da	movq	%rdi, %rbx
00000000010257dd	movq	%rcx, %rsi
00000000010257e0	movq	0x60(%rsp), %rcx
00000000010257e5	lock
00000000010257e6	cmpxchgl	%edx, 0x90(%rcx)
00000000010257ed	sete	%dil
00000000010257f1	testb	%dil, %dil
00000000010257f4	jne	0x1025873
00000000010257f6	movl	0x68(%rsp), %eax
00000000010257fa	cmpl	$0x4, %eax
00000000010257fd	jne	0x102580c
00000000010257ff	cmpl	$0x1, 0x90(%rcx)
0000000001025806	je	0x10258f8
000000000102580c	movq	%rbx, 0x20(%rsp)
0000000001025811	testq	%rbx, %rbx
0000000001025814	je	0x1025861
0000000001025816	movq	%rsi, 0x18(%rsp)
000000000102581b	callq	runtime.nanotime
0000000001025820	movq	(%rsp), %rax
0000000001025824	movq	0x18(%rsp), %rcx
0000000001025829	cmpq	%rcx, %rax
000000000102582c	jge	0x102583e
000000000102582e	movq	0x60(%rsp), %rdx
0000000001025833	movl	0x68(%rsp), %ebx
0000000001025837	xorl	%eax, %eax
0000000001025839	jmp	0x10257b8
000000000102583e	callq	runtime.osyield
0000000001025843	callq	runtime.nanotime
0000000001025848	movq	(%rsp), %rax
000000000102584c	leaq	0x9c4(%rax), %rcx
0000000001025853	movq	0x60(%rsp), %rdx
0000000001025858	movl	0x68(%rsp), %ebx
000000000102585c	jmp	0x10257c8
0000000001025861	callq	runtime.nanotime
0000000001025866	movq	(%rsp), %rax
000000000102586a	leaq	0x1388(%rax), %rsi
0000000001025871	jmp	0x1025816
0000000001025873	cmpl	$0x2, %edx
0000000001025876	jne	0x102587f
0000000001025878	movb	$0x0, 0xb5(%rcx)
000000000102587f	movq	0x50(%rsp), %rbp
0000000001025884	addq	$0x58, %rsp
0000000001025888	retq
0000000001025889	movq	$0x0, 0x38(%rsp)
0000000001025892	xorps	%xmm0, %xmm0
0000000001025895	movups	%xmm0, 0x40(%rsp)
000000000102589a	leaq	runtime.casgstatus.func2(%rip), %rdx
00000000010258a1	movq	%rdx, 0x38(%rsp)
00000000010258a6	movl	%eax, 0x40(%rsp)
00000000010258aa	movl	0x6c(%rsp), %edx
00000000010258ae	movl	%edx, 0x44(%rsp)
00000000010258b2	movq	%rcx, 0x48(%rsp)
00000000010258b7	leaq	0x38(%rsp), %rbx
00000000010258bc	movq	%rbx, (%rsp)
00000000010258c0	callq	runtime.systemstack
00000000010258c5	movl	0x68(%rsp), %eax
00000000010258c9	movq	0x60(%rsp), %rcx
00000000010258ce	jmp	0x102577e
00000000010258d3	movq	0x60(%rsp), %rcx
00000000010258d8	jmp	0x102577e
00000000010258dd	movl	0x6c(%rsp), %ecx
00000000010258e1	btl	$0xc, %ecx
00000000010258e5	jb	0x102572c
00000000010258eb	cmpl	%eax, %ecx
00000000010258ed	je	0x102572c
00000000010258f3	jmp	0x102575a
00000000010258f8	leaq	0x48e3a(%rip), %rax
00000000010258ff	movq	%rax, (%rsp)
0000000001025903	movq	$0x31, 0x8(%rsp)
000000000102590c	callq	runtime.throw
0000000001025911	ud2
0000000001025913	int3
0000000001025914	int3
0000000001025915	int3
0000000001025916	int3
0000000001025917	int3
0000000001025918	int3
0000000001025919	int3
000000000102591a	int3
000000000102591b	int3
000000000102591c	int3
000000000102591d	int3
000000000102591e	int3
000000000102591f	int3
runtime.scang:
0000000001025920	movq	%gs:0x30, %rcx
0000000001025929	cmpq	0x10(%rcx), %rsp
000000000102592d	jbe	0x1025ccf
0000000001025933	subq	$0x50, %rsp
0000000001025937	movq	%rbp, 0x48(%rsp)
000000000102593c	leaq	0x48(%rsp), %rbp
0000000001025941	movq	0x58(%rsp), %rax
0000000001025946	movb	$0x0, 0xb4(%rax)
000000000102594d	leaq	0xb4(%rax), %rcx
0000000001025954	movq	%rcx, 0x40(%rsp)
0000000001025959	xorl	%edx, %edx
000000000102595b	xorl	%ebx, %ebx
000000000102595d	jmp	0x102597b
000000000102595f	movq	0x28(%rsp), %rsi
0000000001025964	leaq	0x1(%rsi), %rdx
0000000001025968	movq	0x58(%rsp), %rsi
000000000102596d	movq	0x40(%rsp), %rdi
0000000001025972	movq	%rdi, %rcx
0000000001025975	movq	%rax, %rbx
0000000001025978	movq	%rsi, %rax
000000000102597b	cmpb	$0x0, (%rcx)
000000000102597e	jne	0x1025b0a
0000000001025984	movq	%rdx, 0x28(%rsp)
0000000001025989	movl	0x90(%rax), %esi
000000000102598f	cmpl	$0x4, %esi
0000000001025992	ja	0x1025b46
0000000001025998	movq	%rbx, 0x20(%rsp)
000000000102599d	cmpl	$0x1, %esi
00000000010259a0	je	0x1025aba
00000000010259a6	cmpl	$0x2, %esi
00000000010259a9	jne	0x1025aae
00000000010259af	leaq	0xb3(%rax), %rsi
00000000010259b6	cmpb	$0x0, (%rsi)
00000000010259b9	je	0x1025a2f
00000000010259bb	leaq	0xb1(%rax), %rsi
00000000010259c2	cmpb	$0x0, (%rsi)
00000000010259c5	je	0x1025a2f
00000000010259c7	cmpq	$-0x522, 0x10(%rax)
00000000010259cf	jne	0x1025a2f
00000000010259d1	testq	%rdx, %rdx
00000000010259d4	je	0x1025a1d
00000000010259d6	movq	%rbx, 0x30(%rsp)
00000000010259db	callq	runtime.nanotime
00000000010259e0	movq	(%rsp), %rax
00000000010259e4	movq	0x30(%rsp), %rcx
00000000010259e9	cmpq	%rcx, %rax
00000000010259ec	jge	0x1025a04
00000000010259ee	movl	$0xa, (%rsp)
00000000010259f5	callq	runtime.procyield
00000000010259fa	movq	0x30(%rsp), %rax
00000000010259ff	jmp	0x102595f
0000000001025a04	callq	runtime.osyield
0000000001025a09	callq	runtime.nanotime
0000000001025a0e	movq	(%rsp), %rax
0000000001025a12	addq	$0x1388, %rax
0000000001025a18	jmp	0x102595f
0000000001025a1d	callq	runtime.nanotime
0000000001025a22	movq	(%rsp), %rax
0000000001025a26	leaq	0x2710(%rax), %rbx
0000000001025a2d	jmp	0x10259d6
0000000001025a2f	movq	%rax, (%rsp)
0000000001025a33	movabsq	$0x100200000002, %rcx
0000000001025a3d	movq	%rcx, 0x8(%rsp)
0000000001025a42	callq	runtime.castogscanstatus
0000000001025a47	leaq	0x10(%rsp), %rax
0000000001025a4c	cmpb	$0x0, (%rax)
0000000001025a4f	je	0x1025a78
0000000001025a51	movq	0x40(%rsp), %rcx
0000000001025a56	cmpb	$0x0, (%rcx)
0000000001025a59	je	0x1025a91
0000000001025a5b	movq	0x58(%rsp), %rax
0000000001025a60	movq	%rax, (%rsp)
0000000001025a64	movabsq	$0x200001002, %rcx
0000000001025a6e	movq	%rcx, 0x8(%rsp)
0000000001025a73	callq	runtime.casfrom_Gscanstatus
0000000001025a78	movq	0x58(%rsp), %rax
0000000001025a7d	movq	0x40(%rsp), %rcx
0000000001025a82	movq	0x28(%rsp), %rdx
0000000001025a87	movq	0x20(%rsp), %rbx
0000000001025a8c	jmp	0x10259d1
0000000001025a91	movq	0x58(%rsp), %rdx
0000000001025a96	movb	$0x1, 0xb3(%rdx)
0000000001025a9d	movb	$0x1, 0xb1(%rdx)
0000000001025aa4	movq	$-0x522, 0x10(%rdx)
0000000001025aac	jmp	0x1025a5b
0000000001025aae	leal	-0x3(%rsi), %edi
0000000001025ab1	cmpl	$0x1, %edi
0000000001025ab4	ja	0x1025b6b
0000000001025aba	movq	%rax, (%rsp)
0000000001025abe	movl	%esi, 0x8(%rsp)
0000000001025ac2	btsl	$0xc, %esi
0000000001025ac6	movl	%esi, 0xc(%rsp)
0000000001025aca	callq	runtime.castogscanstatus
0000000001025acf	leaq	0x10(%rsp), %rax
0000000001025ad4	cmpb	$0x0, (%rax)
0000000001025ad7	jne	0x1025af2
0000000001025ad9	movq	0x58(%rsp), %rax
0000000001025ade	movq	0x40(%rsp), %rcx
0000000001025ae3	movq	0x28(%rsp), %rdx
0000000001025ae8	movq	0x20(%rsp), %rbx
0000000001025aed	jmp	0x10259d1
0000000001025af2	movq	0x40(%rsp), %rax
0000000001025af7	cmpb	$0x0, (%rax)
0000000001025afa	je	0x1025b20
0000000001025afc	movq	0x58(%rsp), %rax
0000000001025b01	movq	%rax, (%rsp)
0000000001025b05	callq	runtime.restartg
0000000001025b0a	movq	0x58(%rsp), %rax
0000000001025b0f	movb	$0x0, 0xb3(%rax)
0000000001025b16	movq	0x48(%rsp), %rbp
0000000001025b1b	addq	$0x50, %rsp
0000000001025b1f	retq
0000000001025b20	movq	0x58(%rsp), %rax
0000000001025b25	movq	%rax, (%rsp)
0000000001025b29	movq	0x60(%rsp), %rcx
0000000001025b2e	movq	%rcx, 0x8(%rsp)
0000000001025b33	callq	runtime.scanstack
0000000001025b38	movq	0x58(%rsp), %rax
0000000001025b3d	movb	$0x1, 0xb4(%rax)
0000000001025b44	jmp	0x1025afc
0000000001025b46	cmpl	$0x6, %esi
0000000001025b49	je	0x1025b62
0000000001025b4b	cmpl	$0x8, %esi
0000000001025b4e	je	0x10259d1
0000000001025b54	cmpl	$0x1004, %esi
0000000001025b5a	je	0x10259d1
0000000001025b60	jmp	0x1025b6b
0000000001025b62	movb	$0x1, 0xb4(%rax)
0000000001025b69	jmp	0x1025b0a
0000000001025b6b	movq	%gs:0x30, %rcx
0000000001025b74	movq	%rcx, 0x38(%rsp)
0000000001025b79	movl	0x90(%rax), %edx
0000000001025b7f	movl	%edx, 0x18(%rsp)
0000000001025b83	movq	0x98(%rax), %rbx
0000000001025b8a	movq	%rbx, 0x30(%rsp)
0000000001025b8f	callq	runtime.printlock
0000000001025b94	leaq	0x45cef(%rip), %rax
0000000001025b9b	movq	%rax, (%rsp)
0000000001025b9f	movq	$0x10, 0x8(%rsp)
0000000001025ba8	callq	runtime.printstring
0000000001025bad	movq	0x58(%rsp), %rax
0000000001025bb2	movq	%rax, (%rsp)
0000000001025bb6	callq	runtime.printpointer
0000000001025bbb	leaq	0x4511b(%rip), %rax
0000000001025bc2	movq	%rax, (%rsp)
0000000001025bc6	movq	$0x7, 0x8(%rsp)
0000000001025bcf	callq	runtime.printstring
0000000001025bd4	movq	0x30(%rsp), %rax
0000000001025bd9	movq	%rax, (%rsp)
0000000001025bdd	callq	runtime.printint
0000000001025be2	leaq	0x45f89(%rip), %rax
0000000001025be9	movq	%rax, (%rsp)
0000000001025bed	movq	$0x13, 0x8(%rsp)
0000000001025bf6	callq	runtime.printstring
0000000001025bfb	movl	0x18(%rsp), %eax
0000000001025bff	movl	%eax, %eax
0000000001025c01	movq	%rax, (%rsp)
0000000001025c05	callq	runtime.printuint
0000000001025c0a	callq	runtime.printnl
0000000001025c0f	callq	runtime.printunlock
0000000001025c14	movq	0x38(%rsp), %rax
0000000001025c19	movl	0x90(%rax), %ecx
0000000001025c1f	movl	%ecx, 0x1c(%rsp)
0000000001025c23	movq	0x98(%rax), %rdx
0000000001025c2a	movq	%rdx, 0x30(%rsp)
0000000001025c2f	callq	runtime.printlock
0000000001025c34	leaq	0x45c3f(%rip), %rax
0000000001025c3b	movq	%rax, (%rsp)
0000000001025c3f	movq	$0x10, 0x8(%rsp)
0000000001025c48	callq	runtime.printstring
0000000001025c4d	movq	0x38(%rsp), %rax
0000000001025c52	movq	%rax, (%rsp)
0000000001025c56	callq	runtime.printpointer
0000000001025c5b	leaq	0x4507b(%rip), %rax
0000000001025c62	movq	%rax, (%rsp)
0000000001025c66	movq	$0x7, 0x8(%rsp)
0000000001025c6f	callq	runtime.printstring
0000000001025c74	movq	0x30(%rsp), %rax
0000000001025c79	movq	%rax, (%rsp)
0000000001025c7d	callq	runtime.printint
0000000001025c82	leaq	0x45ed6(%rip), %rax
0000000001025c89	movq	%rax, (%rsp)
0000000001025c8d	movq	$0x13, 0x8(%rsp)
0000000001025c96	callq	runtime.printstring
0000000001025c9b	movl	0x1c(%rsp), %eax
0000000001025c9f	movl	%eax, %eax
0000000001025ca1	movq	%rax, (%rsp)
0000000001025ca5	callq	runtime.printuint
0000000001025caa	callq	runtime.printnl
0000000001025caf	callq	runtime.printunlock
0000000001025cb4	leaq	0x46401(%rip), %rax
0000000001025cbb	movq	%rax, (%rsp)
0000000001025cbf	movq	$0x15, 0x8(%rsp)
0000000001025cc8	callq	runtime.throw
0000000001025ccd	ud2
0000000001025ccf	callq	runtime.morestack_noctxt
0000000001025cd4	jmp	runtime.scang
0000000001025cd9	int3
0000000001025cda	int3
0000000001025cdb	int3
0000000001025cdc	int3
0000000001025cdd	int3
0000000001025cde	int3
0000000001025cdf	int3
runtime.restartg:
0000000001025ce0	movq	%gs:0x30, %rcx
0000000001025ce9	cmpq	0x10(%rcx), %rsp
0000000001025ced	jbe	0x1025ea9
0000000001025cf3	subq	$0x30, %rsp
0000000001025cf7	movq	%rbp, 0x28(%rsp)
0000000001025cfc	leaq	0x28(%rsp), %rbp
0000000001025d01	movq	0x38(%rsp), %rax
0000000001025d06	movl	0x90(%rax), %ecx
0000000001025d0c	cmpl	$0x6, %ecx
0000000001025d0f	jne	0x1025d1b
0000000001025d11	movq	0x28(%rsp), %rbp
0000000001025d16	addq	$0x30, %rsp
0000000001025d1a	retq
0000000001025d1b	cmpl	$0x1001, %ecx
0000000001025d21	jne	0x1025d3a
0000000001025d23	movq	%rax, (%rsp)
0000000001025d27	movl	%ecx, 0x8(%rsp)
0000000001025d2b	btrl	$0xc, %ecx
0000000001025d2f	movl	%ecx, 0xc(%rsp)
0000000001025d33	callq	runtime.casfrom_Gscanstatus
0000000001025d38	jmp	0x1025d11
0000000001025d3a	leal	-0x1003(%rcx), %edx
0000000001025d40	cmpl	$0x1, %edx
0000000001025d43	jbe	0x1025d23
0000000001025d45	movq	%gs:0x30, %rcx
0000000001025d4e	movq	%rcx, 0x20(%rsp)
0000000001025d53	movl	0x90(%rax), %edx
0000000001025d59	movl	%edx, 0x10(%rsp)
0000000001025d5d	movq	0x98(%rax), %rbx
0000000001025d64	movq	%rbx, 0x18(%rsp)
0000000001025d69	callq	runtime.printlock
0000000001025d6e	leaq	0x45b15(%rip), %rax
0000000001025d75	movq	%rax, (%rsp)
0000000001025d79	movq	$0x10, 0x8(%rsp)
0000000001025d82	callq	runtime.printstring
0000000001025d87	movq	0x38(%rsp), %rax
0000000001025d8c	movq	%rax, (%rsp)
0000000001025d90	callq	runtime.printpointer
0000000001025d95	leaq	0x44f41(%rip), %rax
0000000001025d9c	movq	%rax, (%rsp)
0000000001025da0	movq	$0x7, 0x8(%rsp)
0000000001025da9	callq	runtime.printstring
0000000001025dae	movq	0x18(%rsp), %rax
0000000001025db3	movq	%rax, (%rsp)
0000000001025db7	callq	runtime.printint
0000000001025dbc	leaq	0x45daf(%rip), %rax
0000000001025dc3	movq	%rax, (%rsp)
0000000001025dc7	movq	$0x13, 0x8(%rsp)
0000000001025dd0	callq	runtime.printstring
0000000001025dd5	movl	0x10(%rsp), %eax
0000000001025dd9	movl	%eax, %eax
0000000001025ddb	movq	%rax, (%rsp)
0000000001025ddf	callq	runtime.printuint
0000000001025de4	callq	runtime.printnl
0000000001025de9	callq	runtime.printunlock
0000000001025dee	movq	0x20(%rsp), %rax
0000000001025df3	movl	0x90(%rax), %ecx
0000000001025df9	movl	%ecx, 0x14(%rsp)
0000000001025dfd	movq	0x98(%rax), %rdx
0000000001025e04	movq	%rdx, 0x18(%rsp)
0000000001025e09	callq	runtime.printlock
0000000001025e0e	leaq	0x45a65(%rip), %rax
0000000001025e15	movq	%rax, (%rsp)
0000000001025e19	movq	$0x10, 0x8(%rsp)
0000000001025e22	callq	runtime.printstring
0000000001025e27	movq	0x20(%rsp), %rax
0000000001025e2c	movq	%rax, (%rsp)
0000000001025e30	callq	runtime.printpointer
0000000001025e35	leaq	0x44ea1(%rip), %rax
0000000001025e3c	movq	%rax, (%rsp)
0000000001025e40	movq	$0x7, 0x8(%rsp)
0000000001025e49	callq	runtime.printstring
0000000001025e4e	movq	0x18(%rsp), %rax
0000000001025e53	movq	%rax, (%rsp)
0000000001025e57	callq	runtime.printint
0000000001025e5c	leaq	0x45cfc(%rip), %rax
0000000001025e63	movq	%rax, (%rsp)
0000000001025e67	movq	$0x13, 0x8(%rsp)
0000000001025e70	callq	runtime.printstring
0000000001025e75	movl	0x14(%rsp), %eax
0000000001025e79	movl	%eax, %eax
0000000001025e7b	movq	%rax, (%rsp)
0000000001025e7f	callq	runtime.printuint
0000000001025e84	callq	runtime.printnl
0000000001025e89	callq	runtime.printunlock
0000000001025e8e	leaq	0x46cc2(%rip), %rax
0000000001025e95	movq	%rax, (%rsp)
0000000001025e99	movq	$0x1b, 0x8(%rsp)
0000000001025ea2	callq	runtime.throw
0000000001025ea7	ud2
0000000001025ea9	callq	runtime.morestack_noctxt
0000000001025eae	jmp	runtime.restartg
0000000001025eb3	int3
0000000001025eb4	int3
0000000001025eb5	int3
0000000001025eb6	int3
0000000001025eb7	int3
0000000001025eb8	int3
0000000001025eb9	int3
0000000001025eba	int3
0000000001025ebb	int3
0000000001025ebc	int3
0000000001025ebd	int3
0000000001025ebe	int3
0000000001025ebf	int3
runtime.stopTheWorldWithSema:
0000000001025ec0	movq	%gs:0x30, %rcx
0000000001025ec9	cmpq	0x10(%rcx), %rsp
0000000001025ecd	jbe	0x102617a
0000000001025ed3	subq	$0x60, %rsp
0000000001025ed7	movq	%rbp, 0x58(%rsp)
0000000001025edc	leaq	0x58(%rsp), %rbp
0000000001025ee1	movq	%gs:0x30, %rax
0000000001025eea	movq	0x30(%rax), %rcx
0000000001025eee	cmpl	$0x0, 0x100(%rcx)
0000000001025ef5	jg	0x102615f
0000000001025efb	movq	%rax, 0x48(%rsp)
0000000001025f00	leaq	0x92ba9(%rip), %rax
0000000001025f07	movq	%rax, (%rsp)
0000000001025f0b	callq	runtime.lock
0000000001025f10	movl	runtime.gomaxprocs(%rip), %eax
0000000001025f16	movl	%eax, 0x92c60(%rip)
0000000001025f1c	movl	$0x1, %eax
0000000001025f21	leaq	0x92c50(%rip), %rcx
0000000001025f28	xchgl	%eax, (%rcx)
0000000001025f2a	callq	runtime.preemptall
0000000001025f2f	movq	0x48(%rsp), %rax
0000000001025f34	movq	0x30(%rax), %rax
0000000001025f38	movq	0xd0(%rax), %rax
0000000001025f3f	movl	$0x3, 0xc(%rax)
0000000001025f46	addl	$-0x1, 0x92c2f(%rip)
0000000001025f4d	movq	0x92904(%rip), %rax
0000000001025f54	movq	%rax, 0x30(%rsp)
0000000001025f59	movq	runtime.allp(%rip), %rcx
0000000001025f60	movq	%rcx, 0x50(%rsp)
0000000001025f65	xorl	%edx, %edx
0000000001025f67	jmp	0x1025f6f
0000000001025f69	incq	%rdx
0000000001025f6c	movq	%rdi, %rax
0000000001025f6f	cmpq	%rax, %rdx
0000000001025f72	jge	0x102600f
0000000001025f78	movq	(%rcx,%rdx,8), %rbx
0000000001025f7c	movl	0xc(%rbx), %esi
0000000001025f7f	cmpl	$0x2, %esi
0000000001025f82	jne	0x1025ff3
0000000001025f84	movq	%rax, %rdi
0000000001025f87	movl	%esi, %eax
0000000001025f89	movl	$0x3, %r8d
0000000001025f8f	lock
0000000001025f90	cmpxchgl	%r8d, 0xc(%rbx)
0000000001025f95	sete	%sil
0000000001025f99	testb	%sil, %sil
0000000001025f9c	je	0x1025f69
0000000001025f9e	leaq	0x9ea4b(%rip), %rsi
0000000001025fa5	cmpb	$0x0, (%rsi)
0000000001025fa8	jne	0x1025fb6
0000000001025faa	incl	0x1c(%rbx)
0000000001025fad	addl	$-0x1, 0x92bc8(%rip)
0000000001025fb4	jmp	0x1025f69
0000000001025fb6	movq	%rdx, 0x28(%rsp)
0000000001025fbb	movq	%rbx, 0x38(%rsp)
0000000001025fc0	movq	%rbx, (%rsp)
0000000001025fc4	callq	runtime.traceGoSysBlock
0000000001025fc9	movq	0x38(%rsp), %rax
0000000001025fce	movq	%rax, (%rsp)
0000000001025fd2	callq	runtime.traceProcStop
0000000001025fd7	movq	0x50(%rsp), %rcx
0000000001025fdc	movq	0x28(%rsp), %rdx
0000000001025fe1	movq	0x38(%rsp), %rbx
0000000001025fe6	movq	0x30(%rsp), %rdi
0000000001025feb	movl	$0x3, %r8d
0000000001025ff1	jmp	0x1025faa
0000000001025ff3	movq	%rax, %rdi
0000000001025ff6	movl	$0x3, %r8d
0000000001025ffc	jmp	0x1025f69
0000000001026001	movl	$0x3, 0xc(%rax)
0000000001026008	addl	$-0x1, 0x92b6d(%rip)
000000000102600f	movq	0x92ad2(%rip), %rax
0000000001026016	testq	%rax, %rax
0000000001026019	je	0x1026039
000000000102601b	movq	0x10(%rax), %rcx
000000000102601f	movq	%rcx, 0x92ac2(%rip)
0000000001026026	movl	$0xffffffff, %ecx
000000000102602b	leaq	0x92abe(%rip), %rdx
0000000001026032	lock
0000000001026033	xaddl	%ecx, (%rdx)
0000000001026036	testq	%rax, %rax
0000000001026039	jne	0x1026001
000000000102603b	movl	0x92b3b(%rip), %eax
0000000001026041	movl	%eax, 0x1c(%rsp)
0000000001026045	cmpl	$0x0, %eax
0000000001026048	leaq	0x92a61(%rip), %rcx
000000000102604f	movq	%rcx, (%rsp)
0000000001026053	callq	runtime.unlock
0000000001026058	movl	0x1c(%rsp), %eax
000000000102605c	cmpl	$0x0, %eax
000000000102605f	jg	0x1026113
0000000001026065	cmpl	$0x0, 0x92b10(%rip)
000000000102606c	jne	0x1026100
0000000001026072	movq	0x927df(%rip), %rax
0000000001026079	movq	runtime.allp(%rip), %rcx
0000000001026080	xorl	%edx, %edx
0000000001026082	xorl	%ebx, %ebx
0000000001026084	xorl	%esi, %esi
0000000001026086	jmp	0x10260a8
0000000001026088	movq	(%rcx,%rdx,8), %rdi
000000000102608c	incq	%rdx
000000000102608f	cmpl	$0x3, 0xc(%rdi)
0000000001026093	leaq	0x485e2(%rip), %rdi
000000000102609a	cmovneq	%rdi, %rbx
000000000102609e	movl	$0x2e, %r8d
00000000010260a4	cmovneq	%r8, %rsi
00000000010260a8	cmpq	%rax, %rdx
00000000010260ab	jl	0x1026088
00000000010260ad	movl	runtime.freezing(%rip), %eax
00000000010260b3	testl	%eax, %eax
00000000010260b5	jne	0x10260ca
00000000010260b7	testq	%rsi, %rsi
00000000010260ba	jne	0x102614f
00000000010260c0	movq	0x58(%rsp), %rbp
00000000010260c5	addq	$0x60, %rsp
00000000010260c9	retq
00000000010260ca	movq	%rsi, 0x20(%rsp)
00000000010260cf	movq	%rbx, 0x40(%rsp)
00000000010260d4	leaq	runtime.deadlock(%rip), %rax
00000000010260db	movq	%rax, (%rsp)
00000000010260df	callq	runtime.lock
00000000010260e4	leaq	runtime.deadlock(%rip), %rax
00000000010260eb	movq	%rax, (%rsp)
00000000010260ef	callq	runtime.lock
00000000010260f4	movq	0x40(%rsp), %rbx
00000000010260f9	movq	0x20(%rsp), %rsi
00000000010260fe	jmp	0x10260b7
0000000001026100	movl	$0x29, %esi
0000000001026105	leaq	0x48126(%rip), %rbx
000000000102610c	jmp	0x10260ad
000000000102610e	callq	runtime.preemptall
0000000001026113	leaq	0x92a66(%rip), %rax
000000000102611a	movq	%rax, (%rsp)
000000000102611e	movq	$0x186a0, 0x8(%rsp)
0000000001026127	callq	runtime.notetsleep
000000000102612c	leaq	0x10(%rsp), %rax
0000000001026131	cmpb	$0x0, (%rax)
0000000001026134	je	0x102610e
0000000001026136	leaq	0x92a43(%rip), %rax
000000000102613d	testb	%al, (%rax)
000000000102613f	movq	$0x0, 0x92a36(%rip)
000000000102614a	jmp	0x1026065
000000000102614f	movq	%rbx, (%rsp)
0000000001026153	movq	%rsi, 0x8(%rsp)
0000000001026158	callq	runtime.throw
000000000102615d	ud2
000000000102615f	leaq	0x46aff(%rip), %rax
0000000001026166	movq	%rax, (%rsp)
000000000102616a	movq	$0x1b, 0x8(%rsp)
0000000001026173	callq	runtime.throw
0000000001026178	ud2
000000000102617a	callq	runtime.morestack_noctxt
000000000102617f	jmp	runtime.stopTheWorldWithSema
0000000001026184	int3
0000000001026185	int3
0000000001026186	int3
0000000001026187	int3
0000000001026188	int3
0000000001026189	int3
000000000102618a	int3
000000000102618b	int3
000000000102618c	int3
000000000102618d	int3
000000000102618e	int3
000000000102618f	int3
runtime.mhelpgc:
0000000001026190	movq	%gs:0x30, %rax
0000000001026199	movq	0x30(%rax), %rax
000000000102619d	movl	$0xffffffff, 0x10c(%rax)
00000000010261a7	retq
00000000010261a8	int3
00000000010261a9	int3
00000000010261aa	int3
00000000010261ab	int3
00000000010261ac	int3
00000000010261ad	int3
00000000010261ae	int3
00000000010261af	int3
runtime.startTheWorldWithSema:
00000000010261b0	movq	%gs:0x30, %rcx
00000000010261b9	cmpq	0x10(%rcx), %rsp
00000000010261bd	jbe	0x10263fd
00000000010261c3	subq	$0x40, %rsp
00000000010261c7	movq	%rbp, 0x38(%rsp)
00000000010261cc	leaq	0x38(%rsp), %rbp
00000000010261d1	movq	%gs:0x30, %rax
00000000010261da	movq	%rax, 0x28(%rsp)
00000000010261df	movq	0x30(%rax), %rcx
00000000010261e3	incl	0x100(%rcx)
00000000010261e9	movl	runtime.netpollInited(%rip), %ecx
00000000010261ef	testl	%ecx, %ecx
00000000010261f1	jne	0x10263c6
00000000010261f7	callq	runtime.needaddgcproc
00000000010261fc	movzbl	(%rsp), %eax
0000000001026200	movb	%al, 0x17(%rsp)
0000000001026204	leaq	0x928a5(%rip), %rcx
000000000102620b	movq	%rcx, (%rsp)
000000000102620f	callq	runtime.lock
0000000001026214	movl	runtime.gomaxprocs(%rip), %eax
000000000102621a	movl	runtime.newprocs(%rip), %ecx
0000000001026220	testl	%ecx, %ecx
0000000001026222	je	0x10263bf
0000000001026228	movl	$0x0, runtime.netpollWaiters(%rip)
0000000001026232	movl	%ecx, (%rsp)
0000000001026235	callq	runtime.procresize
000000000102623a	movq	0x8(%rsp), %rax
000000000102623f	movq	%rax, 0x20(%rsp)
0000000001026244	movl	$0x0, 0x9292a(%rip)
000000000102624e	cmpl	$0x0, 0x92933(%rip)
0000000001026255	jne	0x10263a0
000000000102625b	leaq	0x9284e(%rip), %rax
0000000001026262	movq	%rax, (%rsp)
0000000001026266	callq	runtime.unlock
000000000102626b	movzbl	0x17(%rsp), %eax
0000000001026270	movq	0x20(%rsp), %rcx
0000000001026275	jmp	0x102627f
0000000001026277	movq	0x30(%rsp), %rdx
000000000102627c	movq	%rdx, %rcx
000000000102627f	movb	%al, 0x17(%rsp)
0000000001026283	testq	%rcx, %rcx
0000000001026286	je	0x10262ed
0000000001026288	movq	0x10(%rcx), %rdx
000000000102628c	movq	0x40(%rcx), %rbx
0000000001026290	movq	%rdx, 0x30(%rsp)
0000000001026295	testq	%rbx, %rbx
0000000001026298	je	0x10262d7
000000000102629a	movq	$0x0, 0x40(%rcx)
00000000010262a2	cmpq	$0x0, 0xd8(%rbx)
00000000010262aa	jne	0x10263e2
00000000010262b0	leaq	0xd8(%rbx), %rax
00000000010262b7	testb	%al, (%rax)
00000000010262b9	movq	%rcx, 0xd8(%rbx)
00000000010262c0	leaq	0x140(%rbx), %rax
00000000010262c7	movq	%rax, (%rsp)
00000000010262cb	callq	runtime.notewakeup
00000000010262d0	movzbl	0x17(%rsp), %eax
00000000010262d5	jmp	0x1026277
00000000010262d7	movq	$0x0, (%rsp)
00000000010262df	movq	%rcx, 0x8(%rsp)
00000000010262e4	callq	runtime.newm
00000000010262e9	xorl	%eax, %eax
00000000010262eb	jmp	0x1026277
00000000010262ed	callq	runtime.nanotime
00000000010262f2	movq	(%rsp), %rax
00000000010262f6	movq	%rax, 0x18(%rsp)
00000000010262fb	movzbl	0x48(%rsp), %ecx
0000000001026300	testb	%cl, %cl
0000000001026302	jne	0x1026391
0000000001026308	movl	0x927e2(%rip), %ecx
000000000102630e	testl	%ecx, %ecx
0000000001026310	je	0x102631c
0000000001026312	movl	0x927dc(%rip), %ecx
0000000001026318	testl	%ecx, %ecx
000000000102631a	je	0x1026385
000000000102631c	movzbl	0x17(%rsp), %ecx
0000000001026321	testb	%cl, %cl
0000000001026323	jne	0x1026365
0000000001026325	movq	0x28(%rsp), %rcx
000000000102632a	movq	0x30(%rcx), %rdx
000000000102632e	addl	$-0x1, 0x100(%rdx)
0000000001026335	movq	0x30(%rcx), %rdx
0000000001026339	cmpl	$0x0, 0x100(%rdx)
0000000001026340	jne	0x1026356
0000000001026342	leaq	0xb1(%rcx), %rdx
0000000001026349	cmpb	$0x0, (%rdx)
000000000102634c	je	0x1026356
000000000102634e	movq	$-0x522, 0x10(%rcx)
0000000001026356	movq	%rax, 0x50(%rsp)
000000000102635b	movq	0x38(%rsp), %rbp
0000000001026360	addq	$0x40, %rsp
0000000001026364	retq
0000000001026365	leaq	0x48bdc(%rip), %rax
000000000102636c	movq	%rax, (%rsp)
0000000001026370	movq	$0x0, 0x8(%rsp)
0000000001026379	callq	runtime.newm
000000000102637e	movq	0x18(%rsp), %rax
0000000001026383	jmp	0x1026325
0000000001026385	callq	runtime.wakep
000000000102638a	movq	0x18(%rsp), %rax
000000000102638f	jmp	0x102631c
0000000001026391	callq	runtime.traceGCSTWDone
0000000001026396	movq	0x18(%rsp), %rax
000000000102639b	jmp	0x1026308
00000000010263a0	movl	$0x0, 0x927de(%rip)
00000000010263aa	leaq	0x927df(%rip), %rax
00000000010263b1	movq	%rax, (%rsp)
00000000010263b5	callq	runtime.notewakeup
00000000010263ba	jmp	0x102625b
00000000010263bf	movl	%eax, %ecx
00000000010263c1	jmp	0x1026232
00000000010263c6	movb	$0x0, (%rsp)
00000000010263ca	callq	runtime.netpoll
00000000010263cf	movq	0x8(%rsp), %rax
00000000010263d4	movq	%rax, (%rsp)
00000000010263d8	callq	runtime.injectglist
00000000010263dd	jmp	0x10261f7
00000000010263e2	leaq	0x47a6e(%rip), %rax
00000000010263e9	movq	%rax, (%rsp)
00000000010263ed	movq	$0x25, 0x8(%rsp)
00000000010263f6	callq	runtime.throw
00000000010263fb	ud2
00000000010263fd	callq	runtime.morestack_noctxt
0000000001026402	jmp	runtime.startTheWorldWithSema
0000000001026407	int3
0000000001026408	int3
0000000001026409	int3
000000000102640a	int3
000000000102640b	int3
000000000102640c	int3
000000000102640d	int3
000000000102640e	int3
000000000102640f	int3
runtime.mstart:
0000000001026410	subq	$0x18, %rsp
0000000001026414	movq	%rbp, 0x10(%rsp)
0000000001026419	leaq	0x10(%rsp), %rbp
000000000102641e	movq	%gs:0x30, %rax
0000000001026427	cmpq	$0x0, (%rax)
000000000102642b	jne	0x102645f
000000000102642d	movq	0x8(%rax), %rcx
0000000001026431	movq	%rcx, 0x8(%rsp)
0000000001026436	testq	%rcx, %rcx
0000000001026439	jne	0x1026444
000000000102643b	movq	$0x2000, 0x8(%rsp)
0000000001026444	leaq	0x8(%rsp), %rcx
0000000001026449	movq	%rcx, 0x8(%rax)
000000000102644d	movq	0x8(%rsp), %rdx
0000000001026452	subq	%rdx, %rcx
0000000001026455	addq	$0x400, %rcx
000000000102645c	movq	%rcx, (%rax)
000000000102645f	movq	(%rax), %rcx
0000000001026462	addq	$0x370, %rcx
0000000001026469	movq	%rcx, 0x10(%rax)
000000000102646d	movq	%rcx, 0x18(%rax)
0000000001026471	callq	runtime.mstart1
0000000001026476	movb	$0x1, (%rsp)
000000000102647a	callq	runtime.mexit
000000000102647f	movq	0x10(%rsp), %rbp
0000000001026484	addq	$0x18, %rsp
0000000001026488	retq
0000000001026489	int3
000000000102648a	int3
000000000102648b	int3
000000000102648c	int3
000000000102648d	int3
000000000102648e	int3
000000000102648f	int3
runtime.mstart1:
0000000001026490	movq	%gs:0x30, %rcx
0000000001026499	cmpq	0x10(%rcx), %rsp
000000000102649d	jbe	0x10265b5
00000000010264a3	subq	$0x20, %rsp
00000000010264a7	movq	%rbp, 0x18(%rsp)
00000000010264ac	leaq	0x18(%rsp), %rbp
00000000010264b1	movq	%gs:0x30, %rax
00000000010264ba	movq	0x30(%rax), %rcx
00000000010264be	movq	(%rcx), %rcx
00000000010264c1	cmpq	%rax, %rcx
00000000010264c4	jne	0x102659a
00000000010264ca	movq	%rax, 0x10(%rsp)
00000000010264cf	movq	0x20(%rsp), %rax
00000000010264d4	movq	%rax, (%rsp)
00000000010264d8	leaq	0x28(%rsp), %rax
00000000010264dd	movq	%rax, 0x8(%rsp)
00000000010264e2	callq	runtime.save
00000000010264e7	callq	runtime.asminit
00000000010264ec	callq	runtime.minit
00000000010264f1	movq	0x10(%rsp), %rax
00000000010264f6	movq	0x30(%rax), %rcx
00000000010264fa	leaq	runtime.m0(%rip), %rdx
0000000001026501	cmpq	%rdx, %rcx
0000000001026504	je	0x1026584
0000000001026506	movq	0x30(%rax), %rcx
000000000102650a	movq	0xb8(%rcx), %rcx
0000000001026511	testq	%rcx, %rcx
0000000001026514	jne	0x102656e
0000000001026516	movq	0x30(%rax), %rcx
000000000102651a	cmpl	$0x0, 0x10c(%rcx)
0000000001026521	jne	0x102655d
0000000001026523	cmpq	%rcx, %rdx
0000000001026526	jne	0x1026537
0000000001026528	callq	runtime.schedule
000000000102652d	movq	0x18(%rsp), %rbp
0000000001026532	addq	$0x20, %rsp
0000000001026536	retq
0000000001026537	movq	0xd8(%rcx), %rax
000000000102653e	movq	%rax, (%rsp)
0000000001026542	callq	runtime.acquirep
0000000001026547	movq	0x10(%rsp), %rax
000000000102654c	movq	0x30(%rax), %rax
0000000001026550	movq	$0x0, 0xd8(%rax)
000000000102655b	jmp	0x1026528
000000000102655d	movl	$0x0, 0x10c(%rcx)
0000000001026567	callq	runtime.stopm
000000000102656c	jmp	0x1026528
000000000102656e	movq	(%rcx), %rax
0000000001026571	movq	%rcx, %rdx
0000000001026574	callq	*%rax
0000000001026576	movq	0x10(%rsp), %rax
000000000102657b	leaq	runtime.m0(%rip), %rdx
0000000001026582	jmp	0x1026516
0000000001026584	callq	runtime.mstartm0
0000000001026589	movq	0x10(%rsp), %rax
000000000102658e	leaq	runtime.m0(%rip), %rdx
0000000001026595	jmp	0x1026506
000000000102659a	leaq	0x4561d(%rip), %rax
00000000010265a1	movq	%rax, (%rsp)
00000000010265a5	movq	$0x13, 0x8(%rsp)
00000000010265ae	callq	runtime.throw
00000000010265b3	ud2
00000000010265b5	callq	runtime.morestack_noctxt
00000000010265ba	jmp	runtime.mstart1
00000000010265bf	int3
runtime.mstartm0:
00000000010265c0	movq	%gs:0x30, %rcx
00000000010265c9	cmpq	0x10(%rcx), %rsp
00000000010265cd	jbe	0x1026616
00000000010265cf	subq	$0x10, %rsp
00000000010265d3	movq	%rbp, 0x8(%rsp)
00000000010265d8	leaq	0x8(%rsp), %rbp
00000000010265dd	leaq	runtime.iscgo(%rip), %rax
00000000010265e4	cmpb	$0x0, (%rax)
00000000010265e7	je	0x10265f5
00000000010265e9	leaq	runtime.cgoHasExtraM(%rip), %rax
00000000010265f0	cmpb	$0x0, (%rax)
00000000010265f3	je	0x1026608
00000000010265f5	movb	$0x0, (%rsp)
00000000010265f9	callq	runtime.initsig
00000000010265fe	movq	0x8(%rsp), %rbp
0000000001026603	addq	$0x10, %rsp
0000000001026607	retq
0000000001026608	movb	$0x1, runtime.arm64_support_atomics(%rip)
000000000102660f	callq	runtime.newextram
0000000001026614	jmp	0x10265f5
0000000001026616	callq	runtime.morestack_noctxt
000000000102661b	jmp	runtime.mstartm0
000000000102661d	int3
000000000102661e	int3
000000000102661f	int3
runtime.mexit:
0000000001026620	movq	%gs:0x30, %rcx
0000000001026629	cmpq	0x10(%rcx), %rsp
000000000102662d	jbe	0x102683e
0000000001026633	subq	$0x20, %rsp
0000000001026637	movq	%rbp, 0x18(%rsp)
000000000102663c	leaq	0x18(%rsp), %rbp
0000000001026641	movq	%gs:0x30, %rax
000000000102664a	movq	0x30(%rax), %rax
000000000102664e	movq	%rax, 0x10(%rsp)
0000000001026653	leaq	runtime.m0(%rip), %rcx
000000000102665a	cmpq	%rax, %rcx
000000000102665d	je	0x10267d7
0000000001026663	callq	runtime.sigblock
0000000001026668	callq	runtime.unminit
000000000102666d	movq	0x10(%rsp), %rax
0000000001026672	movq	0x50(%rax), %rcx
0000000001026676	testq	%rcx, %rcx
0000000001026679	jne	0x10267a2
000000000102667f	leaq	0x9242a(%rip), %rax
0000000001026686	movq	%rax, (%rsp)
000000000102668a	callq	runtime.lock
000000000102668f	movq	0x10(%rsp), %rax
0000000001026694	leaq	runtime.allm(%rip), %rcx
000000000102669b	jmp	0x10266a4
000000000102669d	leaq	0x148(%rdx), %rcx
00000000010266a4	movq	(%rcx), %rdx
00000000010266a7	testq	%rdx, %rdx
00000000010266aa	je	0x10267bc
00000000010266b0	cmpq	%rax, %rdx
00000000010266b3	jne	0x102669d
00000000010266b5	movq	0x148(%rax), %rdx
00000000010266bc	cmpl	$0x0, 0xae56d(%rip)
00000000010266c3	jne	0x102678c
00000000010266c9	movq	%rdx, (%rcx)
00000000010266cc	movzbl	0x28(%rsp), %ecx
00000000010266d1	testb	%cl, %cl
00000000010266d3	je	0x1026738
00000000010266d5	leaq	0x923d4(%rip), %rax
00000000010266dc	movq	%rax, (%rsp)
00000000010266e0	callq	runtime.unlock
00000000010266e5	callq	runtime.releasep
00000000010266ea	callq	runtime.handoffp
00000000010266ef	leaq	0x923ba(%rip), %rax
00000000010266f6	movq	%rax, (%rsp)
00000000010266fa	callq	runtime.lock
00000000010266ff	incq	0x923d2(%rip)
0000000001026706	callq	runtime.checkdead
000000000102670b	leaq	0x9239e(%rip), %rax
0000000001026712	movq	%rax, (%rsp)
0000000001026716	callq	runtime.unlock
000000000102671b	movzbl	0x28(%rsp), %eax
0000000001026720	testb	%al, %al
0000000001026722	je	0x102672e
0000000001026724	movq	0x18(%rsp), %rbp
0000000001026729	addq	$0x20, %rsp
000000000102672d	retq
000000000102672e	movq	0x18(%rsp), %rbp
0000000001026733	addq	$0x20, %rsp
0000000001026737	retq
0000000001026738	movl	$0x1, %edx
000000000102673d	xchgl	%edx, 0x118(%rax)
0000000001026743	movq	0x92426(%rip), %rdx
000000000102674a	cmpl	$0x0, 0xae4df(%rip)
0000000001026751	jne	0x1026766
0000000001026753	movq	%rdx, 0x2a8(%rax)
000000000102675a	movq	%rax, 0x9240f(%rip)
0000000001026761	jmp	0x10266d5
0000000001026766	leaq	0x2a8(%rax), %rdi
000000000102676d	movq	%rax, %rbx
0000000001026770	movq	%rdx, %rax
0000000001026773	callq	runtime.gcWriteBarrier
0000000001026778	leaq	0x923f1(%rip), %rdi
000000000102677f	movq	%rbx, %rax
0000000001026782	callq	runtime.gcWriteBarrier
0000000001026787	jmp	0x10266d5
000000000102678c	movq	%rcx, %rdi
000000000102678f	movq	%rax, %rbx
0000000001026792	movq	%rdx, %rax
0000000001026795	callq	runtime.gcWriteBarrier
000000000102679a	movq	%rbx, %rax
000000000102679d	jmp	0x10266cc
00000000010267a2	movq	0x8(%rcx), %rax
00000000010267a6	movq	(%rcx), %rcx
00000000010267a9	movq	%rcx, (%rsp)
00000000010267ad	movq	%rax, 0x8(%rsp)
00000000010267b2	callq	runtime.stackfree
00000000010267b7	jmp	0x102667f
00000000010267bc	leaq	0x45421(%rip), %rax
00000000010267c3	movq	%rax, (%rsp)
00000000010267c7	movq	$0x13, 0x8(%rsp)
00000000010267d0	callq	runtime.throw
00000000010267d5	ud2
00000000010267d7	callq	runtime.releasep
00000000010267dc	callq	runtime.handoffp
00000000010267e1	leaq	0x922c8(%rip), %rax
00000000010267e8	movq	%rax, (%rsp)
00000000010267ec	callq	runtime.lock
00000000010267f1	incq	0x922e0(%rip)
00000000010267f8	callq	runtime.checkdead
00000000010267fd	leaq	0x922ac(%rip), %rax
0000000001026804	movq	%rax, (%rsp)
0000000001026808	callq	runtime.unlock
000000000102680d	movq	0x10(%rsp), %rax
0000000001026812	testb	%al, (%rax)
0000000001026814	addq	$0x140, %rax
000000000102681a	movq	%rax, (%rsp)
000000000102681e	callq	runtime.notesleep
0000000001026823	leaq	0x45128(%rip), %rax
000000000102682a	movq	%rax, (%rsp)
000000000102682e	movq	$0x11, 0x8(%rsp)
0000000001026837	callq	runtime.throw
000000000102683c	ud2
000000000102683e	callq	runtime.morestack_noctxt
0000000001026843	jmp	runtime.mexit
0000000001026848	int3
0000000001026849	int3
000000000102684a	int3
000000000102684b	int3
000000000102684c	int3
000000000102684d	int3
000000000102684e	int3
000000000102684f	int3
runtime.forEachP:
0000000001026850	movq	%gs:0x30, %rcx
0000000001026859	cmpq	0x18(%rcx), %rsp
000000000102685d	jbe	0x1026bd4
0000000001026863	subq	$0x60, %rsp
0000000001026867	movq	%rbp, 0x58(%rsp)
000000000102686c	leaq	0x58(%rsp), %rbp
0000000001026871	movq	%gs:0x30, %rax
000000000102687a	movq	0x30(%rax), %rcx
000000000102687e	incl	0x100(%rcx)
0000000001026884	movq	%gs:0x30, %rcx
000000000102688d	movq	0x30(%rcx), %rcx
0000000001026891	movq	0xd0(%rcx), %rcx
0000000001026898	movq	0x30(%rax), %rax
000000000102689c	movq	%rax, 0x38(%rsp)
00000000010268a1	movq	%rcx, 0x50(%rsp)
00000000010268a6	leaq	0x92203(%rip), %rdx
00000000010268ad	movq	%rdx, (%rsp)
00000000010268b1	callq	runtime.lock
00000000010268b6	cmpl	$0x0, 0x922e3(%rip)
00000000010268bd	jne	0x1026bb9
00000000010268c3	movl	runtime.gomaxprocs(%rip), %ecx
00000000010268c9	decl	%ecx
00000000010268cb	movl	%ecx, 0x922cf(%rip)
00000000010268d1	cmpl	$0x0, 0xae358(%rip)
00000000010268d8	jne	0x1026b6d
00000000010268de	movq	0x68(%rsp), %rax
00000000010268e3	movq	%rax, 0x922ae(%rip)
00000000010268ea	movq	0x91f67(%rip), %rcx
00000000010268f1	movq	runtime.allp(%rip), %rdx
00000000010268f8	movq	0x50(%rsp), %rbx
00000000010268fd	xorl	%esi, %esi
00000000010268ff	jmp	0x1026904
0000000001026901	incq	%rsi
0000000001026904	cmpq	%rcx, %rsi
0000000001026907	jge	0x1026923
0000000001026909	movq	(%rdx,%rsi,8), %rdi
000000000102690d	cmpq	%rbx, %rdi
0000000001026910	je	0x1026901
0000000001026912	testb	%al, (%rdi)
0000000001026914	movl	$0x1, %r8d
000000000102691a	xchgl	%r8d, 0x22a0(%rdi)
0000000001026921	jmp	0x1026901
0000000001026923	callq	runtime.preemptall
0000000001026928	movq	0x921b9(%rip), %rax
000000000102692f	jmp	0x1026935
0000000001026931	movq	0x10(%rcx), %rax
0000000001026935	testq	%rax, %rax
0000000001026938	je	0x1026978
000000000102693a	movq	%rax, %rcx
000000000102693d	movl	$0x1, %eax
0000000001026942	xorl	%ebx, %ebx
0000000001026944	lock
0000000001026945	cmpxchgl	%ebx, 0x22a0(%rcx)
000000000102694c	sete	%sil
0000000001026950	testb	%sil, %sil
0000000001026953	je	0x1026931
0000000001026955	movq	%rcx, 0x48(%rsp)
000000000102695a	movq	%rcx, (%rsp)
000000000102695e	movq	0x68(%rsp), %rdx
0000000001026963	movq	(%rdx), %rax
0000000001026966	callq	*%rax
0000000001026968	addl	$-0x1, 0x92231(%rip)
000000000102696f	movq	0x48(%rsp), %rcx
0000000001026974	xorl	%ebx, %ebx
0000000001026976	jmp	0x1026931
0000000001026978	movl	0x92222(%rip), %eax
000000000102697e	movl	%eax, 0x1c(%rsp)
0000000001026982	cmpl	$0x0, %eax
0000000001026985	leaq	0x92124(%rip), %rcx
000000000102698c	movq	%rcx, (%rsp)
0000000001026990	callq	runtime.unlock
0000000001026995	movq	0x50(%rsp), %rax
000000000102699a	movq	%rax, (%rsp)
000000000102699e	movq	0x68(%rsp), %rdx
00000000010269a3	movq	(%rdx), %rax
00000000010269a6	callq	*%rax
00000000010269a8	movq	0x91ea9(%rip), %rax
00000000010269af	movq	%rax, 0x28(%rsp)
00000000010269b4	movq	runtime.allp(%rip), %rcx
00000000010269bb	movq	%rcx, 0x40(%rsp)
00000000010269c0	xorl	%edx, %edx
00000000010269c2	jmp	0x10269ca
00000000010269c4	incq	%rdx
00000000010269c7	movq	%rdi, %rax
00000000010269ca	cmpq	%rax, %rdx
00000000010269cd	jge	0x1026a5e
00000000010269d3	movq	(%rcx,%rdx,8), %rbx
00000000010269d7	movl	0xc(%rbx), %esi
00000000010269da	cmpl	$0x2, %esi
00000000010269dd	jne	0x1026a53
00000000010269df	cmpl	$0x1, 0x22a0(%rbx)
00000000010269e6	jne	0x1026a53
00000000010269e8	movq	%rax, %rdi
00000000010269eb	movl	%esi, %eax
00000000010269ed	xorl	%r8d, %r8d
00000000010269f0	lock
00000000010269f1	cmpxchgl	%r8d, 0xc(%rbx)
00000000010269f6	sete	%sil
00000000010269fa	testb	%sil, %sil
00000000010269fd	je	0x10269c4
00000000010269ff	movq	%rdx, 0x20(%rsp)
0000000001026a04	leaq	0x9dfe5(%rip), %rax
0000000001026a0b	cmpb	$0x0, (%rax)
0000000001026a0e	jne	0x1026a30
0000000001026a10	incl	0x1c(%rbx)
0000000001026a13	movq	%rbx, (%rsp)
0000000001026a17	callq	runtime.handoffp
0000000001026a1c	movq	0x40(%rsp), %rcx
0000000001026a21	movq	0x20(%rsp), %rdx
0000000001026a26	movq	0x28(%rsp), %rdi
0000000001026a2b	xorl	%r8d, %r8d
0000000001026a2e	jmp	0x10269c4
0000000001026a30	movq	%rbx, 0x30(%rsp)
0000000001026a35	movq	%rbx, (%rsp)
0000000001026a39	callq	runtime.traceGoSysBlock
0000000001026a3e	movq	0x30(%rsp), %rax
0000000001026a43	movq	%rax, (%rsp)
0000000001026a47	callq	runtime.traceProcStop
0000000001026a4c	movq	0x30(%rsp), %rbx
0000000001026a51	jmp	0x1026a10
0000000001026a53	movq	%rax, %rdi
0000000001026a56	xorl	%r8d, %r8d
0000000001026a59	jmp	0x10269c4
0000000001026a5e	movl	0x1c(%rsp), %eax
0000000001026a62	cmpl	$0x0, %eax
0000000001026a65	jg	0x1026b31
0000000001026a6b	cmpl	$0x0, 0x9212e(%rip)
0000000001026a72	jne	0x1026b9e
0000000001026a78	movq	0x91dd9(%rip), %rax
0000000001026a7f	movq	runtime.allp(%rip), %rcx
0000000001026a86	xorl	%edx, %edx
0000000001026a88	jmp	0x1026a8d
0000000001026a8a	incq	%rdx
0000000001026a8d	cmpq	%rax, %rdx
0000000001026a90	jge	0x1026aa6
0000000001026a92	movq	(%rcx,%rdx,8), %rbx
0000000001026a96	testb	%al, (%rbx)
0000000001026a98	cmpl	$0x0, 0x22a0(%rbx)
0000000001026a9f	je	0x1026a8a
0000000001026aa1	jmp	0x1026b83
0000000001026aa6	leaq	0x92003(%rip), %rax
0000000001026aad	movq	%rax, (%rsp)
0000000001026ab1	callq	runtime.lock
0000000001026ab6	cmpl	$0x0, 0xae173(%rip)
0000000001026abd	jne	0x1026b1c
0000000001026abf	movq	$0x0, 0x920ce(%rip)
0000000001026aca	leaq	0x91fdf(%rip), %rax
0000000001026ad1	movq	%rax, (%rsp)
0000000001026ad5	callq	runtime.unlock
0000000001026ada	movq	%gs:0x30, %rax
0000000001026ae3	movq	0x38(%rsp), %rcx
0000000001026ae8	movl	0x100(%rcx), %edx
0000000001026aee	leal	-0x1(%rdx), %ebx
0000000001026af1	movl	%ebx, 0x100(%rcx)
0000000001026af7	cmpl	$0x1, %edx
0000000001026afa	jne	0x1026b12
0000000001026afc	testb	%al, (%rax)
0000000001026afe	leaq	0xb1(%rax), %rcx
0000000001026b05	cmpb	$0x0, (%rcx)
0000000001026b08	je	0x1026b12
0000000001026b0a	movq	$-0x522, 0x10(%rax)
0000000001026b12	movq	0x58(%rsp), %rbp
0000000001026b17	addq	$0x60, %rsp
0000000001026b1b	retq
0000000001026b1c	leaq	0x92075(%rip), %rdi
0000000001026b23	xorl	%eax, %eax
0000000001026b25	callq	runtime.gcWriteBarrier
0000000001026b2a	jmp	0x1026aca
0000000001026b2c	callq	runtime.preemptall
0000000001026b31	leaq	0x92070(%rip), %rax
0000000001026b38	movq	%rax, (%rsp)
0000000001026b3c	movq	$0x186a0, 0x8(%rsp)
0000000001026b45	callq	runtime.notetsleep
0000000001026b4a	leaq	0x10(%rsp), %rax
0000000001026b4f	cmpb	$0x0, (%rax)
0000000001026b52	je	0x1026b2c
0000000001026b54	leaq	0x9204d(%rip), %rax
0000000001026b5b	testb	%al, (%rax)
0000000001026b5d	movq	$0x0, 0x92040(%rip)
0000000001026b68	jmp	0x1026a6b
0000000001026b6d	leaq	0x92024(%rip), %rdi
0000000001026b74	movq	0x68(%rsp), %rax
0000000001026b79	callq	runtime.gcWriteBarrier
0000000001026b7e	jmp	0x10268ea
0000000001026b83	leaq	0x45d84(%rip), %rax
0000000001026b8a	movq	%rax, (%rsp)
0000000001026b8e	movq	$0x1a, 0x8(%rsp)
0000000001026b97	callq	runtime.throw
0000000001026b9c	ud2
0000000001026b9e	leaq	0x44f28(%rip), %rax
0000000001026ba5	movq	%rax, (%rsp)
0000000001026ba9	movq	$0x12, 0x8(%rsp)
0000000001026bb2	callq	runtime.throw
0000000001026bb7	ud2
0000000001026bb9	leaq	0x46e69(%rip), %rax
0000000001026bc0	movq	%rax, (%rsp)
0000000001026bc4	movq	$0x22, 0x8(%rsp)
0000000001026bcd	callq	runtime.throw
0000000001026bd2	ud2
0000000001026bd4	callq	runtime.morestackc
0000000001026bd9	jmp	runtime.forEachP
0000000001026bde	int3
0000000001026bdf	int3
runtime.runSafePointFn:
0000000001026be0	movq	%gs:0x30, %rcx
0000000001026be9	cmpq	0x10(%rcx), %rsp
0000000001026bed	jbe	0x1026c97
0000000001026bf3	subq	$0x10, %rsp
0000000001026bf7	movq	%rbp, 0x8(%rsp)
0000000001026bfc	leaq	0x8(%rsp), %rbp
0000000001026c01	movq	%gs:0x30, %rcx
0000000001026c0a	movq	0x30(%rcx), %rcx
0000000001026c0e	movq	0xd0(%rcx), %rcx
0000000001026c15	testb	%al, (%rcx)
0000000001026c17	movl	$0x1, %eax
0000000001026c1c	xorl	%ebx, %ebx
0000000001026c1e	lock
0000000001026c1f	cmpxchgl	%ebx, 0x22a0(%rcx)
0000000001026c26	sete	%bl
0000000001026c29	testb	%bl, %bl
0000000001026c2b	je	0x1026c8d
0000000001026c2d	movq	0x91f64(%rip), %rdx
0000000001026c34	movq	%rcx, (%rsp)
0000000001026c38	movq	(%rdx), %rax
0000000001026c3b	callq	*%rax
0000000001026c3d	leaq	0x91e6c(%rip), %rax
0000000001026c44	movq	%rax, (%rsp)
0000000001026c48	callq	runtime.lock
0000000001026c4d	movl	0x91f4d(%rip), %eax
0000000001026c53	leal	-0x1(%rax), %ecx
0000000001026c56	movl	%ecx, 0x91f44(%rip)
0000000001026c5c	cmpl	$0x1, %eax
0000000001026c5f	je	0x1026c7b
0000000001026c61	leaq	0x91e48(%rip), %rax
0000000001026c68	movq	%rax, (%rsp)
0000000001026c6c	callq	runtime.unlock
0000000001026c71	movq	0x8(%rsp), %rbp
0000000001026c76	addq	$0x10, %rsp
0000000001026c7a	retq
0000000001026c7b	leaq	0x91f26(%rip), %rax
0000000001026c82	movq	%rax, (%rsp)
0000000001026c86	callq	runtime.notewakeup
0000000001026c8b	jmp	0x1026c61
0000000001026c8d	movq	0x8(%rsp), %rbp
0000000001026c92	addq	$0x10, %rsp
0000000001026c96	retq
0000000001026c97	callq	runtime.morestack_noctxt
0000000001026c9c	jmp	runtime.runSafePointFn
0000000001026ca1	int3
0000000001026ca2	int3
0000000001026ca3	int3
0000000001026ca4	int3
0000000001026ca5	int3
0000000001026ca6	int3
0000000001026ca7	int3
0000000001026ca8	int3
0000000001026ca9	int3
0000000001026caa	int3
0000000001026cab	int3
0000000001026cac	int3
0000000001026cad	int3
0000000001026cae	int3
0000000001026caf	int3
runtime.allocm:
0000000001026cb0	movq	%gs:0x30, %rcx
0000000001026cb9	cmpq	0x10(%rcx), %rsp
0000000001026cbd	jbe	0x1026f00
0000000001026cc3	subq	$0x38, %rsp
0000000001026cc7	movq	%rbp, 0x30(%rsp)
0000000001026ccc	leaq	0x30(%rsp), %rbp
0000000001026cd1	movq	%gs:0x30, %rax
0000000001026cda	movq	%rax, 0x28(%rsp)
0000000001026cdf	movq	0x30(%rax), %rcx
0000000001026ce3	incl	0x100(%rcx)
0000000001026ce9	movq	0x30(%rax), %rcx
0000000001026ced	cmpq	$0x0, 0xd0(%rcx)
0000000001026cf5	je	0x1026ee8
0000000001026cfb	cmpq	$0x0, 0x91e6d(%rip)
0000000001026d03	je	0x1026dc1
0000000001026d09	leaq	0x91da0(%rip), %rax
0000000001026d10	movq	%rax, (%rsp)
0000000001026d14	callq	runtime.lock
0000000001026d19	movq	0x91e50(%rip), %rax
0000000001026d20	xorl	%ecx, %ecx
0000000001026d22	jmp	0x1026d2a
0000000001026d24	movq	%rax, %rcx
0000000001026d27	movq	%rdx, %rax
0000000001026d2a	testq	%rax, %rax
0000000001026d2d	je	0x1026d9d
0000000001026d2f	cmpl	$0x0, 0x118(%rax)
0000000001026d36	je	0x1026d68
0000000001026d38	movq	0x2a8(%rax), %rdx
0000000001026d3f	cmpl	$0x0, 0xadeea(%rip)
0000000001026d46	jne	0x1026d51
0000000001026d48	movq	%rcx, 0x2a8(%rax)
0000000001026d4f	jmp	0x1026d24
0000000001026d51	leaq	0x2a8(%rax), %rdi
0000000001026d58	movq	%rax, %rbx
0000000001026d5b	movq	%rcx, %rax
0000000001026d5e	callq	runtime.gcWriteBarrier
0000000001026d63	movq	%rbx, %rax
0000000001026d66	jmp	0x1026d24
0000000001026d68	movq	%rax, 0x20(%rsp)
0000000001026d6d	movq	%rcx, 0x10(%rsp)
0000000001026d72	movq	(%rax), %rcx
0000000001026d75	movq	(%rcx), %rdx
0000000001026d78	movq	0x8(%rcx), %rcx
0000000001026d7c	movq	%rdx, (%rsp)
0000000001026d80	movq	%rcx, 0x8(%rsp)
0000000001026d85	callq	runtime.stackfree
0000000001026d8a	movq	0x20(%rsp), %rax
0000000001026d8f	movq	0x2a8(%rax), %rdx
0000000001026d96	movq	0x10(%rsp), %rax
0000000001026d9b	jmp	0x1026d24
0000000001026d9d	cmpl	$0x0, 0xade8c(%rip)
0000000001026da4	jne	0x1026ed4
0000000001026daa	movq	%rcx, 0x91dbf(%rip)
0000000001026db1	leaq	0x91cf8(%rip), %rax
0000000001026db8	movq	%rax, (%rsp)
0000000001026dbc	callq	runtime.unlock
0000000001026dc1	leaq	0x436b8(%rip), %rax
0000000001026dc8	movq	%rax, (%rsp)
0000000001026dcc	callq	runtime.newobject
0000000001026dd1	movq	0x8(%rsp), %rax
0000000001026dd6	cmpl	$0x0, 0xade53(%rip)
0000000001026ddd	jne	0x1026eb8
0000000001026de3	movq	0x48(%rsp), %rcx
0000000001026de8	movq	%rcx, 0xb8(%rax)
0000000001026def	movq	%rax, 0x18(%rsp)
0000000001026df4	movq	%rax, (%rsp)
0000000001026df8	callq	runtime.mcommoninit
0000000001026dfd	movl	$0xffffffff, (%rsp)
0000000001026e04	callq	runtime.malg
0000000001026e09	movq	0x8(%rsp), %rax
0000000001026e0e	cmpl	$0x0, 0xade1b(%rip)
0000000001026e15	jne	0x1026ea6
0000000001026e1b	movq	0x18(%rsp), %rcx
0000000001026e20	movq	%rax, (%rcx)
0000000001026e23	testb	%al, (%rax)
0000000001026e25	cmpl	$0x0, 0xade04(%rip)
0000000001026e2c	jne	0x1026e98
0000000001026e2e	movq	%rcx, 0x30(%rax)
0000000001026e32	movq	0x28(%rsp), %rax
0000000001026e37	movq	0x30(%rax), %rdx
0000000001026e3b	movq	0xd0(%rdx), %rdx
0000000001026e42	movq	0x40(%rsp), %rbx
0000000001026e47	cmpq	%rdx, %rbx
0000000001026e4a	je	0x1026e87
0000000001026e4c	movq	0x30(%rax), %rdx
0000000001026e50	addl	$-0x1, 0x100(%rdx)
0000000001026e57	movq	0x30(%rax), %rdx
0000000001026e5b	cmpl	$0x0, 0x100(%rdx)
0000000001026e62	jne	0x1026e78
0000000001026e64	leaq	0xb1(%rax), %rdx
0000000001026e6b	cmpb	$0x0, (%rdx)
0000000001026e6e	je	0x1026e78
0000000001026e70	movq	$-0x522, 0x10(%rax)
0000000001026e78	movq	%rcx, 0x50(%rsp)
0000000001026e7d	movq	0x30(%rsp), %rbp
0000000001026e82	addq	$0x38, %rsp
0000000001026e86	retq
0000000001026e87	callq	runtime.releasep
0000000001026e8c	movq	0x28(%rsp), %rax
0000000001026e91	movq	0x18(%rsp), %rcx
0000000001026e96	jmp	0x1026e4c
0000000001026e98	leaq	0x30(%rax), %rdi
0000000001026e9c	movq	%rcx, %rax
0000000001026e9f	callq	runtime.gcWriteBarrier
0000000001026ea4	jmp	0x1026e32
0000000001026ea6	movq	0x18(%rsp), %rdi
0000000001026eab	callq	runtime.gcWriteBarrier
0000000001026eb0	movq	%rdi, %rcx
0000000001026eb3	jmp	0x1026e23
0000000001026eb8	leaq	0xb8(%rax), %rdi
0000000001026ebf	movq	%rax, %rcx
0000000001026ec2	movq	0x48(%rsp), %rax
0000000001026ec7	callq	runtime.gcWriteBarrier
0000000001026ecc	movq	%rcx, %rax
0000000001026ecf	jmp	0x1026def
0000000001026ed4	leaq	0x91c95(%rip), %rdi
0000000001026edb	movq	%rcx, %rax
0000000001026ede	callq	runtime.gcWriteBarrier
0000000001026ee3	jmp	0x1026db1
0000000001026ee8	movq	0x40(%rsp), %rax
0000000001026eed	movq	%rax, (%rsp)
0000000001026ef1	callq	runtime.acquirep
0000000001026ef6	movq	0x28(%rsp), %rax
0000000001026efb	jmp	0x1026cfb
0000000001026f00	callq	runtime.morestack_noctxt
0000000001026f05	jmp	runtime.allocm
0000000001026f0a	int3
0000000001026f0b	int3
0000000001026f0c	int3
0000000001026f0d	int3
0000000001026f0e	int3
0000000001026f0f	int3
runtime.needm:
0000000001026f10	subq	$0x38, %rsp
0000000001026f14	movq	%rbp, 0x30(%rsp)
0000000001026f19	leaq	0x30(%rsp), %rbp
0000000001026f1e	leaq	runtime.iscgo(%rip), %rax
0000000001026f25	cmpb	$0x0, (%rax)
0000000001026f28	je	0x1026f3a
0000000001026f2a	leaq	runtime.cgoHasExtraM(%rip), %rax
0000000001026f31	cmpb	$0x0, (%rax)
0000000001026f34	je	0x1027013
0000000001026f3a	movb	$0x0, (%rsp)
0000000001026f3e	callq	runtime.lockextra
0000000001026f43	movq	0x8(%rsp), %rax
0000000001026f48	movq	%rax, 0x20(%rsp)
0000000001026f4d	cmpq	$0x0, 0x150(%rax)
0000000001026f55	sete	0x124(%rax)
0000000001026f5c	addl	$-0x1, 0xadb81(%rip)
0000000001026f63	movq	0x150(%rax), %rcx
0000000001026f6a	movq	%rcx, 0x28(%rsp)
0000000001026f6f	leaq	runtime.extram(%rip), %rdx
0000000001026f76	xchgq	%rcx, (%rdx)
0000000001026f79	movq	%rax, (%rsp)
0000000001026f7d	callq	runtime.msigsave
0000000001026f82	callq	runtime.sigblock
0000000001026f87	movq	0x20(%rsp), %rax
0000000001026f8c	movq	(%rax), %rcx
0000000001026f8f	movq	%rcx, (%rsp)
0000000001026f93	callq	runtime.setg
0000000001026f98	movq	%gs:0x30, %rax
0000000001026fa1	leaq	0x40(%rsp), %rcx
0000000001026fa6	addq	$0x400, %rcx
0000000001026fad	movq	%rcx, 0x8(%rax)
0000000001026fb1	leaq	0x40(%rsp), %rcx
0000000001026fb6	leaq	-0x8000(%rcx), %rdx
0000000001026fbd	movq	%rdx, (%rax)
0000000001026fc0	addq	$-0x7c90, %rcx
0000000001026fc7	movq	%rcx, 0x10(%rax)
0000000001026fcb	callq	runtime.asminit
0000000001026fd0	callq	runtime.minit
0000000001026fd5	movq	0x20(%rsp), %rax
0000000001026fda	movq	0xc0(%rax), %rax
0000000001026fe1	movq	%rax, (%rsp)
0000000001026fe5	movabsq	$0x300000006, %rax
0000000001026fef	movq	%rax, 0x8(%rsp)
0000000001026ff4	callq	runtime.casgstatus
0000000001026ff9	movl	$0xffffffff, %eax
0000000001026ffe	leaq	0x91adb(%rip), %rcx
0000000001027005	lock
0000000001027006	xaddl	%eax, (%rcx)
0000000001027009	movq	0x30(%rsp), %rbp
000000000102700e	addq	$0x38, %rsp
0000000001027012	retq
0000000001027013	movq	0x8febe(%rip), %rax
000000000102701a	movq	runtime.earlycgocallback(%rip), %rcx
0000000001027021	testq	%rax, %rax
0000000001027024	jbe	0x102704d
0000000001027026	movq	%rcx, 0x8(%rsp)
000000000102702b	movq	$0x2, (%rsp)
0000000001027033	movl	%eax, 0x10(%rsp)
0000000001027037	callq	runtime.write
000000000102703c	movl	$0x1, (%rsp)
0000000001027043	callq	runtime.exit
0000000001027048	jmp	0x1026f3a
000000000102704d	callq	runtime.panicindex
0000000001027052	ud2
0000000001027054	int3
0000000001027055	int3
0000000001027056	int3
0000000001027057	int3
0000000001027058	int3
0000000001027059	int3
000000000102705a	int3
000000000102705b	int3
000000000102705c	int3
000000000102705d	int3
000000000102705e	int3
000000000102705f	int3
runtime.newextram:
0000000001027060	movq	%gs:0x30, %rcx
0000000001027069	cmpq	0x10(%rcx), %rsp
000000000102706d	jbe	0x10270e2
000000000102706f	subq	$0x28, %rsp
0000000001027073	movq	%rbp, 0x20(%rsp)
0000000001027078	leaq	0x20(%rsp), %rbp
000000000102707d	xorl	%eax, %eax
000000000102707f	leaq	runtime.extraMWaiters(%rip), %rcx
0000000001027086	xchgl	%eax, (%rcx)
0000000001027088	testl	%eax, %eax
000000000102708a	jbe	0x10270b6
000000000102708c	movl	%eax, 0x14(%rsp)
0000000001027090	xorl	%ecx, %ecx
0000000001027092	jmp	0x10270a8
0000000001027094	movl	%ecx, 0x10(%rsp)
0000000001027098	callq	runtime.oneNewExtraM
000000000102709d	movl	0x10(%rsp), %eax
00000000010270a1	leal	0x1(%rax), %ecx
00000000010270a4	movl	0x14(%rsp), %eax
00000000010270a8	cmpl	%eax, %ecx
00000000010270aa	jb	0x1027094
00000000010270ac	movq	0x20(%rsp), %rbp
00000000010270b1	addq	$0x28, %rsp
00000000010270b5	retq
00000000010270b6	movb	$0x1, (%rsp)
00000000010270ba	callq	runtime.lockextra
00000000010270bf	movq	0x8(%rsp), %rax
00000000010270c4	movq	%rax, 0x18(%rsp)
00000000010270c9	movq	%rax, %rcx
00000000010270cc	leaq	runtime.extram(%rip), %rdx
00000000010270d3	xchgq	%rax, (%rdx)
00000000010270d6	testq	%rcx, %rcx
00000000010270d9	jne	0x10270ac
00000000010270db	callq	runtime.oneNewExtraM
00000000010270e0	jmp	0x10270ac
00000000010270e2	callq	runtime.morestack_noctxt
00000000010270e7	jmp	runtime.newextram
00000000010270ec	int3
00000000010270ed	int3
00000000010270ee	int3
00000000010270ef	int3
runtime.oneNewExtraM:
00000000010270f0	movq	%gs:0x30, %rcx
00000000010270f9	cmpq	0x10(%rcx), %rsp
00000000010270fd	jbe	0x10272c5
0000000001027103	subq	$0x48, %rsp
0000000001027107	movq	%rbp, 0x40(%rsp)
000000000102710c	leaq	0x40(%rsp), %rbp
0000000001027111	xorps	%xmm0, %xmm0
0000000001027114	movups	%xmm0, (%rsp)
0000000001027118	callq	runtime.allocm
000000000102711d	movq	0x10(%rsp), %rax
0000000001027122	movq	%rax, 0x18(%rsp)
0000000001027127	movl	$0x1000, (%rsp)
000000000102712e	callq	runtime.malg
0000000001027133	movq	0x8(%rsp), %rax
0000000001027138	movq	%rax, 0x20(%rsp)
000000000102713d	leaq	0x30bdc(%rip), %rcx
0000000001027144	movq	%rcx, 0x30(%rsp)
0000000001027149	leaq	0x47d38(%rip), %rcx
0000000001027150	movq	%rcx, 0x38(%rsp)
0000000001027155	testb	%al, (%rcx)
0000000001027157	leaq	0x38(%rsp), %rcx
000000000102715c	testb	%al, (%rcx)
000000000102715e	movq	0x47d23(%rip), %rcx
0000000001027165	incq	%rcx
0000000001027168	movq	%rcx, 0x40(%rax)
000000000102716c	movq	0x8(%rax), %rcx
0000000001027170	addq	$-0x20, %rcx
0000000001027174	movq	%rcx, 0x38(%rax)
0000000001027178	movq	$0x0, 0x60(%rax)
0000000001027180	movq	%rax, %rdx
0000000001027183	movq	%rax, 0x48(%rdx)
0000000001027187	movq	0x40(%rdx), %rax
000000000102718b	movq	%rax, 0x78(%rdx)
000000000102718f	movq	%rcx, 0x70(%rdx)
0000000001027193	movq	0x38(%rdx), %rax
0000000001027197	movq	%rax, 0x80(%rdx)
000000000102719e	movb	$0x1, 0xb5(%rdx)
00000000010271a5	movb	$0x1, 0xb4(%rdx)
00000000010271ac	movq	%rdx, (%rsp)
00000000010271b0	movabsq	$0x600000000, %rax
00000000010271ba	movq	%rax, 0x8(%rsp)
00000000010271bf	callq	runtime.casgstatus
00000000010271c4	cmpl	$0x0, 0xada65(%rip)
00000000010271cb	jne	0x10272a5
00000000010271d1	movq	0x18(%rsp), %rcx
00000000010271d6	movq	0x20(%rsp), %rax
00000000010271db	movq	%rcx, 0x30(%rax)
00000000010271df	testb	%al, (%rcx)
00000000010271e1	cmpl	$0x0, 0xada48(%rip)
00000000010271e8	jne	0x1027294
00000000010271ee	movq	%rax, 0xc0(%rcx)
00000000010271f5	incl	0x26c(%rcx)
00000000010271fb	leaq	0x160(%rcx), %rdx
0000000001027202	testb	%al, (%rdx)
0000000001027204	movq	%rax, %rdx
0000000001027207	movq	%rax, 0x160(%rcx)
000000000102720e	leaq	0xd8(%rdx), %rax
0000000001027215	testb	%al, (%rax)
0000000001027217	movq	%rcx, 0xd8(%rdx)
000000000102721e	movl	$0x1, %ecx
0000000001027223	leaq	runtime.sched(%rip), %rbx
000000000102722a	lock
000000000102722b	xaddq	%rcx, (%rbx)
000000000102722f	incq	%rcx
0000000001027232	movq	%rcx, 0x98(%rdx)
0000000001027239	movq	%rdx, (%rsp)
000000000102723d	callq	runtime.allgadd
0000000001027242	movl	$0x1, %eax
0000000001027247	leaq	0x91892(%rip), %rcx
000000000102724e	lock
000000000102724f	xaddl	%eax, (%rcx)
0000000001027252	movb	$0x1, (%rsp)
0000000001027256	callq	runtime.lockextra
000000000102725b	movq	0x18(%rsp), %rax
0000000001027260	leaq	0x150(%rax), %rcx
0000000001027267	testb	%al, (%rcx)
0000000001027269	movq	0x8(%rsp), %rcx
000000000102726e	movq	%rcx, 0x150(%rax)
0000000001027275	incl	runtime.extraMCount(%rip)
000000000102727b	movq	%rax, 0x28(%rsp)
0000000001027280	leaq	runtime.extram(%rip), %rcx
0000000001027287	xchgq	%rax, (%rcx)
000000000102728a	movq	0x40(%rsp), %rbp
000000000102728f	addq	$0x48, %rsp
0000000001027293	retq
0000000001027294	leaq	0xc0(%rcx), %rdi
000000000102729b	callq	runtime.gcWriteBarrier
00000000010272a0	jmp	0x10271f5
00000000010272a5	movq	0x20(%rsp), %rdx
00000000010272aa	leaq	0x30(%rdx), %rdi
00000000010272ae	movq	0x18(%rsp), %rax
00000000010272b3	callq	runtime.gcWriteBarrier
00000000010272b8	movq	%rdx, %rax
00000000010272bb	movq	0x18(%rsp), %rcx
00000000010272c0	jmp	0x10271df
00000000010272c5	callq	runtime.morestack_noctxt
00000000010272ca	jmp	runtime.oneNewExtraM
00000000010272cf	int3
runtime.dropm:
00000000010272d0	movq	%gs:0x30, %rcx
00000000010272d9	cmpq	0x10(%rcx), %rsp
00000000010272dd	jbe	0x10273ab
00000000010272e3	subq	$0x30, %rsp
00000000010272e7	movq	%rbp, 0x28(%rsp)
00000000010272ec	leaq	0x28(%rsp), %rbp
00000000010272f1	movq	%gs:0x30, %rax
00000000010272fa	movq	0x30(%rax), %rax
00000000010272fe	movq	%rax, 0x18(%rsp)
0000000001027303	movq	0xc0(%rax), %rcx
000000000102730a	movq	%rcx, (%rsp)
000000000102730e	movabsq	$0x600000003, %rcx
0000000001027318	movq	%rcx, 0x8(%rsp)
000000000102731d	callq	runtime.casgstatus
0000000001027322	movl	$0x1, %eax
0000000001027327	leaq	0x917b2(%rip), %rcx
000000000102732e	lock
000000000102732f	xaddl	%eax, (%rcx)
0000000001027332	movq	0x18(%rsp), %rax
0000000001027337	movl	0x80(%rax), %ecx
000000000102733d	movl	%ecx, 0x14(%rsp)
0000000001027341	callq	runtime.sigblock
0000000001027346	callq	runtime.unminit
000000000102734b	movb	$0x1, (%rsp)
000000000102734f	callq	runtime.lockextra
0000000001027354	movq	0x8(%rsp), %rax
0000000001027359	incl	runtime.extraMCount(%rip)
000000000102735f	movq	0x18(%rsp), %rcx
0000000001027364	leaq	0x150(%rcx), %rdx
000000000102736b	testb	%al, (%rdx)
000000000102736d	movq	%rax, 0x150(%rcx)
0000000001027374	movq	$0x0, (%rsp)
000000000102737c	callq	runtime.setg
0000000001027381	movq	0x18(%rsp), %rax
0000000001027386	movq	%rax, 0x20(%rsp)
000000000102738b	leaq	runtime.extram(%rip), %rcx
0000000001027392	xchgq	%rax, (%rcx)
0000000001027395	movl	0x14(%rsp), %eax
0000000001027399	movl	%eax, (%rsp)
000000000102739c	callq	runtime.msigrestore
00000000010273a1	movq	0x28(%rsp), %rbp
00000000010273a6	addq	$0x30, %rsp
00000000010273aa	retq
00000000010273ab	callq	runtime.morestack_noctxt
00000000010273b0	jmp	runtime.dropm
00000000010273b5	int3
00000000010273b6	int3
00000000010273b7	int3
00000000010273b8	int3
00000000010273b9	int3
00000000010273ba	int3
00000000010273bb	int3
00000000010273bc	int3
00000000010273bd	int3
00000000010273be	int3
00000000010273bf	int3
runtime.lockextra:
00000000010273c0	subq	$0x18, %rsp
00000000010273c4	movq	%rbp, 0x10(%rsp)
00000000010273c9	leaq	0x10(%rsp), %rbp
00000000010273ce	movzbl	0x20(%rsp), %ecx
00000000010273d3	xorl	%eax, %eax
00000000010273d5	jmp	0x10273de
00000000010273d7	movzbl	0x20(%rsp), %ebx
00000000010273dc	movl	%ebx, %ecx
00000000010273de	movb	%al, 0xf(%rsp)
00000000010273e2	movq	runtime.extram(%rip), %rbx
00000000010273e9	cmpq	$0x1, %rbx
00000000010273ed	je	0x1027464
00000000010273ef	testq	%rbx, %rbx
00000000010273f2	jne	0x10273f8
00000000010273f4	testb	%cl, %cl
00000000010273f6	je	0x102743b
00000000010273f8	movq	%rbx, %rax
00000000010273fb	leaq	runtime.extram(%rip), %rsi
0000000001027402	movl	$0x1, %edi
0000000001027407	lock
0000000001027408	cmpxchgq	%rdi, (%rsi)
000000000102740c	sete	%r8b
0000000001027410	testb	%r8b, %r8b
0000000001027413	jne	0x102742c
0000000001027415	movq	0x47b7c(%rip), %rax
000000000102741c	leaq	0x47b75(%rip), %rdx
0000000001027423	callq	*%rax
0000000001027425	movzbl	0xf(%rsp), %eax
000000000102742a	jmp	0x10273d7
000000000102742c	movq	%rbx, 0x28(%rsp)
0000000001027431	movq	0x10(%rsp), %rbp
0000000001027436	addq	$0x18, %rsp
000000000102743a	retq
000000000102743b	testb	%al, %al
000000000102743d	je	0x1027452
000000000102743f	movl	$0x1, (%rsp)
0000000001027446	callq	runtime.usleep
000000000102744b	movl	$0x1, %eax
0000000001027450	jmp	0x10273d7
0000000001027452	movl	$0x1, %eax
0000000001027457	leaq	runtime.extraMWaiters(%rip), %rdx
000000000102745e	lock
000000000102745f	xaddl	%eax, (%rdx)
0000000001027462	jmp	0x102743f
0000000001027464	movq	0x47b2d(%rip), %rax
000000000102746b	leaq	0x47b26(%rip), %rdx
0000000001027472	callq	*%rax
0000000001027474	movzbl	0xf(%rsp), %eax
0000000001027479	jmp	0x10273d7
000000000102747e	int3
000000000102747f	int3
runtime.newm:
0000000001027480	movq	%gs:0x30, %rcx
0000000001027489	cmpq	0x10(%rcx), %rsp
000000000102748d	jbe	0x10275b9
0000000001027493	subq	$0x28, %rsp
0000000001027497	movq	%rbp, 0x20(%rsp)
000000000102749c	leaq	0x20(%rsp), %rbp
00000000010274a1	movq	0x38(%rsp), %rax
00000000010274a6	movq	%rax, (%rsp)
00000000010274aa	movq	0x30(%rsp), %rcx
00000000010274af	movq	%rcx, 0x8(%rsp)
00000000010274b4	callq	runtime.allocm
00000000010274b9	movq	0x10(%rsp), %rax
00000000010274be	leaq	0xd8(%rax), %rcx
00000000010274c5	testb	%al, (%rcx)
00000000010274c7	movq	0x38(%rsp), %rcx
00000000010274cc	movq	%rcx, 0xd8(%rax)
00000000010274d3	movl	runtime.initSigmask(%rip), %ecx
00000000010274d9	movl	%ecx, 0x80(%rax)
00000000010274df	movq	%gs:0x30, %rcx
00000000010274e8	testq	%rcx, %rcx
00000000010274eb	je	0x1027510
00000000010274ed	movq	0x30(%rcx), %rcx
00000000010274f1	testq	%rcx, %rcx
00000000010274f4	je	0x1027510
00000000010274f6	movq	%rax, 0x18(%rsp)
00000000010274fb	cmpl	$0x0, 0x268(%rcx)
0000000001027502	jne	0x1027523
0000000001027504	addq	$0x115, %rcx
000000000102750b	cmpb	$0x0, (%rcx)
000000000102750e	jne	0x1027523
0000000001027510	movq	%rax, (%rsp)
0000000001027514	callq	runtime.newm1
0000000001027519	movq	0x20(%rsp), %rbp
000000000102751e	addq	$0x28, %rsp
0000000001027522	retq
0000000001027523	leaq	runtime.newmHandoff(%rip), %rax
000000000102752a	movq	%rax, (%rsp)
000000000102752e	callq	runtime.lock
0000000001027533	cmpl	$0x0, 0xad746(%rip)
000000000102753a	je	0x102759e
000000000102753c	movq	0xad725(%rip), %rax
0000000001027543	movq	0x18(%rsp), %rcx
0000000001027548	movq	%rax, 0x150(%rcx)
000000000102754f	leaq	0xad712(%rip), %rax
0000000001027556	testb	%al, (%rax)
0000000001027558	movq	%rcx, 0xad709(%rip)
000000000102755f	leaq	0xad70a(%rip), %rax
0000000001027566	cmpb	$0x0, (%rax)
0000000001027569	jne	0x1027585
000000000102756b	leaq	runtime.newmHandoff(%rip), %rax
0000000001027572	movq	%rax, (%rsp)
0000000001027576	callq	runtime.unlock
000000000102757b	movq	0x20(%rsp), %rbp
0000000001027580	addq	$0x28, %rsp
0000000001027584	retq
0000000001027585	movb	$0x0, 0xad6e4(%rip)
000000000102758c	leaq	0xad6e5(%rip), %rax
0000000001027593	movq	%rax, (%rsp)
0000000001027597	callq	runtime.notewakeup
000000000102759c	jmp	0x102756b
000000000102759e	leaq	0x46d0a(%rip), %rax
00000000010275a5	movq	%rax, (%rsp)
00000000010275a9	movq	$0x2a, 0x8(%rsp)
00000000010275b2	callq	runtime.throw
00000000010275b7	ud2
00000000010275b9	callq	runtime.morestack_noctxt
00000000010275be	jmp	runtime.newm
00000000010275c3	int3
00000000010275c4	int3
00000000010275c5	int3
00000000010275c6	int3
00000000010275c7	int3
00000000010275c8	int3
00000000010275c9	int3
00000000010275ca	int3
00000000010275cb	int3
00000000010275cc	int3
00000000010275cd	int3
00000000010275ce	int3
00000000010275cf	int3
runtime.newm1:
00000000010275d0	movq	%gs:0x30, %rcx
00000000010275d9	cmpq	0x10(%rcx), %rsp
00000000010275dd	jbe	0x1027703
00000000010275e3	subq	$0x48, %rsp
00000000010275e7	movq	%rbp, 0x40(%rsp)
00000000010275ec	leaq	0x40(%rsp), %rbp
00000000010275f1	leaq	runtime.iscgo(%rip), %rax
00000000010275f8	cmpb	$0x0, (%rax)
00000000010275fb	je	0x10276b0
0000000001027601	movq	$0x0, 0x28(%rsp)
000000000102760a	xorps	%xmm0, %xmm0
000000000102760d	movups	%xmm0, 0x30(%rsp)
0000000001027612	cmpq	$0x0, 0x9113e(%rip)
000000000102761a	je	0x10276e8
0000000001027620	leaq	0x28(%rsp), %rax
0000000001027625	testb	%al, (%rax)
0000000001027627	movq	0x50(%rsp), %rax
000000000102762c	movq	(%rax), %rcx
000000000102762f	movq	%rcx, 0x28(%rsp)
0000000001027634	addq	$0x88, %rax
000000000102763a	movq	%rax, 0x30(%rsp)
000000000102763f	leaq	0x3003a(%rip), %rax
0000000001027646	movq	%rax, 0x18(%rsp)
000000000102764b	leaq	0x47916(%rip), %rax
0000000001027652	movq	%rax, 0x20(%rsp)
0000000001027657	testb	%al, (%rax)
0000000001027659	leaq	0x20(%rsp), %rax
000000000102765e	testb	%al, (%rax)
0000000001027660	movq	0x47901(%rip), %rax
0000000001027667	movq	%rax, 0x38(%rsp)
000000000102766c	leaq	runtime.execLock(%rip), %rax
0000000001027673	movq	%rax, (%rsp)
0000000001027677	callq	"runtime.(*rwmutex).rlock"
000000000102767c	movq	__cgo_thread_start(%rip), %rax
0000000001027683	movq	%rax, (%rsp)
0000000001027687	leaq	0x28(%rsp), %rax
000000000102768c	movq	%rax, 0x8(%rsp)
0000000001027691	callq	runtime.asmcgocall
0000000001027696	leaq	runtime.execLock(%rip), %rax
000000000102769d	movq	%rax, (%rsp)
00000000010276a1	callq	"runtime.(*rwmutex).runlock"
00000000010276a6	movq	0x40(%rsp), %rbp
00000000010276ab	addq	$0x48, %rsp
00000000010276af	retq
00000000010276b0	leaq	runtime.execLock(%rip), %rax
00000000010276b7	movq	%rax, (%rsp)
00000000010276bb	callq	"runtime.(*rwmutex).rlock"
00000000010276c0	movq	0x50(%rsp), %rax
00000000010276c5	movq	%rax, (%rsp)
00000000010276c9	callq	runtime.newosproc
00000000010276ce	leaq	runtime.execLock(%rip), %rax
00000000010276d5	movq	%rax, (%rsp)
00000000010276d9	callq	"runtime.(*rwmutex).runlock"
00000000010276de	movq	0x40(%rsp), %rbp
00000000010276e3	addq	$0x48, %rsp
00000000010276e7	retq
00000000010276e8	leaq	0x44fdd(%rip), %rax
00000000010276ef	movq	%rax, (%rsp)
00000000010276f3	movq	$0x19, 0x8(%rsp)
00000000010276fc	callq	runtime.throw
0000000001027701	ud2
0000000001027703	callq	runtime.morestack_noctxt
0000000001027708	jmp	runtime.newm1
000000000102770d	int3
000000000102770e	int3
000000000102770f	int3
runtime.startTemplateThread:
0000000001027710	movq	%gs:0x30, %rcx
0000000001027719	cmpq	0x10(%rcx), %rsp
000000000102771d	jbe	0x1027773
000000000102771f	subq	$0x18, %rsp
0000000001027723	movq	%rbp, 0x10(%rsp)
0000000001027728	leaq	0x10(%rsp), %rbp
000000000102772d	xorl	%eax, %eax
000000000102772f	leaq	0xad54a(%rip), %rcx
0000000001027736	movl	$0x1, %edx
000000000102773b	lock
000000000102773c	cmpxchgl	%edx, (%rcx)
000000000102773f	sete	%cl
0000000001027742	testb	%cl, %cl
0000000001027744	je	0x1027769
0000000001027746	leaq	0x4796b(%rip), %rax
000000000102774d	movq	%rax, (%rsp)
0000000001027751	movq	$0x0, 0x8(%rsp)
000000000102775a	callq	runtime.newm
000000000102775f	movq	0x10(%rsp), %rbp
0000000001027764	addq	$0x18, %rsp
0000000001027768	retq
0000000001027769	movq	0x10(%rsp), %rbp
000000000102776e	addq	$0x18, %rsp
0000000001027772	retq
0000000001027773	callq	runtime.morestack_noctxt
0000000001027778	jmp	runtime.startTemplateThread
000000000102777a	int3
000000000102777b	int3
000000000102777c	int3
000000000102777d	int3
000000000102777e	int3
000000000102777f	int3
runtime.templateThread:
0000000001027780	movq	%gs:0x30, %rcx
0000000001027789	cmpq	0x10(%rcx), %rsp
000000000102778d	jbe	0x102788b
0000000001027793	subq	$0x18, %rsp
0000000001027797	movq	%rbp, 0x10(%rsp)
000000000102779c	leaq	0x10(%rsp), %rbp
00000000010277a1	leaq	0x91308(%rip), %rax
00000000010277a8	movq	%rax, (%rsp)
00000000010277ac	callq	runtime.lock
00000000010277b1	incl	0x9131d(%rip)
00000000010277b7	callq	runtime.checkdead
00000000010277bc	leaq	0x912ed(%rip), %rax
00000000010277c3	movq	%rax, (%rsp)
00000000010277c7	callq	runtime.unlock
00000000010277cc	jmp	0x1027879
00000000010277d1	movq	0x150(%rax), %rcx
00000000010277d8	movq	%rcx, 0x8(%rsp)
00000000010277dd	movq	$0x0, 0x150(%rax)
00000000010277e8	movq	%rax, (%rsp)
00000000010277ec	callq	runtime.newm1
00000000010277f1	movq	0x8(%rsp), %rax
00000000010277f6	testq	%rax, %rax
00000000010277f9	jne	0x10277d1
00000000010277fb	leaq	runtime.newmHandoff(%rip), %rax
0000000001027802	movq	%rax, (%rsp)
0000000001027806	callq	runtime.lock
000000000102780b	movq	0xad456(%rip), %rax
0000000001027812	testq	%rax, %rax
0000000001027815	je	0x102783e
0000000001027817	movq	%rax, 0x8(%rsp)
000000000102781c	movq	$0x0, 0xad441(%rip)
0000000001027827	leaq	runtime.newmHandoff(%rip), %rcx
000000000102782e	movq	%rcx, (%rsp)
0000000001027832	callq	runtime.unlock
0000000001027837	movq	0x8(%rsp), %rax
000000000102783c	jmp	0x10277f6
000000000102783e	movb	$0x1, 0xad42b(%rip)
0000000001027845	leaq	0xad42c(%rip), %rax
000000000102784c	testb	%al, (%rax)
000000000102784e	movq	$0x0, 0xad41f(%rip)
0000000001027859	leaq	runtime.newmHandoff(%rip), %rcx
0000000001027860	movq	%rcx, (%rsp)
0000000001027864	callq	runtime.unlock
0000000001027869	leaq	0xad408(%rip), %rax
0000000001027870	movq	%rax, (%rsp)
0000000001027874	callq	runtime.notesleep
0000000001027879	leaq	runtime.newmHandoff(%rip), %rax
0000000001027880	movq	%rax, (%rsp)
0000000001027884	callq	runtime.lock
0000000001027889	jmp	0x102780b
000000000102788b	callq	runtime.morestack_noctxt
0000000001027890	jmp	runtime.templateThread
0000000001027895	int3
0000000001027896	int3
0000000001027897	int3
0000000001027898	int3
0000000001027899	int3
000000000102789a	int3
000000000102789b	int3
000000000102789c	int3
000000000102789d	int3
000000000102789e	int3
000000000102789f	int3
runtime.stopm:
00000000010278a0	movq	%gs:0x30, %rcx
00000000010278a9	cmpq	0x10(%rcx), %rsp
00000000010278ad	jbe	0x1027a30
00000000010278b3	subq	$0x20, %rsp
00000000010278b7	movq	%rbp, 0x18(%rsp)
00000000010278bc	leaq	0x18(%rsp), %rbp
00000000010278c1	movq	%gs:0x30, %rax
00000000010278ca	movq	0x30(%rax), %rcx
00000000010278ce	cmpl	$0x0, 0x100(%rcx)
00000000010278d5	jne	0x1027a15
00000000010278db	cmpq	$0x0, 0xd0(%rcx)
00000000010278e3	jne	0x10279fa
00000000010278e9	addq	$0x110, %rcx
00000000010278f0	cmpb	$0x0, (%rcx)
00000000010278f3	jne	0x10279df
00000000010278f9	movq	%rax, 0x10(%rsp)
00000000010278fe	jmp	0x1027936
0000000001027900	callq	runtime.gchelper
0000000001027905	movq	0x10(%rsp), %rax
000000000102790a	movq	0x30(%rax), %rcx
000000000102790e	movl	$0x0, 0x10c(%rcx)
0000000001027918	movq	0x30(%rax), %rcx
000000000102791c	movq	$0x0, 0x158(%rcx)
0000000001027927	movq	0x30(%rax), %rcx
000000000102792b	movq	$0x0, 0xd0(%rcx)
0000000001027936	leaq	0x91173(%rip), %rax
000000000102793d	movq	%rax, (%rsp)
0000000001027941	callq	runtime.lock
0000000001027946	movq	0x10(%rsp), %rax
000000000102794b	movq	0x30(%rax), %rcx
000000000102794f	movq	%rcx, (%rsp)
0000000001027953	callq	runtime.mput
0000000001027958	leaq	0x91151(%rip), %rax
000000000102795f	movq	%rax, (%rsp)
0000000001027963	callq	runtime.unlock
0000000001027968	movq	0x10(%rsp), %rax
000000000102796d	movq	0x30(%rax), %rcx
0000000001027971	testb	%al, (%rcx)
0000000001027973	addq	$0x140, %rcx
000000000102797a	movq	%rcx, (%rsp)
000000000102797e	callq	runtime.notesleep
0000000001027983	movq	0x10(%rsp), %rax
0000000001027988	movq	0x30(%rax), %rcx
000000000102798c	leaq	0x140(%rcx), %rdx
0000000001027993	testb	%al, (%rdx)
0000000001027995	movq	$0x0, 0x140(%rcx)
00000000010279a0	movq	0x30(%rax), %rcx
00000000010279a4	cmpl	$0x0, 0x10c(%rcx)
00000000010279ab	jne	0x1027900
00000000010279b1	movq	0xd8(%rcx), %rax
00000000010279b8	movq	%rax, (%rsp)
00000000010279bc	callq	runtime.acquirep
00000000010279c1	movq	0x10(%rsp), %rax
00000000010279c6	movq	0x30(%rax), %rax
00000000010279ca	movq	$0x0, 0xd8(%rax)
00000000010279d5	movq	0x18(%rsp), %rbp
00000000010279da	addq	$0x20, %rsp
00000000010279de	retq
00000000010279df	leaq	0x43c3a(%rip), %rax
00000000010279e6	movq	%rax, (%rsp)
00000000010279ea	movq	$0xe, 0x8(%rsp)
00000000010279f3	callq	runtime.throw
00000000010279f8	ud2
00000000010279fa	leaq	0x43d1a(%rip), %rax
0000000001027a01	movq	%rax, (%rsp)
0000000001027a05	movq	$0xf, 0x8(%rsp)
0000000001027a0e	callq	runtime.throw
0000000001027a13	ud2
0000000001027a15	leaq	0x442d2(%rip), %rax
0000000001027a1c	movq	%rax, (%rsp)
0000000001027a20	movq	$0x13, 0x8(%rsp)
0000000001027a29	callq	runtime.throw
0000000001027a2e	ud2
0000000001027a30	callq	runtime.morestack_noctxt
0000000001027a35	jmp	runtime.stopm
0000000001027a3a	int3
0000000001027a3b	int3
0000000001027a3c	int3
0000000001027a3d	int3
0000000001027a3e	int3
0000000001027a3f	int3
runtime.mspinning:
0000000001027a40	movq	%gs:0x30, %rax
0000000001027a49	movq	0x30(%rax), %rax
0000000001027a4d	movb	$0x1, 0x110(%rax)
0000000001027a54	retq
0000000001027a55	int3
0000000001027a56	int3
0000000001027a57	int3
0000000001027a58	int3
0000000001027a59	int3
0000000001027a5a	int3
0000000001027a5b	int3
0000000001027a5c	int3
0000000001027a5d	int3
0000000001027a5e	int3
0000000001027a5f	int3
runtime.startm:
0000000001027a60	movq	%gs:0x30, %rcx
0000000001027a69	cmpq	0x10(%rcx), %rsp
0000000001027a6d	jbe	0x1027c78
0000000001027a73	subq	$0x28, %rsp
0000000001027a77	movq	%rbp, 0x20(%rsp)
0000000001027a7c	leaq	0x20(%rsp), %rbp
0000000001027a81	leaq	0x91028(%rip), %rax
0000000001027a88	movq	%rax, (%rsp)
0000000001027a8c	callq	runtime.lock
0000000001027a91	movq	0x30(%rsp), %rax
0000000001027a96	testq	%rax, %rax
0000000001027a99	je	0x1027ba3
0000000001027a9f	movq	%rax, 0x10(%rsp)
0000000001027aa4	movq	0x9100d(%rip), %rcx
0000000001027aab	movq	%rcx, 0x18(%rsp)
0000000001027ab0	testq	%rcx, %rcx
0000000001027ab3	je	0x1027aca
0000000001027ab5	movq	0x150(%rcx), %rdx
0000000001027abc	movq	%rdx, 0x90ff5(%rip)
0000000001027ac3	addl	$-0x1, 0x90ff6(%rip)
0000000001027aca	leaq	0x90fdf(%rip), %rax
0000000001027ad1	movq	%rax, (%rsp)
0000000001027ad5	callq	runtime.unlock
0000000001027ada	movq	0x18(%rsp), %rax
0000000001027adf	testq	%rax, %rax
0000000001027ae2	je	0x1027b6b
0000000001027ae8	leaq	0x110(%rax), %rcx
0000000001027aef	cmpb	$0x0, (%rcx)
0000000001027af2	jne	0x1027c42
0000000001027af8	cmpq	$0x0, 0xd8(%rax)
0000000001027b00	jne	0x1027c27
0000000001027b06	movzbl	0x38(%rsp), %ecx
0000000001027b0b	testb	%cl, %cl
0000000001027b0d	jne	0x1027b43
0000000001027b0f	movb	%cl, 0x110(%rax)
0000000001027b15	leaq	0xd8(%rax), %rcx
0000000001027b1c	testb	%al, (%rcx)
0000000001027b1e	movq	0x10(%rsp), %rcx
0000000001027b23	movq	%rcx, 0xd8(%rax)
0000000001027b2a	addq	$0x140, %rax
0000000001027b30	movq	%rax, (%rsp)
0000000001027b34	callq	runtime.notewakeup
0000000001027b39	movq	0x20(%rsp), %rbp
0000000001027b3e	addq	$0x28, %rsp
0000000001027b42	retq
0000000001027b43	movq	0x10(%rsp), %rax
0000000001027b48	movq	%rax, (%rsp)
0000000001027b4c	callq	runtime.runqempty
0000000001027b51	leaq	0x8(%rsp), %rax
0000000001027b56	cmpb	$0x0, (%rax)
0000000001027b59	je	0x1027c0c
0000000001027b5f	movq	0x18(%rsp), %rax
0000000001027b64	movzbl	0x38(%rsp), %ecx
0000000001027b69	jmp	0x1027b0f
0000000001027b6b	movzbl	0x38(%rsp), %eax
0000000001027b70	movzbl	%al, %eax
0000000001027b73	testq	%rax, %rax
0000000001027b76	movl	$0x0, %eax
0000000001027b7b	leaq	0x473d6(%rip), %rcx
0000000001027b82	cmovneq	%rcx, %rax
0000000001027b86	movq	%rax, (%rsp)
0000000001027b8a	movq	0x10(%rsp), %rax
0000000001027b8f	movq	%rax, 0x8(%rsp)
0000000001027b94	callq	runtime.newm
0000000001027b99	movq	0x20(%rsp), %rbp
0000000001027b9e	addq	$0x28, %rsp
0000000001027ba2	retq
0000000001027ba3	movq	0x90f3e(%rip), %rax
0000000001027baa	testq	%rax, %rax
0000000001027bad	je	0x1027bcd
0000000001027baf	movq	0x10(%rax), %rcx
0000000001027bb3	movq	%rcx, 0x90f2e(%rip)
0000000001027bba	movl	$0xffffffff, %ecx
0000000001027bbf	leaq	0x90f2a(%rip), %rdx
0000000001027bc6	lock
0000000001027bc7	xaddl	%ecx, (%rdx)
0000000001027bca	testq	%rax, %rax
0000000001027bcd	jne	0x1027a9f
0000000001027bd3	leaq	0x90ed6(%rip), %rax
0000000001027bda	movq	%rax, (%rsp)
0000000001027bde	callq	runtime.unlock
0000000001027be3	movzbl	0x38(%rsp), %eax
0000000001027be8	testb	%al, %al
0000000001027bea	je	0x1027c02
0000000001027bec	movl	$0xffffffff, %eax
0000000001027bf1	leaq	0x90efc(%rip), %rcx
0000000001027bf8	lock
0000000001027bf9	xaddl	%eax, (%rcx)
0000000001027bfc	decl	%eax
0000000001027bfe	testl	%eax, %eax
0000000001027c00	jl	0x1027c5d
0000000001027c02	movq	0x20(%rsp), %rbp
0000000001027c07	addq	$0x28, %rsp
0000000001027c0b	retq
0000000001027c0c	leaq	0x44c62(%rip), %rax
0000000001027c13	movq	%rax, (%rsp)
0000000001027c17	movq	$0x19, 0x8(%rsp)
0000000001027c20	callq	runtime.throw
0000000001027c25	ud2
0000000001027c27	leaq	0x43ade(%rip), %rax
0000000001027c2e	movq	%rax, (%rsp)
0000000001027c32	movq	$0xf, 0x8(%rsp)
0000000001027c3b	callq	runtime.throw
0000000001027c40	ud2
0000000001027c42	leaq	0x4445e(%rip), %rax
0000000001027c49	movq	%rax, (%rsp)
0000000001027c4d	movq	$0x15, 0x8(%rsp)
0000000001027c56	callq	runtime.throw
0000000001027c5b	ud2
0000000001027c5d	leaq	0x44fe6(%rip), %rax
0000000001027c64	movq	%rax, (%rsp)
0000000001027c68	movq	$0x1b, 0x8(%rsp)
0000000001027c71	callq	runtime.throw
0000000001027c76	ud2
0000000001027c78	callq	runtime.morestack_noctxt
0000000001027c7d	jmp	runtime.startm
0000000001027c82	int3
0000000001027c83	int3
0000000001027c84	int3
0000000001027c85	int3
0000000001027c86	int3
0000000001027c87	int3
0000000001027c88	int3
0000000001027c89	int3
0000000001027c8a	int3
0000000001027c8b	int3
0000000001027c8c	int3
0000000001027c8d	int3
0000000001027c8e	int3
0000000001027c8f	int3
runtime.handoffp:
0000000001027c90	movq	%gs:0x30, %rcx
0000000001027c99	cmpq	0x10(%rcx), %rsp
0000000001027c9d	jbe	0x1027f76
0000000001027ca3	subq	$0x18, %rsp
0000000001027ca7	movq	%rbp, 0x10(%rsp)
0000000001027cac	leaq	0x10(%rsp), %rbp
0000000001027cb1	movq	0x20(%rsp), %rax
0000000001027cb6	movq	%rax, (%rsp)
0000000001027cba	callq	runtime.runqempty
0000000001027cbf	leaq	0x8(%rsp), %rax
0000000001027cc4	cmpb	$0x0, (%rax)
0000000001027cc7	je	0x1027cd2
0000000001027cc9	cmpl	$0x0, 0x90e38(%rip)
0000000001027cd0	je	0x1027cef
0000000001027cd2	movq	0x20(%rsp), %rax
0000000001027cd7	movq	%rax, (%rsp)
0000000001027cdb	movb	$0x0, 0x8(%rsp)
0000000001027ce0	callq	runtime.startm
0000000001027ce5	movq	0x10(%rsp), %rbp
0000000001027cea	addq	$0x18, %rsp
0000000001027cee	retq
0000000001027cef	cmpl	$0x0, 0xacdfa(%rip)
0000000001027cf6	je	0x1027f6c
0000000001027cfc	movq	0x20(%rsp), %rcx
0000000001027d01	testq	%rcx, %rcx
0000000001027d04	je	0x1027d41
0000000001027d06	leaq	0x1270(%rcx), %rdx
0000000001027d0d	testb	%al, (%rdx)
0000000001027d0f	movq	0x1270(%rcx), %rdx
0000000001027d16	testq	%rdx, %rdx
0000000001027d19	je	0x1027f62
0000000001027d1f	cmpq	$0x0, 0x10(%rdx)
0000000001027d24	jne	0x1027f5b
0000000001027d2a	movq	0x1278(%rcx), %rdx
0000000001027d31	cmpq	$0x0, 0x10(%rdx)
0000000001027d36	sete	%dl
0000000001027d39	testb	%dl, %dl
0000000001027d3b	je	0x1027f51
0000000001027d41	movq	runtime.work(%rip), %rdx
0000000001027d48	testq	%rdx, %rdx
0000000001027d4b	jne	0x1027f47
0000000001027d51	movl	0x91095(%rip), %edx
0000000001027d57	cmpl	%edx, 0x9108b(%rip)
0000000001027d5d	jae	0x1027f40
0000000001027d63	movl	$0x1, %eax
0000000001027d68	testb	%al, %al
0000000001027d6a	jne	0x1027f28
0000000001027d70	movl	0x90d7e(%rip), %edx
0000000001027d76	movl	0x90d74(%rip), %ebx
0000000001027d7c	addl	%ebx, %edx
0000000001027d7e	testl	%edx, %edx
0000000001027d80	jne	0x1027d9f
0000000001027d82	xorl	%eax, %eax
0000000001027d84	leaq	0x90d69(%rip), %rdx
0000000001027d8b	movl	$0x1, %ebx
0000000001027d90	lock
0000000001027d91	cmpxchgl	%ebx, (%rdx)
0000000001027d94	sete	%dl
0000000001027d97	testb	%dl, %dl
0000000001027d99	jne	0x1027f10
0000000001027d9f	leaq	0x90d0a(%rip), %rax
0000000001027da6	movq	%rax, (%rsp)
0000000001027daa	callq	runtime.lock
0000000001027daf	cmpl	$0x0, 0x90dc2(%rip)
0000000001027db6	je	0x1027e04
0000000001027db8	movq	0x20(%rsp), %rax
0000000001027dbd	movl	$0x3, 0xc(%rax)
0000000001027dc4	movl	0x90db2(%rip), %eax
0000000001027dca	leal	-0x1(%rax), %ecx
0000000001027dcd	movl	%ecx, 0x90da9(%rip)
0000000001027dd3	cmpl	$0x1, %eax
0000000001027dd6	je	0x1027df2
0000000001027dd8	leaq	0x90cd1(%rip), %rax
0000000001027ddf	movq	%rax, (%rsp)
0000000001027de3	callq	runtime.unlock
0000000001027de8	movq	0x10(%rsp), %rbp
0000000001027ded	addq	$0x18, %rsp
0000000001027df1	retq
0000000001027df2	leaq	0x90d87(%rip), %rax
0000000001027df9	movq	%rax, (%rsp)
0000000001027dfd	callq	runtime.notewakeup
0000000001027e02	jmp	0x1027dd8
0000000001027e04	movq	0x20(%rsp), %rcx
0000000001027e09	testb	%al, (%rcx)
0000000001027e0b	cmpl	$0x0, 0x22a0(%rcx)
0000000001027e12	je	0x1027e2e
0000000001027e14	movl	$0x1, %eax
0000000001027e19	xorl	%ebx, %ebx
0000000001027e1b	lock
0000000001027e1c	cmpxchgl	%ebx, 0x22a0(%rcx)
0000000001027e23	sete	%bl
0000000001027e26	testb	%bl, %bl
0000000001027e28	jne	0x1027ed0
0000000001027e2e	cmpl	$0x0, 0x90cd3(%rip)
0000000001027e35	jne	0x1027ea3
0000000001027e37	movl	runtime.gomaxprocs(%rip), %eax
0000000001027e3d	decl	%eax
0000000001027e3f	cmpl	%eax, 0x90cab(%rip)
0000000001027e45	jne	0x1027e53
0000000001027e47	movq	0x90c5a(%rip), %rax
0000000001027e4e	testq	%rax, %rax
0000000001027e51	jne	0x1027e76
0000000001027e53	movq	%rcx, (%rsp)
0000000001027e57	callq	runtime.pidleput
0000000001027e5c	leaq	0x90c4d(%rip), %rax
0000000001027e63	movq	%rax, (%rsp)
0000000001027e67	callq	runtime.unlock
0000000001027e6c	movq	0x10(%rsp), %rbp
0000000001027e71	addq	$0x18, %rsp
0000000001027e75	retq
0000000001027e76	leaq	0x90c33(%rip), %rax
0000000001027e7d	movq	%rax, (%rsp)
0000000001027e81	callq	runtime.unlock
0000000001027e86	movq	0x20(%rsp), %rax
0000000001027e8b	movq	%rax, (%rsp)
0000000001027e8f	movb	$0x0, 0x8(%rsp)
0000000001027e94	callq	runtime.startm
0000000001027e99	movq	0x10(%rsp), %rbp
0000000001027e9e	addq	$0x18, %rsp
0000000001027ea2	retq
0000000001027ea3	leaq	0x90c06(%rip), %rax
0000000001027eaa	movq	%rax, (%rsp)
0000000001027eae	callq	runtime.unlock
0000000001027eb3	movq	0x20(%rsp), %rax
0000000001027eb8	movq	%rax, (%rsp)
0000000001027ebc	movb	$0x0, 0x8(%rsp)
0000000001027ec1	callq	runtime.startm
0000000001027ec6	movq	0x10(%rsp), %rbp
0000000001027ecb	addq	$0x18, %rsp
0000000001027ecf	retq
0000000001027ed0	movq	0x90cc1(%rip), %rdx
0000000001027ed7	movq	%rcx, (%rsp)
0000000001027edb	movq	(%rdx), %rax
0000000001027ede	callq	*%rax
0000000001027ee0	movl	0x90cba(%rip), %eax
0000000001027ee6	leal	-0x1(%rax), %ecx
0000000001027ee9	movl	%ecx, 0x90cb1(%rip)
0000000001027eef	cmpl	$0x1, %eax
0000000001027ef2	je	0x1027efe
0000000001027ef4	movq	0x20(%rsp), %rcx
0000000001027ef9	jmp	0x1027e2e
0000000001027efe	leaq	0x90ca3(%rip), %rax
0000000001027f05	movq	%rax, (%rsp)
0000000001027f09	callq	runtime.notewakeup
0000000001027f0e	jmp	0x1027ef4
0000000001027f10	movq	%rcx, (%rsp)
0000000001027f14	movb	$0x1, 0x8(%rsp)
0000000001027f19	callq	runtime.startm
0000000001027f1e	movq	0x10(%rsp), %rbp
0000000001027f23	addq	$0x18, %rsp
0000000001027f27	retq
0000000001027f28	movq	%rcx, (%rsp)
0000000001027f2c	movb	$0x0, 0x8(%rsp)
0000000001027f31	callq	runtime.startm
0000000001027f36	movq	0x10(%rsp), %rbp
0000000001027f3b	addq	$0x18, %rsp
0000000001027f3f	retq
0000000001027f40	xorl	%eax, %eax
0000000001027f42	jmp	0x1027d68
0000000001027f47	movl	$0x1, %eax
0000000001027f4c	jmp	0x1027d68
0000000001027f51	movl	$0x1, %eax
0000000001027f56	jmp	0x1027d68
0000000001027f5b	xorl	%edx, %edx
0000000001027f5d	jmp	0x1027d39
0000000001027f62	movl	$0x1, %edx
0000000001027f67	jmp	0x1027d39
0000000001027f6c	movq	0x20(%rsp), %rcx
0000000001027f71	jmp	0x1027d70
0000000001027f76	callq	runtime.morestack_noctxt
0000000001027f7b	jmp	runtime.handoffp
runtime.wakep:
0000000001027f80	movq	%gs:0x30, %rcx
0000000001027f89	cmpq	0x10(%rcx), %rsp
0000000001027f8d	jbe	0x1027fdc
0000000001027f8f	subq	$0x18, %rsp
0000000001027f93	movq	%rbp, 0x10(%rsp)
0000000001027f98	leaq	0x10(%rsp), %rbp
0000000001027f9d	xorl	%eax, %eax
0000000001027f9f	leaq	0x90b4e(%rip), %rcx
0000000001027fa6	movl	$0x1, %edx
0000000001027fab	lock
0000000001027fac	cmpxchgl	%edx, (%rcx)
0000000001027faf	sete	%cl
0000000001027fb2	testb	%cl, %cl
0000000001027fb4	je	0x1027fd2
0000000001027fb6	movq	$0x0, (%rsp)
0000000001027fbe	movb	$0x1, 0x8(%rsp)
0000000001027fc3	callq	runtime.startm
0000000001027fc8	movq	0x10(%rsp), %rbp
0000000001027fcd	addq	$0x18, %rsp
0000000001027fd1	retq
0000000001027fd2	movq	0x10(%rsp), %rbp
0000000001027fd7	addq	$0x18, %rsp
0000000001027fdb	retq
0000000001027fdc	callq	runtime.morestack_noctxt
0000000001027fe1	jmp	runtime.wakep
0000000001027fe3	int3
0000000001027fe4	int3
0000000001027fe5	int3
0000000001027fe6	int3
0000000001027fe7	int3
0000000001027fe8	int3
0000000001027fe9	int3
0000000001027fea	int3
0000000001027feb	int3
0000000001027fec	int3
0000000001027fed	int3
0000000001027fee	int3
0000000001027fef	int3
runtime.stoplockedm:
0000000001027ff0	movq	%gs:0x30, %rcx
0000000001027ff9	cmpq	0x10(%rcx), %rsp
0000000001027ffd	jbe	0x1028299
0000000001028003	subq	$0x38, %rsp
0000000001028007	movq	%rbp, 0x30(%rsp)
000000000102800c	leaq	0x30(%rsp), %rbp
0000000001028011	movq	%gs:0x30, %rax
000000000102801a	movq	0x30(%rax), %rcx
000000000102801e	movq	0x160(%rcx), %rdx
0000000001028025	testq	%rdx, %rdx
0000000001028028	je	0x102827e
000000000102802e	movq	0xd8(%rdx), %rdx
0000000001028035	cmpq	%rcx, %rdx
0000000001028038	jne	0x102827e
000000000102803e	movq	%rax, 0x28(%rsp)
0000000001028043	cmpq	$0x0, 0xd0(%rcx)
000000000102804b	jne	0x10280e3
0000000001028051	movl	$0x1, (%rsp)
0000000001028058	callq	runtime.incidlelocked
000000000102805d	movq	0x28(%rsp), %rax
0000000001028062	movq	0x30(%rax), %rcx
0000000001028066	testb	%al, (%rcx)
0000000001028068	testb	%al, (%rax)
000000000102806a	addq	$0x140, %rcx
0000000001028071	movq	%rcx, (%rsp)
0000000001028075	callq	runtime.notesleep
000000000102807a	movq	0x28(%rsp), %rax
000000000102807f	movq	0x30(%rax), %rcx
0000000001028083	leaq	0x140(%rcx), %rdx
000000000102808a	testb	%al, (%rdx)
000000000102808c	movq	$0x0, 0x140(%rcx)
0000000001028097	movq	0x30(%rax), %rcx
000000000102809b	movq	0x160(%rcx), %rcx
00000000010280a2	movl	0x90(%rcx), %ecx
00000000010280a8	btrl	$0xc, %ecx
00000000010280ac	cmpl	$0x1, %ecx
00000000010280af	jne	0x10280f2
00000000010280b1	movq	0x30(%rax), %rcx
00000000010280b5	movq	0xd8(%rcx), %rcx
00000000010280bc	movq	%rcx, (%rsp)
00000000010280c0	callq	runtime.acquirep
00000000010280c5	movq	0x28(%rsp), %rax
00000000010280ca	movq	0x30(%rax), %rax
00000000010280ce	movq	$0x0, 0xd8(%rax)
00000000010280d9	movq	0x30(%rsp), %rbp
00000000010280de	addq	$0x38, %rsp
00000000010280e2	retq
00000000010280e3	callq	runtime.releasep
00000000010280e8	callq	runtime.handoffp
00000000010280ed	jmp	0x1028051
00000000010280f2	callq	runtime.printlock
00000000010280f7	leaq	0x46ab9(%rip), %rax
00000000010280fe	movq	%rax, (%rsp)
0000000001028102	movq	$0x39, 0x8(%rsp)
000000000102810b	callq	runtime.printstring
0000000001028110	callq	runtime.printunlock
0000000001028115	movq	%gs:0x30, %rax
000000000102811e	movq	%rax, 0x20(%rsp)
0000000001028123	movq	0x28(%rsp), %rcx
0000000001028128	movl	0x90(%rcx), %edx
000000000102812e	movl	%edx, 0x14(%rsp)
0000000001028132	movq	0x98(%rcx), %rbx
0000000001028139	movq	%rbx, 0x18(%rsp)
000000000102813e	callq	runtime.printlock
0000000001028143	leaq	0x43740(%rip), %rax
000000000102814a	movq	%rax, (%rsp)
000000000102814e	movq	$0x10, 0x8(%rsp)
0000000001028157	callq	runtime.printstring
000000000102815c	movq	0x28(%rsp), %rax
0000000001028161	movq	%rax, (%rsp)
0000000001028165	callq	runtime.printpointer
000000000102816a	leaq	0x42b6c(%rip), %rax
0000000001028171	movq	%rax, (%rsp)
0000000001028175	movq	$0x7, 0x8(%rsp)
000000000102817e	callq	runtime.printstring
0000000001028183	movq	0x18(%rsp), %rax
0000000001028188	movq	%rax, (%rsp)
000000000102818c	callq	runtime.printint
0000000001028191	leaq	0x439da(%rip), %rax
0000000001028198	movq	%rax, (%rsp)
000000000102819c	movq	$0x13, 0x8(%rsp)
00000000010281a5	callq	runtime.printstring
00000000010281aa	movl	0x14(%rsp), %eax
00000000010281ae	movl	%eax, %eax
00000000010281b0	movq	%rax, (%rsp)
00000000010281b4	callq	runtime.printuint
00000000010281b9	callq	runtime.printnl
00000000010281be	callq	runtime.printunlock
00000000010281c3	movq	0x20(%rsp), %rax
00000000010281c8	movl	0x90(%rax), %ecx
00000000010281ce	movl	%ecx, 0x10(%rsp)
00000000010281d2	movq	0x98(%rax), %rdx
00000000010281d9	movq	%rdx, 0x18(%rsp)
00000000010281de	callq	runtime.printlock
00000000010281e3	leaq	0x43690(%rip), %rax
00000000010281ea	movq	%rax, (%rsp)
00000000010281ee	movq	$0x10, 0x8(%rsp)
00000000010281f7	callq	runtime.printstring
00000000010281fc	movq	0x20(%rsp), %rax
0000000001028201	movq	%rax, (%rsp)
0000000001028205	callq	runtime.printpointer
000000000102820a	leaq	0x42acc(%rip), %rax
0000000001028211	movq	%rax, (%rsp)
0000000001028215	movq	$0x7, 0x8(%rsp)
000000000102821e	callq	runtime.printstring
0000000001028223	movq	0x18(%rsp), %rax
0000000001028228	movq	%rax, (%rsp)
000000000102822c	callq	runtime.printint
0000000001028231	leaq	0x43927(%rip), %rax
0000000001028238	movq	%rax, (%rsp)
000000000102823c	movq	$0x13, 0x8(%rsp)
0000000001028245	callq	runtime.printstring
000000000102824a	movl	0x10(%rsp), %eax
000000000102824e	movl	%eax, %eax
0000000001028250	movq	%rax, (%rsp)
0000000001028254	callq	runtime.printuint
0000000001028259	callq	runtime.printnl
000000000102825e	callq	runtime.printunlock
0000000001028263	leaq	0x44624(%rip), %rax
000000000102826a	movq	%rax, (%rsp)
000000000102826e	movq	$0x19, 0x8(%rsp)
0000000001028277	callq	runtime.throw
000000000102827c	ud2
000000000102827e	leaq	0x456db(%rip), %rax
0000000001028285	movq	%rax, (%rsp)
0000000001028289	movq	$0x21, 0x8(%rsp)
0000000001028292	callq	runtime.throw
0000000001028297	ud2
0000000001028299	callq	runtime.morestack_noctxt
000000000102829e	jmp	runtime.stoplockedm
00000000010282a3	int3
00000000010282a4	int3
00000000010282a5	int3
00000000010282a6	int3
00000000010282a7	int3
00000000010282a8	int3
00000000010282a9	int3
00000000010282aa	int3
00000000010282ab	int3
00000000010282ac	int3
00000000010282ad	int3
00000000010282ae	int3
00000000010282af	int3
runtime.startlockedm:
00000000010282b0	movq	%gs:0x30, %rcx
00000000010282b9	cmpq	0x10(%rcx), %rsp
00000000010282bd	jbe	0x102837c
00000000010282c3	subq	$0x20, %rsp
00000000010282c7	movq	%rbp, 0x18(%rsp)
00000000010282cc	leaq	0x18(%rsp), %rbp
00000000010282d1	movq	%gs:0x30, %rax
00000000010282da	movq	0x28(%rsp), %rcx
00000000010282df	movq	0xd8(%rcx), %rcx
00000000010282e6	movq	0x30(%rax), %rax
00000000010282ea	cmpq	%rax, %rcx
00000000010282ed	je	0x1028361
00000000010282ef	cmpq	$0x0, 0xd8(%rcx)
00000000010282f7	jne	0x1028346
00000000010282f9	movq	%rcx, 0x10(%rsp)
00000000010282fe	movl	$0xffffffff, (%rsp)
0000000001028305	callq	runtime.incidlelocked
000000000102830a	callq	runtime.releasep
000000000102830f	movq	0x10(%rsp), %rax
0000000001028314	leaq	0xd8(%rax), %rcx
000000000102831b	testb	%al, (%rcx)
000000000102831d	movq	(%rsp), %rcx
0000000001028321	movq	%rcx, 0xd8(%rax)
0000000001028328	addq	$0x140, %rax
000000000102832e	movq	%rax, (%rsp)
0000000001028332	callq	runtime.notewakeup
0000000001028337	callq	runtime.stopm
000000000102833c	movq	0x18(%rsp), %rbp
0000000001028341	addq	$0x20, %rsp
0000000001028345	retq
0000000001028346	leaq	0x43d45(%rip), %rax
000000000102834d	movq	%rax, (%rsp)
0000000001028351	movq	$0x15, 0x8(%rsp)
000000000102835a	callq	runtime.throw
000000000102835f	ud2
0000000001028361	leaq	0x44676(%rip), %rax
0000000001028368	movq	%rax, (%rsp)
000000000102836c	movq	$0x1a, 0x8(%rsp)
0000000001028375	callq	runtime.throw
000000000102837a	ud2
000000000102837c	callq	runtime.morestack_noctxt
0000000001028381	jmp	runtime.startlockedm
0000000001028386	int3
0000000001028387	int3
0000000001028388	int3
0000000001028389	int3
000000000102838a	int3
000000000102838b	int3
000000000102838c	int3
000000000102838d	int3
000000000102838e	int3
000000000102838f	int3
runtime.gcstopm:
0000000001028390	movq	%gs:0x30, %rcx
0000000001028399	cmpq	0x10(%rcx), %rsp
000000000102839d	jbe	0x102849b
00000000010283a3	subq	$0x20, %rsp
00000000010283a7	movq	%rbp, 0x18(%rsp)
00000000010283ac	leaq	0x18(%rsp), %rbp
00000000010283b1	movq	%gs:0x30, %rax
00000000010283ba	cmpl	$0x0, 0x907b7(%rip)
00000000010283c1	je	0x1028480
00000000010283c7	movq	0x30(%rax), %rax
00000000010283cb	testb	%al, (%rax)
00000000010283cd	leaq	0x110(%rax), %rcx
00000000010283d4	cmpb	$0x0, (%rcx)
00000000010283d7	je	0x10283f6
00000000010283d9	movb	$0x0, 0x110(%rax)
00000000010283e0	movl	$0xffffffff, %eax
00000000010283e5	leaq	0x90708(%rip), %rcx
00000000010283ec	lock
00000000010283ed	xaddl	%eax, (%rcx)
00000000010283f0	decl	%eax
00000000010283f2	testl	%eax, %eax
00000000010283f4	jl	0x1028465
00000000010283f6	callq	runtime.releasep
00000000010283fb	movq	(%rsp), %rax
00000000010283ff	movq	%rax, 0x10(%rsp)
0000000001028404	leaq	0x906a5(%rip), %rcx
000000000102840b	movq	%rcx, (%rsp)
000000000102840f	callq	runtime.lock
0000000001028414	movq	0x10(%rsp), %rax
0000000001028419	movl	$0x3, 0xc(%rax)
0000000001028420	movl	0x90756(%rip), %eax
0000000001028426	leal	-0x1(%rax), %ecx
0000000001028429	movl	%ecx, 0x9074d(%rip)
000000000102842f	cmpl	$0x1, %eax
0000000001028432	je	0x1028453
0000000001028434	leaq	0x90675(%rip), %rax
000000000102843b	movq	%rax, (%rsp)
000000000102843f	callq	runtime.unlock
0000000001028444	callq	runtime.stopm
0000000001028449	movq	0x18(%rsp), %rbp
000000000102844e	addq	$0x20, %rsp
0000000001028452	retq
0000000001028453	leaq	0x90726(%rip), %rax
000000000102845a	movq	%rax, (%rsp)
000000000102845e	callq	runtime.notewakeup
0000000001028463	jmp	0x1028434
0000000001028465	leaq	0x449b7(%rip), %rax
000000000102846c	movq	%rax, (%rsp)
0000000001028470	movq	$0x1c, 0x8(%rsp)
0000000001028479	callq	runtime.throw
000000000102847e	ud2
0000000001028480	leaq	0x445dd(%rip), %rax
0000000001028487	movq	%rax, (%rsp)
000000000102848b	movq	$0x1b, 0x8(%rsp)
0000000001028494	callq	runtime.throw
0000000001028499	ud2
000000000102849b	callq	runtime.morestack_noctxt
00000000010284a0	jmp	runtime.gcstopm
00000000010284a5	int3
00000000010284a6	int3
00000000010284a7	int3
00000000010284a8	int3
00000000010284a9	int3
00000000010284aa	int3
00000000010284ab	int3
00000000010284ac	int3
00000000010284ad	int3
00000000010284ae	int3
00000000010284af	int3
runtime.execute:
00000000010284b0	movq	%gs:0x30, %rcx
00000000010284b9	cmpq	0x10(%rcx), %rsp
00000000010284bd	jbe	0x1028613
00000000010284c3	subq	$0x20, %rsp
00000000010284c7	movq	%rbp, 0x18(%rsp)
00000000010284cc	leaq	0x18(%rsp), %rbp
00000000010284d1	movq	%gs:0x30, %rax
00000000010284da	movq	%rax, 0x10(%rsp)
00000000010284df	movq	0x28(%rsp), %rcx
00000000010284e4	movq	%rcx, (%rsp)
00000000010284e8	movabsq	$0x200000001, %rdx
00000000010284f2	movq	%rdx, 0x8(%rsp)
00000000010284f7	callq	runtime.casgstatus
00000000010284fc	movq	0x28(%rsp), %rax
0000000001028501	movq	$0x0, 0xa8(%rax)
000000000102850c	movb	$0x0, 0xb1(%rax)
0000000001028513	movq	(%rax), %rcx
0000000001028516	addq	$0x370, %rcx
000000000102851d	movq	%rcx, 0x10(%rax)
0000000001028521	movzbl	0x30(%rsp), %ecx
0000000001028526	testb	%cl, %cl
0000000001028528	je	0x10285fb
000000000102852e	movq	0x10(%rsp), %rcx
0000000001028533	movq	0x30(%rcx), %rdx
0000000001028537	testb	%al, (%rdx)
0000000001028539	cmpl	$0x0, 0xac6f0(%rip)
0000000001028540	jne	0x10285ea
0000000001028546	movq	%rax, 0xc0(%rdx)
000000000102854d	movq	0x30(%rcx), %rdx
0000000001028551	cmpl	$0x0, 0xac6d8(%rip)
0000000001028558	jne	0x10285d3
000000000102855a	movq	%rdx, 0x30(%rax)
000000000102855e	movq	0x30(%rcx), %rcx
0000000001028562	movl	0x90648(%rip), %edx
0000000001028568	movl	0x108(%rcx), %ecx
000000000102856e	cmpl	%edx, %ecx
0000000001028570	jne	0x10285c4
0000000001028572	leaq	0x9c477(%rip), %rcx
0000000001028579	cmpb	$0x0, (%rcx)
000000000102857c	je	0x1028596
000000000102857e	cmpq	$0x0, 0x70(%rax)
0000000001028583	je	0x1028591
0000000001028585	leaq	0xb8(%rax), %rcx
000000000102858c	cmpb	$0x0, (%rcx)
000000000102858f	jne	0x10285b2
0000000001028591	callq	runtime.traceGoStart
0000000001028596	movq	0x28(%rsp), %rax
000000000102859b	addq	$0x38, %rax
000000000102859f	movq	%rax, (%rsp)
00000000010285a3	callq	runtime.gogo
00000000010285a8	movq	0x18(%rsp), %rbp
00000000010285ad	addq	$0x20, %rsp
00000000010285b1	retq
00000000010285b2	movq	0xc0(%rax), %rcx
00000000010285b9	movq	%rcx, (%rsp)
00000000010285bd	callq	runtime.traceGoSysExit
00000000010285c2	jmp	0x1028591
00000000010285c4	movl	%edx, (%rsp)
00000000010285c7	callq	runtime.setThreadCPUProfiler
00000000010285cc	movq	0x28(%rsp), %rax
00000000010285d1	jmp	0x1028572
00000000010285d3	leaq	0x30(%rax), %rdi
00000000010285d7	movq	%rax, %rbx
00000000010285da	movq	%rdx, %rax
00000000010285dd	callq	runtime.gcWriteBarrier
00000000010285e2	movq	%rbx, %rax
00000000010285e5	jmp	0x102855e
00000000010285ea	leaq	0xc0(%rdx), %rdi
00000000010285f1	callq	runtime.gcWriteBarrier
00000000010285f6	jmp	0x102854d
00000000010285fb	movq	0x10(%rsp), %rcx
0000000001028600	movq	0x30(%rcx), %rdx
0000000001028604	movq	0xd0(%rdx), %rdx
000000000102860b	incl	0x18(%rdx)
000000000102860e	jmp	0x102852e
0000000001028613	callq	runtime.morestack_noctxt
0000000001028618	jmp	runtime.execute
000000000102861d	int3
000000000102861e	int3
000000000102861f	int3
runtime.findrunnable:
0000000001028620	movq	%gs:0x30, %rcx
0000000001028629	leaq	-0x18(%rsp), %rax
000000000102862e	cmpq	0x10(%rcx), %rax
0000000001028632	jbe	0x1029190
0000000001028638	subq	$0x98, %rsp
000000000102863f	movq	%rbp, 0x90(%rsp)
0000000001028647	leaq	0x90(%rsp), %rbp
000000000102864f	movq	%gs:0x30, %rax
0000000001028658	movq	%rax, 0x80(%rsp)
0000000001028660	jmp	0x1028cbd
0000000001028665	xorl	%edx, %edx
0000000001028667	divl	%ecx
0000000001028669	movl	%edx, 0x40(%rsp)
000000000102866d	movq	0x30(%rsp), %rdx
0000000001028672	movq	0x88(%rsp), %rbx
000000000102867a	movq	%rbx, %rcx
000000000102867d	movq	%rdx, %r9
0000000001028680	movq	0x80(%rsp), %r10
0000000001028688	movl	0x3c(%rsp), %edx
000000000102868c	cmpl	%edx, 0x38(%rsp)
0000000001028690	je	0x1028724
0000000001028696	cmpl	$0x0, 0x904db(%rip)
000000000102869d	jne	0x102871c
000000000102869f	movl	0x40(%rsp), %eax
00000000010286a3	movq	0x901ae(%rip), %rdx
00000000010286aa	movq	runtime.allp(%rip), %rbx
00000000010286b1	cmpq	%rdx, %rax
00000000010286b4	jae	0x1029174
00000000010286ba	movq	(%rbx,%rax,8), %rax
00000000010286be	movq	%rax, 0x8(%rsp)
00000000010286c3	movq	%rcx, (%rsp)
00000000010286c7	cmpq	$0x2, %r9
00000000010286cb	setg	0x10(%rsp)
00000000010286d0	callq	runtime.runqsteal
00000000010286d5	movq	0x18(%rsp), %rax
00000000010286da	testq	%rax, %rax
00000000010286dd	jne	0x10286fc
00000000010286df	incl	0x38(%rsp)
00000000010286e3	movl	0x40(%rsp), %eax
00000000010286e7	addl	0x44(%rsp), %eax
00000000010286eb	movl	0x3c(%rsp), %ecx
00000000010286ef	testl	%ecx, %ecx
00000000010286f1	jne	0x1028665
00000000010286f7	jmp	0x102916d
00000000010286fc	movq	%rax, 0xa0(%rsp)
0000000001028704	movb	$0x0, 0xa8(%rsp)
000000000102870c	movq	0x90(%rsp), %rbp
0000000001028714	addq	$0x98, %rsp
000000000102871b	retq
000000000102871c	movq	%r10, %rax
000000000102871f	jmp	0x1028cbd
0000000001028724	leaq	0x1(%r9), %rax
0000000001028728	movq	%r10, %rdx
000000000102872b	cmpq	$0x4, %rax
000000000102872f	jge	0x1028978
0000000001028735	movq	%gs:0x30, %rbx
000000000102873e	movq	0x30(%rbx), %rbx
0000000001028742	movl	0x11c(%rbx), %esi
0000000001028748	movl	0x120(%rbx), %edi
000000000102874e	movl	%edi, 0x11c(%rbx)
0000000001028754	movl	%esi, %r8d
0000000001028757	shll	$0x11, %esi
000000000102875a	xorl	%r8d, %esi
000000000102875d	movl	%edi, %r8d
0000000001028760	xorl	%esi, %edi
0000000001028762	shrl	$0x7, %esi
0000000001028765	xorl	%edi, %esi
0000000001028767	movl	%r8d, %edi
000000000102876a	shrl	$0x10, %r8d
000000000102876e	xorl	%esi, %r8d
0000000001028771	movl	%r8d, 0x120(%rbx)
0000000001028778	leal	(%r8,%rdi), %ebx
000000000102877c	movl	runtime.stealOrder(%rip), %esi
0000000001028782	movq	0x901bf(%rip), %rdi
0000000001028789	movq	0x901c0(%rip), %r8
0000000001028790	testl	%esi, %esi
0000000001028792	je	0x1029189
0000000001028798	movq	%rax, %r9
000000000102879b	movl	%ebx, %eax
000000000102879d	movq	%rdx, %r10
00000000010287a0	xorl	%edx, %edx
00000000010287a2	divl	%esi
00000000010287a4	testl	%r8d, %r8d
00000000010287a7	je	0x1029182
00000000010287ad	movl	%ebx, %eax
00000000010287af	movl	%edx, %ebx
00000000010287b1	xorl	%edx, %edx
00000000010287b3	divl	%r8d
00000000010287b6	movl	%edx, %edx
00000000010287b8	cmpq	%r8, %rdx
00000000010287bb	jae	0x102917b
00000000010287c1	movq	%r9, 0x30(%rsp)
00000000010287c6	movl	(%rdi,%rdx,4), %edx
00000000010287c9	movl	$0x0, 0x38(%rsp)
00000000010287d1	movl	%esi, 0x3c(%rsp)
00000000010287d5	movl	%ebx, 0x40(%rsp)
00000000010287d9	movl	%edx, 0x44(%rsp)
00000000010287dd	jmp	0x1028688
00000000010287e2	movq	0x30(%rsp), %rbx
00000000010287e7	leaq	0x1(%rbx), %rcx
00000000010287eb	movq	0x80(%rsp), %rax
00000000010287f3	movzbl	0x27(%rsp), %edx
00000000010287f8	movq	0x28(%rsp), %rbx
00000000010287fd	cmpq	%rbx, %rcx
0000000001028800	jge	0x1028887
0000000001028806	movq	%rcx, 0x30(%rsp)
000000000102880b	movq	0x70(%rsp), %rax
0000000001028810	movq	(%rax,%rcx,8), %rdx
0000000001028814	movq	%rdx, (%rsp)
0000000001028818	callq	runtime.runqempty
000000000102881d	leaq	0x8(%rsp), %rax
0000000001028822	cmpb	$0x0, (%rax)
0000000001028825	jne	0x10287e2
0000000001028827	leaq	0x90282(%rip), %rax
000000000102882e	movq	%rax, (%rsp)
0000000001028832	callq	runtime.lock
0000000001028837	movq	0x902aa(%rip), %rax
000000000102883e	movq	%rax, 0x88(%rsp)
0000000001028846	testq	%rax, %rax
0000000001028849	je	0x1028866
000000000102884b	movq	0x10(%rax), %rcx
000000000102884f	movq	%rcx, 0x90292(%rip)
0000000001028856	movl	$0xffffffff, %ecx
000000000102885b	leaq	0x9028e(%rip), %rdx
0000000001028862	lock
0000000001028863	xaddl	%ecx, (%rdx)
0000000001028866	leaq	0x90243(%rip), %rax
000000000102886d	movq	%rax, (%rsp)
0000000001028871	callq	runtime.unlock
0000000001028876	movq	0x88(%rsp), %rax
000000000102887e	testq	%rax, %rax
0000000001028881	jne	0x1028c84
0000000001028887	cmpl	$0x0, 0xac262(%rip)
000000000102888e	je	0x1028ad2
0000000001028894	movq	runtime.work(%rip), %rax
000000000102889b	testq	%rax, %rax
000000000102889e	jne	0x1028c7a
00000000010288a4	movl	0x90542(%rip), %eax
00000000010288aa	cmpl	%eax, 0x90538(%rip)
00000000010288b0	jae	0x1028c73
00000000010288b6	movl	$0x1, %eax
00000000010288bb	testb	%al, %al
00000000010288bd	je	0x1028ad2
00000000010288c3	leaq	0x901e6(%rip), %rax
00000000010288ca	movq	%rax, (%rsp)
00000000010288ce	callq	runtime.lock
00000000010288d3	movq	0x9020e(%rip), %rax
00000000010288da	testq	%rax, %rax
00000000010288dd	je	0x1028c67
00000000010288e3	movq	0x10(%rax), %rcx
00000000010288e7	movq	%rcx, 0x901fa(%rip)
00000000010288ee	movl	$0xffffffff, %ecx
00000000010288f3	leaq	0x901f6(%rip), %rdx
00000000010288fa	lock
00000000010288fb	xaddl	%ecx, (%rdx)
00000000010288fe	testq	%rax, %rax
0000000001028901	je	0x1028911
0000000001028903	cmpq	$0x0, 0x1258(%rax)
000000000102890b	je	0x1028c57
0000000001028911	movq	%rax, 0x78(%rsp)
0000000001028916	leaq	0x90193(%rip), %rcx
000000000102891d	movq	%rcx, (%rsp)
0000000001028921	callq	runtime.unlock
0000000001028926	movq	0x78(%rsp), %rax
000000000102892b	testq	%rax, %rax
000000000102892e	je	0x1028ad2
0000000001028934	movq	%rax, (%rsp)
0000000001028938	callq	runtime.acquirep
000000000102893d	movzbl	0x27(%rsp), %eax
0000000001028942	testb	%al, %al
0000000001028944	je	0x1028ac5
000000000102894a	movq	0x80(%rsp), %rax
0000000001028952	movq	0x30(%rax), %rcx
0000000001028956	movb	$0x1, 0x110(%rcx)
000000000102895d	movl	$0x1, %ecx
0000000001028962	leaq	0x9018b(%rip), %rdx
0000000001028969	lock
000000000102896a	xaddl	%ecx, (%rdx)
000000000102896d	movq	0x78(%rsp), %rbx
0000000001028972	movq	%rax, %rdx
0000000001028975	movq	%rbx, %rcx
0000000001028978	movq	%rcx, 0x48(%rsp)
000000000102897d	cmpl	$0x0, 0xac16c(%rip)
0000000001028984	je	0x10289fc
0000000001028986	testb	%al, (%rcx)
0000000001028988	cmpq	$0x0, 0x1258(%rcx)
0000000001028990	je	0x10289fc
0000000001028992	leaq	0x1270(%rcx), %rax
0000000001028999	testb	%al, (%rax)
000000000102899b	movq	0x1270(%rcx), %rax
00000000010289a2	testq	%rax, %rax
00000000010289a5	je	0x1028eef
00000000010289ab	cmpq	$0x0, 0x10(%rax)
00000000010289b0	jne	0x1028ee8
00000000010289b6	movq	0x1278(%rcx), %rax
00000000010289bd	cmpq	$0x0, 0x10(%rax)
00000000010289c2	sete	%al
00000000010289c5	testb	%al, %al
00000000010289c7	je	0x1028ede
00000000010289cd	movq	runtime.work(%rip), %rax
00000000010289d4	testq	%rax, %rax
00000000010289d7	jne	0x1028ed4
00000000010289dd	movl	0x90409(%rip), %eax
00000000010289e3	cmpl	%eax, 0x903ff(%rip)
00000000010289e9	jae	0x1028ecd
00000000010289ef	movl	$0x1, %eax
00000000010289f4	testb	%al, %al
00000000010289f6	jne	0x1028e4b
00000000010289fc	movq	0x8fe55(%rip), %rax
0000000001028a03	movq	%rax, 0x28(%rsp)
0000000001028a08	movq	runtime.allp(%rip), %rcx
0000000001028a0f	movq	%rcx, 0x70(%rsp)
0000000001028a14	leaq	0x90095(%rip), %rdx
0000000001028a1b	movq	%rdx, (%rsp)
0000000001028a1f	callq	runtime.lock
0000000001028a24	cmpl	$0x0, 0x9014d(%rip)
0000000001028a2b	jne	0x1028e2e
0000000001028a31	movq	0x48(%rsp), %rax
0000000001028a36	testb	%al, (%rax)
0000000001028a38	cmpl	$0x0, 0x22a0(%rax)
0000000001028a3f	jne	0x1028e2e
0000000001028a45	cmpl	$0x0, 0x900bc(%rip)
0000000001028a4c	jne	0x1028dde
0000000001028a52	callq	runtime.releasep
0000000001028a57	movq	(%rsp), %rax
0000000001028a5b	movq	0x48(%rsp), %rcx
0000000001028a60	cmpq	%rcx, %rax
0000000001028a63	jne	0x1029152
0000000001028a69	movq	%rcx, (%rsp)
0000000001028a6d	callq	runtime.pidleput
0000000001028a72	leaq	0x90037(%rip), %rax
0000000001028a79	movq	%rax, (%rsp)
0000000001028a7d	callq	runtime.unlock
0000000001028a82	movq	0x80(%rsp), %rax
0000000001028a8a	movq	0x30(%rax), %rcx
0000000001028a8e	movzbl	0x110(%rcx), %edx
0000000001028a95	testb	%dl, %dl
0000000001028a97	je	0x1028aba
0000000001028a99	movb	$0x0, 0x110(%rcx)
0000000001028aa0	movl	$0xffffffff, %ecx
0000000001028aa5	leaq	0x90048(%rip), %rbx
0000000001028aac	lock
0000000001028aad	xaddl	%ecx, (%rbx)
0000000001028ab0	decl	%ecx
0000000001028ab2	testl	%ecx, %ecx
0000000001028ab4	jl	0x1029137
0000000001028aba	movb	%dl, 0x27(%rsp)
0000000001028abe	xorl	%ecx, %ecx
0000000001028ac0	jmp	0x10287f8
0000000001028ac5	movq	0x80(%rsp), %rax
0000000001028acd	jmp	0x102896d
0000000001028ad2	movl	runtime.netpollInited(%rip), %eax
0000000001028ad8	testl	%eax, %eax
0000000001028ada	je	0x1028af7
0000000001028adc	movl	runtime.netpollWaiters(%rip), %eax
0000000001028ae2	testl	%eax, %eax
0000000001028ae4	jbe	0x1028af7
0000000001028ae6	xorl	%eax, %eax
0000000001028ae8	leaq	0x8ffb9(%rip), %rcx
0000000001028aef	xchgq	%rax, (%rcx)
0000000001028af2	testq	%rax, %rax
0000000001028af5	jne	0x1028b09
0000000001028af7	callq	runtime.stopm
0000000001028afc	movq	0x80(%rsp), %rax
0000000001028b04	jmp	0x1028cbd
0000000001028b09	movq	0x80(%rsp), %rax
0000000001028b11	movq	0x30(%rax), %rdx
0000000001028b15	cmpq	$0x0, 0xd0(%rdx)
0000000001028b1d	jne	0x102911c
0000000001028b23	addq	$0x110, %rdx
0000000001028b2a	cmpb	$0x0, (%rdx)
0000000001028b2d	jne	0x1029101
0000000001028b33	movb	$0x1, (%rsp)
0000000001028b37	callq	runtime.netpoll
0000000001028b3c	movq	0x8(%rsp), %rax
0000000001028b41	movq	%rax, 0x50(%rsp)
0000000001028b46	callq	runtime.nanotime
0000000001028b4b	movq	(%rsp), %rax
0000000001028b4f	leaq	0x8ff52(%rip), %rcx
0000000001028b56	xchgq	%rax, (%rcx)
0000000001028b59	movq	0x50(%rsp), %rax
0000000001028b5e	testq	%rax, %rax
0000000001028b61	je	0x1028af7
0000000001028b63	leaq	0x8ff46(%rip), %rax
0000000001028b6a	movq	%rax, (%rsp)
0000000001028b6e	callq	runtime.lock
0000000001028b73	movq	0x8ff6e(%rip), %rax
0000000001028b7a	movq	%rax, 0x88(%rsp)
0000000001028b82	testq	%rax, %rax
0000000001028b85	je	0x1028ba2
0000000001028b87	movq	0x10(%rax), %rcx
0000000001028b8b	movq	%rcx, 0x8ff56(%rip)
0000000001028b92	movl	$0xffffffff, %ecx
0000000001028b97	leaq	0x8ff52(%rip), %rdx
0000000001028b9e	lock
0000000001028b9f	xaddl	%ecx, (%rdx)
0000000001028ba2	leaq	0x8ff07(%rip), %rax
0000000001028ba9	movq	%rax, (%rsp)
0000000001028bad	callq	runtime.unlock
0000000001028bb2	movq	0x88(%rsp), %rax
0000000001028bba	testq	%rax, %rax
0000000001028bbd	jne	0x1028bd2
0000000001028bbf	movq	0x50(%rsp), %rax
0000000001028bc4	movq	%rax, (%rsp)
0000000001028bc8	callq	runtime.injectglist
0000000001028bcd	jmp	0x1028af7
0000000001028bd2	movq	%rax, (%rsp)
0000000001028bd6	callq	runtime.acquirep
0000000001028bdb	movq	0x50(%rsp), %rax
0000000001028be0	movq	0xa0(%rax), %rcx
0000000001028be7	movq	%rcx, (%rsp)
0000000001028beb	callq	runtime.injectglist
0000000001028bf0	movq	0x50(%rsp), %rax
0000000001028bf5	movq	%rax, (%rsp)
0000000001028bf9	movabsq	$0x100000004, %rcx
0000000001028c03	movq	%rcx, 0x8(%rsp)
0000000001028c08	callq	runtime.casgstatus
0000000001028c0d	leaq	0x9bddc(%rip), %rax
0000000001028c14	cmpb	$0x0, (%rax)
0000000001028c17	jne	0x1028c3e
0000000001028c19	movq	0x50(%rsp), %rax
0000000001028c1e	movq	%rax, 0xa0(%rsp)
0000000001028c26	movb	$0x0, 0xa8(%rsp)
0000000001028c2e	movq	0x90(%rsp), %rbp
0000000001028c36	addq	$0x98, %rsp
0000000001028c3d	retq
0000000001028c3e	movq	0x50(%rsp), %rax
0000000001028c43	movq	%rax, (%rsp)
0000000001028c47	movq	$0x0, 0x8(%rsp)
0000000001028c50	callq	runtime.traceGoUnpark
0000000001028c55	jmp	0x1028c19
0000000001028c57	movq	%rax, (%rsp)
0000000001028c5b	callq	runtime.pidleput
0000000001028c60	xorl	%eax, %eax
0000000001028c62	jmp	0x1028911
0000000001028c67	leaq	0x8fe82(%rip), %rdx
0000000001028c6e	jmp	0x1028901
0000000001028c73	xorl	%eax, %eax
0000000001028c75	jmp	0x10288bb
0000000001028c7a	movl	$0x1, %eax
0000000001028c7f	jmp	0x10288bb
0000000001028c84	movq	%rax, (%rsp)
0000000001028c88	callq	runtime.acquirep
0000000001028c8d	movzbl	0x27(%rsp), %eax
0000000001028c92	testb	%al, %al
0000000001028c94	je	0x1028dd1
0000000001028c9a	movq	0x80(%rsp), %rax
0000000001028ca2	movq	0x30(%rax), %rcx
0000000001028ca6	movb	$0x1, 0x110(%rcx)
0000000001028cad	movl	$0x1, %ecx
0000000001028cb2	leaq	0x8fe3b(%rip), %rdx
0000000001028cb9	lock
0000000001028cba	xaddl	%ecx, (%rdx)
0000000001028cbd	movq	0x30(%rax), %rcx
0000000001028cc1	movq	0xd0(%rcx), %rcx
0000000001028cc8	cmpl	$0x0, 0x8fea9(%rip)
0000000001028ccf	je	0x1028ce0
0000000001028cd1	callq	runtime.gcstopm
0000000001028cd6	movq	0x80(%rsp), %rax
0000000001028cde	jmp	0x1028cbd
0000000001028ce0	movq	%rcx, 0x88(%rsp)
0000000001028ce8	testb	%al, (%rcx)
0000000001028cea	cmpl	$0x0, 0x22a0(%rcx)
0000000001028cf1	jne	0x10290e7
0000000001028cf7	leaq	runtime.fingwait(%rip), %rdx
0000000001028cfe	cmpb	$0x0, (%rdx)
0000000001028d01	je	0x10290db
0000000001028d07	leaq	runtime.fingwake(%rip), %rbx
0000000001028d0e	cmpb	$0x0, (%rbx)
0000000001028d11	jne	0x1029097
0000000001028d17	movq	runtime.cgo_yield(%rip), %rsi
0000000001028d1e	movq	(%rsi), %rsi
0000000001028d21	testq	%rsi, %rsi
0000000001028d24	jne	0x1029078
0000000001028d2a	movq	%rcx, (%rsp)
0000000001028d2e	callq	runtime.runqget
0000000001028d33	movq	0x8(%rsp), %rax
0000000001028d38	movzbl	0x10(%rsp), %ecx
0000000001028d3d	testq	%rax, %rax
0000000001028d40	jne	0x1029059
0000000001028d46	cmpl	$0x0, 0x8fdbb(%rip)
0000000001028d4d	jne	0x1028fe8
0000000001028d53	movl	runtime.netpollInited(%rip), %ecx
0000000001028d59	testl	%ecx, %ecx
0000000001028d5b	je	0x1028d77
0000000001028d5d	movl	runtime.netpollWaiters(%rip), %ecx
0000000001028d63	testl	%ecx, %ecx
0000000001028d65	jbe	0x1028d77
0000000001028d67	movq	0x8fd3a(%rip), %rcx
0000000001028d6e	testq	%rcx, %rcx
0000000001028d71	jne	0x1028f55
0000000001028d77	movl	runtime.gomaxprocs(%rip), %ecx
0000000001028d7d	movl	0x8fd6d(%rip), %edx
0000000001028d83	leal	-0x1(%rcx), %ebx
0000000001028d86	cmpl	%edx, %ebx
0000000001028d88	je	0x1028f3d
0000000001028d8e	movq	0x80(%rsp), %rdx
0000000001028d96	movq	0x30(%rdx), %rbx
0000000001028d9a	testb	%al, (%rbx)
0000000001028d9c	addq	$0x110, %rbx
0000000001028da3	cmpb	$0x0, (%rbx)
0000000001028da6	je	0x1028f15
0000000001028dac	movq	0x30(%rdx), %rcx
0000000001028db0	testb	%al, (%rcx)
0000000001028db2	leaq	0x110(%rcx), %rbx
0000000001028db9	cmpb	$0x0, (%rbx)
0000000001028dbc	je	0x1028ef9
0000000001028dc2	movq	0x88(%rsp), %rcx
0000000001028dca	xorl	%eax, %eax
0000000001028dcc	jmp	0x102872b
0000000001028dd1	movq	0x80(%rsp), %rax
0000000001028dd9	jmp	0x1028cbd
0000000001028dde	movq	%rax, (%rsp)
0000000001028de2	movl	$0x0, 0x8(%rsp)
0000000001028dea	callq	runtime.globrunqget
0000000001028def	movq	0x10(%rsp), %rax
0000000001028df4	movq	%rax, 0x68(%rsp)
0000000001028df9	leaq	0x8fcb0(%rip), %rcx
0000000001028e00	movq	%rcx, (%rsp)
0000000001028e04	callq	runtime.unlock
0000000001028e09	movq	0x68(%rsp), %rax
0000000001028e0e	movq	%rax, 0xa0(%rsp)
0000000001028e16	movb	$0x0, 0xa8(%rsp)
0000000001028e1e	movq	0x90(%rsp), %rbp
0000000001028e26	addq	$0x98, %rsp
0000000001028e2d	retq
0000000001028e2e	leaq	0x8fc7b(%rip), %rax
0000000001028e35	movq	%rax, (%rsp)
0000000001028e39	callq	runtime.unlock
0000000001028e3e	movq	0x80(%rsp), %rax
0000000001028e46	jmp	0x1028cbd
0000000001028e4b	movq	$0x2, 0x1260(%rcx)
0000000001028e56	movq	0x1258(%rcx), %rax
0000000001028e5d	movq	%rax, 0x88(%rsp)
0000000001028e65	movq	%rax, (%rsp)
0000000001028e69	movabsq	$0x100000004, %rcx
0000000001028e73	movq	%rcx, 0x8(%rsp)
0000000001028e78	callq	runtime.casgstatus
0000000001028e7d	leaq	0x9bb6c(%rip), %rax
0000000001028e84	cmpb	$0x0, (%rax)
0000000001028e87	jne	0x1028eb1
0000000001028e89	movq	0x88(%rsp), %rax
0000000001028e91	movq	%rax, 0xa0(%rsp)
0000000001028e99	movb	$0x0, 0xa8(%rsp)
0000000001028ea1	movq	0x90(%rsp), %rbp
0000000001028ea9	addq	$0x98, %rsp
0000000001028eb0	retq
0000000001028eb1	movq	0x88(%rsp), %rax
0000000001028eb9	movq	%rax, (%rsp)
0000000001028ebd	movq	$0x0, 0x8(%rsp)
0000000001028ec6	callq	runtime.traceGoUnpark
0000000001028ecb	jmp	0x1028e89
0000000001028ecd	xorl	%eax, %eax
0000000001028ecf	jmp	0x10289f4
0000000001028ed4	movl	$0x1, %eax
0000000001028ed9	jmp	0x10289f4
0000000001028ede	movl	$0x1, %eax
0000000001028ee3	jmp	0x10289f4
0000000001028ee8	xorl	%eax, %eax
0000000001028eea	jmp	0x10289c5
0000000001028eef	movl	$0x1, %eax
0000000001028ef4	jmp	0x10289c5
0000000001028ef9	movb	$0x1, 0x110(%rcx)
0000000001028f00	movl	$0x1, %ecx
0000000001028f05	leaq	0x8fbe8(%rip), %rbx
0000000001028f0c	lock
0000000001028f0d	xaddl	%ecx, (%rbx)
0000000001028f10	jmp	0x1028dc2
0000000001028f15	movl	0x8fbd9(%rip), %ebx
0000000001028f1b	movl	0x8fbcf(%rip), %esi
0000000001028f21	shll	%ebx
0000000001028f23	subl	%esi, %ecx
0000000001028f25	cmpl	%ecx, %ebx
0000000001028f27	jb	0x1028dac
0000000001028f2d	movq	0x88(%rsp), %rax
0000000001028f35	movq	%rax, %rcx
0000000001028f38	jmp	0x1028978
0000000001028f3d	movq	0x88(%rsp), %rax
0000000001028f45	movq	0x80(%rsp), %rdx
0000000001028f4d	movq	%rax, %rcx
0000000001028f50	jmp	0x1028978
0000000001028f55	movb	$0x0, (%rsp)
0000000001028f59	callq	runtime.netpoll
0000000001028f5e	movq	0x8(%rsp), %rax
0000000001028f63	testq	%rax, %rax
0000000001028f66	je	0x1028d77
0000000001028f6c	movq	%rax, 0x58(%rsp)
0000000001028f71	movq	0xa0(%rax), %rcx
0000000001028f78	movq	%rcx, (%rsp)
0000000001028f7c	callq	runtime.injectglist
0000000001028f81	movq	0x58(%rsp), %rax
0000000001028f86	movq	%rax, (%rsp)
0000000001028f8a	movabsq	$0x100000004, %rcx
0000000001028f94	movq	%rcx, 0x8(%rsp)
0000000001028f99	callq	runtime.casgstatus
0000000001028f9e	leaq	0x9ba4b(%rip), %rax
0000000001028fa5	cmpb	$0x0, (%rax)
0000000001028fa8	jne	0x1028fcf
0000000001028faa	movq	0x58(%rsp), %rax
0000000001028faf	movq	%rax, 0xa0(%rsp)
0000000001028fb7	movb	$0x0, 0xa8(%rsp)
0000000001028fbf	movq	0x90(%rsp), %rbp
0000000001028fc7	addq	$0x98, %rsp
0000000001028fce	retq
0000000001028fcf	movq	0x58(%rsp), %rax
0000000001028fd4	movq	%rax, (%rsp)
0000000001028fd8	movq	$0x0, 0x8(%rsp)
0000000001028fe1	callq	runtime.traceGoUnpark
0000000001028fe6	jmp	0x1028faa
0000000001028fe8	leaq	0x8fac1(%rip), %rax
0000000001028fef	movq	%rax, (%rsp)
0000000001028ff3	callq	runtime.lock
0000000001028ff8	movq	0x88(%rsp), %rax
0000000001029000	movq	%rax, (%rsp)
0000000001029004	movl	$0x0, 0x8(%rsp)
000000000102900c	callq	runtime.globrunqget
0000000001029011	movq	0x10(%rsp), %rax
0000000001029016	movq	%rax, 0x60(%rsp)
000000000102901b	leaq	0x8fa8e(%rip), %rcx
0000000001029022	movq	%rcx, (%rsp)
0000000001029026	callq	runtime.unlock
000000000102902b	movq	0x60(%rsp), %rax
0000000001029030	testq	%rax, %rax
0000000001029033	je	0x1028d53
0000000001029039	movq	%rax, 0xa0(%rsp)
0000000001029041	movb	$0x0, 0xa8(%rsp)
0000000001029049	movq	0x90(%rsp), %rbp
0000000001029051	addq	$0x98, %rsp
0000000001029058	retq
0000000001029059	movq	%rax, 0xa0(%rsp)
0000000001029061	movb	%cl, 0xa8(%rsp)
0000000001029068	movq	0x90(%rsp), %rbp
0000000001029070	addq	$0x98, %rsp
0000000001029077	retq
0000000001029078	movq	%rsi, (%rsp)
000000000102907c	movq	$0x0, 0x8(%rsp)
0000000001029085	callq	runtime.asmcgocall
000000000102908a	movq	0x88(%rsp), %rcx
0000000001029092	jmp	0x1028d2a
0000000001029097	callq	runtime.wakefing
000000000102909c	cmpq	$0x0, (%rsp)
00000000010290a1	jne	0x10290c6
00000000010290a3	movq	0x80(%rsp), %rax
00000000010290ab	movq	0x88(%rsp), %rcx
00000000010290b3	leaq	runtime.fingwait(%rip), %rdx
00000000010290ba	leaq	runtime.fingwake(%rip), %rbx
00000000010290c1	jmp	0x1028d17
00000000010290c6	movq	$0x0, 0x8(%rsp)
00000000010290cf	movb	$0x1, 0x10(%rsp)
00000000010290d4	callq	runtime.ready
00000000010290d9	jmp	0x10290a3
00000000010290db	leaq	runtime.fingwake(%rip), %rbx
00000000010290e2	jmp	0x1028d17
00000000010290e7	callq	runtime.runSafePointFn
00000000010290ec	movq	0x80(%rsp), %rax
00000000010290f4	movq	0x88(%rsp), %rcx
00000000010290fc	jmp	0x1028cf7
0000000001029101	leaq	0x44a11(%rip), %rax
0000000001029108	movq	%rax, (%rsp)
000000000102910c	movq	$0x23, 0x8(%rsp)
0000000001029115	callq	runtime.throw
000000000102911a	ud2
000000000102911c	leaq	0x43cc8(%rip), %rax
0000000001029123	movq	%rax, (%rsp)
0000000001029127	movq	$0x1c, 0x8(%rsp)
0000000001029130	callq	runtime.throw
0000000001029135	ud2
0000000001029137	leaq	0x44696(%rip), %rax
000000000102913e	movq	%rax, (%rsp)
0000000001029142	movq	$0x21, 0x8(%rsp)
000000000102914b	callq	runtime.throw
0000000001029150	ud2
0000000001029152	leaq	0x42e91(%rip), %rax
0000000001029159	movq	%rax, (%rsp)
000000000102915d	movq	$0x15, 0x8(%rsp)
0000000001029166	callq	runtime.throw
000000000102916b	ud2
000000000102916d	callq	runtime.panicdivide
0000000001029172	ud2
0000000001029174	callq	runtime.panicindex
0000000001029179	ud2
000000000102917b	callq	runtime.panicindex
0000000001029180	ud2
0000000001029182	callq	runtime.panicdivide
0000000001029187	ud2
0000000001029189	callq	runtime.panicdivide
000000000102918e	ud2
0000000001029190	callq	runtime.morestack_noctxt
0000000001029195	jmp	runtime.findrunnable
000000000102919a	int3
000000000102919b	int3
000000000102919c	int3
000000000102919d	int3
000000000102919e	int3
000000000102919f	int3
runtime.pollWork:
00000000010291a0	movq	%gs:0x30, %rcx
00000000010291a9	cmpq	0x10(%rcx), %rsp
00000000010291ad	jbe	0x102926b
00000000010291b3	subq	$0x18, %rsp
00000000010291b7	movq	%rbp, 0x10(%rsp)
00000000010291bc	leaq	0x10(%rsp), %rbp
00000000010291c1	cmpl	$0x0, 0x8f940(%rip)
00000000010291c8	jne	0x102925c
00000000010291ce	movq	%gs:0x30, %rax
00000000010291d7	movq	0x30(%rax), %rax
00000000010291db	movq	0xd0(%rax), %rax
00000000010291e2	movq	%rax, (%rsp)
00000000010291e6	callq	runtime.runqempty
00000000010291eb	leaq	0x8(%rsp), %rax
00000000010291f0	cmpb	$0x0, (%rax)
00000000010291f3	je	0x102924d
00000000010291f5	movl	runtime.netpollInited(%rip), %eax
00000000010291fb	testl	%eax, %eax
00000000010291fd	je	0x1029213
00000000010291ff	movl	runtime.netpollWaiters(%rip), %eax
0000000001029205	testl	%eax, %eax
0000000001029207	jbe	0x1029213
0000000001029209	cmpq	$0x0, 0x8f897(%rip)
0000000001029211	jne	0x1029222
0000000001029213	movb	$0x0, 0x20(%rsp)
0000000001029218	movq	0x10(%rsp), %rbp
000000000102921d	addq	$0x18, %rsp
0000000001029221	retq
0000000001029222	movb	$0x0, (%rsp)
0000000001029226	callq	runtime.netpoll
000000000102922b	movq	0x8(%rsp), %rax
0000000001029230	testq	%rax, %rax
0000000001029233	je	0x1029213
0000000001029235	movq	%rax, (%rsp)
0000000001029239	callq	runtime.injectglist
000000000102923e	movb	$0x1, 0x20(%rsp)
0000000001029243	movq	0x10(%rsp), %rbp
0000000001029248	addq	$0x18, %rsp
000000000102924c	retq
000000000102924d	movb	$0x1, 0x20(%rsp)
0000000001029252	movq	0x10(%rsp), %rbp
0000000001029257	addq	$0x18, %rsp
000000000102925b	retq
000000000102925c	movb	$0x1, 0x20(%rsp)
0000000001029261	movq	0x10(%rsp), %rbp
0000000001029266	addq	$0x18, %rsp
000000000102926a	retq
000000000102926b	callq	runtime.morestack_noctxt
0000000001029270	jmp	runtime.pollWork
0000000001029275	int3
0000000001029276	int3
0000000001029277	int3
0000000001029278	int3
0000000001029279	int3
000000000102927a	int3
000000000102927b	int3
000000000102927c	int3
000000000102927d	int3
000000000102927e	int3
000000000102927f	int3
runtime.resetspinning:
0000000001029280	movq	%gs:0x30, %rcx
0000000001029289	cmpq	0x10(%rcx), %rsp
000000000102928d	jbe	0x102932c
0000000001029293	subq	$0x18, %rsp
0000000001029297	movq	%rbp, 0x10(%rsp)
000000000102929c	leaq	0x10(%rsp), %rbp
00000000010292a1	movq	%gs:0x30, %rax
00000000010292aa	movq	0x30(%rax), %rax
00000000010292ae	testb	%al, (%rax)
00000000010292b0	leaq	0x110(%rax), %rcx
00000000010292b7	cmpb	$0x0, (%rcx)
00000000010292ba	je	0x1029311
00000000010292bc	movb	$0x0, 0x110(%rax)
00000000010292c3	movl	$0xffffffff, %eax
00000000010292c8	leaq	0x8f825(%rip), %rcx
00000000010292cf	lock
00000000010292d0	xaddl	%eax, (%rcx)
00000000010292d3	decl	%eax
00000000010292d5	testl	%eax, %eax
00000000010292d7	jl	0x10292f6
00000000010292d9	jne	0x10292e5
00000000010292db	movl	0x8f80f(%rip), %eax
00000000010292e1	testl	%eax, %eax
00000000010292e3	ja	0x10292ef
00000000010292e5	movq	0x10(%rsp), %rbp
00000000010292ea	addq	$0x18, %rsp
00000000010292ee	retq
00000000010292ef	callq	runtime.wakep
00000000010292f4	jmp	0x10292e5
00000000010292f6	leaq	0x444d7(%rip), %rax
00000000010292fd	movq	%rax, (%rsp)
0000000001029301	movq	$0x21, 0x8(%rsp)
000000000102930a	callq	runtime.throw
000000000102930f	ud2
0000000001029311	leaq	0x441da(%rip), %rax
0000000001029318	movq	%rax, (%rsp)
000000000102931c	movq	$0x1f, 0x8(%rsp)
0000000001029325	callq	runtime.throw
000000000102932a	ud2
000000000102932c	callq	runtime.morestack_noctxt
0000000001029331	jmp	runtime.resetspinning
0000000001029336	int3
0000000001029337	int3
0000000001029338	int3
0000000001029339	int3
000000000102933a	int3
000000000102933b	int3
000000000102933c	int3
000000000102933d	int3
000000000102933e	int3
000000000102933f	int3
runtime.injectglist:
0000000001029340	movq	%gs:0x30, %rcx
0000000001029349	cmpq	0x10(%rcx), %rsp
000000000102934d	jbe	0x10294c1
0000000001029353	subq	$0x38, %rsp
0000000001029357	movq	%rbp, 0x30(%rsp)
000000000102935c	leaq	0x30(%rsp), %rbp
0000000001029361	movq	0x40(%rsp), %rax
0000000001029366	testq	%rax, %rax
0000000001029369	je	0x10294b7
000000000102936f	leaq	0x9b67a(%rip), %rcx
0000000001029376	cmpb	$0x0, (%rcx)
0000000001029379	je	0x10293ad
000000000102937b	movq	%rax, %rcx
000000000102937e	jmp	0x10293a8
0000000001029380	movq	%rax, 0x18(%rsp)
0000000001029385	movq	%rax, (%rsp)
0000000001029389	movq	$0x0, 0x8(%rsp)
0000000001029392	callq	runtime.traceGoUnpark
0000000001029397	movq	0x18(%rsp), %rax
000000000102939c	movq	0xa0(%rax), %rax
00000000010293a3	movq	0x40(%rsp), %rcx
00000000010293a8	testq	%rax, %rax
00000000010293ab	jne	0x1029380
00000000010293ad	leaq	0x8f6fc(%rip), %rax
00000000010293b4	movq	%rax, (%rsp)
00000000010293b8	callq	runtime.lock
00000000010293bd	movq	0x40(%rsp), %rax
00000000010293c2	xorl	%ecx, %ecx
00000000010293c4	jmp	0x10293ea
00000000010293c6	leaq	0x8f733(%rip), %rbx
00000000010293cd	testb	%al, (%rbx)
00000000010293cf	movq	%rdx, 0x8f72a(%rip)
00000000010293d6	incl	0x8f72c(%rip)
00000000010293dc	movq	0x10(%rsp), %rdx
00000000010293e1	leaq	0x1(%rdx), %rcx
00000000010293e5	movq	0x28(%rsp), %rax
00000000010293ea	movq	%rcx, 0x10(%rsp)
00000000010293ef	testq	%rax, %rax
00000000010293f2	je	0x1029469
00000000010293f4	movq	%rax, 0x20(%rsp)
00000000010293f9	movq	0xa0(%rax), %rcx
0000000001029400	movq	%rcx, 0x28(%rsp)
0000000001029405	movq	%rax, (%rsp)
0000000001029409	movabsq	$0x100000004, %rdx
0000000001029413	movq	%rdx, 0x8(%rsp)
0000000001029418	callq	runtime.casgstatus
000000000102941d	movq	0x20(%rsp), %rax
0000000001029422	movq	$0x0, 0xa0(%rax)
000000000102942d	movq	0x8f6cc(%rip), %rcx
0000000001029434	testq	%rcx, %rcx
0000000001029437	je	0x1029451
0000000001029439	leaq	0xa0(%rcx), %rdx
0000000001029440	testb	%al, (%rdx)
0000000001029442	movq	%rax, %rdx
0000000001029445	movq	%rax, 0xa0(%rcx)
000000000102944c	jmp	0x10293c6
0000000001029451	leaq	0x8f6a0(%rip), %rcx
0000000001029458	testb	%al, (%rcx)
000000000102945a	movq	%rax, %rdx
000000000102945d	movq	%rax, 0x8f694(%rip)
0000000001029464	jmp	0x10293c6
0000000001029469	leaq	0x8f640(%rip), %rax
0000000001029470	movq	%rax, (%rsp)
0000000001029474	callq	runtime.unlock
0000000001029479	movq	0x10(%rsp), %rax
000000000102947e	jmp	0x102949f
0000000001029480	movq	%rax, 0x10(%rsp)
0000000001029485	movq	$0x0, (%rsp)
000000000102948d	movb	$0x0, 0x8(%rsp)
0000000001029492	callq	runtime.startm
0000000001029497	movq	0x10(%rsp), %rax
000000000102949c	decq	%rax
000000000102949f	testq	%rax, %rax
00000000010294a2	je	0x10294ad
00000000010294a4	cmpl	$0x0, 0x8f645(%rip)
00000000010294ab	jne	0x1029480
00000000010294ad	movq	0x30(%rsp), %rbp
00000000010294b2	addq	$0x38, %rsp
00000000010294b6	retq
00000000010294b7	movq	0x30(%rsp), %rbp
00000000010294bc	addq	$0x38, %rsp
00000000010294c0	retq
00000000010294c1	callq	runtime.morestack_noctxt
00000000010294c6	jmp	runtime.injectglist
00000000010294cb	int3
00000000010294cc	int3
00000000010294cd	int3
00000000010294ce	int3
00000000010294cf	int3
runtime.schedule:
00000000010294d0	movq	%gs:0x30, %rcx
00000000010294d9	cmpq	0x10(%rcx), %rsp
00000000010294dd	jbe	0x1029822
00000000010294e3	subq	$0x40, %rsp
00000000010294e7	movq	%rbp, 0x38(%rsp)
00000000010294ec	leaq	0x38(%rsp), %rbp
00000000010294f1	movq	%gs:0x30, %rax
00000000010294fa	movq	0x30(%rax), %rcx
00000000010294fe	cmpl	$0x0, 0x100(%rcx)
0000000001029505	jne	0x1029807
000000000102950b	movq	%rax, 0x28(%rsp)
0000000001029510	cmpq	$0x0, 0x160(%rcx)
0000000001029518	jne	0x10297a4
000000000102951e	movq	0x30(%rax), %rcx
0000000001029522	testb	%al, (%rcx)
0000000001029524	addq	$0x115, %rcx
000000000102952b	cmpb	$0x0, (%rcx)
000000000102952e	je	0x1029543
0000000001029530	jmp	0x10297ec
0000000001029535	movq	%rax, (%rsp)
0000000001029539	callq	runtime.startlockedm
000000000102953e	movq	0x28(%rsp), %rax
0000000001029543	cmpl	$0x0, 0x8f62e(%rip)
000000000102954a	jne	0x1029795
0000000001029550	movq	0x30(%rax), %rcx
0000000001029554	movq	0xd0(%rcx), %rcx
000000000102955b	testb	%al, (%rcx)
000000000102955d	cmpl	$0x0, 0x22a0(%rcx)
0000000001029564	jne	0x1029786
000000000102956a	leaq	0x9b47f(%rip), %rcx
0000000001029571	cmpb	$0x0, (%rcx)
0000000001029574	je	0x102976f
000000000102957a	callq	runtime.traceReader
000000000102957f	movq	(%rsp), %rax
0000000001029583	testq	%rax, %rax
0000000001029586	jne	0x1029735
000000000102958c	testq	%rax, %rax
000000000102958f	je	0x10296f9
0000000001029595	testq	%rax, %rax
0000000001029598	je	0x1029667
000000000102959e	testq	%rax, %rax
00000000010295a1	je	0x1029615
00000000010295a3	xorl	%ecx, %ecx
00000000010295a5	testq	%rax, %rax
00000000010295a8	je	0x1029605
00000000010295aa	movq	0x28(%rsp), %rdx
00000000010295af	movq	0x30(%rdx), %rbx
00000000010295b3	testb	%al, (%rbx)
00000000010295b5	addq	$0x110, %rbx
00000000010295bc	cmpb	$0x0, (%rbx)
00000000010295bf	jne	0x10295e6
00000000010295c1	cmpq	$0x0, 0xd8(%rax)
00000000010295c9	jne	0x1029535
00000000010295cf	movq	%rax, (%rsp)
00000000010295d3	movb	%cl, 0x8(%rsp)
00000000010295d7	callq	runtime.execute
00000000010295dc	movq	0x38(%rsp), %rbp
00000000010295e1	addq	$0x40, %rsp
00000000010295e5	retq
00000000010295e6	movb	%cl, 0x1f(%rsp)
00000000010295ea	movq	%rax, 0x20(%rsp)
00000000010295ef	callq	runtime.resetspinning
00000000010295f4	movq	0x20(%rsp), %rax
00000000010295f9	movzbl	0x1f(%rsp), %ecx
00000000010295fe	movq	0x28(%rsp), %rdx
0000000001029603	jmp	0x10295c1
0000000001029605	callq	runtime.findrunnable
000000000102960a	movq	(%rsp), %rax
000000000102960e	movzbl	0x8(%rsp), %ecx
0000000001029613	jmp	0x10295aa
0000000001029615	movq	0x28(%rsp), %rax
000000000102961a	movq	0x30(%rax), %rcx
000000000102961e	movq	0xd0(%rcx), %rcx
0000000001029625	movq	%rcx, (%rsp)
0000000001029629	callq	runtime.runqget
000000000102962e	movq	0x8(%rsp), %rax
0000000001029633	movzbl	0x10(%rsp), %ecx
0000000001029638	testq	%rax, %rax
000000000102963b	je	0x102965d
000000000102963d	movq	0x28(%rsp), %rdx
0000000001029642	movq	0x30(%rdx), %rbx
0000000001029646	testb	%al, (%rbx)
0000000001029648	addq	$0x110, %rbx
000000000102964f	cmpb	$0x0, (%rbx)
0000000001029652	je	0x10295a5
0000000001029658	jmp	0x10297d1
000000000102965d	movq	0x28(%rsp), %rdx
0000000001029662	jmp	0x10295a5
0000000001029667	movq	0x28(%rsp), %rcx
000000000102966c	movq	0x30(%rcx), %rdx
0000000001029670	movq	0xd0(%rdx), %rdx
0000000001029677	movl	0x18(%rdx), %edx
000000000102967a	movl	$0x864b8a7e, %ebx
000000000102967f	imulq	%rdx, %rbx
0000000001029683	shrq	$0x25, %rbx
0000000001029687	imull	$0x3d, %ebx, %ebx
000000000102968a	cmpl	%ebx, %edx
000000000102968c	jne	0x102959e
0000000001029692	cmpl	$0x0, 0x8f46f(%rip)
0000000001029699	jle	0x102959e
000000000102969f	leaq	0x8f40a(%rip), %rax
00000000010296a6	movq	%rax, (%rsp)
00000000010296aa	callq	runtime.lock
00000000010296af	movq	0x28(%rsp), %rax
00000000010296b4	movq	0x30(%rax), %rcx
00000000010296b8	movq	0xd0(%rcx), %rcx
00000000010296bf	movq	%rcx, (%rsp)
00000000010296c3	movl	$0x1, 0x8(%rsp)
00000000010296cb	callq	runtime.globrunqget
00000000010296d0	movq	0x10(%rsp), %rax
00000000010296d5	movq	%rax, 0x20(%rsp)
00000000010296da	leaq	0x8f3cf(%rip), %rcx
00000000010296e1	movq	%rcx, (%rsp)
00000000010296e5	callq	runtime.unlock
00000000010296ea	movq	0x28(%rsp), %rcx
00000000010296ef	movq	0x20(%rsp), %rax
00000000010296f4	jmp	0x102959e
00000000010296f9	cmpl	$0x0, 0xab3f0(%rip)
0000000001029700	je	0x1029595
0000000001029706	movq	0x28(%rsp), %rax
000000000102970b	movq	0x30(%rax), %rcx
000000000102970f	movq	0xd0(%rcx), %rcx
0000000001029716	leaq	runtime.gcController(%rip), %rdx
000000000102971d	movq	%rdx, (%rsp)
0000000001029721	movq	%rcx, 0x8(%rsp)
0000000001029726	callq	"runtime.(*gcControllerState).findRunnableGCWorker"
000000000102972b	movq	0x10(%rsp), %rax
0000000001029730	jmp	0x1029595
0000000001029735	movq	%rax, 0x30(%rsp)
000000000102973a	movabsq	$0x100000004, %rax
0000000001029744	movq	%rax, 0x8(%rsp)
0000000001029749	callq	runtime.casgstatus
000000000102974e	movq	0x30(%rsp), %rax
0000000001029753	movq	%rax, (%rsp)
0000000001029757	movq	$0x0, 0x8(%rsp)
0000000001029760	callq	runtime.traceGoUnpark
0000000001029765	movq	0x30(%rsp), %rax
000000000102976a	jmp	0x102958c
000000000102976f	leaq	0x9b27b(%rip), %rcx
0000000001029776	cmpb	$0x0, (%rcx)
0000000001029779	jne	0x102957a
000000000102977f	xorl	%eax, %eax
0000000001029781	jmp	0x102958c
0000000001029786	callq	runtime.runSafePointFn
000000000102978b	movq	0x28(%rsp), %rax
0000000001029790	jmp	0x102956a
0000000001029795	callq	runtime.gcstopm
000000000102979a	movq	0x28(%rsp), %rax
000000000102979f	jmp	0x1029543
00000000010297a4	callq	runtime.stoplockedm
00000000010297a9	movq	0x28(%rsp), %rax
00000000010297ae	movq	0x30(%rax), %rcx
00000000010297b2	movq	0x160(%rcx), %rcx
00000000010297b9	movq	%rcx, (%rsp)
00000000010297bd	movb	$0x0, 0x8(%rsp)
00000000010297c2	callq	runtime.execute
00000000010297c7	movq	0x28(%rsp), %rax
00000000010297cc	jmp	0x102951e
00000000010297d1	leaq	0x442b7(%rip), %rax
00000000010297d8	movq	%rax, (%rsp)
00000000010297dc	movq	$0x22, 0x8(%rsp)
00000000010297e5	callq	runtime.throw
00000000010297ea	ud2
00000000010297ec	leaq	0x420b7(%rip), %rax
00000000010297f3	movq	%rax, (%rsp)
00000000010297f7	movq	$0x10, 0x8(%rsp)
0000000001029800	callq	runtime.throw
0000000001029805	ud2
0000000001029807	leaq	0x42cfa(%rip), %rax
000000000102980e	movq	%rax, (%rsp)
0000000001029812	movq	$0x17, 0x8(%rsp)
000000000102981b	callq	runtime.throw
0000000001029820	ud2
0000000001029822	callq	runtime.morestack_noctxt
0000000001029827	jmp	runtime.schedule
000000000102982c	int3
000000000102982d	int3
000000000102982e	int3
000000000102982f	int3
runtime.parkunlock_c:
0000000001029830	movq	%gs:0x30, %rcx
0000000001029839	cmpq	0x10(%rcx), %rsp
000000000102983d	jbe	0x102986a
000000000102983f	subq	$0x10, %rsp
0000000001029843	movq	%rbp, 0x8(%rsp)
0000000001029848	leaq	0x8(%rsp), %rbp
000000000102984d	movq	0x20(%rsp), %rax
0000000001029852	movq	%rax, (%rsp)
0000000001029856	callq	runtime.unlock
000000000102985b	movb	$0x1, 0x28(%rsp)
0000000001029860	movq	0x8(%rsp), %rbp
0000000001029865	addq	$0x10, %rsp
0000000001029869	retq
000000000102986a	callq	runtime.morestack_noctxt
000000000102986f	jmp	runtime.parkunlock_c
0000000001029871	int3
0000000001029872	int3
0000000001029873	int3
0000000001029874	int3
0000000001029875	int3
0000000001029876	int3
0000000001029877	int3
0000000001029878	int3
0000000001029879	int3
000000000102987a	int3
000000000102987b	int3
000000000102987c	int3
000000000102987d	int3
000000000102987e	int3
000000000102987f	int3
runtime.park_m:
0000000001029880	movq	%gs:0x30, %rcx
0000000001029889	cmpq	0x10(%rcx), %rsp
000000000102988d	jbe	0x1029a5d
0000000001029893	subq	$0x28, %rsp
0000000001029897	movq	%rbp, 0x20(%rsp)
000000000102989c	leaq	0x20(%rsp), %rbp
00000000010298a1	movq	%gs:0x30, %rax
00000000010298aa	movq	%rax, 0x18(%rsp)
00000000010298af	leaq	0x9b13a(%rip), %rcx
00000000010298b6	cmpb	$0x0, (%rcx)
00000000010298b9	jne	0x1029a39
00000000010298bf	movq	0x30(%rsp), %rax
00000000010298c4	movq	%rax, (%rsp)
00000000010298c8	movabsq	$0x400000002, %rcx
00000000010298d2	movq	%rcx, 0x8(%rsp)
00000000010298d7	callq	runtime.casgstatus
00000000010298dc	movq	%gs:0x30, %rax
00000000010298e5	movq	0x30(%rax), %rcx
00000000010298e9	movq	0xc0(%rcx), %rdx
00000000010298f0	testb	%al, (%rcx)
00000000010298f2	leaq	0x30(%rdx), %rcx
00000000010298f6	testb	%al, (%rcx)
00000000010298f8	xorl	%ecx, %ecx
00000000010298fa	movq	%rcx, 0x30(%rdx)
00000000010298fe	movq	0x30(%rax), %rcx
0000000001029902	testb	%al, (%rax)
0000000001029904	leaq	0xc0(%rcx), %rax
000000000102990b	testb	%al, (%rax)
000000000102990d	xorl	%eax, %eax
000000000102990f	movq	%rax, 0xc0(%rcx)
0000000001029916	movq	0x18(%rsp), %rax
000000000102991b	movq	0x30(%rax), %rcx
000000000102991f	cmpq	$0x0, 0x278(%rcx)
0000000001029927	jne	0x1029938
0000000001029929	callq	runtime.schedule
000000000102992e	movq	0x20(%rsp), %rbp
0000000001029933	addq	$0x28, %rsp
0000000001029937	retq
0000000001029938	leaq	0x278(%rcx), %rax
000000000102993f	testb	%al, (%rax)
0000000001029941	movq	0x278(%rcx), %rdx
0000000001029948	movq	0x280(%rcx), %rax
000000000102994f	movq	%rax, 0x8(%rsp)
0000000001029954	movq	0x30(%rsp), %rax
0000000001029959	movq	%rax, (%rsp)
000000000102995d	movq	(%rdx), %rcx
0000000001029960	callq	*%rcx
0000000001029962	movq	0x18(%rsp), %rax
0000000001029967	movq	0x30(%rax), %rcx
000000000102996b	testb	%al, (%rcx)
000000000102996d	leaq	0x10(%rsp), %rbx
0000000001029972	movzbl	(%rbx), %ebx
0000000001029975	cmpb	$0x0, %bl
0000000001029978	cmpl	$0x0, 0xab2b1(%rip)
000000000102997f	jne	0x1029a20
0000000001029985	movq	$0x0, 0x278(%rcx)
0000000001029990	movq	0x30(%rax), %rcx
0000000001029994	testb	%al, (%rcx)
0000000001029996	cmpl	$0x0, 0xab293(%rip)
000000000102999d	jne	0x1029a0d
000000000102999f	movq	$0x0, 0x280(%rcx)
00000000010299aa	cmpb	$0x0, %bl
00000000010299ad	jne	0x1029929
00000000010299b3	leaq	0x9b036(%rip), %rax
00000000010299ba	cmpb	$0x0, (%rax)
00000000010299bd	jne	0x10299f4
00000000010299bf	movq	0x30(%rsp), %rax
00000000010299c4	movq	%rax, (%rsp)
00000000010299c8	movabsq	$0x100000004, %rcx
00000000010299d2	movq	%rcx, 0x8(%rsp)
00000000010299d7	callq	runtime.casgstatus
00000000010299dc	movq	0x30(%rsp), %rax
00000000010299e1	movq	%rax, (%rsp)
00000000010299e5	movb	$0x1, 0x8(%rsp)
00000000010299ea	callq	runtime.execute
00000000010299ef	jmp	0x1029929
00000000010299f4	movq	0x30(%rsp), %rax
00000000010299f9	movq	%rax, (%rsp)
00000000010299fd	movq	$0x2, 0x8(%rsp)
0000000001029a06	callq	runtime.traceGoUnpark
0000000001029a0b	jmp	0x10299bf
0000000001029a0d	leaq	0x280(%rcx), %rdi
0000000001029a14	xorl	%eax, %eax
0000000001029a16	callq	runtime.gcWriteBarrier
0000000001029a1b	cmpb	$0x0, %bl
0000000001029a1e	jmp	0x10299ad
0000000001029a20	leaq	0x278(%rcx), %rdi
0000000001029a27	movq	%rax, %rcx
0000000001029a2a	xorl	%eax, %eax
0000000001029a2c	callq	runtime.gcWriteBarrier
0000000001029a31	movq	%rcx, %rax
0000000001029a34	jmp	0x1029990
0000000001029a39	movq	0x30(%rax), %rcx
0000000001029a3d	movzbl	0x288(%rcx), %edx
0000000001029a44	movq	0x290(%rcx), %rcx
0000000001029a4b	movq	%rcx, 0x8(%rsp)
0000000001029a50	movb	%dl, (%rsp)
0000000001029a53	callq	runtime.traceGoPark
0000000001029a58	jmp	0x10298bf
0000000001029a5d	callq	runtime.morestack_noctxt
0000000001029a62	jmp	runtime.park_m
0000000001029a67	int3
0000000001029a68	int3
0000000001029a69	int3
0000000001029a6a	int3
0000000001029a6b	int3
0000000001029a6c	int3
0000000001029a6d	int3
0000000001029a6e	int3
0000000001029a6f	int3
runtime.goschedImpl:
0000000001029a70	movq	%gs:0x30, %rcx
0000000001029a79	cmpq	0x10(%rcx), %rsp
0000000001029a7d	jbe	0x1029ce8
0000000001029a83	subq	$0x30, %rsp
0000000001029a87	movq	%rbp, 0x28(%rsp)
0000000001029a8c	leaq	0x28(%rsp), %rbp
0000000001029a91	movq	0x38(%rsp), %rax
0000000001029a96	movl	0x90(%rax), %ecx
0000000001029a9c	btrl	$0xc, %ecx
0000000001029aa0	cmpl	$0x2, %ecx
0000000001029aa3	jne	0x1029b84
0000000001029aa9	movq	%rax, (%rsp)
0000000001029aad	movabsq	$0x100000002, %rcx
0000000001029ab7	movq	%rcx, 0x8(%rsp)
0000000001029abc	callq	runtime.casgstatus
0000000001029ac1	movq	%gs:0x30, %rax
0000000001029aca	movq	0x30(%rax), %rcx
0000000001029ace	movq	0xc0(%rcx), %rdx
0000000001029ad5	testb	%al, (%rcx)
0000000001029ad7	leaq	0x30(%rdx), %rcx
0000000001029adb	testb	%al, (%rcx)
0000000001029add	xorl	%ecx, %ecx
0000000001029adf	movq	%rcx, 0x30(%rdx)
0000000001029ae3	movq	0x30(%rax), %rcx
0000000001029ae7	testb	%al, (%rax)
0000000001029ae9	leaq	0xc0(%rcx), %rax
0000000001029af0	testb	%al, (%rax)
0000000001029af2	xorl	%eax, %eax
0000000001029af4	movq	%rax, 0xc0(%rcx)
0000000001029afb	leaq	0x8efae(%rip), %rax
0000000001029b02	movq	%rax, (%rsp)
0000000001029b06	callq	runtime.lock
0000000001029b0b	movq	0x38(%rsp), %rax
0000000001029b10	movq	$0x0, 0xa0(%rax)
0000000001029b1b	movq	0x8efde(%rip), %rcx
0000000001029b22	testq	%rcx, %rcx
0000000001029b25	je	0x1029b6f
0000000001029b27	leaq	0xa0(%rcx), %rdx
0000000001029b2e	testb	%al, (%rdx)
0000000001029b30	movq	%rax, %rdx
0000000001029b33	movq	%rax, 0xa0(%rcx)
0000000001029b3a	leaq	0x8efbf(%rip), %rax
0000000001029b41	testb	%al, (%rax)
0000000001029b43	movq	%rdx, 0x8efb6(%rip)
0000000001029b4a	incl	0x8efb8(%rip)
0000000001029b50	leaq	0x8ef59(%rip), %rax
0000000001029b57	movq	%rax, (%rsp)
0000000001029b5b	callq	runtime.unlock
0000000001029b60	callq	runtime.schedule
0000000001029b65	movq	0x28(%rsp), %rbp
0000000001029b6a	addq	$0x30, %rsp
0000000001029b6e	retq
0000000001029b6f	leaq	0x8ef82(%rip), %rcx
0000000001029b76	testb	%al, (%rcx)
0000000001029b78	movq	%rax, %rdx
0000000001029b7b	movq	%rax, 0x8ef76(%rip)
0000000001029b82	jmp	0x1029b3a
0000000001029b84	movq	%gs:0x30, %rcx
0000000001029b8d	movq	%rcx, 0x20(%rsp)
0000000001029b92	movl	0x90(%rax), %edx
0000000001029b98	movl	%edx, 0x10(%rsp)
0000000001029b9c	movq	0x98(%rax), %rbx
0000000001029ba3	movq	%rbx, 0x18(%rsp)
0000000001029ba8	callq	runtime.printlock
0000000001029bad	leaq	0x41cd6(%rip), %rax
0000000001029bb4	movq	%rax, (%rsp)
0000000001029bb8	movq	$0x10, 0x8(%rsp)
0000000001029bc1	callq	runtime.printstring
0000000001029bc6	movq	0x38(%rsp), %rax
0000000001029bcb	movq	%rax, (%rsp)
0000000001029bcf	callq	runtime.printpointer
0000000001029bd4	leaq	0x41102(%rip), %rax
0000000001029bdb	movq	%rax, (%rsp)
0000000001029bdf	movq	$0x7, 0x8(%rsp)
0000000001029be8	callq	runtime.printstring
0000000001029bed	movq	0x18(%rsp), %rax
0000000001029bf2	movq	%rax, (%rsp)
0000000001029bf6	callq	runtime.printint
0000000001029bfb	leaq	0x41f70(%rip), %rax
0000000001029c02	movq	%rax, (%rsp)
0000000001029c06	movq	$0x13, 0x8(%rsp)
0000000001029c0f	callq	runtime.printstring
0000000001029c14	movl	0x10(%rsp), %eax
0000000001029c18	movl	%eax, %eax
0000000001029c1a	movq	%rax, (%rsp)
0000000001029c1e	callq	runtime.printuint
0000000001029c23	callq	runtime.printnl
0000000001029c28	callq	runtime.printunlock
0000000001029c2d	movq	0x20(%rsp), %rax
0000000001029c32	movl	0x90(%rax), %ecx
0000000001029c38	movl	%ecx, 0x14(%rsp)
0000000001029c3c	movq	0x98(%rax), %rdx
0000000001029c43	movq	%rdx, 0x18(%rsp)
0000000001029c48	callq	runtime.printlock
0000000001029c4d	leaq	0x41c26(%rip), %rax
0000000001029c54	movq	%rax, (%rsp)
0000000001029c58	movq	$0x10, 0x8(%rsp)
0000000001029c61	callq	runtime.printstring
0000000001029c66	movq	0x20(%rsp), %rax
0000000001029c6b	movq	%rax, (%rsp)
0000000001029c6f	callq	runtime.printpointer
0000000001029c74	leaq	0x41062(%rip), %rax
0000000001029c7b	movq	%rax, (%rsp)
0000000001029c7f	movq	$0x7, 0x8(%rsp)
0000000001029c88	callq	runtime.printstring
0000000001029c8d	movq	0x18(%rsp), %rax
0000000001029c92	movq	%rax, (%rsp)
0000000001029c96	callq	runtime.printint
0000000001029c9b	leaq	0x41ebd(%rip), %rax
0000000001029ca2	movq	%rax, (%rsp)
0000000001029ca6	movq	$0x13, 0x8(%rsp)
0000000001029caf	callq	runtime.printstring
0000000001029cb4	movl	0x14(%rsp), %eax
0000000001029cb8	movl	%eax, %eax
0000000001029cba	movq	%rax, (%rsp)
0000000001029cbe	callq	runtime.printuint
0000000001029cc3	callq	runtime.printnl
0000000001029cc8	callq	runtime.printunlock
0000000001029ccd	leaq	0x41610(%rip), %rax
0000000001029cd4	movq	%rax, (%rsp)
0000000001029cd8	movq	$0xc, 0x8(%rsp)
0000000001029ce1	callq	runtime.throw
0000000001029ce6	ud2
0000000001029ce8	callq	runtime.morestack_noctxt
0000000001029ced	jmp	runtime.goschedImpl
0000000001029cf2	int3
0000000001029cf3	int3
0000000001029cf4	int3
0000000001029cf5	int3
0000000001029cf6	int3
0000000001029cf7	int3
0000000001029cf8	int3
0000000001029cf9	int3
0000000001029cfa	int3
0000000001029cfb	int3
0000000001029cfc	int3
0000000001029cfd	int3
0000000001029cfe	int3
0000000001029cff	int3
runtime.gosched_m:
0000000001029d00	movq	%gs:0x30, %rcx
0000000001029d09	cmpq	0x10(%rcx), %rsp
0000000001029d0d	jbe	0x1029d48
0000000001029d0f	subq	$0x10, %rsp
0000000001029d13	movq	%rbp, 0x8(%rsp)
0000000001029d18	leaq	0x8(%rsp), %rbp
0000000001029d1d	leaq	0x9accc(%rip), %rax
0000000001029d24	cmpb	$0x0, (%rax)
0000000001029d27	jne	0x1029d41
0000000001029d29	movq	0x18(%rsp), %rax
0000000001029d2e	movq	%rax, (%rsp)
0000000001029d32	callq	runtime.goschedImpl
0000000001029d37	movq	0x8(%rsp), %rbp
0000000001029d3c	addq	$0x10, %rsp
0000000001029d40	retq
0000000001029d41	callq	runtime.traceGoSched
0000000001029d46	jmp	0x1029d29
0000000001029d48	callq	runtime.morestack_noctxt
0000000001029d4d	jmp	runtime.gosched_m
0000000001029d4f	int3
runtime.gopreempt_m:
0000000001029d50	movq	%gs:0x30, %rcx
0000000001029d59	cmpq	0x10(%rcx), %rsp
0000000001029d5d	jbe	0x1029d98
0000000001029d5f	subq	$0x10, %rsp
0000000001029d63	movq	%rbp, 0x8(%rsp)
0000000001029d68	leaq	0x8(%rsp), %rbp
0000000001029d6d	leaq	0x9ac7c(%rip), %rax
0000000001029d74	cmpb	$0x0, (%rax)
0000000001029d77	jne	0x1029d91
0000000001029d79	movq	0x18(%rsp), %rax
0000000001029d7e	movq	%rax, (%rsp)
0000000001029d82	callq	runtime.goschedImpl
0000000001029d87	movq	0x8(%rsp), %rbp
0000000001029d8c	addq	$0x10, %rsp
0000000001029d90	retq
0000000001029d91	callq	runtime.traceGoPreempt
0000000001029d96	jmp	0x1029d79
0000000001029d98	callq	runtime.morestack_noctxt
0000000001029d9d	jmp	runtime.gopreempt_m
0000000001029d9f	int3
runtime.goexit1:
0000000001029da0	movq	%gs:0x30, %rcx
0000000001029da9	cmpq	0x10(%rcx), %rsp
0000000001029dad	jbe	0x1029dea
0000000001029daf	subq	$0x10, %rsp
0000000001029db3	movq	%rbp, 0x8(%rsp)
0000000001029db8	leaq	0x8(%rsp), %rbp
0000000001029dbd	leaq	0x9ac2c(%rip), %rax
0000000001029dc4	cmpb	$0x0, (%rax)
0000000001029dc7	jne	0x1029de3
0000000001029dc9	leaq	0x450b0(%rip), %rax
0000000001029dd0	movq	%rax, (%rsp)
0000000001029dd4	callq	runtime.mcall
0000000001029dd9	movq	0x8(%rsp), %rbp
0000000001029dde	addq	$0x10, %rsp
0000000001029de2	retq
0000000001029de3	callq	runtime.traceGoEnd
0000000001029de8	jmp	0x1029dc9
0000000001029dea	callq	runtime.morestack_noctxt
0000000001029def	jmp	runtime.goexit1
0000000001029df1	int3
0000000001029df2	int3
0000000001029df3	int3
0000000001029df4	int3
0000000001029df5	int3
0000000001029df6	int3
0000000001029df7	int3
0000000001029df8	int3
0000000001029df9	int3
0000000001029dfa	int3
0000000001029dfb	int3
0000000001029dfc	int3
0000000001029dfd	int3
0000000001029dfe	int3
0000000001029dff	int3
runtime.goexit0:
0000000001029e00	movq	%gs:0x30, %rcx
0000000001029e09	cmpq	0x10(%rcx), %rsp
0000000001029e0d	jbe	0x102a0d2
0000000001029e13	subq	$0x30, %rsp
0000000001029e17	movq	%rbp, 0x28(%rsp)
0000000001029e1c	leaq	0x28(%rsp), %rbp
0000000001029e21	movq	%gs:0x30, %rax
0000000001029e2a	movq	%rax, 0x20(%rsp)
0000000001029e2f	movq	0x38(%rsp), %rcx
0000000001029e34	movq	%rcx, (%rsp)
0000000001029e38	movabsq	$0x600000002, %rdx
0000000001029e42	movq	%rdx, 0x8(%rsp)
0000000001029e47	callq	runtime.casgstatus
0000000001029e4c	movq	0x38(%rsp), %rax
0000000001029e51	movq	%rax, (%rsp)
0000000001029e55	callq	runtime.isSystemGoroutine
0000000001029e5a	leaq	0x8(%rsp), %rax
0000000001029e5f	cmpb	$0x0, (%rax)
0000000001029e62	je	0x1029e74
0000000001029e64	movl	$0xffffffff, %ecx
0000000001029e69	leaq	0x8ec70(%rip), %rdx
0000000001029e70	lock
0000000001029e71	xaddl	%ecx, (%rdx)
0000000001029e74	movq	0x38(%rsp), %rcx
0000000001029e79	testb	%al, (%rcx)
0000000001029e7b	cmpl	$0x0, 0xaadae(%rip)
0000000001029e82	jne	0x102a06e
0000000001029e88	movq	$0x0, 0x30(%rcx)
0000000001029e90	movq	0xd8(%rcx), %rdx
0000000001029e97	cmpq	$0x0, %rdx
0000000001029e9b	movq	$0x0, 0xd8(%rcx)
0000000001029ea6	movq	0x20(%rsp), %rbx
0000000001029eab	movq	0x30(%rbx), %rsi
0000000001029eaf	movq	$0x0, 0x160(%rsi)
0000000001029eba	movb	$0x0, 0xb2(%rcx)
0000000001029ec1	cmpl	$0x0, 0xaad68(%rip)
0000000001029ec8	jne	0x102a05e
0000000001029ece	movq	$0x0, 0x28(%rcx)
0000000001029ed6	movq	$0x0, 0x20(%rcx)
0000000001029ede	xorps	%xmm0, %xmm0
0000000001029ee1	movups	%xmm0, 0xf0(%rcx)
0000000001029ee8	cmpl	$0x0, 0xaad41(%rip)
0000000001029eef	jne	0x102a048
0000000001029ef5	movq	$0x0, 0xe8(%rcx)
0000000001029f00	movb	$0x0, 0xb0(%rcx)
0000000001029f07	cmpl	$0x0, 0xaad22(%rip)
0000000001029f0e	jne	0x102a01b
0000000001029f14	movq	$0x0, 0x88(%rcx)
0000000001029f1f	movups	%xmm0, 0x158(%rcx)
0000000001029f26	cmpl	$0x0, 0xaabc3(%rip)
0000000001029f2d	je	0x1029f67
0000000001029f2f	movq	0x170(%rcx), %rax
0000000001029f36	testq	%rax, %rax
0000000001029f39	jle	0x1029f67
0000000001029f3b	xorps	%xmm0, %xmm0
0000000001029f3e	cvtsi2sdq	%rax, %xmm0
0000000001029f43	mulsd	0xab0d5(%rip), %xmm0
0000000001029f4b	cvttsd2si	%xmm0, %rax
0000000001029f50	leaq	0xab091(%rip), %rsi
0000000001029f57	lock
0000000001029f58	xaddq	%rax, (%rsi)
0000000001029f5c	movq	$0x0, 0x170(%rcx)
0000000001029f67	movb	$0x1, 0xb5(%rcx)
0000000001029f6e	movq	%gs:0x30, %rax
0000000001029f77	movq	0x30(%rax), %rsi
0000000001029f7b	movq	0xc0(%rsi), %rdi
0000000001029f82	testb	%al, (%rsi)
0000000001029f84	leaq	0x30(%rdi), %rsi
0000000001029f88	testb	%al, (%rsi)
0000000001029f8a	xorl	%esi, %esi
0000000001029f8c	movq	%rsi, 0x30(%rdi)
0000000001029f90	movq	0x30(%rax), %rsi
0000000001029f94	testb	%al, (%rax)
0000000001029f96	leaq	0xc0(%rsi), %rax
0000000001029f9d	testb	%al, (%rax)
0000000001029f9f	xorl	%eax, %eax
0000000001029fa1	movq	%rax, 0xc0(%rsi)
0000000001029fa8	movq	0x30(%rbx), %rax
0000000001029fac	movl	0x26c(%rax), %esi
0000000001029fb2	testl	%esi, %esi
0000000001029fb4	jne	0x102a07e
0000000001029fba	movq	%rdx, 0x18(%rsp)
0000000001029fbf	movl	$0x0, 0x268(%rax)
0000000001029fc9	movq	0x30(%rbx), %rax
0000000001029fcd	movq	0xd0(%rax), %rax
0000000001029fd4	movq	%rax, (%rsp)
0000000001029fd8	movq	%rcx, 0x8(%rsp)
0000000001029fdd	callq	runtime.gfput
0000000001029fe2	movq	0x18(%rsp), %rax
0000000001029fe7	cmpq	$0x0, %rax
0000000001029feb	jne	0x1029ffc
0000000001029fed	callq	runtime.schedule
0000000001029ff2	movq	0x28(%rsp), %rbp
0000000001029ff7	addq	$0x30, %rsp
0000000001029ffb	retq
0000000001029ffc	movq	0x20(%rsp), %rax
000000000102a001	movq	0x30(%rax), %rax
000000000102a005	movq	(%rax), %rcx
000000000102a008	testb	%al, (%rcx)
000000000102a00a	testb	%al, (%rax)
000000000102a00c	leaq	0x38(%rcx), %rax
000000000102a010	movq	%rax, (%rsp)
000000000102a014	callq	runtime.gogo
000000000102a019	jmp	0x1029fed
000000000102a01b	leaq	0x88(%rcx), %rdi
000000000102a022	xorl	%eax, %eax
000000000102a024	callq	runtime.gcWriteBarrier
000000000102a029	leaq	0x158(%rcx), %rdi
000000000102a030	callq	runtime.gcWriteBarrier
000000000102a035	leaq	0x160(%rcx), %rdi
000000000102a03c	xorl	%eax, %eax
000000000102a03e	callq	runtime.gcWriteBarrier
000000000102a043	jmp	0x1029f26
000000000102a048	leaq	0xe8(%rcx), %rdi
000000000102a04f	xorl	%eax, %eax
000000000102a051	callq	runtime.gcWriteBarrier
000000000102a056	xorps	%xmm0, %xmm0
000000000102a059	jmp	0x1029f00
000000000102a05e	leaq	0x28(%rcx), %rdi
000000000102a062	xorl	%eax, %eax
000000000102a064	callq	runtime.gcWriteBarrier
000000000102a069	jmp	0x1029ed6
000000000102a06e	leaq	0x30(%rcx), %rdi
000000000102a072	xorl	%eax, %eax
000000000102a074	callq	runtime.gcWriteBarrier
000000000102a079	jmp	0x1029e90
000000000102a07e	movl	%esi, 0x14(%rsp)
000000000102a082	callq	runtime.printlock
000000000102a087	leaq	0x4234f(%rip), %rax
000000000102a08e	movq	%rax, (%rsp)
000000000102a092	movq	$0x17, 0x8(%rsp)
000000000102a09b	callq	runtime.printstring
000000000102a0a0	movl	0x14(%rsp), %eax
000000000102a0a4	movq	%rax, (%rsp)
000000000102a0a8	callq	runtime.printuint
000000000102a0ad	callq	runtime.printnl
000000000102a0b2	callq	runtime.printunlock
000000000102a0b7	leaq	0x429dc(%rip), %rax
000000000102a0be	movq	%rax, (%rsp)
000000000102a0c2	movq	$0x1b, 0x8(%rsp)
000000000102a0cb	callq	runtime.throw
000000000102a0d0	ud2
000000000102a0d2	callq	runtime.morestack_noctxt
000000000102a0d7	jmp	runtime.goexit0
000000000102a0dc	int3
000000000102a0dd	int3
000000000102a0de	int3
000000000102a0df	int3
runtime.save:
000000000102a0e0	movq	%gs:0x30, %rax
000000000102a0e9	movq	0x8(%rsp), %rcx
000000000102a0ee	movq	%rcx, 0x40(%rax)
000000000102a0f2	movq	0x10(%rsp), %rcx
000000000102a0f7	movq	%rcx, 0x38(%rax)
000000000102a0fb	movq	$0x0, 0x60(%rax)
000000000102a103	movq	$0x0, 0x58(%rax)
000000000102a10b	movq	%rax, %rcx
000000000102a10e	movq	%rax, 0x48(%rcx)
000000000102a112	cmpq	$0x0, 0x50(%rcx)
000000000102a117	jne	0x102a11a
000000000102a119	retq
000000000102a11a	callq	runtime.badctxt
000000000102a11f	jmp	0x102a119
000000000102a121	int3
000000000102a122	int3
000000000102a123	int3
000000000102a124	int3
000000000102a125	int3
000000000102a126	int3
000000000102a127	int3
000000000102a128	int3
000000000102a129	int3
000000000102a12a	int3
000000000102a12b	int3
000000000102a12c	int3
000000000102a12d	int3
000000000102a12e	int3
000000000102a12f	int3
runtime.reentersyscall:
000000000102a130	subq	$0x30, %rsp
000000000102a134	movq	%rbp, 0x28(%rsp)
000000000102a139	leaq	0x28(%rsp), %rbp
000000000102a13e	movq	%gs:0x30, %rax
000000000102a147	movq	%rax, 0x10(%rsp)
000000000102a14c	movq	0x30(%rax), %rcx
000000000102a150	incl	0x100(%rcx)
000000000102a156	movq	$-0x522, 0x10(%rax)
000000000102a15e	movb	$0x1, 0xb6(%rax)
000000000102a165	movq	0x38(%rsp), %rcx
000000000102a16a	movq	%rcx, (%rsp)
000000000102a16e	movq	0x40(%rsp), %rdx
000000000102a173	movq	%rdx, 0x8(%rsp)
000000000102a178	callq	runtime.save
000000000102a17d	movq	0x40(%rsp), %rax
000000000102a182	movq	0x10(%rsp), %rcx
000000000102a187	movq	%rax, 0x70(%rcx)
000000000102a18b	movq	0x38(%rsp), %rdx
000000000102a190	movq	%rdx, 0x78(%rcx)
000000000102a194	movq	%rcx, (%rsp)
000000000102a198	movabsq	$0x300000002, %rbx
000000000102a1a2	movq	%rbx, 0x8(%rsp)
000000000102a1a7	callq	runtime.casgstatus
000000000102a1ac	movq	0x10(%rsp), %rax
000000000102a1b1	movq	0x70(%rax), %rcx
000000000102a1b5	movq	(%rax), %rdx
000000000102a1b8	cmpq	%rdx, %rcx
000000000102a1bb	jae	0x102a350
000000000102a1c1	xorps	%xmm0, %xmm0
000000000102a1c4	movups	%xmm0, 0x18(%rsp)
000000000102a1c9	leaq	runtime.reentersyscall.func1(%rip), %rcx
000000000102a1d0	movq	%rcx, 0x18(%rsp)
000000000102a1d5	movq	%rax, 0x20(%rsp)
000000000102a1da	leaq	0x18(%rsp), %rcx
000000000102a1df	movq	%rcx, (%rsp)
000000000102a1e3	callq	runtime.systemstack
000000000102a1e8	leaq	0x9a801(%rip), %rax
000000000102a1ef	cmpb	$0x0, (%rax)
000000000102a1f2	jne	0x102a323
000000000102a1f8	movl	0x8e98a(%rip), %eax
000000000102a1fe	testl	%eax, %eax
000000000102a200	jne	0x102a2f6
000000000102a206	movq	0x10(%rsp), %rax
000000000102a20b	movq	0x30(%rax), %rcx
000000000102a20f	movq	0xd0(%rcx), %rcx
000000000102a216	testb	%al, (%rcx)
000000000102a218	cmpl	$0x0, 0x22a0(%rcx)
000000000102a21f	jne	0x102a2c4
000000000102a225	movq	0x30(%rax), %rcx
000000000102a229	movq	0xd0(%rcx), %rdx
000000000102a230	movl	0x1c(%rdx), %edx
000000000102a233	movl	%edx, 0x29c(%rcx)
000000000102a239	movb	$0x1, 0xb8(%rax)
000000000102a240	movq	0x30(%rax), %rcx
000000000102a244	movq	$0x0, 0x158(%rcx)
000000000102a24f	movq	0x30(%rax), %rcx
000000000102a253	movq	0xd0(%rcx), %rcx
000000000102a25a	movq	$0x0, 0x40(%rcx)
000000000102a262	movq	0x30(%rax), %rcx
000000000102a266	movq	0xd0(%rcx), %rdx
000000000102a26d	testb	%al, (%rcx)
000000000102a26f	movl	$0x2, %ecx
000000000102a274	xchgl	%ecx, 0xc(%rdx)
000000000102a277	cmpl	$0x0, 0x8e8fa(%rip)
000000000102a27e	jne	0x102a295
000000000102a280	movq	0x30(%rax), %rax
000000000102a284	addl	$-0x1, 0x100(%rax)
000000000102a28b	movq	0x28(%rsp), %rbp
000000000102a290	addq	$0x30, %rsp
000000000102a294	retq
000000000102a295	leaq	0x44b54(%rip), %rax
000000000102a29c	movq	%rax, (%rsp)
000000000102a2a0	callq	runtime.systemstack
000000000102a2a5	movq	0x38(%rsp), %rax
000000000102a2aa	movq	%rax, (%rsp)
000000000102a2ae	movq	0x40(%rsp), %rax
000000000102a2b3	movq	%rax, 0x8(%rsp)
000000000102a2b8	callq	runtime.save
000000000102a2bd	movq	0x10(%rsp), %rax
000000000102a2c2	jmp	0x102a280
000000000102a2c4	leaq	0x44d7d(%rip), %rax
000000000102a2cb	movq	%rax, (%rsp)
000000000102a2cf	callq	runtime.systemstack
000000000102a2d4	movq	0x38(%rsp), %rax
000000000102a2d9	movq	%rax, (%rsp)
000000000102a2dd	movq	0x40(%rsp), %rcx
000000000102a2e2	movq	%rcx, 0x8(%rsp)
000000000102a2e7	callq	runtime.save
000000000102a2ec	movq	0x10(%rsp), %rax
000000000102a2f1	jmp	0x102a225
000000000102a2f6	leaq	0x44afb(%rip), %rax
000000000102a2fd	movq	%rax, (%rsp)
000000000102a301	callq	runtime.systemstack
000000000102a306	movq	0x38(%rsp), %rax
000000000102a30b	movq	%rax, (%rsp)
000000000102a30f	movq	0x40(%rsp), %rcx
000000000102a314	movq	%rcx, 0x8(%rsp)
000000000102a319	callq	runtime.save
000000000102a31e	jmp	0x102a206
000000000102a323	leaq	0x44d9e(%rip), %rax
000000000102a32a	movq	%rax, (%rsp)
000000000102a32e	callq	runtime.systemstack
000000000102a333	movq	0x38(%rsp), %rax
000000000102a338	movq	%rax, (%rsp)
000000000102a33c	movq	0x40(%rsp), %rcx
000000000102a341	movq	%rcx, 0x8(%rsp)
000000000102a346	callq	runtime.save
000000000102a34b	jmp	0x102a1f8
000000000102a350	movq	0x8(%rax), %rdx
000000000102a354	cmpq	%rcx, %rdx
000000000102a357	jb	0x102a1c1
000000000102a35d	jmp	0x102a1e8
000000000102a362	int3
000000000102a363	int3
000000000102a364	int3
000000000102a365	int3
000000000102a366	int3
000000000102a367	int3
000000000102a368	int3
000000000102a369	int3
000000000102a36a	int3
000000000102a36b	int3
000000000102a36c	int3
000000000102a36d	int3
000000000102a36e	int3
000000000102a36f	int3
runtime.entersyscall:
000000000102a370	subq	$0x18, %rsp
000000000102a374	movq	%rbp, 0x10(%rsp)
000000000102a379	leaq	0x10(%rsp), %rbp
000000000102a37e	movq	0x18(%rsp), %rax
000000000102a383	movq	%rax, (%rsp)
000000000102a387	leaq	0x20(%rsp), %rax
000000000102a38c	movq	%rax, 0x8(%rsp)
000000000102a391	callq	runtime.reentersyscall
000000000102a396	movq	0x10(%rsp), %rbp
000000000102a39b	addq	$0x18, %rsp
000000000102a39f	retq
runtime.entersyscall_sysmon:
000000000102a3a0	movq	%gs:0x30, %rcx
000000000102a3a9	cmpq	0x10(%rcx), %rsp
000000000102a3ad	jbe	0x102a40e
000000000102a3af	subq	$0x10, %rsp
000000000102a3b3	movq	%rbp, 0x8(%rsp)
000000000102a3b8	leaq	0x8(%rsp), %rbp
000000000102a3bd	leaq	0x8e6ec(%rip), %rax
000000000102a3c4	movq	%rax, (%rsp)
000000000102a3c8	callq	runtime.lock
000000000102a3cd	movl	0x8e7b5(%rip), %eax
000000000102a3d3	testl	%eax, %eax
000000000102a3d5	jne	0x102a3f1
000000000102a3d7	leaq	0x8e6d2(%rip), %rax
000000000102a3de	movq	%rax, (%rsp)
000000000102a3e2	callq	runtime.unlock
000000000102a3e7	movq	0x8(%rsp), %rbp
000000000102a3ec	addq	$0x10, %rsp
000000000102a3f0	retq
000000000102a3f1	xorl	%eax, %eax
000000000102a3f3	leaq	0x8e78e(%rip), %rcx
000000000102a3fa	xchgl	%eax, (%rcx)
000000000102a3fc	leaq	0x8e78d(%rip), %rax
000000000102a403	movq	%rax, (%rsp)
000000000102a407	callq	runtime.notewakeup
000000000102a40c	jmp	0x102a3d7
000000000102a40e	callq	runtime.morestack_noctxt
000000000102a413	jmp	runtime.entersyscall_sysmon
000000000102a415	int3
000000000102a416	int3
000000000102a417	int3
000000000102a418	int3
000000000102a419	int3
000000000102a41a	int3
000000000102a41b	int3
000000000102a41c	int3
000000000102a41d	int3
000000000102a41e	int3
000000000102a41f	int3
runtime.entersyscall_gcwait:
000000000102a420	movq	%gs:0x30, %rcx
000000000102a429	cmpq	0x10(%rcx), %rsp
000000000102a42d	jbe	0x102a4fb
000000000102a433	subq	$0x18, %rsp
000000000102a437	movq	%rbp, 0x10(%rsp)
000000000102a43c	leaq	0x10(%rsp), %rbp
000000000102a441	movq	%gs:0x30, %rax
000000000102a44a	movq	0x30(%rax), %rax
000000000102a44e	movq	0xd0(%rax), %rax
000000000102a455	movq	%rax, 0x8(%rsp)
000000000102a45a	leaq	0x8e64f(%rip), %rcx
000000000102a461	movq	%rcx, (%rsp)
000000000102a465	callq	runtime.lock
000000000102a46a	cmpl	$0x0, 0x8e70b(%rip)
000000000102a471	jle	0x102a4b1
000000000102a473	movl	$0x2, %eax
000000000102a478	movq	0x8(%rsp), %rcx
000000000102a47d	movl	$0x3, %edx
000000000102a482	lock
000000000102a483	cmpxchgl	%edx, 0xc(%rcx)
000000000102a487	sete	%dl
000000000102a48a	testb	%dl, %dl
000000000102a48c	je	0x102a4b1
000000000102a48e	leaq	0x9a55b(%rip), %rax
000000000102a495	cmpb	$0x0, (%rax)
000000000102a498	jne	0x102a4dd
000000000102a49a	incl	0x1c(%rcx)
000000000102a49d	movl	0x8e6d9(%rip), %eax
000000000102a4a3	leal	-0x1(%rax), %ecx
000000000102a4a6	movl	%ecx, 0x8e6d0(%rip)
000000000102a4ac	cmpl	$0x1, %eax
000000000102a4af	je	0x102a4cb
000000000102a4b1	leaq	0x8e5f8(%rip), %rax
000000000102a4b8	movq	%rax, (%rsp)
000000000102a4bc	callq	runtime.unlock
000000000102a4c1	movq	0x10(%rsp), %rbp
000000000102a4c6	addq	$0x18, %rsp
000000000102a4ca	retq
000000000102a4cb	leaq	0x8e6ae(%rip), %rax
000000000102a4d2	movq	%rax, (%rsp)
000000000102a4d6	callq	runtime.notewakeup
000000000102a4db	jmp	0x102a4b1
000000000102a4dd	movq	%rcx, (%rsp)
000000000102a4e1	callq	runtime.traceGoSysBlock
000000000102a4e6	movq	0x8(%rsp), %rax
000000000102a4eb	movq	%rax, (%rsp)
000000000102a4ef	callq	runtime.traceProcStop
000000000102a4f4	movq	0x8(%rsp), %rcx
000000000102a4f9	jmp	0x102a49a
000000000102a4fb	callq	runtime.morestack_noctxt
000000000102a500	jmp	runtime.entersyscall_gcwait
000000000102a505	int3
000000000102a506	int3
000000000102a507	int3
000000000102a508	int3
000000000102a509	int3
000000000102a50a	int3
000000000102a50b	int3
000000000102a50c	int3
000000000102a50d	int3
000000000102a50e	int3
000000000102a50f	int3
runtime.entersyscallblock:
000000000102a510	subq	$0x60, %rsp
000000000102a514	movq	%rbp, 0x58(%rsp)
000000000102a519	leaq	0x58(%rsp), %rbp
000000000102a51e	movq	%gs:0x30, %rax
000000000102a527	movq	%rax, 0x10(%rsp)
000000000102a52c	movq	0x30(%rax), %rcx
000000000102a530	incl	0x100(%rcx)
000000000102a536	movb	$0x1, 0xb6(%rax)
000000000102a53d	movq	$-0x522, 0x10(%rax)
000000000102a545	movq	0x30(%rax), %rcx
000000000102a549	movq	0xd0(%rcx), %rdx
000000000102a550	movl	0x1c(%rdx), %edx
000000000102a553	movl	%edx, 0x29c(%rcx)
000000000102a559	movb	$0x1, 0xb8(%rax)
000000000102a560	movq	0x30(%rax), %rcx
000000000102a564	movq	0xd0(%rcx), %rcx
000000000102a56b	incl	0x1c(%rcx)
000000000102a56e	movq	0x60(%rsp), %rcx
000000000102a573	movq	%rcx, (%rsp)
000000000102a577	leaq	0x68(%rsp), %rdx
000000000102a57c	movq	%rdx, 0x8(%rsp)
000000000102a581	callq	runtime.save
000000000102a586	movq	0x10(%rsp), %rax
000000000102a58b	movq	0x38(%rax), %rcx
000000000102a58f	movq	%rcx, 0x70(%rax)
000000000102a593	movq	0x40(%rax), %rdx
000000000102a597	movq	%rdx, 0x78(%rax)
000000000102a59b	movq	(%rax), %rdx
000000000102a59e	cmpq	%rdx, %rcx
000000000102a5a1	jae	0x102a6ad
000000000102a5a7	movq	0x38(%rax), %rdx
000000000102a5ab	movq	$0x0, 0x30(%rsp)
000000000102a5b4	xorps	%xmm0, %xmm0
000000000102a5b7	movups	%xmm0, 0x38(%rsp)
000000000102a5bc	movups	%xmm0, 0x48(%rsp)
000000000102a5c1	leaq	runtime.entersyscallblock.func1(%rip), %rbx
000000000102a5c8	movq	%rbx, 0x30(%rsp)
000000000102a5cd	leaq	0x68(%rsp), %rbx
000000000102a5d2	movq	%rbx, 0x38(%rsp)
000000000102a5d7	movq	%rdx, 0x40(%rsp)
000000000102a5dc	movq	%rcx, 0x48(%rsp)
000000000102a5e1	movq	%rax, 0x50(%rsp)
000000000102a5e6	leaq	0x30(%rsp), %rcx
000000000102a5eb	movq	%rcx, (%rsp)
000000000102a5ef	callq	runtime.systemstack
000000000102a5f4	movq	0x10(%rsp), %rax
000000000102a5f9	movq	%rax, (%rsp)
000000000102a5fd	movabsq	$0x300000002, %rcx
000000000102a607	movq	%rcx, 0x8(%rsp)
000000000102a60c	callq	runtime.casgstatus
000000000102a611	movq	0x10(%rsp), %rax
000000000102a616	movq	0x70(%rax), %rcx
000000000102a61a	movq	(%rax), %rdx
000000000102a61d	cmpq	%rdx, %rcx
000000000102a620	jae	0x102a69e
000000000102a622	xorps	%xmm0, %xmm0
000000000102a625	movups	%xmm0, 0x18(%rsp)
000000000102a62a	movq	$0x0, 0x28(%rsp)
000000000102a633	leaq	runtime.entersyscallblock.func2(%rip), %rcx
000000000102a63a	movq	%rcx, 0x18(%rsp)
000000000102a63f	leaq	0x68(%rsp), %rcx
000000000102a644	movq	%rcx, 0x20(%rsp)
000000000102a649	movq	%rax, 0x28(%rsp)
000000000102a64e	leaq	0x18(%rsp), %rdx
000000000102a653	movq	%rdx, (%rsp)
000000000102a657	callq	runtime.systemstack
000000000102a65c	leaq	0x4479d(%rip), %rax
000000000102a663	movq	%rax, (%rsp)
000000000102a667	callq	runtime.systemstack
000000000102a66c	movq	0x60(%rsp), %rax
000000000102a671	movq	%rax, (%rsp)
000000000102a675	leaq	0x68(%rsp), %rax
000000000102a67a	movq	%rax, 0x8(%rsp)
000000000102a67f	callq	runtime.save
000000000102a684	movq	0x10(%rsp), %rax
000000000102a689	movq	0x30(%rax), %rax
000000000102a68d	addl	$-0x1, 0x100(%rax)
000000000102a694	movq	0x58(%rsp), %rbp
000000000102a699	addq	$0x60, %rsp
000000000102a69d	retq
000000000102a69e	movq	0x8(%rax), %rdx
000000000102a6a2	cmpq	%rcx, %rdx
000000000102a6a5	jb	0x102a622
000000000102a6ab	jmp	0x102a65c
000000000102a6ad	movq	0x8(%rax), %rdx
000000000102a6b1	cmpq	%rcx, %rdx
000000000102a6b4	jb	0x102a5a7
000000000102a6ba	jmp	0x102a5f4
000000000102a6bf	int3
runtime.entersyscallblock_handoff:
000000000102a6c0	movq	%gs:0x30, %rcx
000000000102a6c9	cmpq	0x10(%rcx), %rsp
000000000102a6cd	jbe	0x102a721
000000000102a6cf	subq	$0x10, %rsp
000000000102a6d3	movq	%rbp, 0x8(%rsp)
000000000102a6d8	leaq	0x8(%rsp), %rbp
000000000102a6dd	leaq	0x9a30c(%rip), %rax
000000000102a6e4	cmpb	$0x0, (%rax)
000000000102a6e7	jne	0x102a6fd
000000000102a6e9	callq	runtime.releasep
000000000102a6ee	callq	runtime.handoffp
000000000102a6f3	movq	0x8(%rsp), %rbp
000000000102a6f8	addq	$0x10, %rsp
000000000102a6fc	retq
000000000102a6fd	callq	runtime.traceGoSysCall
000000000102a702	movq	%gs:0x30, %rax
000000000102a70b	movq	0x30(%rax), %rax
000000000102a70f	movq	0xd0(%rax), %rax
000000000102a716	movq	%rax, (%rsp)
000000000102a71a	callq	runtime.traceGoSysBlock
000000000102a71f	jmp	0x102a6e9
000000000102a721	callq	runtime.morestack_noctxt
000000000102a726	jmp	runtime.entersyscallblock_handoff
000000000102a728	int3
000000000102a729	int3
000000000102a72a	int3
000000000102a72b	int3
000000000102a72c	int3
000000000102a72d	int3
000000000102a72e	int3
000000000102a72f	int3
runtime.exitsyscall:
000000000102a730	subq	$0x28, %rsp
000000000102a734	movq	%rbp, 0x20(%rsp)
000000000102a739	leaq	0x20(%rsp), %rbp
000000000102a73e	movq	%gs:0x30, %rax
000000000102a747	movq	0x30(%rax), %rcx
000000000102a74b	incl	0x100(%rcx)
000000000102a751	leaq	0x30(%rsp), %rcx
000000000102a756	cmpq	%rcx, 0x70(%rax)
000000000102a75a	jb	0x102a956
000000000102a760	movq	%rax, 0x10(%rsp)
000000000102a765	movq	$0x0, 0xa8(%rax)
000000000102a770	movq	0x30(%rax), %rcx
000000000102a774	movq	0xd0(%rcx), %rcx
000000000102a77b	movq	%rcx, 0x18(%rsp)
000000000102a780	callq	runtime.exitsyscallfast
000000000102a785	cmpb	$0x0, (%rsp)
000000000102a789	jne	0x102a84c
000000000102a78f	movq	0x10(%rsp), %rax
000000000102a794	movq	$0x0, 0xc0(%rax)
000000000102a79f	leaq	0x9a24a(%rip), %rcx
000000000102a7a6	cmpb	$0x0, (%rcx)
000000000102a7a9	je	0x102a847
000000000102a7af	movq	0x18(%rsp), %rcx
000000000102a7b4	jmp	0x102a7c5
000000000102a7b6	callq	runtime.osyield
000000000102a7bb	movq	0x10(%rsp), %rax
000000000102a7c0	movq	0x18(%rsp), %rcx
000000000102a7c5	testq	%rcx, %rcx
000000000102a7c8	je	0x102a7d9
000000000102a7ca	movq	0x30(%rax), %rdx
000000000102a7ce	movl	0x29c(%rdx), %edx
000000000102a7d4	cmpl	%edx, 0x1c(%rcx)
000000000102a7d7	je	0x102a7b6
000000000102a7d9	callq	runtime.cputicks
000000000102a7de	movq	(%rsp), %rax
000000000102a7e2	movq	0x10(%rsp), %rcx
000000000102a7e7	movq	%rax, 0xc0(%rcx)
000000000102a7ee	movq	0x30(%rcx), %rax
000000000102a7f2	addl	$-0x1, 0x100(%rax)
000000000102a7f9	leaq	0x44610(%rip), %rax
000000000102a800	movq	%rax, (%rsp)
000000000102a804	callq	runtime.mcall
000000000102a809	movq	0x10(%rsp), %rax
000000000102a80e	movq	0x30(%rax), %rcx
000000000102a812	cmpq	$0x0, 0x158(%rcx)
000000000102a81a	je	0x102a920
000000000102a820	movq	$0x0, 0x70(%rax)
000000000102a828	movq	0x30(%rax), %rcx
000000000102a82c	movq	0xd0(%rcx), %rcx
000000000102a833	incl	0x1c(%rcx)
000000000102a836	movb	$0x0, 0xb6(%rax)
000000000102a83d	movq	0x20(%rsp), %rbp
000000000102a842	addq	$0x28, %rsp
000000000102a846	retq
000000000102a847	movq	%rax, %rcx
000000000102a84a	jmp	0x102a7ee
000000000102a84c	movq	0x10(%rsp), %rax
000000000102a851	movq	0x30(%rax), %rcx
000000000102a855	cmpq	$0x0, 0x158(%rcx)
000000000102a85d	je	0x102a93b
000000000102a863	leaq	0x9a186(%rip), %rdx
000000000102a86a	cmpb	$0x0, (%rdx)
000000000102a86d	je	0x102a894
000000000102a86f	movq	0xd0(%rcx), %rdx
000000000102a876	movq	0x18(%rsp), %rbx
000000000102a87b	cmpq	%rdx, %rbx
000000000102a87e	je	0x102a90c
000000000102a884	leaq	0x44835(%rip), %rax
000000000102a88b	movq	%rax, (%rsp)
000000000102a88f	callq	runtime.systemstack
000000000102a894	movq	0x10(%rsp), %rax
000000000102a899	movq	0x30(%rax), %rcx
000000000102a89d	movq	0xd0(%rcx), %rcx
000000000102a8a4	incl	0x1c(%rcx)
000000000102a8a7	movq	%rax, (%rsp)
000000000102a8ab	movabsq	$0x200000003, %rcx
000000000102a8b5	movq	%rcx, 0x8(%rsp)
000000000102a8ba	callq	runtime.casgstatus
000000000102a8bf	movq	0x10(%rsp), %rax
000000000102a8c4	movq	$0x0, 0x70(%rax)
000000000102a8cc	movq	0x30(%rax), %rcx
000000000102a8d0	addl	$-0x1, 0x100(%rcx)
000000000102a8d7	leaq	0xb1(%rax), %rcx
000000000102a8de	cmpb	$0x0, (%rcx)
000000000102a8e1	je	0x102a8fc
000000000102a8e3	movq	$-0x522, 0x10(%rax)
000000000102a8eb	movb	$0x0, 0xb6(%rax)
000000000102a8f2	movq	0x20(%rsp), %rbp
000000000102a8f7	addq	$0x28, %rsp
000000000102a8fb	retq
000000000102a8fc	movq	(%rax), %rcx
000000000102a8ff	addq	$0x370, %rcx
000000000102a906	movq	%rcx, 0x10(%rax)
000000000102a90a	jmp	0x102a8eb
000000000102a90c	movl	0x1c(%rdx), %edx
000000000102a90f	cmpl	%edx, 0x29c(%rcx)
000000000102a915	jne	0x102a884
000000000102a91b	jmp	0x102a894
000000000102a920	leaq	0x408ad(%rip), %rax
000000000102a927	movq	%rax, (%rsp)
000000000102a92b	movq	$0xb, 0x8(%rsp)
000000000102a934	callq	runtime.throw
000000000102a939	ud2
000000000102a93b	leaq	0x40892(%rip), %rax
000000000102a942	movq	%rax, (%rsp)
000000000102a946	movq	$0xb, 0x8(%rsp)
000000000102a94f	callq	runtime.throw
000000000102a954	ud2
000000000102a956	leaq	0x43b56(%rip), %rax
000000000102a95d	movq	%rax, (%rsp)
000000000102a961	movq	$0x2d, 0x8(%rsp)
000000000102a96a	callq	runtime.throw
000000000102a96f	ud2
000000000102a971	int3
000000000102a972	int3
000000000102a973	int3
000000000102a974	int3
000000000102a975	int3
000000000102a976	int3
000000000102a977	int3
000000000102a978	int3
000000000102a979	int3
000000000102a97a	int3
000000000102a97b	int3
000000000102a97c	int3
000000000102a97d	int3
000000000102a97e	int3
000000000102a97f	int3
runtime.exitsyscallfast:
000000000102a980	subq	$0x38, %rsp
000000000102a984	movq	%rbp, 0x30(%rsp)
000000000102a989	leaq	0x30(%rsp), %rbp
000000000102a98e	movq	%gs:0x30, %rcx
000000000102a997	cmpl	$0x7fffffff, 0x8e1db(%rip)
000000000102a9a1	je	0x102aa82
000000000102a9a7	movq	0x30(%rcx), %rdx
000000000102a9ab	movq	0xd0(%rdx), %rdx
000000000102a9b2	testq	%rdx, %rdx
000000000102a9b5	je	0x102a9d7
000000000102a9b7	cmpl	$0x2, 0xc(%rdx)
000000000102a9bb	jne	0x102a9d7
000000000102a9bd	movl	$0x2, %eax
000000000102a9c2	movl	$0x1, %ebx
000000000102a9c7	lock
000000000102a9c8	cmpxchgl	%ebx, 0xc(%rdx)
000000000102a9cc	sete	%dl
000000000102a9cf	testb	%dl, %dl
000000000102a9d1	jne	0x102aa6e
000000000102a9d7	movq	0x30(%rcx), %rax
000000000102a9db	movq	0xd0(%rax), %rdx
000000000102a9e2	movq	$0x0, 0x158(%rax)
000000000102a9ed	movq	0x30(%rcx), %rax
000000000102a9f1	movq	$0x0, 0xd0(%rax)
000000000102a9fc	cmpq	$0x0, 0x8e0e4(%rip)
000000000102aa04	jne	0x102aa15
000000000102aa06	movb	$0x0, 0x40(%rsp)
000000000102aa0b	movq	0x30(%rsp), %rbp
000000000102aa10	addq	$0x38, %rsp
000000000102aa14	retq
000000000102aa15	movb	$0x0, 0xf(%rsp)
000000000102aa1a	xorps	%xmm0, %xmm0
000000000102aa1d	movups	%xmm0, 0x10(%rsp)
000000000102aa22	movups	%xmm0, 0x20(%rsp)
000000000102aa27	leaq	runtime.exitsyscallfast.func1(%rip), %rax
000000000102aa2e	movq	%rax, 0x10(%rsp)
000000000102aa33	leaq	0xf(%rsp), %rax
000000000102aa38	movq	%rax, 0x18(%rsp)
000000000102aa3d	movq	%rdx, 0x20(%rsp)
000000000102aa42	movq	%rcx, 0x28(%rsp)
000000000102aa47	leaq	0x10(%rsp), %rcx
000000000102aa4c	movq	%rcx, (%rsp)
000000000102aa50	callq	runtime.systemstack
000000000102aa55	leaq	0xf(%rsp), %rax
000000000102aa5a	cmpb	$0x0, (%rax)
000000000102aa5d	je	0x102aa06
000000000102aa5f	movb	$0x1, 0x40(%rsp)
000000000102aa64	movq	0x30(%rsp), %rbp
000000000102aa69	addq	$0x38, %rsp
000000000102aa6d	retq
000000000102aa6e	callq	runtime.exitsyscallfast_reacquired
000000000102aa73	movb	$0x1, 0x40(%rsp)
000000000102aa78	movq	0x30(%rsp), %rbp
000000000102aa7d	addq	$0x38, %rsp
000000000102aa81	retq
000000000102aa82	movq	0x30(%rcx), %rax
000000000102aa86	movq	$0x0, 0x158(%rax)
000000000102aa91	movq	0x30(%rcx), %rax
000000000102aa95	movq	$0x0, 0xd0(%rax)
000000000102aaa0	movb	$0x0, 0x40(%rsp)
000000000102aaa5	movq	0x30(%rsp), %rbp
000000000102aaaa	addq	$0x38, %rsp
000000000102aaae	retq
000000000102aaaf	int3
runtime.exitsyscallfast_reacquired:
000000000102aab0	subq	$0x28, %rsp
000000000102aab4	movq	%rbp, 0x20(%rsp)
000000000102aab9	leaq	0x20(%rsp), %rbp
000000000102aabe	movq	%gs:0x30, %rax
000000000102aac7	movq	0x30(%rax), %rcx
000000000102aacb	movq	0xd0(%rcx), %rdx
000000000102aad2	movq	0x48(%rdx), %rdx
000000000102aad6	movq	%rdx, 0x158(%rcx)
000000000102aadd	movq	0x30(%rax), %rcx
000000000102aae1	movq	0xd0(%rcx), %rdx
000000000102aae8	leaq	0x40(%rdx), %rbx
000000000102aaec	testb	%al, (%rbx)
000000000102aaee	movq	%rcx, 0x40(%rdx)
000000000102aaf2	movq	0x30(%rax), %rcx
000000000102aaf6	movq	0xd0(%rcx), %rdx
000000000102aafd	movl	0x1c(%rdx), %edx
000000000102ab00	cmpl	%edx, 0x29c(%rcx)
000000000102ab06	je	0x102ab22
000000000102ab08	leaq	0x99ee1(%rip), %rcx
000000000102ab0f	cmpb	$0x0, (%rcx)
000000000102ab12	jne	0x102ab2c
000000000102ab14	movq	0x30(%rax), %rax
000000000102ab18	movq	0xd0(%rax), %rax
000000000102ab1f	incl	0x1c(%rax)
000000000102ab22	movq	0x20(%rsp), %rbp
000000000102ab27	addq	$0x28, %rsp
000000000102ab2b	retq
000000000102ab2c	movq	%rax, 0x8(%rsp)
000000000102ab31	xorps	%xmm0, %xmm0
000000000102ab34	movups	%xmm0, 0x10(%rsp)
000000000102ab39	leaq	runtime.exitsyscallfast_reacquired.func1(%rip), %rcx
000000000102ab40	movq	%rcx, 0x10(%rsp)
000000000102ab45	movq	%rax, 0x18(%rsp)
000000000102ab4a	leaq	0x10(%rsp), %rcx
000000000102ab4f	movq	%rcx, (%rsp)
000000000102ab53	callq	runtime.systemstack
000000000102ab58	movq	0x8(%rsp), %rax
000000000102ab5d	jmp	0x102ab14
000000000102ab5f	int3
runtime.exitsyscallfast_pidle:
000000000102ab60	movq	%gs:0x30, %rcx
000000000102ab69	cmpq	0x10(%rcx), %rsp
000000000102ab6d	jbe	0x102ac2e
000000000102ab73	subq	$0x18, %rsp
000000000102ab77	movq	%rbp, 0x10(%rsp)
000000000102ab7c	leaq	0x10(%rsp), %rbp
000000000102ab81	leaq	0x8df28(%rip), %rax
000000000102ab88	movq	%rax, (%rsp)
000000000102ab8c	callq	runtime.lock
000000000102ab91	movq	0x8df50(%rip), %rax
000000000102ab98	testq	%rax, %rax
000000000102ab9b	je	0x102abbb
000000000102ab9d	movq	0x10(%rax), %rcx
000000000102aba1	movq	%rcx, 0x8df40(%rip)
000000000102aba8	movl	$0xffffffff, %ecx
000000000102abad	leaq	0x8df3c(%rip), %rdx
000000000102abb4	lock
000000000102abb5	xaddl	%ecx, (%rdx)
000000000102abb8	testq	%rax, %rax
000000000102abbb	movq	%rax, 0x8(%rsp)
000000000102abc0	je	0x102abcc
000000000102abc2	movl	0x8dfc0(%rip), %ecx
000000000102abc8	testl	%ecx, %ecx
000000000102abca	jne	0x102ac0d
000000000102abcc	leaq	0x8dedd(%rip), %rax
000000000102abd3	movq	%rax, (%rsp)
000000000102abd7	callq	runtime.unlock
000000000102abdc	movq	0x8(%rsp), %rax
000000000102abe1	testq	%rax, %rax
000000000102abe4	je	0x102abfe
000000000102abe6	movq	%rax, (%rsp)
000000000102abea	callq	runtime.acquirep
000000000102abef	movb	$0x1, 0x20(%rsp)
000000000102abf4	movq	0x10(%rsp), %rbp
000000000102abf9	addq	$0x18, %rsp
000000000102abfd	retq
000000000102abfe	movb	$0x0, 0x20(%rsp)
000000000102ac03	movq	0x10(%rsp), %rbp
000000000102ac08	addq	$0x18, %rsp
000000000102ac0c	retq
000000000102ac0d	xorl	%eax, %eax
000000000102ac0f	leaq	runtime.sched(%rip), %rcx
000000000102ac16	xchgl	%eax, 0xe8(%rcx)
000000000102ac1c	leaq	0x8df6d(%rip), %rax
000000000102ac23	movq	%rax, (%rsp)
000000000102ac27	callq	runtime.notewakeup
000000000102ac2c	jmp	0x102abcc
000000000102ac2e	callq	runtime.morestack_noctxt
000000000102ac33	jmp	runtime.exitsyscallfast_pidle
000000000102ac38	int3
000000000102ac39	int3
000000000102ac3a	int3
000000000102ac3b	int3
000000000102ac3c	int3
000000000102ac3d	int3
000000000102ac3e	int3
000000000102ac3f	int3
runtime.exitsyscall0:
000000000102ac40	movq	%gs:0x30, %rcx
000000000102ac49	cmpq	0x10(%rcx), %rsp
000000000102ac4d	jbe	0x102ae12
000000000102ac53	subq	$0x28, %rsp
000000000102ac57	movq	%rbp, 0x20(%rsp)
000000000102ac5c	leaq	0x20(%rsp), %rbp
000000000102ac61	movq	%gs:0x30, %rax
000000000102ac6a	movq	%rax, 0x10(%rsp)
000000000102ac6f	movq	0x30(%rsp), %rcx
000000000102ac74	movq	%rcx, (%rsp)
000000000102ac78	movabsq	$0x100000003, %rdx
000000000102ac82	movq	%rdx, 0x8(%rsp)
000000000102ac87	callq	runtime.casgstatus
000000000102ac8c	movq	%gs:0x30, %rax
000000000102ac95	movq	0x30(%rax), %rcx
000000000102ac99	movq	0xc0(%rcx), %rdx
000000000102aca0	testb	%al, (%rcx)
000000000102aca2	leaq	0x30(%rdx), %rcx
000000000102aca6	testb	%al, (%rcx)
000000000102aca8	xorl	%ecx, %ecx
000000000102acaa	movq	%rcx, 0x30(%rdx)
000000000102acae	movq	0x30(%rax), %rcx
000000000102acb2	testb	%al, (%rax)
000000000102acb4	leaq	0xc0(%rcx), %rax
000000000102acbb	testb	%al, (%rax)
000000000102acbd	xorl	%eax, %eax
000000000102acbf	movq	%rax, 0xc0(%rcx)
000000000102acc6	leaq	0x8dde3(%rip), %rax
000000000102accd	movq	%rax, (%rsp)
000000000102acd1	callq	runtime.lock
000000000102acd6	movq	0x8de0b(%rip), %rax
000000000102acdd	testq	%rax, %rax
000000000102ace0	je	0x102ad00
000000000102ace2	movq	0x10(%rax), %rcx
000000000102ace6	movq	%rcx, 0x8ddfb(%rip)
000000000102aced	movl	$0xffffffff, %ecx
000000000102acf2	leaq	0x8ddf7(%rip), %rdx
000000000102acf9	lock
000000000102acfa	xaddl	%ecx, (%rdx)
000000000102acfd	testq	%rax, %rax
000000000102ad00	movq	%rax, 0x18(%rsp)
000000000102ad05	je	0x102adb3
000000000102ad0b	movl	0x8de77(%rip), %ecx
000000000102ad11	testl	%ecx, %ecx
000000000102ad13	jne	0x102ad8e
000000000102ad15	leaq	0x8dd94(%rip), %rax
000000000102ad1c	movq	%rax, (%rsp)
000000000102ad20	callq	runtime.unlock
000000000102ad25	movq	0x18(%rsp), %rax
000000000102ad2a	testq	%rax, %rax
000000000102ad2d	jne	0x102ad70
000000000102ad2f	movq	0x10(%rsp), %rax
000000000102ad34	movq	0x30(%rax), %rax
000000000102ad38	cmpq	$0x0, 0x160(%rax)
000000000102ad40	jne	0x102ad56
000000000102ad42	callq	runtime.stopm
000000000102ad47	callq	runtime.schedule
000000000102ad4c	movq	0x20(%rsp), %rbp
000000000102ad51	addq	$0x28, %rsp
000000000102ad55	retq
000000000102ad56	callq	runtime.stoplockedm
000000000102ad5b	movq	0x30(%rsp), %rax
000000000102ad60	movq	%rax, (%rsp)
000000000102ad64	movb	$0x0, 0x8(%rsp)
000000000102ad69	callq	runtime.execute
000000000102ad6e	jmp	0x102ad42
000000000102ad70	movq	%rax, (%rsp)
000000000102ad74	callq	runtime.acquirep
000000000102ad79	movq	0x30(%rsp), %rax
000000000102ad7e	movq	%rax, (%rsp)
000000000102ad82	movb	$0x0, 0x8(%rsp)
000000000102ad87	callq	runtime.execute
000000000102ad8c	jmp	0x102ad2f
000000000102ad8e	xorl	%eax, %eax
000000000102ad90	leaq	0x8ddf1(%rip), %rcx
000000000102ad97	xchgl	%eax, (%rcx)
000000000102ad99	leaq	0x8ddf0(%rip), %rax
000000000102ada0	movq	%rax, (%rsp)
000000000102ada4	callq	runtime.notewakeup
000000000102ada9	movq	0x18(%rsp), %rax
000000000102adae	jmp	0x102ad15
000000000102adb3	movq	0x30(%rsp), %rcx
000000000102adb8	movq	$0x0, 0xa0(%rcx)
000000000102adc3	movq	0x8dd36(%rip), %rdx
000000000102adca	testq	%rdx, %rdx
000000000102adcd	je	0x102adfd
000000000102adcf	leaq	0xa0(%rdx), %rbx
000000000102add6	testb	%al, (%rbx)
000000000102add8	movq	%rcx, %rbx
000000000102addb	movq	%rcx, 0xa0(%rdx)
000000000102ade2	leaq	0x8dd17(%rip), %rcx
000000000102ade9	testb	%al, (%rcx)
000000000102adeb	movq	%rbx, 0x8dd0e(%rip)
000000000102adf2	incl	0x8dd10(%rip)
000000000102adf8	jmp	0x102ad15
000000000102adfd	leaq	0x8dcf4(%rip), %rdx
000000000102ae04	testb	%al, (%rdx)
000000000102ae06	movq	%rcx, %rbx
000000000102ae09	movq	%rcx, 0x8dce8(%rip)
000000000102ae10	jmp	0x102ade2
000000000102ae12	callq	runtime.morestack_noctxt
000000000102ae17	jmp	runtime.exitsyscall0
000000000102ae1c	int3
000000000102ae1d	int3
000000000102ae1e	int3
000000000102ae1f	int3
runtime.malg:
000000000102ae20	movq	%gs:0x30, %rcx
000000000102ae29	cmpq	0x10(%rcx), %rsp
000000000102ae2d	jbe	0x102aedd
000000000102ae33	subq	$0x38, %rsp
000000000102ae37	movq	%rbp, 0x30(%rsp)
000000000102ae3c	leaq	0x30(%rsp), %rbp
000000000102ae41	leaq	0x3f1b8(%rip), %rax
000000000102ae48	movq	%rax, (%rsp)
000000000102ae4c	callq	runtime.newobject
000000000102ae51	movq	0x8(%rsp), %rax
000000000102ae56	movl	0x40(%rsp), %ecx
000000000102ae5a	testl	%ecx, %ecx
000000000102ae5c	jge	0x102ae6d
000000000102ae5e	movq	%rax, 0x48(%rsp)
000000000102ae63	movq	0x30(%rsp), %rbp
000000000102ae68	addq	$0x38, %rsp
000000000102ae6c	retq
000000000102ae6d	movq	%rax, 0x10(%rsp)
000000000102ae72	movl	%ecx, (%rsp)
000000000102ae75	callq	runtime.round2
000000000102ae7a	movl	0x8(%rsp), %eax
000000000102ae7e	movq	$0x0, 0x18(%rsp)
000000000102ae87	movl	$0x0, 0x20(%rsp)
000000000102ae8f	movq	$0x0, 0x28(%rsp)
000000000102ae98	leaq	runtime.malg.func1(%rip), %rcx
000000000102ae9f	movq	%rcx, 0x18(%rsp)
000000000102aea4	movl	%eax, 0x20(%rsp)
000000000102aea8	movq	0x10(%rsp), %rax
000000000102aead	movq	%rax, 0x28(%rsp)
000000000102aeb2	leaq	0x18(%rsp), %rcx
000000000102aeb7	movq	%rcx, (%rsp)
000000000102aebb	callq	runtime.systemstack
000000000102aec0	movq	0x10(%rsp), %rax
000000000102aec5	movq	(%rax), %rcx
000000000102aec8	addq	$0x370, %rcx
000000000102aecf	movq	%rcx, 0x10(%rax)
000000000102aed3	movq	$-0x1, 0x18(%rax)
000000000102aedb	jmp	0x102ae5e
000000000102aedd	callq	runtime.morestack_noctxt
000000000102aee2	jmp	runtime.malg
000000000102aee7	int3
000000000102aee8	int3
000000000102aee9	int3
000000000102aeea	int3
000000000102aeeb	int3
000000000102aeec	int3
000000000102aeed	int3
000000000102aeee	int3
000000000102aeef	int3
runtime.newproc:
000000000102aef0	subq	$0x40, %rsp
000000000102aef4	movq	%rbp, 0x38(%rsp)
000000000102aef9	leaq	0x38(%rsp), %rbp
000000000102aefe	movq	%gs:0x30, %rax
000000000102af07	xorps	%xmm0, %xmm0
000000000102af0a	movups	%xmm0, 0x8(%rsp)
000000000102af0f	movups	%xmm0, 0x18(%rsp)
000000000102af14	movups	%xmm0, 0x28(%rsp)
000000000102af19	leaq	runtime.newproc.func1(%rip), %rcx
000000000102af20	movq	%rcx, 0x8(%rsp)
000000000102af25	leaq	0x50(%rsp), %rcx
000000000102af2a	movq	%rcx, 0x10(%rsp)
000000000102af2f	leaq	0x58(%rsp), %rcx
000000000102af34	movq	%rcx, 0x18(%rsp)
000000000102af39	movl	0x48(%rsp), %ecx
000000000102af3d	movl	%ecx, 0x20(%rsp)
000000000102af41	movq	%rax, 0x28(%rsp)
000000000102af46	movq	0x40(%rsp), %rax
000000000102af4b	movq	%rax, 0x30(%rsp)
000000000102af50	leaq	0x8(%rsp), %rax
000000000102af55	movq	%rax, (%rsp)
000000000102af59	callq	runtime.systemstack
000000000102af5e	movq	0x38(%rsp), %rbp
000000000102af63	addq	$0x40, %rsp
000000000102af67	retq
000000000102af68	int3
000000000102af69	int3
000000000102af6a	int3
000000000102af6b	int3
000000000102af6c	int3
000000000102af6d	int3
000000000102af6e	int3
000000000102af6f	int3
runtime.newproc1:
000000000102af70	movq	%gs:0x30, %rcx
000000000102af79	cmpq	0x10(%rcx), %rsp
000000000102af7d	jbe	0x102b482
000000000102af83	subq	$0x80, %rsp
000000000102af8a	movq	%rbp, 0x78(%rsp)
000000000102af8f	leaq	0x78(%rsp), %rbp
000000000102af94	movq	%gs:0x30, %rax
000000000102af9d	movq	0x88(%rsp), %rcx
000000000102afa5	testq	%rcx, %rcx
000000000102afa8	je	0x102b459
000000000102afae	movq	0x30(%rax), %rdx
000000000102afb2	incl	0x100(%rdx)
000000000102afb8	movl	0x98(%rsp), %edx
000000000102afbf	leal	0x7(%rdx), %ebx
000000000102afc2	andl	$-0x8, %ebx
000000000102afc5	cmpl	$0x7d8, %ebx
000000000102afcb	jge	0x102b43e
000000000102afd1	movq	%rax, 0x50(%rsp)
000000000102afd6	movl	%ebx, 0x2c(%rsp)
000000000102afda	movq	0x30(%rax), %rcx
000000000102afde	movq	0xd0(%rcx), %rcx
000000000102afe5	movq	%rcx, 0x60(%rsp)
000000000102afea	movq	%rcx, (%rsp)
000000000102afee	callq	runtime.gfget
000000000102aff3	movq	0x8(%rsp), %rax
000000000102aff8	testq	%rax, %rax
000000000102affb	je	0x102b3c2
000000000102b001	cmpq	$0x0, 0x8(%rax)
000000000102b006	je	0x102b423
000000000102b00c	movl	0x90(%rax), %ecx
000000000102b012	cmpl	$0x6, %ecx
000000000102b015	jne	0x102b408
000000000102b01b	movq	%rax, 0x48(%rsp)
000000000102b020	movl	0x2c(%rsp), %ecx
000000000102b024	movslq	%ecx, %rcx
000000000102b027	addq	$0x20, %rcx
000000000102b02b	movq	0x8(%rax), %rdx
000000000102b02f	subq	%rcx, %rdx
000000000102b032	movq	%rdx, 0x30(%rsp)
000000000102b037	movl	0x98(%rsp), %ecx
000000000102b03e	testl	%ecx, %ecx
000000000102b040	jg	0x102b2ec
000000000102b046	leaq	0x38(%rax), %rcx
000000000102b04a	movq	%rcx, 0x58(%rsp)
000000000102b04f	movq	%rcx, (%rsp)
000000000102b053	movq	$0x38, 0x8(%rsp)
000000000102b05c	callq	runtime.memclrNoHeapPointers
000000000102b061	movq	0x30(%rsp), %rax
000000000102b066	movq	0x48(%rsp), %rcx
000000000102b06b	movq	%rax, 0x38(%rcx)
000000000102b06f	movq	%rax, 0x80(%rcx)
000000000102b076	leaq	0x2cca3(%rip), %rax
000000000102b07d	movq	%rax, 0x68(%rsp)
000000000102b082	leaq	0x43dff(%rip), %rax
000000000102b089	movq	%rax, 0x70(%rsp)
000000000102b08e	testb	%al, (%rax)
000000000102b090	leaq	0x70(%rsp), %rax
000000000102b095	testb	%al, (%rax)
000000000102b097	movq	0x43dea(%rip), %rax
000000000102b09e	incq	%rax
000000000102b0a1	movq	%rax, 0x40(%rcx)
000000000102b0a5	movq	%rcx, %rax
000000000102b0a8	movq	%rcx, 0x48(%rax)
000000000102b0ac	movq	0x58(%rsp), %rcx
000000000102b0b1	testb	%al, (%rcx)
000000000102b0b3	movq	0x38(%rax), %rcx
000000000102b0b7	addq	$-0x8, %rcx
000000000102b0bb	movq	%rcx, %rdx
000000000102b0be	movq	0x88(%rsp), %rbx
000000000102b0c6	movq	(%rbx), %rsi
000000000102b0c9	movq	0x40(%rax), %rdi
000000000102b0cd	movq	%rdi, (%rcx)
000000000102b0d0	movq	%rdx, 0x38(%rax)
000000000102b0d4	movq	%rsi, 0x40(%rax)
000000000102b0d8	cmpl	$0x0, 0xa9b51(%rip)
000000000102b0df	jne	0x102b2d5
000000000102b0e5	movq	%rbx, 0x50(%rax)
000000000102b0e9	movq	0xa8(%rsp), %rcx
000000000102b0f1	movq	%rcx, 0x118(%rax)
000000000102b0f8	movq	0xa0(%rsp), %rcx
000000000102b100	movq	%rcx, (%rsp)
000000000102b104	callq	runtime.saveAncestors
000000000102b109	movq	0x8(%rsp), %rax
000000000102b10e	cmpl	$0x0, 0xa9b1b(%rip)
000000000102b115	jne	0x102b2bf
000000000102b11b	movq	0x48(%rsp), %rcx
000000000102b120	movq	%rax, 0x120(%rcx)
000000000102b127	movq	0x88(%rsp), %rdx
000000000102b12f	movq	(%rdx), %rdx
000000000102b132	movq	%rdx, 0x128(%rcx)
000000000102b139	movq	0x50(%rsp), %rdx
000000000102b13e	movq	0x30(%rdx), %rbx
000000000102b142	movq	0xc0(%rbx), %rbx
000000000102b149	testq	%rbx, %rbx
000000000102b14c	je	0x102b169
000000000102b14e	movq	0x158(%rbx), %rax
000000000102b155	cmpl	$0x0, 0xa9ad4(%rip)
000000000102b15c	jne	0x102b2ae
000000000102b162	movq	%rax, 0x158(%rcx)
000000000102b169	movq	%rcx, (%rsp)
000000000102b16d	callq	runtime.isSystemGoroutine
000000000102b172	leaq	0x8(%rsp), %rax
000000000102b177	cmpb	$0x0, (%rax)
000000000102b17a	je	0x102b18c
000000000102b17c	movl	$0x1, %eax
000000000102b181	leaq	0x8d958(%rip), %rcx
000000000102b188	lock
000000000102b189	xaddl	%eax, (%rcx)
000000000102b18c	movq	0x48(%rsp), %rax
000000000102b191	movb	$0x0, 0xb5(%rax)
000000000102b198	movq	%rax, (%rsp)
000000000102b19c	movabsq	$0x100000006, %rcx
000000000102b1a6	movq	%rcx, 0x8(%rsp)
000000000102b1ab	callq	runtime.casgstatus
000000000102b1b0	movq	0x60(%rsp), %rax
000000000102b1b5	movq	0x5d8(%rax), %rcx
000000000102b1bc	cmpq	%rcx, 0x5d0(%rax)
000000000102b1c3	jne	0x102b1ec
000000000102b1c5	movl	$0x10, %ecx
000000000102b1ca	leaq	runtime.sched(%rip), %rdx
000000000102b1d1	lock
000000000102b1d2	xaddq	%rcx, (%rdx)
000000000102b1d6	leaq	0x1(%rcx), %rdx
000000000102b1da	movq	%rdx, 0x5d0(%rax)
000000000102b1e1	addq	$0x11, %rcx
000000000102b1e5	movq	%rcx, 0x5d8(%rax)
000000000102b1ec	movq	0x5d0(%rax), %rcx
000000000102b1f3	movq	0x48(%rsp), %rdx
000000000102b1f8	movq	%rcx, 0x98(%rdx)
000000000102b1ff	incq	0x5d0(%rax)
000000000102b206	leaq	0x997e3(%rip), %rcx
000000000102b20d	cmpb	$0x0, (%rcx)
000000000102b210	jne	0x102b28a
000000000102b212	movq	%rax, (%rsp)
000000000102b216	movq	%rdx, 0x8(%rsp)
000000000102b21b	movb	$0x1, 0x10(%rsp)
000000000102b220	callq	runtime.runqput
000000000102b225	movl	0x8d8c5(%rip), %eax
000000000102b22b	testl	%eax, %eax
000000000102b22d	je	0x102b245
000000000102b22f	movl	0x8d8bf(%rip), %eax
000000000102b235	testl	%eax, %eax
000000000102b237	jne	0x102b245
000000000102b239	leaq	runtime.mainStarted(%rip), %rax
000000000102b240	cmpb	$0x0, (%rax)
000000000102b243	jne	0x102b283
000000000102b245	movq	0x50(%rsp), %rax
000000000102b24a	movq	0x30(%rax), %rcx
000000000102b24e	addl	$-0x1, 0x100(%rcx)
000000000102b255	movq	0x30(%rax), %rcx
000000000102b259	cmpl	$0x0, 0x100(%rcx)
000000000102b260	jne	0x102b276
000000000102b262	leaq	0xb1(%rax), %rcx
000000000102b269	cmpb	$0x0, (%rcx)
000000000102b26c	je	0x102b276
000000000102b26e	movq	$-0x522, 0x10(%rax)
000000000102b276	movq	0x78(%rsp), %rbp
000000000102b27b	addq	$0x80, %rsp
000000000102b282	retq
000000000102b283	callq	runtime.wakep
000000000102b288	jmp	0x102b245
000000000102b28a	movq	0x128(%rdx), %rax
000000000102b291	movq	%rax, 0x8(%rsp)
000000000102b296	movq	%rdx, (%rsp)
000000000102b29a	callq	runtime.traceGoCreate
000000000102b29f	movq	0x60(%rsp), %rax
000000000102b2a4	movq	0x48(%rsp), %rdx
000000000102b2a9	jmp	0x102b212
000000000102b2ae	leaq	0x158(%rcx), %rdi
000000000102b2b5	callq	runtime.gcWriteBarrier
000000000102b2ba	jmp	0x102b169
000000000102b2bf	movq	0x48(%rsp), %rcx
000000000102b2c4	leaq	0x120(%rcx), %rdi
000000000102b2cb	callq	runtime.gcWriteBarrier
000000000102b2d0	jmp	0x102b127
000000000102b2d5	leaq	0x50(%rax), %rdi
000000000102b2d9	movq	%rax, %rcx
000000000102b2dc	movq	%rbx, %rax
000000000102b2df	callq	runtime.gcWriteBarrier
000000000102b2e4	movq	%rcx, %rax
000000000102b2e7	jmp	0x102b0e9
000000000102b2ec	movq	%rdx, (%rsp)
000000000102b2f0	movq	0x90(%rsp), %rdx
000000000102b2f8	movq	%rdx, 0x8(%rsp)
000000000102b2fd	movslq	%ecx, %rcx
000000000102b300	movq	%rcx, 0x38(%rsp)
000000000102b305	movq	%rcx, 0x10(%rsp)
000000000102b30a	callq	runtime.memmove
000000000102b30f	leaq	0xa991e(%rip), %rax
000000000102b316	cmpb	$0x0, (%rax)
000000000102b319	je	0x102b3b8
000000000102b31f	movq	0x50(%rsp), %rax
000000000102b324	movq	0x30(%rax), %rcx
000000000102b328	movq	0xc0(%rcx), %rcx
000000000102b32f	testb	%al, (%rcx)
000000000102b331	addq	$0xb4, %rcx
000000000102b338	cmpb	$0x0, (%rcx)
000000000102b33b	je	0x102b347
000000000102b33d	movq	0x48(%rsp), %rax
000000000102b342	jmp	0x102b046
000000000102b347	movq	0x88(%rsp), %rax
000000000102b34f	movq	(%rax), %rcx
000000000102b352	movq	%rcx, (%rsp)
000000000102b356	callq	runtime.findfunc
000000000102b35b	movq	0x8(%rsp), %rax
000000000102b360	movq	0x10(%rsp), %rcx
000000000102b365	movq	%rax, (%rsp)
000000000102b369	movq	%rcx, 0x8(%rsp)
000000000102b36e	movl	$0x0, 0x10(%rsp)
000000000102b376	callq	runtime.funcdata
000000000102b37b	movq	0x18(%rsp), %rax
000000000102b380	testb	%al, (%rax)
000000000102b382	movq	0x30(%rsp), %rcx
000000000102b387	movq	%rcx, (%rsp)
000000000102b38b	movq	%rcx, 0x8(%rsp)
000000000102b390	movq	0x38(%rsp), %rdx
000000000102b395	movq	%rdx, 0x10(%rsp)
000000000102b39a	movq	$0x0, 0x18(%rsp)
000000000102b3a3	addq	$0x8, %rax
000000000102b3a7	movq	%rax, 0x20(%rsp)
000000000102b3ac	callq	runtime.bulkBarrierBitmap
000000000102b3b1	movq	0x50(%rsp), %rax
000000000102b3b6	jmp	0x102b33d
000000000102b3b8	movq	0x50(%rsp), %rax
000000000102b3bd	jmp	0x102b33d
000000000102b3c2	movl	$0x800, (%rsp)
000000000102b3c9	callq	runtime.malg
000000000102b3ce	movq	0x8(%rsp), %rax
000000000102b3d3	movq	%rax, 0x40(%rsp)
000000000102b3d8	movq	%rax, (%rsp)
000000000102b3dc	movabsq	$0x600000000, %rcx
000000000102b3e6	movq	%rcx, 0x8(%rsp)
000000000102b3eb	callq	runtime.casgstatus
000000000102b3f0	movq	0x40(%rsp), %rax
000000000102b3f5	movq	%rax, (%rsp)
000000000102b3f9	callq	runtime.allgadd
000000000102b3fe	movq	0x40(%rsp), %rax
000000000102b403	jmp	0x102b001
000000000102b408	leaq	0x41a84(%rip), %rax
000000000102b40f	movq	%rax, (%rsp)
000000000102b413	movq	$0x1c, 0x8(%rsp)
000000000102b41c	callq	runtime.throw
000000000102b421	ud2
000000000102b423	leaq	0x41a85(%rip), %rax
000000000102b42a	movq	%rax, (%rsp)
000000000102b42e	movq	$0x1c, 0x8(%rsp)
000000000102b437	callq	runtime.throw
000000000102b43c	ud2
000000000102b43e	leaq	0x43691(%rip), %rax
000000000102b445	movq	%rax, (%rsp)
000000000102b449	movq	$0x37, 0x8(%rsp)
000000000102b452	callq	runtime.throw
000000000102b457	ud2
000000000102b459	movq	0x30(%rax), %rax
000000000102b45d	movl	$0xffffffff, 0xec(%rax)
000000000102b467	leaq	0x409e6(%rip), %rax
000000000102b46e	movq	%rax, (%rsp)
000000000102b472	movq	$0x14, 0x8(%rsp)
000000000102b47b	callq	runtime.throw
000000000102b480	ud2
000000000102b482	callq	runtime.morestack_noctxt
000000000102b487	jmp	runtime.newproc1
000000000102b48c	int3
000000000102b48d	int3
000000000102b48e	int3
000000000102b48f	int3
runtime.saveAncestors:
000000000102b490	movq	%gs:0x30, %rcx
000000000102b499	leaq	-0x358(%rsp), %rax
000000000102b4a1	cmpq	0x10(%rcx), %rax
000000000102b4a5	jbe	0x102b7e9
000000000102b4ab	subq	$0x3d8, %rsp
000000000102b4b2	movq	%rbp, 0x3d0(%rsp)
000000000102b4ba	leaq	0x3d0(%rsp), %rbp
000000000102b4c2	movl	0xa9890(%rip), %eax
000000000102b4c8	testl	%eax, %eax
000000000102b4ca	jg	0x102b4e8
000000000102b4cc	movq	$0x0, 0x3e8(%rsp)
000000000102b4d8	movq	0x3d0(%rsp), %rbp
000000000102b4e0	addq	$0x3d8, %rsp
000000000102b4e7	retq
000000000102b4e8	movq	0x3e0(%rsp), %rcx
000000000102b4f0	cmpq	$0x0, 0x98(%rcx)
000000000102b4f8	je	0x102b4cc
000000000102b4fa	movq	0x120(%rcx), %rdx
000000000102b501	testq	%rdx, %rdx
000000000102b504	je	0x102b7d7
000000000102b50a	movq	0x8(%rdx), %rbx
000000000102b50e	movq	(%rdx), %rsi
000000000102b511	movq	0x10(%rdx), %rdx
000000000102b515	movq	%rdx, 0x50(%rsp)
000000000102b51a	movq	%rbx, 0x48(%rsp)
000000000102b51f	movq	%rsi, 0x3a0(%rsp)
000000000102b527	leaq	0x35792(%rip), %rcx
000000000102b52e	movq	%rcx, (%rsp)
000000000102b532	leal	0x1(%rbx), %edi
000000000102b535	cmpl	%eax, %edi
000000000102b537	cmovgl	%eax, %edi
000000000102b53a	movslq	%edi, %rax
000000000102b53d	movq	%rax, 0x8(%rsp)
000000000102b542	movq	%rax, 0x10(%rsp)
000000000102b547	callq	runtime.makeslice
000000000102b54c	movq	0x28(%rsp), %rax
000000000102b551	movq	0x20(%rsp), %rcx
000000000102b556	movq	0x18(%rsp), %rdx
000000000102b55b	cmpq	$0x1, %rcx
000000000102b55f	jb	0x102b7e2
000000000102b565	movq	%rax, 0x60(%rsp)
000000000102b56a	movq	%rcx, 0x58(%rsp)
000000000102b56f	movq	%rdx, 0x398(%rsp)
000000000102b577	leaq	0x35742(%rip), %rbx
000000000102b57e	movq	%rbx, (%rsp)
000000000102b582	leaq	-0x1(%rax), %rbx
000000000102b586	movq	%rbx, %rsi
000000000102b589	negq	%rbx
000000000102b58c	sarq	$0x3f, %rbx
000000000102b590	andq	$0x28, %rbx
000000000102b594	addq	%rdx, %rbx
000000000102b597	movq	%rbx, 0x8(%rsp)
000000000102b59c	leaq	-0x1(%rcx), %rbx
000000000102b5a0	movq	%rbx, 0x10(%rsp)
000000000102b5a5	movq	%rsi, 0x18(%rsp)
000000000102b5aa	movq	0x3a0(%rsp), %rbx
000000000102b5b2	movq	%rbx, 0x20(%rsp)
000000000102b5b7	movq	0x48(%rsp), %rbx
000000000102b5bc	movq	%rbx, 0x28(%rsp)
000000000102b5c1	movq	0x50(%rsp), %rbx
000000000102b5c6	movq	%rbx, 0x30(%rsp)
000000000102b5cb	callq	runtime.typedslicecopy
000000000102b5d0	leaq	0x70(%rsp), %rdi
000000000102b5d5	xorps	%xmm0, %xmm0
000000000102b5d8	leaq	-0x20(%rdi), %rdi
000000000102b5dc	movq	%rbp, -0x10(%rsp)
000000000102b5e1	leaq	-0x10(%rsp), %rbp
000000000102b5e6	callq	0x1049150
000000000102b5eb	movq	(%rbp), %rbp
000000000102b5ef	movq	0x3e0(%rsp), %rax
000000000102b5f7	movq	%rax, (%rsp)
000000000102b5fb	movq	$0x0, 0x8(%rsp)
000000000102b604	leaq	0x70(%rsp), %rcx
000000000102b609	movq	%rcx, 0x10(%rsp)
000000000102b60e	movq	$0x64, 0x18(%rsp)
000000000102b617	movq	$0x64, 0x20(%rsp)
000000000102b620	callq	runtime.gcallers
000000000102b625	movq	0x28(%rsp), %rax
000000000102b62a	leaq	0x2ce6f(%rip), %rcx
000000000102b631	movq	%rcx, (%rsp)
000000000102b635	movq	%rax, 0x8(%rsp)
000000000102b63a	movq	%rax, 0x10(%rsp)
000000000102b63f	callq	runtime.makeslice
000000000102b644	movq	0x28(%rsp), %rax
000000000102b649	movq	0x20(%rsp), %rcx
000000000102b64e	movq	0x18(%rsp), %rdx
000000000102b653	cmpq	$0x64, %rcx
000000000102b657	movl	$0x64, %ebx
000000000102b65c	movq	%rcx, %rsi
000000000102b65f	cmovgq	%rbx, %rcx
000000000102b663	leaq	0x70(%rsp), %rbx
000000000102b668	cmpq	%rbx, %rdx
000000000102b66b	jne	0x102b797
000000000102b671	movq	$0x0, 0x3a8(%rsp)
000000000102b67d	xorps	%xmm0, %xmm0
000000000102b680	movups	%xmm0, 0x3b0(%rsp)
000000000102b688	movups	%xmm0, 0x3c0(%rsp)
000000000102b690	movq	%rdx, 0x3a8(%rsp)
000000000102b698	movq	%rsi, 0x3b0(%rsp)
000000000102b6a0	movq	%rax, 0x3b8(%rsp)
000000000102b6a8	movq	0x3e0(%rsp), %rax
000000000102b6b0	movq	0x98(%rax), %rcx
000000000102b6b7	movq	%rcx, 0x3c0(%rsp)
000000000102b6bf	movq	0x118(%rax), %rax
000000000102b6c6	movq	%rax, 0x3c8(%rsp)
000000000102b6ce	cmpl	$0x0, 0xa955b(%rip)
000000000102b6d5	jne	0x102b768
000000000102b6db	movq	0x3a8(%rsp), %rax
000000000102b6e3	movq	0x398(%rsp), %rcx
000000000102b6eb	movq	%rax, (%rcx)
000000000102b6ee	movups	0x3b0(%rsp), %xmm0
000000000102b6f6	movups	%xmm0, 0x8(%rcx)
000000000102b6fa	movups	0x3c0(%rsp), %xmm0
000000000102b702	movups	%xmm0, 0x18(%rcx)
000000000102b706	leaq	0x2b6f3(%rip), %rax
000000000102b70d	movq	%rax, (%rsp)
000000000102b711	callq	runtime.newobject
000000000102b716	movq	0x8(%rsp), %rdi
000000000102b71b	movq	0x58(%rsp), %rax
000000000102b720	movq	%rax, 0x8(%rdi)
000000000102b724	movq	0x60(%rsp), %rax
000000000102b729	movq	%rax, 0x10(%rdi)
000000000102b72d	cmpl	$0x0, 0xa94fc(%rip)
000000000102b734	jne	0x102b759
000000000102b736	movq	0x398(%rsp), %rax
000000000102b73e	movq	%rax, (%rdi)
000000000102b741	movq	%rdi, 0x3e8(%rsp)
000000000102b749	movq	0x3d0(%rsp), %rbp
000000000102b751	addq	$0x3d8, %rsp
000000000102b758	retq
000000000102b759	movq	0x398(%rsp), %rax
000000000102b761	callq	runtime.gcWriteBarrier
000000000102b766	jmp	0x102b741
000000000102b768	leaq	0x35551(%rip), %rax
000000000102b76f	movq	%rax, (%rsp)
000000000102b773	movq	0x398(%rsp), %rax
000000000102b77b	movq	%rax, 0x8(%rsp)
000000000102b780	leaq	0x3a8(%rsp), %rcx
000000000102b788	movq	%rcx, 0x10(%rsp)
000000000102b78d	callq	runtime.typedmemmove
000000000102b792	jmp	0x102b706
000000000102b797	movq	%rax, 0x40(%rsp)
000000000102b79c	movq	%rsi, 0x68(%rsp)
000000000102b7a1	movq	%rdx, 0x390(%rsp)
000000000102b7a9	movq	%rdx, (%rsp)
000000000102b7ad	movq	%rbx, 0x8(%rsp)
000000000102b7b2	shlq	$0x3, %rcx
000000000102b7b6	movq	%rcx, 0x10(%rsp)
000000000102b7bb	callq	runtime.memmove
000000000102b7c0	movq	0x40(%rsp), %rax
000000000102b7c5	movq	0x390(%rsp), %rdx
000000000102b7cd	movq	0x68(%rsp), %rsi
000000000102b7d2	jmp	0x102b671
000000000102b7d7	xorl	%edx, %edx
000000000102b7d9	xorl	%ebx, %ebx
000000000102b7db	xorl	%esi, %esi
000000000102b7dd	jmp	0x102b515
000000000102b7e2	callq	runtime.panicslice
000000000102b7e7	ud2
000000000102b7e9	callq	runtime.morestack_noctxt
000000000102b7ee	jmp	runtime.saveAncestors
000000000102b7f3	int3
000000000102b7f4	int3
000000000102b7f5	int3
000000000102b7f6	int3
000000000102b7f7	int3
000000000102b7f8	int3
000000000102b7f9	int3
000000000102b7fa	int3
000000000102b7fb	int3
000000000102b7fc	int3
000000000102b7fd	int3
000000000102b7fe	int3
000000000102b7ff	int3
runtime.gfput:
000000000102b800	movq	%gs:0x30, %rcx
000000000102b809	cmpq	0x10(%rcx), %rsp
000000000102b80d	jbe	0x102b9fd
000000000102b813	subq	$0x20, %rsp
000000000102b817	movq	%rbp, 0x18(%rsp)
000000000102b81c	leaq	0x18(%rsp), %rbp
000000000102b821	movq	0x30(%rsp), %rax
000000000102b826	movl	0x90(%rax), %ecx
000000000102b82c	cmpl	$0x6, %ecx
000000000102b82f	jne	0x102b9e2
000000000102b835	movq	0x8(%rax), %rcx
000000000102b839	movq	(%rax), %rdx
000000000102b83c	movq	%rcx, %rbx
000000000102b83f	subq	%rdx, %rcx
000000000102b842	cmpq	$0x800, %rcx
000000000102b849	jne	0x102b9bc
000000000102b84f	leaq	0xa0(%rax), %rcx
000000000102b856	testb	%al, (%rcx)
000000000102b858	movq	0x28(%rsp), %rcx
000000000102b85d	movq	0xdf0(%rcx), %rdx
000000000102b864	movq	%rdx, 0xa0(%rax)
000000000102b86b	leaq	0xdf0(%rcx), %rdi
000000000102b872	cmpl	$0x0, 0xa93b7(%rip)
000000000102b879	jne	0x102b9b2
000000000102b87f	movq	%rax, 0xdf0(%rcx)
000000000102b886	movl	0xdf8(%rcx), %eax
000000000102b88c	incl	%eax
000000000102b88e	movl	%eax, 0xdf8(%rcx)
000000000102b894	cmpl	$0x40, %eax
000000000102b897	jl	0x102b9a8
000000000102b89d	movq	%rdi, 0x10(%rsp)
000000000102b8a2	leaq	0x8d267(%rip), %rax
000000000102b8a9	movq	%rax, (%rsp)
000000000102b8ad	callq	runtime.lock
000000000102b8b2	movq	0x28(%rsp), %rax
000000000102b8b7	jmp	0x102b8bf
000000000102b8b9	incl	0x8d269(%rip)
000000000102b8bf	movl	0xdf8(%rax), %ecx
000000000102b8c5	cmpl	$0x20, %ecx
000000000102b8c8	jl	0x102b998
000000000102b8ce	decl	%ecx
000000000102b8d0	movl	%ecx, 0xdf8(%rax)
000000000102b8d6	movq	0xdf0(%rax), %rcx
000000000102b8dd	movq	0xa0(%rcx), %rdx
000000000102b8e4	cmpl	$0x0, 0xa9345(%rip)
000000000102b8eb	jne	0x102b980
000000000102b8f1	movq	%rdx, 0xdf0(%rax)
000000000102b8f8	leaq	0xa0(%rcx), %rdx
000000000102b8ff	cmpq	$0x0, (%rcx)
000000000102b903	jne	0x102b941
000000000102b905	testb	%al, (%rdx)
000000000102b907	movq	0x8d212(%rip), %rdx
000000000102b90e	movq	%rdx, 0xa0(%rcx)
000000000102b915	cmpl	$0x0, 0xa9314(%rip)
000000000102b91c	jne	0x102b927
000000000102b91e	movq	%rcx, 0x8d1fb(%rip)
000000000102b925	jmp	0x102b8b9
000000000102b927	leaq	0x8d1f2(%rip), %rdi
000000000102b92e	movq	%rax, %rdx
000000000102b931	movq	%rcx, %rax
000000000102b934	callq	runtime.gcWriteBarrier
000000000102b939	movq	%rdx, %rax
000000000102b93c	jmp	0x102b8b9
000000000102b941	testb	%al, (%rdx)
000000000102b943	movq	0x8d1ce(%rip), %rdx
000000000102b94a	movq	%rdx, 0xa0(%rcx)
000000000102b951	cmpl	$0x0, 0xa92d8(%rip)
000000000102b958	jne	0x102b966
000000000102b95a	movq	%rcx, 0x8d1b7(%rip)
000000000102b961	jmp	0x102b8b9
000000000102b966	leaq	0x8d1ab(%rip), %rdi
000000000102b96d	movq	%rax, %rdx
000000000102b970	movq	%rcx, %rax
000000000102b973	callq	runtime.gcWriteBarrier
000000000102b978	movq	%rdx, %rax
000000000102b97b	jmp	0x102b8b9
000000000102b980	movq	0x10(%rsp), %rdi
000000000102b985	movq	%rax, %rbx
000000000102b988	movq	%rdx, %rax
000000000102b98b	callq	runtime.gcWriteBarrier
000000000102b990	movq	%rbx, %rax
000000000102b993	jmp	0x102b8f8
000000000102b998	leaq	0x8d171(%rip), %rax
000000000102b99f	movq	%rax, (%rsp)
000000000102b9a3	callq	runtime.unlock
000000000102b9a8	movq	0x18(%rsp), %rbp
000000000102b9ad	addq	$0x20, %rsp
000000000102b9b1	retq
000000000102b9b2	callq	runtime.gcWriteBarrier
000000000102b9b7	jmp	0x102b886
000000000102b9bc	movq	%rdx, (%rsp)
000000000102b9c0	movq	%rbx, 0x8(%rsp)
000000000102b9c5	callq	runtime.stackfree
000000000102b9ca	xorps	%xmm0, %xmm0
000000000102b9cd	movq	0x30(%rsp), %rax
000000000102b9d2	movups	%xmm0, (%rax)
000000000102b9d5	movq	$0x0, 0x10(%rax)
000000000102b9dd	jmp	0x102b84f
000000000102b9e2	leaq	0x415e2(%rip), %rax
000000000102b9e9	movq	%rax, (%rsp)
000000000102b9ed	movq	$0x1d, 0x8(%rsp)
000000000102b9f6	callq	runtime.throw
000000000102b9fb	ud2
000000000102b9fd	callq	runtime.morestack_noctxt
000000000102ba02	jmp	runtime.gfput
000000000102ba07	int3
000000000102ba08	int3
000000000102ba09	int3
000000000102ba0a	int3
000000000102ba0b	int3
000000000102ba0c	int3
000000000102ba0d	int3
000000000102ba0e	int3
000000000102ba0f	int3
runtime.gfget:
000000000102ba10	movq	%gs:0x30, %rcx
000000000102ba19	cmpq	0x10(%rcx), %rsp
000000000102ba1d	jbe	0x102bbec
000000000102ba23	subq	$0x30, %rsp
000000000102ba27	movq	%rbp, 0x28(%rsp)
000000000102ba2c	leaq	0x28(%rsp), %rbp
000000000102ba31	movq	0x38(%rsp), %rcx
000000000102ba36	jmp	0x102bb27
000000000102ba3b	cmpl	$0x20, 0xdf8(%rax)
000000000102ba42	jge	0x102bb0f
000000000102ba48	movq	0x8d0c9(%rip), %rcx
000000000102ba4f	testq	%rcx, %rcx
000000000102ba52	je	0x102bacd
000000000102ba54	movq	0xa0(%rcx), %rdx
000000000102ba5b	cmpl	$0x0, 0xa91ce(%rip)
000000000102ba62	jne	0x102bab6
000000000102ba64	movq	%rdx, 0x8d0ad(%rip)
000000000102ba6b	incl	0xdf8(%rax)
000000000102ba71	addl	$-0x1, 0x8d0b0(%rip)
000000000102ba78	leaq	0xa0(%rcx), %rdx
000000000102ba7f	testb	%al, (%rdx)
000000000102ba81	movq	0xdf0(%rax), %rdx
000000000102ba88	movq	%rdx, 0xa0(%rcx)
000000000102ba8f	cmpl	$0x0, 0xa919a(%rip)
000000000102ba96	jne	0x102baa1
000000000102ba98	movq	%rcx, 0xdf0(%rax)
000000000102ba9f	jmp	0x102ba3b
000000000102baa1	movq	0x10(%rsp), %rdi
000000000102baa6	movq	%rax, %rdx
000000000102baa9	movq	%rcx, %rax
000000000102baac	callq	runtime.gcWriteBarrier
000000000102bab1	movq	%rdx, %rax
000000000102bab4	jmp	0x102ba3b
000000000102bab6	leaq	0x8d05b(%rip), %rdi
000000000102babd	movq	%rax, %rbx
000000000102bac0	movq	%rdx, %rax
000000000102bac3	callq	runtime.gcWriteBarrier
000000000102bac8	movq	%rbx, %rax
000000000102bacb	jmp	0x102ba6b
000000000102bacd	movq	0x8d04c(%rip), %rcx
000000000102bad4	testq	%rcx, %rcx
000000000102bad7	je	0x102bb0f
000000000102bad9	movq	0xa0(%rcx), %rdx
000000000102bae0	cmpl	$0x0, 0xa9149(%rip)
000000000102bae7	jne	0x102baf5
000000000102bae9	movq	%rdx, 0x8d030(%rip)
000000000102baf0	jmp	0x102ba6b
000000000102baf5	leaq	0x8d024(%rip), %rdi
000000000102bafc	movq	%rax, %rbx
000000000102baff	movq	%rdx, %rax
000000000102bb02	callq	runtime.gcWriteBarrier
000000000102bb07	movq	%rbx, %rax
000000000102bb0a	jmp	0x102ba6b
000000000102bb0f	leaq	0x8cffa(%rip), %rax
000000000102bb16	movq	%rax, (%rsp)
000000000102bb1a	callq	runtime.unlock
000000000102bb1f	movq	0x38(%rsp), %rax
000000000102bb24	movq	%rax, %rcx
000000000102bb27	movq	0xdf0(%rcx), %rdx
000000000102bb2e	leaq	0xdf0(%rcx), %rdi
000000000102bb35	testq	%rdx, %rdx
000000000102bb38	jne	0x102bb70
000000000102bb3a	movq	%rdi, 0x10(%rsp)
000000000102bb3f	cmpq	$0x0, 0x8cfd1(%rip)
000000000102bb47	je	0x102bb63
000000000102bb49	leaq	0x8cfc0(%rip), %rax
000000000102bb50	movq	%rax, (%rsp)
000000000102bb54	callq	runtime.lock
000000000102bb59	movq	0x38(%rsp), %rax
000000000102bb5e	jmp	0x102ba3b
000000000102bb63	cmpq	$0x0, 0x8cfb5(%rip)
000000000102bb6b	jne	0x102bb49
000000000102bb6d	testq	%rdx, %rdx
000000000102bb70	je	0x102bb96
000000000102bb72	movq	0xa0(%rdx), %rax
000000000102bb79	cmpl	$0x0, 0xa90b0(%rip)
000000000102bb80	jne	0x102bbe5
000000000102bb82	movq	%rax, 0xdf0(%rcx)
000000000102bb89	addl	$-0x1, 0xdf8(%rcx)
000000000102bb90	cmpq	$0x0, (%rdx)
000000000102bb94	je	0x102bba5
000000000102bb96	movq	%rdx, 0x40(%rsp)
000000000102bb9b	movq	0x28(%rsp), %rbp
000000000102bba0	addq	$0x30, %rsp
000000000102bba4	retq
000000000102bba5	movq	%rdx, 0x8(%rsp)
000000000102bbaa	xorps	%xmm0, %xmm0
000000000102bbad	movups	%xmm0, 0x18(%rsp)
000000000102bbb2	leaq	runtime.gfget.func1(%rip), %rax
000000000102bbb9	movq	%rax, 0x18(%rsp)
000000000102bbbe	movq	%rdx, 0x20(%rsp)
000000000102bbc3	leaq	0x18(%rsp), %rax
000000000102bbc8	movq	%rax, (%rsp)
000000000102bbcc	callq	runtime.systemstack
000000000102bbd1	movq	0x8(%rsp), %rdx
000000000102bbd6	movq	(%rdx), %rax
000000000102bbd9	addq	$0x370, %rax
000000000102bbdf	movq	%rax, 0x10(%rdx)
000000000102bbe3	jmp	0x102bb96
000000000102bbe5	callq	runtime.gcWriteBarrier
000000000102bbea	jmp	0x102bb89
000000000102bbec	callq	runtime.morestack_noctxt
000000000102bbf1	jmp	runtime.gfget
000000000102bbf6	int3
000000000102bbf7	int3
000000000102bbf8	int3
000000000102bbf9	int3
000000000102bbfa	int3
000000000102bbfb	int3
000000000102bbfc	int3
000000000102bbfd	int3
000000000102bbfe	int3
000000000102bbff	int3
runtime.gfpurge:
000000000102bc00	movq	%gs:0x30, %rcx
000000000102bc09	cmpq	0x10(%rcx), %rsp
000000000102bc0d	jbe	0x102bd32
000000000102bc13	subq	$0x10, %rsp
000000000102bc17	movq	%rbp, 0x8(%rsp)
000000000102bc1c	leaq	0x8(%rsp), %rbp
000000000102bc21	leaq	0x8cee8(%rip), %rax
000000000102bc28	movq	%rax, (%rsp)
000000000102bc2c	callq	runtime.lock
000000000102bc31	movq	0x18(%rsp), %rax
000000000102bc36	jmp	0x102bc3e
000000000102bc38	incl	0x8ceea(%rip)
000000000102bc3e	movl	0xdf8(%rax), %ecx
000000000102bc44	testl	%ecx, %ecx
000000000102bc46	je	0x102bd18
000000000102bc4c	decl	%ecx
000000000102bc4e	movl	%ecx, 0xdf8(%rax)
000000000102bc54	movq	0xdf0(%rax), %rcx
000000000102bc5b	movq	0xa0(%rcx), %rdx
000000000102bc62	cmpl	$0x0, 0xa8fc7(%rip)
000000000102bc69	jne	0x102bcfe
000000000102bc6f	movq	%rdx, 0xdf0(%rax)
000000000102bc76	leaq	0xa0(%rcx), %rdx
000000000102bc7d	cmpq	$0x0, (%rcx)
000000000102bc81	jne	0x102bcbf
000000000102bc83	testb	%al, (%rdx)
000000000102bc85	movq	0x8ce94(%rip), %rdx
000000000102bc8c	movq	%rdx, 0xa0(%rcx)
000000000102bc93	cmpl	$0x0, 0xa8f96(%rip)
000000000102bc9a	jne	0x102bca5
000000000102bc9c	movq	%rcx, 0x8ce7d(%rip)
000000000102bca3	jmp	0x102bc38
000000000102bca5	leaq	0x8ce74(%rip), %rdi
000000000102bcac	movq	%rax, %rdx
000000000102bcaf	movq	%rcx, %rax
000000000102bcb2	callq	runtime.gcWriteBarrier
000000000102bcb7	movq	%rdx, %rax
000000000102bcba	jmp	0x102bc38
000000000102bcbf	testb	%al, (%rdx)
000000000102bcc1	movq	0x8ce50(%rip), %rdx
000000000102bcc8	movq	%rdx, 0xa0(%rcx)
000000000102bccf	cmpl	$0x0, 0xa8f5a(%rip)
000000000102bcd6	jne	0x102bce4
000000000102bcd8	movq	%rcx, 0x8ce39(%rip)
000000000102bcdf	jmp	0x102bc38
000000000102bce4	leaq	0x8ce2d(%rip), %rdi
000000000102bceb	movq	%rax, %rdx
000000000102bcee	movq	%rcx, %rax
000000000102bcf1	callq	runtime.gcWriteBarrier
000000000102bcf6	movq	%rdx, %rax
000000000102bcf9	jmp	0x102bc38
000000000102bcfe	leaq	0xdf0(%rax), %rdi
000000000102bd05	movq	%rax, %rbx
000000000102bd08	movq	%rdx, %rax
000000000102bd0b	callq	runtime.gcWriteBarrier
000000000102bd10	movq	%rbx, %rax
000000000102bd13	jmp	0x102bc76
000000000102bd18	leaq	0x8cdf1(%rip), %rax
000000000102bd1f	movq	%rax, (%rsp)
000000000102bd23	callq	runtime.unlock
000000000102bd28	movq	0x8(%rsp), %rbp
000000000102bd2d	addq	$0x10, %rsp
000000000102bd31	retq
000000000102bd32	callq	runtime.morestack_noctxt
000000000102bd37	jmp	runtime.gfpurge
000000000102bd3c	int3
000000000102bd3d	int3
000000000102bd3e	int3
000000000102bd3f	int3
runtime.unlockOSThread:
000000000102bd40	subq	$0x18, %rsp
000000000102bd44	movq	%rbp, 0x10(%rsp)
000000000102bd49	leaq	0x10(%rsp), %rbp
000000000102bd4e	movq	%gs:0x30, %rax
000000000102bd57	movq	0x30(%rax), %rcx
000000000102bd5b	cmpl	$0x0, 0x26c(%rcx)
000000000102bd62	je	0x102bdb0
000000000102bd64	movq	0x30(%rax), %rax
000000000102bd68	addl	$-0x1, 0x26c(%rax)
000000000102bd6f	movq	%gs:0x30, %rax
000000000102bd78	movq	0x30(%rax), %rcx
000000000102bd7c	cmpl	$0x0, 0x26c(%rcx)
000000000102bd83	je	0x102bd8f
000000000102bd85	movq	0x10(%rsp), %rbp
000000000102bd8a	addq	$0x18, %rsp
000000000102bd8e	retq
000000000102bd8f	cmpl	$0x0, 0x268(%rcx)
000000000102bd96	jne	0x102bd85
000000000102bd98	movq	$0x0, 0x160(%rcx)
000000000102bda3	movq	$0x0, 0xd8(%rax)
000000000102bdae	jmp	0x102bd85
000000000102bdb0	movq	%rax, 0x8(%rsp)
000000000102bdb5	leaq	0x42fd4(%rip), %rax
000000000102bdbc	movq	%rax, (%rsp)
000000000102bdc0	callq	runtime.systemstack
000000000102bdc5	movq	0x8(%rsp), %rax
000000000102bdca	jmp	0x102bd64
000000000102bdcc	int3
000000000102bdcd	int3
000000000102bdce	int3
000000000102bdcf	int3
runtime.badunlockosthread:
000000000102bdd0	movq	%gs:0x30, %rcx
000000000102bdd9	cmpq	0x10(%rcx), %rsp
000000000102bddd	jbe	0x102be08
000000000102bddf	subq	$0x18, %rsp
000000000102bde3	movq	%rbp, 0x10(%rsp)
000000000102bde8	leaq	0x10(%rsp), %rbp
000000000102bded	leaq	0x42e3a(%rip), %rax
000000000102bdf4	movq	%rax, (%rsp)
000000000102bdf8	movq	$0x3e, 0x8(%rsp)
000000000102be01	callq	runtime.throw
000000000102be06	ud2
000000000102be08	callq	runtime.morestack_noctxt
000000000102be0d	jmp	runtime.badunlockosthread
000000000102be0f	int3
runtime._System:
000000000102be10	movq	%gs:0x30, %rcx
000000000102be19	cmpq	0x10(%rcx), %rsp
000000000102be1d	jbe	0x102be39
000000000102be1f	subq	$0x8, %rsp
000000000102be23	movq	%rbp, (%rsp)
000000000102be27	leaq	(%rsp), %rbp
000000000102be2b	callq	runtime._System
000000000102be30	movq	(%rsp), %rbp
000000000102be34	addq	$0x8, %rsp
000000000102be38	retq
000000000102be39	callq	runtime.morestack_noctxt
000000000102be3e	jmp	runtime._System
runtime._ExternalCode:
000000000102be40	movq	%gs:0x30, %rcx
000000000102be49	cmpq	0x10(%rcx), %rsp
000000000102be4d	jbe	0x102be69
000000000102be4f	subq	$0x8, %rsp
000000000102be53	movq	%rbp, (%rsp)
000000000102be57	leaq	(%rsp), %rbp
000000000102be5b	callq	runtime._ExternalCode
000000000102be60	movq	(%rsp), %rbp
000000000102be64	addq	$0x8, %rsp
000000000102be68	retq
000000000102be69	callq	runtime.morestack_noctxt
000000000102be6e	jmp	runtime._ExternalCode
runtime._LostExternalCode:
000000000102be70	movq	%gs:0x30, %rcx
000000000102be79	cmpq	0x10(%rcx), %rsp
000000000102be7d	jbe	0x102be99
000000000102be7f	subq	$0x8, %rsp
000000000102be83	movq	%rbp, (%rsp)
000000000102be87	leaq	(%rsp), %rbp
000000000102be8b	callq	runtime._LostExternalCode
000000000102be90	movq	(%rsp), %rbp
000000000102be94	addq	$0x8, %rsp
000000000102be98	retq
000000000102be99	callq	runtime.morestack_noctxt
000000000102be9e	jmp	runtime._LostExternalCode
runtime._GC:
000000000102bea0	movq	%gs:0x30, %rcx
000000000102bea9	cmpq	0x10(%rcx), %rsp
000000000102bead	jbe	0x102bec9
000000000102beaf	subq	$0x8, %rsp
000000000102beb3	movq	%rbp, (%rsp)
000000000102beb7	leaq	(%rsp), %rbp
000000000102bebb	callq	runtime._GC
000000000102bec0	movq	(%rsp), %rbp
000000000102bec4	addq	$0x8, %rsp
000000000102bec8	retq
000000000102bec9	callq	runtime.morestack_noctxt
000000000102bece	jmp	runtime._GC
runtime.sigprof:
000000000102bed0	movq	%gs:0x30, %rcx
000000000102bed9	leaq	-0x218(%rsp), %rax
000000000102bee1	cmpq	0x10(%rcx), %rax
000000000102bee5	jbe	0x102c484
000000000102beeb	subq	$0x298, %rsp
000000000102bef2	movq	%rbp, 0x290(%rsp)
000000000102befa	leaq	0x290(%rsp), %rbp
000000000102bf02	xorps	%xmm0, %xmm0
000000000102bf05	movups	%xmm0, 0x260(%rsp)
000000000102bf0d	movups	%xmm0, 0x270(%rsp)
000000000102bf15	movups	%xmm0, 0x280(%rsp)
000000000102bf1d	cmpl	$0x0, 0xa8ca8(%rip)
000000000102bf24	je	0x102c45f
000000000102bf2a	movq	%gs:0x30, %rax
000000000102bf33	movq	0x30(%rax), %rax
000000000102bf37	incl	0xe8(%rax)
000000000102bf3d	movq	0x2b8(%rsp), %rax
000000000102bf45	testq	%rax, %rax
000000000102bf48	je	0x102c452
000000000102bf4e	movq	(%rax), %rcx
000000000102bf51	movq	0x2a8(%rsp), %rdx
000000000102bf59	cmpq	%rcx, %rdx
000000000102bf5c	jae	0x102c3e4
000000000102bf62	xorl	%ecx, %ecx
000000000102bf64	leaq	0x60(%rsp), %rdi
000000000102bf69	xorps	%xmm0, %xmm0
000000000102bf6c	movq	%rbp, -0x10(%rsp)
000000000102bf71	leaq	-0x10(%rsp), %rbp
000000000102bf76	callq	0x10491a8
000000000102bf7b	movq	(%rbp), %rbp
000000000102bf7f	movq	0x2c0(%rsp), %rbx
000000000102bf87	cmpl	$0x0, 0x130(%rbx)
000000000102bf8e	jle	0x102c36a
000000000102bf94	movq	0xc0(%rbx), %rsi
000000000102bf9b	testq	%rsi, %rsi
000000000102bf9e	je	0x102c36a
000000000102bfa4	cmpq	$0x0, 0x78(%rsi)
000000000102bfa9	je	0x102c36a
000000000102bfaf	cmpq	$0x0, 0x70(%rsi)
000000000102bfb4	je	0x102c36a
000000000102bfba	movl	0x134(%rbx), %ecx
000000000102bfc0	testl	%ecx, %ecx
000000000102bfc2	jne	0x102c35e
000000000102bfc8	movq	0x138(%rbx), %rcx
000000000102bfcf	testq	%rcx, %rcx
000000000102bfd2	je	0x102c35e
000000000102bfd8	cmpq	$0x0, (%rcx)
000000000102bfdc	je	0x102c35e
000000000102bfe2	xorl	%edx, %edx
000000000102bfe4	jmp	0x102bfe9
000000000102bfe6	incq	%rdx
000000000102bfe9	cmpq	$0x20, %rdx
000000000102bfed	jge	0x102bffc
000000000102bfef	movq	(%rcx,%rdx,8), %rsi
000000000102bff3	testq	%rsi, %rsi
000000000102bff6	jne	0x102bfe6
000000000102bff8	cmpq	$0x20, %rdx
000000000102bffc	ja	0x102c47d
000000000102c002	cmpq	$0x40, %rdx
000000000102c006	movl	$0x40, %esi
000000000102c00b	cmovlq	%rdx, %rsi
000000000102c00f	leaq	0x60(%rsp), %rdi
000000000102c014	cmpq	%rcx, %rdi
000000000102c017	jne	0x102c320
000000000102c01d	movq	0x138(%rbx), %rcx
000000000102c024	movq	$0x0, (%rcx)
000000000102c02b	movq	0xc0(%rbx), %rcx
000000000102c032	movq	0x78(%rcx), %rsi
000000000102c036	movq	0x70(%rcx), %r8
000000000102c03a	cmpq	$0x40, %rdx
000000000102c03e	jae	0x102c476
000000000102c044	leaq	0x60(%rsp,%rdx,8), %rax
000000000102c049	movq	%rax, 0x28(%rsp)
000000000102c04e	movq	%rsi, (%rsp)
000000000102c052	movq	%r8, 0x8(%rsp)
000000000102c057	movq	$0x0, 0x10(%rsp)
000000000102c060	movq	%rcx, 0x18(%rsp)
000000000102c065	movq	$0x0, 0x20(%rsp)
000000000102c06e	leaq	-0x40(%rdx), %rax
000000000102c072	negq	%rax
000000000102c075	movq	%rax, 0x30(%rsp)
000000000102c07a	movups	%xmm0, 0x38(%rsp)
000000000102c07f	movq	$0x0, 0x48(%rsp)
000000000102c088	callq	runtime.gentraceback
000000000102c08d	movq	0x50(%rsp), %rax
000000000102c092	testq	%rax, %rax
000000000102c095	jg	0x102c189
000000000102c09b	movq	0x2c0(%rsp), %rax
000000000102c0a3	movq	0x2f0(%rax), %rcx
000000000102c0aa	testq	%rcx, %rcx
000000000102c0ad	je	0x102c319
000000000102c0b3	movq	0x2e0(%rax), %rdx
000000000102c0ba	testq	%rdx, %rdx
000000000102c0bd	je	0x102c312
000000000102c0c3	movq	0x2e8(%rax), %rbx
000000000102c0ca	testq	%rbx, %rbx
000000000102c0cd	jne	0x102c2b7
000000000102c0d3	xorl	%ecx, %ecx
000000000102c0d5	testq	%rcx, %rcx
000000000102c0d8	jne	0x102c0ea
000000000102c0da	movq	0x328(%rax), %rdx
000000000102c0e1	testq	%rdx, %rdx
000000000102c0e4	jne	0x102c24d
000000000102c0ea	testq	%rcx, %rcx
000000000102c0ed	jne	0x102c245
000000000102c0f3	movq	0x8ab0e(%rip), %rcx
000000000102c0fa	movq	0x2a0(%rsp), %rdx
000000000102c102	cmpq	%rcx, %rdx
000000000102c105	jbe	0x102c239
000000000102c10b	leaq	0x2b56e(%rip), %rcx
000000000102c112	movq	%rcx, 0x270(%rsp)
000000000102c11a	leaq	0x42c1f(%rip), %rdx
000000000102c121	movq	%rdx, 0x278(%rsp)
000000000102c129	testb	%al, (%rdx)
000000000102c12b	leaq	0x278(%rsp), %rdx
000000000102c133	testb	%al, (%rdx)
000000000102c135	movq	0x42c04(%rip), %rdx
000000000102c13c	incq	%rdx
000000000102c13f	movq	%rdx, 0x60(%rsp)
000000000102c144	cmpq	$0x0, 0xf8(%rax)
000000000102c14c	je	0x102c1f5
000000000102c152	movq	%rcx, 0x280(%rsp)
000000000102c15a	leaq	0x42be7(%rip), %rax
000000000102c161	movq	%rax, 0x288(%rsp)
000000000102c169	testb	%al, (%rax)
000000000102c16b	leaq	0x288(%rsp), %rax
000000000102c173	testb	%al, (%rax)
000000000102c175	movq	0x42bcc(%rip), %rax
000000000102c17c	incq	%rax
000000000102c17f	movq	%rax, 0x68(%rsp)
000000000102c184	movl	$0x2, %eax
000000000102c189	cmpl	$0x0, 0xa8a3c(%rip)
000000000102c190	je	0x102c1d1
000000000102c192	cmpq	$0x40, %rax
000000000102c196	ja	0x102c46f
000000000102c19c	leaq	runtime.cpuprof(%rip), %rcx
000000000102c1a3	movq	%rcx, (%rsp)
000000000102c1a7	movq	0x2b8(%rsp), %rcx
000000000102c1af	movq	%rcx, 0x8(%rsp)
000000000102c1b4	leaq	0x60(%rsp), %rcx
000000000102c1b9	movq	%rcx, 0x10(%rsp)
000000000102c1be	movq	%rax, 0x18(%rsp)
000000000102c1c3	movq	$0x40, 0x20(%rsp)
000000000102c1cc	callq	"runtime.(*cpuProfile).add"
000000000102c1d1	movq	%gs:0x30, %rax
000000000102c1da	movq	0x30(%rax), %rax
000000000102c1de	addl	$-0x1, 0xe8(%rax)
000000000102c1e5	movq	0x290(%rsp), %rbp
000000000102c1ed	addq	$0x298, %rsp
000000000102c1f4	retq
000000000102c1f5	cmpl	$0x0, 0x10c(%rax)
000000000102c1fc	jne	0x102c152
000000000102c202	movq	%rcx, 0x260(%rsp)
000000000102c20a	leaq	0x42b47(%rip), %rax
000000000102c211	movq	%rax, 0x268(%rsp)
000000000102c219	testb	%al, (%rax)
000000000102c21b	leaq	0x268(%rsp), %rax
000000000102c223	testb	%al, (%rax)
000000000102c225	movq	0x42b2c(%rip), %rax
000000000102c22c	incq	%rax
000000000102c22f	movq	%rax, 0x68(%rsp)
000000000102c234	jmp	0x102c184
000000000102c239	leaq	0x2b440(%rip), %rcx
000000000102c240	jmp	0x102c13f
000000000102c245	movq	%rcx, %rax
000000000102c248	jmp	0x102c189
000000000102c24d	movq	0x330(%rax), %rcx
000000000102c254	leaq	0x60(%rsp), %rbx
000000000102c259	movq	%rbx, 0x28(%rsp)
000000000102c25e	movq	%rcx, (%rsp)
000000000102c262	movq	%rdx, 0x8(%rsp)
000000000102c267	movq	$0x0, 0x10(%rsp)
000000000102c270	movq	0x2b8(%rsp), %rcx
000000000102c278	movq	%rcx, 0x18(%rsp)
000000000102c27d	movq	$0x0, 0x20(%rsp)
000000000102c286	movq	$0x40, 0x30(%rsp)
000000000102c28f	xorps	%xmm0, %xmm0
000000000102c292	movups	%xmm0, 0x38(%rsp)
000000000102c297	movq	$0x6, 0x48(%rsp)
000000000102c2a0	callq	runtime.gentraceback
000000000102c2a5	movq	0x50(%rsp), %rcx
000000000102c2aa	movq	0x2c0(%rsp), %rax
000000000102c2b2	jmp	0x102c0ea
000000000102c2b7	leaq	0x60(%rsp), %rax
000000000102c2bc	movq	%rax, 0x28(%rsp)
000000000102c2c1	movq	%rdx, (%rsp)
000000000102c2c5	movq	%rbx, 0x8(%rsp)
000000000102c2ca	movq	$0x0, 0x10(%rsp)
000000000102c2d3	movq	%rcx, 0x18(%rsp)
000000000102c2d8	movq	$0x0, 0x20(%rsp)
000000000102c2e1	movq	$0x40, 0x30(%rsp)
000000000102c2ea	xorps	%xmm0, %xmm0
000000000102c2ed	movups	%xmm0, 0x38(%rsp)
000000000102c2f2	movq	$0x0, 0x48(%rsp)
000000000102c2fb	callq	runtime.gentraceback
000000000102c300	movq	0x50(%rsp), %rcx
000000000102c305	movq	0x2c0(%rsp), %rax
000000000102c30d	jmp	0x102c0d5
000000000102c312	xorl	%ecx, %ecx
000000000102c314	jmp	0x102c0d5
000000000102c319	xorl	%ecx, %ecx
000000000102c31b	jmp	0x102c0d5
000000000102c320	movq	%rdx, 0x58(%rsp)
000000000102c325	movq	%rdi, (%rsp)
000000000102c329	movq	%rcx, 0x8(%rsp)
000000000102c32e	shlq	$0x3, %rsi
000000000102c332	movq	%rsi, 0x10(%rsp)
000000000102c337	callq	runtime.memmove
000000000102c33c	movq	0x2b8(%rsp), %rax
000000000102c344	movq	0x58(%rsp), %rdx
000000000102c349	movq	0x2c0(%rsp), %rbx
000000000102c351	leaq	0x60(%rsp), %rdi
000000000102c356	xorps	%xmm0, %xmm0
000000000102c359	jmp	0x102c01d
000000000102c35e	leaq	0x60(%rsp), %rdi
000000000102c363	xorl	%edx, %edx
000000000102c365	jmp	0x102c02b
000000000102c36a	testb	%cl, %cl
000000000102c36c	jne	0x102c378
000000000102c36e	xorl	%ecx, %ecx
000000000102c370	movq	%rcx, %rax
000000000102c373	jmp	0x102c092
000000000102c378	leaq	0x60(%rsp), %rcx
000000000102c37d	movq	%rcx, 0x28(%rsp)
000000000102c382	movq	0x2a0(%rsp), %rcx
000000000102c38a	movq	%rcx, (%rsp)
000000000102c38e	movq	%rdx, 0x8(%rsp)
000000000102c393	movq	0x2b0(%rsp), %rdx
000000000102c39b	movq	%rdx, 0x10(%rsp)
000000000102c3a0	movq	%rax, 0x18(%rsp)
000000000102c3a5	movq	$0x0, 0x20(%rsp)
000000000102c3ae	movq	$0x40, 0x30(%rsp)
000000000102c3b7	movups	%xmm0, 0x38(%rsp)
000000000102c3bc	movq	$0x6, 0x48(%rsp)
000000000102c3c5	callq	runtime.gentraceback
000000000102c3ca	movq	0x50(%rsp), %rcx
000000000102c3cf	movq	0x2b8(%rsp), %rax
000000000102c3d7	movq	0x2c0(%rsp), %rbx
000000000102c3df	xorps	%xmm0, %xmm0
000000000102c3e2	jmp	0x102c370
000000000102c3e4	movq	0x8(%rax), %rcx
000000000102c3e8	cmpq	%rdx, %rcx
000000000102c3eb	jb	0x102bf62
000000000102c3f1	movq	0x2a0(%rsp), %rax
000000000102c3f9	movq	%rax, (%rsp)
000000000102c3fd	callq	runtime.setsSP
000000000102c402	leaq	0x8(%rsp), %rax
000000000102c407	cmpb	$0x0, (%rax)
000000000102c40a	je	0x102c421
000000000102c40c	movq	0x2b8(%rsp), %rax
000000000102c414	movq	0x2a8(%rsp), %rdx
000000000102c41c	jmp	0x102bf62
000000000102c421	movq	0x2c0(%rsp), %rax
000000000102c429	testq	%rax, %rax
000000000102c42c	je	0x102c438
000000000102c42e	cmpq	$0x0, 0x328(%rax)
000000000102c436	jne	0x102c40c
000000000102c438	movq	0x2b8(%rsp), %rax
000000000102c440	movq	0x2a8(%rsp), %rdx
000000000102c448	movl	$0x1, %ecx
000000000102c44d	jmp	0x102bf64
000000000102c452	movq	0x2a8(%rsp), %rdx
000000000102c45a	jmp	0x102bf62
000000000102c45f	movq	0x290(%rsp), %rbp
000000000102c467	addq	$0x298, %rsp
000000000102c46e	retq
000000000102c46f	callq	runtime.panicslice
000000000102c474	ud2
000000000102c476	callq	runtime.panicindex
000000000102c47b	ud2
000000000102c47d	callq	runtime.panicslice
000000000102c482	ud2
000000000102c484	callq	runtime.morestack_noctxt
000000000102c489	jmp	runtime.sigprof
000000000102c48e	int3
000000000102c48f	int3
runtime.sigprofNonGo:
000000000102c490	subq	$0x28, %rsp
000000000102c494	movq	%rbp, 0x20(%rsp)
000000000102c499	leaq	0x20(%rsp), %rbp
000000000102c49e	cmpl	$0x0, 0xa8727(%rip)
000000000102c4a5	je	0x102c4ed
000000000102c4a7	xorl	%eax, %eax
000000000102c4a9	jmp	0x102c4ae
000000000102c4ab	incq	%rax
000000000102c4ae	cmpq	$0x20, %rax
000000000102c4b2	jge	0x102c502
000000000102c4b4	leaq	runtime.sigprofCallers(%rip), %rcx
000000000102c4bb	movq	(%rcx,%rax,8), %rdx
000000000102c4bf	testq	%rdx, %rdx
000000000102c4c2	jne	0x102c4ab
000000000102c4c4	cmpq	$0x20, %rax
000000000102c4c8	ja	0x102c50b
000000000102c4ca	leaq	runtime.cpuprof(%rip), %rdx
000000000102c4d1	movq	%rdx, (%rsp)
000000000102c4d5	movq	%rcx, 0x8(%rsp)
000000000102c4da	movq	%rax, 0x10(%rsp)
000000000102c4df	movq	$0x20, 0x18(%rsp)
000000000102c4e8	callq	"runtime.(*cpuProfile).addNonGo"
000000000102c4ed	xorl	%eax, %eax
000000000102c4ef	leaq	runtime.sigprofCallersUse(%rip), %rcx
000000000102c4f6	xchgl	%eax, (%rcx)
000000000102c4f8	movq	0x20(%rsp), %rbp
000000000102c4fd	addq	$0x28, %rsp
000000000102c501	retq
000000000102c502	leaq	runtime.sigprofCallers(%rip), %rcx
000000000102c509	jmp	0x102c4c8
000000000102c50b	callq	runtime.panicslice
000000000102c510	ud2
000000000102c512	int3
000000000102c513	int3
000000000102c514	int3
000000000102c515	int3
000000000102c516	int3
000000000102c517	int3
000000000102c518	int3
000000000102c519	int3
000000000102c51a	int3
000000000102c51b	int3
000000000102c51c	int3
000000000102c51d	int3
000000000102c51e	int3
000000000102c51f	int3
runtime.sigprofNonGoPC:
000000000102c520	subq	$0x48, %rsp
000000000102c524	movq	%rbp, 0x40(%rsp)
000000000102c529	leaq	0x40(%rsp), %rbp
000000000102c52e	cmpl	$0x0, 0xa8697(%rip)
000000000102c535	jne	0x102c541
000000000102c537	movq	0x40(%rsp), %rbp
000000000102c53c	addq	$0x48, %rsp
000000000102c540	retq
000000000102c541	leaq	0x2b138(%rip), %rax
000000000102c548	movq	%rax, 0x30(%rsp)
000000000102c54d	leaq	0x427ec(%rip), %rax
000000000102c554	movq	%rax, 0x38(%rsp)
000000000102c559	testb	%al, (%rax)
000000000102c55b	leaq	0x38(%rsp), %rax
000000000102c560	testb	%al, (%rax)
000000000102c562	movq	0x427d7(%rip), %rax
000000000102c569	xorps	%xmm0, %xmm0
000000000102c56c	movups	%xmm0, 0x20(%rsp)
000000000102c571	movq	0x50(%rsp), %rcx
000000000102c576	movq	%rcx, 0x20(%rsp)
000000000102c57b	incq	%rax
000000000102c57e	movq	%rax, 0x28(%rsp)
000000000102c583	leaq	runtime.cpuprof(%rip), %rax
000000000102c58a	movq	%rax, (%rsp)
000000000102c58e	leaq	0x20(%rsp), %rax
000000000102c593	movq	%rax, 0x8(%rsp)
000000000102c598	movq	$0x2, 0x10(%rsp)
000000000102c5a1	movq	$0x2, 0x18(%rsp)
000000000102c5aa	callq	"runtime.(*cpuProfile).addNonGo"
000000000102c5af	jmp	0x102c537
000000000102c5b1	int3
000000000102c5b2	int3
000000000102c5b3	int3
000000000102c5b4	int3
000000000102c5b5	int3
000000000102c5b6	int3
000000000102c5b7	int3
000000000102c5b8	int3
000000000102c5b9	int3
000000000102c5ba	int3
000000000102c5bb	int3
000000000102c5bc	int3
000000000102c5bd	int3
000000000102c5be	int3
000000000102c5bf	int3
runtime.setsSP:
000000000102c5c0	movq	%gs:0x30, %rcx
000000000102c5c9	cmpq	0x10(%rcx), %rsp
000000000102c5cd	jbe	0x102c637
000000000102c5cf	subq	$0x20, %rsp
000000000102c5d3	movq	%rbp, 0x18(%rsp)
000000000102c5d8	leaq	0x18(%rsp), %rbp
000000000102c5dd	movq	0x28(%rsp), %rax
000000000102c5e2	movq	%rax, (%rsp)
000000000102c5e6	callq	runtime.findfunc
000000000102c5eb	movq	0x8(%rsp), %rax
000000000102c5f0	testq	%rax, %rax
000000000102c5f3	je	0x102c628
000000000102c5f5	movl	0x10(%rax), %eax
000000000102c5f8	leal	-0x4(%rax), %ecx
000000000102c5fb	cmpl	$0x1, %ecx
000000000102c5fe	ja	0x102c60f
000000000102c600	movb	$0x1, 0x30(%rsp)
000000000102c605	movq	0x18(%rsp), %rbp
000000000102c60a	addq	$0x20, %rsp
000000000102c60e	retq
000000000102c60f	cmpl	$0xd, %eax
000000000102c612	je	0x102c600
000000000102c614	cmpl	$0xf, %eax
000000000102c617	je	0x102c600
000000000102c619	movb	$0x0, 0x30(%rsp)
000000000102c61e	movq	0x18(%rsp), %rbp
000000000102c623	addq	$0x20, %rsp
000000000102c627	retq
000000000102c628	movb	$0x1, 0x30(%rsp)
000000000102c62d	movq	0x18(%rsp), %rbp
000000000102c632	addq	$0x20, %rsp
000000000102c636	retq
000000000102c637	callq	runtime.morestack_noctxt
000000000102c63c	jmp	runtime.setsSP
000000000102c63e	int3
000000000102c63f	int3
runtime.procresize:
000000000102c640	movq	%gs:0x30, %rcx
000000000102c649	leaq	-0x30(%rsp), %rax
000000000102c64e	cmpq	0x10(%rcx), %rax
000000000102c652	jbe	0x102d09e
000000000102c658	subq	$0xb0, %rsp
000000000102c65f	movq	%rbp, 0xa8(%rsp)
000000000102c667	leaq	0xa8(%rsp), %rbp
000000000102c66f	movl	runtime.gomaxprocs(%rip), %eax
000000000102c675	testl	%eax, %eax
000000000102c677	jl	0x102d083
000000000102c67d	movl	0xb8(%rsp), %ecx
000000000102c684	testl	%ecx, %ecx
000000000102c686	jle	0x102d083
000000000102c68c	movl	%eax, 0x40(%rsp)
000000000102c690	leaq	0x98359(%rip), %rdx
000000000102c697	cmpb	$0x0, (%rdx)
000000000102c69a	jne	0x102d02a
000000000102c6a0	callq	runtime.nanotime
000000000102c6a5	movq	(%rsp), %rax
000000000102c6a9	movq	0x8c508(%rip), %rcx
000000000102c6b0	testq	%rcx, %rcx
000000000102c6b3	je	0x102d01e
000000000102c6b9	movl	0x40(%rsp), %edx
000000000102c6bd	movslq	%edx, %rbx
000000000102c6c0	movq	%rax, %rsi
000000000102c6c3	subq	%rcx, %rax
000000000102c6c6	imulq	%rax, %rbx
000000000102c6ca	addq	0x8c4ef(%rip), %rbx
000000000102c6d1	movq	%rbx, 0x8c4e8(%rip)
000000000102c6d8	movq	%rsi, 0x8c4d9(%rip)
000000000102c6df	movq	0x8c172(%rip), %rax
000000000102c6e6	movl	0xb8(%rsp), %ecx
000000000102c6ed	cmpl	%eax, %ecx
000000000102c6ef	jg	0x102cf01
000000000102c6f5	xorl	%eax, %eax
000000000102c6f7	jmp	0x102c6fb
000000000102c6f9	incl	%eax
000000000102c6fb	cmpl	%ecx, %eax
000000000102c6fd	jge	0x102c8b3
000000000102c703	movslq	%eax, %rbx
000000000102c706	movq	runtime.allp(%rip), %rsi
000000000102c70d	movq	0x8c144(%rip), %rdi
000000000102c714	cmpq	%rdi, %rbx
000000000102c717	jae	0x102d075
000000000102c71d	movl	%eax, 0x48(%rsp)
000000000102c721	movq	(%rsi,%rbx,8), %rsi
000000000102c725	testq	%rsi, %rsi
000000000102c728	je	0x102c787
000000000102c72a	cmpq	$0x0, 0x48(%rsi)
000000000102c72f	jne	0x102c6f9
000000000102c731	movq	%rsi, 0x70(%rsp)
000000000102c736	testl	%edx, %edx
000000000102c738	jne	0x102c761
000000000102c73a	testl	%eax, %eax
000000000102c73c	jne	0x102c761
000000000102c73e	movq	%gs:0x30, %rbx
000000000102c747	movq	0x30(%rbx), %rbx
000000000102c74b	movq	0x158(%rbx), %rbx
000000000102c752	testq	%rbx, %rbx
000000000102c755	je	0x102d053
000000000102c75b	movq	%rbx, 0x48(%rsi)
000000000102c75f	jmp	0x102c6f9
000000000102c761	callq	runtime.allocmcache
000000000102c766	movq	(%rsp), %rax
000000000102c76a	movq	0x70(%rsp), %rcx
000000000102c76f	movq	%rax, 0x48(%rcx)
000000000102c773	movl	0x48(%rsp), %eax
000000000102c777	movl	0xb8(%rsp), %ecx
000000000102c77e	movl	0x40(%rsp), %edx
000000000102c782	jmp	0x102c6f9
000000000102c787	movq	%rbx, 0x68(%rsp)
000000000102c78c	leaq	0x3c84d(%rip), %rax
000000000102c793	movq	%rax, (%rsp)
000000000102c797	callq	runtime.newobject
000000000102c79c	movq	0x8(%rsp), %rax
000000000102c7a1	movl	0x48(%rsp), %ecx
000000000102c7a5	movl	%ecx, 0x8(%rax)
000000000102c7a8	movl	$0x3, 0xc(%rax)
000000000102c7af	movq	$0x0, 0xe08(%rax)
000000000102c7ba	movq	$0x80, 0xe10(%rax)
000000000102c7c5	leaq	0xe18(%rax), %rdx
000000000102c7cc	cmpl	$0x0, 0xa845d(%rip)
000000000102c7d3	jne	0x102c899
000000000102c7d9	movq	%rdx, 0xe00(%rax)
000000000102c7e0	xorl	%edx, %edx
000000000102c7e2	jmp	0x102c7e8
000000000102c7e4	leaq	0x1(%rsi), %rdx
000000000102c7e8	cmpq	$0x5, %rdx
000000000102c7ec	jge	0x102c838
000000000102c7ee	leaq	(%rdx,%rdx,2), %rbx
000000000102c7f2	movq	$0x0, 0x60(%rax,%rbx,8)
000000000102c7fb	movq	$0x20, 0x68(%rax,%rbx,8)
000000000102c804	leaq	0x58(%rax,%rbx,8), %rdi
000000000102c809	movq	%rdx, %rsi
000000000102c80c	shlq	$0x8, %rdx
000000000102c810	leaq	0xd0(%rax,%rdx), %rdx
000000000102c818	cmpl	$0x0, 0xa8411(%rip)
000000000102c81f	jne	0x102c828
000000000102c821	movq	%rdx, 0x58(%rax,%rbx,8)
000000000102c826	jmp	0x102c7e4
000000000102c828	movq	%rax, %rbx
000000000102c82b	movq	%rdx, %rax
000000000102c82e	callq	runtime.gcWriteBarrier
000000000102c833	movq	%rbx, %rax
000000000102c836	jmp	0x102c7e4
000000000102c838	movq	%rax, 0x70(%rsp)
000000000102c83d	leaq	0x1290(%rax), %rcx
000000000102c844	movq	%rcx, (%rsp)
000000000102c848	callq	"runtime.(*wbBuf).reset"
000000000102c84d	movq	0x8c004(%rip), %rax
000000000102c854	movq	runtime.allp(%rip), %rcx
000000000102c85b	movq	0x68(%rsp), %rdx
000000000102c860	cmpq	%rax, %rdx
000000000102c863	jae	0x102d06e
000000000102c869	leaq	(%rcx,%rdx,8), %rax
000000000102c86d	movq	%rax, (%rsp)
000000000102c871	movq	0x70(%rsp), %rax
000000000102c876	movq	%rax, 0x8(%rsp)
000000000102c87b	callq	runtime.atomicstorep
000000000102c880	movl	0x48(%rsp), %eax
000000000102c884	movl	0xb8(%rsp), %ecx
000000000102c88b	movl	0x40(%rsp), %edx
000000000102c88f	movq	0x70(%rsp), %rsi
000000000102c894	jmp	0x102c72a
000000000102c899	leaq	0xe00(%rax), %rdi
000000000102c8a0	movq	%rax, %rbx
000000000102c8a3	movq	%rdx, %rax
000000000102c8a6	callq	runtime.gcWriteBarrier
000000000102c8ab	movq	%rbx, %rax
000000000102c8ae	jmp	0x102c7e0
000000000102c8b3	movl	%ecx, %eax
000000000102c8b5	jmp	0x102caec
000000000102c8ba	incl	0x8c248(%rip)
000000000102c8c0	movl	0x5e0(%rbx), %edi
000000000102c8c6	movl	0x5e4(%rbx), %r8d
000000000102c8cd	cmpl	%r8d, %edi
000000000102c8d0	je	0x102c926
000000000102c8d2	leal	-0x1(%r8), %edi
000000000102c8d6	movl	%edi, 0x5e4(%rbx)
000000000102c8dc	movzbl	%dil, %edi
000000000102c8e0	movq	0x5e8(%rbx,%rdi,8), %rdi
000000000102c8e8	movq	0x8c209(%rip), %r8
000000000102c8ef	movq	%r8, 0xa0(%rdi)
000000000102c8f6	leaq	0x8c1fb(%rip), %r8
000000000102c8fd	testb	%al, (%r8)
000000000102c900	movq	%rdi, %r8
000000000102c903	movq	%rdi, 0x8c1ee(%rip)
000000000102c90a	cmpq	$0x0, 0x8c1ee(%rip)
000000000102c912	jne	0x102c8ba
000000000102c914	leaq	0x8c1e5(%rip), %rdi
000000000102c91b	testb	%al, (%rdi)
000000000102c91d	movq	%r8, 0x8c1dc(%rip)
000000000102c924	jmp	0x102c8ba
000000000102c926	movq	0xde8(%rbx), %rdi
000000000102c92d	testq	%rdi, %rdi
000000000102c930	je	0x102c97f
000000000102c932	movq	0x8c1bf(%rip), %r8
000000000102c939	movq	%r8, 0xa0(%rdi)
000000000102c940	leaq	0x8c1b1(%rip), %r8
000000000102c947	testb	%al, (%r8)
000000000102c94a	movq	%rdi, %r8
000000000102c94d	movq	%rdi, 0x8c1a4(%rip)
000000000102c954	cmpq	$0x0, 0x8c1a4(%rip)
000000000102c95c	jne	0x102c96e
000000000102c95e	leaq	0x8c19b(%rip), %rdi
000000000102c965	testb	%al, (%rdi)
000000000102c967	movq	%r8, 0x8c192(%rip)
000000000102c96e	incl	0x8c194(%rip)
000000000102c974	movq	$0x0, 0xde8(%rbx)
000000000102c97f	movq	0x1258(%rbx), %rdi
000000000102c986	testq	%rdi, %rdi
000000000102c989	jne	0x102cb98
000000000102c98f	cmpl	$0x0, 0xa8162(%rip)
000000000102c996	jne	0x102cb6a
000000000102c99c	leaq	0xe18(%rbx), %rax
000000000102c9a3	movq	%rax, (%rsp)
000000000102c9a7	movq	$0x400, 0x8(%rsp)
000000000102c9b0	callq	runtime.memclrHasPointers
000000000102c9b5	movq	0x80(%rsp), %rax
000000000102c9bd	leaq	0xe18(%rax), %rcx
000000000102c9c4	testb	%al, (%rcx)
000000000102c9c6	movq	$0x0, 0xe08(%rax)
000000000102c9d1	movq	$0x80, 0xe10(%rax)
000000000102c9dc	cmpl	$0x0, 0xa824d(%rip)
000000000102c9e3	jne	0x102cb50
000000000102c9e9	movq	%rcx, 0xe00(%rax)
000000000102c9f0	xorl	%ecx, %ecx
000000000102c9f2	jmp	0x102c9fb
000000000102c9f4	leaq	0x1(%rax), %rcx
000000000102c9f8	movq	%rdx, %rax
000000000102c9fb	cmpq	$0x5, %rcx
000000000102c9ff	jge	0x102ca85
000000000102ca05	movq	%rcx, 0x60(%rsp)
000000000102ca0a	shlq	$0x8, %rcx
000000000102ca0e	movq	%rcx, 0x68(%rsp)
000000000102ca13	leaq	0xd0(%rax,%rcx), %rbx
000000000102ca1b	movq	%rbx, (%rsp)
000000000102ca1f	movq	$0x100, 0x8(%rsp)
000000000102ca28	callq	runtime.memclrHasPointers
000000000102ca2d	movq	0x60(%rsp), %rax
000000000102ca32	leaq	(%rax,%rax,2), %rcx
000000000102ca36	movq	0x80(%rsp), %rdx
000000000102ca3e	movq	$0x0, 0x60(%rdx,%rcx,8)
000000000102ca47	movq	$0x20, 0x68(%rdx,%rcx,8)
000000000102ca50	movq	0x68(%rsp), %rbx
000000000102ca55	leaq	0xd0(%rdx,%rbx), %rbx
000000000102ca5d	leaq	0x58(%rdx,%rcx,8), %rdi
000000000102ca62	cmpl	$0x0, 0xa81c7(%rip)
000000000102ca69	jne	0x102ca72
000000000102ca6b	movq	%rbx, 0x58(%rdx,%rcx,8)
000000000102ca70	jmp	0x102c9f4
000000000102ca72	movq	%rax, %rcx
000000000102ca75	movq	%rbx, %rax
000000000102ca78	callq	runtime.gcWriteBarrier
000000000102ca7d	movq	%rcx, %rax
000000000102ca80	jmp	0x102c9f4
000000000102ca85	movq	0x48(%rax), %rcx
000000000102ca89	movq	%rcx, (%rsp)
000000000102ca8d	callq	runtime.freemcache
000000000102ca92	movq	0x80(%rsp), %rax
000000000102ca9a	movq	$0x0, 0x48(%rax)
000000000102caa2	movq	%rax, (%rsp)
000000000102caa6	callq	runtime.gfpurge
000000000102caab	movq	0x80(%rsp), %rax
000000000102cab3	movq	%rax, (%rsp)
000000000102cab7	callq	runtime.traceProcFree
000000000102cabc	movq	0x80(%rsp), %rax
000000000102cac4	movq	$0x0, 0x1248(%rax)
000000000102cacf	movl	$0x4, 0xc(%rax)
000000000102cad6	movl	0x4c(%rsp), %eax
000000000102cada	leal	0x1(%rax), %ecx
000000000102cadd	movl	0x40(%rsp), %eax
000000000102cae1	movl	0xb8(%rsp), %eax
000000000102cae8	movl	0x40(%rsp), %edx
000000000102caec	cmpl	%edx, %ecx
000000000102caee	jge	0x102ccb9
000000000102caf4	movslq	%ecx, %rbx
000000000102caf7	movq	0x8bd5a(%rip), %rsi
000000000102cafe	movq	runtime.allp(%rip), %rdi
000000000102cb05	cmpq	%rsi, %rbx
000000000102cb08	jae	0x102d04c
000000000102cb0e	movl	%ecx, 0x4c(%rsp)
000000000102cb12	movq	(%rdi,%rbx,8), %rbx
000000000102cb16	movq	%rbx, 0x80(%rsp)
000000000102cb1e	leaq	0x97ecb(%rip), %rsi
000000000102cb25	cmpb	$0x0, (%rsi)
000000000102cb28	je	0x102c8c0
000000000102cb2e	movq	%gs:0x30, %rdi
000000000102cb37	movq	0x30(%rdi), %rdi
000000000102cb3b	movq	0xd0(%rdi), %rdi
000000000102cb42	cmpq	%rbx, %rdi
000000000102cb45	jne	0x102c8c0
000000000102cb4b	jmp	0x102cc80
000000000102cb50	leaq	0xe00(%rax), %rdi
000000000102cb57	movq	%rax, %rdx
000000000102cb5a	movq	%rcx, %rax
000000000102cb5d	callq	runtime.gcWriteBarrier
000000000102cb62	movq	%rdx, %rax
000000000102cb65	jmp	0x102c9f0
000000000102cb6a	movq	%rbx, (%rsp)
000000000102cb6e	callq	runtime.wbBufFlush1
000000000102cb73	movq	0x80(%rsp), %rax
000000000102cb7b	leaq	0x1270(%rax), %rcx
000000000102cb82	movq	%rcx, (%rsp)
000000000102cb86	callq	"runtime.(*gcWork).dispose"
000000000102cb8b	movq	0x80(%rsp), %rbx
000000000102cb93	jmp	0x102c99c
000000000102cb98	movq	%rdi, 0xa0(%rsp)
000000000102cba0	movq	%rdi, (%rsp)
000000000102cba4	movabsq	$0x100000004, %rax
000000000102cbae	movq	%rax, 0x8(%rsp)
000000000102cbb3	callq	runtime.casgstatus
000000000102cbb8	leaq	0x97e31(%rip), %rax
000000000102cbbf	cmpb	$0x0, (%rax)
000000000102cbc2	jne	0x102cc5a
000000000102cbc8	movq	0xa0(%rsp), %rcx
000000000102cbd0	movq	$0x0, 0xa0(%rcx)
000000000102cbdb	movq	0x8bf1e(%rip), %rdx
000000000102cbe2	testq	%rdx, %rdx
000000000102cbe5	je	0x102cc45
000000000102cbe7	leaq	0xa0(%rdx), %rbx
000000000102cbee	testb	%al, (%rbx)
000000000102cbf0	movq	%rcx, %rbx
000000000102cbf3	movq	%rcx, 0xa0(%rdx)
000000000102cbfa	leaq	0x8beff(%rip), %rdi
000000000102cc01	testb	%al, (%rdi)
000000000102cc03	movq	%rbx, 0x8bef6(%rip)
000000000102cc0a	incl	0x8bef8(%rip)
000000000102cc10	movq	0x80(%rsp), %rbx
000000000102cc18	leaq	0x1258(%rbx), %rdi
000000000102cc1f	testb	%al, (%rdi)
000000000102cc21	xorl	%edi, %edi
000000000102cc23	movq	%rdi, 0x1258(%rbx)
000000000102cc2a	movl	0xb8(%rsp), %eax
000000000102cc31	movl	0x4c(%rsp), %ecx
000000000102cc35	movl	0x40(%rsp), %edx
000000000102cc39	leaq	0x97db0(%rip), %rsi
000000000102cc40	jmp	0x102c98f
000000000102cc45	leaq	0x8beac(%rip), %rdx
000000000102cc4c	testb	%al, (%rdx)
000000000102cc4e	movq	%rcx, %rbx
000000000102cc51	movq	%rcx, 0x8bea0(%rip)
000000000102cc58	jmp	0x102cbfa
000000000102cc5a	movq	0xa0(%rsp), %rax
000000000102cc62	movq	%rax, (%rsp)
000000000102cc66	movq	$0x0, 0x8(%rsp)
000000000102cc6f	callq	runtime.traceGoUnpark
000000000102cc74	leaq	0x97d75(%rip), %rax
000000000102cc7b	jmp	0x102cbc8
000000000102cc80	callq	runtime.traceGoSched
000000000102cc85	movq	0x80(%rsp), %rax
000000000102cc8d	movq	%rax, (%rsp)
000000000102cc91	callq	runtime.traceProcStop
000000000102cc96	movl	0xb8(%rsp), %eax
000000000102cc9d	movl	0x4c(%rsp), %ecx
000000000102cca1	movl	0x40(%rsp), %edx
000000000102cca5	movq	0x80(%rsp), %rbx
000000000102ccad	leaq	0x97d3c(%rip), %rsi
000000000102ccb4	jmp	0x102c8c0
000000000102ccb9	movq	0x8bb98(%rip), %rcx
000000000102ccc0	cmpl	%ecx, %eax
000000000102ccc2	jne	0x102ceb4
000000000102ccc8	movq	%gs:0x30, %rcx
000000000102ccd1	movq	%rcx, 0x98(%rsp)
000000000102ccd9	movq	0x30(%rcx), %rdx
000000000102ccdd	movq	0xd0(%rdx), %rdx
000000000102cce4	testq	%rdx, %rdx
000000000102cce7	je	0x102ceac
000000000102cced	movq	%rdx, %rbx
000000000102ccf0	movl	0x8(%rdx), %esi
000000000102ccf3	cmpl	%eax, %esi
000000000102ccf5	jge	0x102ce2a
000000000102ccfb	movl	$0x1, 0xc(%rdx)
000000000102cd02	leal	-0x1(%rax), %edx
000000000102cd05	xorl	%ebx, %ebx
000000000102cd07	jmp	0x102cd0b
000000000102cd09	decl	%edx
000000000102cd0b	movq	%rbx, 0x88(%rsp)
000000000102cd13	testl	%edx, %edx
000000000102cd15	jl	0x102cde6
000000000102cd1b	movslq	%edx, %rsi
000000000102cd1e	movq	0x8bb33(%rip), %rdi
000000000102cd25	movq	runtime.allp(%rip), %r8
000000000102cd2c	cmpq	%rdi, %rsi
000000000102cd2f	jae	0x102d037
000000000102cd35	movq	0x30(%rcx), %rdi
000000000102cd39	movq	(%r8,%rsi,8), %rsi
000000000102cd3d	movq	0xd0(%rdi), %rdi
000000000102cd44	cmpq	%rsi, %rdi
000000000102cd47	je	0x102cd09
000000000102cd49	movl	%edx, 0x44(%rsp)
000000000102cd4d	movq	%rsi, 0x78(%rsp)
000000000102cd52	movl	$0x0, 0xc(%rsi)
000000000102cd59	movq	%rsi, (%rsp)
000000000102cd5d	callq	runtime.runqempty
000000000102cd62	leaq	0x8(%rsp), %rax
000000000102cd67	cmpb	$0x0, (%rax)
000000000102cd6a	jne	0x102cdc9
000000000102cd6c	movq	0x8bd45(%rip), %rcx
000000000102cd73	testq	%rcx, %rcx
000000000102cd76	je	0x102cd8d
000000000102cd78	movq	0x150(%rcx), %rdx
000000000102cd7f	movq	%rdx, 0x8bd32(%rip)
000000000102cd86	addl	$-0x1, 0x8bd33(%rip)
000000000102cd8d	movq	0x78(%rsp), %rdx
000000000102cd92	leaq	0x40(%rdx), %rbx
000000000102cd96	testb	%al, (%rbx)
000000000102cd98	movq	%rcx, 0x40(%rdx)
000000000102cd9c	leaq	0x10(%rdx), %rcx
000000000102cda0	testb	%al, (%rcx)
000000000102cda2	movq	0x88(%rsp), %rcx
000000000102cdaa	movq	%rcx, 0x10(%rdx)
000000000102cdae	movl	0xb8(%rsp), %eax
000000000102cdb5	movq	0x98(%rsp), %rcx
000000000102cdbd	movq	%rdx, %rbx
000000000102cdc0	movl	0x44(%rsp), %edx
000000000102cdc4	jmp	0x102cd09
000000000102cdc9	movq	0x78(%rsp), %rax
000000000102cdce	movq	%rax, (%rsp)
000000000102cdd2	callq	runtime.pidleput
000000000102cdd7	leaq	0x8(%rsp), %rax
000000000102cddc	movq	0x88(%rsp), %rdx
000000000102cde4	jmp	0x102cdae
000000000102cde6	leaq	runtime.stealOrder(%rip), %rcx
000000000102cded	movq	%rcx, (%rsp)
000000000102cdf1	movl	%eax, 0x8(%rsp)
000000000102cdf5	callq	"runtime.(*randomOrder).reset"
000000000102cdfa	movl	0xb8(%rsp), %eax
000000000102ce01	leaq	runtime.gomaxprocs(%rip), %rcx
000000000102ce08	xchgl	%eax, (%rcx)
000000000102ce0a	movq	0x88(%rsp), %rax
000000000102ce12	movq	%rax, 0xc0(%rsp)
000000000102ce1a	movq	0xa8(%rsp), %rbp
000000000102ce22	addq	$0xb0, %rsp
000000000102ce29	retq
000000000102ce2a	testq	%rbx, %rbx
000000000102ce2d	je	0x102ce37
000000000102ce2f	movq	$0x0, 0x40(%rbx)
000000000102ce37	movq	0x30(%rcx), %rdx
000000000102ce3b	movq	$0x0, 0xd0(%rdx)
000000000102ce46	movq	0x30(%rcx), %rdx
000000000102ce4a	movq	$0x0, 0x158(%rdx)
000000000102ce55	movq	runtime.allp(%rip), %rdx
000000000102ce5c	cmpq	$0x0, 0x8b9f4(%rip)
000000000102ce64	jbe	0x102d03e
000000000102ce6a	movq	(%rdx), %rax
000000000102ce6d	movq	$0x0, 0x40(%rax)
000000000102ce75	movl	$0x0, 0xc(%rax)
000000000102ce7c	movq	%rax, (%rsp)
000000000102ce80	callq	runtime.acquirep
000000000102ce85	leaq	0x97b64(%rip), %rax
000000000102ce8c	cmpb	$0x0, (%rax)
000000000102ce8f	jne	0x102cea5
000000000102ce91	movl	0xb8(%rsp), %eax
000000000102ce98	movq	0x98(%rsp), %rcx
000000000102cea0	jmp	0x102cd02
000000000102cea5	callq	runtime.traceGoStart
000000000102ceaa	jmp	0x102ce91
000000000102ceac	movq	%rdx, %rbx
000000000102ceaf	jmp	0x102ce2d
000000000102ceb4	leaq	runtime.allpLock(%rip), %rax
000000000102cebb	movq	%rax, (%rsp)
000000000102cebf	callq	runtime.lock
000000000102cec4	movl	0xb8(%rsp), %eax
000000000102cecb	movslq	%eax, %rcx
000000000102cece	movq	0x8b98b(%rip), %rdx
000000000102ced5	cmpq	%rdx, %rcx
000000000102ced8	ja	0x102d045
000000000102cede	movq	%rcx, 0x8b973(%rip)
000000000102cee5	leaq	runtime.allpLock(%rip), %rax
000000000102ceec	movq	%rax, (%rsp)
000000000102cef0	callq	runtime.unlock
000000000102cef5	movl	0xb8(%rsp), %eax
000000000102cefc	jmp	0x102ccc8
000000000102cf01	leaq	runtime.allpLock(%rip), %rax
000000000102cf08	movq	%rax, (%rsp)
000000000102cf0c	callq	runtime.lock
000000000102cf11	movq	0x8b948(%rip), %rax
000000000102cf18	movl	0xb8(%rsp), %ecx
000000000102cf1f	cmpl	%eax, %ecx
000000000102cf21	jg	0x102cf56
000000000102cf23	movslq	%ecx, %rdx
000000000102cf26	cmpq	%rax, %rdx
000000000102cf29	ja	0x102d07c
000000000102cf2f	movq	%rdx, 0x8b922(%rip)
000000000102cf36	leaq	runtime.allpLock(%rip), %rax
000000000102cf3d	movq	%rax, (%rsp)
000000000102cf41	callq	runtime.unlock
000000000102cf46	movl	0xb8(%rsp), %ecx
000000000102cf4d	movl	0x40(%rsp), %edx
000000000102cf51	jmp	0x102c6f5
000000000102cf56	leaq	0x28983(%rip), %rax
000000000102cf5d	movq	%rax, (%rsp)
000000000102cf61	movslq	%ecx, %rdx
000000000102cf64	movq	%rdx, 0x8(%rsp)
000000000102cf69	movq	%rdx, 0x10(%rsp)
000000000102cf6e	callq	runtime.makeslice
000000000102cf73	movq	0x28(%rsp), %rax
000000000102cf78	movq	%rax, 0x58(%rsp)
000000000102cf7d	movq	0x20(%rsp), %rcx
000000000102cf82	movq	%rcx, 0x50(%rsp)
000000000102cf87	movq	0x18(%rsp), %rdx
000000000102cf8c	movq	%rdx, 0x90(%rsp)
000000000102cf94	movq	0x8b8c5(%rip), %rbx
000000000102cf9b	movq	runtime.allp(%rip), %rsi
000000000102cfa2	leaq	0x28937(%rip), %rdi
000000000102cfa9	movq	%rdi, (%rsp)
000000000102cfad	movq	%rdx, 0x8(%rsp)
000000000102cfb2	movq	%rcx, 0x10(%rsp)
000000000102cfb7	movq	%rax, 0x18(%rsp)
000000000102cfbc	movq	%rsi, 0x20(%rsp)
000000000102cfc1	movq	%rbx, 0x28(%rsp)
000000000102cfc6	movq	%rbx, 0x30(%rsp)
000000000102cfcb	callq	runtime.typedslicecopy
000000000102cfd0	movq	0x50(%rsp), %rax
000000000102cfd5	movq	%rax, 0x8b87c(%rip)
000000000102cfdc	movq	0x58(%rsp), %rax
000000000102cfe1	movq	%rax, 0x8b878(%rip)
000000000102cfe8	cmpl	$0x0, 0xa7c41(%rip)
000000000102cfef	jne	0x102d005
000000000102cff1	movq	0x90(%rsp), %rax
000000000102cff9	movq	%rax, runtime.allp(%rip)
000000000102d000	jmp	0x102cf36
000000000102d005	leaq	runtime.allp(%rip), %rdi
000000000102d00c	movq	0x90(%rsp), %rax
000000000102d014	callq	runtime.gcWriteBarrier
000000000102d019	jmp	0x102cf36
000000000102d01e	movl	0x40(%rsp), %edx
000000000102d022	movq	%rax, %rsi
000000000102d025	jmp	0x102c6d8
000000000102d02a	movl	%ecx, (%rsp)
000000000102d02d	callq	runtime.traceGomaxprocs
000000000102d032	jmp	0x102c6a0
000000000102d037	callq	runtime.panicindex
000000000102d03c	ud2
000000000102d03e	callq	runtime.panicindex
000000000102d043	ud2
000000000102d045	callq	runtime.panicslice
000000000102d04a	ud2
000000000102d04c	callq	runtime.panicindex
000000000102d051	ud2
000000000102d053	leaq	0x3e658(%rip), %rax
000000000102d05a	movq	%rax, (%rsp)
000000000102d05e	movq	$0xf, 0x8(%rsp)
000000000102d067	callq	runtime.throw
000000000102d06c	ud2
000000000102d06e	callq	runtime.panicindex
000000000102d073	ud2
000000000102d075	callq	runtime.panicindex
000000000102d07a	ud2
000000000102d07c	callq	runtime.panicslice
000000000102d081	ud2
000000000102d083	leaq	0x3f3dd(%rip), %rax
000000000102d08a	movq	%rax, (%rsp)
000000000102d08e	movq	$0x17, 0x8(%rsp)
000000000102d097	callq	runtime.throw
000000000102d09c	ud2
000000000102d09e	callq	runtime.morestack_noctxt
000000000102d0a3	jmp	runtime.procresize
000000000102d0a8	int3
000000000102d0a9	int3
000000000102d0aa	int3
000000000102d0ab	int3
000000000102d0ac	int3
000000000102d0ad	int3
000000000102d0ae	int3
000000000102d0af	int3
runtime.acquirep:
000000000102d0b0	movq	%gs:0x30, %rcx
000000000102d0b9	cmpq	0x10(%rcx), %rsp
000000000102d0bd	jbe	0x102d115
000000000102d0bf	subq	$0x10, %rsp
000000000102d0c3	movq	%rbp, 0x8(%rsp)
000000000102d0c8	leaq	0x8(%rsp), %rbp
000000000102d0cd	movq	0x18(%rsp), %rax
000000000102d0d2	movq	%rax, (%rsp)
000000000102d0d6	callq	runtime.acquirep1
000000000102d0db	movq	%gs:0x30, %rax
000000000102d0e4	movq	0x30(%rax), %rax
000000000102d0e8	movq	0x18(%rsp), %rcx
000000000102d0ed	movq	0x48(%rcx), %rcx
000000000102d0f1	movq	%rcx, 0x158(%rax)
000000000102d0f8	leaq	0x978f1(%rip), %rax
000000000102d0ff	cmpb	$0x0, (%rax)
000000000102d102	jne	0x102d10e
000000000102d104	movq	0x8(%rsp), %rbp
000000000102d109	addq	$0x10, %rsp
000000000102d10d	retq
000000000102d10e	callq	runtime.traceProcStart
000000000102d113	jmp	0x102d104
000000000102d115	callq	runtime.morestack_noctxt
000000000102d11a	jmp	runtime.acquirep
000000000102d11c	int3
000000000102d11d	int3
000000000102d11e	int3
000000000102d11f	int3
runtime.acquirep1:
000000000102d120	movq	%gs:0x30, %rcx
000000000102d129	cmpq	0x10(%rcx), %rsp
000000000102d12d	jbe	0x102d28f
000000000102d133	subq	$0x30, %rsp
000000000102d137	movq	%rbp, 0x28(%rsp)
000000000102d13c	leaq	0x28(%rsp), %rbp
000000000102d141	movq	%gs:0x30, %rax
000000000102d14a	movq	0x30(%rax), %rcx
000000000102d14e	cmpq	$0x0, 0xd0(%rcx)
000000000102d156	jne	0x102d274
000000000102d15c	cmpq	$0x0, 0x158(%rcx)
000000000102d164	jne	0x102d274
000000000102d16a	movq	0x38(%rsp), %rdx
000000000102d16f	movq	0x40(%rdx), %rbx
000000000102d173	testq	%rbx, %rbx
000000000102d176	jne	0x102d1b3
000000000102d178	cmpl	$0x0, 0xc(%rdx)
000000000102d17c	jne	0x102d1b0
000000000102d17e	leaq	0xd0(%rcx), %rbx
000000000102d185	testb	%al, (%rbx)
000000000102d187	movq	%rdx, %rbx
000000000102d18a	movq	%rdx, 0xd0(%rcx)
000000000102d191	leaq	0x40(%rbx), %rcx
000000000102d195	testb	%al, (%rcx)
000000000102d197	movq	0x30(%rax), %rax
000000000102d19b	movq	%rax, 0x40(%rbx)
000000000102d19f	movl	$0x1, 0xc(%rbx)
000000000102d1a6	movq	0x28(%rsp), %rbp
000000000102d1ab	addq	$0x30, %rsp
000000000102d1af	retq
000000000102d1b0	testq	%rbx, %rbx
000000000102d1b3	movq	%rbx, 0x20(%rsp)
000000000102d1b8	je	0x102d1c6
000000000102d1ba	movq	0xe0(%rbx), %rcx
000000000102d1c1	movq	%rcx, %rax
000000000102d1c4	jmp	0x102d1c8
000000000102d1c6	xorl	%eax, %eax
000000000102d1c8	movq	%rax, 0x10(%rsp)
000000000102d1cd	movl	0xc(%rdx), %ecx
000000000102d1d0	movq	%rcx, 0x18(%rsp)
000000000102d1d5	callq	runtime.printlock
000000000102d1da	leaq	0x3e495(%rip), %rax
000000000102d1e1	movq	%rax, (%rsp)
000000000102d1e5	movq	$0xf, 0x8(%rsp)
000000000102d1ee	callq	runtime.printstring
000000000102d1f3	movq	0x20(%rsp), %rax
000000000102d1f8	movq	%rax, (%rsp)
000000000102d1fc	callq	runtime.printuint
000000000102d201	leaq	0x3d879(%rip), %rax
000000000102d208	movq	%rax, (%rsp)
000000000102d20c	movq	$0x1, 0x8(%rsp)
000000000102d215	callq	runtime.printstring
000000000102d21a	movq	0x10(%rsp), %rax
000000000102d21f	movq	%rax, (%rsp)
000000000102d223	callq	runtime.printint
000000000102d228	leaq	0x3e06d(%rip), %rax
000000000102d22f	movq	%rax, (%rsp)
000000000102d233	movq	$0xc, 0x8(%rsp)
000000000102d23c	callq	runtime.printstring
000000000102d241	movq	0x18(%rsp), %rax
000000000102d246	movq	%rax, (%rsp)
000000000102d24a	callq	runtime.printuint
000000000102d24f	callq	runtime.printnl
000000000102d254	callq	runtime.printunlock
000000000102d259	leaq	0x3f485(%rip), %rax
000000000102d260	movq	%rax, (%rsp)
000000000102d264	movq	$0x19, 0x8(%rsp)
000000000102d26d	callq	runtime.throw
000000000102d272	ud2
000000000102d274	leaq	0x3f0d8(%rip), %rax
000000000102d27b	movq	%rax, (%rsp)
000000000102d27f	movq	$0x17, 0x8(%rsp)
000000000102d288	callq	runtime.throw
000000000102d28d	ud2
000000000102d28f	callq	runtime.morestack_noctxt
000000000102d294	jmp	runtime.acquirep1
000000000102d299	int3
000000000102d29a	int3
000000000102d29b	int3
000000000102d29c	int3
000000000102d29d	int3
000000000102d29e	int3
000000000102d29f	int3
runtime.releasep:
000000000102d2a0	movq	%gs:0x30, %rcx
000000000102d2a9	cmpq	0x10(%rcx), %rsp
000000000102d2ad	jbe	0x102d4bc
000000000102d2b3	subq	$0x50, %rsp
000000000102d2b7	movq	%rbp, 0x48(%rsp)
000000000102d2bc	leaq	0x48(%rsp), %rbp
000000000102d2c1	movq	%gs:0x30, %rax
000000000102d2ca	movq	0x30(%rax), %rcx
000000000102d2ce	movq	0xd0(%rcx), %rdx
000000000102d2d5	testq	%rdx, %rdx
000000000102d2d8	je	0x102d4a1
000000000102d2de	movq	0x158(%rcx), %rbx
000000000102d2e5	testq	%rbx, %rbx
000000000102d2e8	je	0x102d4a1
000000000102d2ee	movq	%rcx, 0x40(%rsp)
000000000102d2f3	movq	%rbx, 0x38(%rsp)
000000000102d2f8	movq	%rdx, 0x30(%rsp)
000000000102d2fd	movq	0x40(%rdx), %rsi
000000000102d301	movq	%rsi, 0x10(%rsp)
000000000102d306	cmpq	%rcx, %rsi
000000000102d309	jne	0x102d37c
000000000102d30b	movq	0x48(%rdx), %rsi
000000000102d30f	cmpq	%rbx, %rsi
000000000102d312	jne	0x102d37c
000000000102d314	cmpl	$0x1, 0xc(%rdx)
000000000102d318	jne	0x102d37c
000000000102d31a	leaq	0x976cf(%rip), %rcx
000000000102d321	cmpb	$0x0, (%rcx)
000000000102d324	jne	0x102d362
000000000102d326	movq	0x30(%rax), %rcx
000000000102d32a	movq	$0x0, 0xd0(%rcx)
000000000102d335	movq	0x30(%rax), %rax
000000000102d339	movq	$0x0, 0x158(%rax)
000000000102d344	movq	$0x0, 0x40(%rdx)
000000000102d34c	movl	$0x0, 0xc(%rdx)
000000000102d353	movq	%rdx, 0x58(%rsp)
000000000102d358	movq	0x48(%rsp), %rbp
000000000102d35d	addq	$0x50, %rsp
000000000102d361	retq
000000000102d362	movq	%rax, 0x20(%rsp)
000000000102d367	movq	%rdx, (%rsp)
000000000102d36b	callq	runtime.traceProcStop
000000000102d370	movq	0x20(%rsp), %rax
000000000102d375	movq	0x30(%rsp), %rdx
000000000102d37a	jmp	0x102d326
000000000102d37c	movl	0xc(%rdx), %eax
000000000102d37f	movq	%rax, 0x18(%rsp)
000000000102d384	movq	0x48(%rdx), %rcx
000000000102d388	movq	%rcx, 0x28(%rsp)
000000000102d38d	callq	runtime.printlock
000000000102d392	leaq	0x3dfc3(%rip), %rax
000000000102d399	movq	%rax, (%rsp)
000000000102d39d	movq	$0xc, 0x8(%rsp)
000000000102d3a6	callq	runtime.printstring
000000000102d3ab	movq	0x40(%rsp), %rax
000000000102d3b0	movq	%rax, (%rsp)
000000000102d3b4	callq	runtime.printpointer
000000000102d3b9	leaq	0x3d897(%rip), %rax
000000000102d3c0	movq	%rax, (%rsp)
000000000102d3c4	movq	$0x6, 0x8(%rsp)
000000000102d3cd	callq	runtime.printstring
000000000102d3d2	movq	0x30(%rsp), %rax
000000000102d3d7	movq	%rax, (%rsp)
000000000102d3db	callq	runtime.printpointer
000000000102d3e0	leaq	0x3d876(%rip), %rax
000000000102d3e7	movq	%rax, (%rsp)
000000000102d3eb	movq	$0x6, 0x8(%rsp)
000000000102d3f4	callq	runtime.printstring
000000000102d3f9	movq	0x10(%rsp), %rax
000000000102d3fe	movq	%rax, (%rsp)
000000000102d402	callq	runtime.printuint
000000000102d407	leaq	0x3dcf5(%rip), %rax
000000000102d40e	movq	%rax, (%rsp)
000000000102d412	movq	$0xb, 0x8(%rsp)
000000000102d41b	callq	runtime.printstring
000000000102d420	movq	0x38(%rsp), %rax
000000000102d425	movq	%rax, (%rsp)
000000000102d429	callq	runtime.printpointer
000000000102d42e	leaq	0x3dcef(%rip), %rax
000000000102d435	movq	%rax, (%rsp)
000000000102d439	movq	$0xb, 0x8(%rsp)
000000000102d442	callq	runtime.printstring
000000000102d447	movq	0x28(%rsp), %rax
000000000102d44c	movq	%rax, (%rsp)
000000000102d450	callq	runtime.printpointer
000000000102d455	leaq	0x3dcd3(%rip), %rax
000000000102d45c	movq	%rax, (%rsp)
000000000102d460	movq	$0xb, 0x8(%rsp)
000000000102d469	callq	runtime.printstring
000000000102d46e	movq	0x18(%rsp), %rax
000000000102d473	movq	%rax, (%rsp)
000000000102d477	callq	runtime.printuint
000000000102d47c	callq	runtime.printnl
000000000102d481	callq	runtime.printunlock
000000000102d486	leaq	0x3f352(%rip), %rax
000000000102d48d	movq	%rax, (%rsp)
000000000102d491	movq	$0x19, 0x8(%rsp)
000000000102d49a	callq	runtime.throw
000000000102d49f	ud2
000000000102d4a1	leaq	0x3eb81(%rip), %rax
000000000102d4a8	movq	%rax, (%rsp)
000000000102d4ac	movq	$0x15, 0x8(%rsp)
000000000102d4b5	callq	runtime.throw
000000000102d4ba	ud2
000000000102d4bc	callq	runtime.morestack_noctxt
000000000102d4c1	jmp	runtime.releasep
000000000102d4c6	int3
000000000102d4c7	int3
000000000102d4c8	int3
000000000102d4c9	int3
000000000102d4ca	int3
000000000102d4cb	int3
000000000102d4cc	int3
000000000102d4cd	int3
000000000102d4ce	int3
000000000102d4cf	int3
runtime.incidlelocked:
000000000102d4d0	movq	%gs:0x30, %rcx
000000000102d4d9	cmpq	0x10(%rcx), %rsp
000000000102d4dd	jbe	0x102d534
000000000102d4df	subq	$0x10, %rsp
000000000102d4e3	movq	%rbp, 0x8(%rsp)
000000000102d4e8	leaq	0x8(%rsp), %rbp
000000000102d4ed	leaq	0x8b5bc(%rip), %rax
000000000102d4f4	movq	%rax, (%rsp)
000000000102d4f8	callq	runtime.lock
000000000102d4fd	movl	0x8b5c1(%rip), %eax
000000000102d503	movl	0x18(%rsp), %ecx
000000000102d507	addl	%ecx, %eax
000000000102d509	movl	%eax, 0x8b5b5(%rip)
000000000102d50f	testl	%ecx, %ecx
000000000102d511	jg	0x102d52d
000000000102d513	leaq	0x8b596(%rip), %rax
000000000102d51a	movq	%rax, (%rsp)
000000000102d51e	callq	runtime.unlock
000000000102d523	movq	0x8(%rsp), %rbp
000000000102d528	addq	$0x10, %rsp
000000000102d52c	retq
000000000102d52d	callq	runtime.checkdead
000000000102d532	jmp	0x102d513
000000000102d534	callq	runtime.morestack_noctxt
000000000102d539	jmp	runtime.incidlelocked
000000000102d53b	int3
000000000102d53c	int3
000000000102d53d	int3
000000000102d53e	int3
000000000102d53f	int3
runtime.checkdead:
000000000102d540	movq	%gs:0x30, %rcx
000000000102d549	cmpq	0x10(%rcx), %rsp
000000000102d54d	jbe	0x102d9d3
000000000102d553	subq	$0x50, %rsp
000000000102d557	movq	%rbp, 0x48(%rsp)
000000000102d55c	leaq	0x48(%rsp), %rbp
000000000102d561	leaq	runtime.islibrary(%rip), %rax
000000000102d568	cmpb	$0x0, (%rax)
000000000102d56b	jne	0x102d7c8
000000000102d571	leaq	runtime.isarchive(%rip), %rax
000000000102d578	cmpb	$0x0, (%rax)
000000000102d57b	jne	0x102d7c8
000000000102d581	cmpl	$0x0, 0xa758c(%rip)
000000000102d588	ja	0x102d7be
000000000102d58e	leaq	runtime.iscgo(%rip), %rax
000000000102d595	cmpb	$0x0, (%rax)
000000000102d598	je	0x102d7a1
000000000102d59e	xorl	%eax, %eax
000000000102d5a0	movl	0x8b51a(%rip), %ecx
000000000102d5a6	movq	0x8b51b(%rip), %rdx
000000000102d5ad	subq	0x8b524(%rip), %rdx
000000000102d5b4	movq	%rdx, %rbx
000000000102d5b7	subl	%ecx, %edx
000000000102d5b9	movl	0x8b505(%rip), %esi
000000000102d5bf	subl	%esi, %edx
000000000102d5c1	movl	0x8b50d(%rip), %edi
000000000102d5c7	subl	%edi, %edx
000000000102d5c9	cmpl	%eax, %edx
000000000102d5cb	jg	0x102d797
000000000102d5d1	testl	%edx, %edx
000000000102d5d3	jl	0x102d8f3
000000000102d5d9	leaq	runtime.allglock(%rip), %rax
000000000102d5e0	movq	%rax, (%rsp)
000000000102d5e4	callq	runtime.lock
000000000102d5e9	xorl	%eax, %eax
000000000102d5eb	xorl	%ecx, %ecx
000000000102d5ed	jmp	0x102d5fa
000000000102d5ef	movq	0x20(%rsp), %rdx
000000000102d5f4	incq	%rdx
000000000102d5f7	movq	%rdx, %rax
000000000102d5fa	movq	%rcx, 0x28(%rsp)
000000000102d5ff	movq	0x8b232(%rip), %rdx
000000000102d606	movq	runtime.allgs(%rip), %rbx
000000000102d60d	cmpq	%rdx, %rax
000000000102d610	jge	0x102d66d
000000000102d612	movq	%rax, 0x20(%rsp)
000000000102d617	movq	(%rbx,%rax,8), %rcx
000000000102d61b	movq	%rcx, 0x38(%rsp)
000000000102d620	movq	%rcx, (%rsp)
000000000102d624	callq	runtime.isSystemGoroutine
000000000102d629	leaq	0x8(%rsp), %rax
000000000102d62e	cmpb	$0x0, (%rax)
000000000102d631	je	0x102d63a
000000000102d633	movq	0x28(%rsp), %rcx
000000000102d638	jmp	0x102d5ef
000000000102d63a	movq	0x38(%rsp), %rcx
000000000102d63f	movl	0x90(%rcx), %edx
000000000102d645	movl	%edx, %ebx
000000000102d647	btrl	$0xc, %edx
000000000102d64b	leal	-0x1(%rdx), %esi
000000000102d64e	cmpl	$0x2, %esi
000000000102d651	jbe	0x102d855
000000000102d657	cmpl	$0x4, %edx
000000000102d65a	jne	0x102d666
000000000102d65c	movq	0x28(%rsp), %rcx
000000000102d661	incq	%rcx
000000000102d664	jmp	0x102d5ef
000000000102d666	movq	0x28(%rsp), %rcx
000000000102d66b	jmp	0x102d5ef
000000000102d66d	leaq	runtime.allglock(%rip), %rax
000000000102d674	movq	%rax, (%rsp)
000000000102d678	callq	runtime.unlock
000000000102d67d	movq	0x28(%rsp), %rax
000000000102d682	testq	%rax, %rax
000000000102d685	je	0x102d83a
000000000102d68b	callq	runtime.timejump
000000000102d690	movq	(%rsp), %rax
000000000102d694	testq	%rax, %rax
000000000102d697	je	0x102d808
000000000102d69d	movq	%rax, 0x40(%rsp)
000000000102d6a2	movabsq	$0x100000004, %rax
000000000102d6ac	movq	%rax, 0x8(%rsp)
000000000102d6b1	callq	runtime.casgstatus
000000000102d6b6	movq	0x40(%rsp), %rax
000000000102d6bb	movq	$0x0, 0xa0(%rax)
000000000102d6c6	movq	0x8b433(%rip), %rcx
000000000102d6cd	testq	%rcx, %rcx
000000000102d6d0	je	0x102d77f
000000000102d6d6	leaq	0xa0(%rcx), %rdx
000000000102d6dd	testb	%al, (%rdx)
000000000102d6df	movq	%rax, %rdx
000000000102d6e2	movq	%rax, 0xa0(%rcx)
000000000102d6e9	leaq	0x8b410(%rip), %rax
000000000102d6f0	testb	%al, (%rax)
000000000102d6f2	movq	%rdx, 0x8b407(%rip)
000000000102d6f9	incl	0x8b409(%rip)
000000000102d6ff	movq	0x8b3e2(%rip), %rax
000000000102d706	testq	%rax, %rax
000000000102d709	je	0x102d729
000000000102d70b	movq	0x10(%rax), %rcx
000000000102d70f	movq	%rcx, 0x8b3d2(%rip)
000000000102d716	movl	$0xffffffff, %ecx
000000000102d71b	leaq	0x8b3ce(%rip), %rdx
000000000102d722	lock
000000000102d723	xaddl	%ecx, (%rdx)
000000000102d726	testq	%rax, %rax
000000000102d729	je	0x102d7ed
000000000102d72f	movq	0x8b382(%rip), %rcx
000000000102d736	testq	%rcx, %rcx
000000000102d739	je	0x102d753
000000000102d73b	movq	0x150(%rcx), %rdx
000000000102d742	movq	%rdx, 0x8b36f(%rip)
000000000102d749	addl	$-0x1, 0x8b370(%rip)
000000000102d750	testq	%rcx, %rcx
000000000102d753	je	0x102d7d2
000000000102d755	leaq	0xd8(%rcx), %rdx
000000000102d75c	testb	%al, (%rdx)
000000000102d75e	movq	%rax, 0xd8(%rcx)
000000000102d765	leaq	0x140(%rcx), %rax
000000000102d76c	movq	%rax, (%rsp)
000000000102d770	callq	runtime.notewakeup
000000000102d775	movq	0x48(%rsp), %rbp
000000000102d77a	addq	$0x50, %rsp
000000000102d77e	retq
000000000102d77f	leaq	0x8b372(%rip), %rcx
000000000102d786	testb	%al, (%rcx)
000000000102d788	movq	%rax, %rdx
000000000102d78b	movq	%rax, 0x8b366(%rip)
000000000102d792	jmp	0x102d6e9
000000000102d797	movq	0x48(%rsp), %rbp
000000000102d79c	addq	$0x50, %rsp
000000000102d7a0	retq
000000000102d7a1	leaq	runtime.cgoHasExtraM(%rip), %rax
000000000102d7a8	cmpb	$0x0, (%rax)
000000000102d7ab	je	0x102d7b7
000000000102d7ad	movl	$0x1, %eax
000000000102d7b2	jmp	0x102d5a0
000000000102d7b7	xorl	%eax, %eax
000000000102d7b9	jmp	0x102d5a0
000000000102d7be	movq	0x48(%rsp), %rbp
000000000102d7c3	addq	$0x50, %rsp
000000000102d7c7	retq
000000000102d7c8	movq	0x48(%rsp), %rbp
000000000102d7cd	addq	$0x50, %rsp
000000000102d7d1	retq
000000000102d7d2	leaq	0x3efa2(%rip), %rax
000000000102d7d9	movq	%rax, (%rsp)
000000000102d7dd	movq	$0x19, 0x8(%rsp)
000000000102d7e6	callq	runtime.throw
000000000102d7eb	ud2
000000000102d7ed	leaq	0x3efa0(%rip), %rax
000000000102d7f4	movq	%rax, (%rsp)
000000000102d7f8	movq	$0x19, 0x8(%rsp)
000000000102d801	callq	runtime.throw
000000000102d806	ud2
000000000102d808	movq	%gs:0x30, %rax
000000000102d811	movq	0x30(%rax), %rax
000000000102d815	movl	$0xffffffff, 0xec(%rax)
000000000102d81f	leaq	0x4059d(%rip), %rax
000000000102d826	movq	%rax, (%rsp)
000000000102d82a	movq	$0x25, 0x8(%rsp)
000000000102d833	callq	runtime.throw
000000000102d838	ud2
000000000102d83a	leaq	0x411f1(%rip), %rax
000000000102d841	movq	%rax, (%rsp)
000000000102d845	movq	$0x36, 0x8(%rsp)
000000000102d84e	callq	runtime.throw
000000000102d853	ud2
000000000102d855	movl	%ebx, 0x1c(%rsp)
000000000102d859	leaq	runtime.allglock(%rip), %rax
000000000102d860	movq	%rax, (%rsp)
000000000102d864	callq	runtime.unlock
000000000102d869	movq	0x38(%rsp), %rax
000000000102d86e	movq	0x98(%rax), %rax
000000000102d875	movq	%rax, 0x30(%rsp)
000000000102d87a	callq	runtime.printlock
000000000102d87f	leaq	0x3f307(%rip), %rax
000000000102d886	movq	%rax, (%rsp)
000000000102d88a	movq	$0x1b, 0x8(%rsp)
000000000102d893	callq	runtime.printstring
000000000102d898	movq	0x30(%rsp), %rax
000000000102d89d	movq	%rax, (%rsp)
000000000102d8a1	callq	runtime.printint
000000000102d8a6	leaq	0x3d84b(%rip), %rax
000000000102d8ad	movq	%rax, (%rsp)
000000000102d8b1	movq	$0xb, 0x8(%rsp)
000000000102d8ba	callq	runtime.printstring
000000000102d8bf	movl	0x1c(%rsp), %eax
000000000102d8c3	movl	%eax, %eax
000000000102d8c5	movq	%rax, (%rsp)
000000000102d8c9	callq	runtime.printuint
000000000102d8ce	callq	runtime.printnl
000000000102d8d3	callq	runtime.printunlock
000000000102d8d8	leaq	0x3e6cc(%rip), %rax
000000000102d8df	movq	%rax, (%rsp)
000000000102d8e3	movq	$0x15, 0x8(%rsp)
000000000102d8ec	callq	runtime.throw
000000000102d8f1	ud2
000000000102d8f3	movq	%rbx, 0x30(%rsp)
000000000102d8f8	movl	%ecx, 0x18(%rsp)
000000000102d8fc	movl	%esi, 0x14(%rsp)
000000000102d900	movl	%edi, 0x10(%rsp)
000000000102d904	callq	runtime.printlock
000000000102d909	leaq	0x3f298(%rip), %rax
000000000102d910	movq	%rax, (%rsp)
000000000102d914	movq	$0x1b, 0x8(%rsp)
000000000102d91d	callq	runtime.printstring
000000000102d922	movl	0x18(%rsp), %eax
000000000102d926	movslq	%eax, %rax
000000000102d929	movq	%rax, (%rsp)
000000000102d92d	callq	runtime.printint
000000000102d932	leaq	0x3dbcf(%rip), %rax
000000000102d939	movq	%rax, (%rsp)
000000000102d93d	movq	$0xe, 0x8(%rsp)
000000000102d946	callq	runtime.printstring
000000000102d94b	movl	0x14(%rsp), %eax
000000000102d94f	movslq	%eax, %rax
000000000102d952	movq	%rax, (%rsp)
000000000102d956	callq	runtime.printint
000000000102d95b	leaq	0x3d497(%rip), %rax
000000000102d962	movq	%rax, (%rsp)
000000000102d966	movq	$0x8, 0x8(%rsp)
000000000102d96f	callq	runtime.printstring
000000000102d974	movq	0x30(%rsp), %rax
000000000102d979	movslq	%eax, %rax
000000000102d97c	movq	%rax, (%rsp)
000000000102d980	callq	runtime.printint
000000000102d985	leaq	0x3d343(%rip), %rax
000000000102d98c	movq	%rax, (%rsp)
000000000102d990	movq	$0x7, 0x8(%rsp)
000000000102d999	callq	runtime.printstring
000000000102d99e	movl	0x10(%rsp), %eax
000000000102d9a2	movslq	%eax, %rax
000000000102d9a5	movq	%rax, (%rsp)
000000000102d9a9	callq	runtime.printint
000000000102d9ae	callq	runtime.printnl
000000000102d9b3	callq	runtime.printunlock
000000000102d9b8	leaq	0x3f893(%rip), %rax
000000000102d9bf	movq	%rax, (%rsp)
000000000102d9c3	movq	$0x1e, 0x8(%rsp)
000000000102d9cc	callq	runtime.throw
000000000102d9d1	ud2
000000000102d9d3	callq	runtime.morestack_noctxt
000000000102d9d8	jmp	runtime.checkdead
000000000102d9dd	int3
000000000102d9de	int3
000000000102d9df	int3
runtime.sysmon:
000000000102d9e0	movq	%gs:0x30, %rcx
000000000102d9e9	cmpq	0x10(%rcx), %rsp
000000000102d9ed	jbe	0x102dec0
000000000102d9f3	subq	$0x80, %rsp
000000000102d9fa	movq	%rbp, 0x78(%rsp)
000000000102d9ff	leaq	0x78(%rsp), %rbp
000000000102da04	leaq	0x8b0a5(%rip), %rax
000000000102da0b	movq	%rax, (%rsp)
000000000102da0f	callq	runtime.lock
000000000102da14	incl	0x8b0ba(%rip)
000000000102da1a	callq	runtime.checkdead
000000000102da1f	leaq	0x8b08a(%rip), %rax
000000000102da26	movq	%rax, (%rsp)
000000000102da2a	callq	runtime.unlock
000000000102da2f	cmpl	$0x0, 0xa7316(%rip)
000000000102da36	jle	0x102deb1
000000000102da3c	movq	$0x989680, 0x88709(%rip)
000000000102da47	movl	$0x1312d00, %eax
000000000102da4c	movq	%rax, 0x30(%rsp)
000000000102da51	callq	runtime.nanotime
000000000102da56	movq	(%rsp), %rax
000000000102da5a	xorl	%ecx, %ecx
000000000102da5c	xorl	%edx, %edx
000000000102da5e	xorl	%ebx, %ebx
000000000102da60	xorl	%esi, %esi
000000000102da62	jmp	0x102da74
000000000102da64	movq	%rax, %rcx
000000000102da67	movq	%rsi, %rax
000000000102da6a	movq	%rdx, %rbx
000000000102da6d	movq	%r9, %rsi
000000000102da70	movl	0x24(%rsp), %edx
000000000102da74	movq	%rsi, 0x40(%rsp)
000000000102da79	movq	%rbx, 0x38(%rsp)
000000000102da7e	movq	%rax, 0x48(%rsp)
000000000102da83	movq	%rcx, 0x50(%rsp)
000000000102da88	testq	%rcx, %rcx
000000000102da8b	jne	0x102de9f
000000000102da91	movl	$0x14, %edx
000000000102da96	cmpl	$0x2710, %edx
000000000102da9c	movl	$0x2710, %eax
000000000102daa1	cmoval	%eax, %edx
000000000102daa4	movl	%edx, 0x24(%rsp)
000000000102daa8	movl	%edx, (%rsp)
000000000102daab	callq	runtime.usleep
000000000102dab0	cmpl	$0x0, 0xa729d(%rip)
000000000102dab7	jg	0x102de91
000000000102dabd	cmpl	$0x0, 0x8b0b4(%rip)
000000000102dac4	je	0x102de7d
000000000102daca	leaq	0x8afdf(%rip), %rax
000000000102dad1	movq	%rax, (%rsp)
000000000102dad5	callq	runtime.lock
000000000102dada	movl	0x8b098(%rip), %eax
000000000102dae0	testl	%eax, %eax
000000000102dae2	je	0x102de5b
000000000102dae8	movl	$0x1, %eax
000000000102daed	leaq	0x8b094(%rip), %rcx
000000000102daf4	xchgl	%eax, (%rcx)
000000000102daf6	leaq	0x8afb3(%rip), %rax
000000000102dafd	movq	%rax, (%rsp)
000000000102db01	callq	runtime.unlock
000000000102db06	movq	runtime.forcegcperiod(%rip), %rax
000000000102db0d	movq	%rax, %rcx
000000000102db10	sarq	$0x3f, %rax
000000000102db14	shrq	$0x3f, %rax
000000000102db18	addq	%rcx, %rax
000000000102db1b	sarq	%rax
000000000102db1e	movq	0x30(%rsp), %rdx
000000000102db23	cmpq	%rcx, %rdx
000000000102db26	jge	0x102de53
000000000102db2c	movq	%rdx, %rax
000000000102db2f	sarq	$0x3f, %rdx
000000000102db33	shrq	$0x3f, %rdx
000000000102db37	leaq	(%rax,%rdx), %rcx
000000000102db3b	sarq	%rcx
000000000102db3e	leaq	0x8b04b(%rip), %rax
000000000102db45	movq	%rax, (%rsp)
000000000102db49	movq	%rcx, 0x8(%rsp)
000000000102db4e	callq	runtime.notetsleep
000000000102db53	leaq	0x8af56(%rip), %rax
000000000102db5a	movq	%rax, (%rsp)
000000000102db5e	callq	runtime.lock
000000000102db63	xorl	%eax, %eax
000000000102db65	leaq	0x8b01c(%rip), %rcx
000000000102db6c	xchgl	%eax, (%rcx)
000000000102db6e	leaq	0x8b01b(%rip), %rax
000000000102db75	testb	%al, (%rax)
000000000102db77	movq	$0x0, 0x8b00e(%rip)
000000000102db82	movl	$0x14, %eax
000000000102db87	xorl	%ecx, %ecx
000000000102db89	movq	%rcx, 0x50(%rsp)
000000000102db8e	movl	%eax, 0x24(%rsp)
000000000102db92	leaq	0x8af17(%rip), %rdx
000000000102db99	movq	%rdx, (%rsp)
000000000102db9d	callq	runtime.unlock
000000000102dba2	movl	0x24(%rsp), %eax
000000000102dba6	movq	0x50(%rsp), %rcx
000000000102dbab	movq	%rcx, 0x50(%rsp)
000000000102dbb0	movl	%eax, 0x24(%rsp)
000000000102dbb4	movq	runtime.cgo_yield(%rip), %rdx
000000000102dbbb	movq	(%rdx), %rdx
000000000102dbbe	testq	%rdx, %rdx
000000000102dbc1	jne	0x102de3c
000000000102dbc7	movq	0x8aeda(%rip), %rax
000000000102dbce	movq	%rax, 0x68(%rsp)
000000000102dbd3	callq	runtime.nanotime
000000000102dbd8	movq	(%rsp), %rax
000000000102dbdc	movq	%rax, 0x28(%rsp)
000000000102dbe1	movl	runtime.netpollInited(%rip), %ecx
000000000102dbe7	testl	%ecx, %ecx
000000000102dbe9	je	0x102dc05
000000000102dbeb	movq	0x68(%rsp), %rcx
000000000102dbf0	testq	%rcx, %rcx
000000000102dbf3	je	0x102dc05
000000000102dbf5	leaq	0x989680(%rcx), %rdx
000000000102dbfc	cmpq	%rax, %rdx
000000000102dbff	jl	0x102dddd
000000000102dc05	movq	%rax, (%rsp)
000000000102dc09	callq	runtime.retake
000000000102dc0e	movq	0x50(%rsp), %rax
000000000102dc13	incq	%rax
000000000102dc16	cmpl	$0x0, 0x8(%rsp)
000000000102dc1b	movl	$0x0, %ecx
000000000102dc20	cmovneq	%rcx, %rax
000000000102dc24	leaq	0xa8d25(%rip), %rdx
000000000102dc2b	cmpb	$0x0, (%rdx)
000000000102dc2e	je	0x102dc3d
000000000102dc30	cmpl	$0x0, 0xa6edd(%rip)
000000000102dc37	je	0x102dd8b
000000000102dc3d	xorl	%edx, %edx
000000000102dc3f	movq	%rax, 0x50(%rsp)
000000000102dc44	testb	%dl, %dl
000000000102dc46	je	0x102dc56
000000000102dc48	movl	0x8ac72(%rip), %edx
000000000102dc4e	testl	%edx, %edx
000000000102dc50	jne	0x102dd33
000000000102dc56	movq	0x30(%rsp), %rdx
000000000102dc5b	movq	%rdx, %rbx
000000000102dc5e	sarq	$0x3f, %rdx
000000000102dc62	shrq	$0x3f, %rdx
000000000102dc66	addq	%rbx, %rdx
000000000102dc69	sarq	%rdx
000000000102dc6c	movq	0x48(%rsp), %rsi
000000000102dc71	addq	%rsi, %rdx
000000000102dc74	movq	0x28(%rsp), %rdi
000000000102dc79	cmpq	%rdi, %rdx
000000000102dc7c	jl	0x102dcee
000000000102dc7e	movq	0x38(%rsp), %rdx
000000000102dc83	movl	0xa70ca(%rip), %r8d
000000000102dc8a	testl	%r8d, %r8d
000000000102dc8d	jle	0x102dce4
000000000102dc8f	movslq	%r8d, %r8
000000000102dc92	imulq	$0xf4240, %r8, %r8
000000000102dc99	movq	0x40(%rsp), %r9
000000000102dc9e	addq	%r9, %r8
000000000102dca1	cmpq	%rdi, %r8
000000000102dca4	jg	0x102da64
000000000102dcaa	movq	%rdx, 0x60(%rsp)
000000000102dcaf	movq	%rsi, 0x58(%rsp)
000000000102dcb4	cmpl	$0x0, 0xa7095(%rip)
000000000102dcbb	setg	(%rsp)
000000000102dcbf	callq	runtime.schedtrace
000000000102dcc4	movq	0x50(%rsp), %rax
000000000102dcc9	xorl	%ecx, %ecx
000000000102dccb	movq	0x60(%rsp), %rdx
000000000102dcd0	movq	0x30(%rsp), %rbx
000000000102dcd5	movq	0x58(%rsp), %rsi
000000000102dcda	movq	0x28(%rsp), %r9
000000000102dcdf	jmp	0x102da64
000000000102dce4	movq	0x40(%rsp), %r9
000000000102dce9	jmp	0x102da64
000000000102dcee	leaq	runtime.mheap_(%rip), %rax
000000000102dcf5	movq	%rax, (%rsp)
000000000102dcf9	movq	0x38(%rsp), %rcx
000000000102dcfe	movl	%ecx, 0x8(%rsp)
000000000102dd02	movq	%rdi, 0x10(%rsp)
000000000102dd07	movq	%rbx, 0x18(%rsp)
000000000102dd0c	callq	"runtime.(*mheap).scavenge"
000000000102dd11	movq	0x38(%rsp), %rax
000000000102dd16	leaq	0x1(%rax), %rdx
000000000102dd1a	movq	0x50(%rsp), %rax
000000000102dd1f	xorl	%ecx, %ecx
000000000102dd21	movq	0x30(%rsp), %rbx
000000000102dd26	movq	0x28(%rsp), %rdi
000000000102dd2b	movq	%rdi, %rsi
000000000102dd2e	jmp	0x102dc83
000000000102dd33	leaq	runtime.forcegc(%rip), %rax
000000000102dd3a	movq	%rax, (%rsp)
000000000102dd3e	callq	runtime.lock
000000000102dd43	movl	$0x0, 0x8ab73(%rip)
000000000102dd4d	movq	0x8ab64(%rip), %rax
000000000102dd54	movq	$0x0, 0xa0(%rax)
000000000102dd5f	movq	0x8ab52(%rip), %rax
000000000102dd66	movq	%rax, (%rsp)
000000000102dd6a	callq	runtime.injectglist
000000000102dd6f	leaq	runtime.forcegc(%rip), %rax
000000000102dd76	movq	%rax, (%rsp)
000000000102dd7a	callq	runtime.unlock
000000000102dd7f	movq	0x50(%rsp), %rax
000000000102dd84	xorl	%ecx, %ecx
000000000102dd86	jmp	0x102dc56
000000000102dd8b	cmpl	$0x0, 0xa6d66(%rip)
000000000102dd92	je	0x102dd9b
000000000102dd94	xorl	%edx, %edx
000000000102dd96	jmp	0x102dc3f
000000000102dd9b	cmpl	$0x0, 0xa6d52(%rip)
000000000102dda2	jge	0x102ddab
000000000102dda4	xorl	%edx, %edx
000000000102dda6	jmp	0x102dc3f
000000000102ddab	movq	0xa91ee(%rip), %rdx
000000000102ddb2	testq	%rdx, %rdx
000000000102ddb5	je	0x102ddd1
000000000102ddb7	movq	0x28(%rsp), %rbx
000000000102ddbc	movq	%rbx, %rsi
000000000102ddbf	subq	%rdx, %rbx
000000000102ddc2	cmpq	%rbx, runtime.forcegcperiod(%rip)
000000000102ddc9	setl	%dl
000000000102ddcc	jmp	0x102dc3f
000000000102ddd1	movq	0x28(%rsp), %rsi
000000000102ddd6	xorl	%edx, %edx
000000000102ddd8	jmp	0x102dc3f
000000000102dddd	movq	%rax, %rdx
000000000102dde0	movq	%rcx, %rax
000000000102dde3	leaq	0x8acbe(%rip), %rbx
000000000102ddea	lock
000000000102ddeb	cmpxchgq	%rdx, (%rbx)
000000000102ddef	sete	%cl
000000000102ddf2	movb	$0x0, (%rsp)
000000000102ddf6	callq	runtime.netpoll
000000000102ddfb	movq	0x8(%rsp), %rcx
000000000102de00	testq	%rcx, %rcx
000000000102de03	jne	0x102de0f
000000000102de05	movq	0x28(%rsp), %rax
000000000102de0a	jmp	0x102dc05
000000000102de0f	movq	%rcx, 0x70(%rsp)
000000000102de14	movl	$0xffffffff, (%rsp)
000000000102de1b	callq	runtime.incidlelocked
000000000102de20	movq	0x70(%rsp), %rax
000000000102de25	movq	%rax, (%rsp)
000000000102de29	callq	runtime.injectglist
000000000102de2e	movl	$0x1, (%rsp)
000000000102de35	callq	runtime.incidlelocked
000000000102de3a	jmp	0x102de05
000000000102de3c	movq	%rdx, (%rsp)
000000000102de40	movq	$0x0, 0x8(%rsp)
000000000102de49	callq	runtime.asmcgocall
000000000102de4e	jmp	0x102dbc7
000000000102de53	movq	%rax, %rcx
000000000102de56	jmp	0x102db3e
000000000102de5b	movl	0x8ac8f(%rip), %eax
000000000102de61	movl	runtime.gomaxprocs(%rip), %ecx
000000000102de67	cmpl	%ecx, %eax
000000000102de69	je	0x102dae8
000000000102de6f	movl	0x24(%rsp), %eax
000000000102de73	movq	0x50(%rsp), %rcx
000000000102de78	jmp	0x102db89
000000000102de7d	movl	0x8ac6d(%rip), %eax
000000000102de83	movl	runtime.gomaxprocs(%rip), %ecx
000000000102de89	cmpl	%ecx, %eax
000000000102de8b	je	0x102daca
000000000102de91	movl	0x24(%rsp), %eax
000000000102de95	movq	0x50(%rsp), %rcx
000000000102de9a	jmp	0x102dbab
000000000102de9f	movl	%edx, %edi
000000000102dea1	shll	%edx
000000000102dea3	cmpq	$0x32, %rcx
000000000102dea7	cmovgl	%edx, %edi
000000000102deaa	movl	%edi, %edx
000000000102deac	jmp	0x102da96
000000000102deb1	movabsq	$0x45d964b800, %rax
000000000102debb	jmp	0x102da4c
000000000102dec0	callq	runtime.morestack_noctxt
000000000102dec5	jmp	runtime.sysmon
000000000102deca	int3
000000000102decb	int3
000000000102decc	int3
000000000102decd	int3
000000000102dece	int3
000000000102decf	int3
runtime.retake:
000000000102ded0	movq	%gs:0x30, %rcx
000000000102ded9	cmpq	0x10(%rcx), %rsp
000000000102dedd	jbe	0x102e11a
000000000102dee3	subq	$0x38, %rsp
000000000102dee7	movq	%rbp, 0x30(%rsp)
000000000102deec	leaq	0x30(%rsp), %rbp
000000000102def1	leaq	runtime.allpLock(%rip), %rax
000000000102def8	movq	%rax, (%rsp)
000000000102defc	callq	runtime.lock
000000000102df01	movq	0x40(%rsp), %rax
000000000102df06	xorl	%ecx, %ecx
000000000102df08	xorl	%edx, %edx
000000000102df0a	jmp	0x102df0f
000000000102df0c	incq	%rcx
000000000102df0f	movq	%rdx, 0x18(%rsp)
000000000102df14	movq	0x8a93d(%rip), %rbx
000000000102df1b	movq	runtime.allp(%rip), %rsi
000000000102df22	cmpq	%rbx, %rcx
000000000102df25	jge	0x102e0f7
000000000102df2b	movq	(%rsi,%rcx,8), %rbx
000000000102df2f	testq	%rbx, %rbx
000000000102df32	je	0x102df0c
000000000102df34	movq	%rcx, 0x20(%rsp)
000000000102df39	leaq	0x20(%rbx), %rsi
000000000102df3d	movl	0xc(%rbx), %edi
000000000102df40	cmpl	$0x2, %edi
000000000102df43	jne	0x102e07d
000000000102df49	testb	%al, (%rsi)
000000000102df4b	movl	0x1c(%rbx), %esi
000000000102df4e	movl	0x30(%rbx), %r8d
000000000102df52	cmpq	%rsi, %r8
000000000102df55	je	0x102df60
000000000102df57	movl	%esi, 0x30(%rbx)
000000000102df5a	movq	%rax, 0x38(%rbx)
000000000102df5e	jmp	0x102df0c
000000000102df60	movq	%rbx, 0x28(%rsp)
000000000102df65	movl	%edi, 0x14(%rsp)
000000000102df69	movq	%rbx, (%rsp)
000000000102df6d	callq	runtime.runqempty
000000000102df72	leaq	0x8(%rsp), %rax
000000000102df77	cmpb	$0x0, (%rax)
000000000102df7a	je	0x102dfbe
000000000102df7c	movl	0x8ab72(%rip), %ecx
000000000102df82	movl	0x8ab68(%rip), %edx
000000000102df88	addl	%edx, %ecx
000000000102df8a	testl	%ecx, %ecx
000000000102df8c	jbe	0x102e06e
000000000102df92	movq	0x28(%rsp), %rcx
000000000102df97	movq	0x38(%rcx), %rdx
000000000102df9b	addq	$0x989680, %rdx
000000000102dfa2	movq	0x40(%rsp), %rbx
000000000102dfa7	cmpq	%rbx, %rdx
000000000102dfaa	jle	0x102dfbe
000000000102dfac	movq	%rbx, %rax
000000000102dfaf	movq	0x20(%rsp), %rcx
000000000102dfb4	movq	0x18(%rsp), %rdx
000000000102dfb9	jmp	0x102df0c
000000000102dfbe	leaq	runtime.allpLock(%rip), %rax
000000000102dfc5	movq	%rax, (%rsp)
000000000102dfc9	callq	runtime.unlock
000000000102dfce	movl	$0xffffffff, (%rsp)
000000000102dfd5	callq	runtime.incidlelocked
000000000102dfda	movl	0x14(%rsp), %eax
000000000102dfde	movq	0x28(%rsp), %rcx
000000000102dfe3	xorl	%edx, %edx
000000000102dfe5	lock
000000000102dfe6	cmpxchgl	%edx, 0xc(%rcx)
000000000102dfea	sete	%al
000000000102dfed	testb	%al, %al
000000000102dfef	je	0x102e067
000000000102dff1	leaq	0x969f8(%rip), %rax
000000000102dff8	cmpb	$0x0, (%rax)
000000000102dffb	jne	0x102e049
000000000102dffd	incl	0x1c(%rcx)
000000000102e000	movq	%rcx, (%rsp)
000000000102e004	callq	runtime.handoffp
000000000102e009	movq	0x18(%rsp), %rax
000000000102e00e	incq	%rax
000000000102e011	movq	%rax, 0x18(%rsp)
000000000102e016	movl	$0x1, (%rsp)
000000000102e01d	callq	runtime.incidlelocked
000000000102e022	leaq	runtime.allpLock(%rip), %rax
000000000102e029	movq	%rax, (%rsp)
000000000102e02d	callq	runtime.lock
000000000102e032	movq	0x18(%rsp), %rax
000000000102e037	movq	0x20(%rsp), %rcx
000000000102e03c	movq	%rax, %rdx
000000000102e03f	movq	0x40(%rsp), %rax
000000000102e044	jmp	0x102df0c
000000000102e049	movq	%rcx, (%rsp)
000000000102e04d	callq	runtime.traceGoSysBlock
000000000102e052	movq	0x28(%rsp), %rax
000000000102e057	movq	%rax, (%rsp)
000000000102e05b	callq	runtime.traceProcStop
000000000102e060	movq	0x28(%rsp), %rcx
000000000102e065	jmp	0x102dffd
000000000102e067	movq	0x18(%rsp), %rax
000000000102e06c	jmp	0x102e011
000000000102e06e	movq	0x28(%rsp), %rcx
000000000102e073	movq	0x40(%rsp), %rbx
000000000102e078	jmp	0x102dfbe
000000000102e07d	cmpl	$0x1, %edi
000000000102e080	jne	0x102e0ca
000000000102e082	testb	%al, (%rsi)
000000000102e084	movl	0x18(%rbx), %esi
000000000102e087	movl	0x20(%rbx), %edi
000000000102e08a	cmpq	%rsi, %rdi
000000000102e08d	je	0x102e09b
000000000102e08f	movl	%esi, 0x20(%rbx)
000000000102e092	movq	%rax, 0x28(%rbx)
000000000102e096	jmp	0x102df0c
000000000102e09b	movq	0x28(%rbx), %rsi
000000000102e09f	addq	$0x989680, %rsi
000000000102e0a6	cmpq	%rax, %rsi
000000000102e0a9	jg	0x102df0c
000000000102e0af	movq	0x40(%rbx), %rbx
000000000102e0b3	testq	%rbx, %rbx
000000000102e0b6	je	0x102e0ca
000000000102e0b8	movq	%gs:0x30, %rsi
000000000102e0c1	movq	0x30(%rsi), %rsi
000000000102e0c5	cmpq	%rbx, %rsi
000000000102e0c8	jne	0x102e0d2
000000000102e0ca	movq	%rdx, %rax
000000000102e0cd	jmp	0x102e037
000000000102e0d2	movq	0xc0(%rbx), %rsi
000000000102e0d9	testq	%rsi, %rsi
000000000102e0dc	je	0x102e0ca
000000000102e0de	movq	(%rbx), %rbx
000000000102e0e1	cmpq	%rbx, %rsi
000000000102e0e4	je	0x102e0ca
000000000102e0e6	movb	$0x1, 0xb1(%rsi)
000000000102e0ed	movq	$-0x522, 0x10(%rsi)
000000000102e0f5	jmp	0x102e0ca
000000000102e0f7	leaq	runtime.allpLock(%rip), %rax
000000000102e0fe	movq	%rax, (%rsp)
000000000102e102	callq	runtime.unlock
000000000102e107	movq	0x18(%rsp), %rax
000000000102e10c	movl	%eax, 0x48(%rsp)
000000000102e110	movq	0x30(%rsp), %rbp
000000000102e115	addq	$0x38, %rsp
000000000102e119	retq
000000000102e11a	callq	runtime.morestack_noctxt
000000000102e11f	jmp	runtime.retake
000000000102e124	int3
000000000102e125	int3
000000000102e126	int3
000000000102e127	int3
000000000102e128	int3
000000000102e129	int3
000000000102e12a	int3
000000000102e12b	int3
000000000102e12c	int3
000000000102e12d	int3
000000000102e12e	int3
000000000102e12f	int3
runtime.preemptall:
000000000102e130	movq	0x8a721(%rip), %rax
000000000102e137	movq	runtime.allp(%rip), %rcx
000000000102e13e	xorl	%edx, %edx
000000000102e140	xorl	%ebx, %ebx
000000000102e142	jmp	0x102e147
000000000102e144	incq	%rdx
000000000102e147	cmpq	%rax, %rdx
000000000102e14a	jge	0x102e1a5
000000000102e14c	movq	(%rcx,%rdx,8), %rsi
000000000102e150	cmpl	$0x1, 0xc(%rsi)
000000000102e154	jne	0x102e144
000000000102e156	movq	0x40(%rsi), %rsi
000000000102e15a	testq	%rsi, %rsi
000000000102e15d	je	0x102e171
000000000102e15f	movq	%gs:0x30, %rdi
000000000102e168	movq	0x30(%rdi), %rdi
000000000102e16c	cmpq	%rsi, %rdi
000000000102e16f	jne	0x102e177
000000000102e171	xorl	%esi, %esi
000000000102e173	orl	%esi, %ebx
000000000102e175	jmp	0x102e144
000000000102e177	movq	0xc0(%rsi), %rdi
000000000102e17e	testq	%rdi, %rdi
000000000102e181	je	0x102e18b
000000000102e183	movq	(%rsi), %rsi
000000000102e186	cmpq	%rsi, %rdi
000000000102e189	jne	0x102e18f
000000000102e18b	xorl	%esi, %esi
000000000102e18d	jmp	0x102e173
000000000102e18f	movb	$0x1, 0xb1(%rdi)
000000000102e196	movq	$-0x522, 0x10(%rdi)
000000000102e19e	movl	$0x1, %esi
000000000102e1a3	jmp	0x102e173
000000000102e1a5	movb	%bl, 0x8(%rsp)
000000000102e1a9	retq
000000000102e1aa	int3
000000000102e1ab	int3
000000000102e1ac	int3
000000000102e1ad	int3
000000000102e1ae	int3
000000000102e1af	int3
runtime.schedtrace:
000000000102e1b0	movq	%gs:0x30, %rcx
000000000102e1b9	leaq	-0x68(%rsp), %rax
000000000102e1be	cmpq	0x10(%rcx), %rax
000000000102e1c2	jbe	0x102ecb5
000000000102e1c8	subq	$0xe8, %rsp
000000000102e1cf	movq	%rbp, 0xe0(%rsp)
000000000102e1d7	leaq	0xe0(%rsp), %rbp
000000000102e1df	callq	runtime.nanotime
000000000102e1e4	movq	(%rsp), %rax
000000000102e1e8	movq	%rax, 0x30(%rsp)
000000000102e1ed	cmpq	$0x0, 0xa6a03(%rip)
000000000102e1f5	jne	0x102e1fe
000000000102e1f7	movq	%rax, runtime.starttime(%rip)
000000000102e1fe	leaq	0x8a8ab(%rip), %rax
000000000102e205	movq	%rax, (%rsp)
000000000102e209	callq	runtime.lock
000000000102e20e	movslq	0x8a8f3(%rip), %rax
000000000102e215	movq	%rax, 0xb8(%rsp)
000000000102e21d	movslq	0x8a89c(%rip), %rcx
000000000102e224	movq	%rcx, 0xb0(%rsp)
000000000102e22c	movl	0x8a8c2(%rip), %edx
000000000102e232	movq	%rdx, 0xa8(%rsp)
000000000102e23a	movl	0x8a8b0(%rip), %ebx
000000000102e240	movq	%rbx, 0xa0(%rsp)
000000000102e248	movq	runtime.starttime(%rip), %rsi
000000000102e24f	movq	%rsi, 0x98(%rsp)
000000000102e257	movq	0x8a86a(%rip), %rdi
000000000102e25e	subq	0x8a873(%rip), %rdi
000000000102e265	movq	%rdi, 0x90(%rsp)
000000000102e26d	callq	runtime.printlock
000000000102e272	leaq	0x3ca08(%rip), %rax
000000000102e279	movq	%rax, (%rsp)
000000000102e27d	movq	$0x6, 0x8(%rsp)
000000000102e286	callq	runtime.printstring
000000000102e28b	movq	0x30(%rsp), %rax
000000000102e290	movq	0x98(%rsp), %rcx
000000000102e298	subq	%rcx, %rax
000000000102e29b	movq	%rax, %rcx
000000000102e29e	movabsq	$0x431bde82d7b634db, %rax
000000000102e2a8	imulq	%rcx
000000000102e2ab	sarq	$0x3f, %rcx
000000000102e2af	sarq	$0x12, %rdx
000000000102e2b3	subq	%rcx, %rdx
000000000102e2b6	movq	%rdx, (%rsp)
000000000102e2ba	callq	runtime.printint
000000000102e2bf	leaq	0x3d3fb(%rip), %rax
000000000102e2c6	movq	%rax, (%rsp)
000000000102e2ca	movq	$0xf, 0x8(%rsp)
000000000102e2d3	callq	runtime.printstring
000000000102e2d8	movslq	runtime.gomaxprocs(%rip), %rax
000000000102e2df	movq	%rax, (%rsp)
000000000102e2e3	callq	runtime.printint
000000000102e2e8	leaq	0x3cdfe(%rip), %rax
000000000102e2ef	movq	%rax, (%rsp)
000000000102e2f3	movq	$0xb, 0x8(%rsp)
000000000102e2fc	callq	runtime.printstring
000000000102e301	movq	0xa0(%rsp), %rax
000000000102e309	movq	%rax, (%rsp)
000000000102e30d	callq	runtime.printuint
000000000102e312	leaq	0x3cbf5(%rip), %rax
000000000102e319	movq	%rax, (%rsp)
000000000102e31d	movq	$0x9, 0x8(%rsp)
000000000102e326	callq	runtime.printstring
000000000102e32b	movq	0x90(%rsp), %rax
000000000102e333	movslq	%eax, %rax
000000000102e336	movq	%rax, (%rsp)
000000000102e33a	callq	runtime.printint
000000000102e33f	leaq	0x3d595(%rip), %rax
000000000102e346	movq	%rax, (%rsp)
000000000102e34a	movq	$0x11, 0x8(%rsp)
000000000102e353	callq	runtime.printstring
000000000102e358	movq	0xa8(%rsp), %rax
000000000102e360	movq	%rax, (%rsp)
000000000102e364	callq	runtime.printuint
000000000102e369	leaq	0x3d052(%rip), %rax
000000000102e370	movq	%rax, (%rsp)
000000000102e374	movq	$0xd, 0x8(%rsp)
000000000102e37d	callq	runtime.printstring
000000000102e382	movq	0xb0(%rsp), %rax
000000000102e38a	movq	%rax, (%rsp)
000000000102e38e	callq	runtime.printint
000000000102e393	leaq	0x3cc36(%rip), %rax
000000000102e39a	movq	%rax, (%rsp)
000000000102e39e	movq	$0xa, 0x8(%rsp)
000000000102e3a7	callq	runtime.printstring
000000000102e3ac	movq	0xb8(%rsp), %rax
000000000102e3b4	movq	%rax, (%rsp)
000000000102e3b8	callq	runtime.printint
000000000102e3bd	callq	runtime.printunlock
000000000102e3c2	movzbl	0xf0(%rsp), %eax
000000000102e3ca	testb	%al, %al
000000000102e3cc	jne	0x102ebb0
000000000102e3d2	movq	runtime.allp(%rip), %rcx
000000000102e3d9	movq	%rcx, 0xd8(%rsp)
000000000102e3e1	movq	0x8a470(%rip), %rdx
000000000102e3e8	movq	%rdx, 0x88(%rsp)
000000000102e3f0	xorl	%ebx, %ebx
000000000102e3f2	jmp	0x102e415
000000000102e3f4	movq	0x60(%rsp), %rsi
000000000102e3f9	leaq	0x1(%rsi), %rbx
000000000102e3fd	movzbl	0xf0(%rsp), %eax
000000000102e405	movq	0xd8(%rsp), %rcx
000000000102e40d	movq	0x88(%rsp), %rdx
000000000102e415	cmpq	%rdx, %rbx
000000000102e418	jge	0x102e675
000000000102e41e	movq	%rbx, 0x60(%rsp)
000000000102e423	movq	(%rcx,%rbx,8), %rsi
000000000102e427	movq	0x40(%rsi), %rdi
000000000102e42b	movl	0x5e0(%rsi), %r8d
000000000102e432	movl	%r8d, 0x24(%rsp)
000000000102e437	movl	0x5e4(%rsi), %r9d
000000000102e43e	movl	%r9d, 0x1c(%rsp)
000000000102e443	testb	%al, %al
000000000102e445	je	0x102e5d2
000000000102e44b	testq	%rdi, %rdi
000000000102e44e	je	0x102e5c6
000000000102e454	movq	0xe0(%rdi), %rdi
000000000102e45b	movq	%rdi, 0x58(%rsp)
000000000102e460	movslq	0xdf8(%rsi), %rax
000000000102e467	movq	%rax, 0xb8(%rsp)
000000000102e46f	movl	0x1c(%rsi), %ecx
000000000102e472	movq	%rcx, 0xa8(%rsp)
000000000102e47a	movl	0x18(%rsi), %edx
000000000102e47d	movq	%rdx, 0xa0(%rsp)
000000000102e485	movl	0xc(%rsi), %ebx
000000000102e488	movq	%rbx, 0x80(%rsp)
000000000102e490	callq	runtime.printlock
000000000102e495	leaq	0x3c618(%rip), %rax
000000000102e49c	movq	%rax, (%rsp)
000000000102e4a0	movq	$0x3, 0x8(%rsp)
000000000102e4a9	callq	runtime.printstring
000000000102e4ae	movq	0x60(%rsp), %rax
000000000102e4b3	movq	%rax, (%rsp)
000000000102e4b7	callq	runtime.printint
000000000102e4bc	leaq	0x3ca81(%rip), %rax
000000000102e4c3	movq	%rax, (%rsp)
000000000102e4c7	movq	$0x9, 0x8(%rsp)
000000000102e4d0	callq	runtime.printstring
000000000102e4d5	movq	0x80(%rsp), %rax
000000000102e4dd	movq	%rax, (%rsp)
000000000102e4e1	callq	runtime.printuint
000000000102e4e6	leaq	0x3cc58(%rip), %rax
000000000102e4ed	movq	%rax, (%rsp)
000000000102e4f1	movq	$0xb, 0x8(%rsp)
000000000102e4fa	callq	runtime.printstring
000000000102e4ff	movq	0xa0(%rsp), %rax
000000000102e507	movq	%rax, (%rsp)
000000000102e50b	callq	runtime.printuint
000000000102e510	leaq	0x3cedf(%rip), %rax
000000000102e517	movq	%rax, (%rsp)
000000000102e51b	movq	$0xd, 0x8(%rsp)
000000000102e524	callq	runtime.printstring
000000000102e529	movq	0xa8(%rsp), %rax
000000000102e531	movq	%rax, (%rsp)
000000000102e535	callq	runtime.printuint
000000000102e53a	leaq	0x3c582(%rip), %rax
000000000102e541	movq	%rax, (%rsp)
000000000102e545	movq	$0x3, 0x8(%rsp)
000000000102e54e	callq	runtime.printstring
000000000102e553	movq	0x58(%rsp), %rax
000000000102e558	movq	%rax, (%rsp)
000000000102e55c	callq	runtime.printint
000000000102e561	leaq	0x3ca5e(%rip), %rax
000000000102e568	movq	%rax, (%rsp)
000000000102e56c	movq	$0xa, 0x8(%rsp)
000000000102e575	callq	runtime.printstring
000000000102e57a	movl	0x1c(%rsp), %eax
000000000102e57e	movl	0x24(%rsp), %ecx
000000000102e582	subl	%ecx, %eax
000000000102e584	movq	%rax, (%rsp)
000000000102e588	callq	runtime.printuint
000000000102e58d	leaq	0x3ca1e(%rip), %rax
000000000102e594	movq	%rax, (%rsp)
000000000102e598	movq	$0xa, 0x8(%rsp)
000000000102e5a1	callq	runtime.printstring
000000000102e5a6	movq	0xb8(%rsp), %rax
000000000102e5ae	movq	%rax, (%rsp)
000000000102e5b2	callq	runtime.printint
000000000102e5b7	callq	runtime.printnl
000000000102e5bc	callq	runtime.printunlock
000000000102e5c1	jmp	0x102e3f4
000000000102e5c6	movq	$-0x1, %rdi
000000000102e5cd	jmp	0x102e45b
000000000102e5d2	callq	runtime.printlock
000000000102e5d7	callq	runtime.printsp
000000000102e5dc	callq	runtime.printunlock
000000000102e5e1	movq	0x60(%rsp), %rax
000000000102e5e6	testq	%rax, %rax
000000000102e5e9	je	0x102e64d
000000000102e5eb	callq	runtime.printlock
000000000102e5f0	movl	0x1c(%rsp), %eax
000000000102e5f4	movl	0x24(%rsp), %ecx
000000000102e5f8	subl	%ecx, %eax
000000000102e5fa	movq	%rax, (%rsp)
000000000102e5fe	callq	runtime.printuint
000000000102e603	callq	runtime.printunlock
000000000102e608	movq	0x8a249(%rip), %rax
000000000102e60f	decq	%rax
000000000102e612	movq	0x60(%rsp), %rcx
000000000102e617	cmpq	%rcx, %rax
000000000102e61a	jne	0x102e3f4
000000000102e620	callq	runtime.printlock
000000000102e625	leaq	0x3c47a(%rip), %rax
000000000102e62c	movq	%rax, (%rsp)
000000000102e630	movq	$0x2, 0x8(%rsp)
000000000102e639	callq	runtime.printstring
000000000102e63e	callq	runtime.printunlock
000000000102e643	movq	0x60(%rsp), %rcx
000000000102e648	jmp	0x102e3f4
000000000102e64d	callq	runtime.printlock
000000000102e652	leaq	0x3c433(%rip), %rax
000000000102e659	movq	%rax, (%rsp)
000000000102e65d	movq	$0x1, 0x8(%rsp)
000000000102e666	callq	runtime.printstring
000000000102e66b	callq	runtime.printunlock
000000000102e670	jmp	0x102e5eb
000000000102e675	testb	%al, %al
000000000102e677	je	0x102eb90
000000000102e67d	movq	runtime.allm(%rip), %rax
000000000102e684	jmp	0x102e930
000000000102e689	movq	%rax, 0xc8(%rsp)
000000000102e691	movq	%rbx, 0x38(%rsp)
000000000102e696	movslq	0x10c(%rax), %rcx
000000000102e69d	movq	%rcx, 0xb8(%rsp)
000000000102e6a5	movslq	0x104(%rax), %rdx
000000000102e6ac	movq	%rdx, 0xb0(%rsp)
000000000102e6b4	movslq	0x100(%rax), %rsi
000000000102e6bb	movq	%rsi, 0x98(%rsp)
000000000102e6c3	movslq	0xec(%rax), %rdi
000000000102e6ca	movq	%rdi, 0x90(%rsp)
000000000102e6d2	movslq	0xe8(%rax), %r8
000000000102e6d9	movq	%r8, 0x78(%rsp)
000000000102e6de	movq	0xe0(%rax), %r9
000000000102e6e5	movq	%r9, 0x70(%rsp)
000000000102e6ea	movq	0xf8(%rax), %r10
000000000102e6f1	movq	%r10, 0x88(%rsp)
000000000102e6f9	movq	0xf0(%rax), %r11
000000000102e700	movq	%r11, 0xd0(%rsp)
000000000102e708	movzbl	0x110(%rax), %r12d
000000000102e710	movb	%r12b, 0x17(%rsp)
000000000102e715	movzbl	0x111(%rax), %r13d
000000000102e71d	movb	%r13b, 0x16(%rsp)
000000000102e722	callq	runtime.printlock
000000000102e727	leaq	0x3c383(%rip), %rax
000000000102e72e	movq	%rax, (%rsp)
000000000102e732	movq	$0x3, 0x8(%rsp)
000000000102e73b	callq	runtime.printstring
000000000102e740	movq	0x70(%rsp), %rax
000000000102e745	movq	%rax, (%rsp)
000000000102e749	callq	runtime.printint
000000000102e74e	leaq	0x3c3d6(%rip), %rax
000000000102e755	movq	%rax, (%rsp)
000000000102e759	movq	$0x4, 0x8(%rsp)
000000000102e762	callq	runtime.printstring
000000000102e767	movl	0x20(%rsp), %eax
000000000102e76b	movslq	%eax, %rax
000000000102e76e	movq	%rax, (%rsp)
000000000102e772	callq	runtime.printint
000000000102e777	leaq	0x3c4c7(%rip), %rax
000000000102e77e	movq	%rax, (%rsp)
000000000102e782	movq	$0x6, 0x8(%rsp)
000000000102e78b	callq	runtime.printstring
000000000102e790	movq	0x40(%rsp), %rax
000000000102e795	movq	%rax, (%rsp)
000000000102e799	callq	runtime.printint
000000000102e79e	leaq	0x3c969(%rip), %rax
000000000102e7a5	movq	%rax, (%rsp)
000000000102e7a9	movq	$0xb, 0x8(%rsp)
000000000102e7b2	callq	runtime.printstring
000000000102e7b7	movq	0x78(%rsp), %rax
000000000102e7bc	movq	%rax, (%rsp)
000000000102e7c0	callq	runtime.printint
000000000102e7c5	leaq	0x3c84a(%rip), %rax
000000000102e7cc	movq	%rax, (%rsp)
000000000102e7d0	movq	$0xa, 0x8(%rsp)
000000000102e7d9	callq	runtime.printstring
000000000102e7de	movq	0x90(%rsp), %rax
000000000102e7e6	movq	%rax, (%rsp)
000000000102e7ea	callq	runtime.printint
000000000102e7ef	leaq	0x3ca5e(%rip), %rax
000000000102e7f6	movq	%rax, (%rsp)
000000000102e7fa	movq	$0xc, 0x8(%rsp)
000000000102e803	callq	runtime.printstring
000000000102e808	movq	0xd0(%rsp), %rax
000000000102e810	movq	%rax, (%rsp)
000000000102e814	movq	0x88(%rsp), %rax
000000000102e81c	movq	%rax, 0x8(%rsp)
000000000102e821	callq	runtime.printstring
000000000102e826	leaq	0x3c494(%rip), %rax
000000000102e82d	movq	%rax, (%rsp)
000000000102e831	movq	$0x7, 0x8(%rsp)
000000000102e83a	callq	runtime.printstring
000000000102e83f	movq	0x98(%rsp), %rax
000000000102e847	movq	%rax, (%rsp)
000000000102e84b	callq	runtime.printint
000000000102e850	leaq	0x3c463(%rip), %rax
000000000102e857	movq	%rax, (%rsp)
000000000102e85b	movq	$0x7, 0x8(%rsp)
000000000102e864	callq	runtime.printstring
000000000102e869	movq	0xb0(%rsp), %rax
000000000102e871	movq	%rax, (%rsp)
000000000102e875	callq	runtime.printint
000000000102e87a	leaq	0x3c568(%rip), %rax
000000000102e881	movq	%rax, (%rsp)
000000000102e885	movq	$0x8, 0x8(%rsp)
000000000102e88e	callq	runtime.printstring
000000000102e893	movq	0xb8(%rsp), %rax
000000000102e89b	movq	%rax, (%rsp)
000000000102e89f	callq	runtime.printint
000000000102e8a4	leaq	0x3c739(%rip), %rax
000000000102e8ab	movq	%rax, (%rsp)
000000000102e8af	movq	$0xa, 0x8(%rsp)
000000000102e8b8	callq	runtime.printstring
000000000102e8bd	movzbl	0x17(%rsp), %eax
000000000102e8c2	movb	%al, (%rsp)
000000000102e8c5	callq	runtime.printbool
000000000102e8ca	leaq	0x3c5da(%rip), %rax
000000000102e8d1	movq	%rax, (%rsp)
000000000102e8d5	movq	$0x9, 0x8(%rsp)
000000000102e8de	callq	runtime.printstring
000000000102e8e3	movzbl	0x16(%rsp), %eax
000000000102e8e8	movb	%al, (%rsp)
000000000102e8eb	callq	runtime.printbool
000000000102e8f0	leaq	0x3c5cf(%rip), %rax
000000000102e8f7	movq	%rax, (%rsp)
000000000102e8fb	movq	$0x9, 0x8(%rsp)
000000000102e904	callq	runtime.printstring
000000000102e909	movq	0x38(%rsp), %rax
000000000102e90e	movq	%rax, (%rsp)
000000000102e912	callq	runtime.printint
000000000102e917	callq	runtime.printnl
000000000102e91c	callq	runtime.printunlock
000000000102e921	movq	0xc8(%rsp), %rax
000000000102e929	movq	0x148(%rax), %rax
000000000102e930	testq	%rax, %rax
000000000102e933	je	0x102e994
000000000102e935	movq	0xd0(%rax), %rcx
000000000102e93c	movq	0xc0(%rax), %rdx
000000000102e943	movq	0x160(%rax), %rbx
000000000102e94a	testq	%rcx, %rcx
000000000102e94d	je	0x102e98d
000000000102e94f	movl	0x8(%rcx), %ecx
000000000102e952	testq	%rdx, %rdx
000000000102e955	je	0x102e984
000000000102e957	movq	0x98(%rdx), %rdx
000000000102e95e	movq	%rdx, 0x40(%rsp)
000000000102e963	movl	%ecx, 0x20(%rsp)
000000000102e967	testq	%rbx, %rbx
000000000102e96a	je	0x102e978
000000000102e96c	movq	0x98(%rbx), %rbx
000000000102e973	jmp	0x102e689
000000000102e978	movq	$-0x1, %rbx
000000000102e97f	jmp	0x102e689
000000000102e984	movq	$-0x1, %rdx
000000000102e98b	jmp	0x102e95e
000000000102e98d	movl	$0xffffffff, %ecx
000000000102e992	jmp	0x102e952
000000000102e994	leaq	runtime.allglock(%rip), %rax
000000000102e99b	movq	%rax, (%rsp)
000000000102e99f	callq	runtime.lock
000000000102e9a4	xorl	%eax, %eax
000000000102e9a6	jmp	0x102eab2
000000000102e9ab	movq	%rdi, 0x28(%rsp)
000000000102e9b0	movq	%r8, 0xc0(%rsp)
000000000102e9b8	movq	0x98(%rcx), %rax
000000000102e9bf	movq	%rax, 0xb8(%rsp)
000000000102e9c7	callq	runtime.printlock
000000000102e9cc	leaq	0x3c0db(%rip), %rax
000000000102e9d3	movq	%rax, (%rsp)
000000000102e9d7	movq	$0x3, 0x8(%rsp)
000000000102e9e0	callq	runtime.printstring
000000000102e9e5	movq	0xb8(%rsp), %rax
000000000102e9ed	movq	%rax, (%rsp)
000000000102e9f1	callq	runtime.printint
000000000102e9f6	leaq	0x3c547(%rip), %rax
000000000102e9fd	movq	%rax, (%rsp)
000000000102ea01	movq	$0x9, 0x8(%rsp)
000000000102ea0a	callq	runtime.printstring
000000000102ea0f	movl	0x18(%rsp), %eax
000000000102ea13	movl	%eax, %eax
000000000102ea15	movq	%rax, (%rsp)
000000000102ea19	callq	runtime.printuint
000000000102ea1e	leaq	0x3c05c(%rip), %rax
000000000102ea25	movq	%rax, (%rsp)
000000000102ea29	movq	$0x1, 0x8(%rsp)
000000000102ea32	callq	runtime.printstring
000000000102ea37	movq	0xc0(%rsp), %rax
000000000102ea3f	movq	%rax, (%rsp)
000000000102ea43	movq	0x28(%rsp), %rax
000000000102ea48	movq	%rax, 0x8(%rsp)
000000000102ea4d	callq	runtime.printstring
000000000102ea52	leaq	0x3c0c2(%rip), %rax
000000000102ea59	movq	%rax, (%rsp)
000000000102ea5d	movq	$0x4, 0x8(%rsp)
000000000102ea66	callq	runtime.printstring
000000000102ea6b	movq	0x50(%rsp), %rax
000000000102ea70	movq	%rax, (%rsp)
000000000102ea74	callq	runtime.printint
000000000102ea79	leaq	0x3c44f(%rip), %rax
000000000102ea80	movq	%rax, (%rsp)
000000000102ea84	movq	$0x9, 0x8(%rsp)
000000000102ea8d	callq	runtime.printstring
000000000102ea92	movq	0x48(%rsp), %rax
000000000102ea97	movq	%rax, (%rsp)
000000000102ea9b	callq	runtime.printint
000000000102eaa0	callq	runtime.printnl
000000000102eaa5	callq	runtime.printunlock
000000000102eaaa	movq	0x68(%rsp), %rax
000000000102eaaf	incq	%rax
000000000102eab2	movq	runtime.allgs(%rip), %rcx
000000000102eab9	movq	0x89d78(%rip), %rdx
000000000102eac0	cmpq	%rdx, %rax
000000000102eac3	jge	0x102eb60
000000000102eac9	movq	(%rcx,%rax,8), %rcx
000000000102eacd	movq	0x30(%rcx), %rdx
000000000102ead1	movq	0xd8(%rcx), %rbx
000000000102ead8	testq	%rdx, %rdx
000000000102eadb	je	0x102eb57
000000000102eadd	movq	0xe0(%rdx), %rdx
000000000102eae4	testq	%rbx, %rbx
000000000102eae7	je	0x102eb4e
000000000102eae9	movq	0xe0(%rbx), %rbx
000000000102eaf0	movq	%rax, 0x68(%rsp)
000000000102eaf5	movq	%rbx, 0x48(%rsp)
000000000102eafa	movq	%rdx, 0x50(%rsp)
000000000102eaff	movl	0x90(%rcx), %esi
000000000102eb05	movl	%esi, 0x18(%rsp)
000000000102eb09	movzbl	0xb0(%rcx), %edi
000000000102eb10	cmpb	$0x18, %dil
000000000102eb14	jb	0x102eb27
000000000102eb16	movl	$0x13, %edi
000000000102eb1b	leaq	0x3d1df(%rip), %r8
000000000102eb22	jmp	0x102e9ab
000000000102eb27	movzbl	%dil, %edi
000000000102eb2b	cmpq	$0x18, %rdi
000000000102eb2f	jae	0x102ecae
000000000102eb35	shlq	$0x4, %rdi
000000000102eb39	leaq	runtime.waitReasonStrings(%rip), %r9
000000000102eb40	movq	(%r9,%rdi), %r8
000000000102eb44	movq	0x8(%r9,%rdi), %rdi
000000000102eb49	jmp	0x102e9ab
000000000102eb4e	movq	$-0x1, %rbx
000000000102eb55	jmp	0x102eaf0
000000000102eb57	movq	$-0x1, %rdx
000000000102eb5e	jmp	0x102eae4
000000000102eb60	leaq	runtime.allglock(%rip), %rax
000000000102eb67	movq	%rax, (%rsp)
000000000102eb6b	callq	runtime.unlock
000000000102eb70	leaq	0x89f39(%rip), %rax
000000000102eb77	movq	%rax, (%rsp)
000000000102eb7b	callq	runtime.unlock
000000000102eb80	movq	0xe0(%rsp), %rbp
000000000102eb88	addq	$0xe8, %rsp
000000000102eb8f	retq
000000000102eb90	leaq	0x89f19(%rip), %rax
000000000102eb97	movq	%rax, (%rsp)
000000000102eb9b	callq	runtime.unlock
000000000102eba0	movq	0xe0(%rsp), %rbp
000000000102eba8	addq	$0xe8, %rsp
000000000102ebaf	retq
000000000102ebb0	movl	0x89fd2(%rip), %eax
000000000102ebb6	movq	%rax, 0xa8(%rsp)
000000000102ebbe	movslq	0x89fb7(%rip), %rcx
000000000102ebc5	movq	%rcx, 0xb8(%rsp)
000000000102ebcd	movslq	0x89ef0(%rip), %rdx
000000000102ebd4	movq	%rdx, 0xb0(%rsp)
000000000102ebdc	movl	0x89f96(%rip), %ebx
000000000102ebe2	movq	%rbx, 0xa0(%rsp)
000000000102ebea	callq	runtime.printlock
000000000102ebef	leaq	0x3c4d6(%rip), %rax
000000000102ebf6	movq	%rax, (%rsp)
000000000102ebfa	movq	$0xb, 0x8(%rsp)
000000000102ec03	callq	runtime.printstring
000000000102ec08	movq	0xa0(%rsp), %rax
000000000102ec10	movq	%rax, (%rsp)
000000000102ec14	callq	runtime.printuint
000000000102ec19	leaq	0x3c8e8(%rip), %rax
000000000102ec20	movq	%rax, (%rsp)
000000000102ec24	movq	$0xe, 0x8(%rsp)
000000000102ec2d	callq	runtime.printstring
000000000102ec32	movq	0xb0(%rsp), %rax
000000000102ec3a	movq	%rax, (%rsp)
000000000102ec3e	callq	runtime.printint
000000000102ec43	leaq	0x3c3a4(%rip), %rax
000000000102ec4a	movq	%rax, (%rsp)
000000000102ec4e	movq	$0xa, 0x8(%rsp)
000000000102ec57	callq	runtime.printstring
000000000102ec5c	movq	0xb8(%rsp), %rax
000000000102ec64	movq	%rax, (%rsp)
000000000102ec68	callq	runtime.printint
000000000102ec6d	leaq	0x3c61c(%rip), %rax
000000000102ec74	movq	%rax, (%rsp)
000000000102ec78	movq	$0xc, 0x8(%rsp)
000000000102ec81	callq	runtime.printstring
000000000102ec86	movq	0xa8(%rsp), %rax
000000000102ec8e	movq	%rax, (%rsp)
000000000102ec92	callq	runtime.printuint
000000000102ec97	callq	runtime.printnl
000000000102ec9c	callq	runtime.printunlock
000000000102eca1	movzbl	0xf0(%rsp), %eax
000000000102eca9	jmp	0x102e3d2
000000000102ecae	callq	runtime.panicindex
000000000102ecb3	ud2
000000000102ecb5	callq	runtime.morestack_noctxt
000000000102ecba	jmp	runtime.schedtrace
000000000102ecbf	int3
runtime.mput:
000000000102ecc0	movq	%gs:0x30, %rcx
000000000102ecc9	cmpq	0x10(%rcx), %rsp
000000000102eccd	jbe	0x102ed12
000000000102eccf	subq	$0x8, %rsp
000000000102ecd3	movq	%rbp, (%rsp)
000000000102ecd7	leaq	(%rsp), %rbp
000000000102ecdb	movq	0x89dd6(%rip), %rax
000000000102ece2	movq	0x10(%rsp), %rcx
000000000102ece7	movq	%rax, 0x150(%rcx)
000000000102ecee	leaq	0x89dc3(%rip), %rax
000000000102ecf5	testb	%al, (%rax)
000000000102ecf7	movq	%rcx, 0x89dba(%rip)
000000000102ecfe	incl	0x89dbc(%rip)
000000000102ed04	callq	runtime.checkdead
000000000102ed09	movq	(%rsp), %rbp
000000000102ed0d	addq	$0x8, %rsp
000000000102ed11	retq
000000000102ed12	callq	runtime.morestack_noctxt
000000000102ed17	jmp	runtime.mput
000000000102ed19	int3
000000000102ed1a	int3
000000000102ed1b	int3
000000000102ed1c	int3
000000000102ed1d	int3
000000000102ed1e	int3
000000000102ed1f	int3
runtime.globrunqget:
000000000102ed20	movq	%gs:0x30, %rcx
000000000102ed29	cmpq	0x10(%rcx), %rsp
000000000102ed2d	jbe	0x102ee40
000000000102ed33	subq	$0x30, %rsp
000000000102ed37	movq	%rbp, 0x28(%rsp)
000000000102ed3c	leaq	0x28(%rsp), %rbp
000000000102ed41	movl	0x89dc1(%rip), %eax
000000000102ed47	testl	%eax, %eax
000000000102ed49	je	0x102ee26
000000000102ed4f	movl	runtime.gomaxprocs(%rip), %ecx
000000000102ed55	testl	%ecx, %ecx
000000000102ed57	je	0x102ee39
000000000102ed5d	movl	%eax, %edx
000000000102ed5f	movl	%edx, %ebx
000000000102ed61	cmpl	$-0x1, %ecx
000000000102ed64	je	0x102ed6b
000000000102ed66	cltd
000000000102ed67	idivl	%ecx
000000000102ed69	jmp	0x102ed6f
000000000102ed6b	negl	%eax
000000000102ed6d	xorl	%edx, %edx
000000000102ed6f	leal	0x1(%rax), %ecx
000000000102ed72	cmpl	%ebx, %ecx
000000000102ed74	cmovgl	%ebx, %ecx
000000000102ed77	movl	0x40(%rsp), %edx
000000000102ed7b	testl	%edx, %edx
000000000102ed7d	jle	0x102ee1f
000000000102ed83	cmpl	%edx, %ecx
000000000102ed85	jle	0x102ee1f
000000000102ed8b	cmpl	$0x80, %edx
000000000102ed91	movl	$0x80, %eax
000000000102ed96	cmovgl	%eax, %edx
000000000102ed99	subl	%edx, %ebx
000000000102ed9b	movl	%ebx, 0x89d67(%rip)
000000000102eda1	testl	%ebx, %ebx
000000000102eda3	jne	0x102edb0
000000000102eda5	movq	$0x0, 0x89d50(%rip)
000000000102edb0	movq	0x89d41(%rip), %rax
000000000102edb7	movq	%rax, 0x20(%rsp)
000000000102edbc	movq	0xa0(%rax), %rcx
000000000102edc3	movq	%rcx, 0x89d2e(%rip)
000000000102edca	leal	-0x1(%rdx), %ecx
000000000102edcd	jmp	0x102ee0c
000000000102edcf	movl	%ecx, 0x1c(%rsp)
000000000102edd3	movq	0x89d1e(%rip), %rax
000000000102edda	movq	0xa0(%rax), %rcx
000000000102ede1	movq	%rcx, 0x89d10(%rip)
000000000102ede8	movq	0x38(%rsp), %rcx
000000000102eded	movq	%rcx, (%rsp)
000000000102edf1	movq	%rax, 0x8(%rsp)
000000000102edf6	movb	$0x0, 0x10(%rsp)
000000000102edfb	callq	runtime.runqput
000000000102ee00	movl	0x1c(%rsp), %eax
000000000102ee04	leal	-0x1(%rax), %ecx
000000000102ee07	movq	0x20(%rsp), %rax
000000000102ee0c	testl	%ecx, %ecx
000000000102ee0e	jg	0x102edcf
000000000102ee10	movq	%rax, 0x48(%rsp)
000000000102ee15	movq	0x28(%rsp), %rbp
000000000102ee1a	addq	$0x30, %rsp
000000000102ee1e	retq
000000000102ee1f	movl	%ecx, %edx
000000000102ee21	jmp	0x102ed8b
000000000102ee26	movq	$0x0, 0x48(%rsp)
000000000102ee2f	movq	0x28(%rsp), %rbp
000000000102ee34	addq	$0x30, %rsp
000000000102ee38	retq
000000000102ee39	callq	runtime.panicdivide
000000000102ee3e	ud2
000000000102ee40	callq	runtime.morestack_noctxt
000000000102ee45	jmp	runtime.globrunqget
000000000102ee4a	int3
000000000102ee4b	int3
000000000102ee4c	int3
000000000102ee4d	int3
000000000102ee4e	int3
000000000102ee4f	int3
runtime.pidleput:
000000000102ee50	movq	%gs:0x30, %rcx
000000000102ee59	cmpq	0x10(%rcx), %rsp
000000000102ee5d	jbe	0x102eeda
000000000102ee5f	subq	$0x18, %rsp
000000000102ee63	movq	%rbp, 0x10(%rsp)
000000000102ee68	leaq	0x10(%rsp), %rbp
000000000102ee6d	movq	0x20(%rsp), %rax
000000000102ee72	movq	%rax, (%rsp)
000000000102ee76	callq	runtime.runqempty
000000000102ee7b	leaq	0x8(%rsp), %rax
000000000102ee80	cmpb	$0x0, (%rax)
000000000102ee83	je	0x102eebf
000000000102ee85	movq	0x89c5c(%rip), %rax
000000000102ee8c	movq	0x20(%rsp), %rcx
000000000102ee91	movq	%rax, 0x10(%rcx)
000000000102ee95	leaq	0x89c4c(%rip), %rax
000000000102ee9c	testb	%al, (%rax)
000000000102ee9e	movq	%rcx, 0x89c43(%rip)
000000000102eea5	movl	$0x1, %eax
000000000102eeaa	leaq	0x89c3f(%rip), %rcx
000000000102eeb1	lock
000000000102eeb2	xaddl	%eax, (%rcx)
000000000102eeb5	movq	0x10(%rsp), %rbp
000000000102eeba	addq	$0x18, %rsp
000000000102eebe	retq
000000000102eebf	leaq	0x3ecbc(%rip), %rax
000000000102eec6	movq	%rax, (%rsp)
000000000102eeca	movq	$0x23, 0x8(%rsp)
000000000102eed3	callq	runtime.throw
000000000102eed8	ud2
000000000102eeda	callq	runtime.morestack_noctxt
000000000102eedf	jmp	runtime.pidleput
000000000102eee4	int3
000000000102eee5	int3
000000000102eee6	int3
000000000102eee7	int3
000000000102eee8	int3
000000000102eee9	int3
000000000102eeea	int3
000000000102eeeb	int3
000000000102eeec	int3
000000000102eeed	int3
000000000102eeee	int3
000000000102eeef	int3
runtime.runqempty:
000000000102eef0	movq	0x8(%rsp), %rax
000000000102eef5	movl	0x5e0(%rax), %ecx
000000000102eefb	movl	0x5e4(%rax), %edx
000000000102ef01	movq	0xde8(%rax), %rbx
000000000102ef08	movl	0x5e4(%rax), %esi
000000000102ef0e	cmpl	%edx, %esi
000000000102ef10	jne	0x102eef5
000000000102ef12	cmpl	%ecx, %edx
000000000102ef14	jne	0x102ef21
000000000102ef16	testq	%rbx, %rbx
000000000102ef19	sete	%al
000000000102ef1c	movb	%al, 0x10(%rsp)
000000000102ef20	retq
000000000102ef21	xorl	%eax, %eax
000000000102ef23	jmp	0x102ef1c
000000000102ef25	int3
000000000102ef26	int3
000000000102ef27	int3
000000000102ef28	int3
000000000102ef29	int3
000000000102ef2a	int3
000000000102ef2b	int3
000000000102ef2c	int3
000000000102ef2d	int3
000000000102ef2e	int3
000000000102ef2f	int3
runtime.runqput:
000000000102ef30	movq	%gs:0x30, %rcx
000000000102ef39	cmpq	0x10(%rcx), %rsp
000000000102ef3d	jbe	0x102f021
000000000102ef43	subq	$0x38, %rsp
000000000102ef47	movq	%rbp, 0x30(%rsp)
000000000102ef4c	leaq	0x30(%rsp), %rbp
000000000102ef51	movzbl	0x50(%rsp), %ecx
000000000102ef56	testb	%cl, %cl
000000000102ef58	je	0x102f012
000000000102ef5e	movq	0x40(%rsp), %rcx
000000000102ef63	movq	0x48(%rsp), %rdx
000000000102ef68	jmp	0x102ef6d
000000000102ef6a	movq	%rbx, %rdx
000000000102ef6d	movq	0xde8(%rcx), %rax
000000000102ef74	movq	%rax, 0x20(%rsp)
000000000102ef79	movq	%rdx, %rbx
000000000102ef7c	lock
000000000102ef7d	cmpxchgq	%rdx, 0xde8(%rcx)
000000000102ef85	sete	%dl
000000000102ef88	testb	%dl, %dl
000000000102ef8a	je	0x102ef6a
000000000102ef8c	movq	0x20(%rsp), %rax
000000000102ef91	testq	%rax, %rax
000000000102ef94	je	0x102f008
000000000102ef96	movq	%rax, 0x28(%rsp)
000000000102ef9b	jmp	0x102efa7
000000000102ef9d	movq	0x28(%rsp), %rax
000000000102efa2	movq	0x40(%rsp), %rcx
000000000102efa7	movl	0x5e0(%rcx), %edx
000000000102efad	movl	0x5e4(%rcx), %ebx
000000000102efb3	movl	%ebx, %esi
000000000102efb5	subl	%edx, %ebx
000000000102efb7	cmpl	$0x100, %ebx
000000000102efbd	jb	0x102efe9
000000000102efbf	movq	%rcx, (%rsp)
000000000102efc3	movq	%rax, 0x8(%rsp)
000000000102efc8	movl	%edx, 0x10(%rsp)
000000000102efcc	movl	%esi, 0x14(%rsp)
000000000102efd0	callq	runtime.runqputslow
000000000102efd5	leaq	0x18(%rsp), %rax
000000000102efda	cmpb	$0x0, (%rax)
000000000102efdd	je	0x102ef9d
000000000102efdf	movq	0x30(%rsp), %rbp
000000000102efe4	addq	$0x38, %rsp
000000000102efe8	retq
000000000102efe9	movzbl	%sil, %edx
000000000102efed	movq	%rax, 0x5e8(%rcx,%rdx,8)
000000000102eff5	leal	0x1(%rsi), %eax
000000000102eff8	xchgl	%eax, 0x5e4(%rcx)
000000000102effe	movq	0x30(%rsp), %rbp
000000000102f003	addq	$0x38, %rsp
000000000102f007	retq
000000000102f008	movq	0x30(%rsp), %rbp
000000000102f00d	addq	$0x38, %rsp
000000000102f011	retq
000000000102f012	movq	0x40(%rsp), %rcx
000000000102f017	movq	0x48(%rsp), %rax
000000000102f01c	jmp	0x102ef96
000000000102f021	callq	runtime.morestack_noctxt
000000000102f026	jmp	runtime.runqput
000000000102f02b	int3
000000000102f02c	int3
000000000102f02d	int3
000000000102f02e	int3
000000000102f02f	int3
runtime.runqputslow:
000000000102f030	movq	%gs:0x30, %rcx
000000000102f039	leaq	-0x3a8(%rsp), %rax
000000000102f041	cmpq	0x10(%rcx), %rax
000000000102f045	jbe	0x102f243
000000000102f04b	subq	$0x428, %rsp
000000000102f052	movq	%rbp, 0x420(%rsp)
000000000102f05a	leaq	0x420(%rsp), %rbp
000000000102f062	movq	$0x0, 0x18(%rsp)
000000000102f06b	leaq	0x20(%rsp), %rdi
000000000102f070	xorps	%xmm0, %xmm0
000000000102f073	movq	%rbp, -0x10(%rsp)
000000000102f078	leaq	-0x10(%rsp), %rbp
000000000102f07d	callq	runtime.duffzero
000000000102f082	movq	(%rbp), %rbp
000000000102f086	movl	0x444(%rsp), %ecx
000000000102f08d	movl	0x440(%rsp), %eax
000000000102f094	subl	%eax, %ecx
000000000102f096	shrl	%ecx
000000000102f098	cmpl	$0x80, %ecx
000000000102f09e	jne	0x102f228
000000000102f0a4	movq	0x430(%rsp), %rdx
000000000102f0ac	xorl	%ebx, %ebx
000000000102f0ae	jmp	0x102f0be
000000000102f0b0	movl	%ebx, %edi
000000000102f0b2	shlq	$0x3, %rbx
000000000102f0b6	movq	%rsi, 0x18(%rsp,%rbx)
000000000102f0bb	leal	0x1(%rdi), %ebx
000000000102f0be	cmpl	%ecx, %ebx
000000000102f0c0	jae	0x102f0e1
000000000102f0c2	testb	%al, (%rdx)
000000000102f0c4	leal	(%rbx,%rax), %esi
000000000102f0c7	movzbl	%sil, %esi
000000000102f0cb	movq	0x5e8(%rdx,%rsi,8), %rsi
000000000102f0d3	cmpq	$0x81, %rbx
000000000102f0da	jb	0x102f0b0
000000000102f0dc	jmp	0x102f221
000000000102f0e1	leal	(%rcx,%rax), %ebx
000000000102f0e4	lock
000000000102f0e5	cmpxchgl	%ebx, 0x5e0(%rdx)
000000000102f0ec	sete	%dl
000000000102f0ef	testb	%dl, %dl
000000000102f0f1	je	0x102f1fb
000000000102f0f7	cmpq	$0x81, %rcx
000000000102f0fe	jae	0x102f21a
000000000102f104	movl	%ecx, %eax
000000000102f106	shlq	$0x3, %rcx
000000000102f10a	movq	0x438(%rsp), %rdx
000000000102f112	movq	%rdx, 0x18(%rsp,%rcx)
000000000102f117	xorl	%ecx, %ecx
000000000102f119	jmp	0x102f130
000000000102f11b	leaq	0xa0(%rdx), %rbx
000000000102f122	testb	%al, (%rbx)
000000000102f124	movq	0x18(%rsp,%rcx,8), %rbx
000000000102f129	movq	%rbx, 0xa0(%rdx)
000000000102f130	cmpl	%eax, %ecx
000000000102f132	jae	0x102f158
000000000102f134	cmpq	$0x81, %rcx
000000000102f13b	jae	0x102f213
000000000102f141	movq	0x18(%rsp,%rcx,8), %rdx
000000000102f146	testb	%al, (%rdx)
000000000102f148	incl	%ecx
000000000102f14a	cmpq	$0x81, %rcx
000000000102f151	jb	0x102f11b
000000000102f153	jmp	0x102f213
000000000102f158	movl	%eax, 0x14(%rsp)
000000000102f15c	leaq	0x8994d(%rip), %rax
000000000102f163	movq	%rax, (%rsp)
000000000102f167	callq	runtime.lock
000000000102f16c	movl	0x14(%rsp), %eax
000000000102f170	movq	0x18(%rsp,%rax,8), %rcx
000000000102f175	movq	0x18(%rsp), %rdx
000000000102f17a	movq	$0x0, 0xa0(%rcx)
000000000102f185	movq	0x89974(%rip), %rbx
000000000102f18c	testq	%rbx, %rbx
000000000102f18f	je	0x102f1e9
000000000102f191	leaq	0xa0(%rbx), %rsi
000000000102f198	testb	%al, (%rsi)
000000000102f19a	movq	%rdx, 0xa0(%rbx)
000000000102f1a1	leaq	0x89958(%rip), %rdx
000000000102f1a8	testb	%al, (%rdx)
000000000102f1aa	movq	%rcx, 0x8994f(%rip)
000000000102f1b1	movl	0x89951(%rip), %ecx
000000000102f1b7	leal	0x1(%rcx,%rax), %eax
000000000102f1bb	movl	%eax, 0x89947(%rip)
000000000102f1c1	leaq	0x898e8(%rip), %rax
000000000102f1c8	movq	%rax, (%rsp)
000000000102f1cc	callq	runtime.unlock
000000000102f1d1	movb	$0x1, 0x448(%rsp)
000000000102f1d9	movq	0x420(%rsp), %rbp
000000000102f1e1	addq	$0x428, %rsp
000000000102f1e8	retq
000000000102f1e9	leaq	0x89908(%rip), %rbx
000000000102f1f0	testb	%al, (%rbx)
000000000102f1f2	movq	%rdx, 0x898ff(%rip)
000000000102f1f9	jmp	0x102f1a1
000000000102f1fb	movb	$0x0, 0x448(%rsp)
000000000102f203	movq	0x420(%rsp), %rbp
000000000102f20b	addq	$0x428, %rsp
000000000102f212	retq
000000000102f213	callq	runtime.panicindex
000000000102f218	ud2
000000000102f21a	callq	runtime.panicindex
000000000102f21f	ud2
000000000102f221	callq	runtime.panicindex
000000000102f226	ud2
000000000102f228	leaq	0x3e0d7(%rip), %rax
000000000102f22f	movq	%rax, (%rsp)
000000000102f233	movq	$0x1e, 0x8(%rsp)
000000000102f23c	callq	runtime.throw
000000000102f241	ud2
000000000102f243	callq	runtime.morestack_noctxt
000000000102f248	jmp	runtime.runqputslow
000000000102f24d	int3
000000000102f24e	int3
000000000102f24f	int3
runtime.runqget:
000000000102f250	subq	$0x10, %rsp
000000000102f254	movq	%rbp, 0x8(%rsp)
000000000102f259	leaq	0x8(%rsp), %rbp
000000000102f25e	movq	0x18(%rsp), %rcx
000000000102f263	movq	0xde8(%rcx), %rax
000000000102f26a	testq	%rax, %rax
000000000102f26d	je	0x102f29d
000000000102f26f	movq	%rax, (%rsp)
000000000102f273	xorl	%edx, %edx
000000000102f275	lock
000000000102f276	cmpxchgq	%rdx, 0xde8(%rcx)
000000000102f27e	sete	%bl
000000000102f281	testb	%bl, %bl
000000000102f283	je	0x102f263
000000000102f285	movq	(%rsp), %rax
000000000102f289	movq	%rax, 0x20(%rsp)
000000000102f28e	movb	$0x1, 0x28(%rsp)
000000000102f293	movq	0x8(%rsp), %rbp
000000000102f298	addq	$0x10, %rsp
000000000102f29c	retq
000000000102f29d	movl	0x5e0(%rcx), %edx
000000000102f2a3	movl	0x5e4(%rcx), %ebx
000000000102f2a9	cmpl	%edx, %ebx
000000000102f2ab	je	0x102f2e0
000000000102f2ad	movzbl	%dl, %ebx
000000000102f2b0	movq	0x5e8(%rcx,%rbx,8), %rbx
000000000102f2b8	leal	0x1(%rdx), %esi
000000000102f2bb	movl	%edx, %eax
000000000102f2bd	lock
000000000102f2be	cmpxchgl	%esi, 0x5e0(%rcx)
000000000102f2c5	sete	%dl
000000000102f2c8	testb	%dl, %dl
000000000102f2ca	je	0x102f29d
000000000102f2cc	movq	%rbx, 0x20(%rsp)
000000000102f2d1	movb	$0x0, 0x28(%rsp)
000000000102f2d6	movq	0x8(%rsp), %rbp
000000000102f2db	addq	$0x10, %rsp
000000000102f2df	retq
000000000102f2e0	movq	$0x0, 0x20(%rsp)
000000000102f2e9	movb	$0x0, 0x28(%rsp)
000000000102f2ee	movq	0x8(%rsp), %rbp
000000000102f2f3	addq	$0x10, %rsp
000000000102f2f7	retq
000000000102f2f8	int3
000000000102f2f9	int3
000000000102f2fa	int3
000000000102f2fb	int3
000000000102f2fc	int3
000000000102f2fd	int3
000000000102f2fe	int3
000000000102f2ff	int3
runtime.runqgrab:
000000000102f300	movq	%gs:0x30, %rcx
000000000102f309	cmpq	0x10(%rcx), %rsp
000000000102f30d	jbe	0x102f445
000000000102f313	subq	$0x18, %rsp
000000000102f317	movq	%rbp, 0x10(%rsp)
000000000102f31c	leaq	0x10(%rsp), %rbp
000000000102f321	movq	0x28(%rsp), %rcx
000000000102f326	movl	0x30(%rsp), %edx
000000000102f32a	movq	0x20(%rsp), %rbx
000000000102f32f	movzbl	0x34(%rsp), %esi
000000000102f334	movl	0x5e0(%rbx), %edi
000000000102f33a	movl	0x5e4(%rbx), %r8d
000000000102f341	subl	%edi, %r8d
000000000102f344	movl	%r8d, %r9d
000000000102f347	shrl	%r8d
000000000102f34a	subl	%r8d, %r9d
000000000102f34d	testl	%r9d, %r9d
000000000102f350	jne	0x102f3de
000000000102f356	testb	%sil, %sil
000000000102f359	je	0x102f3cc
000000000102f35b	movq	0xde8(%rbx), %rax
000000000102f362	testq	%rax, %rax
000000000102f365	je	0x102f3cc
000000000102f367	movq	%rax, 0x8(%rsp)
000000000102f36c	cmpl	$0x1, 0xc(%rbx)
000000000102f370	je	0x102f3a6
000000000102f372	xorl	%edi, %edi
000000000102f374	lock
000000000102f375	cmpxchgq	%rdi, 0xde8(%rbx)
000000000102f37d	sete	%r8b
000000000102f381	testb	%r8b, %r8b
000000000102f384	je	0x102f334
000000000102f386	testb	%al, (%rcx)
000000000102f388	movzbl	%dl, %eax
000000000102f38b	movq	0x8(%rsp), %rdx
000000000102f390	movq	%rdx, (%rcx,%rax,8)
000000000102f394	movl	$0x1, 0x38(%rsp)
000000000102f39c	movq	0x10(%rsp), %rbp
000000000102f3a1	addq	$0x18, %rsp
000000000102f3a5	retq
000000000102f3a6	movl	$0x3, (%rsp)
000000000102f3ad	callq	runtime.usleep
000000000102f3b2	movq	0x8(%rsp), %rax
000000000102f3b7	movq	0x28(%rsp), %rcx
000000000102f3bc	movl	0x30(%rsp), %edx
000000000102f3c0	movq	0x20(%rsp), %rbx
000000000102f3c5	movzbl	0x34(%rsp), %esi
000000000102f3ca	jmp	0x102f372
000000000102f3cc	movl	$0x0, 0x38(%rsp)
000000000102f3d4	movq	0x10(%rsp), %rbp
000000000102f3d9	addq	$0x18, %rsp
000000000102f3dd	retq
000000000102f3de	cmpl	$0x80, %r9d
000000000102f3e5	jbe	0x102f3ee
000000000102f3e7	xorl	%edi, %edi
000000000102f3e9	jmp	0x102f334
000000000102f3ee	xorl	%eax, %eax
000000000102f3f0	jmp	0x102f412
000000000102f3f2	testb	%al, (%rcx)
000000000102f3f4	leal	(%rax,%rdi), %r8d
000000000102f3f8	movzbl	%r8b, %r8d
000000000102f3fc	movq	0x5e8(%rbx,%r8,8), %r8
000000000102f404	leal	(%rax,%rdx), %r10d
000000000102f408	movzbl	%r10b, %r10d
000000000102f40c	movq	%r8, (%rcx,%r10,8)
000000000102f410	incl	%eax
000000000102f412	cmpl	%r9d, %eax
000000000102f415	jb	0x102f3f2
000000000102f417	leal	(%r9,%rdi), %r8d
000000000102f41b	movl	%edi, %eax
000000000102f41d	lock
000000000102f41e	cmpxchgl	%r8d, 0x5e0(%rbx)
000000000102f426	sete	%dil
000000000102f42a	testb	%dil, %dil
000000000102f42d	jne	0x102f436
000000000102f42f	xorl	%edi, %edi
000000000102f431	jmp	0x102f334
000000000102f436	movl	%r9d, 0x38(%rsp)
000000000102f43b	movq	0x10(%rsp), %rbp
000000000102f440	addq	$0x18, %rsp
000000000102f444	retq
000000000102f445	callq	runtime.morestack_noctxt
000000000102f44a	jmp	runtime.runqgrab
000000000102f44f	int3
runtime.runqsteal:
000000000102f450	movq	%gs:0x30, %rcx
000000000102f459	cmpq	0x10(%rcx), %rsp
000000000102f45d	jbe	0x102f531
000000000102f463	subq	$0x30, %rsp
000000000102f467	movq	%rbp, 0x28(%rsp)
000000000102f46c	leaq	0x28(%rsp), %rbp
000000000102f471	movq	0x38(%rsp), %rax
000000000102f476	movl	0x5e4(%rax), %ecx
000000000102f47c	movl	%ecx, 0x24(%rsp)
000000000102f480	leaq	0x5e8(%rax), %rdx
000000000102f487	movq	%rdx, 0x8(%rsp)
000000000102f48c	movq	0x40(%rsp), %rdx
000000000102f491	movq	%rdx, (%rsp)
000000000102f495	movl	%ecx, 0x10(%rsp)
000000000102f499	movzbl	0x48(%rsp), %edx
000000000102f49e	movb	%dl, 0x14(%rsp)
000000000102f4a2	callq	runtime.runqgrab
000000000102f4a7	movl	0x18(%rsp), %eax
000000000102f4ab	testl	%eax, %eax
000000000102f4ad	je	0x102f503
000000000102f4af	movl	0x24(%rsp), %ecx
000000000102f4b3	leal	-0x1(%rax,%rcx), %edx
000000000102f4b7	movzbl	%dl, %ebx
000000000102f4ba	movq	0x38(%rsp), %rsi
000000000102f4bf	movq	0x5e8(%rsi,%rbx,8), %rbx
000000000102f4c7	cmpl	$0x1, %eax
000000000102f4ca	je	0x102f4f4
000000000102f4cc	movl	0x5e0(%rsi), %edi
000000000102f4d2	subl	%edi, %ecx
000000000102f4d4	leal	-0x1(%rcx,%rax), %eax
000000000102f4d8	cmpl	$0x100, %eax
000000000102f4dd	jae	0x102f516
000000000102f4df	xchgl	%edx, 0x5e4(%rsi)
000000000102f4e5	movq	%rbx, 0x50(%rsp)
000000000102f4ea	movq	0x28(%rsp), %rbp
000000000102f4ef	addq	$0x30, %rsp
000000000102f4f3	retq
000000000102f4f4	movq	%rbx, 0x50(%rsp)
000000000102f4f9	movq	0x28(%rsp), %rbp
000000000102f4fe	addq	$0x30, %rsp
000000000102f502	retq
000000000102f503	movq	$0x0, 0x50(%rsp)
000000000102f50c	movq	0x28(%rsp), %rbp
000000000102f511	addq	$0x30, %rsp
000000000102f515	retq
000000000102f516	leaq	0x3d136(%rip), %rax
000000000102f51d	movq	%rax, (%rsp)
000000000102f521	movq	$0x18, 0x8(%rsp)
000000000102f52a	callq	runtime.throw
000000000102f52f	ud2
000000000102f531	callq	runtime.morestack_noctxt
000000000102f536	jmp	runtime.runqsteal
000000000102f53b	int3
000000000102f53c	int3
000000000102f53d	int3
000000000102f53e	int3
000000000102f53f	int3
runtime.haveexperiment:
000000000102f540	movq	%gs:0x30, %rcx
000000000102f549	cmpq	0x10(%rcx), %rsp
000000000102f54d	jbe	0x102f72c
000000000102f553	subq	$0x50, %rsp
000000000102f557	movq	%rbp, 0x48(%rsp)
000000000102f55c	leaq	0x48(%rsp), %rbp
000000000102f561	movq	0x60(%rsp), %rax
000000000102f566	cmpq	$0xc, %rax
000000000102f56a	jne	0x102f71b
000000000102f570	movabsq	$0x696f70656d617266, %rcx
000000000102f57a	movq	0x58(%rsp), %rdx
000000000102f57f	cmpq	%rcx, (%rdx)
000000000102f582	jne	0x102f591
000000000102f584	cmpl	$0x7265746e, 0x8(%rdx)
000000000102f58b	je	0x102f706
000000000102f591	xorl	%ecx, %ecx
000000000102f593	xorl	%ebx, %ebx
000000000102f595	jmp	0x102f5a4
000000000102f597	movq	%rbx, %rax
000000000102f59a	movq	0x58(%rsp), %rdx
000000000102f59f	movq	0x30(%rsp), %rbx
000000000102f5a4	testq	%rbx, %rbx
000000000102f5a7	je	0x102f6f7
000000000102f5ad	movq	%rcx, 0x38(%rsp)
000000000102f5b2	movq	%rbx, 0x28(%rsp)
000000000102f5b7	movq	%rcx, (%rsp)
000000000102f5bb	movq	%rbx, 0x8(%rsp)
000000000102f5c0	leaq	0x3b4bd(%rip), %rax
000000000102f5c7	movq	%rax, 0x10(%rsp)
000000000102f5cc	movq	$0x1, 0x18(%rsp)
000000000102f5d5	callq	runtime.index
000000000102f5da	movq	0x20(%rsp), %rax
000000000102f5df	testq	%rax, %rax
000000000102f5e2	jge	0x102f6c1
000000000102f5e8	xorl	%eax, %eax
000000000102f5ea	xorl	%ecx, %ecx
000000000102f5ec	movq	0x28(%rsp), %rdx
000000000102f5f1	movq	%rax, 0x30(%rsp)
000000000102f5f6	movq	%rcx, 0x40(%rsp)
000000000102f5fb	movq	0x60(%rsp), %rbx
000000000102f600	cmpq	%rbx, %rdx
000000000102f603	je	0x102f66d
000000000102f605	cmpq	$0x2, %rdx
000000000102f609	jle	0x102f597
000000000102f60b	movq	0x38(%rsp), %rsi
000000000102f610	cmpw	$0x6f6e, (%rsi)
000000000102f615	jne	0x102f597
000000000102f617	addq	$-0x2, %rdx
000000000102f61b	cmpq	%rbx, %rdx
000000000102f61e	jne	0x102f597
000000000102f624	leaq	0x2(%rsi), %rax
000000000102f628	movq	%rax, (%rsp)
000000000102f62c	movq	0x58(%rsp), %rax
000000000102f631	movq	%rax, 0x8(%rsp)
000000000102f636	movq	%rdx, 0x10(%rsp)
000000000102f63b	callq	runtime.memequal
000000000102f640	leaq	0x18(%rsp), %rax
000000000102f645	cmpb	$0x0, (%rax)
000000000102f648	jne	0x102f65e
000000000102f64a	movq	0x30(%rsp), %rax
000000000102f64f	movq	0x40(%rsp), %rcx
000000000102f654	movq	0x60(%rsp), %rbx
000000000102f659	jmp	0x102f597
000000000102f65e	movb	$0x0, 0x68(%rsp)
000000000102f663	movq	0x48(%rsp), %rbp
000000000102f668	addq	$0x50, %rsp
000000000102f66c	retq
000000000102f66d	movq	%rdx, 0x28(%rsp)
000000000102f672	movq	0x38(%rsp), %rax
000000000102f677	movq	%rax, (%rsp)
000000000102f67b	movq	0x58(%rsp), %rcx
000000000102f680	movq	%rcx, 0x8(%rsp)
000000000102f685	movq	%rdx, 0x10(%rsp)
000000000102f68a	callq	runtime.memequal
000000000102f68f	leaq	0x18(%rsp), %rax
000000000102f694	cmpb	$0x0, (%rax)
000000000102f697	jne	0x102f6b2
000000000102f699	movq	0x30(%rsp), %rax
000000000102f69e	movq	0x40(%rsp), %rcx
000000000102f6a3	movq	0x28(%rsp), %rdx
000000000102f6a8	movq	0x60(%rsp), %rbx
000000000102f6ad	jmp	0x102f605
000000000102f6b2	movb	$0x1, 0x68(%rsp)
000000000102f6b7	movq	0x48(%rsp), %rbp
000000000102f6bc	addq	$0x50, %rsp
000000000102f6c0	retq
000000000102f6c1	movq	0x28(%rsp), %rcx
000000000102f6c6	cmpq	%rcx, %rax
000000000102f6c9	ja	0x102f725
000000000102f6cb	leaq	0x1(%rax), %rdx
000000000102f6cf	cmpq	%rcx, %rdx
000000000102f6d2	ja	0x102f725
000000000102f6d4	subq	%rdx, %rcx
000000000102f6d7	movq	%rcx, %rbx
000000000102f6da	negq	%rcx
000000000102f6dd	sarq	$0x3f, %rcx
000000000102f6e1	andq	%rdx, %rcx
000000000102f6e4	movq	0x38(%rsp), %rsi
000000000102f6e9	addq	%rsi, %rcx
000000000102f6ec	movq	%rax, %rdx
000000000102f6ef	movq	%rbx, %rax
000000000102f6f2	jmp	0x102f5f1
000000000102f6f7	movb	$0x0, 0x68(%rsp)
000000000102f6fc	movq	0x48(%rsp), %rbp
000000000102f701	addq	$0x50, %rsp
000000000102f705	retq
000000000102f706	movzbl	runtime.framepointer_enabled(%rip), %eax
000000000102f70d	movb	%al, 0x68(%rsp)
000000000102f711	movq	0x48(%rsp), %rbp
000000000102f716	addq	$0x50, %rsp
000000000102f71a	retq
000000000102f71b	movq	0x58(%rsp), %rdx
000000000102f720	jmp	0x102f591
000000000102f725	callq	runtime.panicslice
000000000102f72a	ud2
000000000102f72c	callq	runtime.morestack_noctxt
000000000102f731	jmp	runtime.haveexperiment
000000000102f736	int3
000000000102f737	int3
000000000102f738	int3
000000000102f739	int3
000000000102f73a	int3
000000000102f73b	int3
000000000102f73c	int3
000000000102f73d	int3
000000000102f73e	int3
000000000102f73f	int3
runtime.(*randomOrder).reset:
000000000102f740	movq	%gs:0x30, %rcx
000000000102f749	cmpq	0x10(%rcx), %rsp
000000000102f74d	jbe	0x102f849
000000000102f753	subq	$0x50, %rsp
000000000102f757	movq	%rbp, 0x48(%rsp)
000000000102f75c	leaq	0x48(%rsp), %rbp
000000000102f761	movl	0x60(%rsp), %eax
000000000102f765	movq	0x58(%rsp), %rcx
000000000102f76a	movl	%eax, (%rcx)
000000000102f76c	movq	$0x0, 0x10(%rcx)
000000000102f774	movl	$0x1, %edx
000000000102f779	jmp	0x102f787
000000000102f77b	leal	0x1(%rbx), %edx
000000000102f77e	movl	0x60(%rsp), %eax
000000000102f782	movq	0x58(%rsp), %rcx
000000000102f787	cmpl	%eax, %edx
000000000102f789	ja	0x102f83f
000000000102f78f	movl	%edx, 0x44(%rsp)
000000000102f793	movl	%edx, (%rsp)
000000000102f796	movl	%eax, 0x4(%rsp)
000000000102f79a	callq	runtime.gcd
000000000102f79f	cmpl	$0x1, 0x8(%rsp)
000000000102f7a4	jne	0x102f831
000000000102f7aa	movq	0x58(%rsp), %rax
000000000102f7af	movq	0x10(%rax), %rcx
000000000102f7b3	movq	0x8(%rax), %rdx
000000000102f7b7	movq	0x18(%rax), %rbx
000000000102f7bb	leaq	0x1(%rcx), %rsi
000000000102f7bf	cmpq	%rbx, %rsi
000000000102f7c2	jg	0x102f7d5
000000000102f7c4	leaq	0x1(%rcx), %rbx
000000000102f7c8	movq	%rbx, 0x10(%rax)
000000000102f7cc	movl	0x44(%rsp), %ebx
000000000102f7d0	movl	%ebx, (%rdx,%rcx,4)
000000000102f7d3	jmp	0x102f77b
000000000102f7d5	leaq	0x28c04(%rip), %rax
000000000102f7dc	movq	%rax, (%rsp)
000000000102f7e0	movq	%rdx, 0x8(%rsp)
000000000102f7e5	movq	%rcx, 0x10(%rsp)
000000000102f7ea	movq	%rbx, 0x18(%rsp)
000000000102f7ef	movq	%rsi, 0x20(%rsp)
000000000102f7f4	callq	runtime.growslice
000000000102f7f9	movq	0x28(%rsp), %rax
000000000102f7fe	movq	0x30(%rsp), %rcx
000000000102f803	movq	0x38(%rsp), %rdx
000000000102f808	movq	0x58(%rsp), %rbx
000000000102f80d	movq	%rdx, 0x18(%rbx)
000000000102f811	cmpl	$0x0, 0xa5418(%rip)
000000000102f818	jne	0x102f826
000000000102f81a	movq	%rax, 0x8(%rbx)
000000000102f81e	movq	%rax, %rdx
000000000102f821	movq	%rbx, %rax
000000000102f824	jmp	0x102f7c4
000000000102f826	leaq	0x8(%rbx), %rdi
000000000102f82a	callq	runtime.gcWriteBarrier
000000000102f82f	jmp	0x102f81e
000000000102f831	movq	0x58(%rsp), %rax
000000000102f836	movl	0x44(%rsp), %ebx
000000000102f83a	jmp	0x102f77b
000000000102f83f	movq	0x48(%rsp), %rbp
000000000102f844	addq	$0x50, %rsp
000000000102f848	retq
000000000102f849	callq	runtime.morestack_noctxt
000000000102f84e	jmp	"runtime.(*randomOrder).reset"
000000000102f853	int3
000000000102f854	int3
000000000102f855	int3
000000000102f856	int3
000000000102f857	int3
000000000102f858	int3
000000000102f859	int3
000000000102f85a	int3
000000000102f85b	int3
000000000102f85c	int3
000000000102f85d	int3
000000000102f85e	int3
000000000102f85f	int3
runtime.gcd:
000000000102f860	movl	0x8(%rsp), %ecx
000000000102f864	movl	0xc(%rsp), %edx
000000000102f868	jmp	0x102f874
000000000102f86a	movl	%ecx, %eax
000000000102f86c	movl	%edx, %ebx
000000000102f86e	xorl	%edx, %edx
000000000102f870	divl	%ebx
000000000102f872	movl	%ebx, %ecx
000000000102f874	testl	%edx, %edx
000000000102f876	jne	0x102f86a
000000000102f878	movl	%ecx, 0x10(%rsp)
000000000102f87c	retq
000000000102f87d	int3
000000000102f87e	int3
000000000102f87f	int3
runtime.(*profBuf).takeOverflow:
000000000102f880	subq	$0x10, %rsp
000000000102f884	movq	%rbp, 0x8(%rsp)
000000000102f889	leaq	0x8(%rsp), %rbp
000000000102f88e	movq	0x18(%rsp), %rcx
000000000102f893	movq	0x10(%rcx), %rdx
000000000102f897	movq	0x18(%rcx), %rbx
000000000102f89b	jmp	0x102f8ab
000000000102f89d	movq	0x10(%rcx), %rsi
000000000102f8a1	movq	0x18(%rcx), %rdi
000000000102f8a5	movq	%rsi, %rdx
000000000102f8a8	movq	%rdi, %rbx
000000000102f8ab	movq	%rdx, (%rsp)
000000000102f8af	testl	%edx, %edx
000000000102f8b1	je	0x102f8e5
000000000102f8b3	movq	%rdx, %rax
000000000102f8b6	shrq	$0x20, %rdx
000000000102f8ba	incq	%rdx
000000000102f8bd	shlq	$0x20, %rdx
000000000102f8c1	lock
000000000102f8c2	cmpxchgq	%rdx, 0x10(%rcx)
000000000102f8c7	sete	%dl
000000000102f8ca	testb	%dl, %dl
000000000102f8cc	je	0x102f89d
000000000102f8ce	movq	(%rsp), %rax
000000000102f8d2	movl	%eax, 0x20(%rsp)
000000000102f8d6	movq	%rbx, 0x28(%rsp)
000000000102f8db	movq	0x8(%rsp), %rbp
000000000102f8e0	addq	$0x10, %rsp
000000000102f8e4	retq
000000000102f8e5	xorl	%ebx, %ebx
000000000102f8e7	jmp	0x102f8ce
000000000102f8e9	int3
000000000102f8ea	int3
000000000102f8eb	int3
000000000102f8ec	int3
000000000102f8ed	int3
000000000102f8ee	int3
000000000102f8ef	int3
runtime.(*profBuf).incrementOverflow:
000000000102f8f0	movq	0x8(%rsp), %rcx
000000000102f8f5	movq	0x10(%rcx), %rdx
000000000102f8f9	testl	%edx, %edx
000000000102f8fb	je	0x102f917
000000000102f8fd	cmpl	$-0x1, %edx
000000000102f900	je	0x102f916
000000000102f902	leaq	0x1(%rdx), %rbx
000000000102f906	movq	%rdx, %rax
000000000102f909	lock
000000000102f90a	cmpxchgq	%rbx, 0x10(%rcx)
000000000102f90f	sete	%dl
000000000102f912	testb	%dl, %dl
000000000102f914	je	0x102f8f5
000000000102f916	retq
000000000102f917	movq	0x10(%rsp), %rax
000000000102f91c	xchgq	%rax, 0x18(%rcx)
000000000102f920	shrq	$0x20, %rdx
000000000102f924	leaq	0x1(%rdx), %rax
000000000102f928	shlq	$0x20, %rax
000000000102f92c	incq	%rax
000000000102f92f	xchgq	%rax, 0x10(%rcx)
000000000102f933	jmp	0x102f916
000000000102f935	int3
000000000102f936	int3
000000000102f937	int3
000000000102f938	int3
000000000102f939	int3
000000000102f93a	int3
000000000102f93b	int3
000000000102f93c	int3
000000000102f93d	int3
000000000102f93e	int3
000000000102f93f	int3
runtime.(*profBuf).canWriteRecord:
000000000102f940	subq	$0x8, %rsp
000000000102f944	movq	%rbp, (%rsp)
000000000102f948	leaq	(%rsp), %rbp
000000000102f94c	movq	0x10(%rsp), %rcx
000000000102f951	movq	(%rcx), %rdx
000000000102f954	movq	0x8(%rcx), %rbx
000000000102f958	movq	0x50(%rcx), %rsi
000000000102f95c	movq	%rdx, %rdi
000000000102f95f	shrq	$0x22, %rdx
000000000102f963	movq	%rbx, %rax
000000000102f966	shrq	$0x22, %rbx
000000000102f96a	subl	%ebx, %edx
000000000102f96c	shll	$0x2, %edx
000000000102f96f	sarl	$0x2, %edx
000000000102f972	movslq	%edx, %rdx
000000000102f975	addq	%rsi, %rdx
000000000102f978	cmpq	$0x1, %rdx
000000000102f97c	jl	0x102f9cb
000000000102f97e	movq	0x38(%rcx), %rdx
000000000102f982	subl	%eax, %edi
000000000102f984	shll	$0x2, %edi
000000000102f987	sarl	$0x2, %edi
000000000102f98a	movslq	%edi, %rbx
000000000102f98d	addq	%rdx, %rbx
000000000102f990	movq	0x18(%rsp), %rsi
000000000102f995	addq	0x28(%rcx), %rsi
000000000102f999	testl	%edx, %edx
000000000102f99b	je	0x102f9d9
000000000102f99d	movq	%rdx, %rcx
000000000102f9a0	xorl	%edx, %edx
000000000102f9a2	divl	%ecx
000000000102f9a4	movl	%edx, %edx
000000000102f9a6	leaq	0x2(%rdx,%rsi), %rdi
000000000102f9ab	cmpq	%rcx, %rdi
000000000102f9ae	jle	0x102f9b6
000000000102f9b0	subq	%rdx, %rcx
000000000102f9b3	subq	%rcx, %rbx
000000000102f9b6	leaq	0x2(%rsi), %rax
000000000102f9ba	cmpq	%rax, %rbx
000000000102f9bd	setge	0x20(%rsp)
000000000102f9c2	movq	(%rsp), %rbp
000000000102f9c6	addq	$0x8, %rsp
000000000102f9ca	retq
000000000102f9cb	movb	$0x0, 0x20(%rsp)
000000000102f9d0	movq	(%rsp), %rbp
000000000102f9d4	addq	$0x8, %rsp
000000000102f9d8	retq
000000000102f9d9	callq	runtime.panicdivide
000000000102f9de	ud2
runtime.(*profBuf).canWriteTwoRecords:
000000000102f9e0	subq	$0x8, %rsp
000000000102f9e4	movq	%rbp, (%rsp)
000000000102f9e8	leaq	(%rsp), %rbp
000000000102f9ec	movq	0x10(%rsp), %rcx
000000000102f9f1	movq	(%rcx), %rdx
000000000102f9f4	movq	0x8(%rcx), %rbx
000000000102f9f8	movq	0x50(%rcx), %rsi
000000000102f9fc	movq	%rdx, %rdi
000000000102f9ff	shrq	$0x22, %rdx
000000000102fa03	movq	%rbx, %rax
000000000102fa06	shrq	$0x22, %rbx
000000000102fa0a	subl	%ebx, %edx
000000000102fa0c	shll	$0x2, %edx
000000000102fa0f	sarl	$0x2, %edx
000000000102fa12	movslq	%edx, %rdx
000000000102fa15	addq	%rsi, %rdx
000000000102fa18	cmpq	$0x2, %rdx
000000000102fa1c	jl	0x102faa6
000000000102fa22	movq	0x38(%rcx), %rdx
000000000102fa26	subl	%eax, %edi
000000000102fa28	shll	$0x2, %edi
000000000102fa2b	sarl	$0x2, %edi
000000000102fa2e	movslq	%edi, %rbx
000000000102fa31	addq	%rdx, %rbx
000000000102fa34	movq	0x28(%rcx), %rcx
000000000102fa38	movq	0x18(%rsp), %rsi
000000000102fa3d	leaq	0x2(%rcx,%rsi), %rdi
000000000102fa42	addq	%rcx, %rsi
000000000102fa45	testl	%edx, %edx
000000000102fa47	je	0x102fab4
000000000102fa49	movq	%rdx, %r8
000000000102fa4c	xorl	%edx, %edx
000000000102fa4e	divl	%r8d
000000000102fa51	movl	%edx, %edx
000000000102fa53	leaq	0x2(%rsi,%rdx), %r9
000000000102fa58	cmpq	%r8, %r9
000000000102fa5b	jle	0x102faa1
000000000102fa5d	movq	%r8, %rax
000000000102fa60	subq	%rdx, %r8
000000000102fa63	subq	%r8, %rbx
000000000102fa66	xorl	%edx, %edx
000000000102fa68	leaq	0x2(%rsi,%rdx), %r8
000000000102fa6d	addq	%rsi, %rdx
000000000102fa70	subq	%rdi, %rbx
000000000102fa73	movq	0x20(%rsp), %rsi
000000000102fa78	leaq	0x2(%rcx,%rsi), %rdi
000000000102fa7d	addq	%rsi, %rcx
000000000102fa80	leaq	0x4(%rcx,%rdx), %rcx
000000000102fa85	cmpq	%rax, %rcx
000000000102fa88	jle	0x102fa90
000000000102fa8a	subq	%r8, %rax
000000000102fa8d	subq	%rax, %rbx
000000000102fa90	cmpq	%rdi, %rbx
000000000102fa93	setge	0x28(%rsp)
000000000102fa98	movq	(%rsp), %rbp
000000000102fa9c	addq	$0x8, %rsp
000000000102faa0	retq
000000000102faa1	movq	%r8, %rax
000000000102faa4	jmp	0x102fa68
000000000102faa6	movb	$0x0, 0x28(%rsp)
000000000102faab	movq	(%rsp), %rbp
000000000102faaf	addq	$0x8, %rsp
000000000102fab3	retq
000000000102fab4	callq	runtime.panicdivide
000000000102fab9	ud2
000000000102fabb	int3
000000000102fabc	int3
000000000102fabd	int3
000000000102fabe	int3
000000000102fabf	int3
runtime.(*profBuf).write:
000000000102fac0	movq	%gs:0x30, %rcx
000000000102fac9	cmpq	0x10(%rcx), %rsp
000000000102facd	jbe	0x102ff12
000000000102fad3	subq	$0x80, %rsp
000000000102fada	movq	%rbp, 0x78(%rsp)
000000000102fadf	leaq	0x78(%rsp), %rbp
000000000102fae4	movq	0x88(%rsp), %rax
000000000102faec	testq	%rax, %rax
000000000102faef	je	0x102fea4
000000000102faf5	movq	0x28(%rax), %rcx
000000000102faf9	movq	0xa8(%rsp), %rdx
000000000102fb01	cmpq	%rcx, %rdx
000000000102fb04	jg	0x102fef7
000000000102fb0a	movq	0x10(%rax), %rcx
000000000102fb0e	testl	%ecx, %ecx
000000000102fb10	ja	0x102fdd9
000000000102fb16	ja	0x102fd9d
000000000102fb1c	movq	%rax, (%rsp)
000000000102fb20	movq	0xc0(%rsp), %rcx
000000000102fb28	movq	%rcx, 0x8(%rsp)
000000000102fb2d	callq	"runtime.(*profBuf).canWriteRecord"
000000000102fb32	leaq	0x10(%rsp), %rax
000000000102fb37	cmpb	$0x0, (%rax)
000000000102fb3a	je	0x102fd9d
000000000102fb40	movq	0x88(%rsp), %rcx
000000000102fb48	movq	(%rcx), %rdx
000000000102fb4b	movq	0x8(%rcx), %rdx
000000000102fb4f	movq	0x48(%rcx), %rbx
000000000102fb53	movq	0x50(%rcx), %rsi
000000000102fb57	testl	%esi, %esi
000000000102fb59	je	0x102fef0
000000000102fb5f	movq	%rdx, %rax
000000000102fb62	shrq	$0x22, %rax
000000000102fb66	movq	%rdx, %rdi
000000000102fb69	xorl	%edx, %edx
000000000102fb6b	divl	%esi
000000000102fb6d	movq	0x90(%rsp), %r8
000000000102fb75	testq	%r8, %r8
000000000102fb78	je	0x102fb8c
000000000102fb7a	movl	%edx, %edx
000000000102fb7c	cmpq	%rsi, %rdx
000000000102fb7f	jae	0x102fee9
000000000102fb85	movq	(%r8), %rsi
000000000102fb88	movq	%rsi, (%rbx,%rdx,8)
000000000102fb8c	movq	0x30(%rcx), %rdx
000000000102fb90	movq	0x38(%rcx), %rbx
000000000102fb94	testl	%ebx, %ebx
000000000102fb96	je	0x102fee2
000000000102fb9c	movq	%rdi, %rax
000000000102fb9f	movq	%rdx, %rsi
000000000102fba2	xorl	%edx, %edx
000000000102fba4	divl	%ebx
000000000102fba6	movl	%edx, %edx
000000000102fba8	movq	0x28(%rcx), %rdi
000000000102fbac	addq	%rdx, %rdi
000000000102fbaf	movq	0xc0(%rsp), %r8
000000000102fbb7	leaq	0x2(%rdi,%r8), %rdi
000000000102fbbc	cmpq	%rbx, %rdi
000000000102fbbf	jle	0x102fd93
000000000102fbc5	cmpq	%rbx, %rdx
000000000102fbc8	jae	0x102fedb
000000000102fbce	movq	$0x0, (%rsi,%rdx,8)
000000000102fbd6	movq	0x38(%rcx), %rbx
000000000102fbda	subq	%rdx, %rbx
000000000102fbdd	xorl	%eax, %eax
000000000102fbdf	movq	0x30(%rcx), %rdx
000000000102fbe3	movq	0x38(%rcx), %rsi
000000000102fbe7	movq	0x40(%rcx), %rdi
000000000102fbeb	cmpq	%rsi, %rax
000000000102fbee	ja	0x102fed4
000000000102fbf4	subq	%rax, %rdi
000000000102fbf7	movq	%rax, %r9
000000000102fbfa	shlq	$0x3, %rax
000000000102fbfe	movq	%rdi, %r10
000000000102fc01	negq	%rdi
000000000102fc04	sarq	$0x3f, %rdi
000000000102fc08	andq	%rax, %rdi
000000000102fc0b	leaq	(%rdi,%rdx), %r11
000000000102fc0f	subq	%r9, %rsi
000000000102fc12	movq	0x28(%rcx), %r9
000000000102fc16	leaq	0x2(%r8,%r9), %r9
000000000102fc1b	testq	%rsi, %rsi
000000000102fc1e	jbe	0x102fecd
000000000102fc24	movq	%r9, (%rdx,%rdi)
000000000102fc28	cmpq	$0x1, %rsi
000000000102fc2c	jbe	0x102fec6
000000000102fc32	movq	0x98(%rsp), %r9
000000000102fc3a	movq	%r9, 0x8(%rdx,%rdi)
000000000102fc3f	movq	0x28(%rcx), %rdx
000000000102fc43	leaq	0x2(%rdx), %rdi
000000000102fc47	cmpq	$0x2, %rdi
000000000102fc4b	jb	0x102febf
000000000102fc51	cmpq	%r10, %rdi
000000000102fc54	ja	0x102febf
000000000102fc5a	movq	0xa8(%rsp), %rdi
000000000102fc62	cmpq	%rdi, %rdx
000000000102fc65	cmovgq	%rdi, %rdx
000000000102fc69	leaq	-0x2(%r10), %rdi
000000000102fc6d	negq	%rdi
000000000102fc70	sarq	$0x3f, %rdi
000000000102fc74	andq	$0x10, %rdi
000000000102fc78	addq	%r11, %rdi
000000000102fc7b	movq	0xa0(%rsp), %r9
000000000102fc83	cmpq	%r9, %rdi
000000000102fc86	je	0x102fc99
000000000102fc88	jmp	0x102fd3f
000000000102fc8d	movq	$0x0, 0x10(%r11,%rdx,8)
000000000102fc96	incq	%rdx
000000000102fc99	movq	0x28(%rcx), %rdi
000000000102fc9d	cmpq	%rdi, %rdx
000000000102fca0	jae	0x102fcb0
000000000102fca2	leaq	0x2(%rdx), %rdi
000000000102fca6	cmpq	%rsi, %rdi
000000000102fca9	jb	0x102fc8d
000000000102fcab	jmp	0x102feb8
000000000102fcb0	movq	0xb8(%rsp), %rdx
000000000102fcb8	xorl	%eax, %eax
000000000102fcba	jmp	0x102fcc3
000000000102fcbc	movq	%rdi, (%r11,%r9,8)
000000000102fcc0	incq	%rax
000000000102fcc3	cmpq	%r8, %rax
000000000102fcc6	jge	0x102fcdf
000000000102fcc8	movq	(%rdx,%rax,8), %rdi
000000000102fccc	movq	0x28(%rcx), %r9
000000000102fcd0	leaq	0x2(%r9,%rax), %r9
000000000102fcd5	cmpq	%rsi, %r9
000000000102fcd8	jb	0x102fcbc
000000000102fcda	jmp	0x102feb1
000000000102fcdf	movq	0x8(%rcx), %rdx
000000000102fce3	movq	%rdx, 0x60(%rsp)
000000000102fce8	leaq	(%r8,%rbx), %rsi
000000000102fcec	addq	0x28(%rcx), %rsi
000000000102fcf0	addq	$0x2, %rsi
000000000102fcf4	movq	%rdx, %rax
000000000102fcf7	shrq	$0x22, %rdx
000000000102fcfb	incq	%rdx
000000000102fcfe	shlq	$0x22, %rdx
000000000102fd02	addl	%eax, %esi
000000000102fd04	orq	%rsi, %rdx
000000000102fd07	lock
000000000102fd08	cmpxchgq	%rdx, 0x8(%rcx)
000000000102fd0d	sete	%dl
000000000102fd10	testb	%dl, %dl
000000000102fd12	je	0x102fcdf
000000000102fd14	movq	0x60(%rsp), %rax
000000000102fd19	btq	$0x20, %rax
000000000102fd1e	jb	0x102fd2d
000000000102fd20	movq	0x78(%rsp), %rbp
000000000102fd25	addq	$0x80, %rsp
000000000102fd2c	retq
000000000102fd2d	leaq	0x80(%rcx), %rax
000000000102fd34	movq	%rax, (%rsp)
000000000102fd38	callq	runtime.notewakeup
000000000102fd3d	jmp	0x102fd20
000000000102fd3f	movq	%rsi, 0x58(%rsp)
000000000102fd44	movq	%r11, 0x70(%rsp)
000000000102fd49	movq	%rbx, 0x50(%rsp)
000000000102fd4e	movq	%rdx, 0x68(%rsp)
000000000102fd53	movq	%rdi, (%rsp)
000000000102fd57	movq	%r9, 0x8(%rsp)
000000000102fd5c	shlq	$0x3, %rdx
000000000102fd60	movq	%rdx, 0x10(%rsp)
000000000102fd65	callq	runtime.memmove
000000000102fd6a	movq	0x88(%rsp), %rcx
000000000102fd72	movq	0x68(%rsp), %rdx
000000000102fd77	movq	0x50(%rsp), %rbx
000000000102fd7c	movq	0x58(%rsp), %rsi
000000000102fd81	movq	0xc0(%rsp), %r8
000000000102fd89	movq	0x70(%rsp), %r11
000000000102fd8e	jmp	0x102fc99
000000000102fd93	movq	%rdx, %rax
000000000102fd96	xorl	%ebx, %ebx
000000000102fd98	jmp	0x102fbdf
000000000102fd9d	movq	0x88(%rsp), %rax
000000000102fda5	movq	%rax, (%rsp)
000000000102fda9	movq	0x98(%rsp), %rcx
000000000102fdb1	movq	%rcx, 0x8(%rsp)
000000000102fdb6	callq	"runtime.(*profBuf).incrementOverflow"
000000000102fdbb	movq	0x88(%rsp), %rax
000000000102fdc3	movq	%rax, (%rsp)
000000000102fdc7	callq	"runtime.(*profBuf).wakeupExtra"
000000000102fdcc	movq	0x78(%rsp), %rbp
000000000102fdd1	addq	$0x80, %rsp
000000000102fdd8	retq
000000000102fdd9	movq	%rcx, 0x60(%rsp)
000000000102fdde	movq	%rax, (%rsp)
000000000102fde2	movq	$0x1, 0x8(%rsp)
000000000102fdeb	movq	0xc0(%rsp), %rcx
000000000102fdf3	movq	%rcx, 0x10(%rsp)
000000000102fdf8	callq	"runtime.(*profBuf).canWriteTwoRecords"
000000000102fdfd	leaq	0x18(%rsp), %rax
000000000102fe02	cmpb	$0x0, (%rax)
000000000102fe05	jne	0x102fe23
000000000102fe07	movq	0x60(%rsp), %rcx
000000000102fe0c	testl	%ecx, %ecx
000000000102fe0e	movq	0x88(%rsp), %rax
000000000102fe16	movq	0xa8(%rsp), %rdx
000000000102fe1e	jmp	0x102fb16
000000000102fe23	movq	0x88(%rsp), %rax
000000000102fe2b	movq	%rax, (%rsp)
000000000102fe2f	callq	"runtime.(*profBuf).takeOverflow"
000000000102fe34	movl	0x8(%rsp), %eax
000000000102fe38	movq	0x10(%rsp), %rcx
000000000102fe3d	testl	%eax, %eax
000000000102fe3f	jbe	0x102fb40
000000000102fe45	movq	$0x0, 0x48(%rsp)
000000000102fe4e	movq	%rax, 0x48(%rsp)
000000000102fe53	movq	0x88(%rsp), %rax
000000000102fe5b	movq	%rax, (%rsp)
000000000102fe5f	movq	$0x0, 0x8(%rsp)
000000000102fe68	movq	%rcx, 0x10(%rsp)
000000000102fe6d	movq	$0x0, 0x18(%rsp)
000000000102fe76	xorps	%xmm0, %xmm0
000000000102fe79	movups	%xmm0, 0x20(%rsp)
000000000102fe7e	leaq	0x48(%rsp), %rcx
000000000102fe83	movq	%rcx, 0x30(%rsp)
000000000102fe88	movq	$0x1, 0x38(%rsp)
000000000102fe91	movq	$0x1, 0x40(%rsp)
000000000102fe9a	callq	"runtime.(*profBuf).write"
000000000102fe9f	jmp	0x102fb40
000000000102fea4	movq	0x78(%rsp), %rbp
000000000102fea9	addq	$0x80, %rsp
000000000102feb0	retq
000000000102feb1	callq	runtime.panicindex
000000000102feb6	ud2
000000000102feb8	callq	runtime.panicindex
000000000102febd	ud2
000000000102febf	callq	runtime.panicslice
000000000102fec4	ud2
000000000102fec6	callq	runtime.panicindex
000000000102fecb	ud2
000000000102fecd	callq	runtime.panicindex
000000000102fed2	ud2
000000000102fed4	callq	runtime.panicslice
000000000102fed9	ud2
000000000102fedb	callq	runtime.panicindex
000000000102fee0	ud2
000000000102fee2	callq	runtime.panicdivide
000000000102fee7	ud2
000000000102fee9	callq	runtime.panicindex
000000000102feee	ud2
000000000102fef0	callq	runtime.panicdivide
000000000102fef5	ud2
000000000102fef7	leaq	0x3c524(%rip), %rax
000000000102fefe	movq	%rax, (%rsp)
000000000102ff02	movq	$0x17, 0x8(%rsp)
000000000102ff0b	callq	runtime.throw
000000000102ff10	ud2
000000000102ff12	callq	runtime.morestack_noctxt
000000000102ff17	jmp	"runtime.(*profBuf).write"
000000000102ff1c	int3
000000000102ff1d	int3
000000000102ff1e	int3
000000000102ff1f	int3
runtime.(*profBuf).wakeupExtra:
000000000102ff20	movq	%gs:0x30, %rcx
000000000102ff29	cmpq	0x10(%rcx), %rsp
000000000102ff2d	jbe	0x102ff88
000000000102ff2f	subq	$0x18, %rsp
000000000102ff33	movq	%rbp, 0x10(%rsp)
000000000102ff38	leaq	0x10(%rsp), %rbp
000000000102ff3d	movq	0x20(%rsp), %rcx
000000000102ff42	movq	0x8(%rcx), %rdx
000000000102ff46	movq	%rdx, 0x8(%rsp)
000000000102ff4b	movq	%rdx, %rax
000000000102ff4e	btsq	$0x21, %rdx
000000000102ff53	lock
000000000102ff54	cmpxchgq	%rdx, 0x8(%rcx)
000000000102ff59	sete	%dl
000000000102ff5c	testb	%dl, %dl
000000000102ff5e	je	0x102ff42
000000000102ff60	movq	0x8(%rsp), %rax
000000000102ff65	btq	$0x20, %rax
000000000102ff6a	jb	0x102ff76
000000000102ff6c	movq	0x10(%rsp), %rbp
000000000102ff71	addq	$0x18, %rsp
000000000102ff75	retq
000000000102ff76	leaq	0x80(%rcx), %rax
000000000102ff7d	movq	%rax, (%rsp)
000000000102ff81	callq	runtime.notewakeup
000000000102ff86	jmp	0x102ff6c
000000000102ff88	callq	runtime.morestack_noctxt
000000000102ff8d	jmp	"runtime.(*profBuf).wakeupExtra"
000000000102ff8f	int3
runtime.args:
000000000102ff90	movq	%gs:0x30, %rcx
000000000102ff99	cmpq	0x10(%rcx), %rsp
000000000102ff9d	jbe	0x102fff6
000000000102ff9f	subq	$0x18, %rsp
000000000102ffa3	movq	%rbp, 0x10(%rsp)
000000000102ffa8	leaq	0x10(%rsp), %rbp
000000000102ffad	movl	0x20(%rsp), %ecx
000000000102ffb1	movl	%ecx, runtime.argc(%rip)
000000000102ffb7	cmpl	$0x0, 0xa4c72(%rip)
000000000102ffbe	jne	0x102ffe3
000000000102ffc0	movq	0x28(%rsp), %rax
000000000102ffc5	movq	%rax, runtime.argv(%rip)
000000000102ffcc	movl	%ecx, (%rsp)
000000000102ffcf	movq	%rax, 0x8(%rsp)
000000000102ffd4	callq	runtime.sysargs
000000000102ffd9	movq	0x10(%rsp), %rbp
000000000102ffde	addq	$0x18, %rsp
000000000102ffe2	retq
000000000102ffe3	leaq	runtime.argv(%rip), %rdi
000000000102ffea	movq	0x28(%rsp), %rax
000000000102ffef	callq	runtime.gcWriteBarrier
000000000102fff4	jmp	0x102ffcc
000000000102fff6	callq	runtime.morestack_noctxt
000000000102fffb	jmp	runtime.args
000000000102fffd	int3
000000000102fffe	int3
000000000102ffff	int3
runtime.goargs:
0000000001030000	movq	%gs:0x30, %rcx
0000000001030009	cmpq	0x10(%rcx), %rsp
000000000103000d	jbe	0x103011b
0000000001030013	subq	$0x40, %rsp
0000000001030017	movq	%rbp, 0x38(%rsp)
000000000103001c	leaq	0x38(%rsp), %rbp
0000000001030021	leaq	0x282f8(%rip), %rax
0000000001030028	movq	%rax, (%rsp)
000000000103002c	movslq	runtime.argc(%rip), %rax
0000000001030033	movq	%rax, 0x8(%rsp)
0000000001030038	movslq	runtime.argc(%rip), %rax
000000000103003f	movq	%rax, 0x10(%rsp)
0000000001030044	callq	runtime.makeslice
0000000001030049	movq	0x28(%rsp), %rax
000000000103004e	movq	0x18(%rsp), %rcx
0000000001030053	movq	0x20(%rsp), %rdx
0000000001030058	movq	%rdx, 0x88819(%rip)
000000000103005f	movq	%rax, 0x8881a(%rip)
0000000001030066	cmpl	$0x0, 0xa4bc3(%rip)
000000000103006d	jne	0x1030100
0000000001030073	movq	%rcx, runtime.argslice(%rip)
000000000103007a	xorl	%eax, %eax
000000000103007c	jmp	0x1030081
000000000103007e	leal	0x1(%rdx), %eax
0000000001030081	movl	runtime.argc(%rip), %ecx
0000000001030087	cmpl	%ecx, %eax
0000000001030089	jge	0x10300f6
000000000103008b	movl	%eax, 0x34(%rsp)
000000000103008f	movslq	%eax, %rcx
0000000001030092	shlq	$0x3, %rcx
0000000001030096	addq	runtime.argv(%rip), %rcx
000000000103009d	movq	(%rcx), %rcx
00000000010300a0	movq	%rcx, (%rsp)
00000000010300a4	callq	runtime.gostringnocopy
00000000010300a9	movq	0x887c8(%rip), %rax
00000000010300b0	movq	runtime.argslice(%rip), %rcx
00000000010300b7	movl	0x34(%rsp), %edx
00000000010300bb	movslq	%edx, %rbx
00000000010300be	movq	0x10(%rsp), %rsi
00000000010300c3	movq	0x8(%rsp), %rdi
00000000010300c8	cmpq	%rax, %rbx
00000000010300cb	jae	0x1030114
00000000010300cd	shlq	$0x4, %rbx
00000000010300d1	movq	%rsi, 0x8(%rcx,%rbx)
00000000010300d6	leaq	(%rcx,%rbx), %rsi
00000000010300da	cmpl	$0x0, 0xa4b4f(%rip)
00000000010300e1	jne	0x10300e9
00000000010300e3	movq	%rdi, (%rcx,%rbx)
00000000010300e7	jmp	0x103007e
00000000010300e9	movq	%rdi, %rax
00000000010300ec	movq	%rsi, %rdi
00000000010300ef	callq	runtime.gcWriteBarrier
00000000010300f4	jmp	0x103007e
00000000010300f6	movq	0x38(%rsp), %rbp
00000000010300fb	addq	$0x40, %rsp
00000000010300ff	retq
0000000001030100	leaq	runtime.argslice(%rip), %rdi
0000000001030107	movq	%rcx, %rax
000000000103010a	callq	runtime.gcWriteBarrier
000000000103010f	jmp	0x103007a
0000000001030114	callq	runtime.panicindex
0000000001030119	ud2
000000000103011b	callq	runtime.morestack_noctxt
0000000001030120	jmp	runtime.goargs
0000000001030125	int3
0000000001030126	int3
0000000001030127	int3
0000000001030128	int3
0000000001030129	int3
000000000103012a	int3
000000000103012b	int3
000000000103012c	int3
000000000103012d	int3
000000000103012e	int3
000000000103012f	int3
runtime.goenvs_unix:
0000000001030130	movq	%gs:0x30, %rcx
0000000001030139	cmpq	0x10(%rcx), %rsp
000000000103013d	jbe	0x103026d
0000000001030143	subq	$0x40, %rsp
0000000001030147	movq	%rbp, 0x38(%rsp)
000000000103014c	leaq	0x38(%rsp), %rbp
0000000001030151	xorl	%eax, %eax
0000000001030153	jmp	0x1030157
0000000001030155	incl	%eax
0000000001030157	movl	runtime.argc(%rip), %ecx
000000000103015d	leal	0x1(%rax,%rcx), %ecx
0000000001030161	movslq	%ecx, %rcx
0000000001030164	shlq	$0x3, %rcx
0000000001030168	addq	runtime.argv(%rip), %rcx
000000000103016f	cmpq	$0x0, (%rcx)
0000000001030173	jne	0x1030155
0000000001030175	movl	%eax, 0x30(%rsp)
0000000001030179	leaq	0x281a0(%rip), %rcx
0000000001030180	movq	%rcx, (%rsp)
0000000001030184	movslq	%eax, %rcx
0000000001030187	movq	%rcx, 0x8(%rsp)
000000000103018c	movq	%rcx, 0x10(%rsp)
0000000001030191	callq	runtime.makeslice
0000000001030196	movq	0x28(%rsp), %rax
000000000103019b	movq	0x20(%rsp), %rcx
00000000010301a0	movq	0x18(%rsp), %rdx
00000000010301a5	movq	%rcx, 0x886ec(%rip)
00000000010301ac	movq	%rax, 0x886ed(%rip)
00000000010301b3	cmpl	$0x0, 0xa4a76(%rip)
00000000010301ba	jne	0x1030252
00000000010301c0	movq	%rdx, runtime.envs(%rip)
00000000010301c7	xorl	%eax, %eax
00000000010301c9	jmp	0x10301ce
00000000010301cb	leal	0x1(%rdx), %eax
00000000010301ce	movl	0x30(%rsp), %ecx
00000000010301d2	cmpl	%ecx, %eax
00000000010301d4	jge	0x1030248
00000000010301d6	movl	%eax, 0x34(%rsp)
00000000010301da	movl	runtime.argc(%rip), %ecx
00000000010301e0	leal	0x1(%rcx,%rax), %ecx
00000000010301e4	movslq	%ecx, %rcx
00000000010301e7	shlq	$0x3, %rcx
00000000010301eb	addq	runtime.argv(%rip), %rcx
00000000010301f2	movq	(%rcx), %rcx
00000000010301f5	movq	%rcx, (%rsp)
00000000010301f9	callq	runtime.gostring
00000000010301fe	movq	runtime.envs(%rip), %rax
0000000001030205	movq	0x8868c(%rip), %rcx
000000000103020c	movl	0x34(%rsp), %edx
0000000001030210	movslq	%edx, %rbx
0000000001030213	movq	0x8(%rsp), %rsi
0000000001030218	movq	0x10(%rsp), %rdi
000000000103021d	cmpq	%rcx, %rbx
0000000001030220	jae	0x1030266
0000000001030222	shlq	$0x4, %rbx
0000000001030226	movq	%rdi, 0x8(%rax,%rbx)
000000000103022b	leaq	(%rax,%rbx), %rdi
000000000103022f	cmpl	$0x0, 0xa49fa(%rip)
0000000001030236	jne	0x103023e
0000000001030238	movq	%rsi, (%rax,%rbx)
000000000103023c	jmp	0x10301cb
000000000103023e	movq	%rsi, %rax
0000000001030241	callq	runtime.gcWriteBarrier
0000000001030246	jmp	0x10301cb
0000000001030248	movq	0x38(%rsp), %rbp
000000000103024d	addq	$0x40, %rsp
0000000001030251	retq
0000000001030252	leaq	runtime.envs(%rip), %rdi
0000000001030259	movq	%rdx, %rax
000000000103025c	callq	runtime.gcWriteBarrier
0000000001030261	jmp	0x10301c7
0000000001030266	callq	runtime.panicindex
000000000103026b	ud2
000000000103026d	callq	runtime.morestack_noctxt
0000000001030272	jmp	runtime.goenvs_unix
0000000001030277	int3
0000000001030278	int3
0000000001030279	int3
000000000103027a	int3
000000000103027b	int3
000000000103027c	int3
000000000103027d	int3
000000000103027e	int3
000000000103027f	int3
runtime.testAtomic64:
0000000001030280	movq	%gs:0x30, %rcx
0000000001030289	cmpq	0x10(%rcx), %rsp
000000000103028d	jbe	0x10304d2
0000000001030293	subq	$0x18, %rsp
0000000001030297	movq	%rbp, 0x10(%rsp)
000000000103029c	leaq	0x10(%rsp), %rbp
00000000010302a1	movq	$0x2a, 0xa495c(%rip)
00000000010302ac	movq	$0x0, 0xa4949(%rip)
00000000010302b7	xorl	%eax, %eax
00000000010302b9	leaq	runtime.test_z64(%rip), %rcx
00000000010302c0	movl	$0x1, %edx
00000000010302c5	lock
00000000010302c6	cmpxchgq	%rdx, (%rcx)
00000000010302ca	sete	%bl
00000000010302cd	testb	%bl, %bl
00000000010302cf	jne	0x10304b7
00000000010302d5	cmpq	$0x0, 0xa4923(%rip)
00000000010302dd	jne	0x103049c
00000000010302e3	movq	$0x2a, 0xa4912(%rip)
00000000010302ee	movl	$0x2a, %eax
00000000010302f3	lock
00000000010302f4	cmpxchgq	%rdx, (%rcx)
00000000010302f8	sete	%dl
00000000010302fb	testb	%dl, %dl
00000000010302fd	je	0x1030481
0000000001030303	cmpq	$0x2a, 0xa48f5(%rip)
000000000103030b	jne	0x1030466
0000000001030311	cmpq	$0x1, 0xa48ef(%rip)
0000000001030319	jne	0x1030466
000000000103031f	movq	runtime.test_z64(%rip), %rax
0000000001030326	cmpq	$0x1, %rax
000000000103032a	jne	0x103044b
0000000001030330	movabsq	$0x10000000001, %rax
000000000103033a	xchgq	%rax, (%rcx)
000000000103033d	movq	runtime.test_z64(%rip), %rax
0000000001030344	movabsq	$0x10000000001, %rdx
000000000103034e	cmpq	%rax, %rdx
0000000001030351	jne	0x1030430
0000000001030357	movabsq	$0x10000000001, %rax
0000000001030361	lock
0000000001030362	xaddq	%rax, (%rcx)
0000000001030366	movabsq	$0x10000000001, %rdx
0000000001030370	addq	%rdx, %rax
0000000001030373	movabsq	$0x20000000002, %rdx
000000000103037d	cmpq	%rax, %rdx
0000000001030380	jne	0x1030415
0000000001030386	movq	runtime.test_z64(%rip), %rax
000000000103038d	cmpq	%rdx, %rax
0000000001030390	jne	0x10303fa
0000000001030392	movabsq	$0x30000000003, %rax
000000000103039c	xchgq	%rax, (%rcx)
000000000103039f	cmpq	%rdx, %rax
00000000010303a2	jne	0x10303df
00000000010303a4	movq	runtime.test_z64(%rip), %rax
00000000010303ab	movabsq	$0x30000000003, %rcx
00000000010303b5	cmpq	%rax, %rcx
00000000010303b8	jne	0x10303c4
00000000010303ba	movq	0x10(%rsp), %rbp
00000000010303bf	addq	$0x18, %rsp
00000000010303c3	retq
00000000010303c4	leaq	0x3b115(%rip), %rax
00000000010303cb	movq	%rax, (%rsp)
00000000010303cf	movq	$0xd, 0x8(%rsp)
00000000010303d8	callq	runtime.throw
00000000010303dd	ud2
00000000010303df	leaq	0x3b0fa(%rip), %rax
00000000010303e6	movq	%rax, (%rsp)
00000000010303ea	movq	$0xd, 0x8(%rsp)
00000000010303f3	callq	runtime.throw
00000000010303f8	ud2
00000000010303fa	leaq	0x3b0d2(%rip), %rax
0000000001030401	movq	%rax, (%rsp)
0000000001030405	movq	$0xd, 0x8(%rsp)
000000000103040e	callq	runtime.throw
0000000001030413	ud2
0000000001030415	leaq	0x3b0b7(%rip), %rax
000000000103041c	movq	%rax, (%rsp)
0000000001030420	movq	$0xd, 0x8(%rsp)
0000000001030429	callq	runtime.throw
000000000103042e	ud2
0000000001030430	leaq	0x3b1f7(%rip), %rax
0000000001030437	movq	%rax, (%rsp)
000000000103043b	movq	$0xe, 0x8(%rsp)
0000000001030444	callq	runtime.throw
0000000001030449	ud2
000000000103044b	leaq	0x3b033(%rip), %rax
0000000001030452	movq	%rax, (%rsp)
0000000001030456	movq	$0xd, 0x8(%rsp)
000000000103045f	callq	runtime.throw
0000000001030464	ud2
0000000001030466	leaq	0x3ae9b(%rip), %rax
000000000103046d	movq	%rax, (%rsp)
0000000001030471	movq	$0xc, 0x8(%rsp)
000000000103047a	callq	runtime.throw
000000000103047f	ud2
0000000001030481	leaq	0x3ae80(%rip), %rax
0000000001030488	movq	%rax, (%rsp)
000000000103048c	movq	$0xc, 0x8(%rsp)
0000000001030495	callq	runtime.throw
000000000103049a	ud2
000000000103049c	leaq	0x3ae65(%rip), %rax
00000000010304a3	movq	%rax, (%rsp)
00000000010304a7	movq	$0xc, 0x8(%rsp)
00000000010304b0	callq	runtime.throw
00000000010304b5	ud2
00000000010304b7	leaq	0x3ae4a(%rip), %rax
00000000010304be	movq	%rax, (%rsp)
00000000010304c2	movq	$0xc, 0x8(%rsp)
00000000010304cb	callq	runtime.throw
00000000010304d0	ud2
00000000010304d2	callq	runtime.morestack_noctxt
00000000010304d7	jmp	runtime.testAtomic64
00000000010304dc	int3
00000000010304dd	int3
00000000010304de	int3
00000000010304df	int3
runtime.check:
00000000010304e0	movq	%gs:0x30, %rcx
00000000010304e9	cmpq	0x10(%rcx), %rsp
00000000010304ed	jbe	0x1030950
00000000010304f3	subq	$0x50, %rsp
00000000010304f7	movq	%rbp, 0x48(%rsp)
00000000010304fc	leaq	0x48(%rsp), %rbp
0000000001030501	movl	$0x0, 0x2c(%rsp)
0000000001030509	xorps	%xmm0, %xmm0
000000000103050c	movss	%xmm0, 0x28(%rsp)
0000000001030512	xorps	%xmm0, %xmm0
0000000001030515	movsd	%xmm0, 0x30(%rsp)
000000000103051b	movq	$0x0, 0x40(%rsp)
0000000001030524	movl	$0x0, 0x24(%rsp)
000000000103052c	movabsq	$0xb3a4b57ce31, %rax
0000000001030536	movq	%rax, (%rsp)
000000000103053a	movl	$0x3b9aca00, 0x8(%rsp)
0000000001030542	leaq	0x2c(%rsp), %rax
0000000001030547	movq	%rax, 0x10(%rsp)
000000000103054c	callq	runtime.timediv
0000000001030551	cmpl	$0x3039, 0x18(%rsp)
0000000001030559	jne	0x1030935
000000000103055f	cmpl	$0xd431, 0x2c(%rsp)
0000000001030567	jne	0x1030935
000000000103056d	movl	$0x0, 0x20(%rsp)
0000000001030575	movl	$0x1, 0x20(%rsp)
000000000103057d	movl	$0x1, %eax
0000000001030582	leaq	0x20(%rsp), %rcx
0000000001030587	movl	$0x2, %edx
000000000103058c	lock
000000000103058d	cmpxchgl	%edx, (%rcx)
0000000001030590	sete	%dl
0000000001030593	testb	%dl, %dl
0000000001030595	je	0x103091a
000000000103059b	cmpl	$0x2, 0x20(%rsp)
00000000010305a0	jne	0x10308ff
00000000010305a6	movl	$0x4, 0x20(%rsp)
00000000010305ae	movl	$0x5, %eax
00000000010305b3	movl	$0x6, %edx
00000000010305b8	lock
00000000010305b9	cmpxchgl	%edx, (%rcx)
00000000010305bc	sete	%dl
00000000010305bf	testb	%dl, %dl
00000000010305c1	jne	0x10308e4
00000000010305c7	cmpl	$0x4, 0x20(%rsp)
00000000010305cc	jne	0x10308c9
00000000010305d2	movl	$0xffffffff, 0x20(%rsp)
00000000010305da	movl	$0xffffffff, %eax
00000000010305df	movl	$0xfffffffe, %edx
00000000010305e4	lock
00000000010305e5	cmpxchgl	%edx, (%rcx)
00000000010305e8	sete	%cl
00000000010305eb	testb	%cl, %cl
00000000010305ed	je	0x10308ae
00000000010305f3	cmpl	$-0x2, 0x20(%rsp)
00000000010305f8	jne	0x1030893
00000000010305fe	movl	$0xfedcb123, %eax
0000000001030603	movq	%rax, 0x40(%rsp)
0000000001030608	shlq	$0xa, %rax
000000000103060c	movq	%rax, 0x40(%rsp)
0000000001030611	leaq	0x40(%rsp), %rax
0000000001030616	movq	%rax, (%rsp)
000000000103061a	xorps	%xmm0, %xmm0
000000000103061d	movups	%xmm0, 0x8(%rsp)
0000000001030622	callq	runtime.casp
0000000001030627	leaq	0x18(%rsp), %rax
000000000103062c	cmpb	$0x0, (%rax)
000000000103062f	jne	0x1030878
0000000001030635	movq	0x40(%rsp), %rax
000000000103063a	leaq	0x40(%rsp), %rcx
000000000103063f	movq	%rcx, (%rsp)
0000000001030643	movq	0x40(%rsp), %rcx
0000000001030648	movq	%rcx, 0x8(%rsp)
000000000103064d	incq	%rax
0000000001030650	movq	%rax, 0x38(%rsp)
0000000001030655	movq	%rax, 0x10(%rsp)
000000000103065a	callq	runtime.casp
000000000103065f	leaq	0x18(%rsp), %rax
0000000001030664	cmpb	$0x0, (%rax)
0000000001030667	je	0x103085d
000000000103066d	movq	0x40(%rsp), %rax
0000000001030672	movq	0x38(%rsp), %rcx
0000000001030677	cmpq	%rcx, %rax
000000000103067a	jne	0x1030842
0000000001030680	movl	$0x0, 0x24(%rsp)
0000000001030688	movl	$0x1010101, 0x24(%rsp)
0000000001030690	movl	$0xfffffff0, %eax
0000000001030695	leaq	0x25(%rsp), %rcx
000000000103069a	lock
000000000103069b	orb	%al, (%rcx)
000000000103069d	cmpb	$0x1, 0x24(%rsp)
00000000010306a2	jne	0x1030827
00000000010306a8	cmpb	$-0xf, 0x25(%rsp)
00000000010306ad	jne	0x1030827
00000000010306b3	cmpb	$0x1, 0x26(%rsp)
00000000010306b8	jne	0x1030827
00000000010306be	cmpb	$0x1, 0x27(%rsp)
00000000010306c3	jne	0x1030827
00000000010306c9	movl	$0x0, 0x24(%rsp)
00000000010306d1	movl	$0xffffffff, 0x24(%rsp)
00000000010306d9	movl	$0x1, %eax
00000000010306de	lock
00000000010306df	andb	%al, (%rcx)
00000000010306e1	cmpb	$-0x1, 0x24(%rsp)
00000000010306e6	jne	0x103080c
00000000010306ec	cmpb	$0x1, 0x25(%rsp)
00000000010306f1	jne	0x103080c
00000000010306f7	cmpb	$-0x1, 0x26(%rsp)
00000000010306fc	jne	0x103080c
0000000001030702	cmpb	$-0x1, 0x27(%rsp)
0000000001030707	jne	0x103080c
000000000103070d	movq	$-0x1, 0x30(%rsp)
0000000001030716	movsd	0x30(%rsp), %xmm0
000000000103071c	movsd	($f64.fffffffffffffffe)(%rip), %xmm1
0000000001030724	ucomisd	%xmm1, %xmm0
0000000001030728	jne	0x1030730
000000000103072a	jnp	0x10307f1
0000000001030730	jne	0x1030738
0000000001030732	jnp	0x10307d6
0000000001030738	movl	$0xffffffff, 0x28(%rsp)
0000000001030740	movss	0x28(%rsp), %xmm0
0000000001030746	movss	runtime.egcdata(%rip), %xmm1
000000000103074e	ucomiss	%xmm0, %xmm1
0000000001030751	jne	0x1030755
0000000001030753	jnp	0x10307bb
0000000001030755	callq	runtime.testAtomic64
000000000103075a	movl	$0x800, (%rsp)
0000000001030761	callq	runtime.round2
0000000001030766	cmpl	$0x800, 0x8(%rsp)
000000000103076e	jne	0x10307a0
0000000001030770	callq	runtime.checkASM
0000000001030775	cmpb	$0x0, (%rsp)
0000000001030779	je	0x1030785
000000000103077b	movq	0x48(%rsp), %rbp
0000000001030780	addq	$0x50, %rsp
0000000001030784	retq
0000000001030785	leaq	0x3b971(%rip), %rax
000000000103078c	movq	%rax, (%rsp)
0000000001030790	movq	$0x16, 0x8(%rsp)
0000000001030799	callq	runtime.throw
000000000103079e	ud2
00000000010307a0	leaq	0x3c510(%rip), %rax
00000000010307a7	movq	%rax, (%rsp)
00000000010307ab	movq	$0x1c, 0x8(%rsp)
00000000010307b4	callq	runtime.throw
00000000010307b9	ud2
00000000010307bb	leaq	0x3a9e6(%rip), %rax
00000000010307c2	movq	%rax, (%rsp)
00000000010307c6	movq	$0xb, 0x8(%rsp)
00000000010307cf	callq	runtime.throw
00000000010307d4	ud2
00000000010307d6	leaq	0x3a9e1(%rip), %rax
00000000010307dd	movq	%rax, (%rsp)
00000000010307e1	movq	$0xb, 0x8(%rsp)
00000000010307ea	callq	runtime.throw
00000000010307ef	ud2
00000000010307f1	leaq	0x3a9bb(%rip), %rax
00000000010307f8	movq	%rax, (%rsp)
00000000010307fc	movq	$0xb, 0x8(%rsp)
0000000001030805	callq	runtime.throw
000000000103080a	ud2
000000000103080c	leaq	0x3a83f(%rip), %rax
0000000001030813	movq	%rax, (%rsp)
0000000001030817	movq	$0xa, 0x8(%rsp)
0000000001030820	callq	runtime.throw
0000000001030825	ud2
0000000001030827	leaq	0x3a71f(%rip), %rax
000000000103082e	movq	%rax, (%rsp)
0000000001030832	movq	$0x9, 0x8(%rsp)
000000000103083b	callq	runtime.throw
0000000001030840	ud2
0000000001030842	leaq	0x3a3b1(%rip), %rax
0000000001030849	movq	%rax, (%rsp)
000000000103084d	movq	$0x5, 0x8(%rsp)
0000000001030856	callq	runtime.throw
000000000103085b	ud2
000000000103085d	leaq	0x3a391(%rip), %rax
0000000001030864	movq	%rax, (%rsp)
0000000001030868	movq	$0x5, 0x8(%rsp)
0000000001030871	callq	runtime.throw
0000000001030876	ud2
0000000001030878	leaq	0x3a371(%rip), %rax
000000000103087f	movq	%rax, (%rsp)
0000000001030883	movq	$0x5, 0x8(%rsp)
000000000103088c	callq	runtime.throw
0000000001030891	ud2
0000000001030893	leaq	0x3a2c5(%rip), %rax
000000000103089a	movq	%rax, (%rsp)
000000000103089e	movq	$0x4, 0x8(%rsp)
00000000010308a7	callq	runtime.throw
00000000010308ac	ud2
00000000010308ae	leaq	0x3a2a6(%rip), %rax
00000000010308b5	movq	%rax, (%rsp)
00000000010308b9	movq	$0x4, 0x8(%rsp)
00000000010308c2	callq	runtime.throw
00000000010308c7	ud2
00000000010308c9	leaq	0x3a287(%rip), %rax
00000000010308d0	movq	%rax, (%rsp)
00000000010308d4	movq	$0x4, 0x8(%rsp)
00000000010308dd	callq	runtime.throw
00000000010308e2	ud2
00000000010308e4	leaq	0x3a268(%rip), %rax
00000000010308eb	movq	%rax, (%rsp)
00000000010308ef	movq	$0x4, 0x8(%rsp)
00000000010308f8	callq	runtime.throw
00000000010308fd	ud2
00000000010308ff	leaq	0x3a249(%rip), %rax
0000000001030906	movq	%rax, (%rsp)
000000000103090a	movq	$0x4, 0x8(%rsp)
0000000001030913	callq	runtime.throw
0000000001030918	ud2
000000000103091a	leaq	0x3a22a(%rip), %rax
0000000001030921	movq	%rax, (%rsp)
0000000001030925	movq	$0x4, 0x8(%rsp)
000000000103092e	callq	runtime.throw
0000000001030933	ud2
0000000001030935	leaq	0x3a84b(%rip), %rax
000000000103093c	movq	%rax, (%rsp)
0000000001030940	movq	$0xb, 0x8(%rsp)
0000000001030949	callq	runtime.throw
000000000103094e	ud2
0000000001030950	callq	runtime.morestack_noctxt
0000000001030955	jmp	runtime.check
000000000103095a	int3
000000000103095b	int3
000000000103095c	int3
000000000103095d	int3
000000000103095e	int3
000000000103095f	int3
runtime.parsedebugvars:
0000000001030960	movq	%gs:0x30, %rcx
0000000001030969	leaq	-0x8(%rsp), %rax
000000000103096e	cmpq	0x10(%rcx), %rax
0000000001030972	jbe	0x1030cae
0000000001030978	subq	$0x88, %rsp
000000000103097f	movq	%rbp, 0x80(%rsp)
0000000001030987	leaq	0x80(%rsp), %rbp
000000000103098f	movl	$0x1, runtime.debug(%rip)
0000000001030999	movl	$0x1, 0xa43a1(%rip)
00000000010309a3	leaq	0x3a341(%rip), %rax
00000000010309aa	movq	%rax, (%rsp)
00000000010309ae	movq	$0x7, 0x8(%rsp)
00000000010309b7	callq	runtime.gogetenv
00000000010309bc	movq	0x18(%rsp), %rax
00000000010309c1	movq	0x10(%rsp), %rcx
00000000010309c6	jmp	0x10309d2
00000000010309c8	movq	0x28(%rsp), %rax
00000000010309cd	movq	0x60(%rsp), %rcx
00000000010309d2	testq	%rax, %rax
00000000010309d5	je	0x1030c53
00000000010309db	movq	%rax, 0x38(%rsp)
00000000010309e0	movq	%rcx, 0x68(%rsp)
00000000010309e5	movq	%rcx, (%rsp)
00000000010309e9	movq	%rax, 0x8(%rsp)
00000000010309ee	leaq	0x3a08f(%rip), %rdx
00000000010309f5	movq	%rdx, 0x10(%rsp)
00000000010309fa	movq	$0x1, 0x18(%rsp)
0000000001030a03	callq	runtime.index
0000000001030a08	movq	0x20(%rsp), %rax
0000000001030a0d	testq	%rax, %rax
0000000001030a10	jge	0x1030c15
0000000001030a16	xorl	%eax, %eax
0000000001030a18	xorl	%ecx, %ecx
0000000001030a1a	movq	0x38(%rsp), %rdx
0000000001030a1f	movq	%rax, 0x60(%rsp)
0000000001030a24	movq	%rcx, 0x28(%rsp)
0000000001030a29	movq	%rdx, 0x38(%rsp)
0000000001030a2e	movq	0x68(%rsp), %rbx
0000000001030a33	movq	%rbx, (%rsp)
0000000001030a37	movq	%rdx, 0x8(%rsp)
0000000001030a3c	leaq	0x3a047(%rip), %rsi
0000000001030a43	movq	%rsi, 0x10(%rsp)
0000000001030a48	movq	$0x1, 0x18(%rsp)
0000000001030a51	callq	runtime.index
0000000001030a56	movq	0x20(%rsp), %rax
0000000001030a5b	testq	%rax, %rax
0000000001030a5e	jl	0x10309c8
0000000001030a64	movq	0x38(%rsp), %rcx
0000000001030a69	cmpq	%rcx, %rax
0000000001030a6c	ja	0x1030ca0
0000000001030a72	leaq	0x1(%rax), %rdx
0000000001030a76	cmpq	%rcx, %rdx
0000000001030a79	ja	0x1030ca0
0000000001030a7f	subq	%rdx, %rcx
0000000001030a82	movq	%rcx, %rbx
0000000001030a85	negq	%rcx
0000000001030a88	sarq	$0x3f, %rcx
0000000001030a8c	andq	%rdx, %rcx
0000000001030a8f	movq	0x68(%rsp), %rdx
0000000001030a94	addq	%rdx, %rcx
0000000001030a97	cmpq	$0xe, %rax
0000000001030a9b	jne	0x1030c06
0000000001030aa1	movq	(%rdx), %rsi
0000000001030aa4	movabsq	$0x69666f72706d656d, %rdi
0000000001030aae	cmpq	%rdi, %rsi
0000000001030ab1	jne	0x1030ac8
0000000001030ab3	cmpl	$0x6172656c, 0x8(%rdx)
0000000001030aba	jne	0x1030ac8
0000000001030abc	cmpw	$0x6574, 0xc(%rdx)
0000000001030ac2	je	0x1030bd3
0000000001030ac8	movq	0x863e9(%rip), %rsi
0000000001030acf	movq	runtime.dbgvars(%rip), %r8
0000000001030ad6	testq	%rsi, %rsi
0000000001030ad9	jle	0x10309c8
0000000001030adf	movq	%rax, 0x30(%rsp)
0000000001030ae4	movq	%rbx, 0x50(%rsp)
0000000001030ae9	movq	%rcx, 0x58(%rsp)
0000000001030aee	movq	%rsi, 0x48(%rsp)
0000000001030af3	xorl	%r9d, %r9d
0000000001030af6	jmp	0x1030afc
0000000001030af8	addq	$0x18, %r8
0000000001030afc	movq	0x8(%r8), %r10
0000000001030b00	movq	0x10(%r8), %r11
0000000001030b04	movq	(%r8), %r12
0000000001030b07	cmpq	%rax, %r10
0000000001030b0a	je	0x1030b19
0000000001030b0c	incq	%r9
0000000001030b0f	cmpq	%rsi, %r9
0000000001030b12	jl	0x1030af8
0000000001030b14	jmp	0x10309c8
0000000001030b19	movq	%r8, 0x78(%rsp)
0000000001030b1e	movq	%r9, 0x40(%rsp)
0000000001030b23	movq	%r11, 0x70(%rsp)
0000000001030b28	movq	%r12, (%rsp)
0000000001030b2c	movq	%rdx, 0x8(%rsp)
0000000001030b31	movq	%r10, 0x10(%rsp)
0000000001030b36	callq	runtime.memequal
0000000001030b3b	leaq	0x18(%rsp), %rax
0000000001030b40	cmpb	$0x0, (%rax)
0000000001030b43	jne	0x1030b74
0000000001030b45	movq	0x30(%rsp), %rax
0000000001030b4a	movq	0x58(%rsp), %rcx
0000000001030b4f	movq	0x68(%rsp), %rdx
0000000001030b54	movq	0x50(%rsp), %rbx
0000000001030b59	movq	0x48(%rsp), %rsi
0000000001030b5e	movabsq	$0x69666f72706d656d, %rdi
0000000001030b68	movq	0x78(%rsp), %r8
0000000001030b6d	movq	0x40(%rsp), %r9
0000000001030b72	jmp	0x1030b0c
0000000001030b74	movq	0x58(%rsp), %rax
0000000001030b79	movq	%rax, (%rsp)
0000000001030b7d	movq	0x50(%rsp), %rcx
0000000001030b82	movq	%rcx, 0x8(%rsp)
0000000001030b87	callq	runtime.atoi32
0000000001030b8c	movl	0x10(%rsp), %eax
0000000001030b90	leaq	0x14(%rsp), %rcx
0000000001030b95	cmpb	$0x0, (%rcx)
0000000001030b98	je	0x1030ba1
0000000001030b9a	movq	0x70(%rsp), %rdx
0000000001030b9f	movl	%eax, (%rdx)
0000000001030ba1	movq	0x30(%rsp), %rax
0000000001030ba6	movq	0x58(%rsp), %rcx
0000000001030bab	movq	0x68(%rsp), %rdx
0000000001030bb0	movq	0x50(%rsp), %rbx
0000000001030bb5	movq	0x48(%rsp), %rsi
0000000001030bba	movabsq	$0x69666f72706d656d, %rdi
0000000001030bc4	movq	0x78(%rsp), %r8
0000000001030bc9	movq	0x40(%rsp), %r9
0000000001030bce	jmp	0x1030b0c
0000000001030bd3	movq	%rcx, (%rsp)
0000000001030bd7	movq	%rbx, 0x8(%rsp)
0000000001030bdc	callq	runtime.atoi
0000000001030be1	movq	0x10(%rsp), %rax
0000000001030be6	leaq	0x18(%rsp), %rcx
0000000001030beb	cmpb	$0x0, (%rcx)
0000000001030bee	je	0x1030bf7
0000000001030bf0	movq	%rax, runtime.MemProfileRate(%rip)
0000000001030bf7	movabsq	$0x69666f72706d656d, %rdi
0000000001030c01	jmp	0x10309c8
0000000001030c06	movabsq	$0x69666f72706d656d, %rdi
0000000001030c10	jmp	0x1030ac8
0000000001030c15	movq	0x38(%rsp), %rcx
0000000001030c1a	cmpq	%rcx, %rax
0000000001030c1d	ja	0x1030ca7
0000000001030c23	leaq	0x1(%rax), %rdx
0000000001030c27	cmpq	%rcx, %rdx
0000000001030c2a	ja	0x1030ca7
0000000001030c2c	subq	%rdx, %rcx
0000000001030c2f	movq	%rcx, %rbx
0000000001030c32	negq	%rcx
0000000001030c35	sarq	$0x3f, %rcx
0000000001030c39	andq	%rdx, %rcx
0000000001030c3c	movq	0x68(%rsp), %rsi
0000000001030c41	leaq	(%rsi,%rcx), %rdi
0000000001030c45	movq	%rbx, %rcx
0000000001030c48	movq	%rax, %rdx
0000000001030c4b	movq	%rdi, %rax
0000000001030c4e	jmp	0x1030a1f
0000000001030c53	leaq	0x3a517(%rip), %rax
0000000001030c5a	movq	%rax, (%rsp)
0000000001030c5e	movq	$0xb, 0x8(%rsp)
0000000001030c67	callq	runtime.gogetenv
0000000001030c6c	movq	0x18(%rsp), %rax
0000000001030c71	movq	0x10(%rsp), %rcx
0000000001030c76	movq	%rcx, (%rsp)
0000000001030c7a	movq	%rax, 0x8(%rsp)
0000000001030c7f	callq	"runtime/debug.SetTraceback"
0000000001030c84	movl	runtime.traceback_cache(%rip), %eax
0000000001030c8a	movl	%eax, runtime.traceback_env(%rip)
0000000001030c90	movq	0x80(%rsp), %rbp
0000000001030c98	addq	$0x88, %rsp
0000000001030c9f	retq
0000000001030ca0	callq	runtime.panicslice
0000000001030ca5	ud2
0000000001030ca7	callq	runtime.panicslice
0000000001030cac	ud2
0000000001030cae	callq	runtime.morestack_noctxt
0000000001030cb3	jmp	runtime.parsedebugvars
0000000001030cb8	int3
0000000001030cb9	int3
0000000001030cba	int3
0000000001030cbb	int3
0000000001030cbc	int3
0000000001030cbd	int3
0000000001030cbe	int3
0000000001030cbf	int3
runtime/debug.SetTraceback:
0000000001030cc0	movq	%gs:0x30, %rcx
0000000001030cc9	cmpq	0x10(%rcx), %rsp
0000000001030ccd	jbe	0x1030e71
0000000001030cd3	subq	$0x30, %rsp
0000000001030cd7	movq	%rbp, 0x28(%rsp)
0000000001030cdc	leaq	0x28(%rsp), %rbp
0000000001030ce1	movq	0x40(%rsp), %rax
0000000001030ce6	cmpq	$0x4, %rax
0000000001030cea	jge	0x1030db5
0000000001030cf0	testq	%rax, %rax
0000000001030cf3	jne	0x1030d30
0000000001030cf5	movl	$0x4, %eax
0000000001030cfa	leaq	runtime.islibrary(%rip), %rcx
0000000001030d01	cmpb	$0x0, (%rcx)
0000000001030d04	je	0x1030d22
0000000001030d06	orl	$0x1, %eax
0000000001030d09	orl	runtime.traceback_env(%rip), %eax
0000000001030d0f	leaq	runtime.traceback_cache(%rip), %rcx
0000000001030d16	xchgl	%eax, (%rcx)
0000000001030d18	movq	0x28(%rsp), %rbp
0000000001030d1d	addq	$0x30, %rsp
0000000001030d21	retq
0000000001030d22	leaq	runtime.isarchive(%rip), %rcx
0000000001030d29	cmpb	$0x0, (%rcx)
0000000001030d2c	jne	0x1030d06
0000000001030d2e	jmp	0x1030d09
0000000001030d30	cmpq	$0x3, %rax
0000000001030d34	jne	0x1030daa
0000000001030d36	movq	0x38(%rsp), %rcx
0000000001030d3b	cmpw	$0x6c61, (%rcx)
0000000001030d40	jne	0x1030da4
0000000001030d42	cmpb	$0x6c, 0x2(%rcx)
0000000001030d46	jne	0x1030d4f
0000000001030d48	movl	$0x6, %eax
0000000001030d4d	jmp	0x1030cfa
0000000001030d4f	cmpq	$0x4, %rax
0000000001030d53	jne	0x1030d61
0000000001030d55	cmpl	$0x656e6f6e, (%rcx)
0000000001030d5b	jne	0x1030d61
0000000001030d5d	xorl	%eax, %eax
0000000001030d5f	jmp	0x1030cfa
0000000001030d61	movq	%rcx, (%rsp)
0000000001030d65	movq	%rax, 0x8(%rsp)
0000000001030d6a	callq	runtime.atoi
0000000001030d6f	movq	0x10(%rsp), %rax
0000000001030d74	leaq	0x18(%rsp), %rcx
0000000001030d79	cmpb	$0x0, (%rcx)
0000000001030d7c	je	0x1030d9a
0000000001030d7e	movl	%eax, %ecx
0000000001030d80	cmpq	%rax, %rcx
0000000001030d83	jne	0x1030d90
0000000001030d85	shll	$0x2, %eax
0000000001030d88	orl	$0x2, %eax
0000000001030d8b	jmp	0x1030cfa
0000000001030d90	movl	$0x2, %eax
0000000001030d95	jmp	0x1030cfa
0000000001030d9a	movl	$0x2, %eax
0000000001030d9f	jmp	0x1030cfa
0000000001030da4	cmpq	$0x4, %rax
0000000001030da8	jmp	0x1030d53
0000000001030daa	cmpq	$0x4, %rax
0000000001030dae	movq	0x38(%rsp), %rcx
0000000001030db3	jmp	0x1030d53
0000000001030db5	je	0x1030e2d
0000000001030db7	cmpq	$0x5, %rax
0000000001030dbb	jne	0x1030e26
0000000001030dbd	movq	0x38(%rsp), %rcx
0000000001030dc2	cmpl	$0x73617263, (%rcx)
0000000001030dc8	jne	0x1030dda
0000000001030dca	cmpb	$0x68, 0x4(%rcx)
0000000001030dce	jne	0x1030dda
0000000001030dd0	movl	$0xb, %eax
0000000001030dd5	jmp	0x1030cfa
0000000001030dda	cmpq	$0x6, %rax
0000000001030dde	jne	0x1030df8
0000000001030de0	cmpl	$0x676e6973, (%rcx)
0000000001030de6	jne	0x1030e20
0000000001030de8	cmpw	$0x656c, 0x4(%rcx)
0000000001030dee	je	0x1030cf5
0000000001030df4	cmpq	$0x6, %rax
0000000001030df8	jne	0x1030d61
0000000001030dfe	cmpl	$0x74737973, (%rcx)
0000000001030e04	jne	0x1030d61
0000000001030e0a	cmpw	$0x6d65, 0x4(%rcx)
0000000001030e10	jne	0x1030d61
0000000001030e16	movl	$0xa, %eax
0000000001030e1b	jmp	0x1030cfa
0000000001030e20	cmpq	$0x6, %rax
0000000001030e24	jmp	0x1030df8
0000000001030e26	movq	0x38(%rsp), %rcx
0000000001030e2b	jmp	0x1030dda
0000000001030e2d	movq	0x38(%rsp), %rcx
0000000001030e32	movq	%rcx, (%rsp)
0000000001030e36	movq	%rax, 0x8(%rsp)
0000000001030e3b	leaq	0x39d2d(%rip), %rdx
0000000001030e42	movq	%rdx, 0x10(%rsp)
0000000001030e47	movq	$0x4, 0x18(%rsp)
0000000001030e50	callq	runtime.cmpstring
0000000001030e55	cmpq	$0x0, 0x20(%rsp)
0000000001030e5b	jg	0x1030e67
0000000001030e5d	movq	0x40(%rsp), %rax
0000000001030e62	jmp	0x1030cf0
0000000001030e67	movq	0x40(%rsp), %rax
0000000001030e6c	jmp	0x1030db7
0000000001030e71	callq	runtime.morestack_noctxt
0000000001030e76	jmp	"runtime/debug.SetTraceback"
0000000001030e7b	int3
0000000001030e7c	int3
0000000001030e7d	int3
0000000001030e7e	int3
0000000001030e7f	int3
runtime.timediv:
0000000001030e80	movl	0x10(%rsp), %eax
0000000001030e84	movq	0x8(%rsp), %rdx
0000000001030e89	movl	$0x1e, %ecx
0000000001030e8e	xorl	%ebx, %ebx
0000000001030e90	jmp	0x1030e95
0000000001030e92	decq	%rcx
0000000001030e95	testq	%rcx, %rcx
0000000001030e98	jl	0x1030eb3
0000000001030e9a	movslq	%eax, %rsi
0000000001030e9d	shlq	%cl, %rsi
0000000001030ea0	cmpq	%rsi, %rdx
0000000001030ea3	jl	0x1030e92
0000000001030ea5	subq	%rsi, %rdx
0000000001030ea8	movl	$0x1, %esi
0000000001030ead	shll	%cl, %esi
0000000001030eaf	addl	%esi, %ebx
0000000001030eb1	jmp	0x1030e92
0000000001030eb3	movslq	%eax, %rax
0000000001030eb6	cmpq	%rax, %rdx
0000000001030eb9	jl	0x1030ed4
0000000001030ebb	movq	0x18(%rsp), %rax
0000000001030ec0	testq	%rax, %rax
0000000001030ec3	je	0x1030ecb
0000000001030ec5	movl	$0x0, (%rax)
0000000001030ecb	movl	$0x7fffffff, 0x20(%rsp)
0000000001030ed3	retq
0000000001030ed4	movq	0x18(%rsp), %rax
0000000001030ed9	testq	%rax, %rax
0000000001030edc	je	0x1030ee0
0000000001030ede	movl	%edx, (%rax)
0000000001030ee0	movl	%ebx, 0x20(%rsp)
0000000001030ee4	retq
0000000001030ee5	int3
0000000001030ee6	int3
0000000001030ee7	int3
0000000001030ee8	int3
0000000001030ee9	int3
0000000001030eea	int3
0000000001030eeb	int3
0000000001030eec	int3
0000000001030eed	int3
0000000001030eee	int3
0000000001030eef	int3
runtime.extendRandom:
0000000001030ef0	movq	%gs:0x30, %rcx
0000000001030ef9	cmpq	0x10(%rcx), %rsp
0000000001030efd	jbe	0x1030fc8
0000000001030f03	subq	$0x30, %rsp
0000000001030f07	movq	%rbp, 0x28(%rsp)
0000000001030f0c	leaq	0x28(%rsp), %rbp
0000000001030f11	movq	0x50(%rsp), %rax
0000000001030f16	testq	%rax, %rax
0000000001030f19	movl	$0x0, %ecx
0000000001030f1e	cmovlq	%rcx, %rax
0000000001030f22	jmp	0x1030f43
0000000001030f24	movb	%al, (%rdx,%rbx)
0000000001030f27	incq	%rsi
0000000001030f2a	incq	%rbx
0000000001030f2d	shrq	$0x8, %rax
0000000001030f31	cmpq	$0x8, %rsi
0000000001030f35	jge	0x1030f40
0000000001030f37	cmpq	%rcx, %rbx
0000000001030f3a	jge	0x1030f40
0000000001030f3c	jb	0x1030f24
0000000001030f3e	jmp	0x1030fba
0000000001030f40	movq	%rbx, %rax
0000000001030f43	movq	0x40(%rsp), %rcx
0000000001030f48	cmpq	%rcx, %rax
0000000001030f4b	jge	0x1030fb0
0000000001030f4d	movq	%rax, 0x20(%rsp)
0000000001030f52	callq	runtime.nanotime
0000000001030f57	movq	0x20(%rsp), %rax
0000000001030f5c	cmpq	$0x10, %rax
0000000001030f60	movl	$0x10, %ecx
0000000001030f65	movq	%rax, %rdx
0000000001030f68	cmovgq	%rcx, %rax
0000000001030f6c	subq	%rax, %rdx
0000000001030f6f	movq	(%rsp), %rsi
0000000001030f73	movq	0x40(%rsp), %rdi
0000000001030f78	cmpq	%rdi, %rdx
0000000001030f7b	jae	0x1030fc1
0000000001030f7d	movq	0x38(%rsp), %rcx
0000000001030f82	addq	%rcx, %rdx
0000000001030f85	movq	%rdx, (%rsp)
0000000001030f89	movq	%rsi, 0x8(%rsp)
0000000001030f8e	movq	%rax, 0x10(%rsp)
0000000001030f93	callq	runtime.memhash
0000000001030f98	movq	0x18(%rsp), %rax
0000000001030f9d	movq	0x40(%rsp), %rcx
0000000001030fa2	movq	0x38(%rsp), %rdx
0000000001030fa7	movq	0x20(%rsp), %rbx
0000000001030fac	xorl	%esi, %esi
0000000001030fae	jmp	0x1030f31
0000000001030fb0	movq	0x28(%rsp), %rbp
0000000001030fb5	addq	$0x30, %rsp
0000000001030fb9	retq
0000000001030fba	callq	runtime.panicindex
0000000001030fbf	ud2
0000000001030fc1	callq	runtime.panicindex
0000000001030fc6	ud2
0000000001030fc8	callq	runtime.morestack_noctxt
0000000001030fcd	jmp	runtime.extendRandom
0000000001030fd2	int3
0000000001030fd3	int3
0000000001030fd4	int3
0000000001030fd5	int3
0000000001030fd6	int3
0000000001030fd7	int3
0000000001030fd8	int3
0000000001030fd9	int3
0000000001030fda	int3
0000000001030fdb	int3
0000000001030fdc	int3
0000000001030fdd	int3
0000000001030fde	int3
0000000001030fdf	int3
runtime.waitReason.String:
0000000001030fe0	subq	$0x8, %rsp
0000000001030fe4	movq	%rbp, (%rsp)
0000000001030fe8	leaq	(%rsp), %rbp
0000000001030fec	movzbl	0x10(%rsp), %eax
0000000001030ff1	cmpb	$0x18, %al
0000000001030ff4	jae	0x1031026
0000000001030ff6	movzbl	%al, %eax
0000000001030ff9	cmpq	$0x18, %rax
0000000001030ffd	jae	0x1031044
0000000001030fff	shlq	$0x4, %rax
0000000001031003	leaq	runtime.waitReasonStrings(%rip), %rcx
000000000103100a	movq	0x8(%rcx,%rax), %rdx
000000000103100f	movq	(%rcx,%rax), %rax
0000000001031013	movq	%rax, 0x18(%rsp)
0000000001031018	movq	%rdx, 0x20(%rsp)
000000000103101d	movq	(%rsp), %rbp
0000000001031021	addq	$0x8, %rsp
0000000001031025	retq
0000000001031026	leaq	0x3acd4(%rip), %rax
000000000103102d	movq	%rax, 0x18(%rsp)
0000000001031032	movq	$0x13, 0x20(%rsp)
000000000103103b	movq	(%rsp), %rbp
000000000103103f	addq	$0x8, %rsp
0000000001031043	retq
0000000001031044	callq	runtime.panicindex
0000000001031049	ud2
000000000103104b	int3
000000000103104c	int3
000000000103104d	int3
000000000103104e	int3
000000000103104f	int3
runtime.(*rwmutex).rlock:
0000000001031050	movq	%gs:0x30, %rcx
0000000001031059	cmpq	0x10(%rcx), %rsp
000000000103105d	jbe	0x10310ca
000000000103105f	subq	$0x20, %rsp
0000000001031063	movq	%rbp, 0x18(%rsp)
0000000001031068	leaq	0x18(%rsp), %rbp
000000000103106d	movq	%gs:0x30, %rax
0000000001031076	movq	0x30(%rax), %rcx
000000000103107a	incl	0x100(%rcx)
0000000001031080	testb	%al, (%rax)
0000000001031082	movl	$0x1, %eax
0000000001031087	movq	0x28(%rsp), %rcx
000000000103108c	lock
000000000103108d	xaddl	%eax, 0x28(%rcx)
0000000001031091	incl	%eax
0000000001031093	testl	%eax, %eax
0000000001031095	jl	0x10310a1
0000000001031097	movq	0x18(%rsp), %rbp
000000000103109c	addq	$0x20, %rsp
00000000010310a0	retq
00000000010310a1	xorps	%xmm0, %xmm0
00000000010310a4	movups	%xmm0, 0x8(%rsp)
00000000010310a9	leaq	"runtime.(*rwmutex).rlock.func1"(%rip), %rax
00000000010310b0	movq	%rax, 0x8(%rsp)
00000000010310b5	movq	%rcx, 0x10(%rsp)
00000000010310ba	leaq	0x8(%rsp), %rax
00000000010310bf	movq	%rax, (%rsp)
00000000010310c3	callq	runtime.systemstack
00000000010310c8	jmp	0x1031097
00000000010310ca	callq	runtime.morestack_noctxt
00000000010310cf	jmp	"runtime.(*rwmutex).rlock"
00000000010310d4	int3
00000000010310d5	int3
00000000010310d6	int3
00000000010310d7	int3
00000000010310d8	int3
00000000010310d9	int3
00000000010310da	int3
00000000010310db	int3
00000000010310dc	int3
00000000010310dd	int3
00000000010310de	int3
00000000010310df	int3
runtime.(*rwmutex).runlock:
00000000010310e0	movq	%gs:0x30, %rcx
00000000010310e9	cmpq	0x10(%rcx), %rsp
00000000010310ed	jbe	0x10311cf
00000000010310f3	subq	$0x18, %rsp
00000000010310f7	movq	%rbp, 0x10(%rsp)
00000000010310fc	leaq	0x10(%rsp), %rbp
0000000001031101	movl	$0xffffffff, %eax
0000000001031106	movq	0x20(%rsp), %rcx
000000000103110b	lock
000000000103110c	xaddl	%eax, 0x28(%rcx)
0000000001031110	decl	%eax
0000000001031112	testl	%eax, %eax
0000000001031114	jge	0x103113a
0000000001031116	cmpl	$-0x1, %eax
0000000001031119	je	0x10311b4
000000000103111f	cmpl	$0xbfffffff, %eax
0000000001031124	je	0x10311b4
000000000103112a	movl	$0xffffffff, %eax
000000000103112f	lock
0000000001031130	xaddl	%eax, 0x2c(%rcx)
0000000001031134	decl	%eax
0000000001031136	testl	%eax, %eax
0000000001031138	je	0x103117b
000000000103113a	movq	%gs:0x30, %rax
0000000001031143	movq	0x30(%rax), %rcx
0000000001031147	movl	0x100(%rcx), %edx
000000000103114d	leal	-0x1(%rdx), %ebx
0000000001031150	movl	%ebx, 0x100(%rcx)
0000000001031156	cmpl	$0x1, %edx
0000000001031159	jne	0x1031171
000000000103115b	testb	%al, (%rax)
000000000103115d	leaq	0xb1(%rax), %rcx
0000000001031164	cmpb	$0x0, (%rcx)
0000000001031167	je	0x1031171
0000000001031169	movq	$-0x522, 0x10(%rax)
0000000001031171	movq	0x10(%rsp), %rbp
0000000001031176	addq	$0x18, %rsp
000000000103117a	retq
000000000103117b	movq	%rcx, (%rsp)
000000000103117f	callq	runtime.lock
0000000001031184	movq	0x20(%rsp), %rax
0000000001031189	movq	0x20(%rax), %rcx
000000000103118d	testq	%rcx, %rcx
0000000001031190	jne	0x103119d
0000000001031192	movq	%rax, (%rsp)
0000000001031196	callq	runtime.unlock
000000000103119b	jmp	0x103113a
000000000103119d	leaq	0x140(%rcx), %rax
00000000010311a4	movq	%rax, (%rsp)
00000000010311a8	callq	runtime.notewakeup
00000000010311ad	movq	0x20(%rsp), %rax
00000000010311b2	jmp	0x1031192
00000000010311b4	leaq	0x3b9b7(%rip), %rax
00000000010311bb	movq	%rax, (%rsp)
00000000010311bf	movq	$0x1b, 0x8(%rsp)
00000000010311c8	callq	runtime.throw
00000000010311cd	ud2
00000000010311cf	callq	runtime.morestack_noctxt
00000000010311d4	jmp	"runtime.(*rwmutex).runlock"
00000000010311d9	int3
00000000010311da	int3
00000000010311db	int3
00000000010311dc	int3
00000000010311dd	int3
00000000010311de	int3
00000000010311df	int3
runtime.readyWithTime:
00000000010311e0	movq	%gs:0x30, %rcx
00000000010311e9	cmpq	0x10(%rcx), %rsp
00000000010311ed	jbe	0x1031240
00000000010311ef	subq	$0x18, %rsp
00000000010311f3	movq	%rbp, 0x10(%rsp)
00000000010311f8	leaq	0x10(%rsp), %rbp
00000000010311fd	movq	0x20(%rsp), %rax
0000000001031202	cmpq	$0x0, 0x30(%rax)
0000000001031207	jne	0x1031229
0000000001031209	movq	(%rax), %rax
000000000103120c	movq	%rax, (%rsp)
0000000001031210	movq	0x28(%rsp), %rax
0000000001031215	movq	%rax, 0x8(%rsp)
000000000103121a	callq	runtime.goready
000000000103121f	movq	0x10(%rsp), %rbp
0000000001031224	addq	$0x18, %rsp
0000000001031228	retq
0000000001031229	callq	runtime.cputicks
000000000103122e	movq	(%rsp), %rax
0000000001031232	movq	0x20(%rsp), %rcx
0000000001031237	movq	%rax, 0x30(%rcx)
000000000103123b	movq	%rcx, %rax
000000000103123e	jmp	0x1031209
0000000001031240	callq	runtime.morestack_noctxt
0000000001031245	jmp	runtime.readyWithTime
0000000001031247	int3
0000000001031248	int3
0000000001031249	int3
000000000103124a	int3
000000000103124b	int3
000000000103124c	int3
000000000103124d	int3
000000000103124e	int3
000000000103124f	int3
runtime.semacquire:
0000000001031250	movq	%gs:0x30, %rcx
0000000001031259	cmpq	0x10(%rcx), %rsp
000000000103125d	jbe	0x1031293
000000000103125f	subq	$0x20, %rsp
0000000001031263	movq	%rbp, 0x18(%rsp)
0000000001031268	leaq	0x18(%rsp), %rbp
000000000103126d	movq	0x28(%rsp), %rax
0000000001031272	movq	%rax, (%rsp)
0000000001031276	movb	$0x0, 0x8(%rsp)
000000000103127b	movq	$0x0, 0x10(%rsp)
0000000001031284	callq	runtime.semacquire1
0000000001031289	movq	0x18(%rsp), %rbp
000000000103128e	addq	$0x20, %rsp
0000000001031292	retq
0000000001031293	callq	runtime.morestack_noctxt
0000000001031298	jmp	runtime.semacquire
000000000103129a	int3
000000000103129b	int3
000000000103129c	int3
000000000103129d	int3
000000000103129e	int3
000000000103129f	int3
runtime.semacquire1:
00000000010312a0	movq	%gs:0x30, %rcx
00000000010312a9	cmpq	0x10(%rcx), %rsp
00000000010312ad	jbe	0x1031556
00000000010312b3	subq	$0x60, %rsp
00000000010312b7	movq	%rbp, 0x58(%rsp)
00000000010312bc	leaq	0x58(%rsp), %rbp
00000000010312c1	movq	%gs:0x30, %rax
00000000010312ca	movq	0x30(%rax), %rcx
00000000010312ce	movq	0xc0(%rcx), %rcx
00000000010312d5	cmpq	%rcx, %rax
00000000010312d8	jne	0x103153b
00000000010312de	movq	0x68(%rsp), %rax
00000000010312e3	movq	%rax, (%rsp)
00000000010312e7	callq	runtime.cansemacquire
00000000010312ec	leaq	0x8(%rsp), %rax
00000000010312f1	cmpb	$0x0, (%rax)
00000000010312f4	jne	0x1031531
00000000010312fa	callq	runtime.acquireSudog
00000000010312ff	movq	(%rsp), %rax
0000000001031303	movq	%rax, 0x38(%rsp)
0000000001031308	movq	0x68(%rsp), %rcx
000000000103130d	movq	%rcx, %rdx
0000000001031310	movq	$0x0, 0x30(%rax)
0000000001031318	movq	$0x0, 0x28(%rax)
0000000001031320	movl	$0x0, 0x38(%rax)
0000000001031327	shrq	$0x3, %rcx
000000000103132b	movq	%rax, %rbx
000000000103132e	movabsq	$0x5197f7d73404147, %rax
0000000001031338	movq	%rdx, %rsi
000000000103133b	mulq	%rcx
000000000103133e	addq	%rcx, %rdx
0000000001031341	rcrq	%rdx
0000000001031344	shrq	$0x7, %rdx
0000000001031348	imulq	$0xfb, %rdx, %rax
000000000103134f	subq	%rax, %rcx
0000000001031352	movq	%rcx, 0x30(%rsp)
0000000001031357	movq	0x78(%rsp), %rax
000000000103135c	btl	$0x0, %eax
0000000001031360	jae	0x103152a
0000000001031366	cmpq	$0x0, 0xa37da(%rip)
000000000103136e	ja	0x1031500
0000000001031374	xorl	%edx, %edx
0000000001031376	btl	$0x1, %eax
000000000103137a	jae	0x1031393
000000000103137c	cmpq	$0x0, 0xa3824(%rip)
0000000001031384	jbe	0x1031393
0000000001031386	testq	%rdx, %rdx
0000000001031389	je	0x10314e3
000000000103138f	movq	%rdx, 0x28(%rbx)
0000000001031393	movq	%rdx, 0x20(%rsp)
0000000001031398	shlq	$0x6, %rcx
000000000103139c	movq	%rcx, 0x28(%rsp)
00000000010313a1	leaq	runtime.semtable(%rip), %rax
00000000010313a8	leaq	(%rax,%rcx), %rdi
00000000010313ac	movq	%rdi, 0x40(%rsp)
00000000010313b1	jmp	0x10313c4
00000000010313b3	leaq	runtime.semtable(%rip), %rax
00000000010313ba	movq	0x28(%rsp), %rcx
00000000010313bf	movq	0x40(%rsp), %rdi
00000000010313c4	testb	%al, (%rdi)
00000000010313c6	leaq	(%rax,%rcx), %rdx
00000000010313ca	movq	%rdx, 0x50(%rsp)
00000000010313cf	movq	%rdx, (%rsp)
00000000010313d3	callq	runtime.lock
00000000010313d8	movq	0x28(%rsp), %rax
00000000010313dd	leaq	runtime.semtable(%rip), %rcx
00000000010313e4	leaq	0x10(%rcx,%rax), %rdx
00000000010313e9	movq	%rdx, 0x48(%rsp)
00000000010313ee	movl	$0x1, %ebx
00000000010313f3	lock
00000000010313f4	xaddl	%ebx, (%rdx)
00000000010313f7	movq	0x68(%rsp), %rbx
00000000010313fc	movq	%rbx, (%rsp)
0000000001031400	callq	runtime.cansemacquire
0000000001031405	leaq	0x8(%rsp), %rax
000000000103140a	cmpb	$0x0, (%rax)
000000000103140d	jne	0x10314c5
0000000001031413	movq	0x40(%rsp), %rax
0000000001031418	movq	%rax, (%rsp)
000000000103141c	movq	0x68(%rsp), %rcx
0000000001031421	movq	%rcx, 0x8(%rsp)
0000000001031426	movq	0x38(%rsp), %rdx
000000000103142b	movq	%rdx, 0x10(%rsp)
0000000001031430	movzbl	0x70(%rsp), %ebx
0000000001031435	movb	%bl, 0x18(%rsp)
0000000001031439	callq	"runtime.(*semaRoot).queue"
000000000103143e	movq	0x50(%rsp), %rax
0000000001031443	movq	%rax, (%rsp)
0000000001031447	movw	$0x1911, 0x8(%rsp)
000000000103144e	movq	$0x4, 0x10(%rsp)
0000000001031457	callq	runtime.goparkunlock
000000000103145c	movq	0x38(%rsp), %rax
0000000001031461	cmpl	$0x0, 0x38(%rax)
0000000001031465	jne	0x1031483
0000000001031467	movq	0x68(%rsp), %rax
000000000103146c	movq	%rax, (%rsp)
0000000001031470	callq	runtime.cansemacquire
0000000001031475	leaq	0x8(%rsp), %rax
000000000103147a	cmpb	$0x0, (%rax)
000000000103147d	je	0x10313b3
0000000001031483	movq	0x38(%rsp), %rax
0000000001031488	movq	0x30(%rax), %rcx
000000000103148c	testq	%rcx, %rcx
000000000103148f	jg	0x10314a4
0000000001031491	movq	%rax, (%rsp)
0000000001031495	callq	runtime.releaseSudog
000000000103149a	movq	0x58(%rsp), %rbp
000000000103149f	addq	$0x60, %rsp
00000000010314a3	retq
00000000010314a4	movq	0x20(%rsp), %rax
00000000010314a9	subq	%rax, %rcx
00000000010314ac	movq	%rcx, (%rsp)
00000000010314b0	movq	$0x3, 0x8(%rsp)
00000000010314b9	callq	runtime.blockevent
00000000010314be	movq	0x38(%rsp), %rax
00000000010314c3	jmp	0x1031491
00000000010314c5	movl	$0xffffffff, %eax
00000000010314ca	movq	0x48(%rsp), %rcx
00000000010314cf	lock
00000000010314d0	xaddl	%eax, (%rcx)
00000000010314d3	movq	0x50(%rsp), %rax
00000000010314d8	movq	%rax, (%rsp)
00000000010314dc	callq	runtime.unlock
00000000010314e1	jmp	0x1031483
00000000010314e3	callq	runtime.cputicks
00000000010314e8	movq	(%rsp), %rdx
00000000010314ec	movq	0x30(%rsp), %rcx
00000000010314f1	movq	0x38(%rsp), %rbx
00000000010314f6	movq	0x68(%rsp), %rsi
00000000010314fb	jmp	0x103138f
0000000001031500	callq	runtime.cputicks
0000000001031505	movq	(%rsp), %rdx
0000000001031509	movq	0x38(%rsp), %rbx
000000000103150e	movq	$-0x1, 0x30(%rbx)
0000000001031516	movq	0x78(%rsp), %rax
000000000103151b	movq	0x30(%rsp), %rcx
0000000001031520	movq	0x68(%rsp), %rsi
0000000001031525	jmp	0x1031376
000000000103152a	xorl	%edx, %edx
000000000103152c	jmp	0x1031376
0000000001031531	movq	0x58(%rsp), %rbp
0000000001031536	addq	$0x60, %rsp
000000000103153a	retq
000000000103153b	leaq	0x3bbab(%rip), %rax
0000000001031542	movq	%rax, (%rsp)
0000000001031546	movq	$0x1d, 0x8(%rsp)
000000000103154f	callq	runtime.throw
0000000001031554	ud2
0000000001031556	callq	runtime.morestack_noctxt
000000000103155b	jmp	runtime.semacquire1
runtime.semrelease:
0000000001031560	movq	%gs:0x30, %rcx
0000000001031569	cmpq	0x10(%rcx), %rsp
000000000103156d	jbe	0x103159a
000000000103156f	subq	$0x18, %rsp
0000000001031573	movq	%rbp, 0x10(%rsp)
0000000001031578	leaq	0x10(%rsp), %rbp
000000000103157d	movq	0x20(%rsp), %rax
0000000001031582	movq	%rax, (%rsp)
0000000001031586	movb	$0x0, 0x8(%rsp)
000000000103158b	callq	runtime.semrelease1
0000000001031590	movq	0x10(%rsp), %rbp
0000000001031595	addq	$0x18, %rsp
0000000001031599	retq
000000000103159a	callq	runtime.morestack_noctxt
000000000103159f	jmp	runtime.semrelease
00000000010315a1	int3
00000000010315a2	int3
00000000010315a3	int3
00000000010315a4	int3
00000000010315a5	int3
00000000010315a6	int3
00000000010315a7	int3
00000000010315a8	int3
00000000010315a9	int3
00000000010315aa	int3
00000000010315ab	int3
00000000010315ac	int3
00000000010315ad	int3
00000000010315ae	int3
00000000010315af	int3
runtime.semrelease1:
00000000010315b0	movq	%gs:0x30, %rcx
00000000010315b9	cmpq	0x10(%rcx), %rsp
00000000010315bd	jbe	0x103176e
00000000010315c3	subq	$0x50, %rsp
00000000010315c7	movq	%rbp, 0x48(%rsp)
00000000010315cc	leaq	0x48(%rsp), %rbp
00000000010315d1	movq	0x58(%rsp), %rcx
00000000010315d6	movq	%rcx, %rdx
00000000010315d9	movl	$0x1, %ebx
00000000010315de	lock
00000000010315df	xaddl	%ebx, (%rdx)
00000000010315e2	shrq	$0x3, %rcx
00000000010315e6	movabsq	$0x5197f7d73404147, %rax
00000000010315f0	mulq	%rcx
00000000010315f3	addq	%rcx, %rdx
00000000010315f6	rcrq	%rdx
00000000010315f9	shrq	$0x7, %rdx
00000000010315fd	imulq	$0xfb, %rdx, %rdx
0000000001031604	subq	%rdx, %rcx
0000000001031607	shlq	$0x6, %rcx
000000000103160b	leaq	runtime.semtable(%rip), %rdx
0000000001031612	leaq	(%rdx,%rcx), %rsi
0000000001031616	testb	%al, (%rsi)
0000000001031618	leaq	0x10(%rdx,%rcx), %rdi
000000000103161d	movl	(%rdi), %r8d
0000000001031620	testl	%r8d, %r8d
0000000001031623	je	0x1031749
0000000001031629	movq	%rsi, 0x30(%rsp)
000000000103162e	movq	%rdi, 0x40(%rsp)
0000000001031633	leaq	(%rdx,%rcx), %rax
0000000001031637	movq	%rax, 0x38(%rsp)
000000000103163c	movq	%rax, (%rsp)
0000000001031640	callq	runtime.lock
0000000001031645	movq	0x40(%rsp), %rax
000000000103164a	movl	(%rax), %ecx
000000000103164c	testl	%ecx, %ecx
000000000103164e	je	0x1031731
0000000001031654	movq	0x30(%rsp), %rax
0000000001031659	movq	%rax, (%rsp)
000000000103165d	movq	0x58(%rsp), %rax
0000000001031662	movq	%rax, 0x8(%rsp)
0000000001031667	callq	"runtime.(*semaRoot).dequeue"
000000000103166c	movq	0x10(%rsp), %rax
0000000001031671	movq	%rax, 0x28(%rsp)
0000000001031676	movq	0x18(%rsp), %rcx
000000000103167b	movq	%rcx, 0x20(%rsp)
0000000001031680	testq	%rax, %rax
0000000001031683	je	0x1031693
0000000001031685	movl	$0xffffffff, %edx
000000000103168a	movq	0x40(%rsp), %rbx
000000000103168f	lock
0000000001031690	xaddl	%edx, (%rbx)
0000000001031693	movq	0x38(%rsp), %rax
0000000001031698	movq	%rax, (%rsp)
000000000103169c	callq	runtime.unlock
00000000010316a1	movq	0x28(%rsp), %rax
00000000010316a6	testq	%rax, %rax
00000000010316a9	je	0x10316d9
00000000010316ab	movq	0x28(%rax), %rcx
00000000010316af	testq	%rcx, %rcx
00000000010316b2	jne	0x1031710
00000000010316b4	cmpl	$0x0, 0x38(%rax)
00000000010316b8	jne	0x1031753
00000000010316be	movzbl	0x60(%rsp), %ecx
00000000010316c3	testb	%cl, %cl
00000000010316c5	jne	0x10316e3
00000000010316c7	movq	%rax, (%rsp)
00000000010316cb	movq	$0x5, 0x8(%rsp)
00000000010316d4	callq	runtime.readyWithTime
00000000010316d9	movq	0x48(%rsp), %rbp
00000000010316de	addq	$0x50, %rsp
00000000010316e2	retq
00000000010316e3	movq	0x58(%rsp), %rax
00000000010316e8	movq	%rax, (%rsp)
00000000010316ec	callq	runtime.cansemacquire
00000000010316f1	leaq	0x8(%rsp), %rax
00000000010316f6	cmpb	$0x0, (%rax)
00000000010316f9	je	0x1031709
00000000010316fb	movq	0x28(%rsp), %rax
0000000001031700	movl	$0x1, 0x38(%rax)
0000000001031707	jmp	0x10316c7
0000000001031709	movq	0x28(%rsp), %rax
000000000103170e	jmp	0x10316c7
0000000001031710	movq	0x20(%rsp), %rax
0000000001031715	subq	%rcx, %rax
0000000001031718	movq	%rax, (%rsp)
000000000103171c	movq	$0x3, 0x8(%rsp)
0000000001031725	callq	sync.event
000000000103172a	movq	0x28(%rsp), %rax
000000000103172f	jmp	0x10316b4
0000000001031731	movq	0x38(%rsp), %rax
0000000001031736	movq	%rax, (%rsp)
000000000103173a	callq	runtime.unlock
000000000103173f	movq	0x48(%rsp), %rbp
0000000001031744	addq	$0x50, %rsp
0000000001031748	retq
0000000001031749	movq	0x48(%rsp), %rbp
000000000103174e	addq	$0x50, %rsp
0000000001031752	retq
0000000001031753	leaq	0x3b180(%rip), %rax
000000000103175a	movq	%rax, (%rsp)
000000000103175e	movq	$0x1a, 0x8(%rsp)
0000000001031767	callq	runtime.throw
000000000103176c	ud2
000000000103176e	callq	runtime.morestack_noctxt
0000000001031773	jmp	runtime.semrelease1
0000000001031778	int3
0000000001031779	int3
000000000103177a	int3
000000000103177b	int3
000000000103177c	int3
000000000103177d	int3
000000000103177e	int3
000000000103177f	int3
runtime.cansemacquire:
0000000001031780	movq	0x8(%rsp), %rcx
0000000001031785	movl	(%rcx), %edx
0000000001031787	testl	%edx, %edx
0000000001031789	je	0x10317a1
000000000103178b	leal	-0x1(%rdx), %ebx
000000000103178e	movl	%edx, %eax
0000000001031790	lock
0000000001031791	cmpxchgl	%ebx, (%rcx)
0000000001031794	sete	%dl
0000000001031797	testb	%dl, %dl
0000000001031799	je	0x1031785
000000000103179b	movb	$0x1, 0x10(%rsp)
00000000010317a0	retq
00000000010317a1	movb	$0x0, 0x10(%rsp)
00000000010317a6	retq
00000000010317a7	int3
00000000010317a8	int3
00000000010317a9	int3
00000000010317aa	int3
00000000010317ab	int3
00000000010317ac	int3
00000000010317ad	int3
00000000010317ae	int3
00000000010317af	int3
runtime.(*semaRoot).queue:
00000000010317b0	movq	%gs:0x30, %rcx
00000000010317b9	cmpq	0x10(%rcx), %rsp
00000000010317bd	jbe	0x1031bf5
00000000010317c3	subq	$0x18, %rsp
00000000010317c7	movq	%rbp, 0x10(%rsp)
00000000010317cc	leaq	0x10(%rsp), %rbp
00000000010317d1	movq	0x30(%rsp), %rax
00000000010317d6	testb	%al, (%rax)
00000000010317d8	movq	%gs:0x30, %rcx
00000000010317e1	leaq	0x10(%rax), %rdi
00000000010317e5	leaq	0x18(%rax), %rdx
00000000010317e9	cmpl	$0x0, 0xa3440(%rip)
00000000010317f0	jne	0x1031b8f
00000000010317f6	movq	%rcx, (%rax)
00000000010317f9	movq	0x28(%rsp), %rcx
00000000010317fe	movq	%rcx, 0x20(%rax)
0000000001031802	xorps	%xmm0, %xmm0
0000000001031805	movups	%xmm0, 0x10(%rax)
0000000001031809	movq	0x20(%rsp), %rbx
000000000103180e	leaq	0x8(%rbx), %rsi
0000000001031812	testb	%al, (%rsi)
0000000001031814	movq	0x8(%rbx), %r8
0000000001031818	xorl	%r9d, %r9d
000000000103181b	jmp	0x103183b
000000000103181d	movq	%rcx, %r10
0000000001031820	leaq	0x18(%r8), %r11
0000000001031824	leaq	0x10(%r8), %rsi
0000000001031828	cmpq	%r9, %rcx
000000000103182b	cmovbq	%r11, %rsi
000000000103182f	movq	(%rsi), %r11
0000000001031832	movq	%r10, %rcx
0000000001031835	movq	%r8, %r9
0000000001031838	movq	%r11, %r8
000000000103183b	testq	%r8, %r8
000000000103183e	je	0x1031a9f
0000000001031844	movq	0x20(%r8), %r9
0000000001031848	cmpq	%r9, %rcx
000000000103184b	jne	0x103181d
000000000103184d	movzbl	0x38(%rsp), %ecx
0000000001031852	testb	%cl, %cl
0000000001031854	je	0x1031a31
000000000103185a	testb	%al, (%rsi)
000000000103185c	cmpl	$0x0, 0xa33cd(%rip)
0000000001031863	jne	0x1031a1e
0000000001031869	movq	%rax, (%rsi)
000000000103186c	movl	0x38(%r8), %ecx
0000000001031870	movl	%ecx, 0x38(%rax)
0000000001031873	movq	0x28(%r8), %rcx
0000000001031877	movq	%rcx, 0x28(%rax)
000000000103187b	movq	0x40(%r8), %rcx
000000000103187f	cmpl	$0x0, 0xa33aa(%rip)
0000000001031886	jne	0x10319fe
000000000103188c	movq	%rcx, 0x40(%rax)
0000000001031890	movq	0x18(%r8), %rcx
0000000001031894	cmpl	$0x0, 0xa3395(%rip)
000000000103189b	jne	0x10319e2
00000000010318a1	movq	%rcx, 0x18(%rax)
00000000010318a5	movq	0x10(%r8), %rdx
00000000010318a9	cmpl	$0x0, 0xa3380(%rip)
00000000010318b0	jne	0x10319cf
00000000010318b6	movq	%rdx, 0x10(%rax)
00000000010318ba	testq	%rcx, %rcx
00000000010318bd	je	0x10318d0
00000000010318bf	cmpl	$0x0, 0xa336a(%rip)
00000000010318c6	jne	0x10319c1
00000000010318cc	movq	%rax, 0x40(%rcx)
00000000010318d0	movq	0x10(%rax), %rcx
00000000010318d4	testq	%rcx, %rcx
00000000010318d7	je	0x10318ea
00000000010318d9	cmpl	$0x0, 0xa3350(%rip)
00000000010318e0	jne	0x10319b3
00000000010318e6	movq	%rax, 0x40(%rcx)
00000000010318ea	cmpl	$0x0, 0xa333f(%rip)
00000000010318f1	jne	0x103199c
00000000010318f7	movq	%r8, 0x48(%rax)
00000000010318fb	leaq	0x50(%rax), %rdi
00000000010318ff	movq	0x50(%r8), %rcx
0000000001031903	cmpl	$0x0, 0xa3326(%rip)
000000000103190a	jne	0x1031989
000000000103190c	movq	%rcx, 0x50(%rax)
0000000001031910	testq	%rcx, %rcx
0000000001031913	je	0x1031970
0000000001031915	cmpl	$0x0, 0xa3314(%rip)
000000000103191c	jne	0x1031948
000000000103191e	movq	$0x0, 0x40(%r8)
0000000001031926	movq	$0x0, 0x18(%r8)
000000000103192e	movq	$0x0, 0x10(%r8)
0000000001031936	movq	$0x0, 0x50(%r8)
000000000103193e	movq	0x10(%rsp), %rbp
0000000001031943	addq	$0x18, %rsp
0000000001031947	retq
0000000001031948	leaq	0x40(%r8), %rdi
000000000103194c	xorl	%eax, %eax
000000000103194e	callq	runtime.gcWriteBarrier
0000000001031953	leaq	0x18(%r8), %rdi
0000000001031957	callq	runtime.gcWriteBarrier
000000000103195c	leaq	0x10(%r8), %rdi
0000000001031960	callq	runtime.gcWriteBarrier
0000000001031965	leaq	0x50(%r8), %rdi
0000000001031969	callq	runtime.gcWriteBarrier
000000000103196e	jmp	0x103193e
0000000001031970	cmpl	$0x0, 0xa32b9(%rip)
0000000001031977	jne	0x103197f
0000000001031979	movq	%r8, 0x50(%rax)
000000000103197d	jmp	0x1031915
000000000103197f	movq	%r8, %rax
0000000001031982	callq	runtime.gcWriteBarrier
0000000001031987	jmp	0x1031915
0000000001031989	movq	%rax, %rdx
000000000103198c	movq	%rcx, %rax
000000000103198f	callq	runtime.gcWriteBarrier
0000000001031994	movq	%rdx, %rax
0000000001031997	jmp	0x1031910
000000000103199c	leaq	0x48(%rax), %rdi
00000000010319a0	movq	%rax, %rcx
00000000010319a3	movq	%r8, %rax
00000000010319a6	callq	runtime.gcWriteBarrier
00000000010319ab	movq	%rcx, %rax
00000000010319ae	jmp	0x10318fb
00000000010319b3	leaq	0x40(%rcx), %rdi
00000000010319b7	callq	runtime.gcWriteBarrier
00000000010319bc	jmp	0x10318ea
00000000010319c1	leaq	0x40(%rcx), %rdi
00000000010319c5	callq	runtime.gcWriteBarrier
00000000010319ca	jmp	0x10318d0
00000000010319cf	movq	%rax, %rbx
00000000010319d2	movq	%rdx, %rax
00000000010319d5	callq	runtime.gcWriteBarrier
00000000010319da	movq	%rbx, %rax
00000000010319dd	jmp	0x10318ba
00000000010319e2	movq	%rdi, %rbx
00000000010319e5	movq	%rdx, %rdi
00000000010319e8	movq	%rax, %rsi
00000000010319eb	movq	%rcx, %rax
00000000010319ee	callq	runtime.gcWriteBarrier
00000000010319f3	movq	%rsi, %rax
00000000010319f6	movq	%rbx, %rdi
00000000010319f9	jmp	0x10318a5
00000000010319fe	leaq	0x40(%rax), %rbx
0000000001031a02	movq	%rdi, %rsi
0000000001031a05	movq	%rbx, %rdi
0000000001031a08	movq	%rax, %r9
0000000001031a0b	movq	%rcx, %rax
0000000001031a0e	callq	runtime.gcWriteBarrier
0000000001031a13	movq	%r9, %rax
0000000001031a16	movq	%rsi, %rdi
0000000001031a19	jmp	0x1031890
0000000001031a1e	movq	%rdi, %rcx
0000000001031a21	movq	%rsi, %rdi
0000000001031a24	callq	runtime.gcWriteBarrier
0000000001031a29	movq	%rcx, %rdi
0000000001031a2c	jmp	0x103186c
0000000001031a31	movq	0x50(%r8), %rcx
0000000001031a35	testq	%rcx, %rcx
0000000001031a38	je	0x1031a85
0000000001031a3a	cmpl	$0x0, 0xa31ef(%rip)
0000000001031a41	jne	0x1031a7a
0000000001031a43	movq	%rax, 0x48(%rcx)
0000000001031a47	cmpl	$0x0, 0xa31e2(%rip)
0000000001031a4e	jne	0x1031a61
0000000001031a50	movq	%rax, 0x50(%r8)
0000000001031a54	movq	$0x0, 0x48(%rax)
0000000001031a5c	jmp	0x103193e
0000000001031a61	leaq	0x50(%r8), %rdi
0000000001031a65	callq	runtime.gcWriteBarrier
0000000001031a6a	leaq	0x48(%rax), %rdi
0000000001031a6e	xorl	%eax, %eax
0000000001031a70	callq	runtime.gcWriteBarrier
0000000001031a75	jmp	0x103193e
0000000001031a7a	leaq	0x48(%rcx), %rdi
0000000001031a7e	callq	runtime.gcWriteBarrier
0000000001031a83	jmp	0x1031a47
0000000001031a85	cmpl	$0x0, 0xa31a4(%rip)
0000000001031a8c	jne	0x1031a94
0000000001031a8e	movq	%rax, 0x48(%r8)
0000000001031a92	jmp	0x1031a47
0000000001031a94	leaq	0x48(%r8), %rdi
0000000001031a98	callq	runtime.gcWriteBarrier
0000000001031a9d	jmp	0x1031a47
0000000001031a9f	movq	%gs:0x30, %rcx
0000000001031aa8	movq	0x30(%rcx), %rcx
0000000001031aac	movl	0x11c(%rcx), %edx
0000000001031ab2	movl	0x120(%rcx), %r8d
0000000001031ab9	movl	%r8d, 0x11c(%rcx)
0000000001031ac0	movl	%edx, %r10d
0000000001031ac3	shll	$0x11, %edx
0000000001031ac6	xorl	%r10d, %edx
0000000001031ac9	movl	%r8d, %r10d
0000000001031acc	xorl	%edx, %r8d
0000000001031acf	shrl	$0x7, %edx
0000000001031ad2	xorl	%r8d, %edx
0000000001031ad5	movl	%r10d, %r8d
0000000001031ad8	shrl	$0x10, %r10d
0000000001031adc	xorl	%edx, %r10d
0000000001031adf	movl	%r10d, 0x120(%rcx)
0000000001031ae6	leal	(%r8,%r10), %ecx
0000000001031aea	orl	$0x1, %ecx
0000000001031aed	movl	%ecx, 0x38(%rax)
0000000001031af0	cmpl	$0x0, 0xa3139(%rip)
0000000001031af7	jne	0x1031b78
0000000001031af9	movq	%r9, 0x40(%rax)
0000000001031afd	testb	%al, (%rsi)
0000000001031aff	cmpl	$0x0, 0xa312a(%rip)
0000000001031b06	jne	0x1031b6e
0000000001031b08	movq	%rax, (%rsi)
0000000001031b0b	jmp	0x1031b1d
0000000001031b0d	movq	0x20(%rsp), %rcx
0000000001031b12	movq	0x30(%rsp), %rdx
0000000001031b17	movq	%rdx, %rax
0000000001031b1a	movq	%rcx, %rbx
0000000001031b1d	movq	0x40(%rax), %rcx
0000000001031b21	testq	%rcx, %rcx
0000000001031b24	je	0x1031b64
0000000001031b26	movl	0x38(%rax), %edx
0000000001031b29	cmpl	%edx, 0x38(%rcx)
0000000001031b2c	jbe	0x1031b64
0000000001031b2e	movq	0x18(%rcx), %rdx
0000000001031b32	cmpq	%rdx, %rax
0000000001031b35	je	0x1031b54
0000000001031b37	movq	0x10(%rcx), %rdx
0000000001031b3b	cmpq	%rax, %rdx
0000000001031b3e	jne	0x1031bd7
0000000001031b44	movq	%rcx, 0x8(%rsp)
0000000001031b49	movq	%rbx, (%rsp)
0000000001031b4d	callq	"runtime.(*semaRoot).rotateLeft"
0000000001031b52	jmp	0x1031b0d
0000000001031b54	movq	%rcx, 0x8(%rsp)
0000000001031b59	movq	%rbx, (%rsp)
0000000001031b5d	callq	"runtime.(*semaRoot).rotateRight"
0000000001031b62	jmp	0x1031b0d
0000000001031b64	movq	0x10(%rsp), %rbp
0000000001031b69	addq	$0x18, %rsp
0000000001031b6d	retq
0000000001031b6e	movq	%rsi, %rdi
0000000001031b71	callq	runtime.gcWriteBarrier
0000000001031b76	jmp	0x1031b1d
0000000001031b78	leaq	0x40(%rax), %rdi
0000000001031b7c	movq	%rax, %rcx
0000000001031b7f	movq	%r9, %rax
0000000001031b82	callq	runtime.gcWriteBarrier
0000000001031b87	movq	%rcx, %rax
0000000001031b8a	jmp	0x1031afd
0000000001031b8f	movq	%rdi, %rbx
0000000001031b92	movq	%rax, %rdi
0000000001031b95	movq	%rcx, %rax
0000000001031b98	callq	runtime.gcWriteBarrier
0000000001031b9d	leaq	0x20(%rdi), %rsi
0000000001031ba1	movq	%rdi, %rax
0000000001031ba4	movq	%rsi, %rdi
0000000001031ba7	movq	%rax, %rcx
0000000001031baa	movq	0x28(%rsp), %rax
0000000001031baf	callq	runtime.gcWriteBarrier
0000000001031bb4	movq	%rbx, %rdi
0000000001031bb7	movq	%rax, %rsi
0000000001031bba	xorl	%eax, %eax
0000000001031bbc	callq	runtime.gcWriteBarrier
0000000001031bc1	movq	%rdx, %rdi
0000000001031bc4	callq	runtime.gcWriteBarrier
0000000001031bc9	movq	%rcx, %rax
0000000001031bcc	movq	%rsi, %rcx
0000000001031bcf	movq	%rbx, %rdi
0000000001031bd2	jmp	0x1031809
0000000001031bd7	leaq	0x26742(%rip), %rax
0000000001031bde	movq	%rax, (%rsp)
0000000001031be2	leaq	runtime.statictmp_25(%rip), %rax
0000000001031be9	movq	%rax, 0x8(%rsp)
0000000001031bee	callq	runtime.gopanic
0000000001031bf3	ud2
0000000001031bf5	callq	runtime.morestack_noctxt
0000000001031bfa	jmp	"runtime.(*semaRoot).queue"
0000000001031bff	int3
runtime.(*semaRoot).dequeue:
0000000001031c00	movq	%gs:0x30, %rcx
0000000001031c09	cmpq	0x10(%rcx), %rsp
0000000001031c0d	jbe	0x1031f6b
0000000001031c13	subq	$0x38, %rsp
0000000001031c17	movq	%rbp, 0x30(%rsp)
0000000001031c1c	leaq	0x30(%rsp), %rbp
0000000001031c21	movq	0x40(%rsp), %rcx
0000000001031c26	leaq	0x8(%rcx), %rdi
0000000001031c2a	testb	%al, (%rdi)
0000000001031c2c	movq	0x8(%rcx), %rdx
0000000001031c30	movq	0x48(%rsp), %rbx
0000000001031c35	movq	%rdi, %rax
0000000001031c38	jmp	0x1031c52
0000000001031c3a	movq	%rbx, %r8
0000000001031c3d	leaq	0x18(%rdx), %r9
0000000001031c41	leaq	0x10(%rdx), %rdi
0000000001031c45	cmpq	%rsi, %rbx
0000000001031c48	cmovbq	%r9, %rdi
0000000001031c4c	movq	(%rdi), %rdx
0000000001031c4f	movq	%r8, %rbx
0000000001031c52	testq	%rdx, %rdx
0000000001031c55	je	0x1031f4f
0000000001031c5b	movq	0x20(%rdx), %rsi
0000000001031c5f	cmpq	%rsi, %rbx
0000000001031c62	jne	0x1031c3a
0000000001031c64	movq	%rax, 0x28(%rsp)
0000000001031c69	movq	%rdx, 0x18(%rsp)
0000000001031c6e	cmpq	$0x0, 0x28(%rdx)
0000000001031c73	jne	0x1031f28
0000000001031c79	xorl	%ebx, %ebx
0000000001031c7b	movq	0x48(%rdx), %rsi
0000000001031c7f	testq	%rsi, %rsi
0000000001031c82	jne	0x1031ddb
0000000001031c88	movq	%rbx, 0x10(%rsp)
0000000001031c8d	jmp	0x1031ca9
0000000001031c8f	movq	0x18(%rsp), %rsi
0000000001031c94	movq	0x40(%rsp), %r8
0000000001031c99	movq	0x28(%rsp), %rax
0000000001031c9e	movq	%r8, %rcx
0000000001031ca1	movq	%rsi, %rdx
0000000001031ca4	movq	0x10(%rsp), %rbx
0000000001031ca9	movq	0x10(%rdx), %rsi
0000000001031cad	testq	%rsi, %rsi
0000000001031cb0	je	0x1031ce5
0000000001031cb2	je	0x1031cc5
0000000001031cb4	movq	0x18(%rdx), %rdi
0000000001031cb8	testq	%rdi, %rdi
0000000001031cbb	je	0x1031cd5
0000000001031cbd	movl	0x38(%rsi), %esi
0000000001031cc0	cmpl	%esi, 0x38(%rdi)
0000000001031cc3	jae	0x1031cd5
0000000001031cc5	movq	%rcx, (%rsp)
0000000001031cc9	movq	%rdx, 0x8(%rsp)
0000000001031cce	callq	"runtime.(*semaRoot).rotateRight"
0000000001031cd3	jmp	0x1031c8f
0000000001031cd5	movq	%rcx, (%rsp)
0000000001031cd9	movq	%rdx, 0x8(%rsp)
0000000001031cde	callq	"runtime.(*semaRoot).rotateLeft"
0000000001031ce3	jmp	0x1031c8f
0000000001031ce5	cmpq	$0x0, 0x18(%rdx)
0000000001031cea	je	0x1031cf1
0000000001031cec	testq	%rsi, %rsi
0000000001031cef	jmp	0x1031cb2
0000000001031cf1	movq	0x40(%rdx), %rsi
0000000001031cf5	testq	%rsi, %rsi
0000000001031cf8	je	0x1031db6
0000000001031cfe	movq	0x18(%rsi), %rcx
0000000001031d02	cmpq	%rcx, %rdx
0000000001031d05	jne	0x1031d90
0000000001031d0b	cmpl	$0x0, 0xa2f1e(%rip)
0000000001031d12	jne	0x1031d83
0000000001031d14	movq	$0x0, 0x18(%rsi)
0000000001031d1c	cmpl	$0x0, 0xa2f0d(%rip)
0000000001031d23	jne	0x1031d57
0000000001031d25	movq	$0x0, 0x40(%rdx)
0000000001031d2d	movq	$0x0, 0x20(%rdx)
0000000001031d35	xorps	%xmm0, %xmm0
0000000001031d38	movups	%xmm0, 0x10(%rdx)
0000000001031d3c	movl	$0x0, 0x38(%rdx)
0000000001031d43	movq	%rdx, 0x50(%rsp)
0000000001031d48	movq	%rbx, 0x58(%rsp)
0000000001031d4d	movq	0x30(%rsp), %rbp
0000000001031d52	addq	$0x38, %rsp
0000000001031d56	retq
0000000001031d57	leaq	0x40(%rdx), %rdi
0000000001031d5b	xorl	%eax, %eax
0000000001031d5d	callq	runtime.gcWriteBarrier
0000000001031d62	leaq	0x20(%rdx), %rdi
0000000001031d66	xorl	%eax, %eax
0000000001031d68	callq	runtime.gcWriteBarrier
0000000001031d6d	leaq	0x10(%rdx), %rdi
0000000001031d71	xorl	%eax, %eax
0000000001031d73	callq	runtime.gcWriteBarrier
0000000001031d78	leaq	0x18(%rdx), %rdi
0000000001031d7c	callq	runtime.gcWriteBarrier
0000000001031d81	jmp	0x1031d3c
0000000001031d83	leaq	0x18(%rsi), %rdi
0000000001031d87	xorl	%eax, %eax
0000000001031d89	callq	runtime.gcWriteBarrier
0000000001031d8e	jmp	0x1031d1c
0000000001031d90	cmpl	$0x0, 0xa2e99(%rip)
0000000001031d97	jne	0x1031da6
0000000001031d99	movq	$0x0, 0x10(%rsi)
0000000001031da1	jmp	0x1031d1c
0000000001031da6	leaq	0x10(%rsi), %rdi
0000000001031daa	xorl	%eax, %eax
0000000001031dac	callq	runtime.gcWriteBarrier
0000000001031db1	jmp	0x1031d1c
0000000001031db6	cmpl	$0x0, 0xa2e73(%rip)
0000000001031dbd	jne	0x1031dcc
0000000001031dbf	movq	$0x0, 0x8(%rcx)
0000000001031dc7	jmp	0x1031d1c
0000000001031dcc	movq	%rax, %rdi
0000000001031dcf	xorl	%eax, %eax
0000000001031dd1	callq	runtime.gcWriteBarrier
0000000001031dd6	jmp	0x1031d1c
0000000001031ddb	testb	%al, (%rdi)
0000000001031ddd	cmpl	$0x0, 0xa2e4c(%rip)
0000000001031de4	jne	0x1031f1b
0000000001031dea	movq	%rsi, (%rdi)
0000000001031ded	movl	0x38(%rdx), %ecx
0000000001031df0	movl	%ecx, 0x38(%rsi)
0000000001031df3	movq	0x40(%rdx), %rax
0000000001031df7	cmpl	$0x0, 0xa2e32(%rip)
0000000001031dfe	jne	0x1031f0d
0000000001031e04	movq	%rax, 0x40(%rsi)
0000000001031e08	movq	0x18(%rdx), %rax
0000000001031e0c	cmpl	$0x0, 0xa2e1d(%rip)
0000000001031e13	jne	0x1031eff
0000000001031e19	movq	%rax, 0x18(%rsi)
0000000001031e1d	testq	%rax, %rax
0000000001031e20	je	0x1031e33
0000000001031e22	cmpl	$0x0, 0xa2e07(%rip)
0000000001031e29	jne	0x1031eee
0000000001031e2f	movq	%rsi, 0x40(%rax)
0000000001031e33	movq	0x10(%rdx), %rax
0000000001031e37	cmpl	$0x0, 0xa2df2(%rip)
0000000001031e3e	jne	0x1031ee0
0000000001031e44	movq	%rax, 0x10(%rsi)
0000000001031e48	testq	%rax, %rax
0000000001031e4b	je	0x1031e5a
0000000001031e4d	cmpl	$0x0, 0xa2ddc(%rip)
0000000001031e54	jne	0x1031ecf
0000000001031e56	movq	%rsi, 0x40(%rax)
0000000001031e5a	cmpq	$0x0, 0x48(%rsi)
0000000001031e5f	je	0x1031eaf
0000000001031e61	movq	0x50(%rdx), %rax
0000000001031e65	cmpl	$0x0, 0xa2dc4(%rip)
0000000001031e6c	jne	0x1031ea4
0000000001031e6e	movq	%rax, 0x50(%rsi)
0000000001031e72	movq	%rbx, 0x28(%rsi)
0000000001031e76	cmpl	$0x0, 0xa2db3(%rip)
0000000001031e7d	jne	0x1031e8b
0000000001031e7f	xorps	%xmm0, %xmm0
0000000001031e82	movups	%xmm0, 0x48(%rdx)
0000000001031e86	jmp	0x1031d1c
0000000001031e8b	leaq	0x48(%rdx), %rdi
0000000001031e8f	xorl	%eax, %eax
0000000001031e91	callq	runtime.gcWriteBarrier
0000000001031e96	leaq	0x50(%rdx), %rdi
0000000001031e9a	callq	runtime.gcWriteBarrier
0000000001031e9f	jmp	0x1031d1c
0000000001031ea4	leaq	0x50(%rsi), %rdi
0000000001031ea8	callq	runtime.gcWriteBarrier
0000000001031ead	jmp	0x1031e72
0000000001031eaf	cmpl	$0x0, 0xa2d7a(%rip)
0000000001031eb6	jne	0x1031ec2
0000000001031eb8	movq	$0x0, 0x50(%rsi)
0000000001031ec0	jmp	0x1031e72
0000000001031ec2	leaq	0x50(%rsi), %rdi
0000000001031ec6	xorl	%eax, %eax
0000000001031ec8	callq	runtime.gcWriteBarrier
0000000001031ecd	jmp	0x1031e72
0000000001031ecf	leaq	0x40(%rax), %rdi
0000000001031ed3	movq	%rsi, %rax
0000000001031ed6	callq	runtime.gcWriteBarrier
0000000001031edb	jmp	0x1031e5a
0000000001031ee0	leaq	0x10(%rsi), %rdi
0000000001031ee4	callq	runtime.gcWriteBarrier
0000000001031ee9	jmp	0x1031e48
0000000001031eee	leaq	0x40(%rax), %rdi
0000000001031ef2	movq	%rsi, %rax
0000000001031ef5	callq	runtime.gcWriteBarrier
0000000001031efa	jmp	0x1031e33
0000000001031eff	leaq	0x18(%rsi), %rdi
0000000001031f03	callq	runtime.gcWriteBarrier
0000000001031f08	jmp	0x1031e1d
0000000001031f0d	leaq	0x40(%rsi), %rdi
0000000001031f11	callq	runtime.gcWriteBarrier
0000000001031f16	jmp	0x1031e08
0000000001031f1b	movq	%rsi, %rax
0000000001031f1e	callq	runtime.gcWriteBarrier
0000000001031f23	jmp	0x1031ded
0000000001031f28	movq	%rdi, 0x20(%rsp)
0000000001031f2d	callq	runtime.cputicks
0000000001031f32	movq	(%rsp), %rbx
0000000001031f36	movq	0x28(%rsp), %rax
0000000001031f3b	movq	0x40(%rsp), %rcx
0000000001031f40	movq	0x18(%rsp), %rdx
0000000001031f45	movq	0x20(%rsp), %rdi
0000000001031f4a	jmp	0x1031c7b
0000000001031f4f	movq	$0x0, 0x50(%rsp)
0000000001031f58	movq	$0x0, 0x58(%rsp)
0000000001031f61	movq	0x30(%rsp), %rbp
0000000001031f66	addq	$0x38, %rsp
0000000001031f6a	retq
0000000001031f6b	callq	runtime.morestack_noctxt
0000000001031f70	jmp	"runtime.(*semaRoot).dequeue"
0000000001031f75	int3
0000000001031f76	int3
0000000001031f77	int3
0000000001031f78	int3
0000000001031f79	int3
0000000001031f7a	int3
0000000001031f7b	int3
0000000001031f7c	int3
0000000001031f7d	int3
0000000001031f7e	int3
0000000001031f7f	int3
runtime.(*semaRoot).rotateLeft:
0000000001031f80	movq	%gs:0x30, %rcx
0000000001031f89	cmpq	0x10(%rcx), %rsp
0000000001031f8d	jbe	0x1032188
0000000001031f93	subq	$0x18, %rsp
0000000001031f97	movq	%rbp, 0x10(%rsp)
0000000001031f9c	leaq	0x10(%rsp), %rbp
0000000001031fa1	movq	0x28(%rsp), %rax
0000000001031fa6	movq	0x10(%rax), %rcx
0000000001031faa	movq	0x40(%rax), %rdx
0000000001031fae	movq	0x18(%rax), %rbx
0000000001031fb2	movq	0x18(%rcx), %rsi
0000000001031fb6	movq	0x10(%rcx), %r8
0000000001031fba	cmpl	$0x0, 0xa2c6f(%rip)
0000000001031fc1	jne	0x1032141
0000000001031fc7	movq	%rax, 0x18(%rcx)
0000000001031fcb	movq	%rcx, 0x40(%rax)
0000000001031fcf	movq	%r8, 0x10(%rcx)
0000000001031fd3	testq	%r8, %r8
0000000001031fd6	je	0x1031fe9
0000000001031fd8	cmpl	$0x0, 0xa2c51(%rip)
0000000001031fdf	jne	0x103212a
0000000001031fe5	movq	%rcx, 0x40(%r8)
0000000001031fe9	cmpl	$0x0, 0xa2c40(%rip)
0000000001031ff0	jne	0x1032113
0000000001031ff6	movq	%rbx, 0x18(%rax)
0000000001031ffa	testq	%rbx, %rbx
0000000001031ffd	je	0x1032010
0000000001031fff	cmpl	$0x0, 0xa2c2a(%rip)
0000000001032006	jne	0x1032105
000000000103200c	movq	%rax, 0x40(%rbx)
0000000001032010	cmpl	$0x0, 0xa2c19(%rip)
0000000001032017	jne	0x10320ee
000000000103201d	movq	%rsi, 0x10(%rax)
0000000001032021	testq	%rsi, %rsi
0000000001032024	je	0x1032037
0000000001032026	cmpl	$0x0, 0xa2c03(%rip)
000000000103202d	jne	0x10320e0
0000000001032033	movq	%rax, 0x40(%rsi)
0000000001032037	cmpl	$0x0, 0xa2bf2(%rip)
000000000103203e	jne	0x10320c9
0000000001032044	movq	%rdx, 0x40(%rcx)
0000000001032048	testq	%rdx, %rdx
000000000103204b	je	0x10320a5
000000000103204d	movq	0x18(%rdx), %rbx
0000000001032051	cmpq	%rax, %rbx
0000000001032054	jne	0x103207b
0000000001032056	cmpl	$0x0, 0xa2bd3(%rip)
000000000103205d	jne	0x103206d
000000000103205f	movq	%rcx, 0x18(%rdx)
0000000001032063	movq	0x10(%rsp), %rbp
0000000001032068	addq	$0x18, %rsp
000000000103206c	retq
000000000103206d	leaq	0x18(%rdx), %rdi
0000000001032071	movq	%rcx, %rax
0000000001032074	callq	runtime.gcWriteBarrier
0000000001032079	jmp	0x1032063
000000000103207b	movq	0x10(%rdx), %rbx
000000000103207f	cmpq	%rax, %rbx
0000000001032082	jne	0x103216d
0000000001032088	cmpl	$0x0, 0xa2ba1(%rip)
000000000103208f	jne	0x1032097
0000000001032091	movq	%rcx, 0x10(%rdx)
0000000001032095	jmp	0x1032063
0000000001032097	leaq	0x10(%rdx), %rdi
000000000103209b	movq	%rcx, %rax
000000000103209e	callq	runtime.gcWriteBarrier
00000000010320a3	jmp	0x1032063
00000000010320a5	movq	0x20(%rsp), %rdx
00000000010320aa	testb	%al, (%rdx)
00000000010320ac	cmpl	$0x0, 0xa2b7d(%rip)
00000000010320b3	jne	0x10320bb
00000000010320b5	movq	%rcx, 0x8(%rdx)
00000000010320b9	jmp	0x1032063
00000000010320bb	leaq	0x8(%rdx), %rdi
00000000010320bf	movq	%rcx, %rax
00000000010320c2	callq	runtime.gcWriteBarrier
00000000010320c7	jmp	0x1032063
00000000010320c9	leaq	0x40(%rcx), %rdi
00000000010320cd	movq	%rax, %rbx
00000000010320d0	movq	%rdx, %rax
00000000010320d3	callq	runtime.gcWriteBarrier
00000000010320d8	movq	%rbx, %rax
00000000010320db	jmp	0x1032048
00000000010320e0	leaq	0x40(%rsi), %rdi
00000000010320e4	callq	runtime.gcWriteBarrier
00000000010320e9	jmp	0x1032037
00000000010320ee	leaq	0x10(%rax), %rdi
00000000010320f2	movq	%rax, %rbx
00000000010320f5	movq	%rsi, %rax
00000000010320f8	callq	runtime.gcWriteBarrier
00000000010320fd	movq	%rbx, %rax
0000000001032100	jmp	0x1032021
0000000001032105	leaq	0x40(%rbx), %rdi
0000000001032109	callq	runtime.gcWriteBarrier
000000000103210e	jmp	0x1032010
0000000001032113	leaq	0x18(%rax), %rdi
0000000001032117	movq	%rax, %r8
000000000103211a	movq	%rbx, %rax
000000000103211d	callq	runtime.gcWriteBarrier
0000000001032122	movq	%r8, %rax
0000000001032125	jmp	0x1031ffa
000000000103212a	leaq	0x40(%r8), %rdi
000000000103212e	movq	%rax, %r8
0000000001032131	movq	%rcx, %rax
0000000001032134	callq	runtime.gcWriteBarrier
0000000001032139	movq	%r8, %rax
000000000103213c	jmp	0x1031fe9
0000000001032141	leaq	0x18(%rcx), %rdi
0000000001032145	callq	runtime.gcWriteBarrier
000000000103214a	leaq	0x40(%rax), %rdi
000000000103214e	movq	%rax, %r9
0000000001032151	movq	%rcx, %rax
0000000001032154	callq	runtime.gcWriteBarrier
0000000001032159	leaq	0x10(%rax), %rdi
000000000103215d	movq	%r8, %rax
0000000001032160	callq	runtime.gcWriteBarrier
0000000001032165	movq	%r9, %rax
0000000001032168	jmp	0x1031fd3
000000000103216d	leaq	0x39b67(%rip), %rax
0000000001032174	movq	%rax, (%rsp)
0000000001032178	movq	$0x13, 0x8(%rsp)
0000000001032181	callq	runtime.throw
0000000001032186	ud2
0000000001032188	callq	runtime.morestack_noctxt
000000000103218d	jmp	"runtime.(*semaRoot).rotateLeft"
0000000001032192	int3
0000000001032193	int3
0000000001032194	int3
0000000001032195	int3
0000000001032196	int3
0000000001032197	int3
0000000001032198	int3
0000000001032199	int3
000000000103219a	int3
000000000103219b	int3
000000000103219c	int3
000000000103219d	int3
000000000103219e	int3
000000000103219f	int3
runtime.(*semaRoot).rotateRight:
00000000010321a0	movq	%gs:0x30, %rcx
00000000010321a9	cmpq	0x10(%rcx), %rsp
00000000010321ad	jbe	0x1032380
00000000010321b3	subq	$0x18, %rsp
00000000010321b7	movq	%rbp, 0x10(%rsp)
00000000010321bc	leaq	0x10(%rsp), %rbp
00000000010321c1	movq	0x28(%rsp), %rax
00000000010321c6	movq	0x18(%rax), %rcx
00000000010321ca	movq	0x40(%rax), %rdx
00000000010321ce	movq	0x10(%rax), %rbx
00000000010321d2	movq	0x18(%rcx), %rsi
00000000010321d6	movq	0x10(%rcx), %r8
00000000010321da	testq	%rsi, %rsi
00000000010321dd	je	0x10321f0
00000000010321df	cmpl	$0x0, 0xa2a4a(%rip)
00000000010321e6	jne	0x103234e
00000000010321ec	movq	%rcx, 0x40(%rsi)
00000000010321f0	cmpl	$0x0, 0xa2a39(%rip)
00000000010321f7	jne	0x1032322
00000000010321fd	movq	%rax, 0x10(%rcx)
0000000001032201	movq	%rcx, 0x40(%rax)
0000000001032205	movq	%r8, 0x18(%rax)
0000000001032209	testq	%r8, %r8
000000000103220c	je	0x103221f
000000000103220e	cmpl	$0x0, 0xa2a1b(%rip)
0000000001032215	jne	0x1032314
000000000103221b	movq	%rax, 0x40(%r8)
000000000103221f	cmpl	$0x0, 0xa2a0a(%rip)
0000000001032226	jne	0x10322fd
000000000103222c	movq	%rbx, 0x10(%rax)
0000000001032230	testq	%rbx, %rbx
0000000001032233	je	0x1032246
0000000001032235	cmpl	$0x0, 0xa29f4(%rip)
000000000103223c	jne	0x10322ef
0000000001032242	movq	%rax, 0x40(%rbx)
0000000001032246	cmpl	$0x0, 0xa29e3(%rip)
000000000103224d	jne	0x10322d8
0000000001032253	movq	%rdx, 0x40(%rcx)
0000000001032257	testq	%rdx, %rdx
000000000103225a	je	0x10322b4
000000000103225c	movq	0x18(%rdx), %rbx
0000000001032260	cmpq	%rax, %rbx
0000000001032263	jne	0x103228a
0000000001032265	cmpl	$0x0, 0xa29c4(%rip)
000000000103226c	jne	0x103227c
000000000103226e	movq	%rcx, 0x18(%rdx)
0000000001032272	movq	0x10(%rsp), %rbp
0000000001032277	addq	$0x18, %rsp
000000000103227b	retq
000000000103227c	leaq	0x18(%rdx), %rdi
0000000001032280	movq	%rcx, %rax
0000000001032283	callq	runtime.gcWriteBarrier
0000000001032288	jmp	0x1032272
000000000103228a	movq	0x10(%rdx), %rbx
000000000103228e	cmpq	%rax, %rbx
0000000001032291	jne	0x1032365
0000000001032297	cmpl	$0x0, 0xa2992(%rip)
000000000103229e	jne	0x10322a6
00000000010322a0	movq	%rcx, 0x10(%rdx)
00000000010322a4	jmp	0x1032272
00000000010322a6	leaq	0x10(%rdx), %rdi
00000000010322aa	movq	%rcx, %rax
00000000010322ad	callq	runtime.gcWriteBarrier
00000000010322b2	jmp	0x1032272
00000000010322b4	movq	0x20(%rsp), %rdx
00000000010322b9	testb	%al, (%rdx)
00000000010322bb	cmpl	$0x0, 0xa296e(%rip)
00000000010322c2	jne	0x10322ca
00000000010322c4	movq	%rcx, 0x8(%rdx)
00000000010322c8	jmp	0x1032272
00000000010322ca	leaq	0x8(%rdx), %rdi
00000000010322ce	movq	%rcx, %rax
00000000010322d1	callq	runtime.gcWriteBarrier
00000000010322d6	jmp	0x1032272
00000000010322d8	leaq	0x40(%rcx), %rdi
00000000010322dc	movq	%rax, %rbx
00000000010322df	movq	%rdx, %rax
00000000010322e2	callq	runtime.gcWriteBarrier
00000000010322e7	movq	%rbx, %rax
00000000010322ea	jmp	0x1032257
00000000010322ef	leaq	0x40(%rbx), %rdi
00000000010322f3	callq	runtime.gcWriteBarrier
00000000010322f8	jmp	0x1032246
00000000010322fd	leaq	0x10(%rax), %rdi
0000000001032301	movq	%rax, %rsi
0000000001032304	movq	%rbx, %rax
0000000001032307	callq	runtime.gcWriteBarrier
000000000103230c	movq	%rsi, %rax
000000000103230f	jmp	0x1032230
0000000001032314	leaq	0x40(%r8), %rdi
0000000001032318	callq	runtime.gcWriteBarrier
000000000103231d	jmp	0x103221f
0000000001032322	leaq	0x10(%rcx), %rdi
0000000001032326	callq	runtime.gcWriteBarrier
000000000103232b	leaq	0x40(%rax), %rdi
000000000103232f	movq	%rax, %rsi
0000000001032332	movq	%rcx, %rax
0000000001032335	callq	runtime.gcWriteBarrier
000000000103233a	leaq	0x18(%rsi), %rdi
000000000103233e	movq	%r8, %rax
0000000001032341	callq	runtime.gcWriteBarrier
0000000001032346	movq	%rsi, %rax
0000000001032349	jmp	0x1032209
000000000103234e	leaq	0x40(%rsi), %rdi
0000000001032352	movq	%rax, %rsi
0000000001032355	movq	%rcx, %rax
0000000001032358	callq	runtime.gcWriteBarrier
000000000103235d	movq	%rsi, %rax
0000000001032360	jmp	0x10321f0
0000000001032365	leaq	0x39bb0(%rip), %rax
000000000103236c	movq	%rax, (%rsp)
0000000001032370	movq	$0x14, 0x8(%rsp)
0000000001032379	callq	runtime.throw
000000000103237e	ud2
0000000001032380	callq	runtime.morestack_noctxt
0000000001032385	jmp	"runtime.(*semaRoot).rotateRight"
000000000103238a	int3
000000000103238b	int3
000000000103238c	int3
000000000103238d	int3
000000000103238e	int3
000000000103238f	int3
runtime.dumpregs:
0000000001032390	movq	%gs:0x30, %rcx
0000000001032399	leaq	-0x40(%rsp), %rax
000000000103239e	cmpq	0x10(%rcx), %rax
00000000010323a2	jbe	0x1032b33
00000000010323a8	subq	$0xc0, %rsp
00000000010323af	movq	%rbp, 0xb8(%rsp)
00000000010323b7	leaq	0xb8(%rsp), %rbp
00000000010323bf	movq	0xc8(%rsp), %rax
00000000010323c7	movq	0x8(%rax), %rcx
00000000010323cb	movq	0x30(%rcx), %rdx
00000000010323cf	leaq	0x10(%rdx), %rbx
00000000010323d3	testb	%al, (%rbx)
00000000010323d5	testb	%al, (%rax)
00000000010323d7	testb	%al, (%rcx)
00000000010323d9	movq	0x10(%rdx), %rcx
00000000010323dd	movq	%rcx, 0xa8(%rsp)
00000000010323e5	callq	runtime.printlock
00000000010323ea	leaq	0x3897f(%rip), %rax
00000000010323f1	movq	%rax, (%rsp)
00000000010323f5	movq	$0x7, 0x8(%rsp)
00000000010323fe	callq	runtime.printstring
0000000001032403	movq	0xa8(%rsp), %rax
000000000103240b	movq	%rax, (%rsp)
000000000103240f	callq	runtime.printhex
0000000001032414	callq	runtime.printnl
0000000001032419	callq	runtime.printunlock
000000000103241e	movq	0xc8(%rsp), %rax
0000000001032426	movq	0x8(%rax), %rcx
000000000103242a	movq	0x30(%rcx), %rdx
000000000103242e	leaq	0x10(%rdx), %rbx
0000000001032432	testb	%al, (%rbx)
0000000001032434	testb	%al, (%rcx)
0000000001032436	movq	0x18(%rdx), %rcx
000000000103243a	movq	%rcx, 0x88(%rsp)
0000000001032442	callq	runtime.printlock
0000000001032447	leaq	0x38930(%rip), %rax
000000000103244e	movq	%rax, (%rsp)
0000000001032452	movq	$0x7, 0x8(%rsp)
000000000103245b	callq	runtime.printstring
0000000001032460	movq	0x88(%rsp), %rax
0000000001032468	movq	%rax, (%rsp)
000000000103246c	callq	runtime.printhex
0000000001032471	callq	runtime.printnl
0000000001032476	callq	runtime.printunlock
000000000103247b	movq	0xc8(%rsp), %rax
0000000001032483	movq	0x8(%rax), %rcx
0000000001032487	movq	0x30(%rcx), %rdx
000000000103248b	leaq	0x10(%rdx), %rbx
000000000103248f	testb	%al, (%rbx)
0000000001032491	testb	%al, (%rcx)
0000000001032493	movq	0x20(%rdx), %rcx
0000000001032497	movq	%rcx, 0x68(%rsp)
000000000103249c	callq	runtime.printlock
00000000010324a1	leaq	0x388dd(%rip), %rax
00000000010324a8	movq	%rax, (%rsp)
00000000010324ac	movq	$0x7, 0x8(%rsp)
00000000010324b5	callq	runtime.printstring
00000000010324ba	movq	0x68(%rsp), %rax
00000000010324bf	movq	%rax, (%rsp)
00000000010324c3	callq	runtime.printhex
00000000010324c8	callq	runtime.printnl
00000000010324cd	callq	runtime.printunlock
00000000010324d2	movq	0xc8(%rsp), %rax
00000000010324da	movq	0x8(%rax), %rcx
00000000010324de	movq	0x30(%rcx), %rdx
00000000010324e2	leaq	0x10(%rdx), %rbx
00000000010324e6	testb	%al, (%rbx)
00000000010324e8	testb	%al, (%rcx)
00000000010324ea	movq	0x28(%rdx), %rcx
00000000010324ee	movq	%rcx, 0x20(%rsp)
00000000010324f3	callq	runtime.printlock
00000000010324f8	leaq	0x38894(%rip), %rax
00000000010324ff	movq	%rax, (%rsp)
0000000001032503	movq	$0x7, 0x8(%rsp)
000000000103250c	callq	runtime.printstring
0000000001032511	movq	0x20(%rsp), %rax
0000000001032516	movq	%rax, (%rsp)
000000000103251a	callq	runtime.printhex
000000000103251f	callq	runtime.printnl
0000000001032524	callq	runtime.printunlock
0000000001032529	movq	0xc8(%rsp), %rax
0000000001032531	movq	0x8(%rax), %rcx
0000000001032535	movq	0x30(%rcx), %rdx
0000000001032539	leaq	0x10(%rdx), %rbx
000000000103253d	testb	%al, (%rbx)
000000000103253f	testb	%al, (%rcx)
0000000001032541	movq	0x30(%rdx), %rcx
0000000001032545	movq	%rcx, 0x78(%rsp)
000000000103254a	callq	runtime.printlock
000000000103254f	leaq	0x38836(%rip), %rax
0000000001032556	movq	%rax, (%rsp)
000000000103255a	movq	$0x7, 0x8(%rsp)
0000000001032563	callq	runtime.printstring
0000000001032568	movq	0x78(%rsp), %rax
000000000103256d	movq	%rax, (%rsp)
0000000001032571	callq	runtime.printhex
0000000001032576	callq	runtime.printnl
000000000103257b	callq	runtime.printunlock
0000000001032580	movq	0xc8(%rsp), %rax
0000000001032588	movq	0x8(%rax), %rcx
000000000103258c	movq	0x30(%rcx), %rdx
0000000001032590	leaq	0x10(%rdx), %rbx
0000000001032594	testb	%al, (%rbx)
0000000001032596	testb	%al, (%rcx)
0000000001032598	movq	0x38(%rdx), %rcx
000000000103259c	movq	%rcx, 0xb0(%rsp)
00000000010325a4	callq	runtime.printlock
00000000010325a9	leaq	0x387f8(%rip), %rax
00000000010325b0	movq	%rax, (%rsp)
00000000010325b4	movq	$0x7, 0x8(%rsp)
00000000010325bd	callq	runtime.printstring
00000000010325c2	movq	0xb0(%rsp), %rax
00000000010325ca	movq	%rax, (%rsp)
00000000010325ce	callq	runtime.printhex
00000000010325d3	callq	runtime.printnl
00000000010325d8	callq	runtime.printunlock
00000000010325dd	movq	0xc8(%rsp), %rax
00000000010325e5	movq	0x8(%rax), %rcx
00000000010325e9	movq	0x30(%rcx), %rdx
00000000010325ed	leaq	0x10(%rdx), %rbx
00000000010325f1	testb	%al, (%rbx)
00000000010325f3	testb	%al, (%rcx)
00000000010325f5	movq	0x40(%rdx), %rcx
00000000010325f9	movq	%rcx, 0x18(%rsp)
00000000010325fe	callq	runtime.printlock
0000000001032603	leaq	0x3876d(%rip), %rax
000000000103260a	movq	%rax, (%rsp)
000000000103260e	movq	$0x7, 0x8(%rsp)
0000000001032617	callq	runtime.printstring
000000000103261c	movq	0x18(%rsp), %rax
0000000001032621	movq	%rax, (%rsp)
0000000001032625	callq	runtime.printhex
000000000103262a	callq	runtime.printnl
000000000103262f	callq	runtime.printunlock
0000000001032634	movq	0xc8(%rsp), %rax
000000000103263c	movq	0x8(%rax), %rcx
0000000001032640	movq	0x30(%rcx), %rdx
0000000001032644	leaq	0x10(%rdx), %rbx
0000000001032648	testb	%al, (%rbx)
000000000103264a	testb	%al, (%rcx)
000000000103264c	movq	0x48(%rdx), %rcx
0000000001032650	movq	%rcx, 0x30(%rsp)
0000000001032655	callq	runtime.printlock
000000000103265a	leaq	0x3874e(%rip), %rax
0000000001032661	movq	%rax, (%rsp)
0000000001032665	movq	$0x7, 0x8(%rsp)
000000000103266e	callq	runtime.printstring
0000000001032673	movq	0x30(%rsp), %rax
0000000001032678	movq	%rax, (%rsp)
000000000103267c	callq	runtime.printhex
0000000001032681	callq	runtime.printnl
0000000001032686	callq	runtime.printunlock
000000000103268b	movq	0xc8(%rsp), %rax
0000000001032693	movq	0x8(%rax), %rcx
0000000001032697	movq	0x30(%rcx), %rdx
000000000103269b	leaq	0x10(%rdx), %rbx
000000000103269f	testb	%al, (%rbx)
00000000010326a1	testb	%al, (%rcx)
00000000010326a3	movq	0x50(%rdx), %rcx
00000000010326a7	movq	%rcx, 0x38(%rsp)
00000000010326ac	callq	runtime.printlock
00000000010326b1	leaq	0x386aa(%rip), %rax
00000000010326b8	movq	%rax, (%rsp)
00000000010326bc	movq	$0x7, 0x8(%rsp)
00000000010326c5	callq	runtime.printstring
00000000010326ca	movq	0x38(%rsp), %rax
00000000010326cf	movq	%rax, (%rsp)
00000000010326d3	callq	runtime.printhex
00000000010326d8	callq	runtime.printnl
00000000010326dd	callq	runtime.printunlock
00000000010326e2	movq	0xc8(%rsp), %rax
00000000010326ea	movq	0x8(%rax), %rcx
00000000010326ee	movq	0x30(%rcx), %rdx
00000000010326f2	leaq	0x10(%rdx), %rbx
00000000010326f6	testb	%al, (%rbx)
00000000010326f8	testb	%al, (%rcx)
00000000010326fa	movq	0x58(%rdx), %rcx
00000000010326fe	movq	%rcx, 0x40(%rsp)
0000000001032703	callq	runtime.printlock
0000000001032708	leaq	0x3865a(%rip), %rax
000000000103270f	movq	%rax, (%rsp)
0000000001032713	movq	$0x7, 0x8(%rsp)
000000000103271c	callq	runtime.printstring
0000000001032721	movq	0x40(%rsp), %rax
0000000001032726	movq	%rax, (%rsp)
000000000103272a	callq	runtime.printhex
000000000103272f	callq	runtime.printnl
0000000001032734	callq	runtime.printunlock
0000000001032739	movq	0xc8(%rsp), %rax
0000000001032741	movq	0x8(%rax), %rcx
0000000001032745	movq	0x30(%rcx), %rdx
0000000001032749	leaq	0x10(%rdx), %rbx
000000000103274d	testb	%al, (%rbx)
000000000103274f	testb	%al, (%rcx)
0000000001032751	movq	0x60(%rdx), %rcx
0000000001032755	movq	%rcx, 0x48(%rsp)
000000000103275a	callq	runtime.printlock
000000000103275f	leaq	0x385d2(%rip), %rax
0000000001032766	movq	%rax, (%rsp)
000000000103276a	movq	$0x7, 0x8(%rsp)
0000000001032773	callq	runtime.printstring
0000000001032778	movq	0x48(%rsp), %rax
000000000103277d	movq	%rax, (%rsp)
0000000001032781	callq	runtime.printhex
0000000001032786	callq	runtime.printnl
000000000103278b	callq	runtime.printunlock
0000000001032790	movq	0xc8(%rsp), %rax
0000000001032798	movq	0x8(%rax), %rcx
000000000103279c	movq	0x30(%rcx), %rdx
00000000010327a0	leaq	0x10(%rdx), %rbx
00000000010327a4	testb	%al, (%rbx)
00000000010327a6	testb	%al, (%rcx)
00000000010327a8	movq	0x68(%rdx), %rcx
00000000010327ac	movq	%rcx, 0x50(%rsp)
00000000010327b1	callq	runtime.printlock
00000000010327b6	leaq	0x38582(%rip), %rax
00000000010327bd	movq	%rax, (%rsp)
00000000010327c1	movq	$0x7, 0x8(%rsp)
00000000010327ca	callq	runtime.printstring
00000000010327cf	movq	0x50(%rsp), %rax
00000000010327d4	movq	%rax, (%rsp)
00000000010327d8	callq	runtime.printhex
00000000010327dd	callq	runtime.printnl
00000000010327e2	callq	runtime.printunlock
00000000010327e7	movq	0xc8(%rsp), %rax
00000000010327ef	movq	0x8(%rax), %rcx
00000000010327f3	movq	0x30(%rcx), %rdx
00000000010327f7	leaq	0x10(%rdx), %rbx
00000000010327fb	testb	%al, (%rbx)
00000000010327fd	testb	%al, (%rcx)
00000000010327ff	movq	0x70(%rdx), %rcx
0000000001032803	movq	%rcx, 0x58(%rsp)
0000000001032808	callq	runtime.printlock
000000000103280d	leaq	0x38532(%rip), %rax
0000000001032814	movq	%rax, (%rsp)
0000000001032818	movq	$0x7, 0x8(%rsp)
0000000001032821	callq	runtime.printstring
0000000001032826	movq	0x58(%rsp), %rax
000000000103282b	movq	%rax, (%rsp)
000000000103282f	callq	runtime.printhex
0000000001032834	callq	runtime.printnl
0000000001032839	callq	runtime.printunlock
000000000103283e	movq	0xc8(%rsp), %rax
0000000001032846	movq	0x8(%rax), %rcx
000000000103284a	movq	0x30(%rcx), %rdx
000000000103284e	leaq	0x10(%rdx), %rbx
0000000001032852	testb	%al, (%rbx)
0000000001032854	testb	%al, (%rcx)
0000000001032856	movq	0x78(%rdx), %rcx
000000000103285a	movq	%rcx, 0x90(%rsp)
0000000001032862	callq	runtime.printlock
0000000001032867	leaq	0x384df(%rip), %rax
000000000103286e	movq	%rax, (%rsp)
0000000001032872	movq	$0x7, 0x8(%rsp)
000000000103287b	callq	runtime.printstring
0000000001032880	movq	0x90(%rsp), %rax
0000000001032888	movq	%rax, (%rsp)
000000000103288c	callq	runtime.printhex
0000000001032891	callq	runtime.printnl
0000000001032896	callq	runtime.printunlock
000000000103289b	movq	0xc8(%rsp), %rax
00000000010328a3	movq	0x8(%rax), %rcx
00000000010328a7	movq	0x30(%rcx), %rdx
00000000010328ab	leaq	0x10(%rdx), %rbx
00000000010328af	testb	%al, (%rbx)
00000000010328b1	testb	%al, (%rcx)
00000000010328b3	movq	0x80(%rdx), %rcx
00000000010328ba	movq	%rcx, 0x10(%rsp)
00000000010328bf	callq	runtime.printlock
00000000010328c4	leaq	0x38489(%rip), %rax
00000000010328cb	movq	%rax, (%rsp)
00000000010328cf	movq	$0x7, 0x8(%rsp)
00000000010328d8	callq	runtime.printstring
00000000010328dd	movq	0x10(%rsp), %rax
00000000010328e2	movq	%rax, (%rsp)
00000000010328e6	callq	runtime.printhex
00000000010328eb	callq	runtime.printnl
00000000010328f0	callq	runtime.printunlock
00000000010328f5	movq	0xc8(%rsp), %rax
00000000010328fd	movq	0x8(%rax), %rcx
0000000001032901	movq	0x30(%rcx), %rdx
0000000001032905	leaq	0x10(%rdx), %rbx
0000000001032909	testb	%al, (%rbx)
000000000103290b	testb	%al, (%rcx)
000000000103290d	movq	0x88(%rdx), %rcx
0000000001032914	movq	%rcx, 0x80(%rsp)
000000000103291c	callq	runtime.printlock
0000000001032921	leaq	0x38433(%rip), %rax
0000000001032928	movq	%rax, (%rsp)
000000000103292c	movq	$0x7, 0x8(%rsp)
0000000001032935	callq	runtime.printstring
000000000103293a	movq	0x80(%rsp), %rax
0000000001032942	movq	%rax, (%rsp)
0000000001032946	callq	runtime.printhex
000000000103294b	callq	runtime.printnl
0000000001032950	callq	runtime.printunlock
0000000001032955	movq	0xc8(%rsp), %rax
000000000103295d	movq	0x8(%rax), %rcx
0000000001032961	movq	0x30(%rcx), %rdx
0000000001032965	leaq	0x10(%rdx), %rbx
0000000001032969	testb	%al, (%rbx)
000000000103296b	testb	%al, (%rcx)
000000000103296d	movq	0x90(%rdx), %rcx
0000000001032974	movq	%rcx, 0x28(%rsp)
0000000001032979	callq	runtime.printlock
000000000103297e	leaq	0x3841c(%rip), %rax
0000000001032985	movq	%rax, (%rsp)
0000000001032989	movq	$0x7, 0x8(%rsp)
0000000001032992	callq	runtime.printstring
0000000001032997	movq	0x28(%rsp), %rax
000000000103299c	movq	%rax, (%rsp)
00000000010329a0	callq	runtime.printhex
00000000010329a5	callq	runtime.printnl
00000000010329aa	callq	runtime.printunlock
00000000010329af	movq	0xc8(%rsp), %rax
00000000010329b7	movq	0x8(%rax), %rcx
00000000010329bb	movq	0x30(%rcx), %rdx
00000000010329bf	leaq	0x10(%rdx), %rbx
00000000010329c3	testb	%al, (%rbx)
00000000010329c5	testb	%al, (%rcx)
00000000010329c7	movq	0x98(%rdx), %rcx
00000000010329ce	movq	%rcx, 0x98(%rsp)
00000000010329d6	callq	runtime.printlock
00000000010329db	leaq	0x383b8(%rip), %rax
00000000010329e2	movq	%rax, (%rsp)
00000000010329e6	movq	$0x7, 0x8(%rsp)
00000000010329ef	callq	runtime.printstring
00000000010329f4	movq	0x98(%rsp), %rax
00000000010329fc	movq	%rax, (%rsp)
0000000001032a00	callq	runtime.printhex
0000000001032a05	callq	runtime.printnl
0000000001032a0a	callq	runtime.printunlock
0000000001032a0f	movq	0xc8(%rsp), %rax
0000000001032a17	movq	0x8(%rax), %rcx
0000000001032a1b	movq	0x30(%rcx), %rdx
0000000001032a1f	leaq	0x10(%rdx), %rbx
0000000001032a23	testb	%al, (%rbx)
0000000001032a25	testb	%al, (%rcx)
0000000001032a27	movq	0xa0(%rdx), %rcx
0000000001032a2e	movq	%rcx, 0xa0(%rsp)
0000000001032a36	callq	runtime.printlock
0000000001032a3b	leaq	0x382d3(%rip), %rax
0000000001032a42	movq	%rax, (%rsp)
0000000001032a46	movq	$0x7, 0x8(%rsp)
0000000001032a4f	callq	runtime.printstring
0000000001032a54	movq	0xa0(%rsp), %rax
0000000001032a5c	movq	%rax, (%rsp)
0000000001032a60	callq	runtime.printhex
0000000001032a65	callq	runtime.printnl
0000000001032a6a	callq	runtime.printunlock
0000000001032a6f	movq	0xc8(%rsp), %rax
0000000001032a77	movq	0x8(%rax), %rcx
0000000001032a7b	movq	0x30(%rcx), %rdx
0000000001032a7f	leaq	0x10(%rdx), %rbx
0000000001032a83	testb	%al, (%rbx)
0000000001032a85	testb	%al, (%rcx)
0000000001032a87	movq	0xa8(%rdx), %rcx
0000000001032a8e	movq	%rcx, 0x70(%rsp)
0000000001032a93	callq	runtime.printlock
0000000001032a98	leaq	0x3827d(%rip), %rax
0000000001032a9f	movq	%rax, (%rsp)
0000000001032aa3	movq	$0x7, 0x8(%rsp)
0000000001032aac	callq	runtime.printstring
0000000001032ab1	movq	0x70(%rsp), %rax
0000000001032ab6	movq	%rax, (%rsp)
0000000001032aba	callq	runtime.printhex
0000000001032abf	callq	runtime.printnl
0000000001032ac4	callq	runtime.printunlock
0000000001032ac9	movq	0xc8(%rsp), %rax
0000000001032ad1	movq	0x8(%rax), %rax
0000000001032ad5	movq	0x30(%rax), %rcx
0000000001032ad9	leaq	0x10(%rcx), %rdx
0000000001032add	testb	%al, (%rdx)
0000000001032adf	testb	%al, (%rax)
0000000001032ae1	movq	0xb0(%rcx), %rax
0000000001032ae8	movq	%rax, 0x60(%rsp)
0000000001032aed	callq	runtime.printlock
0000000001032af2	leaq	0x38231(%rip), %rax
0000000001032af9	movq	%rax, (%rsp)
0000000001032afd	movq	$0x7, 0x8(%rsp)
0000000001032b06	callq	runtime.printstring
0000000001032b0b	movq	0x60(%rsp), %rax
0000000001032b10	movq	%rax, (%rsp)
0000000001032b14	callq	runtime.printhex
0000000001032b19	callq	runtime.printnl
0000000001032b1e	callq	runtime.printunlock
0000000001032b23	movq	0xb8(%rsp), %rbp
0000000001032b2b	addq	$0xc0, %rsp
0000000001032b32	retq
0000000001032b33	callq	runtime.morestack_noctxt
0000000001032b38	jmp	runtime.dumpregs
0000000001032b3d	int3
0000000001032b3e	int3
0000000001032b3f	int3
runtime.(*sigctxt).preparePanic:
0000000001032b40	movq	%gs:0x30, %rcx
0000000001032b49	cmpq	0x10(%rcx), %rsp
0000000001032b4d	jbe	0x1032cb3
0000000001032b53	subq	$0x48, %rsp
0000000001032b57	movq	%rbp, 0x40(%rsp)
0000000001032b5c	leaq	0x40(%rsp), %rbp
0000000001032b61	movl	0x58(%rsp), %eax
0000000001032b65	cmpl	$0x8, %eax
0000000001032b68	jne	0x1032ca2
0000000001032b6e	movq	0x60(%rsp), %rax
0000000001032b73	cmpq	$0x0, 0x100(%rax)
0000000001032b7b	jne	0x1032bbc
0000000001032b7d	movq	0x110(%rax), %rcx
0000000001032b84	movzbl	(%rcx), %edx
0000000001032b87	movl	%edx, %ebx
0000000001032b89	andl	$-0x10, %edx
0000000001032b8c	cmpb	$0x40, %dl
0000000001032b8f	jne	0x1032c94
0000000001032b95	movl	$0x1, %edx
0000000001032b9a	cmpq	$0x4, %rdx
0000000001032b9e	jae	0x1032cac
0000000001032ba4	movzbl	(%rcx,%rdx), %ecx
0000000001032ba8	cmpb	$-0xa, %cl
0000000001032bab	jne	0x1032c86
0000000001032bb1	movq	$0x7, 0x100(%rax)
0000000001032bbc	movq	0x50(%rsp), %rcx
0000000001032bc1	movq	0x8(%rcx), %rdx
0000000001032bc5	movq	0x30(%rdx), %rbx
0000000001032bc9	movq	0x48(%rbx), %rsi
0000000001032bcd	movq	%rsi, 0x28(%rsp)
0000000001032bd2	leaq	0x10(%rbx), %r8
0000000001032bd6	testb	%al, (%r8)
0000000001032bd9	testb	%al, (%rcx)
0000000001032bdb	testb	%al, (%rdx)
0000000001032bdd	movq	(%rsi), %rdx
0000000001032be0	movq	0x90(%rbx), %rbx
0000000001032be7	movq	%rbx, 0x20(%rsp)
0000000001032bec	movq	%rdx, 0x10(%rsp)
0000000001032bf1	movq	%rax, (%rsp)
0000000001032bf5	movq	%rbx, 0x8(%rsp)
0000000001032bfa	callq	runtime.shouldPushSigpanic
0000000001032bff	leaq	0x18(%rsp), %rax
0000000001032c04	cmpb	$0x0, (%rax)
0000000001032c07	je	0x1032c7f
0000000001032c09	movq	0x28(%rsp), %rax
0000000001032c0e	addq	$-0x8, %rax
0000000001032c12	movq	%rax, %rcx
0000000001032c15	movq	0x20(%rsp), %rdx
0000000001032c1a	movq	%rdx, (%rax)
0000000001032c1d	movq	0x50(%rsp), %rax
0000000001032c22	movq	0x8(%rax), %rdx
0000000001032c26	movq	0x30(%rdx), %rbx
0000000001032c2a	leaq	0x10(%rbx), %rsi
0000000001032c2e	testb	%al, (%rsi)
0000000001032c30	testb	%al, (%rdx)
0000000001032c32	movq	%rcx, 0x48(%rbx)
0000000001032c36	leaq	0x24a43(%rip), %rcx
0000000001032c3d	movq	%rcx, 0x30(%rsp)
0000000001032c42	leaq	0x3c427(%rip), %rcx
0000000001032c49	movq	%rcx, 0x38(%rsp)
0000000001032c4e	testb	%al, (%rcx)
0000000001032c50	leaq	0x38(%rsp), %rcx
0000000001032c55	testb	%al, (%rcx)
0000000001032c57	movq	0x8(%rax), %rax
0000000001032c5b	movq	0x30(%rax), %rcx
0000000001032c5f	leaq	0x10(%rcx), %rdx
0000000001032c63	testb	%al, (%rdx)
0000000001032c65	testb	%al, (%rax)
0000000001032c67	movq	0x3c402(%rip), %rax
0000000001032c6e	movq	%rax, 0x90(%rcx)
0000000001032c75	movq	0x40(%rsp), %rbp
0000000001032c7a	addq	$0x48, %rsp
0000000001032c7e	retq
0000000001032c7f	movq	0x50(%rsp), %rax
0000000001032c84	jmp	0x1032c36
0000000001032c86	cmpb	$-0x9, %cl
0000000001032c89	je	0x1032bb1
0000000001032c8f	jmp	0x1032bbc
0000000001032c94	cmpb	$0x66, %bl
0000000001032c97	sete	%bl
0000000001032c9a	movzbl	%bl, %edx
0000000001032c9d	jmp	0x1032b9a
0000000001032ca2	movq	0x60(%rsp), %rax
0000000001032ca7	jmp	0x1032bbc
0000000001032cac	callq	runtime.panicindex
0000000001032cb1	ud2
0000000001032cb3	callq	runtime.morestack_noctxt
0000000001032cb8	jmp	"runtime.(*sigctxt).preparePanic"
0000000001032cbd	int3
0000000001032cbe	int3
0000000001032cbf	int3
runtime.(*sigctxt).fixsigcode:
0000000001032cc0	movl	0x10(%rsp), %eax
0000000001032cc4	cmpl	$0x5, %eax
0000000001032cc7	jne	0x1032d0d
0000000001032cc9	movq	0x8(%rsp), %rax
0000000001032cce	movq	0x8(%rax), %rcx
0000000001032cd2	movq	0x30(%rcx), %rdx
0000000001032cd6	movq	0x90(%rdx), %rbx
0000000001032cdd	addq	$-0x2, %rbx
0000000001032ce1	leaq	0x10(%rdx), %rsi
0000000001032ce5	testb	%al, (%rsi)
0000000001032ce7	testb	%al, (%rdx)
0000000001032ce9	testb	%al, (%rax)
0000000001032ceb	testb	%al, (%rcx)
0000000001032ced	movzbl	0x1(%rbx), %ecx
0000000001032cf1	cmpb	$-0x34, %cl
0000000001032cf4	je	0x1032d05
0000000001032cf6	cmpb	$-0x33, (%rbx)
0000000001032cf9	je	0x1032d06
0000000001032cfb	movq	(%rax), %rax
0000000001032cfe	movl	$0x0, 0x8(%rax)
0000000001032d05	retq
0000000001032d06	cmpb	$0x3, %cl
0000000001032d09	jne	0x1032cfb
0000000001032d0b	jmp	0x1032d05
0000000001032d0d	cmpl	$0xb, %eax
0000000001032d10	jne	0x1032d05
0000000001032d12	movq	0x8(%rsp), %rax
0000000001032d17	movq	(%rax), %rcx
0000000001032d1a	movslq	0x8(%rcx), %rdx
0000000001032d1e	testq	%rdx, %rdx
0000000001032d21	jne	0x1032d05
0000000001032d23	movl	$0x1, 0x8(%rcx)
0000000001032d2a	movq	(%rax), %rax
0000000001032d2d	movabsq	$0xb01dfacedebac1e, %rcx
0000000001032d37	movq	%rcx, 0x18(%rax)
0000000001032d3b	jmp	0x1032d05
0000000001032d3d	int3
0000000001032d3e	int3
0000000001032d3f	int3
runtime.sighandler:
0000000001032d40	movq	%gs:0x30, %rcx
0000000001032d49	leaq	-0x8(%rsp), %rax
0000000001032d4e	cmpq	0x10(%rcx), %rax
0000000001032d52	jbe	0x10334b9
0000000001032d58	subq	$0x88, %rsp
0000000001032d5f	movq	%rbp, 0x80(%rsp)
0000000001032d67	leaq	0x80(%rsp), %rbp
0000000001032d6f	movq	%gs:0x30, %rax
0000000001032d78	xorps	%xmm0, %xmm0
0000000001032d7b	movups	%xmm0, 0x70(%rsp)
0000000001032d80	movq	0x98(%rsp), %rcx
0000000001032d88	movq	%rcx, 0x70(%rsp)
0000000001032d8d	movq	0xa0(%rsp), %rbx
0000000001032d95	movq	%rbx, 0x78(%rsp)
0000000001032d9a	movl	0x90(%rsp), %esi
0000000001032da1	cmpl	$0x1b, %esi
0000000001032da4	je	0x1033450
0000000001032daa	movq	%rax, 0x50(%rsp)
0000000001032daf	cmpl	$0x5, %esi
0000000001032db2	jne	0x1032dc4
0000000001032db4	movq	runtime.testSigtrap(%rip), %rdx
0000000001032dbb	testq	%rdx, %rdx
0000000001032dbe	jne	0x1033405
0000000001032dc4	cmpl	$0x20, %esi
0000000001032dc7	jae	0x10333f4
0000000001032dcd	cmpq	$0x20, %rsi
0000000001032dd1	jae	0x10334b2
0000000001032dd7	leaq	(%rsi,%rsi,2), %rcx
0000000001032ddb	leaq	runtime.sigtable(%rip), %rdx
0000000001032de2	movl	(%rdx,%rcx,8), %ecx
0000000001032de5	btl	$0x3, %ecx
0000000001032de9	jae	0x10333e7
0000000001032def	movq	0xa8(%rsp), %rbx
0000000001032df7	testb	%al, (%rbx)
0000000001032df9	leaq	0xb6(%rbx), %rdi
0000000001032e00	cmpb	$0x0, (%rdi)
0000000001032e03	je	0x1032e0b
0000000001032e05	andl	$-0x9, %ecx
0000000001032e08	orl	$0x4, %ecx
0000000001032e0b	movq	0x78(%rsp), %rdi
0000000001032e10	movq	0x30(%rdi), %r8
0000000001032e14	leaq	0x10(%r8), %r9
0000000001032e18	testb	%al, (%r9)
0000000001032e1b	testb	%al, (%rdi)
0000000001032e1d	movq	0x90(%r8), %rdi
0000000001032e24	leaq	0x24855(%rip), %r8
0000000001032e2b	movq	%r8, 0x60(%rsp)
0000000001032e30	leaq	0x3bf29(%rip), %r8
0000000001032e37	movq	%r8, 0x68(%rsp)
0000000001032e3c	leaq	0x68(%rsp), %r9
0000000001032e41	testb	%al, (%r9)
0000000001032e44	movq	0x70(%rsp), %r9
0000000001032e49	cmpq	%rdi, (%r8)
0000000001032e4c	movl	$0x4, %edi
0000000001032e51	cmovel	%edi, %ecx
0000000001032e54	movslq	0x8(%r9), %rdi
0000000001032e58	testq	%rdi, %rdi
0000000001032e5b	je	0x1032e6a
0000000001032e5d	btl	$0x3, %ecx
0000000001032e61	jb	0x103337b
0000000001032e67	testq	%rdi, %rdi
0000000001032e6a	movl	%ecx, 0x28(%rsp)
0000000001032e6e	jne	0x103336c
0000000001032e74	movl	%esi, (%rsp)
0000000001032e77	callq	runtime.sigsend
0000000001032e7c	leaq	0x8(%rsp), %rax
0000000001032e81	cmpb	$0x0, (%rax)
0000000001032e84	jne	0x103335c
0000000001032e8a	movq	0x70(%rsp), %rax
0000000001032e8f	movslq	0x8(%rax), %rax
0000000001032e93	testq	%rax, %rax
0000000001032e96	jne	0x1033350
0000000001032e9c	movl	0x90(%rsp), %eax
0000000001032ea3	movl	%eax, %ecx
0000000001032ea5	shrl	$0x5, %eax
0000000001032ea8	cmpq	$0x1, %rax
0000000001032eac	jae	0x10334ab
0000000001032eb2	leaq	0xa1df7(%rip), %rdx
0000000001032eb9	leaq	(%rdx,%rax,4), %rax
0000000001032ebd	movl	(%rax), %eax
0000000001032ebf	btl	%ecx, %eax
0000000001032ec2	jb	0x1033340
0000000001032ec8	movl	0x28(%rsp), %eax
0000000001032ecc	btl	$0x1, %eax
0000000001032ed0	jb	0x1033328
0000000001032ed6	btl	$0x2, %eax
0000000001032eda	jae	0x1033318
0000000001032ee0	movq	0x50(%rsp), %rax
0000000001032ee5	movq	0x30(%rax), %rdx
0000000001032ee9	movl	$0x1, 0xec(%rdx)
0000000001032ef3	movq	0x30(%rax), %rdx
0000000001032ef7	leaq	0xc8(%rdx), %rbx
0000000001032efe	testb	%al, (%rbx)
0000000001032f00	movq	0xa8(%rsp), %rbx
0000000001032f08	movq	%rbx, %rsi
0000000001032f0b	movq	%rbx, 0xc8(%rdx)
0000000001032f12	cmpl	$0x0, 0xa1bc7(%rip)
0000000001032f19	je	0x10332f7
0000000001032f1f	cmpl	$0x20, %ecx
0000000001032f22	jae	0x10332ba
0000000001032f28	cmpq	$0x20, %rcx
0000000001032f2c	jae	0x10334a4
0000000001032f32	leaq	(%rcx,%rcx,2), %rax
0000000001032f36	leaq	runtime.sigtable(%rip), %rcx
0000000001032f3d	movq	0x10(%rcx,%rax,8), %rdx
0000000001032f42	movq	%rdx, 0x48(%rsp)
0000000001032f47	movq	0x8(%rcx,%rax,8), %rax
0000000001032f4c	movq	%rax, 0x58(%rsp)
0000000001032f51	callq	runtime.printlock
0000000001032f56	movq	0x58(%rsp), %rax
0000000001032f5b	movq	%rax, (%rsp)
0000000001032f5f	movq	0x48(%rsp), %rax
0000000001032f64	movq	%rax, 0x8(%rsp)
0000000001032f69	callq	runtime.printstring
0000000001032f6e	callq	runtime.printnl
0000000001032f73	callq	runtime.printunlock
0000000001032f78	movq	0x50(%rsp), %rax
0000000001032f7d	movq	0x30(%rax), %rcx
0000000001032f81	movq	0x78(%rsp), %rdx
0000000001032f86	movq	0x30(%rdx), %rbx
0000000001032f8a	leaq	0x10(%rbx), %rsi
0000000001032f8e	testb	%al, (%rsi)
0000000001032f90	testb	%al, (%rdx)
0000000001032f92	movq	0x70(%rsp), %rdx
0000000001032f97	movq	0xe0(%rcx), %rcx
0000000001032f9e	movq	%rcx, 0x40(%rsp)
0000000001032fa3	movq	0x90(%rbx), %rbx
0000000001032faa	movq	%rbx, 0x30(%rsp)
0000000001032faf	movslq	0x8(%rdx), %rdx
0000000001032fb3	movq	%rdx, 0x38(%rsp)
0000000001032fb8	callq	runtime.printlock
0000000001032fbd	leaq	0x37b0b(%rip), %rax
0000000001032fc4	movq	%rax, (%rsp)
0000000001032fc8	movq	$0x3, 0x8(%rsp)
0000000001032fd1	callq	runtime.printstring
0000000001032fd6	movq	0x30(%rsp), %rax
0000000001032fdb	movq	%rax, (%rsp)
0000000001032fdf	callq	runtime.printhex
0000000001032fe4	leaq	0x37ad8(%rip), %rax
0000000001032feb	movq	%rax, (%rsp)
0000000001032fef	movq	$0x3, 0x8(%rsp)
0000000001032ff8	callq	runtime.printstring
0000000001032ffd	movq	0x40(%rsp), %rax
0000000001033002	movq	%rax, (%rsp)
0000000001033006	callq	runtime.printint
000000000103300b	leaq	0x37ef3(%rip), %rax
0000000001033012	movq	%rax, (%rsp)
0000000001033016	movq	$0x9, 0x8(%rsp)
000000000103301f	callq	runtime.printstring
0000000001033024	movq	0x38(%rsp), %rax
0000000001033029	movq	%rax, (%rsp)
000000000103302d	callq	runtime.printuint
0000000001033032	callq	runtime.printnl
0000000001033037	callq	runtime.printunlock
000000000103303c	movq	0x50(%rsp), %rax
0000000001033041	movq	0x30(%rax), %rcx
0000000001033045	cmpq	$0x0, 0x160(%rcx)
000000000103304d	je	0x10332ad
0000000001033053	cmpl	$0x0, 0x130(%rcx)
000000000103305a	jle	0x10332a0
0000000001033060	movq	(%rcx), %rcx
0000000001033063	movq	0xa8(%rsp), %rdx
000000000103306b	cmpq	%rcx, %rdx
000000000103306e	je	0x1033268
0000000001033074	movq	%rdx, 0xa8(%rsp)
000000000103307c	callq	runtime.printlock
0000000001033081	callq	runtime.printnl
0000000001033086	callq	runtime.printunlock
000000000103308b	movq	%gs:0x30, %rax
0000000001033094	movl	runtime.traceback_cache(%rip), %ecx
000000000103309a	movq	0x30(%rax), %rax
000000000103309e	movzbl	0x125(%rax), %eax
00000000010330a5	movzbl	%al, %edx
00000000010330a8	movl	%ecx, %ebx
00000000010330aa	shrl	$0x2, %ecx
00000000010330ad	testb	%al, %al
00000000010330af	cmovnel	%edx, %ecx
00000000010330b2	testl	%ecx, %ecx
00000000010330b4	jg	0x1033144
00000000010330ba	btl	$0x0, %ebx
00000000010330be	jae	0x10330eb
00000000010330c0	movl	runtime.crashing(%rip), %eax
00000000010330c6	incl	%eax
00000000010330c8	movl	%eax, runtime.crashing(%rip)
00000000010330ce	movq	0x859f3(%rip), %rcx
00000000010330d5	subq	0x859fc(%rip), %rcx
00000000010330dc	subl	runtime.extraMCount(%rip), %ecx
00000000010330e2	cmpl	%ecx, %eax
00000000010330e4	jl	0x1033107
00000000010330e6	callq	runtime.crash
00000000010330eb	movl	$0x2, (%rsp)
00000000010330f2	callq	runtime.exit
00000000010330f7	movq	0x80(%rsp), %rbp
00000000010330ff	addq	$0x88, %rsp
0000000001033106	retq
0000000001033107	callq	runtime.printlock
000000000103310c	leaq	0x37d3e(%rip), %rax
0000000001033113	movq	%rax, (%rsp)
0000000001033117	movq	$0x8, 0x8(%rsp)
0000000001033120	callq	runtime.printstring
0000000001033125	callq	runtime.printunlock
000000000103312a	movl	$0x3, (%rsp)
0000000001033131	callq	runtime.raiseproc
0000000001033136	movl	$0x4c4b40, (%rsp)
000000000103313d	callq	runtime.usleep
0000000001033142	jmp	0x10330e6
0000000001033144	movl	%ebx, 0x2c(%rsp)
0000000001033148	movq	0xa8(%rsp), %rax
0000000001033150	movq	%rax, (%rsp)
0000000001033154	callq	runtime.goroutineheader
0000000001033159	movq	0x78(%rsp), %rax
000000000103315e	movq	0x30(%rax), %rcx
0000000001033162	leaq	0x10(%rcx), %rdx
0000000001033166	testb	%al, (%rdx)
0000000001033168	testb	%al, (%rax)
000000000103316a	movq	0x90(%rcx), %rax
0000000001033171	movq	0x48(%rcx), %rcx
0000000001033175	movq	%rax, (%rsp)
0000000001033179	movq	%rcx, 0x8(%rsp)
000000000103317e	movq	$0x0, 0x10(%rsp)
0000000001033187	movq	0xa8(%rsp), %rax
000000000103318f	movq	%rax, 0x18(%rsp)
0000000001033194	callq	runtime.tracebacktrap
0000000001033199	cmpl	$0x0, 0xa1940(%rip)
00000000010331a0	jle	0x103325b
00000000010331a6	movq	0x50(%rsp), %rax
00000000010331ab	movq	0x30(%rax), %rcx
00000000010331af	movq	0xc0(%rcx), %rcx
00000000010331b6	movq	0xa8(%rsp), %rdx
00000000010331be	cmpq	%rcx, %rdx
00000000010331c1	je	0x10331d7
00000000010331c3	testq	%rcx, %rcx
00000000010331c6	je	0x10331d7
00000000010331c8	movl	0x90(%rcx), %ecx
00000000010331ce	btrl	$0xc, %ecx
00000000010331d2	cmpl	$0x2, %ecx
00000000010331d5	je	0x1033211
00000000010331d7	cmpl	$0x0, 0xa1902(%rip)
00000000010331de	je	0x10331f7
00000000010331e0	leaq	0x70(%rsp), %rax
00000000010331e5	movq	%rax, (%rsp)
00000000010331e9	callq	runtime.dumpregs
00000000010331ee	movl	0x2c(%rsp), %ebx
00000000010331f2	jmp	0x10330ba
00000000010331f7	movq	%rdx, (%rsp)
00000000010331fb	callq	runtime.tracebackothers
0000000001033200	callq	runtime.printlock
0000000001033205	callq	runtime.printnl
000000000103320a	callq	runtime.printunlock
000000000103320f	jmp	0x10331e0
0000000001033211	movq	0x30(%rax), %rcx
0000000001033215	movq	0xc0(%rcx), %rcx
000000000103321c	movq	%rcx, (%rsp)
0000000001033220	callq	runtime.goroutineheader
0000000001033225	movq	0x50(%rsp), %rax
000000000103322a	movq	0x30(%rax), %rax
000000000103322e	movq	0xc0(%rax), %rax
0000000001033235	movq	%rax, 0x18(%rsp)
000000000103323a	movq	$-0x1, (%rsp)
0000000001033242	movq	$-0x1, 0x8(%rsp)
000000000103324b	movq	$0x0, 0x10(%rsp)
0000000001033254	callq	runtime.traceback
0000000001033259	jmp	0x10331e0
000000000103325b	movq	0xa8(%rsp), %rdx
0000000001033263	jmp	0x10331d7
0000000001033268	callq	runtime.printlock
000000000103326d	leaq	0x3aa98(%rip), %rax
0000000001033274	movq	%rax, (%rsp)
0000000001033278	movq	$0x24, 0x8(%rsp)
0000000001033281	callq	runtime.printstring
0000000001033286	callq	runtime.printunlock
000000000103328b	movq	0x50(%rsp), %rax
0000000001033290	movq	0x30(%rax), %rcx
0000000001033294	movq	0x160(%rcx), %rdx
000000000103329b	jmp	0x1033074
00000000010332a0	movq	0xa8(%rsp), %rdx
00000000010332a8	jmp	0x1033074
00000000010332ad	movq	0xa8(%rsp), %rdx
00000000010332b5	jmp	0x1033074
00000000010332ba	callq	runtime.printlock
00000000010332bf	leaq	0x37a33(%rip), %rax
00000000010332c6	movq	%rax, (%rsp)
00000000010332ca	movq	$0x7, 0x8(%rsp)
00000000010332d3	callq	runtime.printstring
00000000010332d8	movl	0x90(%rsp), %eax
00000000010332df	movq	%rax, (%rsp)
00000000010332e3	callq	runtime.printuint
00000000010332e8	callq	runtime.printnl
00000000010332ed	callq	runtime.printunlock
00000000010332f2	jmp	0x1032f78
00000000010332f7	callq	runtime.startpanic_m
00000000010332fc	movl	0x90(%rsp), %ecx
0000000001033303	cmpl	$0x20, %ecx
0000000001033306	movq	0x50(%rsp), %rax
000000000103330b	movq	0xa8(%rsp), %rsi
0000000001033313	jmp	0x1032f22
0000000001033318	movq	0x80(%rsp), %rbp
0000000001033320	addq	$0x88, %rsp
0000000001033327	retq
0000000001033328	movl	%ecx, (%rsp)
000000000103332b	callq	runtime.dieFromSignal
0000000001033330	movl	0x28(%rsp), %eax
0000000001033334	movl	0x90(%rsp), %ecx
000000000103333b	jmp	0x1032ed6
0000000001033340	movq	0x80(%rsp), %rbp
0000000001033348	addq	$0x88, %rsp
000000000103334f	retq
0000000001033350	movl	0x90(%rsp), %ecx
0000000001033357	jmp	0x1032ec8
000000000103335c	movq	0x80(%rsp), %rbp
0000000001033364	addq	$0x88, %rsp
000000000103336b	retq
000000000103336c	btl	$0x0, %ecx
0000000001033370	jb	0x1032e74
0000000001033376	jmp	0x1032e8a
000000000103337b	movl	%esi, 0xe0(%rbx)
0000000001033381	movq	0x70(%rsp), %rax
0000000001033386	movslq	0x8(%rax), %rax
000000000103338a	movq	%rax, 0x100(%rbx)
0000000001033391	movq	0x70(%rsp), %rax
0000000001033396	movq	0x18(%rax), %rax
000000000103339a	movq	%rax, 0x108(%rbx)
00000000010333a1	movq	0x78(%rsp), %rax
00000000010333a6	movq	0x30(%rax), %rcx
00000000010333aa	leaq	0x10(%rcx), %rdx
00000000010333ae	testb	%al, (%rdx)
00000000010333b0	testb	%al, (%rax)
00000000010333b2	movq	0x90(%rcx), %rax
00000000010333b9	movq	%rax, 0x110(%rbx)
00000000010333c0	leaq	0x70(%rsp), %rax
00000000010333c5	movq	%rax, (%rsp)
00000000010333c9	movl	%esi, 0x8(%rsp)
00000000010333cd	movq	%rbx, 0x10(%rsp)
00000000010333d2	callq	"runtime.(*sigctxt).preparePanic"
00000000010333d7	movq	0x80(%rsp), %rbp
00000000010333df	addq	$0x88, %rsp
00000000010333e6	retq
00000000010333e7	movq	0xa8(%rsp), %rbx
00000000010333ef	jmp	0x1032e0b
00000000010333f4	leaq	runtime.sigtable(%rip), %rdx
00000000010333fb	movl	$0x4, %ecx
0000000001033400	jmp	0x1032de5
0000000001033405	movq	%rcx, (%rsp)
0000000001033409	leaq	0x70(%rsp), %rax
000000000103340e	movq	%rax, 0x8(%rsp)
0000000001033413	movq	0xa8(%rsp), %rcx
000000000103341b	movq	%rcx, 0x10(%rsp)
0000000001033420	movq	(%rdx), %rbx
0000000001033423	callq	*%rbx
0000000001033425	leaq	0x18(%rsp), %rax
000000000103342a	cmpb	$0x0, (%rax)
000000000103342d	jne	0x1033440
000000000103342f	movq	0x50(%rsp), %rax
0000000001033434	movl	0x90(%rsp), %esi
000000000103343b	jmp	0x1032dc4
0000000001033440	movq	0x80(%rsp), %rbp
0000000001033448	addq	$0x88, %rsp
000000000103344f	retq
0000000001033450	movq	0x30(%rbx), %rcx
0000000001033454	leaq	0x10(%rcx), %rdx
0000000001033458	testb	%al, (%rdx)
000000000103345a	testb	%al, (%rbx)
000000000103345c	movq	0x30(%rax), %rax
0000000001033460	movq	0x90(%rcx), %rdx
0000000001033467	movq	0x48(%rcx), %rcx
000000000103346b	movq	%rax, 0x20(%rsp)
0000000001033470	movq	%rdx, (%rsp)
0000000001033474	movq	%rcx, 0x8(%rsp)
0000000001033479	movq	$0x0, 0x10(%rsp)
0000000001033482	movq	0xa8(%rsp), %rax
000000000103348a	movq	%rax, 0x18(%rsp)
000000000103348f	callq	runtime.sigprof
0000000001033494	movq	0x80(%rsp), %rbp
000000000103349c	addq	$0x88, %rsp
00000000010334a3	retq
00000000010334a4	callq	runtime.panicindex
00000000010334a9	ud2
00000000010334ab	callq	runtime.panicindex
00000000010334b0	ud2
00000000010334b2	callq	runtime.panicindex
00000000010334b7	ud2
00000000010334b9	callq	runtime.morestack_noctxt
00000000010334be	jmp	runtime.sighandler
00000000010334c3	int3
00000000010334c4	int3
00000000010334c5	int3
00000000010334c6	int3
00000000010334c7	int3
00000000010334c8	int3
00000000010334c9	int3
00000000010334ca	int3
00000000010334cb	int3
00000000010334cc	int3
00000000010334cd	int3
00000000010334ce	int3
00000000010334cf	int3
runtime.init.5:
00000000010334d0	retq
00000000010334d1	int3
00000000010334d2	int3
00000000010334d3	int3
00000000010334d4	int3
00000000010334d5	int3
00000000010334d6	int3
00000000010334d7	int3
00000000010334d8	int3
00000000010334d9	int3
00000000010334da	int3
00000000010334db	int3
00000000010334dc	int3
00000000010334dd	int3
00000000010334de	int3
00000000010334df	int3
runtime.initsig:
00000000010334e0	subq	$0x38, %rsp
00000000010334e4	movq	%rbp, 0x30(%rsp)
00000000010334e9	leaq	0x30(%rsp), %rbp
00000000010334ee	xorps	%xmm0, %xmm0
00000000010334f1	movups	%xmm0, 0x20(%rsp)
00000000010334f6	movzbl	0x40(%rsp), %eax
00000000010334fb	testb	%al, %al
00000000010334fd	je	0x10336d3
0000000001033503	leaq	runtime.isarchive(%rip), %rcx
000000000103350a	cmpb	$0x0, (%rcx)
000000000103350d	je	0x10336bc
0000000001033513	testb	%al, %al
0000000001033515	je	0x10336b2
000000000103351b	xorl	%eax, %eax
000000000103351d	jmp	0x1033521
000000000103351f	incl	%eax
0000000001033521	cmpl	$0x20, %eax
0000000001033524	jae	0x10336a8
000000000103352a	cmpq	$0x20, %rax
000000000103352e	jae	0x10336e6
0000000001033534	leaq	(%rax,%rax,2), %rdx
0000000001033538	leaq	runtime.sigtable(%rip), %rbx
000000000103353f	movl	(%rbx,%rdx,8), %esi
0000000001033542	testl	%esi, %esi
0000000001033544	je	0x103351f
0000000001033546	btl	$0x4, %esi
000000000103354a	jb	0x103351f
000000000103354c	movl	%eax, 0x14(%rsp)
0000000001033550	movq	%rdx, 0x18(%rsp)
0000000001033555	movl	%eax, (%rsp)
0000000001033558	callq	runtime.getsig
000000000103355d	movq	0x8(%rsp), %rax
0000000001033562	movl	0x14(%rsp), %ecx
0000000001033566	leaq	runtime.fwdSig(%rip), %rdx
000000000103356d	movq	%rax, (%rdx,%rcx,8)
0000000001033571	leal	-0x1(%rcx), %eax
0000000001033574	cmpl	$0x1, %eax
0000000001033577	ja	0x1033656
000000000103357d	leaq	(%rdx,%rcx,8), %rax
0000000001033581	movq	(%rax), %rax
0000000001033584	cmpq	$0x1, %rax
0000000001033588	jne	0x1033656
000000000103358e	xorl	%eax, %eax
0000000001033590	testb	%al, %al
0000000001033592	jne	0x10335fc
0000000001033594	movq	(%rdx,%rcx,8), %rax
0000000001033598	testq	%rax, %rax
000000000103359b	je	0x10335a3
000000000103359d	cmpq	$0x1, %rax
00000000010335a1	jne	0x10335e7
00000000010335a3	cmpq	$0x1, %rax
00000000010335a7	jne	0x10335e3
00000000010335a9	movl	0xa1701(%rip), %eax
00000000010335af	movl	%ecx, %ebx
00000000010335b1	shrl	$0x5, %ecx
00000000010335b4	cmpq	$0x1, %rcx
00000000010335b8	jae	0x10336df
00000000010335be	btsl	%ebx, %eax
00000000010335c1	leaq	0xa16e8(%rip), %rsi
00000000010335c8	leaq	(%rsi,%rcx,4), %rcx
00000000010335cc	xchgl	%eax, (%rcx)
00000000010335ce	movl	%ebx, %eax
00000000010335d0	leaq	runtime.isarchive(%rip), %rcx
00000000010335d7	leaq	runtime.sigtable(%rip), %rbx
00000000010335de	jmp	0x103351f
00000000010335e3	movl	%ecx, %ebx
00000000010335e5	jmp	0x10335ce
00000000010335e7	movl	%ecx, (%rsp)
00000000010335ea	callq	runtime.setsigstack
00000000010335ef	leaq	runtime.fwdSig(%rip), %rdx
00000000010335f6	movl	0x14(%rsp), %ebx
00000000010335fa	jmp	0x10335ce
00000000010335fc	leaq	runtime.handlingSig(%rip), %rax
0000000001033603	movl	$0x1, (%rax,%rcx,4)
000000000103360a	leaq	0x286cf(%rip), %rdx
0000000001033611	movq	%rdx, 0x20(%rsp)
0000000001033616	leaq	0x3ba4b(%rip), %rbx
000000000103361d	movq	%rbx, 0x28(%rsp)
0000000001033622	testb	%al, (%rbx)
0000000001033624	leaq	0x28(%rsp), %rsi
0000000001033629	testb	%al, (%rsi)
000000000103362b	movq	0x3ba36(%rip), %rsi
0000000001033632	movl	%ecx, (%rsp)
0000000001033635	movq	%rsi, 0x8(%rsp)
000000000103363a	callq	runtime.setsig
000000000103363f	movl	0x14(%rsp), %eax
0000000001033643	leaq	runtime.isarchive(%rip), %rcx
000000000103364a	leaq	runtime.sigtable(%rip), %rbx
0000000001033651	jmp	0x103351f
0000000001033656	movq	0x18(%rsp), %rax
000000000103365b	leaq	runtime.sigtable(%rip), %rbx
0000000001033662	movl	(%rbx,%rax,8), %eax
0000000001033665	btl	$0x6, %eax
0000000001033669	jae	0x1033672
000000000103366b	xorl	%eax, %eax
000000000103366d	jmp	0x1033590
0000000001033672	leaq	runtime.isarchive(%rip), %rsi
0000000001033679	cmpb	$0x0, (%rsi)
000000000103367c	je	0x103369a
000000000103367e	btl	$0x3, %eax
0000000001033682	jb	0x1033690
0000000001033684	cmpl	$0xd, %ecx
0000000001033687	je	0x1033690
0000000001033689	xorl	%eax, %eax
000000000103368b	jmp	0x1033590
0000000001033690	movl	$0x1, %eax
0000000001033695	jmp	0x1033590
000000000103369a	leaq	runtime.islibrary(%rip), %rdi
00000000010336a1	cmpb	$0x0, (%rdi)
00000000010336a4	jne	0x103367e
00000000010336a6	jmp	0x1033690
00000000010336a8	movq	0x30(%rsp), %rbp
00000000010336ad	addq	$0x38, %rsp
00000000010336b1	retq
00000000010336b2	movq	0x30(%rsp), %rbp
00000000010336b7	addq	$0x38, %rsp
00000000010336bb	retq
00000000010336bc	leaq	runtime.islibrary(%rip), %rdx
00000000010336c3	cmpb	$0x0, (%rdx)
00000000010336c6	je	0x103351b
00000000010336cc	testb	%al, %al
00000000010336ce	jmp	0x1033515
00000000010336d3	movb	$0x1, runtime.mainStarted(%rip)
00000000010336da	jmp	0x1033503
00000000010336df	callq	runtime.panicindex
00000000010336e4	ud2
00000000010336e6	callq	runtime.panicindex
00000000010336eb	ud2
00000000010336ed	int3
00000000010336ee	int3
00000000010336ef	int3
runtime.setThreadCPUProfiler:
00000000010336f0	movq	%gs:0x30, %rcx
00000000010336f9	cmpq	0x10(%rcx), %rsp
00000000010336fd	jbe	0x10337af
0000000001033703	subq	$0x40, %rsp
0000000001033707	movq	%rbp, 0x38(%rsp)
000000000103370c	leaq	0x38(%rsp), %rbp
0000000001033711	xorps	%xmm0, %xmm0
0000000001033714	movups	%xmm0, 0x18(%rsp)
0000000001033719	movups	%xmm0, 0x28(%rsp)
000000000103371e	movl	0x48(%rsp), %ecx
0000000001033722	testl	%ecx, %ecx
0000000001033724	jne	0x1033766
0000000001033726	movl	$0x2, (%rsp)
000000000103372d	leaq	0x18(%rsp), %rax
0000000001033732	movq	%rax, 0x8(%rsp)
0000000001033737	movq	$0x0, 0x10(%rsp)
0000000001033740	callq	runtime.setitimer
0000000001033745	movq	%gs:0x30, %rax
000000000103374e	movq	0x30(%rax), %rax
0000000001033752	movl	0x48(%rsp), %ecx
0000000001033756	movl	%ecx, 0x108(%rax)
000000000103375c	movq	0x38(%rsp), %rbp
0000000001033761	addq	$0x40, %rsp
0000000001033765	retq
0000000001033766	leaq	0x18(%rsp), %rdx
000000000103376b	testb	%al, (%rdx)
000000000103376d	movl	$0xf4240, %eax
0000000001033772	cmpl	$-0x1, %ecx
0000000001033775	je	0x103377c
0000000001033777	cltd
0000000001033778	idivl	%ecx
000000000103377a	jmp	0x1033780
000000000103377c	negl	%eax
000000000103377e	xorl	%edx, %edx
0000000001033780	movl	%eax, 0x20(%rsp)
0000000001033784	movups	0x18(%rsp), %xmm0
0000000001033789	movups	%xmm0, 0x28(%rsp)
000000000103378e	movl	$0x2, (%rsp)
0000000001033795	leaq	0x18(%rsp), %rdx
000000000103379a	movq	%rdx, 0x8(%rsp)
000000000103379f	movq	$0x0, 0x10(%rsp)
00000000010337a8	callq	runtime.setitimer
00000000010337ad	jmp	0x1033745
00000000010337af	callq	runtime.morestack_noctxt
00000000010337b4	jmp	runtime.setThreadCPUProfiler
00000000010337b9	int3
00000000010337ba	int3
00000000010337bb	int3
00000000010337bc	int3
00000000010337bd	int3
00000000010337be	int3
00000000010337bf	int3
runtime.sigtrampgo:
00000000010337c0	subq	$0xb8, %rsp
00000000010337c7	movq	%rbp, 0xb0(%rsp)
00000000010337cf	leaq	0xb0(%rsp), %rbp
00000000010337d7	xorps	%xmm0, %xmm0
00000000010337da	movups	%xmm0, 0x80(%rsp)
00000000010337e2	movups	%xmm0, 0x90(%rsp)
00000000010337ea	movups	%xmm0, 0xa0(%rsp)
00000000010337f2	movl	0xc0(%rsp), %eax
00000000010337f9	movl	%eax, (%rsp)
00000000010337fc	movq	0xc8(%rsp), %rax
0000000001033804	movq	%rax, 0x8(%rsp)
0000000001033809	movq	0xd0(%rsp), %rcx
0000000001033811	movq	%rcx, 0x10(%rsp)
0000000001033816	callq	runtime.sigfwdgo
000000000103381b	leaq	0x18(%rsp), %rax
0000000001033820	cmpb	$0x0, (%rax)
0000000001033823	jne	0x1033cc4
0000000001033829	movq	%gs:0x30, %rax
0000000001033832	testq	%rax, %rax
0000000001033835	je	0x1033c47
000000000103383b	movq	%rax, 0x58(%rsp)
0000000001033840	movq	$0x0, 0x30(%rsp)
0000000001033849	xorps	%xmm0, %xmm0
000000000103384c	movups	%xmm0, 0x38(%rsp)
0000000001033851	movups	%xmm0, 0x48(%rsp)
0000000001033856	movq	0x30(%rax), %rcx
000000000103385a	movq	0x50(%rcx), %rdx
000000000103385e	leaq	0xc0(%rsp), %rbx
0000000001033866	movq	(%rdx), %rsi
0000000001033869	cmpq	%rsi, %rbx
000000000103386c	jae	0x1033c33
0000000001033872	movq	%rbx, 0x28(%rsp)
0000000001033877	movq	(%rcx), %rcx
000000000103387a	movq	(%rcx), %rdx
000000000103387d	cmpq	%rdx, %rbx
0000000001033880	jb	0x1033aa7
0000000001033886	movq	0x8(%rcx), %rcx
000000000103388a	cmpq	%rcx, %rbx
000000000103388d	jae	0x1033aa7
0000000001033893	movq	$0x0, 0x98(%rsp)
000000000103389f	movups	%xmm0, 0xa0(%rsp)
00000000010338a7	movq	0x30(%rax), %rcx
00000000010338ab	movq	(%rcx), %rcx
00000000010338ae	movq	0x8(%rcx), %rdx
00000000010338b2	subq	(%rcx), %rdx
00000000010338b5	movq	%rdx, 0xa0(%rsp)
00000000010338bd	movq	0x30(%rax), %rcx
00000000010338c1	movq	(%rcx), %rcx
00000000010338c4	leaq	0x98(%rsp), %rdx
00000000010338cc	testb	%al, (%rdx)
00000000010338ce	movq	(%rcx), %rcx
00000000010338d1	movq	%rcx, 0x98(%rsp)
00000000010338d9	movq	%gs:0x30, %rcx
00000000010338e2	movq	0x30(%rcx), %rdx
00000000010338e6	movq	0x50(%rdx), %rdx
00000000010338ea	movq	0x8(%rdx), %rbx
00000000010338ee	movq	(%rdx), %rdx
00000000010338f1	movq	%rdx, 0x30(%rsp)
00000000010338f6	movq	%rbx, 0x38(%rsp)
00000000010338fb	movq	0x30(%rcx), %rdx
00000000010338ff	movq	0x50(%rdx), %rdx
0000000001033903	movq	0x10(%rdx), %rdx
0000000001033907	movq	%rdx, 0x40(%rsp)
000000000103390c	movq	0x30(%rcx), %rdx
0000000001033910	movq	0x50(%rdx), %rdx
0000000001033914	movq	0x18(%rdx), %rdx
0000000001033918	movq	%rdx, 0x48(%rsp)
000000000103391d	movq	0x30(%rcx), %rdx
0000000001033921	movq	0x50(%rdx), %rdx
0000000001033925	movq	0x80(%rdx), %rdx
000000000103392c	movq	%rdx, 0x50(%rsp)
0000000001033931	movq	0x30(%rcx), %rdx
0000000001033935	movq	0x50(%rdx), %rdx
0000000001033939	movq	0x98(%rsp), %rbx
0000000001033941	movq	%rbx, (%rdx)
0000000001033944	movq	0x30(%rcx), %rdx
0000000001033948	movq	0x50(%rdx), %rdx
000000000103394c	movq	0xa0(%rsp), %rsi
0000000001033954	addq	%rbx, %rsi
0000000001033957	movq	%rsi, 0x8(%rdx)
000000000103395b	movq	0x30(%rcx), %rdx
000000000103395f	movq	0x50(%rdx), %rdx
0000000001033963	addq	$0x370, %rbx
000000000103396a	movq	%rbx, 0x10(%rdx)
000000000103396e	movq	0x30(%rcx), %rcx
0000000001033972	movq	0x50(%rcx), %rcx
0000000001033976	movq	%rbx, 0x18(%rcx)
000000000103397a	movq	0x30(%rax), %rcx
000000000103397e	movq	0x50(%rcx), %rcx
0000000001033982	leaq	0xc0(%rsp), %rdx
000000000103398a	movq	%rdx, 0x80(%rcx)
0000000001033991	movl	$0x1, %ecx
0000000001033996	movb	%cl, 0x27(%rsp)
000000000103399a	movq	0x30(%rax), %rdx
000000000103399e	movq	0x50(%rdx), %rdx
00000000010339a2	movq	%rdx, (%rsp)
00000000010339a6	callq	runtime.setg
00000000010339ab	movq	0x58(%rsp), %rax
00000000010339b0	cmpq	$-0x4d2, 0x10(%rax)
00000000010339b8	je	0x1033a93
00000000010339be	xorps	%xmm0, %xmm0
00000000010339c1	movups	%xmm0, 0x60(%rsp)
00000000010339c6	movq	0xc8(%rsp), %rax
00000000010339ce	movq	%rax, 0x60(%rsp)
00000000010339d3	movq	0xd0(%rsp), %rcx
00000000010339db	movq	%rcx, 0x68(%rsp)
00000000010339e0	leaq	0x60(%rsp), %rdx
00000000010339e5	movq	%rdx, (%rsp)
00000000010339e9	movl	0xc0(%rsp), %edx
00000000010339f0	movl	%edx, 0x8(%rsp)
00000000010339f4	callq	"runtime.(*sigctxt).fixsigcode"
00000000010339f9	movl	0xc0(%rsp), %eax
0000000001033a00	movl	%eax, (%rsp)
0000000001033a03	movq	0xc8(%rsp), %rax
0000000001033a0b	movq	%rax, 0x8(%rsp)
0000000001033a10	movq	0xd0(%rsp), %rax
0000000001033a18	movq	%rax, 0x10(%rsp)
0000000001033a1d	movq	0x58(%rsp), %rax
0000000001033a22	movq	%rax, 0x18(%rsp)
0000000001033a27	callq	runtime.sighandler
0000000001033a2c	movq	0x58(%rsp), %rax
0000000001033a31	movq	%rax, (%rsp)
0000000001033a35	callq	runtime.setg
0000000001033a3a	movzbl	0x27(%rsp), %eax
0000000001033a3f	testb	%al, %al
0000000001033a41	je	0x1033a83
0000000001033a43	movq	%gs:0x30, %rax
0000000001033a4c	movq	0x30(%rax), %rax
0000000001033a50	movq	0x50(%rax), %rax
0000000001033a54	movq	0x30(%rsp), %rcx
0000000001033a59	movq	0x38(%rsp), %rdx
0000000001033a5e	movq	%rcx, (%rax)
0000000001033a61	movq	%rdx, 0x8(%rax)
0000000001033a65	movq	0x40(%rsp), %rcx
0000000001033a6a	movq	%rcx, 0x10(%rax)
0000000001033a6e	movq	0x48(%rsp), %rcx
0000000001033a73	movq	%rcx, 0x18(%rax)
0000000001033a77	movq	0x50(%rsp), %rcx
0000000001033a7c	movq	%rcx, 0x80(%rax)
0000000001033a83	movq	0xb0(%rsp), %rbp
0000000001033a8b	addq	$0xb8, %rsp
0000000001033a92	retq
0000000001033a93	movl	0xc0(%rsp), %eax
0000000001033a9a	movl	%eax, (%rsp)
0000000001033a9d	callq	runtime.signalDuringFork
0000000001033aa2	jmp	0x10339be
0000000001033aa7	movq	$0x0, 0x80(%rsp)
0000000001033ab3	movups	%xmm0, 0x88(%rsp)
0000000001033abb	movq	$0x0, (%rsp)
0000000001033ac3	leaq	0x80(%rsp), %rax
0000000001033acb	movq	%rax, 0x8(%rsp)
0000000001033ad0	callq	runtime.sigaltstack
0000000001033ad5	movl	0x90(%rsp), %eax
0000000001033adc	btl	$0x2, %eax
0000000001033ae0	jb	0x1033c04
0000000001033ae6	movq	0x80(%rsp), %rax
0000000001033aee	movq	0x28(%rsp), %rcx
0000000001033af3	cmpq	%rax, %rcx
0000000001033af6	jae	0x1033beb
0000000001033afc	movq	$0x0, (%rsp)
0000000001033b04	callq	runtime.setg
0000000001033b09	movb	$0x0, (%rsp)
0000000001033b0d	callq	runtime.needm
0000000001033b12	movl	0xc0(%rsp), %eax
0000000001033b19	movl	%eax, (%rsp)
0000000001033b1c	callq	runtime.sigNotOnStack
0000000001033b21	callq	runtime.dropm
0000000001033b26	movq	%gs:0x30, %rcx
0000000001033b2f	movq	0x30(%rcx), %rdx
0000000001033b33	movq	0x50(%rdx), %rdx
0000000001033b37	movq	0x8(%rdx), %rbx
0000000001033b3b	movq	(%rdx), %rdx
0000000001033b3e	movq	%rdx, 0x30(%rsp)
0000000001033b43	movq	%rbx, 0x38(%rsp)
0000000001033b48	movq	0x30(%rcx), %rdx
0000000001033b4c	movq	0x50(%rdx), %rdx
0000000001033b50	movq	0x10(%rdx), %rdx
0000000001033b54	movq	%rdx, 0x40(%rsp)
0000000001033b59	movq	0x30(%rcx), %rdx
0000000001033b5d	movq	0x50(%rdx), %rdx
0000000001033b61	movq	0x18(%rdx), %rdx
0000000001033b65	movq	%rdx, 0x48(%rsp)
0000000001033b6a	movq	0x30(%rcx), %rdx
0000000001033b6e	movq	0x50(%rdx), %rdx
0000000001033b72	movq	0x80(%rdx), %rdx
0000000001033b79	movq	%rdx, 0x50(%rsp)
0000000001033b7e	movq	0x30(%rcx), %rdx
0000000001033b82	movq	0x50(%rdx), %rdx
0000000001033b86	movq	0x80(%rsp), %rbx
0000000001033b8e	movq	%rbx, (%rdx)
0000000001033b91	movq	0x30(%rcx), %rdx
0000000001033b95	movq	0x50(%rdx), %rdx
0000000001033b99	movq	0x88(%rsp), %rsi
0000000001033ba1	addq	%rbx, %rsi
0000000001033ba4	movq	%rsi, 0x8(%rdx)
0000000001033ba8	movq	0x30(%rcx), %rdx
0000000001033bac	movq	0x50(%rdx), %rdx
0000000001033bb0	addq	$0x370, %rbx
0000000001033bb7	movq	%rbx, 0x10(%rdx)
0000000001033bbb	movq	0x30(%rcx), %rcx
0000000001033bbf	movq	0x50(%rcx), %rcx
0000000001033bc3	movq	%rbx, 0x18(%rcx)
0000000001033bc7	movq	0x58(%rsp), %rax
0000000001033bcc	movq	0x30(%rax), %rcx
0000000001033bd0	movq	0x50(%rcx), %rcx
0000000001033bd4	leaq	0xc0(%rsp), %rdx
0000000001033bdc	movq	%rdx, 0x80(%rcx)
0000000001033be3	xorps	%xmm0, %xmm0
0000000001033be6	jmp	0x1033991
0000000001033beb	movq	0x88(%rsp), %rdx
0000000001033bf3	addq	%rdx, %rax
0000000001033bf6	cmpq	%rax, %rcx
0000000001033bf9	jae	0x1033afc
0000000001033bff	jmp	0x1033b26
0000000001033c04	movq	$0x0, (%rsp)
0000000001033c0c	callq	runtime.setg
0000000001033c11	movb	$0x0, (%rsp)
0000000001033c15	callq	runtime.needm
0000000001033c1a	movl	0xc0(%rsp), %eax
0000000001033c21	movl	%eax, (%rsp)
0000000001033c24	callq	runtime.noSignalStack
0000000001033c29	callq	runtime.dropm
0000000001033c2e	jmp	0x1033ae6
0000000001033c33	movq	0x8(%rdx), %rdx
0000000001033c37	cmpq	%rdx, %rbx
0000000001033c3a	jae	0x1033872
0000000001033c40	xorl	%ecx, %ecx
0000000001033c42	jmp	0x1033996
0000000001033c47	xorps	%xmm0, %xmm0
0000000001033c4a	movups	%xmm0, 0x70(%rsp)
0000000001033c4f	movq	0xc8(%rsp), %rax
0000000001033c57	movq	%rax, 0x70(%rsp)
0000000001033c5c	movq	0xd0(%rsp), %rax
0000000001033c64	movq	%rax, 0x78(%rsp)
0000000001033c69	movl	0xc0(%rsp), %ecx
0000000001033c70	cmpl	$0x1b, %ecx
0000000001033c73	jne	0x1033ca1
0000000001033c75	movq	0x30(%rax), %rcx
0000000001033c79	leaq	0x10(%rcx), %rdx
0000000001033c7d	testb	%al, (%rdx)
0000000001033c7f	testb	%al, (%rax)
0000000001033c81	movq	0x90(%rcx), %rax
0000000001033c88	movq	%rax, (%rsp)
0000000001033c8c	callq	runtime.sigprofNonGoPC
0000000001033c91	movq	0xb0(%rsp), %rbp
0000000001033c99	addq	$0xb8, %rsp
0000000001033ca0	retq
0000000001033ca1	movq	%rcx, (%rsp)
0000000001033ca5	leaq	0x70(%rsp), %rax
0000000001033caa	movq	%rax, 0x8(%rsp)
0000000001033caf	callq	runtime.badsignal
0000000001033cb4	movq	0xb0(%rsp), %rbp
0000000001033cbc	addq	$0xb8, %rsp
0000000001033cc3	retq
0000000001033cc4	movq	0xb0(%rsp), %rbp
0000000001033ccc	addq	$0xb8, %rsp
0000000001033cd3	retq
0000000001033cd4	int3
0000000001033cd5	int3
0000000001033cd6	int3
0000000001033cd7	int3
0000000001033cd8	int3
0000000001033cd9	int3
0000000001033cda	int3
0000000001033cdb	int3
0000000001033cdc	int3
0000000001033cdd	int3
0000000001033cde	int3
0000000001033cdf	int3
runtime.sigpanic:
0000000001033ce0	movq	%gs:0x30, %rcx
0000000001033ce9	cmpq	0x10(%rcx), %rsp
0000000001033ced	jbe	0x1033fd4
0000000001033cf3	subq	$0x48, %rsp
0000000001033cf7	movq	%rbp, 0x40(%rsp)
0000000001033cfc	leaq	0x40(%rsp), %rbp
0000000001033d01	movq	%gs:0x30, %rax
0000000001033d0a	movq	0x30(%rax), %rcx
0000000001033d0e	testq	%rax, %rax
0000000001033d11	je	0x1033d23
0000000001033d13	movq	0xc0(%rcx), %rdx
0000000001033d1a	cmpq	%rdx, %rax
0000000001033d1d	je	0x1033e77
0000000001033d23	xorl	%ecx, %ecx
0000000001033d25	testb	%cl, %cl
0000000001033d27	je	0x1033fb9
0000000001033d2d	movq	%rax, 0x28(%rsp)
0000000001033d32	movl	0xe0(%rax), %ecx
0000000001033d38	cmpl	$0x8, %ecx
0000000001033d3b	jne	0x1033ddf
0000000001033d41	movq	0x100(%rax), %rcx
0000000001033d48	cmpq	$0x7, %rcx
0000000001033d4c	je	0x1033dd5
0000000001033d52	cmpq	$0x8, %rcx
0000000001033d56	je	0x1033dce
0000000001033d58	callq	runtime.panicfloat
0000000001033d5d	movq	0x28(%rsp), %rax
0000000001033d62	movl	0xe0(%rax), %eax
0000000001033d68	cmpl	$0x20, %eax
0000000001033d6b	jae	0x1033eda
0000000001033d71	cmpq	$0x20, %rax
0000000001033d75	jae	0x1033ed3
0000000001033d7b	leaq	(%rax,%rax,2), %rax
0000000001033d7f	leaq	runtime.sigtable(%rip), %rcx
0000000001033d86	movq	0x10(%rcx,%rax,8), %rdx
0000000001033d8b	movq	0x8(%rcx,%rax,8), %rax
0000000001033d90	movq	%rax, 0x30(%rsp)
0000000001033d95	movq	%rdx, 0x38(%rsp)
0000000001033d9a	leaq	0x2823f(%rip), %rax
0000000001033da1	movq	%rax, (%rsp)
0000000001033da5	leaq	0x30(%rsp), %rax
0000000001033daa	movq	%rax, 0x8(%rsp)
0000000001033daf	callq	runtime.convT2Estring
0000000001033db4	movq	0x18(%rsp), %rax
0000000001033db9	movq	0x10(%rsp), %rcx
0000000001033dbe	movq	%rcx, (%rsp)
0000000001033dc2	movq	%rax, 0x8(%rsp)
0000000001033dc7	callq	runtime.gopanic
0000000001033dcc	ud2
0000000001033dce	callq	runtime.panicoverflow
0000000001033dd3	jmp	0x1033d58
0000000001033dd5	callq	runtime.panicdivide
0000000001033dda	jmp	0x1033d58
0000000001033ddf	cmpl	$0xa, %ecx
0000000001033de2	jne	0x1033e21
0000000001033de4	cmpq	$0x2, 0x100(%rax)
0000000001033dec	jne	0x1033dfb
0000000001033dee	cmpq	$0x1000, 0x108(%rax)
0000000001033df9	jb	0x1033e15
0000000001033dfb	leaq	0xb2(%rax), %rcx
0000000001033e02	cmpb	$0x0, (%rcx)
0000000001033e05	je	0x1033f57
0000000001033e0b	callq	runtime.panicmem
0000000001033e10	jmp	0x1033f57
0000000001033e15	callq	runtime.panicmem
0000000001033e1a	movq	0x28(%rsp), %rax
0000000001033e1f	jmp	0x1033dfb
0000000001033e21	cmpl	$0xb, %ecx
0000000001033e24	jne	0x1033d5d
0000000001033e2a	movq	0x100(%rax), %rcx
0000000001033e31	testq	%rcx, %rcx
0000000001033e34	jne	0x1033e69
0000000001033e36	cmpq	$0x1000, 0x108(%rax)
0000000001033e41	jb	0x1033e5d
0000000001033e43	leaq	0xb2(%rax), %rcx
0000000001033e4a	cmpb	$0x0, (%rcx)
0000000001033e4d	je	0x1033ef5
0000000001033e53	callq	runtime.panicmem
0000000001033e58	jmp	0x1033ef5
0000000001033e5d	callq	runtime.panicmem
0000000001033e62	movq	0x28(%rsp), %rax
0000000001033e67	jmp	0x1033e43
0000000001033e69	cmpq	$0x1, %rcx
0000000001033e6d	je	0x1033e36
0000000001033e6f	cmpq	$0x2, %rcx
0000000001033e73	je	0x1033e36
0000000001033e75	jmp	0x1033e43
0000000001033e77	cmpl	$0x0, 0x100(%rcx)
0000000001033e7e	je	0x1033e87
0000000001033e80	xorl	%ecx, %ecx
0000000001033e82	jmp	0x1033d25
0000000001033e87	cmpl	$0x0, 0xe8(%rcx)
0000000001033e8e	jne	0x1033e80
0000000001033e90	cmpl	$0x0, 0xec(%rcx)
0000000001033e97	jne	0x1033e80
0000000001033e99	cmpq	$0x0, 0xf8(%rcx)
0000000001033ea1	jne	0x1033e80
0000000001033ea3	cmpl	$0x0, 0x104(%rcx)
0000000001033eaa	jne	0x1033e80
0000000001033eac	movl	0x90(%rax), %ecx
0000000001033eb2	btrl	$0xc, %ecx
0000000001033eb6	cmpl	$0x2, %ecx
0000000001033eb9	je	0x1033ec2
0000000001033ebb	xorl	%ecx, %ecx
0000000001033ebd	jmp	0x1033d25
0000000001033ec2	cmpq	$0x0, 0x70(%rax)
0000000001033ec7	jne	0x1033ebb
0000000001033ec9	movl	$0x1, %ecx
0000000001033ece	jmp	0x1033d25
0000000001033ed3	callq	runtime.panicindex
0000000001033ed8	ud2
0000000001033eda	leaq	0x3866c(%rip), %rax
0000000001033ee1	movq	%rax, (%rsp)
0000000001033ee5	movq	$0x17, 0x8(%rsp)
0000000001033eee	callq	runtime.throw
0000000001033ef3	ud2
0000000001033ef5	movq	0x28(%rsp), %rax
0000000001033efa	movq	0x108(%rax), %rax
0000000001033f01	movq	%rax, 0x20(%rsp)
0000000001033f06	callq	runtime.printlock
0000000001033f0b	leaq	0x38995(%rip), %rax
0000000001033f12	movq	%rax, (%rsp)
0000000001033f16	movq	$0x19, 0x8(%rsp)
0000000001033f1f	callq	runtime.printstring
0000000001033f24	movq	0x20(%rsp), %rax
0000000001033f29	movq	%rax, (%rsp)
0000000001033f2d	callq	runtime.printhex
0000000001033f32	callq	runtime.printnl
0000000001033f37	callq	runtime.printunlock
0000000001033f3c	leaq	0x36cc1(%rip), %rax
0000000001033f43	movq	%rax, (%rsp)
0000000001033f47	movq	$0x5, 0x8(%rsp)
0000000001033f50	callq	runtime.throw
0000000001033f55	ud2
0000000001033f57	movq	0x28(%rsp), %rax
0000000001033f5c	movq	0x108(%rax), %rax
0000000001033f63	movq	%rax, 0x20(%rsp)
0000000001033f68	callq	runtime.printlock
0000000001033f6d	leaq	0x38933(%rip), %rax
0000000001033f74	movq	%rax, (%rsp)
0000000001033f78	movq	$0x19, 0x8(%rsp)
0000000001033f81	callq	runtime.printstring
0000000001033f86	movq	0x20(%rsp), %rax
0000000001033f8b	movq	%rax, (%rsp)
0000000001033f8f	callq	runtime.printhex
0000000001033f94	callq	runtime.printnl
0000000001033f99	callq	runtime.printunlock
0000000001033f9e	leaq	0x36c5f(%rip), %rax
0000000001033fa5	movq	%rax, (%rsp)
0000000001033fa9	movq	$0x5, 0x8(%rsp)
0000000001033fb2	callq	runtime.throw
0000000001033fb7	ud2
0000000001033fb9	leaq	0x3a343(%rip), %rax
0000000001033fc0	movq	%rax, (%rsp)
0000000001033fc4	movq	$0x2a, 0x8(%rsp)
0000000001033fcd	callq	runtime.throw
0000000001033fd2	ud2
0000000001033fd4	callq	runtime.morestack_noctxt
0000000001033fd9	jmp	runtime.sigpanic
0000000001033fde	int3
0000000001033fdf	int3
runtime.dieFromSignal:
0000000001033fe0	subq	$0x18, %rsp
0000000001033fe4	movq	%rbp, 0x10(%rsp)
0000000001033fe9	leaq	0x10(%rsp), %rbp
0000000001033fee	movl	0x20(%rsp), %eax
0000000001033ff2	movl	%eax, (%rsp)
0000000001033ff5	callq	runtime.unblocksig
0000000001033ffa	movl	0x20(%rsp), %eax
0000000001033ffe	cmpq	$0x20, %rax
0000000001034002	jae	0x1034070
0000000001034004	leaq	runtime.handlingSig(%rip), %rcx
000000000103400b	leaq	(%rcx,%rax,4), %rcx
000000000103400f	xorl	%edx, %edx
0000000001034011	xchgl	%edx, (%rcx)
0000000001034013	movl	%eax, (%rsp)
0000000001034016	callq	runtime.raise
000000000103401b	callq	runtime.osyield
0000000001034020	callq	runtime.osyield
0000000001034025	callq	runtime.osyield
000000000103402a	movl	0x20(%rsp), %eax
000000000103402e	movl	%eax, (%rsp)
0000000001034031	movq	$0x0, 0x8(%rsp)
000000000103403a	callq	runtime.setsig
000000000103403f	movl	0x20(%rsp), %eax
0000000001034043	movl	%eax, (%rsp)
0000000001034046	callq	runtime.raise
000000000103404b	callq	runtime.osyield
0000000001034050	callq	runtime.osyield
0000000001034055	callq	runtime.osyield
000000000103405a	movl	$0x2, (%rsp)
0000000001034061	callq	runtime.exit
0000000001034066	movq	0x10(%rsp), %rbp
000000000103406b	addq	$0x18, %rsp
000000000103406f	retq
0000000001034070	callq	runtime.panicindex
0000000001034075	ud2
0000000001034077	int3
0000000001034078	int3
0000000001034079	int3
000000000103407a	int3
000000000103407b	int3
000000000103407c	int3
000000000103407d	int3
000000000103407e	int3
000000000103407f	int3
runtime.raisebadsignal:
0000000001034080	movq	%gs:0x30, %rcx
0000000001034089	cmpq	0x10(%rcx), %rsp
000000000103408d	jbe	0x10341ab
0000000001034093	subq	$0x30, %rsp
0000000001034097	movq	%rbp, 0x28(%rsp)
000000000103409c	leaq	0x28(%rsp), %rbp
00000000010340a1	movl	0x38(%rsp), %eax
00000000010340a5	cmpl	$0x1b, %eax
00000000010340a8	je	0x103419a
00000000010340ae	cmpl	$0x20, %eax
00000000010340b1	jb	0x103417e
00000000010340b7	xorl	%ecx, %ecx
00000000010340b9	movq	%rcx, 0x10(%rsp)
00000000010340be	movl	%eax, (%rsp)
00000000010340c1	callq	runtime.unblocksig
00000000010340c6	movl	0x38(%rsp), %eax
00000000010340ca	movl	%eax, (%rsp)
00000000010340cd	movq	0x10(%rsp), %rcx
00000000010340d2	movq	%rcx, 0x8(%rsp)
00000000010340d7	callq	runtime.setsig
00000000010340dc	leaq	runtime.isarchive(%rip), %rax
00000000010340e3	cmpb	$0x0, (%rax)
00000000010340e6	je	0x103416c
00000000010340ec	movq	0x10(%rsp), %rax
00000000010340f1	testq	%rax, %rax
00000000010340f4	jne	0x1034107
00000000010340f6	movq	0x40(%rsp), %rax
00000000010340fb	movq	(%rax), %rax
00000000010340fe	movslq	0x8(%rax), %rax
0000000001034102	testq	%rax, %rax
0000000001034105	jne	0x1034162
0000000001034107	movl	0x38(%rsp), %eax
000000000103410b	movl	%eax, (%rsp)
000000000103410e	callq	runtime.raise
0000000001034113	movl	$0x3e8, (%rsp)
000000000103411a	callq	runtime.usleep
000000000103411f	leaq	0x27bba(%rip), %rax
0000000001034126	movq	%rax, 0x18(%rsp)
000000000103412b	leaq	0x3af36(%rip), %rax
0000000001034132	movq	%rax, 0x20(%rsp)
0000000001034137	testb	%al, (%rax)
0000000001034139	leaq	0x20(%rsp), %rax
000000000103413e	testb	%al, (%rax)
0000000001034140	movq	0x3af21(%rip), %rax
0000000001034147	movl	0x38(%rsp), %ecx
000000000103414b	movl	%ecx, (%rsp)
000000000103414e	movq	%rax, 0x8(%rsp)
0000000001034153	callq	runtime.setsig
0000000001034158	movq	0x28(%rsp), %rbp
000000000103415d	addq	$0x30, %rsp
0000000001034161	retq
0000000001034162	movq	0x28(%rsp), %rbp
0000000001034167	addq	$0x30, %rsp
000000000103416b	retq
000000000103416c	leaq	runtime.islibrary(%rip), %rax
0000000001034173	cmpb	$0x0, (%rax)
0000000001034176	jne	0x10340ec
000000000103417c	jmp	0x1034107
000000000103417e	cmpq	$0x20, %rax
0000000001034182	jae	0x10341a4
0000000001034184	leaq	runtime.fwdSig(%rip), %rdx
000000000103418b	leaq	(%rdx,%rax,8), %rdx
000000000103418f	movq	(%rdx), %rdx
0000000001034192	movq	%rdx, %rcx
0000000001034195	jmp	0x10340b9
000000000103419a	movq	0x28(%rsp), %rbp
000000000103419f	addq	$0x30, %rsp
00000000010341a3	retq
00000000010341a4	callq	runtime.panicindex
00000000010341a9	ud2
00000000010341ab	callq	runtime.morestack_noctxt
00000000010341b0	jmp	runtime.raisebadsignal
00000000010341b5	int3
00000000010341b6	int3
00000000010341b7	int3
00000000010341b8	int3
00000000010341b9	int3
00000000010341ba	int3
00000000010341bb	int3
00000000010341bc	int3
00000000010341bd	int3
00000000010341be	int3
00000000010341bf	int3
runtime.crash:
00000000010341c0	retq
00000000010341c1	int3
00000000010341c2	int3
00000000010341c3	int3
00000000010341c4	int3
00000000010341c5	int3
00000000010341c6	int3
00000000010341c7	int3
00000000010341c8	int3
00000000010341c9	int3
00000000010341ca	int3
00000000010341cb	int3
00000000010341cc	int3
00000000010341cd	int3
00000000010341ce	int3
00000000010341cf	int3
runtime.noSignalStack:
00000000010341d0	movq	%gs:0x30, %rcx
00000000010341d9	cmpq	0x10(%rcx), %rsp
00000000010341dd	jbe	0x1034251
00000000010341df	subq	$0x18, %rsp
00000000010341e3	movq	%rbp, 0x10(%rsp)
00000000010341e8	leaq	0x10(%rsp), %rbp
00000000010341ed	callq	runtime.printlock
00000000010341f2	leaq	0x36bc4(%rip), %rax
00000000010341f9	movq	%rax, (%rsp)
00000000010341fd	movq	$0x7, 0x8(%rsp)
0000000001034206	callq	runtime.printstring
000000000103420b	movl	0x20(%rsp), %eax
000000000103420f	movq	%rax, (%rsp)
0000000001034213	callq	runtime.printuint
0000000001034218	leaq	0x39f1d(%rip), %rax
000000000103421f	movq	%rax, (%rsp)
0000000001034223	movq	$0x29, 0x8(%rsp)
000000000103422c	callq	runtime.printstring
0000000001034231	callq	runtime.printunlock
0000000001034236	leaq	0x393b2(%rip), %rax
000000000103423d	movq	%rax, (%rsp)
0000000001034241	movq	$0x20, 0x8(%rsp)
000000000103424a	callq	runtime.throw
000000000103424f	ud2
0000000001034251	callq	runtime.morestack_noctxt
0000000001034256	jmp	runtime.noSignalStack
000000000103425b	int3
000000000103425c	int3
000000000103425d	int3
000000000103425e	int3
000000000103425f	int3
runtime.sigNotOnStack:
0000000001034260	movq	%gs:0x30, %rcx
0000000001034269	cmpq	0x10(%rcx), %rsp
000000000103426d	jbe	0x10342e1
000000000103426f	subq	$0x18, %rsp
0000000001034273	movq	%rbp, 0x10(%rsp)
0000000001034278	leaq	0x10(%rsp), %rbp
000000000103427d	callq	runtime.printlock
0000000001034282	leaq	0x36b34(%rip), %rax
0000000001034289	movq	%rax, (%rsp)
000000000103428d	movq	$0x7, 0x8(%rsp)
0000000001034296	callq	runtime.printstring
000000000103429b	movl	0x20(%rsp), %eax
000000000103429f	movq	%rax, (%rsp)
00000000010342a3	callq	runtime.printuint
00000000010342a8	leaq	0x39fac(%rip), %rax
00000000010342af	movq	%rax, (%rsp)
00000000010342b3	movq	$0x2a, 0x8(%rsp)
00000000010342bc	callq	runtime.printstring
00000000010342c1	callq	runtime.printunlock
00000000010342c6	leaq	0x3a8b1(%rip), %rax
00000000010342cd	movq	%rax, (%rsp)
00000000010342d1	movq	$0x39, 0x8(%rsp)
00000000010342da	callq	runtime.throw
00000000010342df	ud2
00000000010342e1	callq	runtime.morestack_noctxt
00000000010342e6	jmp	runtime.sigNotOnStack
00000000010342eb	int3
00000000010342ec	int3
00000000010342ed	int3
00000000010342ee	int3
00000000010342ef	int3
runtime.signalDuringFork:
00000000010342f0	movq	%gs:0x30, %rcx
00000000010342f9	cmpq	0x10(%rcx), %rsp
00000000010342fd	jbe	0x1034371
00000000010342ff	subq	$0x18, %rsp
0000000001034303	movq	%rbp, 0x10(%rsp)
0000000001034308	leaq	0x10(%rsp), %rbp
000000000103430d	callq	runtime.printlock
0000000001034312	leaq	0x36aa4(%rip), %rax
0000000001034319	movq	%rax, (%rsp)
000000000103431d	movq	$0x7, 0x8(%rsp)
0000000001034326	callq	runtime.printstring
000000000103432b	movl	0x20(%rsp), %eax
000000000103432f	movq	%rax, (%rsp)
0000000001034333	callq	runtime.printuint
0000000001034338	leaq	0x37d92(%rip), %rax
000000000103433f	movq	%rax, (%rsp)
0000000001034343	movq	$0x16, 0x8(%rsp)
000000000103434c	callq	runtime.printstring
0000000001034351	callq	runtime.printunlock
0000000001034356	leaq	0x3889c(%rip), %rax
000000000103435d	movq	%rax, (%rsp)
0000000001034361	movq	$0x1b, 0x8(%rsp)
000000000103436a	callq	runtime.throw
000000000103436f	ud2
0000000001034371	callq	runtime.morestack_noctxt
0000000001034376	jmp	runtime.signalDuringFork
000000000103437b	int3
000000000103437c	int3
000000000103437d	int3
000000000103437e	int3
000000000103437f	int3
runtime.badsignal:
0000000001034380	subq	$0x18, %rsp
0000000001034384	movq	%rbp, 0x10(%rsp)
0000000001034389	leaq	0x10(%rsp), %rbp
000000000103438e	movb	$0x0, (%rsp)
0000000001034392	callq	runtime.needm
0000000001034397	movq	0x20(%rsp), %rax
000000000103439c	movl	%eax, (%rsp)
000000000103439f	callq	runtime.sigsend
00000000010343a4	leaq	0x8(%rsp), %rax
00000000010343a9	cmpb	$0x0, (%rax)
00000000010343ac	je	0x10343bd
00000000010343ae	callq	runtime.dropm
00000000010343b3	movq	0x10(%rsp), %rbp
00000000010343b8	addq	$0x18, %rsp
00000000010343bc	retq
00000000010343bd	movq	0x20(%rsp), %rax
00000000010343c2	movl	%eax, (%rsp)
00000000010343c5	movq	0x28(%rsp), %rax
00000000010343ca	movq	%rax, 0x8(%rsp)
00000000010343cf	callq	runtime.raisebadsignal
00000000010343d4	jmp	0x10343ae
00000000010343d6	int3
00000000010343d7	int3
00000000010343d8	int3
00000000010343d9	int3
00000000010343da	int3
00000000010343db	int3
00000000010343dc	int3
00000000010343dd	int3
00000000010343de	int3
00000000010343df	int3
runtime.sigfwdgo:
00000000010343e0	subq	$0x28, %rsp
00000000010343e4	movq	%rbp, 0x20(%rsp)
00000000010343e9	leaq	0x20(%rsp), %rbp
00000000010343ee	movl	0x30(%rsp), %eax
00000000010343f2	cmpl	$0x20, %eax
00000000010343f5	jae	0x1034583
00000000010343fb	cmpq	$0x20, %rax
00000000010343ff	jae	0x1034592
0000000001034405	leaq	runtime.fwdSig(%rip), %rcx
000000000103440c	leaq	(%rcx,%rax,8), %rcx
0000000001034410	movq	(%rcx), %rcx
0000000001034413	leaq	(%rax,%rax,2), %rdx
0000000001034417	leaq	runtime.sigtable(%rip), %rbx
000000000103441e	movl	(%rbx,%rdx,8), %edx
0000000001034421	leaq	runtime.handlingSig(%rip), %rbx
0000000001034428	leaq	(%rbx,%rax,4), %rbx
000000000103442c	movl	(%rbx), %ebx
000000000103442e	testl	%ebx, %ebx
0000000001034430	jne	0x10344b7
0000000001034436	cmpq	$0x1, %rcx
000000000103443a	jne	0x103444b
000000000103443c	movb	$0x1, 0x48(%rsp)
0000000001034441	movq	0x20(%rsp), %rbp
0000000001034446	addq	$0x28, %rsp
000000000103444a	retq
000000000103444b	testq	%rcx, %rcx
000000000103444e	jne	0x1034459
0000000001034450	btl	$0x8, %edx
0000000001034454	jb	0x103443c
0000000001034456	testq	%rcx, %rcx
0000000001034459	jne	0x1034487
000000000103445b	movl	%eax, (%rsp)
000000000103445e	movq	$0x0, 0x8(%rsp)
0000000001034467	callq	runtime.setsig
000000000103446c	movl	0x30(%rsp), %eax
0000000001034470	movl	%eax, (%rsp)
0000000001034473	callq	runtime.dieFromSignal
0000000001034478	movb	$0x0, 0x48(%rsp)
000000000103447d	movq	0x20(%rsp), %rbp
0000000001034482	addq	$0x28, %rsp
0000000001034486	retq
0000000001034487	movq	%rcx, (%rsp)
000000000103448b	movl	%eax, 0x8(%rsp)
000000000103448f	movq	0x38(%rsp), %rax
0000000001034494	movq	%rax, 0x10(%rsp)
0000000001034499	movq	0x40(%rsp), %rax
000000000103449e	movq	%rax, 0x18(%rsp)
00000000010344a3	callq	runtime.sigfwd
00000000010344a8	movb	$0x1, 0x48(%rsp)
00000000010344ad	movq	0x20(%rsp), %rbp
00000000010344b2	addq	$0x28, %rsp
00000000010344b6	retq
00000000010344b7	leaq	runtime.signalsOK(%rip), %rbx
00000000010344be	cmpb	$0x0, (%rbx)
00000000010344c1	je	0x1034436
00000000010344c7	testq	%rcx, %rcx
00000000010344ca	je	0x1034574
00000000010344d0	movq	0x38(%rsp), %rbx
00000000010344d5	movslq	0x8(%rbx), %rsi
00000000010344d9	testq	%rsi, %rsi
00000000010344dc	jne	0x1034565
00000000010344e2	cmpl	$0xd, %eax
00000000010344e5	jne	0x1034556
00000000010344e7	movq	%gs:0x30, %rdx
00000000010344f0	testq	%rdx, %rdx
00000000010344f3	je	0x1034514
00000000010344f5	movq	0x30(%rdx), %rdx
00000000010344f9	testq	%rdx, %rdx
00000000010344fc	je	0x1034514
00000000010344fe	cmpq	$0x0, 0xc0(%rdx)
0000000001034506	je	0x1034514
0000000001034508	addq	$0x115, %rdx
000000000103450f	cmpb	$0x0, (%rdx)
0000000001034512	je	0x1034547
0000000001034514	cmpq	$0x1, %rcx
0000000001034518	jne	0x1034529
000000000103451a	movb	$0x1, 0x48(%rsp)
000000000103451f	movq	0x20(%rsp), %rbp
0000000001034524	addq	$0x28, %rsp
0000000001034528	retq
0000000001034529	movq	%rcx, (%rsp)
000000000103452d	movl	%eax, 0x8(%rsp)
0000000001034531	movq	%rbx, 0x10(%rsp)
0000000001034536	movq	0x40(%rsp), %rax
000000000103453b	movq	%rax, 0x18(%rsp)
0000000001034540	callq	runtime.sigfwd
0000000001034545	jmp	0x103451a
0000000001034547	movb	$0x0, 0x48(%rsp)
000000000103454c	movq	0x20(%rsp), %rbp
0000000001034551	addq	$0x28, %rsp
0000000001034555	retq
0000000001034556	movb	$0x0, 0x48(%rsp)
000000000103455b	movq	0x20(%rsp), %rbp
0000000001034560	addq	$0x28, %rsp
0000000001034564	retq
0000000001034565	btl	$0x3, %edx
0000000001034569	jae	0x10344e2
000000000103456f	jmp	0x10344e7
0000000001034574	movb	$0x0, 0x48(%rsp)
0000000001034579	movq	0x20(%rsp), %rbp
000000000103457e	addq	$0x28, %rsp
0000000001034582	retq
0000000001034583	movb	$0x0, 0x48(%rsp)
0000000001034588	movq	0x20(%rsp), %rbp
000000000103458d	addq	$0x28, %rsp
0000000001034591	retq
0000000001034592	callq	runtime.panicindex
0000000001034597	ud2
0000000001034599	int3
000000000103459a	int3
000000000103459b	int3
000000000103459c	int3
000000000103459d	int3
000000000103459e	int3
000000000103459f	int3
runtime.msigsave:
00000000010345a0	subq	$0x20, %rsp
00000000010345a4	movq	%rbp, 0x18(%rsp)
00000000010345a9	leaq	0x18(%rsp), %rbp
00000000010345ae	movq	0x28(%rsp), %rax
00000000010345b3	testb	%al, (%rax)
00000000010345b5	addq	$0x80, %rax
00000000010345bb	movq	%rax, 0x10(%rsp)
00000000010345c0	movl	$0x3, (%rsp)
00000000010345c7	movq	$0x0, 0x8(%rsp)
00000000010345d0	callq	runtime.sigprocmask
00000000010345d5	movq	0x18(%rsp), %rbp
00000000010345da	addq	$0x20, %rsp
00000000010345de	retq
00000000010345df	int3
runtime.msigrestore:
00000000010345e0	subq	$0x20, %rsp
00000000010345e4	movq	%rbp, 0x18(%rsp)
00000000010345e9	leaq	0x18(%rsp), %rbp
00000000010345ee	movl	$0x3, (%rsp)
00000000010345f5	leaq	0x28(%rsp), %rax
00000000010345fa	movq	%rax, 0x8(%rsp)
00000000010345ff	movq	$0x0, 0x10(%rsp)
0000000001034608	callq	runtime.sigprocmask
000000000103460d	movq	0x18(%rsp), %rbp
0000000001034612	addq	$0x20, %rsp
0000000001034616	retq
0000000001034617	int3
0000000001034618	int3
0000000001034619	int3
000000000103461a	int3
000000000103461b	int3
000000000103461c	int3
000000000103461d	int3
000000000103461e	int3
000000000103461f	int3
runtime.sigblock:
0000000001034620	subq	$0x20, %rsp
0000000001034624	movq	%rbp, 0x18(%rsp)
0000000001034629	leaq	0x18(%rsp), %rbp
000000000103462e	movl	$0x3, (%rsp)
0000000001034635	leaq	runtime.sigset_all(%rip), %rax
000000000103463c	movq	%rax, 0x8(%rsp)
0000000001034641	movq	$0x0, 0x10(%rsp)
000000000103464a	callq	runtime.sigprocmask
000000000103464f	movq	0x18(%rsp), %rbp
0000000001034654	addq	$0x20, %rsp
0000000001034658	retq
0000000001034659	int3
000000000103465a	int3
000000000103465b	int3
000000000103465c	int3
000000000103465d	int3
000000000103465e	int3
000000000103465f	int3
runtime.unblocksig:
0000000001034660	subq	$0x28, %rsp
0000000001034664	movq	%rbp, 0x20(%rsp)
0000000001034669	leaq	0x20(%rsp), %rbp
000000000103466e	movl	$0x0, 0x1c(%rsp)
0000000001034676	movl	0x30(%rsp), %eax
000000000103467a	leal	-0x1(%rax), %ecx
000000000103467d	movl	$0x1, %eax
0000000001034682	shll	%cl, %eax
0000000001034684	cmpl	$0x20, %ecx
0000000001034687	sbbl	%edx, %edx
0000000001034689	andl	%edx, %eax
000000000103468b	movl	%eax, 0x1c(%rsp)
000000000103468f	movl	$0x2, (%rsp)
0000000001034696	leaq	0x1c(%rsp), %rax
000000000103469b	movq	%rax, 0x8(%rsp)
00000000010346a0	movq	$0x0, 0x10(%rsp)
00000000010346a9	callq	runtime.sigprocmask
00000000010346ae	movq	0x20(%rsp), %rbp
00000000010346b3	addq	$0x28, %rsp
00000000010346b7	retq
00000000010346b8	int3
00000000010346b9	int3
00000000010346ba	int3
00000000010346bb	int3
00000000010346bc	int3
00000000010346bd	int3
00000000010346be	int3
00000000010346bf	int3
runtime.minitSignalStack:
00000000010346c0	movq	%gs:0x30, %rcx
00000000010346c9	cmpq	0x10(%rcx), %rsp
00000000010346cd	jbe	0x1034814
00000000010346d3	subq	$0x38, %rsp
00000000010346d7	movq	%rbp, 0x30(%rsp)
00000000010346dc	leaq	0x30(%rsp), %rbp
00000000010346e1	movq	%gs:0x30, %rax
00000000010346ea	movq	%rax, 0x10(%rsp)
00000000010346ef	movq	$0x0, 0x18(%rsp)
00000000010346f8	xorps	%xmm0, %xmm0
00000000010346fb	movups	%xmm0, 0x20(%rsp)
0000000001034700	movq	$0x0, (%rsp)
0000000001034708	leaq	0x18(%rsp), %rcx
000000000103470d	movq	%rcx, 0x8(%rsp)
0000000001034712	callq	runtime.sigaltstack
0000000001034717	movl	0x28(%rsp), %eax
000000000103471b	btl	$0x2, %eax
000000000103471f	jb	0x10347e6
0000000001034725	movq	0x10(%rsp), %rax
000000000103472a	movq	0x30(%rax), %rcx
000000000103472e	testb	%al, (%rcx)
0000000001034730	testb	%al, (%rax)
0000000001034732	leaq	0x58(%rcx), %rdx
0000000001034736	movq	%gs:0x30, %rbx
000000000103473f	testq	%rdx, %rdx
0000000001034742	je	0x103478e
0000000001034744	movq	0x30(%rbx), %rdx
0000000001034748	movq	0x50(%rdx), %rdx
000000000103474c	movq	(%rdx), %rsi
000000000103474f	movq	0x8(%rdx), %rdx
0000000001034753	movq	%rsi, 0x58(%rcx)
0000000001034757	movq	%rdx, 0x60(%rcx)
000000000103475b	movq	0x30(%rbx), %rdx
000000000103475f	movq	0x50(%rdx), %rdx
0000000001034763	movq	0x10(%rdx), %rdx
0000000001034767	movq	%rdx, 0x68(%rcx)
000000000103476b	movq	0x30(%rbx), %rdx
000000000103476f	movq	0x50(%rdx), %rdx
0000000001034773	movq	0x18(%rdx), %rdx
0000000001034777	movq	%rdx, 0x70(%rcx)
000000000103477b	movq	0x30(%rbx), %rdx
000000000103477f	movq	0x50(%rdx), %rdx
0000000001034783	movq	0x80(%rdx), %rdx
000000000103478a	movq	%rdx, 0x78(%rcx)
000000000103478e	movq	0x30(%rbx), %rcx
0000000001034792	movq	0x50(%rcx), %rcx
0000000001034796	movq	0x18(%rsp), %rdx
000000000103479b	movq	%rdx, (%rcx)
000000000103479e	movq	0x30(%rbx), %rcx
00000000010347a2	movq	0x50(%rcx), %rcx
00000000010347a6	movq	0x20(%rsp), %rsi
00000000010347ab	addq	%rdx, %rsi
00000000010347ae	movq	%rsi, 0x8(%rcx)
00000000010347b2	movq	0x30(%rbx), %rcx
00000000010347b6	movq	0x50(%rcx), %rcx
00000000010347ba	addq	$0x370, %rdx
00000000010347c1	movq	%rdx, 0x10(%rcx)
00000000010347c5	movq	0x30(%rbx), %rcx
00000000010347c9	movq	0x50(%rcx), %rcx
00000000010347cd	movq	%rdx, 0x18(%rcx)
00000000010347d1	movq	0x30(%rax), %rax
00000000010347d5	movb	$0x0, 0x113(%rax)
00000000010347dc	movq	0x30(%rsp), %rbp
00000000010347e1	addq	$0x38, %rsp
00000000010347e5	retq
00000000010347e6	movq	0x10(%rsp), %rax
00000000010347eb	movq	0x30(%rax), %rcx
00000000010347ef	movq	0x50(%rcx), %rdx
00000000010347f3	testb	%al, (%rdx)
00000000010347f5	testb	%al, (%rax)
00000000010347f7	testb	%al, (%rcx)
00000000010347f9	movq	%rdx, (%rsp)
00000000010347fd	callq	runtime.signalstack
0000000001034802	movq	0x10(%rsp), %rax
0000000001034807	movq	0x30(%rax), %rax
000000000103480b	movb	$0x1, 0x113(%rax)
0000000001034812	jmp	0x10347dc
0000000001034814	callq	runtime.morestack_noctxt
0000000001034819	jmp	runtime.minitSignalStack
000000000103481e	int3
000000000103481f	int3
runtime.minitSignalMask:
0000000001034820	movq	%gs:0x30, %rcx
0000000001034829	cmpq	0x10(%rcx), %rsp
000000000103482d	jbe	0x10348f0
0000000001034833	subq	$0x28, %rsp
0000000001034837	movq	%rbp, 0x20(%rsp)
000000000103483c	leaq	0x20(%rsp), %rbp
0000000001034841	movq	%gs:0x30, %rax
000000000103484a	movq	0x30(%rax), %rax
000000000103484e	movl	0x80(%rax), %eax
0000000001034854	movl	%eax, 0x1c(%rsp)
0000000001034858	xorl	%eax, %eax
000000000103485a	jmp	0x103485f
000000000103485c	incq	%rax
000000000103485f	cmpq	$0x20, %rax
0000000001034863	jge	0x10348c0
0000000001034865	movl	%eax, %edx
0000000001034867	cmpq	$0x20, %rdx
000000000103486b	jae	0x10348e9
000000000103486d	leaq	(%rdx,%rdx,2), %rdx
0000000001034871	leaq	runtime.sigtable(%rip), %rbx
0000000001034878	movl	(%rbx,%rdx,8), %edx
000000000103487b	btl	$0x7, %edx
000000000103487f	jae	0x103489e
0000000001034881	leal	-0x1(%rax), %ecx
0000000001034884	movl	$0x1, %edx
0000000001034889	shll	%cl, %edx
000000000103488b	cmpl	$0x20, %ecx
000000000103488e	sbbl	%esi, %esi
0000000001034890	andl	%esi, %edx
0000000001034892	notl	%edx
0000000001034894	andl	0x1c(%rsp), %edx
0000000001034898	movl	%edx, 0x1c(%rsp)
000000000103489c	jmp	0x103485c
000000000103489e	leaq	runtime.isarchive(%rip), %rsi
00000000010348a5	cmpb	$0x0, (%rsi)
00000000010348a8	jne	0x103485c
00000000010348aa	leaq	runtime.islibrary(%rip), %rdi
00000000010348b1	cmpb	$0x0, (%rdi)
00000000010348b4	jne	0x103485c
00000000010348b6	testl	$0x6, %edx
00000000010348bc	je	0x103485c
00000000010348be	jmp	0x1034881
00000000010348c0	movl	$0x3, (%rsp)
00000000010348c7	leaq	0x1c(%rsp), %rax
00000000010348cc	movq	%rax, 0x8(%rsp)
00000000010348d1	movq	$0x0, 0x10(%rsp)
00000000010348da	callq	runtime.sigprocmask
00000000010348df	movq	0x20(%rsp), %rbp
00000000010348e4	addq	$0x28, %rsp
00000000010348e8	retq
00000000010348e9	callq	runtime.panicindex
00000000010348ee	ud2
00000000010348f0	callq	runtime.morestack_noctxt
00000000010348f5	jmp	runtime.minitSignalMask
00000000010348fa	int3
00000000010348fb	int3
00000000010348fc	int3
00000000010348fd	int3
00000000010348fe	int3
00000000010348ff	int3
runtime.unminitSignals:
0000000001034900	subq	$0x30, %rsp
0000000001034904	movq	%rbp, 0x28(%rsp)
0000000001034909	leaq	0x28(%rsp), %rbp
000000000103490e	movq	%gs:0x30, %rax
0000000001034917	movq	0x30(%rax), %rax
000000000103491b	testb	%al, (%rax)
000000000103491d	leaq	0x113(%rax), %rcx
0000000001034924	cmpb	$0x0, (%rcx)
0000000001034927	jne	0x1034967
0000000001034929	movq	0x50(%rax), %rcx
000000000103492d	leaq	0x58(%rax), %rdx
0000000001034931	testb	%al, (%rdx)
0000000001034933	movq	0x60(%rax), %rdx
0000000001034937	movq	0x58(%rax), %rbx
000000000103493b	movq	%rbx, (%rcx)
000000000103493e	movq	%rdx, 0x8(%rcx)
0000000001034942	movq	0x68(%rax), %rdx
0000000001034946	movq	%rdx, 0x10(%rcx)
000000000103494a	movq	0x70(%rax), %rdx
000000000103494e	movq	%rdx, 0x18(%rcx)
0000000001034952	movq	0x78(%rax), %rax
0000000001034956	movq	%rax, 0x80(%rcx)
000000000103495d	movq	0x28(%rsp), %rbp
0000000001034962	addq	$0x30, %rsp
0000000001034966	retq
0000000001034967	movq	$0x0, 0x10(%rsp)
0000000001034970	xorps	%xmm0, %xmm0
0000000001034973	movups	%xmm0, 0x18(%rsp)
0000000001034978	movl	$0x4, 0x20(%rsp)
0000000001034980	leaq	0x10(%rsp), %rax
0000000001034985	movq	%rax, (%rsp)
0000000001034989	movq	$0x0, 0x8(%rsp)
0000000001034992	callq	runtime.sigaltstack
0000000001034997	jmp	0x103495d
0000000001034999	int3
000000000103499a	int3
000000000103499b	int3
000000000103499c	int3
000000000103499d	int3
000000000103499e	int3
000000000103499f	int3
runtime.signalstack:
00000000010349a0	subq	$0x30, %rsp
00000000010349a4	movq	%rbp, 0x28(%rsp)
00000000010349a9	leaq	0x28(%rsp), %rbp
00000000010349ae	movq	$0x0, 0x10(%rsp)
00000000010349b7	xorps	%xmm0, %xmm0
00000000010349ba	movups	%xmm0, 0x18(%rsp)
00000000010349bf	movq	0x38(%rsp), %rax
00000000010349c4	movq	0x8(%rax), %rcx
00000000010349c8	subq	(%rax), %rcx
00000000010349cb	movq	%rcx, 0x18(%rsp)
00000000010349d0	leaq	0x10(%rsp), %rcx
00000000010349d5	testb	%al, (%rcx)
00000000010349d7	movq	(%rax), %rax
00000000010349da	movq	%rax, 0x10(%rsp)
00000000010349df	leaq	0x10(%rsp), %rax
00000000010349e4	movq	%rax, (%rsp)
00000000010349e8	movq	$0x0, 0x8(%rsp)
00000000010349f1	callq	runtime.sigaltstack
00000000010349f6	movq	0x28(%rsp), %rbp
00000000010349fb	addq	$0x30, %rsp
00000000010349ff	retq
runtime.sigsend:
0000000001034a00	movq	%gs:0x30, %rcx
0000000001034a09	cmpq	0x10(%rcx), %rsp
0000000001034a0d	jbe	0x1034b86
0000000001034a13	subq	$0x18, %rsp
0000000001034a17	movq	%rbp, 0x10(%rsp)
0000000001034a1c	leaq	0x10(%rsp), %rbp
0000000001034a21	leaq	0xa0298(%rip), %rcx
0000000001034a28	cmpb	$0x0, (%rcx)
0000000001034a2b	je	0x1034b55
0000000001034a31	movl	0x20(%rsp), %ecx
0000000001034a35	cmpl	$0x20, %ecx
0000000001034a38	jae	0x1034b55
0000000001034a3e	movl	$0x1, %edx
0000000001034a43	leaq	0xa0272(%rip), %rbx
0000000001034a4a	lock
0000000001034a4b	xaddl	%edx, (%rbx)
0000000001034a4e	movl	%ecx, %edx
0000000001034a50	shrl	$0x5, %ecx
0000000001034a53	cmpq	$0x1, %rcx
0000000001034a57	jae	0x1034b7f
0000000001034a5d	leaq	0xa0248(%rip), %rsi
0000000001034a64	leaq	(%rsi,%rcx,4), %rsi
0000000001034a68	movl	(%rsi), %esi
0000000001034a6a	btl	%edx, %esi
0000000001034a6d	jae	0x1034b3d
0000000001034a73	movl	0xa022f(%rip), %eax
0000000001034a79	btl	%edx, %eax
0000000001034a7c	jb	0x1034b25
0000000001034a82	leaq	0xa021f(%rip), %rsi
0000000001034a89	leaq	(%rsi,%rcx,4), %rsi
0000000001034a8d	movl	%eax, %edi
0000000001034a8f	btsl	%edx, %eax
0000000001034a92	movl	%eax, %r8d
0000000001034a95	movl	%edi, %eax
0000000001034a97	lock
0000000001034a98	cmpxchgl	%r8d, (%rsi)
0000000001034a9c	sete	%sil
0000000001034aa0	testb	%sil, %sil
0000000001034aa3	je	0x1034a73
0000000001034aa5	movl	0xa020d(%rip), %ecx
0000000001034aab	testl	%ecx, %ecx
0000000001034aad	jne	0x1034ae0
0000000001034aaf	xorl	%eax, %eax
0000000001034ab1	leaq	0xa0200(%rip), %rcx
0000000001034ab8	movl	$0x2, %edx
0000000001034abd	lock
0000000001034abe	cmpxchgl	%edx, (%rcx)
0000000001034ac1	sete	%cl
0000000001034ac4	testb	%cl, %cl
0000000001034ac6	je	0x1034aa5
0000000001034ac8	movl	$0xffffffff, %eax
0000000001034acd	lock
0000000001034ace	xaddl	%eax, (%rbx)
0000000001034ad1	movb	$0x1, 0x28(%rsp)
0000000001034ad6	movq	0x10(%rsp), %rbp
0000000001034adb	addq	$0x18, %rsp
0000000001034adf	retq
0000000001034ae0	cmpl	$0x1, %ecx
0000000001034ae3	jne	0x1034b1e
0000000001034ae5	movl	$0x1, %eax
0000000001034aea	leaq	0xa01c7(%rip), %rcx
0000000001034af1	xorl	%edx, %edx
0000000001034af3	lock
0000000001034af4	cmpxchgl	%edx, (%rcx)
0000000001034af7	sete	%cl
0000000001034afa	testb	%cl, %cl
0000000001034afc	jne	0x1034b05
0000000001034afe	movl	$0x2, %edx
0000000001034b03	jmp	0x1034aa5
0000000001034b05	leaq	runtime.sig(%rip), %rax
0000000001034b0c	movq	%rax, (%rsp)
0000000001034b10	callq	runtime.notewakeup
0000000001034b15	leaq	0xa01a0(%rip), %rbx
0000000001034b1c	jmp	0x1034ac8
0000000001034b1e	cmpl	$0x2, %ecx
0000000001034b21	je	0x1034ac8
0000000001034b23	jmp	0x1034b64
0000000001034b25	movl	$0xffffffff, %eax
0000000001034b2a	lock
0000000001034b2b	xaddl	%eax, (%rbx)
0000000001034b2e	movb	$0x1, 0x28(%rsp)
0000000001034b33	movq	0x10(%rsp), %rbp
0000000001034b38	addq	$0x18, %rsp
0000000001034b3c	retq
0000000001034b3d	movl	$0xffffffff, %eax
0000000001034b42	lock
0000000001034b43	xaddl	%eax, (%rbx)
0000000001034b46	movb	$0x0, 0x28(%rsp)
0000000001034b4b	movq	0x10(%rsp), %rbp
0000000001034b50	addq	$0x18, %rsp
0000000001034b54	retq
0000000001034b55	movb	$0x0, 0x28(%rsp)
0000000001034b5a	movq	0x10(%rsp), %rbp
0000000001034b5f	addq	$0x18, %rsp
0000000001034b63	retq
0000000001034b64	leaq	0x380a9(%rip), %rax
0000000001034b6b	movq	%rax, (%rsp)
0000000001034b6f	movq	$0x1b, 0x8(%rsp)
0000000001034b78	callq	runtime.throw
0000000001034b7d	ud2
0000000001034b7f	callq	runtime.panicindex
0000000001034b84	ud2
0000000001034b86	callq	runtime.morestack_noctxt
0000000001034b8b	jmp	runtime.sigsend
runtime.makeslice:
0000000001034b90	movq	%gs:0x30, %rcx
0000000001034b99	cmpq	0x10(%rcx), %rsp
0000000001034b9d	jbe	0x1034c82
0000000001034ba3	subq	$0x28, %rsp
0000000001034ba7	movq	%rbp, 0x20(%rsp)
0000000001034bac	leaq	0x20(%rsp), %rbp
0000000001034bb1	movq	0x30(%rsp), %rcx
0000000001034bb6	movq	(%rcx), %rdx
0000000001034bb9	cmpq	$0x21, %rdx
0000000001034bbd	jae	0x1034c2f
0000000001034bbf	leaq	runtime.maxElems(%rip), %rax
0000000001034bc6	movq	(%rax,%rdx,8), %rax
0000000001034bca	movq	0x38(%rsp), %rbx
0000000001034bcf	testq	%rbx, %rbx
0000000001034bd2	jl	0x1034c64
0000000001034bd8	cmpq	%rax, %rbx
0000000001034bdb	ja	0x1034c64
0000000001034be1	movq	0x40(%rsp), %rsi
0000000001034be6	cmpq	%rbx, %rsi
0000000001034be9	jl	0x1034c46
0000000001034beb	cmpq	%rax, %rsi
0000000001034bee	ja	0x1034c46
0000000001034bf0	imulq	%rsi, %rdx
0000000001034bf4	movq	%rdx, (%rsp)
0000000001034bf8	movq	%rcx, 0x8(%rsp)
0000000001034bfd	movb	$0x1, 0x10(%rsp)
0000000001034c02	callq	runtime.mallocgc
0000000001034c07	movq	0x18(%rsp), %rax
0000000001034c0c	movq	%rax, 0x48(%rsp)
0000000001034c11	movq	0x38(%rsp), %rax
0000000001034c16	movq	%rax, 0x50(%rsp)
0000000001034c1b	movq	0x40(%rsp), %rax
0000000001034c20	movq	%rax, 0x58(%rsp)
0000000001034c25	movq	0x20(%rsp), %rbp
0000000001034c2a	addq	$0x28, %rsp
0000000001034c2e	retq
0000000001034c2f	movabsq	$0x1000000000000, %rax
0000000001034c39	movq	%rdx, %rbx
0000000001034c3c	xorl	%edx, %edx
0000000001034c3e	divq	%rbx
0000000001034c41	movq	%rbx, %rdx
0000000001034c44	jmp	0x1034bca
0000000001034c46	leaq	0x27393(%rip), %rax
0000000001034c4d	movq	%rax, (%rsp)
0000000001034c51	leaq	runtime.statictmp_29(%rip), %rax
0000000001034c58	movq	%rax, 0x8(%rsp)
0000000001034c5d	callq	runtime.gopanic
0000000001034c62	ud2
0000000001034c64	leaq	0x27375(%rip), %rax
0000000001034c6b	movq	%rax, (%rsp)
0000000001034c6f	leaq	runtime.statictmp_28(%rip), %rax
0000000001034c76	movq	%rax, 0x8(%rsp)
0000000001034c7b	callq	runtime.gopanic
0000000001034c80	ud2
0000000001034c82	callq	runtime.morestack_noctxt
0000000001034c87	jmp	runtime.makeslice
0000000001034c8c	int3
0000000001034c8d	int3
0000000001034c8e	int3
0000000001034c8f	int3
runtime.growslice:
0000000001034c90	movq	%gs:0x30, %rcx
0000000001034c99	cmpq	0x10(%rcx), %rsp
0000000001034c9d	jbe	0x1035364
0000000001034ca3	subq	$0x60, %rsp
0000000001034ca7	movq	%rbp, 0x58(%rsp)
0000000001034cac	leaq	0x58(%rsp), %rbp
0000000001034cb1	movq	0x68(%rsp), %rdx
0000000001034cb6	movq	(%rdx), %rbx
0000000001034cb9	testq	%rbx, %rbx
0000000001034cbc	je	0x10352a9
0000000001034cc2	movq	0x80(%rsp), %rsi
0000000001034cca	leaq	(%rsi,%rsi), %rdi
0000000001034cce	movq	0x88(%rsp), %r8
0000000001034cd6	cmpq	%rdi, %r8
0000000001034cd9	jg	0x1035299
0000000001034cdf	movq	0x78(%rsp), %r9
0000000001034ce4	cmpq	$0x400, %r9
0000000001034ceb	jl	0x103528e
0000000001034cf1	movq	%rsi, %rax
0000000001034cf4	jmp	0x1034d0d
0000000001034cf6	movq	%rsi, %rdi
0000000001034cf9	sarq	$0x3f, %rsi
0000000001034cfd	shrq	$0x3e, %rsi
0000000001034d01	leaq	(%rsi,%rdi), %r10
0000000001034d05	sarq	$0x2, %r10
0000000001034d09	leaq	(%r10,%rdi), %rsi
0000000001034d0d	testq	%rsi, %rsi
0000000001034d10	jle	0x1034d1a
0000000001034d12	cmpq	%r8, %rsi
0000000001034d15	jl	0x1034cf6
0000000001034d17	testq	%rsi, %rsi
0000000001034d1a	cmovleq	%r8, %rsi
0000000001034d1e	cmpq	$0x1, %rbx
0000000001034d22	jne	0x1034f62
0000000001034d28	cmpq	$0x8000, %rsi
0000000001034d2f	jae	0x1034f3b
0000000001034d35	cmpq	$0x3f8, %rsi
0000000001034d3c	ja	0x1034efe
0000000001034d42	leaq	0x7(%rsi), %rcx
0000000001034d46	shrq	$0x3, %rcx
0000000001034d4a	cmpq	$0x81, %rcx
0000000001034d51	jae	0x103533f
0000000001034d57	leaq	runtime.size_to_class8(%rip), %rbx
0000000001034d5e	movzbl	(%rcx,%rbx), %ecx
0000000001034d62	cmpq	$0x43, %rcx
0000000001034d66	jae	0x103533f
0000000001034d6c	leaq	runtime.class_to_size(%rip), %rbx
0000000001034d73	movzwl	(%rbx,%rcx,2), %ecx
0000000001034d77	movabsq	$0x1000000000000, %rbx
0000000001034d81	cmpq	%rbx, %rsi
0000000001034d84	seta	%sil
0000000001034d88	movq	%r8, %rdi
0000000001034d8b	movq	%r9, %r10
0000000001034d8e	movq	%rcx, %r11
0000000001034d91	cmpq	%rax, %rdi
0000000001034d94	jl	0x10352f0
0000000001034d9a	testb	%sil, %sil
0000000001034d9d	jne	0x10352f0
0000000001034da3	cmpq	%rbx, %rcx
0000000001034da6	ja	0x10352f0
0000000001034dac	movq	%r9, 0x38(%rsp)
0000000001034db1	movq	%r11, 0x30(%rsp)
0000000001034db6	movzbl	0x17(%rdx), %eax
0000000001034dba	testb	$-0x80, %al
0000000001034dbc	jne	0x1034e88
0000000001034dc2	movq	%rcx, (%rsp)
0000000001034dc6	movq	%rdx, 0x8(%rsp)
0000000001034dcb	movb	$0x1, 0x10(%rsp)
0000000001034dd0	callq	runtime.mallocgc
0000000001034dd5	movq	0x18(%rsp), %rax
0000000001034dda	movq	%rax, 0x48(%rsp)
0000000001034ddf	leaq	runtime.writeBarrier(%rip), %rcx
0000000001034de6	cmpb	$0x0, (%rcx)
0000000001034de9	je	0x1034e64
0000000001034deb	xorl	%ecx, %ecx
0000000001034ded	jmp	0x1034e2e
0000000001034def	movq	%rcx, 0x20(%rsp)
0000000001034df4	movq	0x68(%rsp), %rdx
0000000001034df9	movq	%rdx, (%rsp)
0000000001034dfd	leaq	(%rcx,%rax), %rbx
0000000001034e01	movq	%rbx, 0x8(%rsp)
0000000001034e06	movq	0x70(%rsp), %rbx
0000000001034e0b	leaq	(%rcx,%rbx), %rsi
0000000001034e0f	movq	%rsi, 0x10(%rsp)
0000000001034e14	callq	runtime.typedmemmove
0000000001034e19	movq	0x68(%rsp), %rax
0000000001034e1e	movq	(%rax), %rcx
0000000001034e21	movq	0x20(%rsp), %rdx
0000000001034e26	addq	%rdx, %rcx
0000000001034e29	movq	0x48(%rsp), %rax
0000000001034e2e	movq	0x38(%rsp), %rdx
0000000001034e33	cmpq	%rdx, %rcx
0000000001034e36	jb	0x1034def
0000000001034e38	movq	%rax, 0x90(%rsp)
0000000001034e40	movq	0x78(%rsp), %rax
0000000001034e45	movq	%rax, 0x98(%rsp)
0000000001034e4d	movq	0x30(%rsp), %rax
0000000001034e52	movq	%rax, 0xa0(%rsp)
0000000001034e5a	movq	0x58(%rsp), %rbp
0000000001034e5f	addq	$0x60, %rsp
0000000001034e63	retq
0000000001034e64	movq	%rax, (%rsp)
0000000001034e68	movq	0x70(%rsp), %rcx
0000000001034e6d	movq	%rcx, 0x8(%rsp)
0000000001034e72	movq	0x38(%rsp), %rcx
0000000001034e77	movq	%rcx, 0x10(%rsp)
0000000001034e7c	callq	runtime.memmove
0000000001034e81	movq	0x48(%rsp), %rax
0000000001034e86	jmp	0x1034e38
0000000001034e88	movq	%r8, 0x28(%rsp)
0000000001034e8d	movq	%rcx, 0x40(%rsp)
0000000001034e92	movq	%rcx, (%rsp)
0000000001034e96	movq	$0x0, 0x8(%rsp)
0000000001034e9f	movb	$0x0, 0x10(%rsp)
0000000001034ea4	callq	runtime.mallocgc
0000000001034ea9	movq	0x18(%rsp), %rax
0000000001034eae	movq	%rax, 0x50(%rsp)
0000000001034eb3	movq	%rax, (%rsp)
0000000001034eb7	movq	0x70(%rsp), %rcx
0000000001034ebc	movq	%rcx, 0x8(%rsp)
0000000001034ec1	movq	0x38(%rsp), %rcx
0000000001034ec6	movq	%rcx, 0x10(%rsp)
0000000001034ecb	callq	runtime.memmove
0000000001034ed0	movq	0x50(%rsp), %rax
0000000001034ed5	movq	0x28(%rsp), %rcx
0000000001034eda	leaq	(%rcx,%rax), %rdx
0000000001034ede	movq	%rdx, (%rsp)
0000000001034ee2	movq	0x40(%rsp), %rdx
0000000001034ee7	subq	%rcx, %rdx
0000000001034eea	movq	%rdx, 0x8(%rsp)
0000000001034eef	callq	runtime.memclrNoHeapPointers
0000000001034ef4	movq	0x50(%rsp), %rax
0000000001034ef9	jmp	0x1034e38
0000000001034efe	leaq	-0x381(%rsi), %rcx
0000000001034f05	shrq	$0x7, %rcx
0000000001034f09	cmpq	$0xf9, %rcx
0000000001034f10	jae	0x1035338
0000000001034f16	leaq	runtime.size_to_class128(%rip), %rbx
0000000001034f1d	movzbl	(%rcx,%rbx), %ecx
0000000001034f21	cmpq	$0x43, %rcx
0000000001034f25	jae	0x1035338
0000000001034f2b	leaq	runtime.class_to_size(%rip), %rbx
0000000001034f32	movzwl	(%rbx,%rcx,2), %ecx
0000000001034f36	jmp	0x1034d77
0000000001034f3b	leaq	0x2000(%rsi), %rcx
0000000001034f42	cmpq	%rsi, %rcx
0000000001034f45	jae	0x1034f4f
0000000001034f47	movq	%rsi, %rcx
0000000001034f4a	jmp	0x1034d77
0000000001034f4f	leaq	0x1fff(%rsi), %rcx
0000000001034f56	andq	$-0x2000, %rcx
0000000001034f5d	jmp	0x1034d77
0000000001034f62	cmpq	$0x8, %rbx
0000000001034f66	jne	0x1035057
0000000001034f6c	movq	%rsi, %rcx
0000000001034f6f	shlq	$0x3, %rsi
0000000001034f73	cmpq	$0x8000, %rsi
0000000001034f7a	jae	0x1035030
0000000001034f80	cmpq	$0x3f8, %rsi
0000000001034f87	ja	0x1034ff6
0000000001034f89	leaq	0x7(%rsi), %rbx
0000000001034f8d	shrq	$0x3, %rbx
0000000001034f91	cmpq	$0x81, %rbx
0000000001034f98	jae	0x1035331
0000000001034f9e	leaq	runtime.size_to_class8(%rip), %rsi
0000000001034fa5	movzbl	(%rbx,%rsi), %ebx
0000000001034fa9	cmpq	$0x43, %rbx
0000000001034fad	jae	0x1035331
0000000001034fb3	leaq	runtime.class_to_size(%rip), %rsi
0000000001034fba	movzwl	(%rsi,%rbx,2), %ebx
0000000001034fbe	movq	%r9, %r10
0000000001034fc1	shlq	$0x3, %r9
0000000001034fc5	movq	%r8, %rdi
0000000001034fc8	shlq	$0x3, %r8
0000000001034fcc	movabsq	$0x200000000000, %r12
0000000001034fd6	cmpq	%r12, %rcx
0000000001034fd9	seta	%sil
0000000001034fdd	movq	%rbx, %r11
0000000001034fe0	shrq	$0x3, %r11
0000000001034fe4	movq	%rbx, %rcx
0000000001034fe7	movabsq	$0x1000000000000, %rbx
0000000001034ff1	jmp	0x1034d91
0000000001034ff6	leaq	-0x381(%rsi), %rbx
0000000001034ffd	shrq	$0x7, %rbx
0000000001035001	cmpq	$0xf9, %rbx
0000000001035008	jae	0x103532a
000000000103500e	leaq	runtime.size_to_class128(%rip), %rsi
0000000001035015	movzbl	(%rbx,%rsi), %ebx
0000000001035019	cmpq	$0x43, %rbx
000000000103501d	jae	0x103532a
0000000001035023	leaq	runtime.class_to_size(%rip), %rsi
000000000103502a	movzwl	(%rsi,%rbx,2), %ebx
000000000103502e	jmp	0x1034fbe
0000000001035030	leaq	0x2000(%rsi), %rbx
0000000001035037	cmpq	%rsi, %rbx
000000000103503a	jae	0x1035044
000000000103503c	movq	%rsi, %rbx
000000000103503f	jmp	0x1034fbe
0000000001035044	leaq	0x1fff(%rsi), %rbx
000000000103504b	andq	$-0x2000, %rbx
0000000001035052	jmp	0x1034fbe
0000000001035057	leaq	-0x1(%rbx), %rdi
000000000103505b	testq	%rdi, %rbx
000000000103505e	jne	0x103515c
0000000001035064	bsfq	%rbx, %rbx
0000000001035068	movq	%rbx, %rcx
000000000103506b	movq	%r9, %rdi
000000000103506e	shlq	%cl, %r9
0000000001035071	movq	%r8, %r10
0000000001035074	shlq	%cl, %r8
0000000001035077	movq	%rsi, %r11
000000000103507a	shlq	%cl, %rsi
000000000103507d	cmpq	$0x8000, %rsi
0000000001035084	jae	0x103513d
000000000103508a	cmpq	$0x3f8, %rsi
0000000001035091	ja	0x1035101
0000000001035093	addq	$0x7, %rsi
0000000001035097	shrq	$0x3, %rsi
000000000103509b	cmpq	$0x81, %rsi
00000000010350a2	jae	0x1035323
00000000010350a8	leaq	runtime.size_to_class8(%rip), %r12
00000000010350af	movzbl	(%rsi,%r12), %esi
00000000010350b4	cmpq	$0x43, %rsi
00000000010350b8	jae	0x1035323
00000000010350be	leaq	runtime.class_to_size(%rip), %r12
00000000010350c5	movzwl	(%r12,%rsi,2), %esi
00000000010350ca	movabsq	$0x1000000000000, %r12
00000000010350d4	shrq	%cl, %r12
00000000010350d7	cmpq	%r12, %r11
00000000010350da	seta	%r12b
00000000010350de	movq	%rsi, %r11
00000000010350e1	shrq	%cl, %r11
00000000010350e4	movabsq	$0x1000000000000, %rbx
00000000010350ee	movq	%r10, %rdi
00000000010350f1	movq	0x78(%rsp), %r10
00000000010350f6	movq	%rsi, %rcx
00000000010350f9	movl	%r12d, %esi
00000000010350fc	jmp	0x1034d91
0000000001035101	addq	$-0x381, %rsi
0000000001035108	shrq	$0x7, %rsi
000000000103510c	cmpq	$0xf9, %rsi
0000000001035113	jae	0x103531c
0000000001035119	leaq	runtime.size_to_class128(%rip), %r12
0000000001035120	movzbl	(%rsi,%r12), %esi
0000000001035125	cmpq	$0x43, %rsi
0000000001035129	jae	0x103531c
000000000103512f	leaq	runtime.class_to_size(%rip), %r12
0000000001035136	movzwl	(%r12,%rsi,2), %esi
000000000103513b	jmp	0x10350ca
000000000103513d	leaq	0x2000(%rsi), %r12
0000000001035144	cmpq	%rsi, %r12
0000000001035147	jb	0x10350ca
0000000001035149	addq	$0x1fff, %rsi
0000000001035150	andq	$-0x2000, %rsi
0000000001035157	jmp	0x10350ca
000000000103515c	movq	%r9, %rcx
000000000103515f	imulq	%rbx, %r9
0000000001035163	movq	%r8, %rdi
0000000001035166	imulq	%rbx, %r8
000000000103516a	movq	%rsi, %r10
000000000103516d	imulq	%rbx, %rsi
0000000001035171	cmpq	$0x8000, %rsi
0000000001035178	jae	0x103526b
000000000103517e	cmpq	$0x3f8, %rsi
0000000001035185	ja	0x103522c
000000000103518b	addq	$0x7, %rsi
000000000103518f	shrq	$0x3, %rsi
0000000001035193	cmpq	$0x81, %rsi
000000000103519a	jae	0x1035315
00000000010351a0	leaq	runtime.size_to_class8(%rip), %r11
00000000010351a7	movzbl	(%r11,%rsi), %esi
00000000010351ac	cmpq	$0x43, %rsi
00000000010351b0	jae	0x1035315
00000000010351b6	leaq	runtime.class_to_size(%rip), %r11
00000000010351bd	movzwl	(%r11,%rsi,2), %esi
00000000010351c2	cmpq	$0x21, %rbx
00000000010351c6	jae	0x1035209
00000000010351c8	leaq	runtime.maxElems(%rip), %r11
00000000010351cf	movq	(%r11,%rbx,8), %r11
00000000010351d3	movq	%rax, %r12
00000000010351d6	movq	%rsi, %rax
00000000010351d9	movq	%rdx, %r13
00000000010351dc	xorl	%edx, %edx
00000000010351de	divq	%rbx
00000000010351e1	cmpq	%r11, %r10
00000000010351e4	seta	%r14b
00000000010351e8	movq	%r13, %rdx
00000000010351eb	movabsq	$0x1000000000000, %rbx
00000000010351f5	movq	%rcx, %r10
00000000010351f8	movq	%rsi, %rcx
00000000010351fb	movq	%rax, %r11
00000000010351fe	movq	%r12, %rax
0000000001035201	movl	%r14d, %esi
0000000001035204	jmp	0x1034d91
0000000001035209	movq	%rax, %r11
000000000103520c	movabsq	$0x1000000000000, %rax
0000000001035216	movq	%rdx, %r12
0000000001035219	xorl	%edx, %edx
000000000103521b	divq	%rbx
000000000103521e	movq	%r12, %rdx
0000000001035221	movq	%rax, %r13
0000000001035224	movq	%r11, %rax
0000000001035227	movq	%r13, %r11
000000000103522a	jmp	0x10351d3
000000000103522c	addq	$-0x381, %rsi
0000000001035233	shrq	$0x7, %rsi
0000000001035237	cmpq	$0xf9, %rsi
000000000103523e	jae	0x103530e
0000000001035244	leaq	runtime.size_to_class128(%rip), %r11
000000000103524b	movzbl	(%rsi,%r11), %esi
0000000001035250	cmpq	$0x43, %rsi
0000000001035254	jae	0x103530e
000000000103525a	leaq	runtime.class_to_size(%rip), %r11
0000000001035261	movzwl	(%r11,%rsi,2), %esi
0000000001035266	jmp	0x10351c2
000000000103526b	leaq	0x2000(%rsi), %r11
0000000001035272	cmpq	%rsi, %r11
0000000001035275	jb	0x10351c2
000000000103527b	addq	$0x1fff, %rsi
0000000001035282	andq	$-0x2000, %rsi
0000000001035289	jmp	0x10351c2
000000000103528e	movq	%rsi, %rax
0000000001035291	movq	%rdi, %rsi
0000000001035294	jmp	0x1034d1e
0000000001035299	movq	%rsi, %rax
000000000103529c	movq	0x78(%rsp), %r9
00000000010352a1	movq	%r8, %rsi
00000000010352a4	jmp	0x1034d1e
00000000010352a9	movq	0x88(%rsp), %rax
00000000010352b1	movq	0x80(%rsp), %rcx
00000000010352b9	cmpq	%rcx, %rax
00000000010352bc	jl	0x1035346
00000000010352c2	leaq	runtime.zerobase(%rip), %rcx
00000000010352c9	movq	%rcx, 0x90(%rsp)
00000000010352d1	movq	0x78(%rsp), %rcx
00000000010352d6	movq	%rcx, 0x98(%rsp)
00000000010352de	movq	%rax, 0xa0(%rsp)
00000000010352e6	movq	0x58(%rsp), %rbp
00000000010352eb	addq	$0x60, %rsp
00000000010352ef	retq
00000000010352f0	leaq	0x26ce9(%rip), %rax
00000000010352f7	movq	%rax, (%rsp)
00000000010352fb	leaq	runtime.statictmp_33(%rip), %rax
0000000001035302	movq	%rax, 0x8(%rsp)
0000000001035307	callq	runtime.gopanic
000000000103530c	ud2
000000000103530e	callq	runtime.panicindex
0000000001035313	ud2
0000000001035315	callq	runtime.panicindex
000000000103531a	ud2
000000000103531c	callq	runtime.panicindex
0000000001035321	ud2
0000000001035323	callq	runtime.panicindex
0000000001035328	ud2
000000000103532a	callq	runtime.panicindex
000000000103532f	ud2
0000000001035331	callq	runtime.panicindex
0000000001035336	ud2
0000000001035338	callq	runtime.panicindex
000000000103533d	ud2
000000000103533f	callq	runtime.panicindex
0000000001035344	ud2
0000000001035346	leaq	0x26c93(%rip), %rax
000000000103534d	movq	%rax, (%rsp)
0000000001035351	leaq	runtime.statictmp_32(%rip), %rax
0000000001035358	movq	%rax, 0x8(%rsp)
000000000103535d	callq	runtime.gopanic
0000000001035362	ud2
0000000001035364	callq	runtime.morestack_noctxt
0000000001035369	jmp	runtime.growslice
000000000103536e	int3
000000000103536f	int3
runtime.stackinit:
0000000001035370	xorl	%eax, %eax
0000000001035372	jmp	0x1035397
0000000001035374	movq	%rax, %rcx
0000000001035377	shlq	$0x4, %rax
000000000103537b	leaq	runtime.stackpool(%rip), %rdx
0000000001035382	movq	$0x0, (%rdx,%rax)
000000000103538a	movq	$0x0, 0x8(%rdx,%rax)
0000000001035393	leaq	0x1(%rcx), %rax
0000000001035397	cmpq	$0x4, %rax
000000000103539b	jl	0x1035374
000000000103539d	xorl	%eax, %eax
000000000103539f	jmp	0x10353c4
00000000010353a1	movq	%rax, %rcx
00000000010353a4	shlq	$0x4, %rax
00000000010353a8	leaq	0x83b79(%rip), %rdx
00000000010353af	movq	$0x0, (%rdx,%rax)
00000000010353b7	movq	$0x0, 0x8(%rdx,%rax)
00000000010353c0	leaq	0x1(%rcx), %rax
00000000010353c4	cmpq	$0x23, %rax
00000000010353c8	jl	0x10353a1
00000000010353ca	retq
00000000010353cb	int3
00000000010353cc	int3
00000000010353cd	int3
00000000010353ce	int3
00000000010353cf	int3
runtime.stacklog2:
00000000010353d0	movq	0x8(%rsp), %rax
00000000010353d5	xorl	%ecx, %ecx
00000000010353d7	jmp	0x10353df
00000000010353d9	shrq	%rax
00000000010353dc	incq	%rcx
00000000010353df	cmpq	$0x1, %rax
00000000010353e3	ja	0x10353d9
00000000010353e5	movq	%rcx, 0x10(%rsp)
00000000010353ea	retq
00000000010353eb	int3
00000000010353ec	int3
00000000010353ed	int3
00000000010353ee	int3
00000000010353ef	int3
runtime.stackpoolalloc:
00000000010353f0	movq	%gs:0x30, %rcx
00000000010353f9	cmpq	0x10(%rcx), %rsp
00000000010353fd	jbe	0x10355bb
0000000001035403	subq	$0x40, %rsp
0000000001035407	movq	%rbp, 0x38(%rsp)
000000000103540c	leaq	0x38(%rsp), %rbp
0000000001035411	movzbl	0x48(%rsp), %eax
0000000001035416	movzbl	%al, %ecx
0000000001035419	cmpq	$0x4, %rcx
000000000103541d	jae	0x10355b4
0000000001035423	shlq	$0x4, %rcx
0000000001035427	leaq	runtime.stackpool(%rip), %rdx
000000000103542e	leaq	(%rdx,%rcx), %rbx
0000000001035432	movq	%rbx, 0x30(%rsp)
0000000001035437	movq	(%rdx,%rcx), %rcx
000000000103543b	testq	%rcx, %rcx
000000000103543e	jne	0x1035543
0000000001035444	leaq	runtime.mheap_(%rip), %rax
000000000103544b	movq	%rax, (%rsp)
000000000103544f	movq	$0x4, 0x8(%rsp)
0000000001035458	leaq	0xa0481(%rip), %rax
000000000103545f	movq	%rax, 0x10(%rsp)
0000000001035464	callq	"runtime.(*mheap).allocManual"
0000000001035469	movq	0x18(%rsp), %rax
000000000103546e	testq	%rax, %rax
0000000001035471	je	0x1035599
0000000001035477	cmpw	$0x0, 0x60(%rax)
000000000103547c	jne	0x103557e
0000000001035482	movq	0x28(%rax), %rdx
0000000001035486	testq	%rdx, %rdx
0000000001035489	jne	0x1035563
000000000103548f	movzbl	0x48(%rsp), %ecx
0000000001035494	movl	$0x800, %edx
0000000001035499	shlq	%cl, %rdx
000000000103549c	cmpb	$0x40, %cl
000000000103549f	sbbq	%rbx, %rbx
00000000010354a2	andq	%rbx, %rdx
00000000010354a5	movq	%rdx, 0x68(%rax)
00000000010354a9	xorl	%ecx, %ecx
00000000010354ab	jmp	0x10354c9
00000000010354ad	movq	0x18(%rax), %rdx
00000000010354b1	addq	%rcx, %rdx
00000000010354b4	movq	%rdx, %rbx
00000000010354b7	movq	0x28(%rax), %rsi
00000000010354bb	movq	%rsi, (%rdx)
00000000010354be	movq	%rbx, 0x28(%rax)
00000000010354c2	movq	0x68(%rax), %rdx
00000000010354c6	addq	%rdx, %rcx
00000000010354c9	cmpq	$0x8000, %rcx
00000000010354d0	jb	0x10354ad
00000000010354d2	movq	%rax, 0x28(%rsp)
00000000010354d7	movq	0x30(%rsp), %rcx
00000000010354dc	movq	%rcx, (%rsp)
00000000010354e0	movq	%rax, 0x8(%rsp)
00000000010354e5	callq	"runtime.(*mSpanList).insert"
00000000010354ea	movq	0x28(%rsp), %rax
00000000010354ef	movq	0x28(%rax), %rcx
00000000010354f3	movq	%rcx, %rdx
00000000010354f6	testq	%rcx, %rcx
00000000010354f9	je	0x1035548
00000000010354fb	movq	(%rcx), %rcx
00000000010354fe	movq	%rcx, 0x28(%rax)
0000000001035502	movzwl	0x60(%rax), %ecx
0000000001035506	incl	%ecx
0000000001035508	movw	%cx, 0x60(%rax)
000000000103550c	movq	0x28(%rax), %rcx
0000000001035510	testq	%rcx, %rcx
0000000001035513	je	0x1035524
0000000001035515	movq	%rdx, 0x50(%rsp)
000000000103551a	movq	0x38(%rsp), %rbp
000000000103551f	addq	$0x40, %rsp
0000000001035523	retq
0000000001035524	movq	%rdx, 0x20(%rsp)
0000000001035529	movq	0x30(%rsp), %rcx
000000000103552e	movq	%rcx, (%rsp)
0000000001035532	movq	%rax, 0x8(%rsp)
0000000001035537	callq	"runtime.(*mSpanList).remove"
000000000103553c	movq	0x20(%rsp), %rdx
0000000001035541	jmp	0x1035515
0000000001035543	movq	%rcx, %rax
0000000001035546	jmp	0x10354ef
0000000001035548	leaq	0x36fd0(%rip), %rax
000000000103554f	movq	%rax, (%rsp)
0000000001035553	movq	$0x17, 0x8(%rsp)
000000000103555c	callq	runtime.throw
0000000001035561	ud2
0000000001035563	leaq	0x36551(%rip), %rax
000000000103556a	movq	%rax, (%rsp)
000000000103556e	movq	$0x12, 0x8(%rsp)
0000000001035577	callq	runtime.throw
000000000103557c	ud2
000000000103557e	leaq	0x3600f(%rip), %rax
0000000001035585	movq	%rax, (%rsp)
0000000001035589	movq	$0xe, 0x8(%rsp)
0000000001035592	callq	runtime.throw
0000000001035597	ud2
0000000001035599	leaq	0x35eff(%rip), %rax
00000000010355a0	movq	%rax, (%rsp)
00000000010355a4	movq	$0xd, 0x8(%rsp)
00000000010355ad	callq	runtime.throw
00000000010355b2	ud2
00000000010355b4	callq	runtime.panicindex
00000000010355b9	ud2
00000000010355bb	callq	runtime.morestack_noctxt
00000000010355c0	jmp	runtime.stackpoolalloc
00000000010355c5	int3
00000000010355c6	int3
00000000010355c7	int3
00000000010355c8	int3
00000000010355c9	int3
00000000010355ca	int3
00000000010355cb	int3
00000000010355cc	int3
00000000010355cd	int3
00000000010355ce	int3
00000000010355cf	int3
runtime.stackpoolfree:
00000000010355d0	movq	%gs:0x30, %rcx
00000000010355d9	cmpq	0x10(%rcx), %rsp
00000000010355dd	jbe	0x103574d
00000000010355e3	subq	$0x28, %rsp
00000000010355e7	movq	%rbp, 0x20(%rsp)
00000000010355ec	leaq	0x20(%rsp), %rbp
00000000010355f1	movq	0x891a0(%rip), %rax
00000000010355f8	testb	%al, (%rax)
00000000010355fa	movabsq	$0x800000000000, %rcx
0000000001035604	movq	0x30(%rsp), %rdx
0000000001035609	addq	%rdx, %rcx
000000000103560c	shrq	$0x1a, %rcx
0000000001035610	cmpq	$0x400000, %rcx
0000000001035617	jae	0x1035746
000000000103561d	movq	(%rax,%rcx,8), %rax
0000000001035621	movq	%rdx, %rcx
0000000001035624	shrq	$0xd, %rdx
0000000001035628	andq	$0x1fff, %rdx
000000000103562f	movq	0x200000(%rax,%rdx,8), %rdx
0000000001035637	testb	%al, (%rax)
0000000001035639	cmpb	$0x2, 0x64(%rdx)
000000000103563d	jne	0x103572b
0000000001035643	movq	%rdx, 0x18(%rsp)
0000000001035648	movq	0x28(%rdx), %rax
000000000103564c	testq	%rax, %rax
000000000103564f	je	0x10356e3
0000000001035655	movq	%rcx, %rax
0000000001035658	movq	0x28(%rdx), %rbx
000000000103565c	movq	%rbx, (%rcx)
000000000103565f	movq	%rax, 0x28(%rdx)
0000000001035663	movzwl	0x60(%rdx), %eax
0000000001035667	leal	-0x1(%rax), %ecx
000000000103566a	movw	%cx, 0x60(%rdx)
000000000103566e	cmpl	$0x0, 0x9f483(%rip)
0000000001035675	jne	0x10356d9
0000000001035677	cmpw	$0x1, %ax
000000000103567b	jne	0x10356d9
000000000103567d	movzbl	0x38(%rsp), %eax
0000000001035682	movzbl	%al, %eax
0000000001035685	cmpq	$0x4, %rax
0000000001035689	jae	0x103571d
000000000103568f	shlq	$0x4, %rax
0000000001035693	leaq	runtime.stackpool(%rip), %rcx
000000000103569a	addq	%rcx, %rax
000000000103569d	movq	%rax, (%rsp)
00000000010356a1	movq	%rdx, 0x8(%rsp)
00000000010356a6	callq	"runtime.(*mSpanList).remove"
00000000010356ab	movq	0x18(%rsp), %rax
00000000010356b0	movq	$0x0, 0x28(%rax)
00000000010356b8	leaq	runtime.mheap_(%rip), %rcx
00000000010356bf	movq	%rcx, (%rsp)
00000000010356c3	movq	%rax, 0x8(%rsp)
00000000010356c8	leaq	0xa0211(%rip), %rax
00000000010356cf	movq	%rax, 0x10(%rsp)
00000000010356d4	callq	"runtime.(*mheap).freeManual"
00000000010356d9	movq	0x20(%rsp), %rbp
00000000010356de	addq	$0x28, %rsp
00000000010356e2	retq
00000000010356e3	movzbl	0x38(%rsp), %eax
00000000010356e8	movzbl	%al, %ebx
00000000010356eb	cmpq	$0x4, %rbx
00000000010356ef	jae	0x1035724
00000000010356f1	shlq	$0x4, %rbx
00000000010356f5	leaq	runtime.stackpool(%rip), %rax
00000000010356fc	leaq	(%rax,%rbx), %rcx
0000000001035700	movq	%rcx, (%rsp)
0000000001035704	movq	%rdx, 0x8(%rsp)
0000000001035709	callq	"runtime.(*mSpanList).insert"
000000000103570e	movq	0x30(%rsp), %rcx
0000000001035713	movq	0x18(%rsp), %rdx
0000000001035718	jmp	0x1035655
000000000103571d	callq	runtime.panicindex
0000000001035722	ud2
0000000001035724	callq	runtime.panicindex
0000000001035729	ud2
000000000103572b	leaq	0x380c3(%rip), %rax
0000000001035732	movq	%rax, (%rsp)
0000000001035736	movq	$0x21, 0x8(%rsp)
000000000103573f	callq	runtime.throw
0000000001035744	ud2
0000000001035746	callq	runtime.panicindex
000000000103574b	ud2
000000000103574d	callq	runtime.morestack_noctxt
0000000001035752	jmp	runtime.stackpoolfree
0000000001035757	int3
0000000001035758	int3
0000000001035759	int3
000000000103575a	int3
000000000103575b	int3
000000000103575c	int3
000000000103575d	int3
000000000103575e	int3
000000000103575f	int3
runtime.stackcacherefill:
0000000001035760	movq	%gs:0x30, %rcx
0000000001035769	cmpq	0x18(%rcx), %rsp
000000000103576d	jbe	0x1035841
0000000001035773	subq	$0x28, %rsp
0000000001035777	movq	%rbp, 0x20(%rsp)
000000000103577c	leaq	0x20(%rsp), %rbp
0000000001035781	leaq	runtime.stackpoolmu(%rip), %rax
0000000001035788	movq	%rax, (%rsp)
000000000103578c	callq	runtime.lock
0000000001035791	xorl	%eax, %eax
0000000001035793	xorl	%ecx, %ecx
0000000001035795	jmp	0x10357db
0000000001035797	movzbl	0x38(%rsp), %eax
000000000103579c	movb	%al, (%rsp)
000000000103579f	callq	runtime.stackpoolalloc
00000000010357a4	movq	0x8(%rsp), %rax
00000000010357a9	movq	%rax, %rcx
00000000010357ac	movq	0x18(%rsp), %rdx
00000000010357b1	movq	%rdx, (%rax)
00000000010357b4	movq	%rcx, %rax
00000000010357b7	movzbl	0x38(%rsp), %ecx
00000000010357bc	movl	$0x800, %edx
00000000010357c1	shlq	%cl, %rdx
00000000010357c4	cmpb	$0x40, %cl
00000000010357c7	sbbq	%rbx, %rbx
00000000010357ca	andq	%rbx, %rdx
00000000010357cd	movq	0x10(%rsp), %rbx
00000000010357d2	addq	%rbx, %rdx
00000000010357d5	movq	%rax, %rcx
00000000010357d8	movq	%rdx, %rax
00000000010357db	movq	%rax, 0x10(%rsp)
00000000010357e0	movq	%rcx, 0x18(%rsp)
00000000010357e5	cmpq	$0x4000, %rax
00000000010357eb	jb	0x1035797
00000000010357ed	leaq	runtime.stackpoolmu(%rip), %rax
00000000010357f4	movq	%rax, (%rsp)
00000000010357f8	callq	runtime.unlock
00000000010357fd	movq	0x30(%rsp), %rax
0000000001035802	testb	%al, (%rax)
0000000001035804	movzbl	0x38(%rsp), %ecx
0000000001035809	movzbl	%cl, %ecx
000000000103580c	cmpq	$0x4, %rcx
0000000001035810	jae	0x103583a
0000000001035812	shlq	$0x4, %rcx
0000000001035816	movq	0x18(%rsp), %rdx
000000000103581b	movq	%rdx, 0x458(%rax,%rcx)
0000000001035823	movq	0x10(%rsp), %rdx
0000000001035828	movq	%rdx, 0x460(%rax,%rcx)
0000000001035830	movq	0x20(%rsp), %rbp
0000000001035835	addq	$0x28, %rsp
0000000001035839	retq
000000000103583a	callq	runtime.panicindex
000000000103583f	ud2
0000000001035841	callq	runtime.morestackc
0000000001035846	jmp	runtime.stackcacherefill
000000000103584b	int3
000000000103584c	int3
000000000103584d	int3
000000000103584e	int3
000000000103584f	int3
runtime.stackcacherelease:
0000000001035850	movq	%gs:0x30, %rcx
0000000001035859	cmpq	0x18(%rcx), %rsp
000000000103585d	jbe	0x1035963
0000000001035863	subq	$0x40, %rsp
0000000001035867	movq	%rbp, 0x38(%rsp)
000000000103586c	leaq	0x38(%rsp), %rbp
0000000001035871	movq	0x48(%rsp), %rax
0000000001035876	testb	%al, (%rax)
0000000001035878	movzbl	0x50(%rsp), %ecx
000000000103587d	movzbl	%cl, %edx
0000000001035880	cmpq	$0x4, %rdx
0000000001035884	jae	0x103595c
000000000103588a	shlq	$0x4, %rdx
000000000103588e	movq	%rdx, 0x30(%rsp)
0000000001035893	movq	0x458(%rax,%rdx), %rcx
000000000103589b	movq	%rcx, 0x18(%rsp)
00000000010358a0	movq	0x460(%rax,%rdx), %rbx
00000000010358a8	movq	%rbx, 0x20(%rsp)
00000000010358ad	leaq	runtime.stackpoolmu(%rip), %rsi
00000000010358b4	movq	%rsi, (%rsp)
00000000010358b8	callq	runtime.lock
00000000010358bd	movq	0x20(%rsp), %rax
00000000010358c2	movq	0x18(%rsp), %rcx
00000000010358c7	jmp	0x103590c
00000000010358c9	movq	%rcx, %rax
00000000010358cc	movq	(%rcx), %rcx
00000000010358cf	movq	%rcx, 0x10(%rsp)
00000000010358d4	movq	%rax, (%rsp)
00000000010358d8	movzbl	0x50(%rsp), %eax
00000000010358dd	movb	%al, 0x8(%rsp)
00000000010358e1	callq	runtime.stackpoolfree
00000000010358e6	movzbl	0x50(%rsp), %ecx
00000000010358eb	movl	$0x800, %eax
00000000010358f0	shlq	%cl, %rax
00000000010358f3	cmpb	$0x40, %cl
00000000010358f6	sbbq	%rdx, %rdx
00000000010358f9	andq	%rdx, %rax
00000000010358fc	movq	0x20(%rsp), %rdx
0000000001035901	subq	%rax, %rdx
0000000001035904	movq	%rdx, %rax
0000000001035907	movq	0x10(%rsp), %rcx
000000000103590c	movq	%rax, 0x20(%rsp)
0000000001035911	cmpq	$0x4000, %rax
0000000001035917	ja	0x10358c9
0000000001035919	movq	%rcx, 0x28(%rsp)
000000000103591e	leaq	runtime.stackpoolmu(%rip), %rax
0000000001035925	movq	%rax, (%rsp)
0000000001035929	callq	runtime.unlock
000000000103592e	movq	0x30(%rsp), %rax
0000000001035933	movq	0x28(%rsp), %rcx
0000000001035938	movq	0x48(%rsp), %rdx
000000000103593d	movq	%rcx, 0x458(%rdx,%rax)
0000000001035945	movq	0x20(%rsp), %rcx
000000000103594a	movq	%rcx, 0x460(%rdx,%rax)
0000000001035952	movq	0x38(%rsp), %rbp
0000000001035957	addq	$0x40, %rsp
000000000103595b	retq
000000000103595c	callq	runtime.panicindex
0000000001035961	ud2
0000000001035963	callq	runtime.morestackc
0000000001035968	jmp	runtime.stackcacherelease
000000000103596d	int3
000000000103596e	int3
000000000103596f	int3
runtime.stackcache_clear:
0000000001035970	movq	%gs:0x30, %rcx
0000000001035979	cmpq	0x18(%rcx), %rsp
000000000103597d	jbe	0x1035a3d
0000000001035983	subq	$0x30, %rsp
0000000001035987	movq	%rbp, 0x28(%rsp)
000000000103598c	leaq	0x28(%rsp), %rbp
0000000001035991	leaq	runtime.stackpoolmu(%rip), %rax
0000000001035998	movq	%rax, (%rsp)
000000000103599c	callq	runtime.lock
00000000010359a1	movq	0x38(%rsp), %rax
00000000010359a6	xorl	%ecx, %ecx
00000000010359a8	jmp	0x10359f5
00000000010359aa	movq	(%rbx), %rax
00000000010359ad	movq	%rax, 0x18(%rsp)
00000000010359b2	movq	%rsi, (%rsp)
00000000010359b6	movb	%cl, 0x8(%rsp)
00000000010359ba	callq	runtime.stackpoolfree
00000000010359bf	movq	0x38(%rsp), %rax
00000000010359c4	movzbl	0x17(%rsp), %ecx
00000000010359c9	movq	0x20(%rsp), %rdx
00000000010359ce	movq	0x18(%rsp), %rbx
00000000010359d3	movq	%rbx, %rsi
00000000010359d6	testq	%rbx, %rbx
00000000010359d9	jne	0x10359aa
00000000010359db	movq	$0x0, 0x458(%rax,%rdx)
00000000010359e7	movq	$0x0, 0x460(%rax,%rdx)
00000000010359f3	incl	%ecx
00000000010359f5	cmpb	$0x4, %cl
00000000010359f8	jae	0x1035a1c
00000000010359fa	testb	%al, (%rax)
00000000010359fc	movzbl	%cl, %edx
00000000010359ff	cmpq	$0x4, %rdx
0000000001035a03	jae	0x1035a36
0000000001035a05	movb	%cl, 0x17(%rsp)
0000000001035a09	shlq	$0x4, %rdx
0000000001035a0d	movq	%rdx, 0x20(%rsp)
0000000001035a12	movq	0x458(%rax,%rdx), %rbx
0000000001035a1a	jmp	0x10359d3
0000000001035a1c	leaq	runtime.stackpoolmu(%rip), %rax
0000000001035a23	movq	%rax, (%rsp)
0000000001035a27	callq	runtime.unlock
0000000001035a2c	movq	0x28(%rsp), %rbp
0000000001035a31	addq	$0x30, %rsp
0000000001035a35	retq
0000000001035a36	callq	runtime.panicindex
0000000001035a3b	ud2
0000000001035a3d	callq	runtime.morestackc
0000000001035a42	jmp	runtime.stackcache_clear
0000000001035a47	int3
0000000001035a48	int3
0000000001035a49	int3
0000000001035a4a	int3
0000000001035a4b	int3
0000000001035a4c	int3
0000000001035a4d	int3
0000000001035a4e	int3
0000000001035a4f	int3
runtime.stackalloc:
0000000001035a50	movq	%gs:0x30, %rcx
0000000001035a59	cmpq	0x18(%rcx), %rsp
0000000001035a5d	jbe	0x1035d60
0000000001035a63	subq	$0x68, %rsp
0000000001035a67	movq	%rbp, 0x60(%rsp)
0000000001035a6c	leaq	0x60(%rsp), %rbp
0000000001035a71	movq	%gs:0x30, %rax
0000000001035a7a	movq	0x30(%rax), %rcx
0000000001035a7e	movq	(%rcx), %rdx
0000000001035a81	cmpq	%rdx, %rax
0000000001035a84	jne	0x1035d45
0000000001035a8a	movl	0x70(%rsp), %eax
0000000001035a8e	leal	-0x1(%rax), %edx
0000000001035a91	testl	%eax, %edx
0000000001035a93	jne	0x1035d2a
0000000001035a99	cmpl	$0x0, 0x9f288(%rip)
0000000001035aa0	jne	0x1035c8c
0000000001035aa6	cmpl	$0x8000, %eax
0000000001035aab	jae	0x1035bb5
0000000001035ab1	movl	%eax, %edx
0000000001035ab3	xorl	%ebx, %ebx
0000000001035ab5	jmp	0x1035abb
0000000001035ab7	incl	%ebx
0000000001035ab9	shrl	%eax
0000000001035abb	cmpl	$0x800, %eax
0000000001035ac0	ja	0x1035ab7
0000000001035ac2	movb	%bl, 0x27(%rsp)
0000000001035ac6	movq	0x158(%rcx), %rax
0000000001035acd	testq	%rax, %rax
0000000001035ad0	je	0x1035adc
0000000001035ad2	cmpq	$0x0, 0xf8(%rcx)
0000000001035ada	je	0x1035b36
0000000001035adc	leaq	runtime.stackpoolmu(%rip), %rax
0000000001035ae3	movq	%rax, (%rsp)
0000000001035ae7	callq	runtime.lock
0000000001035aec	movzbl	0x27(%rsp), %eax
0000000001035af1	movb	%al, (%rsp)
0000000001035af4	callq	runtime.stackpoolalloc
0000000001035af9	movq	0x8(%rsp), %rax
0000000001035afe	movq	%rax, 0x28(%rsp)
0000000001035b03	leaq	runtime.stackpoolmu(%rip), %rcx
0000000001035b0a	movq	%rcx, (%rsp)
0000000001035b0e	callq	runtime.unlock
0000000001035b13	movq	0x28(%rsp), %rax
0000000001035b18	movq	%rax, 0x78(%rsp)
0000000001035b1d	movl	0x70(%rsp), %ecx
0000000001035b21	addq	%rcx, %rax
0000000001035b24	movq	%rax, 0x80(%rsp)
0000000001035b2c	movq	0x60(%rsp), %rbp
0000000001035b31	addq	$0x68, %rsp
0000000001035b35	retq
0000000001035b36	cmpl	$0x0, 0x10c(%rcx)
0000000001035b3d	jne	0x1035adc
0000000001035b3f	movzbl	%bl, %ecx
0000000001035b42	cmpq	$0x4, %rcx
0000000001035b46	jae	0x1035d08
0000000001035b4c	shlq	$0x4, %rcx
0000000001035b50	movq	0x458(%rax,%rcx), %rsi
0000000001035b58	movq	%rsi, %rdi
0000000001035b5b	testq	%rsi, %rsi
0000000001035b5e	je	0x1035b86
0000000001035b60	movq	%rdi, %rbx
0000000001035b63	movq	(%rdi), %rsi
0000000001035b66	movq	%rsi, 0x458(%rax,%rcx)
0000000001035b6e	movq	0x460(%rax,%rcx), %rsi
0000000001035b76	subq	%rdx, %rsi
0000000001035b79	movq	%rsi, 0x460(%rax,%rcx)
0000000001035b81	movq	%rbx, %rax
0000000001035b84	jmp	0x1035b18
0000000001035b86	movq	%rax, 0x50(%rsp)
0000000001035b8b	movq	%rcx, 0x40(%rsp)
0000000001035b90	movq	%rax, (%rsp)
0000000001035b94	movb	%bl, 0x8(%rsp)
0000000001035b98	callq	runtime.stackcacherefill
0000000001035b9d	movq	0x40(%rsp), %rcx
0000000001035ba2	movq	0x50(%rsp), %rax
0000000001035ba7	movq	0x458(%rax,%rcx), %rdi
0000000001035baf	movl	0x70(%rsp), %edx
0000000001035bb3	jmp	0x1035b60
0000000001035bb5	shrq	$0xd, %rax
0000000001035bb9	movq	%rax, 0x38(%rsp)
0000000001035bbe	movq	%rax, (%rsp)
0000000001035bc2	callq	runtime.stacklog2
0000000001035bc7	movq	0x8(%rsp), %rax
0000000001035bcc	movq	%rax, 0x30(%rsp)
0000000001035bd1	leaq	runtime.stackLarge(%rip), %rcx
0000000001035bd8	movq	%rcx, (%rsp)
0000000001035bdc	callq	runtime.lock
0000000001035be1	movq	0x30(%rsp), %rax
0000000001035be6	cmpq	$0x23, %rax
0000000001035bea	jae	0x1035d01
0000000001035bf0	shlq	$0x4, %rax
0000000001035bf4	leaq	0x8332d(%rip), %rcx
0000000001035bfb	movq	(%rcx,%rax), %rdx
0000000001035bff	testq	%rdx, %rdx
0000000001035c02	jne	0x1035c6c
0000000001035c04	xorl	%eax, %eax
0000000001035c06	movq	%rax, 0x48(%rsp)
0000000001035c0b	leaq	runtime.stackLarge(%rip), %rcx
0000000001035c12	movq	%rcx, (%rsp)
0000000001035c16	callq	runtime.unlock
0000000001035c1b	movq	0x48(%rsp), %rax
0000000001035c20	testq	%rax, %rax
0000000001035c23	je	0x1035c2e
0000000001035c25	movq	0x18(%rax), %rax
0000000001035c29	jmp	0x1035b18
0000000001035c2e	leaq	runtime.mheap_(%rip), %rax
0000000001035c35	movq	%rax, (%rsp)
0000000001035c39	movq	0x38(%rsp), %rax
0000000001035c3e	movq	%rax, 0x8(%rsp)
0000000001035c43	leaq	0x9fc96(%rip), %rax
0000000001035c4a	movq	%rax, 0x10(%rsp)
0000000001035c4f	callq	"runtime.(*mheap).allocManual"
0000000001035c54	movq	0x18(%rsp), %rax
0000000001035c59	testq	%rax, %rax
0000000001035c5c	je	0x1035ce6
0000000001035c62	movl	0x70(%rsp), %ecx
0000000001035c66	movq	%rcx, 0x68(%rax)
0000000001035c6a	jmp	0x1035c25
0000000001035c6c	movq	%rdx, 0x58(%rsp)
0000000001035c71	addq	%rcx, %rax
0000000001035c74	movq	%rax, (%rsp)
0000000001035c78	movq	%rdx, 0x8(%rsp)
0000000001035c7d	callq	"runtime.(*mSpanList).remove"
0000000001035c82	movq	0x58(%rsp), %rax
0000000001035c87	jmp	0x1035c06
0000000001035c8c	movq	runtime.physPageSize(%rip), %rcx
0000000001035c93	leaq	-0x1(%rcx,%rax), %rax
0000000001035c98	decq	%rcx
0000000001035c9b	notq	%rcx
0000000001035c9e	andq	%rcx, %rax
0000000001035ca1	movl	%eax, %eax
0000000001035ca3	movq	%rax, 0x38(%rsp)
0000000001035ca8	movq	%rax, (%rsp)
0000000001035cac	leaq	0x9fc35(%rip), %rcx
0000000001035cb3	movq	%rcx, 0x8(%rsp)
0000000001035cb8	callq	runtime.sysAlloc
0000000001035cbd	movq	0x10(%rsp), %rax
0000000001035cc2	testq	%rax, %rax
0000000001035cc5	je	0x1035d0f
0000000001035cc7	movq	%rax, 0x78(%rsp)
0000000001035ccc	movq	0x38(%rsp), %rcx
0000000001035cd1	addq	%rcx, %rax
0000000001035cd4	movq	%rax, 0x80(%rsp)
0000000001035cdc	movq	0x60(%rsp), %rbp
0000000001035ce1	addq	$0x68, %rsp
0000000001035ce5	retq
0000000001035ce6	leaq	0x357b2(%rip), %rax
0000000001035ced	movq	%rax, (%rsp)
0000000001035cf1	movq	$0xd, 0x8(%rsp)
0000000001035cfa	callq	runtime.throw
0000000001035cff	ud2
0000000001035d01	callq	runtime.panicindex
0000000001035d06	ud2
0000000001035d08	callq	runtime.panicindex
0000000001035d0d	ud2
0000000001035d0f	leaq	0x36c7a(%rip), %rax
0000000001035d16	movq	%rax, (%rsp)
0000000001035d1a	movq	$0x1a, 0x8(%rsp)
0000000001035d23	callq	runtime.throw
0000000001035d28	ud2
0000000001035d2a	leaq	0x36efe(%rip), %rax
0000000001035d31	movq	%rax, (%rsp)
0000000001035d35	movq	$0x1b, 0x8(%rsp)
0000000001035d3e	callq	runtime.throw
0000000001035d43	ud2
0000000001035d45	leaq	0x37bf3(%rip), %rax
0000000001035d4c	movq	%rax, (%rsp)
0000000001035d50	movq	$0x21, 0x8(%rsp)
0000000001035d59	callq	runtime.throw
0000000001035d5e	ud2
0000000001035d60	callq	runtime.morestackc
0000000001035d65	jmp	runtime.stackalloc
0000000001035d6a	int3
0000000001035d6b	int3
0000000001035d6c	int3
0000000001035d6d	int3
0000000001035d6e	int3
0000000001035d6f	int3
runtime.stackfree:
0000000001035d70	movq	%gs:0x30, %rcx
0000000001035d79	cmpq	0x18(%rcx), %rsp
0000000001035d7d	jbe	0x1036082
0000000001035d83	subq	$0x60, %rsp
0000000001035d87	movq	%rbp, 0x58(%rsp)
0000000001035d8c	leaq	0x58(%rsp), %rbp
0000000001035d91	movq	%gs:0x30, %rax
0000000001035d9a	movq	0x68(%rsp), %rcx
0000000001035d9f	movq	%rcx, %rdx
0000000001035da2	movq	0x70(%rsp), %rbx
0000000001035da7	movq	%rbx, %rsi
0000000001035daa	subq	%rdx, %rbx
0000000001035dad	leaq	-0x1(%rbx), %rdi
0000000001035db1	testq	%rdi, %rbx
0000000001035db4	jne	0x1036067
0000000001035dba	leaq	(%rdx,%rbx), %rdi
0000000001035dbe	cmpq	%rsi, %rdi
0000000001035dc1	jb	0x103604c
0000000001035dc7	cmpl	$0x0, 0x9ef5a(%rip)
0000000001035dce	jne	0x1035fc6
0000000001035dd4	cmpq	$0x8000, %rbx
0000000001035ddb	jae	0x1035ee0
0000000001035de1	movq	%rbx, %rcx
0000000001035de4	xorl	%esi, %esi
0000000001035de6	jmp	0x1035ded
0000000001035de8	incl	%esi
0000000001035dea	shrq	%rbx
0000000001035ded	cmpq	$0x800, %rbx
0000000001035df4	ja	0x1035de8
0000000001035df6	movb	%sil, 0x1f(%rsp)
0000000001035dfb	movq	0x30(%rax), %rax
0000000001035dff	movq	0x158(%rax), %rbx
0000000001035e06	testq	%rbx, %rbx
0000000001035e09	je	0x1035e15
0000000001035e0b	cmpq	$0x0, 0xf8(%rax)
0000000001035e13	je	0x1035e56
0000000001035e15	leaq	runtime.stackpoolmu(%rip), %rax
0000000001035e1c	movq	%rax, (%rsp)
0000000001035e20	callq	runtime.lock
0000000001035e25	movq	0x68(%rsp), %rax
0000000001035e2a	movq	%rax, (%rsp)
0000000001035e2e	movzbl	0x1f(%rsp), %eax
0000000001035e33	movb	%al, 0x8(%rsp)
0000000001035e37	callq	runtime.stackpoolfree
0000000001035e3c	leaq	runtime.stackpoolmu(%rip), %rax
0000000001035e43	movq	%rax, (%rsp)
0000000001035e47	callq	runtime.unlock
0000000001035e4c	movq	0x58(%rsp), %rbp
0000000001035e51	addq	$0x60, %rsp
0000000001035e55	retq
0000000001035e56	cmpl	$0x0, 0x10c(%rax)
0000000001035e5d	jne	0x1035e15
0000000001035e5f	movzbl	%sil, %eax
0000000001035e63	cmpq	$0x4, %rax
0000000001035e67	jae	0x1036045
0000000001035e6d	shlq	$0x4, %rax
0000000001035e71	movq	0x460(%rbx,%rax), %rdi
0000000001035e79	cmpq	$0x8000, %rdi
0000000001035e80	jae	0x1035ead
0000000001035e82	movq	%rdx, %rsi
0000000001035e85	movq	0x458(%rbx,%rax), %rdi
0000000001035e8d	movq	%rdi, (%rdx)
0000000001035e90	movq	%rsi, 0x458(%rbx,%rax)
0000000001035e98	movq	0x460(%rbx,%rax), %rdx
0000000001035ea0	addq	%rdx, %rcx
0000000001035ea3	movq	%rcx, 0x460(%rbx,%rax)
0000000001035eab	jmp	0x1035e4c
0000000001035ead	movq	%rcx, 0x38(%rsp)
0000000001035eb2	movq	%rbx, 0x50(%rsp)
0000000001035eb7	movq	%rax, 0x30(%rsp)
0000000001035ebc	movq	%rbx, (%rsp)
0000000001035ec0	movb	%sil, 0x8(%rsp)
0000000001035ec5	callq	runtime.stackcacherelease
0000000001035eca	movq	0x30(%rsp), %rax
0000000001035ecf	movq	0x38(%rsp), %rcx
0000000001035ed4	movq	0x68(%rsp), %rdx
0000000001035ed9	movq	0x50(%rsp), %rbx
0000000001035ede	jmp	0x1035e82
0000000001035ee0	movq	0x888b1(%rip), %rax
0000000001035ee7	testb	%al, (%rax)
0000000001035ee9	movabsq	$0x800000000000, %rbx
0000000001035ef3	addq	%rdx, %rbx
0000000001035ef6	shrq	$0x1a, %rbx
0000000001035efa	cmpq	$0x400000, %rbx
0000000001035f01	jae	0x103603e
0000000001035f07	movq	(%rax,%rbx,8), %rax
0000000001035f0b	shrq	$0xd, %rdx
0000000001035f0f	andq	$0x1fff, %rdx
0000000001035f16	movq	0x200000(%rax,%rdx,8), %rdx
0000000001035f1e	testb	%al, (%rax)
0000000001035f20	cmpb	$0x2, 0x64(%rdx)
0000000001035f24	jne	0x1035fe5
0000000001035f2a	cmpl	$0x0, 0x9ebc7(%rip)
0000000001035f31	jne	0x1035f59
0000000001035f33	leaq	runtime.mheap_(%rip), %rax
0000000001035f3a	movq	%rax, (%rsp)
0000000001035f3e	movq	%rdx, 0x8(%rsp)
0000000001035f43	leaq	0x9f996(%rip), %rax
0000000001035f4a	movq	%rax, 0x10(%rsp)
0000000001035f4f	callq	"runtime.(*mheap).freeManual"
0000000001035f54	jmp	0x1035e4c
0000000001035f59	movq	%rdx, 0x48(%rsp)
0000000001035f5e	movq	0x20(%rdx), %rax
0000000001035f62	movq	%rax, (%rsp)
0000000001035f66	callq	runtime.stacklog2
0000000001035f6b	movq	0x8(%rsp), %rax
0000000001035f70	movq	%rax, 0x28(%rsp)
0000000001035f75	leaq	runtime.stackLarge(%rip), %rcx
0000000001035f7c	movq	%rcx, (%rsp)
0000000001035f80	callq	runtime.lock
0000000001035f85	movq	0x28(%rsp), %rax
0000000001035f8a	cmpq	$0x23, %rax
0000000001035f8e	jae	0x1035fde
0000000001035f90	shlq	$0x4, %rax
0000000001035f94	leaq	0x82f8d(%rip), %rcx
0000000001035f9b	addq	%rcx, %rax
0000000001035f9e	movq	%rax, (%rsp)
0000000001035fa2	movq	0x48(%rsp), %rax
0000000001035fa7	movq	%rax, 0x8(%rsp)
0000000001035fac	callq	"runtime.(*mSpanList).insert"
0000000001035fb1	leaq	runtime.stackLarge(%rip), %rax
0000000001035fb8	movq	%rax, (%rsp)
0000000001035fbc	callq	runtime.unlock
0000000001035fc1	jmp	0x1035e4c
0000000001035fc6	movq	%rcx, (%rsp)
0000000001035fca	movq	%rbx, 0x8(%rsp)
0000000001035fcf	callq	runtime.sysFault
0000000001035fd4	movq	0x58(%rsp), %rbp
0000000001035fd9	addq	$0x60, %rsp
0000000001035fdd	retq
0000000001035fde	callq	runtime.panicindex
0000000001035fe3	ud2
0000000001035fe5	movq	%rcx, 0x40(%rsp)
0000000001035fea	movq	0x18(%rdx), %rax
0000000001035fee	movq	%rax, 0x20(%rsp)
0000000001035ff3	callq	runtime.printlock
0000000001035ff8	movq	0x20(%rsp), %rax
0000000001035ffd	movq	%rax, (%rsp)
0000000001036001	callq	runtime.printhex
0000000001036006	callq	runtime.printsp
000000000103600b	movq	0x40(%rsp), %rax
0000000001036010	movq	%rax, (%rsp)
0000000001036014	callq	runtime.printpointer
0000000001036019	callq	runtime.printnl
000000000103601e	callq	runtime.printunlock
0000000001036023	leaq	0x35578(%rip), %rax
000000000103602a	movq	%rax, (%rsp)
000000000103602e	movq	$0xe, 0x8(%rsp)
0000000001036037	callq	runtime.throw
000000000103603c	ud2
000000000103603e	callq	runtime.panicindex
0000000001036043	ud2
0000000001036045	callq	runtime.panicindex
000000000103604a	ud2
000000000103604c	leaq	0x3555d(%rip), %rax
0000000001036053	movq	%rax, (%rsp)
0000000001036057	movq	$0xe, 0x8(%rsp)
0000000001036060	callq	runtime.throw
0000000001036065	ud2
0000000001036067	leaq	0x36231(%rip), %rax
000000000103606e	movq	%rax, (%rsp)
0000000001036072	movq	$0x16, 0x8(%rsp)
000000000103607b	callq	runtime.throw
0000000001036080	ud2
0000000001036082	callq	runtime.morestackc
0000000001036087	jmp	runtime.stackfree
000000000103608c	int3
000000000103608d	int3
000000000103608e	int3
000000000103608f	int3
runtime.adjustpointers:
0000000001036090	movq	%gs:0x30, %rcx
0000000001036099	cmpq	0x10(%rcx), %rsp
000000000103609d	jbe	0x10362b3
00000000010360a3	subq	$0x58, %rsp
00000000010360a7	movq	%rbp, 0x50(%rsp)
00000000010360ac	leaq	0x50(%rsp), %rbp
00000000010360b1	movq	0x70(%rsp), %rcx
00000000010360b6	movq	(%rcx), %rdx
00000000010360b9	movq	0x8(%rcx), %rbx
00000000010360bd	movq	0x10(%rcx), %rsi
00000000010360c1	movq	0x68(%rsp), %rdi
00000000010360c6	movslq	(%rdi), %r8
00000000010360c9	movq	%r8, 0x38(%rsp)
00000000010360ce	movq	0x60(%rsp), %r9
00000000010360d3	movq	%r9, %r10
00000000010360d6	movq	0x118(%rcx), %rcx
00000000010360dd	cmpq	%r9, %rcx
00000000010360e0	movq	0x78(%rsp), %r11
00000000010360e5	xorl	%eax, %eax
00000000010360e7	jmp	0x10361a2
00000000010360ec	movq	0x68(%rsp), %rax
00000000010360f1	movq	0x38(%rsp), %r8
00000000010360f6	movq	0x28(%rsp), %r12
00000000010360fb	testb	%al, (%rdi)
00000000010360fd	movq	(%r10,%r13,8), %r8
0000000001036101	movq	%r8, 0x20(%rsp)
0000000001036106	testq	%r11, %r11
0000000001036109	je	0x1036126
000000000103610b	testq	%r8, %r8
000000000103610e	jbe	0x1036126
0000000001036110	cmpq	$0x1000, %r8
0000000001036117	jae	0x1036126
0000000001036119	cmpl	$0x0, 0x9ec24(%rip)
0000000001036120	jne	0x10361c7
0000000001036126	cmpq	%r8, %rdx
0000000001036129	ja	0x103614e
000000000103612b	cmpq	%rbx, %r8
000000000103612e	jae	0x103614e
0000000001036130	cmpq	%r9, %rcx
0000000001036133	jbe	0x103618e
0000000001036135	movq	0x20(%rsp), %r12
000000000103613a	addq	%rsi, %r12
000000000103613d	movq	%r8, %rax
0000000001036140	lock
0000000001036141	cmpxchgq	%r12, (%rdi)
0000000001036145	sete	%r8b
0000000001036149	testb	%r8b, %r8b
000000000103614c	je	0x10360ec
000000000103614e	movq	0x28(%rsp), %rax
0000000001036153	movq	0x68(%rsp), %rdi
0000000001036158	movq	0x38(%rsp), %r8
000000000103615d	movq	%rax, %r12
0000000001036160	movl	%r14d, %r13d
0000000001036163	testb	%r13b, %r13b
0000000001036166	je	0x103619d
0000000001036168	leal	-0x1(%r13), %r14d
000000000103616c	andl	%r13d, %r14d
000000000103616f	movzbl	%r13b, %r13d
0000000001036173	leaq	"runtime/internal/sys.ntz8tab"(%rip), %r15
000000000103617a	movzbl	(%r15,%r13), %r13d
000000000103617f	addq	%r12, %r13
0000000001036182	movq	%rdi, %rax
0000000001036185	leaq	(%r10,%r13,8), %rdi
0000000001036189	jmp	0x10360fb
000000000103618e	shlq	$0x3, %r13
0000000001036192	leaq	(%r8,%rsi), %rdi
0000000001036196	movq	%rdi, (%r13,%r10)
000000000103619b	jmp	0x103614e
000000000103619d	leaq	0x8(%r12), %rax
00000000010361a2	cmpq	%r8, %rax
00000000010361a5	jae	0x10361bd
00000000010361a7	movq	%rax, 0x28(%rsp)
00000000010361ac	movq	%rax, %r12
00000000010361af	shrq	$0x3, %rax
00000000010361b3	addq	0x8(%rdi), %rax
00000000010361b7	movzbl	(%rax), %r13d
00000000010361bb	jmp	0x1036163
00000000010361bd	movq	0x50(%rsp), %rbp
00000000010361c2	addq	$0x58, %rsp
00000000010361c6	retq
00000000010361c7	movq	%rdi, 0x48(%rsp)
00000000010361cc	movq	%gs:0x30, %rax
00000000010361d5	movq	0x30(%rax), %rax
00000000010361d9	movb	$0x2, 0x125(%rax)
00000000010361e0	movq	%r11, (%rsp)
00000000010361e4	movq	0x80(%rsp), %rax
00000000010361ec	movq	%rax, 0x8(%rsp)
00000000010361f1	callq	runtime.funcname
00000000010361f6	movq	0x18(%rsp), %rax
00000000010361fb	movq	%rax, 0x30(%rsp)
0000000001036200	movq	0x10(%rsp), %rcx
0000000001036205	movq	%rcx, 0x40(%rsp)
000000000103620a	callq	runtime.printlock
000000000103620f	leaq	0x3710e(%rip), %rax
0000000001036216	movq	%rax, (%rsp)
000000000103621a	movq	$0x1e, 0x8(%rsp)
0000000001036223	callq	runtime.printstring
0000000001036228	movq	0x40(%rsp), %rax
000000000103622d	movq	%rax, (%rsp)
0000000001036231	movq	0x30(%rsp), %rax
0000000001036236	movq	%rax, 0x8(%rsp)
000000000103623b	callq	runtime.printstring
0000000001036240	leaq	0x348b0(%rip), %rax
0000000001036247	movq	%rax, (%rsp)
000000000103624b	movq	$0x4, 0x8(%rsp)
0000000001036254	callq	runtime.printstring
0000000001036259	movq	0x48(%rsp), %rax
000000000103625e	movq	%rax, (%rsp)
0000000001036262	callq	runtime.printpointer
0000000001036267	leaq	0x34832(%rip), %rax
000000000103626e	movq	%rax, (%rsp)
0000000001036272	movq	$0x2, 0x8(%rsp)
000000000103627b	callq	runtime.printstring
0000000001036280	movq	0x20(%rsp), %rax
0000000001036285	movq	%rax, (%rsp)
0000000001036289	callq	runtime.printhex
000000000103628e	callq	runtime.printnl
0000000001036293	callq	runtime.printunlock
0000000001036298	leaq	0x3702b(%rip), %rax
000000000103629f	movq	%rax, (%rsp)
00000000010362a3	movq	$0x1e, 0x8(%rsp)
00000000010362ac	callq	runtime.throw
00000000010362b1	ud2
00000000010362b3	callq	runtime.morestack_noctxt
00000000010362b8	jmp	runtime.adjustpointers
00000000010362bd	int3
00000000010362be	int3
00000000010362bf	int3
runtime.adjustframe:
00000000010362c0	movq	%gs:0x30, %rcx
00000000010362c9	cmpq	0x10(%rcx), %rsp
00000000010362cd	jbe	0x103652c
00000000010362d3	subq	$0x80, %rsp
00000000010362da	movq	%rbp, 0x78(%rsp)
00000000010362df	leaq	0x78(%rsp), %rbp
00000000010362e4	movq	0x88(%rsp), %rax
00000000010362ec	cmpq	$0x0, 0x18(%rax)
00000000010362f1	je	0x1036462
00000000010362f7	movq	(%rax), %rcx
00000000010362fa	movq	0x8(%rax), %rdx
00000000010362fe	cmpl	$0xc, 0x10(%rcx)
0000000001036302	je	0x103644d
0000000001036308	movq	%rdx, 0x50(%rsp)
000000000103630d	movq	%rcx, 0x48(%rsp)
0000000001036312	movq	0x90(%rsp), %rcx
000000000103631a	testb	%al, (%rcx)
000000000103631c	leaq	0x18(%rcx), %rdx
0000000001036320	movq	%rdx, 0x8(%rsp)
0000000001036325	movq	%rax, (%rsp)
0000000001036329	movb	$0x1, 0x10(%rsp)
000000000103632e	callq	runtime.getStackMap
0000000001036333	movq	0x30(%rsp), %rax
0000000001036338	movl	0x28(%rsp), %ecx
000000000103633c	movq	0x20(%rsp), %rdx
0000000001036341	movl	0x18(%rsp), %ebx
0000000001036345	movl	%ebx, 0x58(%rsp)
0000000001036349	movq	%rdx, 0x60(%rsp)
000000000103634e	movl	%ecx, 0x68(%rsp)
0000000001036352	movq	%rax, 0x70(%rsp)
0000000001036357	movl	0x58(%rsp), %eax
000000000103635b	testl	%eax, %eax
000000000103635d	jg	0x10363fe
0000000001036363	movq	0x88(%rsp), %rax
000000000103636b	movq	0x40(%rax), %rcx
000000000103636f	movq	0x38(%rax), %rdx
0000000001036373	subq	%rdx, %rcx
0000000001036376	cmpq	$0x10, %rcx
000000000103637a	jne	0x10363f4
000000000103637c	leaq	runtime.framepointer_enabled(%rip), %rcx
0000000001036383	cmpb	$0x0, (%rcx)
0000000001036386	je	0x1036477
000000000103638c	movq	(%rdx), %rcx
000000000103638f	movq	0x90(%rsp), %rbx
0000000001036397	movq	(%rbx), %rsi
000000000103639a	cmpq	%rcx, %rsi
000000000103639d	ja	0x10363b2
000000000103639f	movq	0x8(%rbx), %rsi
00000000010363a3	cmpq	%rsi, %rcx
00000000010363a6	jae	0x10363b2
00000000010363a8	movq	0x10(%rbx), %rsi
00000000010363ac	addq	%rsi, %rcx
00000000010363af	movq	%rcx, (%rdx)
00000000010363b2	cmpl	$0x0, 0x68(%rsp)
00000000010363b7	jg	0x10363ce
00000000010363b9	movb	$0x1, 0x98(%rsp)
00000000010363c1	movq	0x78(%rsp), %rbp
00000000010363c6	addq	$0x80, %rsp
00000000010363cd	retq
00000000010363ce	movq	0x40(%rax), %rax
00000000010363d2	movq	%rax, (%rsp)
00000000010363d6	leaq	0x68(%rsp), %rax
00000000010363db	movq	%rax, 0x8(%rsp)
00000000010363e0	movq	%rbx, 0x10(%rsp)
00000000010363e5	xorps	%xmm0, %xmm0
00000000010363e8	movups	%xmm0, 0x18(%rsp)
00000000010363ed	callq	runtime.adjustpointers
00000000010363f2	jmp	0x10363b9
00000000010363f4	movq	0x90(%rsp), %rbx
00000000010363fc	jmp	0x10363b2
00000000010363fe	movslq	%eax, %rax
0000000001036401	shlq	$0x3, %rax
0000000001036405	movq	0x88(%rsp), %rcx
000000000103640d	movq	0x38(%rcx), %rdx
0000000001036411	subq	%rax, %rdx
0000000001036414	movq	%rdx, (%rsp)
0000000001036418	leaq	0x58(%rsp), %rax
000000000103641d	movq	%rax, 0x8(%rsp)
0000000001036422	movq	0x90(%rsp), %rax
000000000103642a	movq	%rax, 0x10(%rsp)
000000000103642f	movq	0x48(%rsp), %rdx
0000000001036434	movq	%rdx, 0x18(%rsp)
0000000001036439	movq	0x50(%rsp), %rdx
000000000103643e	movq	%rdx, 0x20(%rsp)
0000000001036443	callq	runtime.adjustpointers
0000000001036448	jmp	0x1036363
000000000103644d	movb	$0x1, 0x98(%rsp)
0000000001036455	movq	0x78(%rsp), %rbp
000000000103645a	addq	$0x80, %rsp
0000000001036461	retq
0000000001036462	movb	$0x1, 0x98(%rsp)
000000000103646a	movq	0x78(%rsp), %rbp
000000000103646f	addq	$0x80, %rsp
0000000001036476	retq
0000000001036477	callq	runtime.printlock
000000000103647c	leaq	0x3882d(%rip), %rax
0000000001036483	movq	%rax, (%rsp)
0000000001036487	movq	$0x4c, 0x8(%rsp)
0000000001036490	callq	runtime.printstring
0000000001036495	callq	runtime.printunlock
000000000103649a	movq	0x88(%rsp), %rax
00000000010364a2	movq	0x40(%rax), %rcx
00000000010364a6	movq	%rcx, 0x40(%rsp)
00000000010364ab	movq	0x38(%rax), %rax
00000000010364af	movq	%rax, 0x38(%rsp)
00000000010364b4	callq	runtime.printlock
00000000010364b9	leaq	0x3472b(%rip), %rax
00000000010364c0	movq	%rax, (%rsp)
00000000010364c4	movq	$0x5, 0x8(%rsp)
00000000010364cd	callq	runtime.printstring
00000000010364d2	movq	0x40(%rsp), %rax
00000000010364d7	movq	%rax, (%rsp)
00000000010364db	callq	runtime.printhex
00000000010364e0	leaq	0x34788(%rip), %rax
00000000010364e7	movq	%rax, (%rsp)
00000000010364eb	movq	$0x6, 0x8(%rsp)
00000000010364f4	callq	runtime.printstring
00000000010364f9	movq	0x38(%rsp), %rax
00000000010364fe	movq	%rax, (%rsp)
0000000001036502	callq	runtime.printhex
0000000001036507	callq	runtime.printnl
000000000103650c	callq	runtime.printunlock
0000000001036511	leaq	0x352a2(%rip), %rax
0000000001036518	movq	%rax, (%rsp)
000000000103651c	movq	$0x10, 0x8(%rsp)
0000000001036525	callq	runtime.throw
000000000103652a	ud2
000000000103652c	callq	runtime.morestack_noctxt
0000000001036531	jmp	runtime.adjustframe
0000000001036536	int3
0000000001036537	int3
0000000001036538	int3
0000000001036539	int3
000000000103653a	int3
000000000103653b	int3
000000000103653c	int3
000000000103653d	int3
000000000103653e	int3
000000000103653f	int3
runtime.adjustctxt:
0000000001036540	movq	0x8(%rsp), %rax
0000000001036545	leaq	0x50(%rax), %rcx
0000000001036549	testb	%al, (%rcx)
000000000103654b	movq	0x50(%rax), %rcx
000000000103654f	movq	0x10(%rsp), %rdx
0000000001036554	movq	(%rdx), %rbx
0000000001036557	cmpq	%rcx, %rbx
000000000103655a	ja	0x1036570
000000000103655c	movq	0x8(%rdx), %rbx
0000000001036560	cmpq	%rbx, %rcx
0000000001036563	jae	0x1036570
0000000001036565	movq	0x10(%rdx), %rbx
0000000001036569	addq	%rbx, %rcx
000000000103656c	movq	%rcx, 0x50(%rax)
0000000001036570	leaq	runtime.framepointer_enabled(%rip), %rcx
0000000001036577	cmpb	$0x0, (%rcx)
000000000103657a	je	0x10365a3
000000000103657c	leaq	0x68(%rax), %rcx
0000000001036580	testb	%al, (%rcx)
0000000001036582	movq	0x68(%rax), %rcx
0000000001036586	movq	(%rdx), %rbx
0000000001036589	cmpq	%rcx, %rbx
000000000103658c	ja	0x10365a2
000000000103658e	movq	0x8(%rdx), %rbx
0000000001036592	cmpq	%rbx, %rcx
0000000001036595	jae	0x10365a2
0000000001036597	movq	0x10(%rdx), %rdx
000000000103659b	addq	%rdx, %rcx
000000000103659e	movq	%rcx, 0x68(%rax)
00000000010365a2	retq
00000000010365a3	retq
00000000010365a4	int3
00000000010365a5	int3
00000000010365a6	int3
00000000010365a7	int3
00000000010365a8	int3
00000000010365a9	int3
00000000010365aa	int3
00000000010365ab	int3
00000000010365ac	int3
00000000010365ad	int3
00000000010365ae	int3
00000000010365af	int3
runtime.adjustdefers:
00000000010365b0	movq	%gs:0x30, %rcx
00000000010365b9	cmpq	0x10(%rcx), %rsp
00000000010365bd	jbe	0x103668c
00000000010365c3	subq	$0x20, %rsp
00000000010365c7	movq	%rbp, 0x18(%rsp)
00000000010365cc	leaq	0x18(%rsp), %rbp
00000000010365d1	movq	0x28(%rsp), %rax
00000000010365d6	movq	%rax, (%rsp)
00000000010365da	leaq	0x38787(%rip), %rcx
00000000010365e1	movq	%rcx, 0x8(%rsp)
00000000010365e6	movq	0x30(%rsp), %rcx
00000000010365eb	movq	%rcx, 0x10(%rsp)
00000000010365f0	callq	runtime.tracebackdefers
00000000010365f5	movq	0x28(%rsp), %rax
00000000010365fa	movq	0x28(%rax), %rax
00000000010365fe	movq	0x30(%rsp), %rcx
0000000001036603	jmp	0x1036609
0000000001036605	movq	0x28(%rax), %rax
0000000001036609	testq	%rax, %rax
000000000103660c	je	0x1036682
000000000103660e	leaq	0x18(%rax), %rdx
0000000001036612	testb	%al, (%rdx)
0000000001036614	movq	0x18(%rax), %rdx
0000000001036618	movq	(%rcx), %rbx
000000000103661b	cmpq	%rdx, %rbx
000000000103661e	ja	0x1036634
0000000001036620	movq	0x8(%rcx), %rbx
0000000001036624	cmpq	%rbx, %rdx
0000000001036627	jae	0x1036634
0000000001036629	movq	0x10(%rcx), %rbx
000000000103662d	addq	%rbx, %rdx
0000000001036630	movq	%rdx, 0x18(%rax)
0000000001036634	leaq	0x8(%rax), %rdx
0000000001036638	testb	%al, (%rdx)
000000000103663a	movq	0x8(%rax), %rdx
000000000103663e	movq	(%rcx), %rbx
0000000001036641	cmpq	%rdx, %rbx
0000000001036644	ja	0x103665a
0000000001036646	movq	0x8(%rcx), %rbx
000000000103664a	cmpq	%rbx, %rdx
000000000103664d	jae	0x103665a
000000000103664f	movq	0x10(%rcx), %rbx
0000000001036653	addq	%rbx, %rdx
0000000001036656	movq	%rdx, 0x8(%rax)
000000000103665a	leaq	0x20(%rax), %rdx
000000000103665e	testb	%al, (%rdx)
0000000001036660	movq	0x20(%rax), %rdx
0000000001036664	movq	(%rcx), %rbx
0000000001036667	cmpq	%rdx, %rbx
000000000103666a	ja	0x1036605
000000000103666c	movq	0x8(%rcx), %rbx
0000000001036670	cmpq	%rbx, %rdx
0000000001036673	jae	0x1036605
0000000001036675	movq	0x10(%rcx), %rbx
0000000001036679	addq	%rbx, %rdx
000000000103667c	movq	%rdx, 0x20(%rax)
0000000001036680	jmp	0x1036605
0000000001036682	movq	0x18(%rsp), %rbp
0000000001036687	addq	$0x20, %rsp
000000000103668b	retq
000000000103668c	callq	runtime.morestack_noctxt
0000000001036691	jmp	runtime.adjustdefers
0000000001036696	int3
0000000001036697	int3
0000000001036698	int3
0000000001036699	int3
000000000103669a	int3
000000000103669b	int3
000000000103669c	int3
000000000103669d	int3
000000000103669e	int3
000000000103669f	int3
runtime.adjustsudogs:
00000000010366a0	movq	0x8(%rsp), %rax
00000000010366a5	movq	0x138(%rax), %rax
00000000010366ac	movq	0x10(%rsp), %rcx
00000000010366b1	jmp	0x10366b7
00000000010366b3	movq	0x48(%rax), %rax
00000000010366b7	testq	%rax, %rax
00000000010366ba	je	0x10366e4
00000000010366bc	leaq	0x20(%rax), %rdx
00000000010366c0	testb	%al, (%rdx)
00000000010366c2	movq	0x20(%rax), %rdx
00000000010366c6	movq	(%rcx), %rbx
00000000010366c9	cmpq	%rdx, %rbx
00000000010366cc	ja	0x10366b3
00000000010366ce	movq	0x8(%rcx), %rbx
00000000010366d2	cmpq	%rbx, %rdx
00000000010366d5	jae	0x10366b3
00000000010366d7	movq	0x10(%rcx), %rbx
00000000010366db	addq	%rbx, %rdx
00000000010366de	movq	%rdx, 0x20(%rax)
00000000010366e2	jmp	0x10366b3
00000000010366e4	retq
00000000010366e5	int3
00000000010366e6	int3
00000000010366e7	int3
00000000010366e8	int3
00000000010366e9	int3
00000000010366ea	int3
00000000010366eb	int3
00000000010366ec	int3
00000000010366ed	int3
00000000010366ee	int3
00000000010366ef	int3
runtime.findsghi:
00000000010366f0	movq	0x8(%rsp), %rax
00000000010366f5	movq	0x138(%rax), %rax
00000000010366fc	movq	0x18(%rsp), %rcx
0000000001036701	movq	0x10(%rsp), %rdx
0000000001036706	xorl	%ebx, %ebx
0000000001036708	jmp	0x1036711
000000000103670a	movq	0x48(%rax), %rax
000000000103670e	movq	%rsi, %rbx
0000000001036711	testq	%rax, %rax
0000000001036714	je	0x1036739
0000000001036716	movq	0x58(%rax), %rsi
000000000103671a	movq	0x20(%rax), %rdi
000000000103671e	movzwl	0x18(%rsi), %esi
0000000001036722	addq	%rdi, %rsi
0000000001036725	cmpq	%rsi, %rdx
0000000001036728	ja	0x1036734
000000000103672a	cmpq	%rcx, %rsi
000000000103672d	jae	0x1036734
000000000103672f	cmpq	%rbx, %rsi
0000000001036732	ja	0x103670a
0000000001036734	movq	%rbx, %rsi
0000000001036737	jmp	0x103670a
0000000001036739	movq	%rbx, 0x20(%rsp)
000000000103673e	retq
000000000103673f	int3
runtime.syncadjustsudogs:
0000000001036740	movq	%gs:0x30, %rcx
0000000001036749	cmpq	0x10(%rcx), %rsp
000000000103674d	jbe	0x1036884
0000000001036753	subq	$0x38, %rsp
0000000001036757	movq	%rbp, 0x30(%rsp)
000000000103675c	leaq	0x30(%rsp), %rbp
0000000001036761	movq	0x40(%rsp), %rax
0000000001036766	movq	0x138(%rax), %rcx
000000000103676d	testq	%rcx, %rcx
0000000001036770	je	0x1036871
0000000001036776	xorl	%edx, %edx
0000000001036778	jmp	0x1036785
000000000103677a	movq	0x48(%rcx), %rbx
000000000103677e	movq	0x58(%rcx), %rdx
0000000001036782	movq	%rbx, %rcx
0000000001036785	testq	%rcx, %rcx
0000000001036788	je	0x10367b3
000000000103678a	movq	0x58(%rcx), %rbx
000000000103678e	cmpq	%rbx, %rdx
0000000001036791	je	0x103677a
0000000001036793	movq	%rcx, 0x28(%rsp)
0000000001036798	testb	%al, (%rbx)
000000000103679a	leaq	0x58(%rbx), %rax
000000000103679e	movq	%rax, (%rsp)
00000000010367a2	callq	runtime.lock
00000000010367a7	movq	0x40(%rsp), %rax
00000000010367ac	movq	0x28(%rsp), %rcx
00000000010367b1	jmp	0x103677a
00000000010367b3	movq	%rax, (%rsp)
00000000010367b7	movq	0x50(%rsp), %rcx
00000000010367bc	movq	%rcx, 0x8(%rsp)
00000000010367c1	callq	runtime.adjustsudogs
00000000010367c6	movq	0x50(%rsp), %rax
00000000010367cb	movq	0x118(%rax), %rcx
00000000010367d2	testq	%rcx, %rcx
00000000010367d5	jne	0x1036836
00000000010367d7	xorl	%eax, %eax
00000000010367d9	movq	%rax, 0x18(%rsp)
00000000010367de	movq	0x40(%rsp), %rcx
00000000010367e3	movq	0x138(%rcx), %rcx
00000000010367ea	xorl	%edx, %edx
00000000010367ec	jmp	0x10367f9
00000000010367ee	movq	0x48(%rcx), %rbx
00000000010367f2	movq	0x58(%rcx), %rdx
00000000010367f6	movq	%rbx, %rcx
00000000010367f9	testq	%rcx, %rcx
00000000010367fc	je	0x1036827
00000000010367fe	movq	0x58(%rcx), %rbx
0000000001036802	cmpq	%rbx, %rdx
0000000001036805	je	0x10367ee
0000000001036807	movq	%rcx, 0x20(%rsp)
000000000103680c	testb	%al, (%rbx)
000000000103680e	leaq	0x58(%rbx), %rax
0000000001036812	movq	%rax, (%rsp)
0000000001036816	callq	runtime.unlock
000000000103681b	movq	0x18(%rsp), %rax
0000000001036820	movq	0x20(%rsp), %rcx
0000000001036825	jmp	0x10367ee
0000000001036827	movq	%rax, 0x58(%rsp)
000000000103682c	movq	0x30(%rsp), %rbp
0000000001036831	addq	$0x38, %rsp
0000000001036835	retq
0000000001036836	movq	0x8(%rax), %rdx
000000000103683a	movq	0x48(%rsp), %rbx
000000000103683f	subq	%rbx, %rdx
0000000001036842	movq	0x10(%rax), %rax
0000000001036846	addq	%rdx, %rax
0000000001036849	movq	%rax, (%rsp)
000000000103684d	movq	%rdx, %rax
0000000001036850	movq	%rdx, 0x8(%rsp)
0000000001036855	subq	%rax, %rcx
0000000001036858	movq	%rcx, 0x18(%rsp)
000000000103685d	movq	%rcx, 0x10(%rsp)
0000000001036862	callq	runtime.memmove
0000000001036867	movq	0x18(%rsp), %rax
000000000103686c	jmp	0x10367d9
0000000001036871	movq	$0x0, 0x58(%rsp)
000000000103687a	movq	0x30(%rsp), %rbp
000000000103687f	addq	$0x38, %rsp
0000000001036883	retq
0000000001036884	callq	runtime.morestack_noctxt
0000000001036889	jmp	runtime.syncadjustsudogs
000000000103688e	int3
000000000103688f	int3
runtime.copystack:
0000000001036890	movq	%gs:0x30, %rcx
0000000001036899	leaq	-0x130(%rsp), %rax
00000000010368a1	cmpq	0x10(%rcx), %rax
00000000010368a5	jbe	0x1036bc4
00000000010368ab	subq	$0x1b0, %rsp
00000000010368b2	movq	%rbp, 0x1a8(%rsp)
00000000010368ba	leaq	0x1a8(%rsp), %rbp
00000000010368c2	movq	0x1b8(%rsp), %rax
00000000010368ca	cmpq	$0x0, 0x70(%rax)
00000000010368cf	jne	0x1036ba9
00000000010368d5	movq	0x8(%rax), %rcx
00000000010368d9	movq	(%rax), %rdx
00000000010368dc	testq	%rdx, %rdx
00000000010368df	je	0x1036b8e
00000000010368e5	movq	%rcx, 0x80(%rsp)
00000000010368ed	movq	%rdx, 0x78(%rsp)
00000000010368f2	movq	0x38(%rax), %rcx
00000000010368f6	movq	%rcx, 0x70(%rsp)
00000000010368fb	movq	0x1c0(%rsp), %rdx
0000000001036903	movl	%edx, (%rsp)
0000000001036906	callq	runtime.stackalloc
000000000103690b	movq	0x10(%rsp), %rax
0000000001036910	movq	%rax, 0x68(%rsp)
0000000001036915	movq	0x8(%rsp), %rcx
000000000103691a	movq	%rcx, 0x60(%rsp)
000000000103691f	leaq	0x88(%rsp), %rdi
0000000001036927	xorps	%xmm0, %xmm0
000000000103692a	leaq	-0x20(%rdi), %rdi
000000000103692e	movq	%rbp, -0x10(%rsp)
0000000001036933	leaq	-0x10(%rsp), %rbp
0000000001036938	callq	0x10491e8
000000000103693d	movq	(%rbp), %rbp
0000000001036941	movq	0x78(%rsp), %rdx
0000000001036946	movq	%rdx, 0x88(%rsp)
000000000103694e	movq	0x80(%rsp), %rbx
0000000001036956	movq	%rbx, 0x90(%rsp)
000000000103695e	subq	%rbx, %rax
0000000001036961	movq	%rax, 0x98(%rsp)
0000000001036969	movq	0x70(%rsp), %rax
000000000103696e	movq	%rbx, %rdi
0000000001036971	subq	%rax, %rbx
0000000001036974	movq	%rbx, 0x58(%rsp)
0000000001036979	movzbl	0x1c8(%rsp), %eax
0000000001036981	testb	%al, %al
0000000001036983	je	0x1036b29
0000000001036989	movq	0x1b8(%rsp), %rax
0000000001036991	movq	%rax, (%rsp)
0000000001036995	leaq	0x88(%rsp), %rcx
000000000103699d	movq	%rcx, 0x8(%rsp)
00000000010369a2	callq	runtime.adjustsudogs
00000000010369a7	movq	0x58(%rsp), %rax
00000000010369ac	movq	0x68(%rsp), %rcx
00000000010369b1	subq	%rax, %rcx
00000000010369b4	movq	%rcx, (%rsp)
00000000010369b8	movq	0x80(%rsp), %rcx
00000000010369c0	subq	%rax, %rcx
00000000010369c3	movq	%rcx, 0x8(%rsp)
00000000010369c8	movq	%rax, 0x10(%rsp)
00000000010369cd	callq	runtime.memmove
00000000010369d2	movq	0x1b8(%rsp), %rax
00000000010369da	movq	%rax, (%rsp)
00000000010369de	leaq	0x88(%rsp), %rcx
00000000010369e6	movq	%rcx, 0x8(%rsp)
00000000010369eb	callq	runtime.adjustctxt
00000000010369f0	movq	0x1b8(%rsp), %rax
00000000010369f8	movq	%rax, (%rsp)
00000000010369fc	leaq	0x88(%rsp), %rcx
0000000001036a04	movq	%rcx, 0x8(%rsp)
0000000001036a09	callq	runtime.adjustdefers
0000000001036a0e	movq	0x1b8(%rsp), %rax
0000000001036a16	leaq	0x20(%rax), %rcx
0000000001036a1a	testb	%al, (%rcx)
0000000001036a1c	movq	0x20(%rax), %rcx
0000000001036a20	movq	0x88(%rsp), %rdx
0000000001036a28	cmpq	%rcx, %rdx
0000000001036a2b	ja	0x1036a49
0000000001036a2d	movq	0x90(%rsp), %rdx
0000000001036a35	cmpq	%rdx, %rcx
0000000001036a38	jae	0x1036a49
0000000001036a3a	movq	0x98(%rsp), %rdx
0000000001036a42	addq	%rdx, %rcx
0000000001036a45	movq	%rcx, 0x20(%rax)
0000000001036a49	movq	0x1a0(%rsp), %rcx
0000000001036a51	testq	%rcx, %rcx
0000000001036a54	je	0x1036a69
0000000001036a56	movq	0x98(%rsp), %rdx
0000000001036a5e	addq	%rdx, %rcx
0000000001036a61	movq	%rcx, 0x1a0(%rsp)
0000000001036a69	movq	0x60(%rsp), %rcx
0000000001036a6e	movq	%rcx, (%rax)
0000000001036a71	movq	0x68(%rsp), %rdx
0000000001036a76	movq	%rdx, 0x8(%rax)
0000000001036a7a	addq	$0x370, %rcx
0000000001036a81	movq	%rcx, 0x10(%rax)
0000000001036a85	movq	0x58(%rsp), %rcx
0000000001036a8a	subq	%rcx, %rdx
0000000001036a8d	movq	%rdx, 0x38(%rax)
0000000001036a91	movq	0x98(%rsp), %rcx
0000000001036a99	addq	0x80(%rax), %rcx
0000000001036aa0	movq	%rcx, 0x80(%rax)
0000000001036aa7	movq	$-0x1, (%rsp)
0000000001036aaf	movq	$-0x1, 0x8(%rsp)
0000000001036ab8	movq	$0x0, 0x10(%rsp)
0000000001036ac1	movq	%rax, 0x18(%rsp)
0000000001036ac6	xorps	%xmm0, %xmm0
0000000001036ac9	movups	%xmm0, 0x20(%rsp)
0000000001036ace	movq	$0x7fffffff, 0x30(%rsp)
0000000001036ad7	leaq	0x3828a(%rip), %rax
0000000001036ade	movq	%rax, 0x38(%rsp)
0000000001036ae3	leaq	0x88(%rsp), %rax
0000000001036aeb	movq	%rax, 0x40(%rsp)
0000000001036af0	movq	$0x0, 0x48(%rsp)
0000000001036af9	callq	runtime.gentraceback
0000000001036afe	movq	0x78(%rsp), %rax
0000000001036b03	movq	%rax, (%rsp)
0000000001036b07	movq	0x80(%rsp), %rax
0000000001036b0f	movq	%rax, 0x8(%rsp)
0000000001036b14	callq	runtime.stackfree
0000000001036b19	movq	0x1a8(%rsp), %rbp
0000000001036b21	addq	$0x1b0, %rsp
0000000001036b28	retq
0000000001036b29	movq	0x1b8(%rsp), %rax
0000000001036b31	movq	%rax, (%rsp)
0000000001036b35	movq	%rdx, 0x8(%rsp)
0000000001036b3a	movq	%rdi, 0x10(%rsp)
0000000001036b3f	callq	runtime.findsghi
0000000001036b44	movq	0x18(%rsp), %rax
0000000001036b49	movq	%rax, 0x1a0(%rsp)
0000000001036b51	movq	0x1b8(%rsp), %rax
0000000001036b59	movq	%rax, (%rsp)
0000000001036b5d	movq	0x58(%rsp), %rcx
0000000001036b62	movq	%rcx, 0x8(%rsp)
0000000001036b67	leaq	0x88(%rsp), %rdx
0000000001036b6f	movq	%rdx, 0x10(%rsp)
0000000001036b74	callq	runtime.syncadjustsudogs
0000000001036b79	movq	0x18(%rsp), %rax
0000000001036b7e	movq	0x58(%rsp), %rcx
0000000001036b83	subq	%rax, %rcx
0000000001036b86	movq	%rcx, %rax
0000000001036b89	jmp	0x10369ac
0000000001036b8e	leaq	0x348fd(%rip), %rax
0000000001036b95	movq	%rax, (%rsp)
0000000001036b99	movq	$0xd, 0x8(%rsp)
0000000001036ba2	callq	runtime.throw
0000000001036ba7	ud2
0000000001036ba9	leaq	0x37475(%rip), %rax
0000000001036bb0	movq	%rax, (%rsp)
0000000001036bb4	movq	$0x27, 0x8(%rsp)
0000000001036bbd	callq	runtime.throw
0000000001036bc2	ud2
0000000001036bc4	callq	runtime.morestack_noctxt
0000000001036bc9	jmp	runtime.copystack
0000000001036bce	int3
0000000001036bcf	int3
runtime.round2:
0000000001036bd0	movl	0x8(%rsp), %eax
0000000001036bd4	xorl	%ecx, %ecx
0000000001036bd6	jmp	0x1036bdb
0000000001036bd8	incq	%rcx
0000000001036bdb	movl	$0x1, %edx
0000000001036be0	shll	%cl, %edx
0000000001036be2	cmpq	$0x20, %rcx
0000000001036be6	sbbl	%ebx, %ebx
0000000001036be8	andl	%ebx, %edx
0000000001036bea	cmpl	%eax, %edx
0000000001036bec	jl	0x1036bd8
0000000001036bee	movl	%edx, 0x10(%rsp)
0000000001036bf2	retq
0000000001036bf3	int3
0000000001036bf4	int3
0000000001036bf5	int3
0000000001036bf6	int3
0000000001036bf7	int3
0000000001036bf8	int3
0000000001036bf9	int3
0000000001036bfa	int3
0000000001036bfb	int3
0000000001036bfc	int3
0000000001036bfd	int3
0000000001036bfe	int3
0000000001036bff	int3
runtime.newstack:
0000000001036c00	movq	%gs:0x30, %rcx
0000000001036c09	leaq	-0x110(%rsp), %rax
0000000001036c11	cmpq	0x10(%rcx), %rax
0000000001036c15	jbe	0x1037954
0000000001036c1b	subq	$0x190, %rsp
0000000001036c22	movq	%rbp, 0x188(%rsp)
0000000001036c2a	leaq	0x188(%rsp), %rbp
0000000001036c32	movq	%gs:0x30, %rax
0000000001036c3b	movq	0x30(%rax), %rcx
0000000001036c3f	movq	0x18(%rcx), %rdx
0000000001036c43	movq	%rdx, %rbx
0000000001036c46	cmpq	$-0x4d2, 0x10(%rdx)
0000000001036c4e	je	0x1037939
0000000001036c54	movq	%rax, 0x98(%rsp)
0000000001036c5c	movq	0xc0(%rcx), %rsi
0000000001036c63	movq	%rsi, 0xd8(%rsp)
0000000001036c6b	cmpq	%rsi, %rdx
0000000001036c6e	jne	0x10377a6
0000000001036c74	testb	%al, (%rsi)
0000000001036c76	leaq	0xb6(%rsi), %rdx
0000000001036c7d	cmpb	$0x0, (%rdx)
0000000001036c80	jne	0x1037209
0000000001036c86	movq	0x8(%rcx), %rdx
0000000001036c8a	movq	%rdx, 0xe0(%rsp)
0000000001036c92	movups	0x10(%rcx), %xmm0
0000000001036c96	movups	%xmm0, 0xe8(%rsp)
0000000001036c9e	movups	0x20(%rcx), %xmm0
0000000001036ca2	movups	%xmm0, 0xf8(%rsp)
0000000001036caa	movups	0x30(%rcx), %xmm0
0000000001036cae	movups	%xmm0, 0x108(%rsp)
0000000001036cb6	movq	0x30(%rax), %rcx
0000000001036cba	movq	$0x0, 0x10(%rcx)
0000000001036cc2	movq	0x30(%rax), %rcx
0000000001036cc6	movq	$0x0, 0x30(%rcx)
0000000001036cce	movq	0x30(%rax), %rcx
0000000001036cd2	movq	$0x0, 0x8(%rcx)
0000000001036cda	movq	0x30(%rax), %rcx
0000000001036cde	movq	$0x0, 0x18(%rcx)
0000000001036ce6	movq	0x10(%rsi), %rcx
0000000001036cea	movq	%rcx, 0x90(%rsp)
0000000001036cf2	cmpq	$-0x522, %rcx
0000000001036cf9	jne	0x1036d26
0000000001036cfb	movq	0x30(%rax), %rdx
0000000001036cff	cmpl	$0x0, 0x100(%rdx)
0000000001036d06	je	0x10371d8
0000000001036d0c	movq	(%rsi), %rax
0000000001036d0f	addq	$0x370, %rax
0000000001036d15	movq	%rax, 0x10(%rsi)
0000000001036d19	leaq	0x38(%rsi), %rax
0000000001036d1d	movq	%rax, (%rsp)
0000000001036d21	callq	runtime.gogo
0000000001036d26	movq	0xd8(%rsp), %rax
0000000001036d2e	movq	(%rax), %rcx
0000000001036d31	testq	%rcx, %rcx
0000000001036d34	je	0x10374a1
0000000001036d3a	movq	0x38(%rax), %rdx
0000000001036d3e	leaq	-0x8(%rdx), %rbx
0000000001036d42	movq	%rbx, 0x28(%rsp)
0000000001036d47	cmpq	%rcx, %rbx
0000000001036d4a	jb	0x1036fb6
0000000001036d50	movq	(%rax), %rcx
0000000001036d53	cmpq	%rcx, %rbx
0000000001036d56	jb	0x1037361
0000000001036d5c	movq	0x90(%rsp), %rcx
0000000001036d64	cmpq	$-0x522, %rcx
0000000001036d6b	jne	0x1036ead
0000000001036d71	movq	0x98(%rsp), %rcx
0000000001036d79	movq	0x30(%rcx), %rcx
0000000001036d7d	movq	(%rcx), %rdx
0000000001036d80	cmpq	%rdx, %rax
0000000001036d83	je	0x1037346
0000000001036d89	cmpq	$0x0, 0xd0(%rcx)
0000000001036d91	jne	0x1036da0
0000000001036d93	cmpl	$0x0, 0x100(%rcx)
0000000001036d9a	je	0x103732b
0000000001036da0	movq	%rax, (%rsp)
0000000001036da4	movabsq	$0x400000002, %rcx
0000000001036dae	movq	%rcx, 0x8(%rsp)
0000000001036db3	callq	runtime.casgstatus
0000000001036db8	movq	0xd8(%rsp), %rax
0000000001036dc0	leaq	0xb3(%rax), %rcx
0000000001036dc7	cmpb	$0x0, (%rcx)
0000000001036dca	jne	0x1036dd9
0000000001036dcc	jmp	0x1036e7c
0000000001036dd1	movq	0xd8(%rsp), %rax
0000000001036dd9	movq	%rax, (%rsp)
0000000001036ddd	movabsq	$0x100400000004, %rcx
0000000001036de7	movq	%rcx, 0x8(%rsp)
0000000001036dec	callq	runtime.castogscanstatus
0000000001036df1	leaq	0x10(%rsp), %rax
0000000001036df6	cmpb	$0x0, (%rax)
0000000001036df9	je	0x1036dd1
0000000001036dfb	movq	0xd8(%rsp), %rax
0000000001036e03	leaq	0xb4(%rax), %rcx
0000000001036e0a	cmpb	$0x0, (%rcx)
0000000001036e0d	je	0x1036f57
0000000001036e13	movb	$0x0, 0xb3(%rax)
0000000001036e1a	movb	$0x0, 0xb1(%rax)
0000000001036e21	movq	%rax, (%rsp)
0000000001036e25	movabsq	$0x400001004, %rcx
0000000001036e2f	movq	%rcx, 0x8(%rsp)
0000000001036e34	callq	runtime.casfrom_Gscanstatus
0000000001036e39	movq	0xd8(%rsp), %rax
0000000001036e41	movq	%rax, (%rsp)
0000000001036e45	movabsq	$0x200000004, %rcx
0000000001036e4f	movq	%rcx, 0x8(%rsp)
0000000001036e54	callq	runtime.casgstatus
0000000001036e59	movq	0xd8(%rsp), %rax
0000000001036e61	movq	(%rax), %rcx
0000000001036e64	addq	$0x370, %rcx
0000000001036e6b	movq	%rcx, 0x10(%rax)
0000000001036e6f	leaq	0x38(%rax), %rcx
0000000001036e73	movq	%rcx, (%rsp)
0000000001036e77	callq	runtime.gogo
0000000001036e7c	movq	0xd8(%rsp), %rax
0000000001036e84	movq	%rax, (%rsp)
0000000001036e88	movabsq	$0x200000004, %rcx
0000000001036e92	movq	%rcx, 0x8(%rsp)
0000000001036e97	callq	runtime.casgstatus
0000000001036e9c	movq	0xd8(%rsp), %rax
0000000001036ea4	movq	%rax, (%rsp)
0000000001036ea8	callq	runtime.gopreempt_m
0000000001036ead	movq	0xd8(%rsp), %rax
0000000001036eb5	movq	0x8(%rax), %rcx
0000000001036eb9	subq	(%rax), %rcx
0000000001036ebc	shlq	%rcx
0000000001036ebf	movq	runtime.maxstacksize(%rip), %rdx
0000000001036ec6	cmpq	%rdx, %rcx
0000000001036ec9	ja	0x10372c4
0000000001036ecf	movq	%rcx, 0x88(%rsp)
0000000001036ed7	movq	%rax, (%rsp)
0000000001036edb	movabsq	$0x800000002, %rcx
0000000001036ee5	movq	%rcx, 0x8(%rsp)
0000000001036eea	callq	runtime.casgstatus
0000000001036eef	movq	0xd8(%rsp), %rax
0000000001036ef7	movq	%rax, (%rsp)
0000000001036efb	movq	0x88(%rsp), %rcx
0000000001036f03	movq	%rcx, 0x8(%rsp)
0000000001036f08	movb	$0x1, 0x10(%rsp)
0000000001036f0d	callq	runtime.copystack
0000000001036f12	movq	0xd8(%rsp), %rax
0000000001036f1a	movq	%rax, (%rsp)
0000000001036f1e	movabsq	$0x200000008, %rcx
0000000001036f28	movq	%rcx, 0x8(%rsp)
0000000001036f2d	callq	runtime.casgstatus
0000000001036f32	movq	0xd8(%rsp), %rax
0000000001036f3a	addq	$0x38, %rax
0000000001036f3e	movq	%rax, (%rsp)
0000000001036f42	callq	runtime.gogo
0000000001036f47	movq	0x188(%rsp), %rbp
0000000001036f4f	addq	$0x190, %rsp
0000000001036f56	retq
0000000001036f57	movq	0x30(%rax), %rcx
0000000001036f5b	movq	0xd0(%rcx), %rdx
0000000001036f62	testb	%al, (%rdx)
0000000001036f64	testb	%al, (%rcx)
0000000001036f66	movq	%rax, (%rsp)
0000000001036f6a	leaq	0x1270(%rdx), %rcx
0000000001036f71	movq	%rcx, 0xa8(%rsp)
0000000001036f79	movq	%rcx, 0x8(%rsp)
0000000001036f7e	callq	runtime.scanstack
0000000001036f83	leaq	runtime.gcBlackenPromptly(%rip), %rax
0000000001036f8a	cmpb	$0x0, (%rax)
0000000001036f8d	jne	0x1036fa3
0000000001036f8f	movq	0xd8(%rsp), %rax
0000000001036f97	movb	$0x1, 0xb4(%rax)
0000000001036f9e	jmp	0x1036e13
0000000001036fa3	movq	0xa8(%rsp), %rax
0000000001036fab	movq	%rax, (%rsp)
0000000001036faf	callq	"runtime.(*gcWork).dispose"
0000000001036fb4	jmp	0x1036f8f
0000000001036fb6	movq	%rcx, 0x88(%rsp)
0000000001036fbe	movq	%rdx, 0x80(%rsp)
0000000001036fc6	movq	0x8(%rax), %rcx
0000000001036fca	movq	%rcx, 0x78(%rsp)
0000000001036fcf	movq	0xe8(%rsp), %rdx
0000000001036fd7	movq	%rdx, 0x70(%rsp)
0000000001036fdc	movq	0xe0(%rsp), %rbx
0000000001036fe4	movq	%rbx, 0x68(%rsp)
0000000001036fe9	movq	0x108(%rsp), %rsi
0000000001036ff1	movq	%rsi, 0x60(%rsp)
0000000001036ff6	movq	0x40(%rax), %rdi
0000000001036ffa	movq	%rdi, 0x58(%rsp)
0000000001036fff	movq	0x60(%rax), %r8
0000000001037003	movq	%r8, 0x50(%rsp)
0000000001037008	movq	0x50(%rax), %r9
000000000103700c	movq	%r9, 0xd0(%rsp)
0000000001037014	callq	runtime.printlock
0000000001037019	leaq	0x35048(%rip), %rax
0000000001037020	movq	%rax, (%rsp)
0000000001037024	movq	$0x15, 0x8(%rsp)
000000000103702d	callq	runtime.printstring
0000000001037032	movq	0x28(%rsp), %rax
0000000001037037	movq	%rax, (%rsp)
000000000103703b	callq	runtime.printhex
0000000001037040	leaq	0x33dea(%rip), %rax
0000000001037047	movq	%rax, (%rsp)
000000000103704b	movq	$0x8, 0x8(%rsp)
0000000001037054	callq	runtime.printstring
0000000001037059	movq	0x88(%rsp), %rax
0000000001037061	movq	%rax, (%rsp)
0000000001037065	callq	runtime.printhex
000000000103706a	leaq	0x33a2b(%rip), %rax
0000000001037071	movq	%rax, (%rsp)
0000000001037075	movq	$0x2, 0x8(%rsp)
000000000103707e	callq	runtime.printstring
0000000001037083	movq	0x78(%rsp), %rax
0000000001037088	movq	%rax, (%rsp)
000000000103708c	callq	runtime.printhex
0000000001037091	leaq	0x345cf(%rip), %rax
0000000001037098	movq	%rax, (%rsp)
000000000103709c	movq	$0xf, 0x8(%rsp)
00000000010370a5	callq	runtime.printstring
00000000010370aa	movq	0x70(%rsp), %rax
00000000010370af	movq	%rax, (%rsp)
00000000010370b3	callq	runtime.printhex
00000000010370b8	leaq	0x33a50(%rip), %rax
00000000010370bf	movq	%rax, (%rsp)
00000000010370c3	movq	$0x4, 0x8(%rsp)
00000000010370cc	callq	runtime.printstring
00000000010370d1	movq	0x68(%rsp), %rax
00000000010370d6	movq	%rax, (%rsp)
00000000010370da	callq	runtime.printhex
00000000010370df	leaq	0x33a1d(%rip), %rax
00000000010370e6	movq	%rax, (%rsp)
00000000010370ea	movq	$0x4, 0x8(%rsp)
00000000010370f3	callq	runtime.printstring
00000000010370f8	movq	0x60(%rsp), %rax
00000000010370fd	movq	%rax, (%rsp)
0000000001037101	callq	runtime.printhex
0000000001037106	leaq	0x343e0(%rip), %rax
000000000103710d	movq	%rax, (%rsp)
0000000001037111	movq	$0xd, 0x8(%rsp)
000000000103711a	callq	runtime.printstring
000000000103711f	movq	0x58(%rsp), %rax
0000000001037124	movq	%rax, (%rsp)
0000000001037128	callq	runtime.printhex
000000000103712d	leaq	0x339db(%rip), %rax
0000000001037134	movq	%rax, (%rsp)
0000000001037138	movq	$0x4, 0x8(%rsp)
0000000001037141	callq	runtime.printstring
0000000001037146	movq	0x80(%rsp), %rax
000000000103714e	movq	%rax, (%rsp)
0000000001037152	callq	runtime.printhex
0000000001037157	leaq	0x339a5(%rip), %rax
000000000103715e	movq	%rax, (%rsp)
0000000001037162	movq	$0x4, 0x8(%rsp)
000000000103716b	callq	runtime.printstring
0000000001037170	movq	0x50(%rsp), %rax
0000000001037175	movq	%rax, (%rsp)
0000000001037179	callq	runtime.printhex
000000000103717e	leaq	0x33aba(%rip), %rax
0000000001037185	movq	%rax, (%rsp)
0000000001037189	movq	$0x6, 0x8(%rsp)
0000000001037192	callq	runtime.printstring
0000000001037197	movq	0xd0(%rsp), %rax
000000000103719f	movq	%rax, (%rsp)
00000000010371a3	callq	runtime.printpointer
00000000010371a8	leaq	0x338fd(%rip), %rax
00000000010371af	movq	%rax, (%rsp)
00000000010371b3	movq	$0x2, 0x8(%rsp)
00000000010371bc	callq	runtime.printstring
00000000010371c1	callq	runtime.printunlock
00000000010371c6	movq	0xd8(%rsp), %rax
00000000010371ce	movq	0x28(%rsp), %rbx
00000000010371d3	jmp	0x1036d50
00000000010371d8	cmpl	$0x0, 0xe8(%rdx)
00000000010371df	jne	0x1036d0c
00000000010371e5	cmpq	$0x0, 0xf8(%rdx)
00000000010371ed	jne	0x1036d0c
00000000010371f3	movq	0xd0(%rdx), %rdx
00000000010371fa	cmpl	$0x1, 0xc(%rdx)
00000000010371fe	jne	0x1036d0c
0000000001037204	jmp	0x1036d26
0000000001037209	movq	0x8(%rcx), %rax
000000000103720d	movq	%rax, 0x118(%rsp)
0000000001037215	movups	0x10(%rcx), %xmm0
0000000001037219	movups	%xmm0, 0x120(%rsp)
0000000001037221	movups	0x20(%rcx), %xmm0
0000000001037225	movups	%xmm0, 0x130(%rsp)
000000000103722d	movups	0x30(%rcx), %xmm0
0000000001037231	movups	%xmm0, 0x140(%rsp)
0000000001037239	movq	0x118(%rsp), %rax
0000000001037241	movq	%rax, 0x70(%rsi)
0000000001037245	movq	0x120(%rsp), %rax
000000000103724d	movq	%rax, 0x78(%rsi)
0000000001037251	movq	0x40(%rsi), %rax
0000000001037255	movq	%rax, (%rsp)
0000000001037259	callq	runtime.findfunc
000000000103725e	movq	0x8(%rsp), %rax
0000000001037263	movq	0x10(%rsp), %rcx
0000000001037268	testq	%rax, %rax
000000000103726b	jne	0x1037288
000000000103726d	movq	0xd8(%rsp), %rdx
0000000001037275	movl	$0x9, %eax
000000000103727a	leaq	0x33c9f(%rip), %rcx
0000000001037281	xorl	%ebx, %ebx
0000000001037283	jmp	0x10374bc
0000000001037288	movq	%rax, 0xc8(%rsp)
0000000001037290	movq	%rax, (%rsp)
0000000001037294	movq	%rcx, 0x8(%rsp)
0000000001037299	callq	runtime.funcname
000000000103729e	movq	0x18(%rsp), %rax
00000000010372a3	movq	0x10(%rsp), %rcx
00000000010372a8	movq	0xd8(%rsp), %rdx
00000000010372b0	movq	0x40(%rdx), %rbx
00000000010372b4	movq	0xc8(%rsp), %rsi
00000000010372bc	subq	(%rsi), %rbx
00000000010372bf	jmp	0x10374bc
00000000010372c4	callq	runtime.printlock
00000000010372c9	leaq	0x365ca(%rip), %rax
00000000010372d0	movq	%rax, (%rsp)
00000000010372d4	movq	$0x21, 0x8(%rsp)
00000000010372dd	callq	runtime.printstring
00000000010372e2	movq	runtime.maxstacksize(%rip), %rax
00000000010372e9	movq	%rax, (%rsp)
00000000010372ed	callq	runtime.printuint
00000000010372f2	leaq	0x33fc7(%rip), %rax
00000000010372f9	movq	%rax, (%rsp)
00000000010372fd	movq	$0xc, 0x8(%rsp)
0000000001037306	callq	runtime.printstring
000000000103730b	callq	runtime.printunlock
0000000001037310	leaq	0x342fb(%rip), %rax
0000000001037317	movq	%rax, (%rsp)
000000000103731b	movq	$0xe, 0x8(%rsp)
0000000001037324	callq	runtime.throw
0000000001037329	ud2
000000000103732b	leaq	0x36719(%rip), %rax
0000000001037332	movq	%rax, (%rsp)
0000000001037336	movq	$0x22, 0x8(%rsp)
000000000103733f	callq	runtime.throw
0000000001037344	ud2
0000000001037346	leaq	0x3497b(%rip), %rax
000000000103734d	movq	%rax, (%rsp)
0000000001037351	movq	$0x13, 0x8(%rsp)
000000000103735a	callq	runtime.throw
000000000103735f	ud2
0000000001037361	movl	0x90(%rax), %ecx
0000000001037367	movl	%ecx, 0x24(%rsp)
000000000103736b	movq	0x98(%rax), %rdx
0000000001037372	movq	%rdx, 0x48(%rsp)
0000000001037377	callq	runtime.printlock
000000000103737c	leaq	0x33fe5(%rip), %rax
0000000001037383	movq	%rax, (%rsp)
0000000001037387	movq	$0xc, 0x8(%rsp)
0000000001037390	callq	runtime.printstring
0000000001037395	movq	0xd8(%rsp), %rax
000000000103739d	movq	%rax, (%rsp)
00000000010373a1	callq	runtime.printpointer
00000000010373a6	leaq	0x33930(%rip), %rax
00000000010373ad	movq	%rax, (%rsp)
00000000010373b1	movq	$0x7, 0x8(%rsp)
00000000010373ba	callq	runtime.printstring
00000000010373bf	movq	0x48(%rsp), %rax
00000000010373c4	movq	%rax, (%rsp)
00000000010373c8	callq	runtime.printint
00000000010373cd	leaq	0x34049(%rip), %rax
00000000010373d4	movq	%rax, (%rsp)
00000000010373d8	movq	$0xd, 0x8(%rsp)
00000000010373e1	callq	runtime.printstring
00000000010373e6	movl	0x24(%rsp), %eax
00000000010373ea	movl	%eax, %eax
00000000010373ec	movq	%rax, (%rsp)
00000000010373f0	callq	runtime.printhex
00000000010373f5	leaq	0x336a8(%rip), %rax
00000000010373fc	movq	%rax, (%rsp)
0000000001037400	movq	$0x2, 0x8(%rsp)
0000000001037409	callq	runtime.printstring
000000000103740e	callq	runtime.printunlock
0000000001037413	movq	0xd8(%rsp), %rax
000000000103741b	movq	(%rax), %rax
000000000103741e	movq	%rax, 0x88(%rsp)
0000000001037426	callq	runtime.printlock
000000000103742b	leaq	0x360fe(%rip), %rax
0000000001037432	movq	%rax, (%rsp)
0000000001037436	movq	$0x1f, 0x8(%rsp)
000000000103743f	callq	runtime.printstring
0000000001037444	movq	0x28(%rsp), %rax
0000000001037449	movq	%rax, (%rsp)
000000000103744d	callq	runtime.printhex
0000000001037452	leaq	0x33664(%rip), %rax
0000000001037459	movq	%rax, (%rsp)
000000000103745d	movq	$0x3, 0x8(%rsp)
0000000001037466	callq	runtime.printstring
000000000103746b	movq	0x88(%rsp), %rax
0000000001037473	movq	%rax, (%rsp)
0000000001037477	callq	runtime.printhex
000000000103747c	callq	runtime.printnl
0000000001037481	callq	runtime.printunlock
0000000001037486	leaq	0x35bec(%rip), %rax
000000000103748d	movq	%rax, (%rsp)
0000000001037491	movq	$0x1d, 0x8(%rsp)
000000000103749a	callq	runtime.throw
000000000103749f	ud2
00000000010374a1	leaq	0x35305(%rip), %rax
00000000010374a8	movq	%rax, (%rsp)
00000000010374ac	movq	$0x19, 0x8(%rsp)
00000000010374b5	callq	runtime.throw
00000000010374ba	ud2
00000000010374bc	movq	%rbx, 0x30(%rsp)
00000000010374c1	movq	%rax, 0x38(%rsp)
00000000010374c6	movq	%rcx, 0xa0(%rsp)
00000000010374ce	movq	(%rdx), %rsi
00000000010374d1	movq	%rsi, 0x88(%rsp)
00000000010374d9	movq	0x8(%rdx), %rdi
00000000010374dd	movq	%rdi, 0x80(%rsp)
00000000010374e5	movq	0x120(%rsp), %r8
00000000010374ed	movq	%r8, 0x78(%rsp)
00000000010374f2	movq	0x118(%rsp), %r9
00000000010374fa	movq	%r9, 0x70(%rsp)
00000000010374ff	movq	0x140(%rsp), %r10
0000000001037507	movq	%r10, 0x68(%rsp)
000000000103750c	movq	0x40(%rdx), %r11
0000000001037510	movq	%r11, 0x60(%rsp)
0000000001037515	movq	0x38(%rdx), %r12
0000000001037519	movq	%r12, 0x58(%rsp)
000000000103751e	movq	0x60(%rdx), %r13
0000000001037522	movq	%r13, 0x50(%rsp)
0000000001037527	movq	0x50(%rdx), %r14
000000000103752b	movq	%r14, 0xd0(%rsp)
0000000001037533	callq	runtime.printlock
0000000001037538	leaq	0x34b14(%rip), %rax
000000000103753f	movq	%rax, (%rsp)
0000000001037543	movq	$0x15, 0x8(%rsp)
000000000103754c	callq	runtime.printstring
0000000001037551	movq	0xa0(%rsp), %rax
0000000001037559	movq	%rax, (%rsp)
000000000103755d	movq	0x38(%rsp), %rax
0000000001037562	movq	%rax, 0x8(%rsp)
0000000001037567	callq	runtime.printstring
000000000103756c	leaq	0x33510(%rip), %rax
0000000001037573	movq	%rax, (%rsp)
0000000001037577	movq	$0x1, 0x8(%rsp)
0000000001037580	callq	runtime.printstring
0000000001037585	movq	0x30(%rsp), %rax
000000000103758a	movq	%rax, (%rsp)
000000000103758e	callq	runtime.printhex
0000000001037593	leaq	0x33579(%rip), %rax
000000000103759a	movq	%rax, (%rsp)
000000000103759e	movq	$0x4, 0x8(%rsp)
00000000010375a7	callq	runtime.printstring
00000000010375ac	movq	0x58(%rsp), %rax
00000000010375b1	movq	%rax, (%rsp)
00000000010375b5	callq	runtime.printhex
00000000010375ba	leaq	0x33870(%rip), %rax
00000000010375c1	movq	%rax, (%rsp)
00000000010375c5	movq	$0x8, 0x8(%rsp)
00000000010375ce	callq	runtime.printstring
00000000010375d3	movq	0x88(%rsp), %rax
00000000010375db	movq	%rax, (%rsp)
00000000010375df	callq	runtime.printhex
00000000010375e4	leaq	0x334b1(%rip), %rax
00000000010375eb	movq	%rax, (%rsp)
00000000010375ef	movq	$0x2, 0x8(%rsp)
00000000010375f8	callq	runtime.printstring
00000000010375fd	movq	0x80(%rsp), %rax
0000000001037605	movq	%rax, (%rsp)
0000000001037609	callq	runtime.printhex
000000000103760e	leaq	0x34052(%rip), %rax
0000000001037615	movq	%rax, (%rsp)
0000000001037619	movq	$0xf, 0x8(%rsp)
0000000001037622	callq	runtime.printstring
0000000001037627	movq	0x78(%rsp), %rax
000000000103762c	movq	%rax, (%rsp)
0000000001037630	callq	runtime.printhex
0000000001037635	leaq	0x334d3(%rip), %rax
000000000103763c	movq	%rax, (%rsp)
0000000001037640	movq	$0x4, 0x8(%rsp)
0000000001037649	callq	runtime.printstring
000000000103764e	movq	0x70(%rsp), %rax
0000000001037653	movq	%rax, (%rsp)
0000000001037657	callq	runtime.printhex
000000000103765c	leaq	0x334a0(%rip), %rax
0000000001037663	movq	%rax, (%rsp)
0000000001037667	movq	$0x4, 0x8(%rsp)
0000000001037670	callq	runtime.printstring
0000000001037675	movq	0x68(%rsp), %rax
000000000103767a	movq	%rax, (%rsp)
000000000103767e	callq	runtime.printhex
0000000001037683	leaq	0x33e63(%rip), %rax
000000000103768a	movq	%rax, (%rsp)
000000000103768e	movq	$0xd, 0x8(%rsp)
0000000001037697	callq	runtime.printstring
000000000103769c	movq	0x60(%rsp), %rax
00000000010376a1	movq	%rax, (%rsp)
00000000010376a5	callq	runtime.printhex
00000000010376aa	leaq	0x3345e(%rip), %rax
00000000010376b1	movq	%rax, (%rsp)
00000000010376b5	movq	$0x4, 0x8(%rsp)
00000000010376be	callq	runtime.printstring
00000000010376c3	movq	0x58(%rsp), %rax
00000000010376c8	movq	%rax, (%rsp)
00000000010376cc	callq	runtime.printhex
00000000010376d1	leaq	0x3342b(%rip), %rax
00000000010376d8	movq	%rax, (%rsp)
00000000010376dc	movq	$0x4, 0x8(%rsp)
00000000010376e5	callq	runtime.printstring
00000000010376ea	movq	0x50(%rsp), %rax
00000000010376ef	movq	%rax, (%rsp)
00000000010376f3	callq	runtime.printhex
00000000010376f8	leaq	0x33540(%rip), %rax
00000000010376ff	movq	%rax, (%rsp)
0000000001037703	movq	$0x6, 0x8(%rsp)
000000000103770c	callq	runtime.printstring
0000000001037711	movq	0xd0(%rsp), %rax
0000000001037719	movq	%rax, (%rsp)
000000000103771d	callq	runtime.printpointer
0000000001037722	leaq	0x33383(%rip), %rax
0000000001037729	movq	%rax, (%rsp)
000000000103772d	movq	$0x2, 0x8(%rsp)
0000000001037736	callq	runtime.printstring
000000000103773b	callq	runtime.printunlock
0000000001037740	movq	0x98(%rsp), %rax
0000000001037748	movq	0x30(%rax), %rax
000000000103774c	movb	$0x2, 0x125(%rax)
0000000001037753	movq	0x120(%rsp), %rax
000000000103775b	movq	%rax, (%rsp)
000000000103775f	movq	0x118(%rsp), %rax
0000000001037767	movq	%rax, 0x8(%rsp)
000000000103776c	movq	0x140(%rsp), %rax
0000000001037774	movq	%rax, 0x10(%rsp)
0000000001037779	movq	0xd8(%rsp), %rax
0000000001037781	movq	%rax, 0x18(%rsp)
0000000001037786	callq	runtime.traceback
000000000103778b	leaq	0x35edd(%rip), %rax
0000000001037792	movq	%rax, (%rsp)
0000000001037796	movq	$0x20, 0x8(%rsp)
000000000103779f	callq	runtime.throw
00000000010377a4	ud2
00000000010377a6	movq	%rcx, 0xc0(%rsp)
00000000010377ae	movq	%rbx, 0x40(%rsp)
00000000010377b3	movq	(%rcx), %rax
00000000010377b6	movq	%rax, 0xb8(%rsp)
00000000010377be	movq	0x50(%rcx), %rdx
00000000010377c2	movq	%rdx, 0xb0(%rsp)
00000000010377ca	callq	runtime.printlock
00000000010377cf	leaq	0x35e79(%rip), %rax
00000000010377d6	movq	%rax, (%rsp)
00000000010377da	movq	$0x20, 0x8(%rsp)
00000000010377e3	callq	runtime.printstring
00000000010377e8	movq	0x40(%rsp), %rax
00000000010377ed	movq	%rax, (%rsp)
00000000010377f1	callq	runtime.printhex
00000000010377f6	leaq	0x33336(%rip), %rax
00000000010377fd	movq	%rax, (%rsp)
0000000001037801	movq	$0x4, 0x8(%rsp)
000000000103780a	callq	runtime.printstring
000000000103780f	movq	0xc0(%rsp), %rax
0000000001037817	movq	%rax, (%rsp)
000000000103781b	callq	runtime.printpointer
0000000001037820	leaq	0x336b1(%rip), %rax
0000000001037827	movq	%rax, (%rsp)
000000000103782b	movq	$0x9, 0x8(%rsp)
0000000001037834	callq	runtime.printstring
0000000001037839	movq	0xd8(%rsp), %rax
0000000001037841	movq	%rax, (%rsp)
0000000001037845	callq	runtime.printpointer
000000000103784a	leaq	0x33477(%rip), %rax
0000000001037851	movq	%rax, (%rsp)
0000000001037855	movq	$0x7, 0x8(%rsp)
000000000103785e	callq	runtime.printstring
0000000001037863	movq	0xb8(%rsp), %rax
000000000103786b	movq	%rax, (%rsp)
000000000103786f	callq	runtime.printpointer
0000000001037874	leaq	0x339b5(%rip), %rax
000000000103787b	movq	%rax, (%rsp)
000000000103787f	movq	$0xc, 0x8(%rsp)
0000000001037888	callq	runtime.printstring
000000000103788d	movq	0xb0(%rsp), %rax
0000000001037895	movq	%rax, (%rsp)
0000000001037899	callq	runtime.printpointer
000000000103789e	callq	runtime.printnl
00000000010378a3	callq	runtime.printunlock
00000000010378a8	movq	0x98(%rsp), %rax
00000000010378b0	movq	0x30(%rax), %rcx
00000000010378b4	testb	%al, (%rax)
00000000010378b6	movq	0x8(%rcx), %rax
00000000010378ba	movq	%rax, 0x150(%rsp)
00000000010378c2	movups	0x10(%rcx), %xmm0
00000000010378c6	movups	%xmm0, 0x158(%rsp)
00000000010378ce	movups	0x20(%rcx), %xmm0
00000000010378d2	movups	%xmm0, 0x168(%rsp)
00000000010378da	movups	0x30(%rcx), %xmm0
00000000010378de	movups	%xmm0, 0x178(%rsp)
00000000010378e6	movq	0x158(%rsp), %rax
00000000010378ee	movq	0x160(%rsp), %rcx
00000000010378f6	movq	%rax, (%rsp)
00000000010378fa	movq	0x150(%rsp), %rax
0000000001037902	movq	%rax, 0x8(%rsp)
0000000001037907	movq	0x178(%rsp), %rax
000000000103790f	movq	%rax, 0x10(%rsp)
0000000001037914	movq	%rcx, 0x18(%rsp)
0000000001037919	callq	runtime.traceback
000000000103791e	leaq	0x363c3(%rip), %rax
0000000001037925	movq	%rax, (%rsp)
0000000001037929	movq	$0x24, 0x8(%rsp)
0000000001037932	callq	runtime.throw
0000000001037937	ud2
0000000001037939	leaq	0x34bf6(%rip), %rax
0000000001037940	movq	%rax, (%rsp)
0000000001037944	movq	$0x17, 0x8(%rsp)
000000000103794d	callq	runtime.throw
0000000001037952	ud2
0000000001037954	callq	runtime.morestack_noctxt
0000000001037959	jmp	runtime.newstack
000000000103795e	int3
000000000103795f	int3
runtime.shrinkstack:
0000000001037960	movq	%gs:0x30, %rcx
0000000001037969	cmpq	0x10(%rcx), %rsp
000000000103796d	jbe	0x1037acd
0000000001037973	subq	$0x20, %rsp
0000000001037977	movq	%rbp, 0x18(%rsp)
000000000103797c	leaq	0x18(%rsp), %rbp
0000000001037981	movq	0x28(%rsp), %rax
0000000001037986	movl	0x90(%rax), %ecx
000000000103798c	movl	%ecx, %edx
000000000103798e	btrl	$0xc, %ecx
0000000001037992	cmpl	$0x6, %ecx
0000000001037995	jne	0x10379c8
0000000001037997	movq	(%rax), %rcx
000000000103799a	testq	%rcx, %rcx
000000000103799d	jne	0x10379a9
000000000103799f	movq	0x18(%rsp), %rbp
00000000010379a4	addq	$0x20, %rsp
00000000010379a8	retq
00000000010379a9	movq	0x8(%rax), %rdx
00000000010379ad	movq	%rcx, (%rsp)
00000000010379b1	movq	%rdx, 0x8(%rsp)
00000000010379b6	callq	runtime.stackfree
00000000010379bb	xorps	%xmm0, %xmm0
00000000010379be	movq	0x28(%rsp), %rax
00000000010379c3	movups	%xmm0, (%rax)
00000000010379c6	jmp	0x103799f
00000000010379c8	cmpq	$0x0, (%rax)
00000000010379cc	je	0x1037ab2
00000000010379d2	btl	$0xc, %edx
00000000010379d6	jae	0x1037a97
00000000010379dc	cmpl	$0x0, 0x9d351(%rip)
00000000010379e3	jg	0x1037a8d
00000000010379e9	movq	0x128(%rax), %rcx
00000000010379f0	movq	%rcx, (%rsp)
00000000010379f4	callq	runtime.findfunc
00000000010379f9	movq	0x8(%rsp), %rax
00000000010379fe	testq	%rax, %rax
0000000001037a01	je	0x1037a09
0000000001037a03	cmpl	$0xb, 0x10(%rax)
0000000001037a07	je	0x1037a83
0000000001037a09	movq	0x28(%rsp), %rax
0000000001037a0e	movq	0x8(%rax), %rcx
0000000001037a12	movq	(%rax), %rdx
0000000001037a15	movq	%rcx, %rbx
0000000001037a18	subq	%rdx, %rcx
0000000001037a1b	movq	%rcx, %rdx
0000000001037a1e	shrq	%rcx
0000000001037a21	cmpq	$0x800, %rcx
0000000001037a28	jb	0x1037a79
0000000001037a2a	movq	0x38(%rax), %rsi
0000000001037a2e	subq	%rsi, %rbx
0000000001037a31	addq	$0x2f0, %rbx
0000000001037a38	shrq	$0x2, %rdx
0000000001037a3c	cmpq	%rdx, %rbx
0000000001037a3f	jae	0x1037a6f
0000000001037a41	cmpq	$0x0, 0x70(%rax)
0000000001037a46	je	0x1037a52
0000000001037a48	movq	0x18(%rsp), %rbp
0000000001037a4d	addq	$0x20, %rsp
0000000001037a51	retq
0000000001037a52	movq	%rax, (%rsp)
0000000001037a56	movq	%rcx, 0x8(%rsp)
0000000001037a5b	movb	$0x0, 0x10(%rsp)
0000000001037a60	callq	runtime.copystack
0000000001037a65	movq	0x18(%rsp), %rbp
0000000001037a6a	addq	$0x20, %rsp
0000000001037a6e	retq
0000000001037a6f	movq	0x18(%rsp), %rbp
0000000001037a74	addq	$0x20, %rsp
0000000001037a78	retq
0000000001037a79	movq	0x18(%rsp), %rbp
0000000001037a7e	addq	$0x20, %rsp
0000000001037a82	retq
0000000001037a83	movq	0x18(%rsp), %rbp
0000000001037a88	addq	$0x20, %rsp
0000000001037a8c	retq
0000000001037a8d	movq	0x18(%rsp), %rbp
0000000001037a92	addq	$0x20, %rsp
0000000001037a96	retq
0000000001037a97	leaq	0x34c92(%rip), %rax
0000000001037a9e	movq	%rax, (%rsp)
0000000001037aa2	movq	$0x19, 0x8(%rsp)
0000000001037aab	callq	runtime.throw
0000000001037ab0	ud2
0000000001037ab2	leaq	0x353be(%rip), %rax
0000000001037ab9	movq	%rax, (%rsp)
0000000001037abd	movq	$0x1c, 0x8(%rsp)
0000000001037ac6	callq	runtime.throw
0000000001037acb	ud2
0000000001037acd	callq	runtime.morestack_noctxt
0000000001037ad2	jmp	runtime.shrinkstack
0000000001037ad7	int3
0000000001037ad8	int3
0000000001037ad9	int3
0000000001037ada	int3
0000000001037adb	int3
0000000001037adc	int3
0000000001037add	int3
0000000001037ade	int3
0000000001037adf	int3
runtime.freeStackSpans:
0000000001037ae0	movq	%gs:0x30, %rcx
0000000001037ae9	cmpq	0x10(%rcx), %rsp
0000000001037aed	jbe	0x1037c72
0000000001037af3	subq	$0x60, %rsp
0000000001037af7	movq	%rbp, 0x58(%rsp)
0000000001037afc	leaq	0x58(%rsp), %rbp
0000000001037b01	leaq	runtime.stackpoolmu(%rip), %rax
0000000001037b08	movq	%rax, (%rsp)
0000000001037b0c	callq	runtime.lock
0000000001037b11	xorl	%eax, %eax
0000000001037b13	jmp	0x1037b89
0000000001037b15	movq	%rsi, %rax
0000000001037b18	testq	%rax, %rax
0000000001037b1b	je	0x1037b85
0000000001037b1d	movq	(%rax), %rsi
0000000001037b20	cmpw	$0x0, 0x60(%rax)
0000000001037b25	jne	0x1037b15
0000000001037b27	movq	%rax, 0x28(%rsp)
0000000001037b2c	movq	%rsi, 0x38(%rsp)
0000000001037b31	movq	%rbx, (%rsp)
0000000001037b35	movq	%rax, 0x8(%rsp)
0000000001037b3a	callq	"runtime.(*mSpanList).remove"
0000000001037b3f	movq	0x28(%rsp), %rax
0000000001037b44	movq	$0x0, 0x28(%rax)
0000000001037b4c	leaq	runtime.mheap_(%rip), %rcx
0000000001037b53	movq	%rcx, (%rsp)
0000000001037b57	movq	%rax, 0x8(%rsp)
0000000001037b5c	leaq	0x9dd7d(%rip), %rax
0000000001037b63	movq	%rax, 0x10(%rsp)
0000000001037b68	callq	"runtime.(*mheap).freeManual"
0000000001037b6d	movq	0x18(%rsp), %rcx
0000000001037b72	leaq	runtime.stackpool(%rip), %rdx
0000000001037b79	movq	0x48(%rsp), %rbx
0000000001037b7e	movq	0x38(%rsp), %rsi
0000000001037b83	jmp	0x1037b15
0000000001037b85	leaq	0x1(%rcx), %rax
0000000001037b89	cmpq	$0x4, %rax
0000000001037b8d	jge	0x1037bb4
0000000001037b8f	movq	%rax, 0x18(%rsp)
0000000001037b94	movq	%rax, %rcx
0000000001037b97	shlq	$0x4, %rax
0000000001037b9b	leaq	runtime.stackpool(%rip), %rdx
0000000001037ba2	leaq	(%rdx,%rax), %rbx
0000000001037ba6	movq	%rbx, 0x48(%rsp)
0000000001037bab	movq	(%rdx,%rax), %rax
0000000001037baf	jmp	0x1037b18
0000000001037bb4	leaq	runtime.stackpoolmu(%rip), %rax
0000000001037bbb	movq	%rax, (%rsp)
0000000001037bbf	callq	runtime.unlock
0000000001037bc4	leaq	runtime.stackLarge(%rip), %rax
0000000001037bcb	movq	%rax, (%rsp)
0000000001037bcf	callq	runtime.lock
0000000001037bd4	xorl	%eax, %eax
0000000001037bd6	jmp	0x1037c31
0000000001037bd8	movq	%rbx, 0x30(%rsp)
0000000001037bdd	movq	(%rbx), %rcx
0000000001037be0	movq	%rcx, 0x40(%rsp)
0000000001037be5	movq	%rax, (%rsp)
0000000001037be9	movq	%rbx, 0x8(%rsp)
0000000001037bee	callq	"runtime.(*mSpanList).remove"
0000000001037bf3	leaq	runtime.mheap_(%rip), %rax
0000000001037bfa	movq	%rax, (%rsp)
0000000001037bfe	movq	0x30(%rsp), %rcx
0000000001037c03	movq	%rcx, 0x8(%rsp)
0000000001037c08	leaq	0x9dcd1(%rip), %rcx
0000000001037c0f	movq	%rcx, 0x10(%rsp)
0000000001037c14	callq	"runtime.(*mheap).freeManual"
0000000001037c19	movq	0x50(%rsp), %rax
0000000001037c1e	movq	0x20(%rsp), %rcx
0000000001037c23	movq	0x40(%rsp), %rbx
0000000001037c28	testq	%rbx, %rbx
0000000001037c2b	jne	0x1037bd8
0000000001037c2d	leaq	0x1(%rcx), %rax
0000000001037c31	cmpq	$0x23, %rax
0000000001037c35	jge	0x1037c58
0000000001037c37	movq	%rax, 0x20(%rsp)
0000000001037c3c	movq	%rax, %rcx
0000000001037c3f	shlq	$0x4, %rax
0000000001037c43	leaq	0x812de(%rip), %rdx
0000000001037c4a	movq	(%rdx,%rax), %rbx
0000000001037c4e	addq	%rdx, %rax
0000000001037c51	movq	%rax, 0x50(%rsp)
0000000001037c56	jmp	0x1037c28
0000000001037c58	leaq	runtime.stackLarge(%rip), %rax
0000000001037c5f	movq	%rax, (%rsp)
0000000001037c63	callq	runtime.unlock
0000000001037c68	movq	0x58(%rsp), %rbp
0000000001037c6d	addq	$0x60, %rsp
0000000001037c71	retq
0000000001037c72	callq	runtime.morestack_noctxt
0000000001037c77	jmp	runtime.freeStackSpans
0000000001037c7c	int3
0000000001037c7d	int3
0000000001037c7e	int3
0000000001037c7f	int3
runtime.getStackMap:
0000000001037c80	movq	%gs:0x30, %rcx
0000000001037c89	leaq	-0x38(%rsp), %rax
0000000001037c8e	cmpq	0x10(%rcx), %rax
0000000001037c92	jbe	0x103847f
0000000001037c98	subq	$0xb8, %rsp
0000000001037c9f	movq	%rbp, 0xb0(%rsp)
0000000001037ca7	leaq	0xb0(%rsp), %rbp
0000000001037caf	movq	0xc0(%rsp), %rax
0000000001037cb7	movq	0x18(%rax), %rcx
0000000001037cbb	testq	%rcx, %rcx
0000000001037cbe	je	0x1037fa2
0000000001037cc4	movq	(%rax), %rdx
0000000001037cc7	movq	%rdx, 0xa8(%rsp)
0000000001037ccf	movq	0x8(%rax), %rbx
0000000001037cd3	movq	%rbx, 0xa0(%rsp)
0000000001037cdb	movq	(%rdx), %rsi
0000000001037cde	cmpq	%rcx, %rsi
0000000001037ce1	jne	0x1037f4b
0000000001037ce7	movl	$0xffffffff, %esi
0000000001037cec	movq	%rcx, 0x40(%rsp)
0000000001037cf1	movq	0x38(%rax), %rdi
0000000001037cf5	subq	0x28(%rax), %rdi
0000000001037cf9	cmpl	$-0x1, %esi
0000000001037cfc	movl	$0x0, %r8d
0000000001037d02	cmovel	%r8d, %esi
0000000001037d06	movl	%esi, 0x38(%rsp)
0000000001037d0a	testq	%rdi, %rdi
0000000001037d0d	jbe	0x1037f42
0000000001037d13	movq	%rdi, 0x48(%rsp)
0000000001037d18	cmpl	$0x11, 0x10(%rdx)
0000000001037d1c	je	0x1037e83
0000000001037d22	movq	%rdx, (%rsp)
0000000001037d26	movq	%rbx, 0x8(%rsp)
0000000001037d2b	movl	$0x1, 0x10(%rsp)
0000000001037d33	callq	runtime.funcdata
0000000001037d38	movq	0x18(%rsp), %rax
0000000001037d3d	movl	0x38(%rsp), %ecx
0000000001037d41	testq	%rax, %rax
0000000001037d44	je	0x1038334
0000000001037d4a	movl	(%rax), %edx
0000000001037d4c	testl	%edx, %edx
0000000001037d4e	jle	0x1038334
0000000001037d54	movl	0x4(%rax), %ebx
0000000001037d57	testl	%ebx, %ebx
0000000001037d59	jle	0x1037e7a
0000000001037d5f	movq	%rax, 0x78(%rsp)
0000000001037d64	movl	%ecx, 0x34(%rsp)
0000000001037d68	testl	%ecx, %ecx
0000000001037d6a	jl	0x1038209
0000000001037d70	cmpl	%edx, %ecx
0000000001037d72	jge	0x1038209
0000000001037d78	leal	0x7(%rbx), %edx
0000000001037d7b	sarl	$0x3, %edx
0000000001037d7e	imull	%edx, %ecx
0000000001037d81	movslq	%ecx, %rcx
0000000001037d84	leaq	0x8(%rax,%rcx), %rax
0000000001037d89	movq	0xc0(%rsp), %rcx
0000000001037d91	cmpq	$0x0, 0x48(%rcx)
0000000001037d96	jbe	0x1037e71
0000000001037d9c	movq	0x50(%rcx), %rdx
0000000001037da0	testq	%rdx, %rdx
0000000001037da3	je	0x1037dd9
0000000001037da5	movl	(%rdx), %ecx
0000000001037da7	movq	0x8(%rdx), %rdx
0000000001037dab	movl	%ebx, 0xd8(%rsp)
0000000001037db2	movq	%rax, 0xe0(%rsp)
0000000001037dba	movl	%ecx, 0xe8(%rsp)
0000000001037dc1	movq	%rdx, 0xf0(%rsp)
0000000001037dc9	movq	0xb0(%rsp), %rbp
0000000001037dd1	addq	$0xb8, %rsp
0000000001037dd8	retq
0000000001037dd9	movq	%rax, 0x98(%rsp)
0000000001037de1	movl	%ebx, 0x3c(%rsp)
0000000001037de5	movq	0xa8(%rsp), %rax
0000000001037ded	movq	%rax, (%rsp)
0000000001037df1	movq	0xa0(%rsp), %rcx
0000000001037df9	movq	%rcx, 0x8(%rsp)
0000000001037dfe	movl	$0x0, 0x10(%rsp)
0000000001037e06	callq	runtime.funcdata
0000000001037e0b	movq	0x18(%rsp), %rax
0000000001037e10	testq	%rax, %rax
0000000001037e13	je	0x103810e
0000000001037e19	movl	(%rax), %ecx
0000000001037e1b	testl	%ecx, %ecx
0000000001037e1d	jle	0x103810e
0000000001037e23	movq	%rax, 0x90(%rsp)
0000000001037e2b	movl	0x38(%rsp), %edx
0000000001037e2f	testl	%edx, %edx
0000000001037e31	jl	0x1037fe0
0000000001037e37	cmpl	%ecx, %edx
0000000001037e39	jge	0x1037fe0
0000000001037e3f	movl	0x4(%rax), %ecx
0000000001037e42	testl	%ecx, %ecx
0000000001037e44	jle	0x1037e6b
0000000001037e46	leal	0x7(%rcx), %ebx
0000000001037e49	sarl	$0x3, %ebx
0000000001037e4c	imull	%edx, %ebx
0000000001037e4f	movslq	%ebx, %rdx
0000000001037e52	leaq	0x8(%rax,%rdx), %rax
0000000001037e57	movl	0x3c(%rsp), %ebx
0000000001037e5b	movq	%rax, %rdx
0000000001037e5e	movq	0x98(%rsp), %rax
0000000001037e66	jmp	0x1037dab
0000000001037e6b	xorl	%eax, %eax
0000000001037e6d	xorl	%ecx, %ecx
0000000001037e6f	jmp	0x1037e57
0000000001037e71	xorl	%edx, %edx
0000000001037e73	xorl	%ecx, %ecx
0000000001037e75	jmp	0x1037dab
0000000001037e7a	xorl	%eax, %eax
0000000001037e7c	xorl	%ebx, %ebx
0000000001037e7e	jmp	0x1037d89
0000000001037e83	movq	0x20(%rax), %rcx
0000000001037e87	movq	%rcx, 0x50(%rsp)
0000000001037e8c	movq	%rcx, (%rsp)
0000000001037e90	callq	runtime.findfunc
0000000001037e95	movq	0x10(%rsp), %rax
0000000001037e9a	movq	0x8(%rsp), %rcx
0000000001037e9f	testq	%rcx, %rcx
0000000001037ea2	je	0x103842e
0000000001037ea8	movq	(%rcx), %rdx
0000000001037eab	movq	0x50(%rsp), %rbx
0000000001037eb0	cmpq	%rbx, %rdx
0000000001037eb3	jne	0x1037eed
0000000001037eb5	movl	$0xffffffff, %edx
0000000001037eba	movl	%edx, 0x30(%rsp)
0000000001037ebe	movq	%rcx, (%rsp)
0000000001037ec2	movq	%rax, 0x8(%rsp)
0000000001037ec7	movl	$0x3, 0x10(%rsp)
0000000001037ecf	callq	runtime.funcdata
0000000001037ed4	movq	0x18(%rsp), %rax
0000000001037ed9	movl	0x30(%rsp), %ecx
0000000001037edd	cmpl	$-0x1, %ecx
0000000001037ee0	movl	$0x0, %edx
0000000001037ee5	cmovel	%edx, %ecx
0000000001037ee8	jmp	0x1037d41
0000000001037eed	movq	%rax, 0x88(%rsp)
0000000001037ef5	movq	%rcx, 0x80(%rsp)
0000000001037efd	movq	%rcx, (%rsp)
0000000001037f01	movq	%rax, 0x8(%rsp)
0000000001037f06	movl	$0x2, 0x10(%rsp)
0000000001037f0e	leaq	-0x1(%rbx), %rdx
0000000001037f12	movq	%rdx, 0x18(%rsp)
0000000001037f17	movq	0xc8(%rsp), %rdx
0000000001037f1f	movq	%rdx, 0x20(%rsp)
0000000001037f24	callq	runtime.pcdatavalue
0000000001037f29	movl	0x28(%rsp), %edx
0000000001037f2d	movq	0x88(%rsp), %rax
0000000001037f35	movq	0x80(%rsp), %rcx
0000000001037f3d	jmp	0x1037eba
0000000001037f42	xorl	%eax, %eax
0000000001037f44	xorl	%ebx, %ebx
0000000001037f46	jmp	0x1037d89
0000000001037f4b	movq	%rdx, (%rsp)
0000000001037f4f	movq	%rbx, 0x8(%rsp)
0000000001037f54	movl	$0x0, 0x10(%rsp)
0000000001037f5c	leaq	-0x1(%rcx), %rax
0000000001037f60	movq	%rax, 0x40(%rsp)
0000000001037f65	movq	%rax, 0x18(%rsp)
0000000001037f6a	movq	0xc8(%rsp), %rcx
0000000001037f72	movq	%rcx, 0x20(%rsp)
0000000001037f77	callq	runtime.pcdatavalue
0000000001037f7c	movl	0x28(%rsp), %esi
0000000001037f80	movq	0xc0(%rsp), %rax
0000000001037f88	movq	0xa8(%rsp), %rdx
0000000001037f90	movq	0xa0(%rsp), %rbx
0000000001037f98	movq	0x40(%rsp), %rcx
0000000001037f9d	jmp	0x1037cec
0000000001037fa2	movl	$0x0, 0xd8(%rsp)
0000000001037fad	movq	$0x0, 0xe0(%rsp)
0000000001037fb9	movl	$0x0, 0xe8(%rsp)
0000000001037fc4	movq	$0x0, 0xf0(%rsp)
0000000001037fd0	movq	0xb0(%rsp), %rbp
0000000001037fd8	addq	$0xb8, %rsp
0000000001037fdf	retq
0000000001037fe0	movq	0xa8(%rsp), %rax
0000000001037fe8	movq	%rax, (%rsp)
0000000001037fec	movq	0xa0(%rsp), %rax
0000000001037ff4	movq	%rax, 0x8(%rsp)
0000000001037ff9	callq	runtime.funcname
0000000001037ffe	movq	0x90(%rsp), %rax
0000000001038006	movslq	(%rax), %rax
0000000001038009	movq	%rax, 0x70(%rsp)
000000000103800e	movq	0x18(%rsp), %rcx
0000000001038013	movq	%rcx, 0x68(%rsp)
0000000001038018	movq	0x10(%rsp), %rdx
000000000103801d	movq	%rdx, 0x98(%rsp)
0000000001038025	callq	runtime.printlock
000000000103802a	leaq	0x33c84(%rip), %rax
0000000001038031	movq	%rax, (%rsp)
0000000001038035	movq	$0x13, 0x8(%rsp)
000000000103803e	callq	runtime.printstring
0000000001038043	movl	0x38(%rsp), %eax
0000000001038047	movslq	%eax, %rax
000000000103804a	movq	%rax, (%rsp)
000000000103804e	callq	runtime.printint
0000000001038053	leaq	0x32b4b(%rip), %rax
000000000103805a	movq	%rax, (%rsp)
000000000103805e	movq	$0x5, 0x8(%rsp)
0000000001038067	callq	runtime.printstring
000000000103806c	movq	0x70(%rsp), %rax
0000000001038071	movq	%rax, (%rsp)
0000000001038075	callq	runtime.printint
000000000103807a	leaq	0x34c1a(%rip), %rax
0000000001038081	movq	%rax, (%rsp)
0000000001038085	movq	$0x1c, 0x8(%rsp)
000000000103808e	callq	runtime.printstring
0000000001038093	movq	0x98(%rsp), %rax
000000000103809b	movq	%rax, (%rsp)
000000000103809f	movq	0x68(%rsp), %rax
00000000010380a4	movq	%rax, 0x8(%rsp)
00000000010380a9	callq	runtime.printstring
00000000010380ae	leaq	0x3300c(%rip), %rax
00000000010380b5	movq	%rax, (%rsp)
00000000010380b9	movq	$0xb, 0x8(%rsp)
00000000010380c2	callq	runtime.printstring
00000000010380c7	movq	0x40(%rsp), %rax
00000000010380cc	movq	%rax, (%rsp)
00000000010380d0	callq	runtime.printhex
00000000010380d5	leaq	0x329be(%rip), %rax
00000000010380dc	movq	%rax, (%rsp)
00000000010380e0	movq	$0x2, 0x8(%rsp)
00000000010380e9	callq	runtime.printstring
00000000010380ee	callq	runtime.printunlock
00000000010380f3	leaq	0x336e0(%rip), %rax
00000000010380fa	movq	%rax, (%rsp)
00000000010380fe	movq	$0x10, 0x8(%rsp)
0000000001038107	callq	runtime.throw
000000000103810c	ud2
000000000103810e	movq	0xa8(%rsp), %rax
0000000001038116	movq	%rax, (%rsp)
000000000103811a	movq	0xa0(%rsp), %rax
0000000001038122	movq	%rax, 0x8(%rsp)
0000000001038127	callq	runtime.funcname
000000000103812c	movq	0x18(%rsp), %rax
0000000001038131	movq	%rax, 0x68(%rsp)
0000000001038136	movq	0x10(%rsp), %rcx
000000000103813b	movq	%rcx, 0x98(%rsp)
0000000001038143	movq	0xc0(%rsp), %rdx
000000000103814b	movq	0x40(%rdx), %rbx
000000000103814f	movq	%rbx, 0x60(%rsp)
0000000001038154	movq	0x48(%rdx), %rdx
0000000001038158	movq	%rdx, 0x58(%rsp)
000000000103815d	callq	runtime.printlock
0000000001038162	leaq	0x33585(%rip), %rax
0000000001038169	movq	%rax, (%rsp)
000000000103816d	movq	$0xf, 0x8(%rsp)
0000000001038176	callq	runtime.printstring
000000000103817b	movq	0x98(%rsp), %rax
0000000001038183	movq	%rax, (%rsp)
0000000001038187	movq	0x68(%rsp), %rax
000000000103818c	movq	%rax, 0x8(%rsp)
0000000001038191	callq	runtime.printstring
0000000001038196	leaq	0x33395(%rip), %rax
000000000103819d	movq	%rax, (%rsp)
00000000010381a1	movq	$0xe, 0x8(%rsp)
00000000010381aa	callq	runtime.printstring
00000000010381af	movq	0x60(%rsp), %rax
00000000010381b4	movq	%rax, (%rsp)
00000000010381b8	callq	runtime.printhex
00000000010381bd	leaq	0x328bf(%rip), %rax
00000000010381c4	movq	%rax, (%rsp)
00000000010381c8	movq	$0x1, 0x8(%rsp)
00000000010381d1	callq	runtime.printstring
00000000010381d6	movq	0x58(%rsp), %rax
00000000010381db	movq	%rax, (%rsp)
00000000010381df	callq	runtime.printhex
00000000010381e4	callq	runtime.printnl
00000000010381e9	callq	runtime.printunlock
00000000010381ee	leaq	0x33645(%rip), %rax
00000000010381f5	movq	%rax, (%rsp)
00000000010381f9	movq	$0x10, 0x8(%rsp)
0000000001038202	callq	runtime.throw
0000000001038207	ud2
0000000001038209	movq	0xa8(%rsp), %rax
0000000001038211	movq	%rax, (%rsp)
0000000001038215	movq	0xa0(%rsp), %rax
000000000103821d	movq	%rax, 0x8(%rsp)
0000000001038222	callq	runtime.funcname
0000000001038227	movq	0x78(%rsp), %rax
000000000103822c	movslq	(%rax), %rax
000000000103822f	movq	%rax, 0x70(%rsp)
0000000001038234	movq	0x18(%rsp), %rcx
0000000001038239	movq	%rcx, 0x68(%rsp)
000000000103823e	movq	0x10(%rsp), %rdx
0000000001038243	movq	%rdx, 0x98(%rsp)
000000000103824b	callq	runtime.printlock
0000000001038250	leaq	0x33a5e(%rip), %rax
0000000001038257	movq	%rax, (%rsp)
000000000103825b	movq	$0x13, 0x8(%rsp)
0000000001038264	callq	runtime.printstring
0000000001038269	movl	0x34(%rsp), %eax
000000000103826d	movslq	%eax, %rax
0000000001038270	movq	%rax, (%rsp)
0000000001038274	callq	runtime.printint
0000000001038279	leaq	0x32925(%rip), %rax
0000000001038280	movq	%rax, (%rsp)
0000000001038284	movq	$0x5, 0x8(%rsp)
000000000103828d	callq	runtime.printstring
0000000001038292	movq	0x70(%rsp), %rax
0000000001038297	movq	%rax, (%rsp)
000000000103829b	callq	runtime.printint
00000000010382a0	leaq	0x34ebb(%rip), %rax
00000000010382a7	movq	%rax, (%rsp)
00000000010382ab	movq	$0x1e, 0x8(%rsp)
00000000010382b4	callq	runtime.printstring
00000000010382b9	movq	0x98(%rsp), %rax
00000000010382c1	movq	%rax, (%rsp)
00000000010382c5	movq	0x68(%rsp), %rax
00000000010382ca	movq	%rax, 0x8(%rsp)
00000000010382cf	callq	runtime.printstring
00000000010382d4	leaq	0x32de6(%rip), %rax
00000000010382db	movq	%rax, (%rsp)
00000000010382df	movq	$0xb, 0x8(%rsp)
00000000010382e8	callq	runtime.printstring
00000000010382ed	movq	0x40(%rsp), %rax
00000000010382f2	movq	%rax, (%rsp)
00000000010382f6	callq	runtime.printhex
00000000010382fb	leaq	0x32798(%rip), %rax
0000000001038302	movq	%rax, (%rsp)
0000000001038306	movq	$0x2, 0x8(%rsp)
000000000103830f	callq	runtime.printstring
0000000001038314	callq	runtime.printunlock
0000000001038319	leaq	0x334ba(%rip), %rax
0000000001038320	movq	%rax, (%rsp)
0000000001038324	movq	$0x10, 0x8(%rsp)
000000000103832d	callq	runtime.throw
0000000001038332	ud2
0000000001038334	movq	0xa8(%rsp), %rax
000000000103833c	movq	%rax, (%rsp)
0000000001038340	movq	0xa0(%rsp), %rax
0000000001038348	movq	%rax, 0x8(%rsp)
000000000103834d	callq	runtime.funcname
0000000001038352	movq	0x10(%rsp), %rax
0000000001038357	movq	%rax, 0x98(%rsp)
000000000103835f	movq	0x18(%rsp), %rcx
0000000001038364	movq	%rcx, 0x68(%rsp)
0000000001038369	movq	0xc0(%rsp), %rdx
0000000001038371	movq	0x38(%rdx), %rdx
0000000001038375	movq	%rdx, 0x60(%rsp)
000000000103837a	callq	runtime.printlock
000000000103837f	leaq	0x33368(%rip), %rax
0000000001038386	movq	%rax, (%rsp)
000000000103838a	movq	$0xf, 0x8(%rsp)
0000000001038393	callq	runtime.printstring
0000000001038398	movq	0x98(%rsp), %rax
00000000010383a0	movq	%rax, (%rsp)
00000000010383a4	movq	0x68(%rsp), %rax
00000000010383a9	movq	%rax, 0x8(%rsp)
00000000010383ae	callq	runtime.printstring
00000000010383b3	leaq	0x33390(%rip), %rax
00000000010383ba	movq	%rax, (%rsp)
00000000010383be	movq	$0x10, 0x8(%rsp)
00000000010383c7	callq	runtime.printstring
00000000010383cc	movq	0x60(%rsp), %rax
00000000010383d1	movq	0x48(%rsp), %rcx
00000000010383d6	subq	%rcx, %rax
00000000010383d9	movq	%rax, (%rsp)
00000000010383dd	callq	runtime.printhex
00000000010383e2	leaq	0x3269a(%rip), %rax
00000000010383e9	movq	%rax, (%rsp)
00000000010383ed	movq	$0x1, 0x8(%rsp)
00000000010383f6	callq	runtime.printstring
00000000010383fb	movq	0x48(%rsp), %rax
0000000001038400	movq	%rax, (%rsp)
0000000001038404	callq	runtime.printhex
0000000001038409	callq	runtime.printnl
000000000103840e	callq	runtime.printunlock
0000000001038413	leaq	0x33420(%rip), %rax
000000000103841a	movq	%rax, (%rsp)
000000000103841e	movq	$0x10, 0x8(%rsp)
0000000001038427	callq	runtime.throw
000000000103842c	ud2
000000000103842e	callq	runtime.printlock
0000000001038433	leaq	0x3615c(%rip), %rax
000000000103843a	movq	%rax, (%rsp)
000000000103843e	movq	$0x2e, 0x8(%rsp)
0000000001038447	callq	runtime.printstring
000000000103844c	movq	0x50(%rsp), %rax
0000000001038451	movq	%rax, (%rsp)
0000000001038455	callq	runtime.printhex
000000000103845a	callq	runtime.printnl
000000000103845f	callq	runtime.printunlock
0000000001038464	leaq	0x3321a(%rip), %rax
000000000103846b	movq	%rax, (%rsp)
000000000103846f	movq	$0xf, 0x8(%rsp)
0000000001038478	callq	runtime.throw
000000000103847d	ud2
000000000103847f	callq	runtime.morestack_noctxt
0000000001038484	jmp	runtime.getStackMap
0000000001038489	int3
000000000103848a	int3
000000000103848b	int3
000000000103848c	int3
000000000103848d	int3
000000000103848e	int3
000000000103848f	int3
runtime.morestackc:
0000000001038490	subq	$0x18, %rsp
0000000001038494	movq	%rbp, 0x10(%rsp)
0000000001038499	leaq	0x10(%rsp), %rbp
000000000103849e	leaq	0x36389(%rip), %rax
00000000010384a5	movq	%rax, (%rsp)
00000000010384a9	movq	$0x32, 0x8(%rsp)
00000000010384b2	callq	runtime.throw
00000000010384b7	ud2
00000000010384b9	int3
00000000010384ba	int3
00000000010384bb	int3
00000000010384bc	int3
00000000010384bd	int3
00000000010384be	int3
00000000010384bf	int3
runtime.concatstrings:
00000000010384c0	movq	%gs:0x30, %rcx
00000000010384c9	leaq	-0x10(%rsp), %rax
00000000010384ce	cmpq	0x10(%rcx), %rax
00000000010384d2	jbe	0x1038790
00000000010384d8	subq	$0x90, %rsp
00000000010384df	movq	%rbp, 0x88(%rsp)
00000000010384e7	leaq	0x88(%rsp), %rbp
00000000010384ef	xorps	%xmm0, %xmm0
00000000010384f2	movups	%xmm0, 0x78(%rsp)
00000000010384f7	movq	0xa8(%rsp), %rax
00000000010384ff	testq	%rax, %rax
0000000001038502	jle	0x103874c
0000000001038508	movq	0xa0(%rsp), %rcx
0000000001038510	movq	%rcx, %rdx
0000000001038513	xorl	%ebx, %ebx
0000000001038515	xorl	%esi, %esi
0000000001038517	xorl	%edi, %edi
0000000001038519	xorl	%r8d, %r8d
000000000103851c	jmp	0x1038522
000000000103851e	addq	$0x10, %rcx
0000000001038522	movq	0x8(%rcx), %r9
0000000001038526	testq	%r9, %r9
0000000001038529	jne	0x1038735
000000000103852f	incq	%rbx
0000000001038532	cmpq	%rax, %rbx
0000000001038535	jl	0x103851e
0000000001038537	testq	%rsi, %rsi
000000000103853a	je	0x103871a
0000000001038540	cmpq	$0x1, %rsi
0000000001038544	jne	0x103870d
000000000103854a	movq	0x98(%rsp), %rcx
0000000001038552	testq	%rcx, %rcx
0000000001038555	jne	0x1038708
000000000103855b	cmpq	%rax, %rdi
000000000103855e	jae	0x103876e
0000000001038564	movq	%rdi, %rbx
0000000001038567	shlq	$0x4, %rdi
000000000103856b	movq	(%rdx,%rdi), %rsi
000000000103856f	movq	0x8(%rdx,%rdi), %rdi
0000000001038574	movq	%rsi, 0x78(%rsp)
0000000001038579	movq	%rdi, 0x80(%rsp)
0000000001038581	movq	0x78(%rsp), %rsi
0000000001038586	movq	%gs:0x30, %rdi
000000000103858f	movq	0x8(%rdi), %r9
0000000001038593	movq	(%rdi), %rdi
0000000001038596	cmpq	%rsi, %rdi
0000000001038599	ja	0x1038701
000000000103859f	cmpq	%r9, %rsi
00000000010385a2	setb	%sil
00000000010385a6	testb	%sil, %sil
00000000010385a9	je	0x10386cb
00000000010385af	movq	%rcx, (%rsp)
00000000010385b3	movq	%r8, 0x8(%rsp)
00000000010385b8	callq	runtime.rawstringtmp
00000000010385bd	movq	0x28(%rsp), %rax
00000000010385c2	movq	0x18(%rsp), %rcx
00000000010385c7	movq	0x20(%rsp), %rdx
00000000010385cc	movq	0x10(%rsp), %rbx
00000000010385d1	movq	0x30(%rsp), %rsi
00000000010385d6	movq	0xa8(%rsp), %rdi
00000000010385de	testq	%rdi, %rdi
00000000010385e1	jle	0x1038645
00000000010385e3	movq	%rcx, 0x40(%rsp)
00000000010385e8	movq	%rbx, 0x60(%rsp)
00000000010385ed	movq	0xa0(%rsp), %r8
00000000010385f5	xorl	%r9d, %r9d
00000000010385f8	jmp	0x1038607
00000000010385fa	addq	$0x10, %r8
00000000010385fe	movq	%r9, %rsi
0000000001038601	movq	%rax, %r9
0000000001038604	movq	%r12, %rax
0000000001038607	movq	0x8(%r8), %r10
000000000103860b	movq	(%r8), %r11
000000000103860e	cmpq	%r10, %rax
0000000001038611	movq	%rax, %r12
0000000001038614	cmovgq	%r10, %rax
0000000001038618	cmpq	%r11, %rdx
000000000103861b	jne	0x1038665
000000000103861d	cmpq	%r12, %r10
0000000001038620	ja	0x1038760
0000000001038626	leaq	0x1(%r9), %rax
000000000103862a	subq	%r10, %r12
000000000103862d	subq	%r10, %rsi
0000000001038630	movq	%rsi, %r9
0000000001038633	negq	%rsi
0000000001038636	sarq	$0x3f, %rsi
000000000103863a	andq	%rsi, %r10
000000000103863d	addq	%r10, %rdx
0000000001038640	cmpq	%rdi, %rax
0000000001038643	jl	0x10385fa
0000000001038645	movq	%rbx, 0xb8(%rsp)
000000000103864d	movq	%rcx, 0xc0(%rsp)
0000000001038655	movq	0x88(%rsp), %rbp
000000000103865d	addq	$0x90, %rsp
0000000001038664	retq
0000000001038665	movq	%r10, 0x38(%rsp)
000000000103866a	movq	%rdx, 0x68(%rsp)
000000000103866f	movq	%r8, 0x70(%rsp)
0000000001038674	movq	%r9, 0x58(%rsp)
0000000001038679	movq	%rsi, 0x48(%rsp)
000000000103867e	movq	%r12, 0x50(%rsp)
0000000001038683	movq	%rdx, (%rsp)
0000000001038687	movq	%r11, 0x8(%rsp)
000000000103868c	movq	%rax, 0x10(%rsp)
0000000001038691	callq	runtime.memmove
0000000001038696	movq	0x40(%rsp), %rcx
000000000103869b	movq	0x68(%rsp), %rdx
00000000010386a0	movq	0x60(%rsp), %rbx
00000000010386a5	movq	0x48(%rsp), %rsi
00000000010386aa	movq	0xa8(%rsp), %rdi
00000000010386b2	movq	0x70(%rsp), %r8
00000000010386b7	movq	0x58(%rsp), %r9
00000000010386bc	movq	0x38(%rsp), %r10
00000000010386c1	movq	0x50(%rsp), %r12
00000000010386c6	jmp	0x103861d
00000000010386cb	cmpq	%rax, %rbx
00000000010386ce	jae	0x1038767
00000000010386d4	shlq	$0x4, %rbx
00000000010386d8	movq	(%rdx,%rbx), %rax
00000000010386dc	movq	0x8(%rdx,%rbx), %rcx
00000000010386e1	movq	%rax, 0xb8(%rsp)
00000000010386e9	movq	%rcx, 0xc0(%rsp)
00000000010386f1	movq	0x88(%rsp), %rbp
00000000010386f9	addq	$0x90, %rsp
0000000001038700	retq
0000000001038701	xorl	%esi, %esi
0000000001038703	jmp	0x10385a6
0000000001038708	movq	%rdi, %rbx
000000000103870b	jmp	0x10386cb
000000000103870d	movq	0x98(%rsp), %rcx
0000000001038715	jmp	0x10385af
000000000103871a	xorps	%xmm0, %xmm0
000000000103871d	movups	%xmm0, 0xb8(%rsp)
0000000001038725	movq	0x88(%rsp), %rbp
000000000103872d	addq	$0x90, %rsp
0000000001038734	retq
0000000001038735	leaq	(%r8,%r9), %rdi
0000000001038739	cmpq	%r8, %rdi
000000000103873c	jl	0x1038775
000000000103873e	incq	%rsi
0000000001038741	movq	%rdi, %r8
0000000001038744	movq	%rbx, %rdi
0000000001038747	jmp	0x103852f
000000000103874c	movq	0xa0(%rsp), %rdx
0000000001038754	xorl	%esi, %esi
0000000001038756	xorl	%edi, %edi
0000000001038758	xorl	%r8d, %r8d
000000000103875b	jmp	0x1038537
0000000001038760	callq	runtime.panicslice
0000000001038765	ud2
0000000001038767	callq	runtime.panicindex
000000000103876c	ud2
000000000103876e	callq	runtime.panicindex
0000000001038773	ud2
0000000001038775	leaq	0x3498e(%rip), %rax
000000000103877c	movq	%rax, (%rsp)
0000000001038780	movq	$0x1d, 0x8(%rsp)
0000000001038789	callq	runtime.throw
000000000103878e	ud2
0000000001038790	callq	runtime.morestack_noctxt
0000000001038795	jmp	runtime.concatstrings
000000000103879a	int3
000000000103879b	int3
000000000103879c	int3
000000000103879d	int3
000000000103879e	int3
000000000103879f	int3
runtime.concatstring2:
00000000010387a0	movq	%gs:0x30, %rcx
00000000010387a9	cmpq	0x10(%rcx), %rsp
00000000010387ad	jbe	0x1038805
00000000010387af	subq	$0x38, %rsp
00000000010387b3	movq	%rbp, 0x30(%rsp)
00000000010387b8	leaq	0x30(%rsp), %rbp
00000000010387bd	movq	0x40(%rsp), %rax
00000000010387c2	movq	%rax, (%rsp)
00000000010387c6	leaq	0x48(%rsp), %rax
00000000010387cb	movq	%rax, 0x8(%rsp)
00000000010387d0	movq	$0x2, 0x10(%rsp)
00000000010387d9	movq	$0x2, 0x18(%rsp)
00000000010387e2	callq	runtime.concatstrings
00000000010387e7	movq	0x20(%rsp), %rax
00000000010387ec	movq	0x28(%rsp), %rcx
00000000010387f1	movq	%rax, 0x68(%rsp)
00000000010387f6	movq	%rcx, 0x70(%rsp)
00000000010387fb	movq	0x30(%rsp), %rbp
0000000001038800	addq	$0x38, %rsp
0000000001038804	retq
0000000001038805	callq	runtime.morestack_noctxt
000000000103880a	jmp	runtime.concatstring2
000000000103880c	int3
000000000103880d	int3
000000000103880e	int3
000000000103880f	int3
runtime.concatstring4:
0000000001038810	movq	%gs:0x30, %rcx
0000000001038819	cmpq	0x10(%rcx), %rsp
000000000103881d	jbe	0x103887b
000000000103881f	subq	$0x38, %rsp
0000000001038823	movq	%rbp, 0x30(%rsp)
0000000001038828	leaq	0x30(%rsp), %rbp
000000000103882d	movq	0x40(%rsp), %rax
0000000001038832	movq	%rax, (%rsp)
0000000001038836	leaq	0x48(%rsp), %rax
000000000103883b	movq	%rax, 0x8(%rsp)
0000000001038840	movq	$0x4, 0x10(%rsp)
0000000001038849	movq	$0x4, 0x18(%rsp)
0000000001038852	callq	runtime.concatstrings
0000000001038857	movq	0x20(%rsp), %rax
000000000103885c	movq	0x28(%rsp), %rcx
0000000001038861	movq	%rax, 0x88(%rsp)
0000000001038869	movq	%rcx, 0x90(%rsp)
0000000001038871	movq	0x30(%rsp), %rbp
0000000001038876	addq	$0x38, %rsp
000000000103887a	retq
000000000103887b	callq	runtime.morestack_noctxt
0000000001038880	jmp	runtime.concatstring4
0000000001038882	int3
0000000001038883	int3
0000000001038884	int3
0000000001038885	int3
0000000001038886	int3
0000000001038887	int3
0000000001038888	int3
0000000001038889	int3
000000000103888a	int3
000000000103888b	int3
000000000103888c	int3
000000000103888d	int3
000000000103888e	int3
000000000103888f	int3
runtime.slicebytetostring:
0000000001038890	movq	%gs:0x30, %rcx
0000000001038899	cmpq	0x10(%rcx), %rsp
000000000103889d	jbe	0x103896a
00000000010388a3	subq	$0x28, %rsp
00000000010388a7	movq	%rbp, 0x20(%rsp)
00000000010388ac	leaq	0x20(%rsp), %rbp
00000000010388b1	xorps	%xmm0, %xmm0
00000000010388b4	movups	%xmm0, 0x50(%rsp)
00000000010388b9	movq	0x40(%rsp), %rax
00000000010388be	movq	0x38(%rsp), %rcx
00000000010388c3	testq	%rax, %rax
00000000010388c6	je	0x103895b
00000000010388cc	cmpq	$0x1, %rax
00000000010388d0	je	0x1038936
00000000010388d2	movq	0x30(%rsp), %rcx
00000000010388d7	testq	%rcx, %rcx
00000000010388da	je	0x1038918
00000000010388dc	cmpq	$0x20, %rax
00000000010388e0	jg	0x1038918
00000000010388e2	movq	%rcx, 0x50(%rsp)
00000000010388e7	movq	0x40(%rsp), %rax
00000000010388ec	movq	%rax, 0x58(%rsp)
00000000010388f1	movq	0x38(%rsp), %rax
00000000010388f6	movq	0x40(%rsp), %rdx
00000000010388fb	movq	%rax, 0x8(%rsp)
0000000001038900	movq	%rcx, (%rsp)
0000000001038904	movq	%rdx, 0x10(%rsp)
0000000001038909	callq	runtime.memmove
000000000103890e	movq	0x20(%rsp), %rbp
0000000001038913	addq	$0x28, %rsp
0000000001038917	retq
0000000001038918	movq	%rax, (%rsp)
000000000103891c	movq	$0x0, 0x8(%rsp)
0000000001038925	movb	$0x0, 0x10(%rsp)
000000000103892a	callq	runtime.mallocgc
000000000103892f	movq	0x18(%rsp), %rcx
0000000001038934	jmp	0x10388e2
0000000001038936	movzbl	(%rcx), %eax
0000000001038939	leaq	runtime.staticbytes(%rip), %rcx
0000000001038940	addq	%rcx, %rax
0000000001038943	movq	%rax, 0x50(%rsp)
0000000001038948	movq	$0x1, 0x58(%rsp)
0000000001038951	movq	0x20(%rsp), %rbp
0000000001038956	addq	$0x28, %rsp
000000000103895a	retq
000000000103895b	movups	%xmm0, 0x50(%rsp)
0000000001038960	movq	0x20(%rsp), %rbp
0000000001038965	addq	$0x28, %rsp
0000000001038969	retq
000000000103896a	callq	runtime.morestack_noctxt
000000000103896f	jmp	runtime.slicebytetostring
0000000001038974	int3
0000000001038975	int3
0000000001038976	int3
0000000001038977	int3
0000000001038978	int3
0000000001038979	int3
000000000103897a	int3
000000000103897b	int3
000000000103897c	int3
000000000103897d	int3
000000000103897e	int3
000000000103897f	int3
runtime.rawstringtmp:
0000000001038980	movq	%gs:0x30, %rcx
0000000001038989	cmpq	0x10(%rcx), %rsp
000000000103898d	jbe	0x1038a18
0000000001038993	subq	$0x38, %rsp
0000000001038997	movq	%rbp, 0x30(%rsp)
000000000103899c	leaq	0x30(%rsp), %rbp
00000000010389a1	movq	0x40(%rsp), %rax
00000000010389a6	testq	%rax, %rax
00000000010389a9	je	0x1038a0a
00000000010389ab	movq	0x48(%rsp), %rcx
00000000010389b0	cmpq	$0x20, %rcx
00000000010389b4	jg	0x10389e6
00000000010389b6	ja	0x1038a11
00000000010389b8	movq	%rax, %rdx
00000000010389bb	movl	$0x20, %ebx
00000000010389c0	movq	%rcx, %rsi
00000000010389c3	movq	%rdx, 0x50(%rsp)
00000000010389c8	movq	%rcx, 0x58(%rsp)
00000000010389cd	movq	%rax, 0x60(%rsp)
00000000010389d2	movq	%rsi, 0x68(%rsp)
00000000010389d7	movq	%rbx, 0x70(%rsp)
00000000010389dc	movq	0x30(%rsp), %rbp
00000000010389e1	addq	$0x38, %rsp
00000000010389e5	retq
00000000010389e6	movq	%rcx, (%rsp)
00000000010389ea	callq	runtime.rawstring
00000000010389ef	movq	0x8(%rsp), %rdx
00000000010389f4	movq	0x10(%rsp), %rcx
00000000010389f9	movq	0x18(%rsp), %rax
00000000010389fe	movq	0x20(%rsp), %rsi
0000000001038a03	movq	0x28(%rsp), %rbx
0000000001038a08	jmp	0x10389c3
0000000001038a0a	movq	0x48(%rsp), %rcx
0000000001038a0f	jmp	0x10389e6
0000000001038a11	callq	runtime.panicslice
0000000001038a16	ud2
0000000001038a18	callq	runtime.morestack_noctxt
0000000001038a1d	jmp	runtime.rawstringtmp
0000000001038a22	int3
0000000001038a23	int3
0000000001038a24	int3
0000000001038a25	int3
0000000001038a26	int3
0000000001038a27	int3
0000000001038a28	int3
0000000001038a29	int3
0000000001038a2a	int3
0000000001038a2b	int3
0000000001038a2c	int3
0000000001038a2d	int3
0000000001038a2e	int3
0000000001038a2f	int3
runtime.rawstring:
0000000001038a30	movq	%gs:0x30, %rcx
0000000001038a39	cmpq	0x10(%rcx), %rsp
0000000001038a3d	jbe	0x1038aac
0000000001038a3f	subq	$0x28, %rsp
0000000001038a43	movq	%rbp, 0x20(%rsp)
0000000001038a48	leaq	0x20(%rsp), %rbp
0000000001038a4d	xorps	%xmm0, %xmm0
0000000001038a50	movups	%xmm0, 0x38(%rsp)
0000000001038a55	movq	$0x0, 0x48(%rsp)
0000000001038a5e	movups	%xmm0, 0x50(%rsp)
0000000001038a63	movq	0x30(%rsp), %rax
0000000001038a68	movq	%rax, (%rsp)
0000000001038a6c	movq	$0x0, 0x8(%rsp)
0000000001038a75	movb	$0x0, 0x10(%rsp)
0000000001038a7a	callq	runtime.mallocgc
0000000001038a7f	movq	0x18(%rsp), %rax
0000000001038a84	movq	%rax, 0x38(%rsp)
0000000001038a89	movq	0x30(%rsp), %rcx
0000000001038a8e	movq	%rcx, 0x40(%rsp)
0000000001038a93	movq	%rax, 0x48(%rsp)
0000000001038a98	movq	%rcx, 0x50(%rsp)
0000000001038a9d	movq	%rcx, 0x58(%rsp)
0000000001038aa2	movq	0x20(%rsp), %rbp
0000000001038aa7	addq	$0x28, %rsp
0000000001038aab	retq
0000000001038aac	callq	runtime.morestack_noctxt
0000000001038ab1	jmp	runtime.rawstring
0000000001038ab6	int3
0000000001038ab7	int3
0000000001038ab8	int3
0000000001038ab9	int3
0000000001038aba	int3
0000000001038abb	int3
0000000001038abc	int3
0000000001038abd	int3
0000000001038abe	int3
0000000001038abf	int3
runtime.gostring:
0000000001038ac0	movq	%gs:0x30, %rcx
0000000001038ac9	cmpq	0x10(%rcx), %rsp
0000000001038acd	jbe	0x1038b7c
0000000001038ad3	subq	$0x50, %rsp
0000000001038ad7	movq	%rbp, 0x48(%rsp)
0000000001038adc	leaq	0x48(%rsp), %rbp
0000000001038ae1	movq	0x58(%rsp), %rax
0000000001038ae6	movq	%rax, (%rsp)
0000000001038aea	callq	runtime.findnull
0000000001038aef	movq	0x8(%rsp), %rax
0000000001038af4	testq	%rax, %rax
0000000001038af7	je	0x1038b63
0000000001038af9	movq	%rax, 0x38(%rsp)
0000000001038afe	movq	%rax, (%rsp)
0000000001038b02	callq	runtime.rawstring
0000000001038b07	movq	0x10(%rsp), %rax
0000000001038b0c	movq	0x18(%rsp), %rcx
0000000001038b11	movq	0x8(%rsp), %rdx
0000000001038b16	cmpq	$0x0, 0x20(%rsp)
0000000001038b1c	jbe	0x1038b75
0000000001038b1e	movq	%rax, 0x30(%rsp)
0000000001038b23	movq	%rdx, 0x40(%rsp)
0000000001038b28	movq	%rcx, (%rsp)
0000000001038b2c	movq	0x58(%rsp), %rax
0000000001038b31	movq	%rax, 0x8(%rsp)
0000000001038b36	movq	0x38(%rsp), %rax
0000000001038b3b	movq	%rax, 0x10(%rsp)
0000000001038b40	callq	runtime.memmove
0000000001038b45	movq	0x40(%rsp), %rax
0000000001038b4a	movq	%rax, 0x60(%rsp)
0000000001038b4f	movq	0x30(%rsp), %rax
0000000001038b54	movq	%rax, 0x68(%rsp)
0000000001038b59	movq	0x48(%rsp), %rbp
0000000001038b5e	addq	$0x50, %rsp
0000000001038b62	retq
0000000001038b63	xorps	%xmm0, %xmm0
0000000001038b66	movups	%xmm0, 0x60(%rsp)
0000000001038b6b	movq	0x48(%rsp), %rbp
0000000001038b70	addq	$0x50, %rsp
0000000001038b74	retq
0000000001038b75	callq	runtime.panicindex
0000000001038b7a	ud2
0000000001038b7c	callq	runtime.morestack_noctxt
0000000001038b81	jmp	runtime.gostring
0000000001038b86	int3
0000000001038b87	int3
0000000001038b88	int3
0000000001038b89	int3
0000000001038b8a	int3
0000000001038b8b	int3
0000000001038b8c	int3
0000000001038b8d	int3
0000000001038b8e	int3
0000000001038b8f	int3
runtime.index:
0000000001038b90	movq	%gs:0x30, %rcx
0000000001038b99	cmpq	0x10(%rcx), %rsp
0000000001038b9d	jbe	0x1038c7c
0000000001038ba3	subq	$0x30, %rsp
0000000001038ba7	movq	%rbp, 0x28(%rsp)
0000000001038bac	leaq	0x28(%rsp), %rbp
0000000001038bb1	movq	0x50(%rsp), %rax
0000000001038bb6	testq	%rax, %rax
0000000001038bb9	je	0x1038c69
0000000001038bbf	movq	0x40(%rsp), %rcx
0000000001038bc4	movq	0x48(%rsp), %rdx
0000000001038bc9	movq	0x38(%rsp), %rbx
0000000001038bce	xorl	%esi, %esi
0000000001038bd0	jmp	0x1038bd8
0000000001038bd2	incq	%rsi
0000000001038bd5	movq	%rdi, %rcx
0000000001038bd8	cmpq	%rcx, %rsi
0000000001038bdb	jge	0x1038c56
0000000001038bdd	movzbl	(%rbx,%rsi), %edi
0000000001038be1	cmpb	%dil, (%rdx)
0000000001038be4	jne	0x1038c4e
0000000001038be6	movq	%rcx, %rdi
0000000001038be9	subq	%rsi, %rcx
0000000001038bec	movq	%rcx, %r8
0000000001038bef	negq	%rcx
0000000001038bf2	sarq	$0x3f, %rcx
0000000001038bf6	andq	%rsi, %rcx
0000000001038bf9	addq	%rbx, %rcx
0000000001038bfc	cmpq	%rax, %r8
0000000001038bff	jge	0x1038c16
0000000001038c01	xorl	%ecx, %ecx
0000000001038c03	testb	%cl, %cl
0000000001038c05	je	0x1038bd2
0000000001038c07	movq	%rsi, 0x58(%rsp)
0000000001038c0c	movq	0x28(%rsp), %rbp
0000000001038c11	addq	$0x30, %rsp
0000000001038c15	retq
0000000001038c16	movq	%rsi, 0x20(%rsp)
0000000001038c1b	movq	%rcx, (%rsp)
0000000001038c1f	movq	%rdx, 0x8(%rsp)
0000000001038c24	movq	%rax, 0x10(%rsp)
0000000001038c29	callq	runtime.memequal
0000000001038c2e	movzbl	0x18(%rsp), %ecx
0000000001038c33	movq	0x50(%rsp), %rax
0000000001038c38	movq	0x48(%rsp), %rdx
0000000001038c3d	movq	0x38(%rsp), %rbx
0000000001038c42	movq	0x20(%rsp), %rsi
0000000001038c47	movq	0x40(%rsp), %rdi
0000000001038c4c	jmp	0x1038c03
0000000001038c4e	movq	%rcx, %rdi
0000000001038c51	jmp	0x1038bd2
0000000001038c56	movq	$-0x1, 0x58(%rsp)
0000000001038c5f	movq	0x28(%rsp), %rbp
0000000001038c64	addq	$0x30, %rsp
0000000001038c68	retq
0000000001038c69	movq	$0x0, 0x58(%rsp)
0000000001038c72	movq	0x28(%rsp), %rbp
0000000001038c77	addq	$0x30, %rsp
0000000001038c7b	retq
0000000001038c7c	callq	runtime.morestack_noctxt
0000000001038c81	jmp	runtime.index
0000000001038c86	int3
0000000001038c87	int3
0000000001038c88	int3
0000000001038c89	int3
0000000001038c8a	int3
0000000001038c8b	int3
0000000001038c8c	int3
0000000001038c8d	int3
0000000001038c8e	int3
0000000001038c8f	int3
runtime.contains:
0000000001038c90	movq	%gs:0x30, %rcx
0000000001038c99	cmpq	0x10(%rcx), %rsp
0000000001038c9d	jbe	0x1038cee
0000000001038c9f	subq	$0x30, %rsp
0000000001038ca3	movq	%rbp, 0x28(%rsp)
0000000001038ca8	leaq	0x28(%rsp), %rbp
0000000001038cad	movq	0x38(%rsp), %rax
0000000001038cb2	movq	%rax, (%rsp)
0000000001038cb6	movq	0x40(%rsp), %rax
0000000001038cbb	movq	%rax, 0x8(%rsp)
0000000001038cc0	movq	0x48(%rsp), %rax
0000000001038cc5	movq	%rax, 0x10(%rsp)
0000000001038cca	movq	0x50(%rsp), %rax
0000000001038ccf	movq	%rax, 0x18(%rsp)
0000000001038cd4	callq	runtime.index
0000000001038cd9	cmpq	$0x0, 0x20(%rsp)
0000000001038cdf	setge	0x58(%rsp)
0000000001038ce4	movq	0x28(%rsp), %rbp
0000000001038ce9	addq	$0x30, %rsp
0000000001038ced	retq
0000000001038cee	callq	runtime.morestack_noctxt
0000000001038cf3	jmp	runtime.contains
0000000001038cf5	int3
0000000001038cf6	int3
0000000001038cf7	int3
0000000001038cf8	int3
0000000001038cf9	int3
0000000001038cfa	int3
0000000001038cfb	int3
0000000001038cfc	int3
0000000001038cfd	int3
0000000001038cfe	int3
0000000001038cff	int3
runtime.atoi:
0000000001038d00	movq	0x10(%rsp), %rax
0000000001038d05	testq	%rax, %rax
0000000001038d08	je	0x1038e18
0000000001038d0e	movq	0x8(%rsp), %rcx
0000000001038d13	cmpb	$0x2d, (%rcx)
0000000001038d16	jne	0x1038e09
0000000001038d1c	decq	%rax
0000000001038d1f	movq	%rax, %rdx
0000000001038d22	negq	%rax
0000000001038d25	sarq	$0x3f, %rax
0000000001038d29	andq	$0x1, %rax
0000000001038d2d	addq	%rcx, %rax
0000000001038d30	movl	$0x1, %ecx
0000000001038d35	xorl	%ebx, %ebx
0000000001038d37	xorl	%esi, %esi
0000000001038d39	jmp	0x1038d41
0000000001038d3b	incq	%rbx
0000000001038d3e	movq	%rdi, %rsi
0000000001038d41	cmpq	%rdx, %rbx
0000000001038d44	jge	0x1038da8
0000000001038d46	movzbl	(%rax,%rbx), %edi
0000000001038d4a	leal	-0x30(%rdi), %r8d
0000000001038d4e	cmpb	$0x9, %r8b
0000000001038d52	ja	0x1038d99
0000000001038d54	movabsq	$0x1999999999999999, %r8
0000000001038d5e	cmpq	%r8, %rsi
0000000001038d61	ja	0x1038d8a
0000000001038d63	leaq	(%rsi,%rsi,4), %rsi
0000000001038d67	movq	%rsi, %r9
0000000001038d6a	shlq	%rsi
0000000001038d6d	movzbl	%dil, %edi
0000000001038d71	leaq	-0x30(%rdi,%r9,2), %rdi
0000000001038d76	cmpq	%rsi, %rdi
0000000001038d79	jae	0x1038d3b
0000000001038d7b	movq	$0x0, 0x18(%rsp)
0000000001038d84	movb	$0x0, 0x20(%rsp)
0000000001038d89	retq
0000000001038d8a	movq	$0x0, 0x18(%rsp)
0000000001038d93	movb	$0x0, 0x20(%rsp)
0000000001038d98	retq
0000000001038d99	movq	$0x0, 0x18(%rsp)
0000000001038da2	movb	$0x0, 0x20(%rsp)
0000000001038da7	retq
0000000001038da8	testb	%cl, %cl
0000000001038daa	je	0x1038de7
0000000001038dac	je	0x1038dbd
0000000001038dae	movabsq	$-0x8000000000000000, %rax
0000000001038db8	cmpq	%rax, %rsi
0000000001038dbb	ja	0x1038dd8
0000000001038dbd	movq	%rsi, %rax
0000000001038dc0	negq	%rsi
0000000001038dc3	movzbl	%cl, %ecx
0000000001038dc6	testq	%rcx, %rcx
0000000001038dc9	cmovneq	%rsi, %rax
0000000001038dcd	movq	%rax, 0x18(%rsp)
0000000001038dd2	movb	$0x1, 0x20(%rsp)
0000000001038dd7	retq
0000000001038dd8	movq	$0x0, 0x18(%rsp)
0000000001038de1	movb	$0x0, 0x20(%rsp)
0000000001038de6	retq
0000000001038de7	movabsq	$0x7fffffffffffffff, %rax
0000000001038df1	cmpq	%rax, %rsi
0000000001038df4	ja	0x1038dfa
0000000001038df6	testb	%cl, %cl
0000000001038df8	jmp	0x1038dac
0000000001038dfa	movq	$0x0, 0x18(%rsp)
0000000001038e03	movb	$0x0, 0x20(%rsp)
0000000001038e08	retq
0000000001038e09	movq	%rcx, %rax
0000000001038e0c	movq	0x10(%rsp), %rdx
0000000001038e11	xorl	%ecx, %ecx
0000000001038e13	jmp	0x1038d35
0000000001038e18	movq	$0x0, 0x18(%rsp)
0000000001038e21	movb	$0x0, 0x20(%rsp)
0000000001038e26	retq
0000000001038e27	int3
0000000001038e28	int3
0000000001038e29	int3
0000000001038e2a	int3
0000000001038e2b	int3
0000000001038e2c	int3
0000000001038e2d	int3
0000000001038e2e	int3
0000000001038e2f	int3
runtime.atoi32:
0000000001038e30	movq	%gs:0x30, %rcx
0000000001038e39	cmpq	0x10(%rcx), %rsp
0000000001038e3d	jbe	0x1038ea0
0000000001038e3f	subq	$0x28, %rsp
0000000001038e43	movq	%rbp, 0x20(%rsp)
0000000001038e48	leaq	0x20(%rsp), %rbp
0000000001038e4d	movq	0x30(%rsp), %rax
0000000001038e52	movq	%rax, (%rsp)
0000000001038e56	movq	0x38(%rsp), %rax
0000000001038e5b	movq	%rax, 0x8(%rsp)
0000000001038e60	callq	runtime.atoi
0000000001038e65	movq	0x10(%rsp), %rax
0000000001038e6a	movzbl	0x18(%rsp), %ecx
0000000001038e6f	movslq	%eax, %rdx
0000000001038e72	cmpq	%rdx, %rax
0000000001038e75	jne	0x1038e89
0000000001038e77	movl	%eax, 0x40(%rsp)
0000000001038e7b	movb	%cl, 0x44(%rsp)
0000000001038e7f	movq	0x20(%rsp), %rbp
0000000001038e84	addq	$0x28, %rsp
0000000001038e88	retq
0000000001038e89	movl	$0x0, 0x40(%rsp)
0000000001038e91	movb	$0x0, 0x44(%rsp)
0000000001038e96	movq	0x20(%rsp), %rbp
0000000001038e9b	addq	$0x28, %rsp
0000000001038e9f	retq
0000000001038ea0	callq	runtime.morestack_noctxt
0000000001038ea5	jmp	runtime.atoi32
0000000001038ea7	int3
0000000001038ea8	int3
0000000001038ea9	int3
0000000001038eaa	int3
0000000001038eab	int3
0000000001038eac	int3
0000000001038ead	int3
0000000001038eae	int3
0000000001038eaf	int3
runtime.findnull:
0000000001038eb0	subq	$0x50, %rsp
0000000001038eb4	movq	%rbp, 0x48(%rsp)
0000000001038eb9	leaq	0x48(%rsp), %rbp
0000000001038ebe	movq	0x58(%rsp), %rax
0000000001038ec3	testq	%rax, %rax
0000000001038ec6	je	0x1038f59
0000000001038ecc	movq	%rax, %rcx
0000000001038ecf	andq	$0xfff, %rax
0000000001038ed5	addq	$-0x1000, %rax
0000000001038edb	negq	%rax
0000000001038ede	xorl	%edx, %edx
0000000001038ee0	jmp	0x1038efe
0000000001038ee2	movq	0x20(%rsp), %rbx
0000000001038ee7	movq	0x30(%rsp), %rsi
0000000001038eec	leaq	(%rsi,%rbx), %rcx
0000000001038ef0	movq	0x28(%rsp), %rsi
0000000001038ef5	leaq	(%rsi,%rbx), %rdx
0000000001038ef9	movl	$0x1000, %eax
0000000001038efe	movq	%rdx, 0x28(%rsp)
0000000001038f03	movq	%rax, 0x20(%rsp)
0000000001038f08	movq	%rcx, 0x30(%rsp)
0000000001038f0d	xorps	%xmm0, %xmm0
0000000001038f10	movups	%xmm0, 0x38(%rsp)
0000000001038f15	movq	%rcx, 0x38(%rsp)
0000000001038f1a	movq	%rax, 0x40(%rsp)
0000000001038f1f	movq	0x38(%rsp), %rbx
0000000001038f24	movq	%rbx, (%rsp)
0000000001038f28	movq	%rax, 0x8(%rsp)
0000000001038f2d	movb	$0x0, 0x10(%rsp)
0000000001038f32	callq	"internal/bytealg.IndexByteString"
0000000001038f37	movq	0x18(%rsp), %rax
0000000001038f3c	cmpq	$-0x1, %rax
0000000001038f40	je	0x1038ee2
0000000001038f42	movq	0x28(%rsp), %rcx
0000000001038f47	addq	%rcx, %rax
0000000001038f4a	movq	%rax, 0x60(%rsp)
0000000001038f4f	movq	0x48(%rsp), %rbp
0000000001038f54	addq	$0x50, %rsp
0000000001038f58	retq
0000000001038f59	movq	$0x0, 0x60(%rsp)
0000000001038f62	movq	0x48(%rsp), %rbp
0000000001038f67	addq	$0x50, %rsp
0000000001038f6b	retq
0000000001038f6c	int3
0000000001038f6d	int3
0000000001038f6e	int3
0000000001038f6f	int3
runtime.gostringnocopy:
0000000001038f70	subq	$0x28, %rsp
0000000001038f74	movq	%rbp, 0x20(%rsp)
0000000001038f79	leaq	0x20(%rsp), %rbp
0000000001038f7e	movq	0x30(%rsp), %rax
0000000001038f83	movq	%rax, (%rsp)
0000000001038f87	callq	runtime.findnull
0000000001038f8c	movq	0x8(%rsp), %rax
0000000001038f91	xorps	%xmm0, %xmm0
0000000001038f94	movups	%xmm0, 0x10(%rsp)
0000000001038f99	movq	0x30(%rsp), %rcx
0000000001038f9e	movq	%rcx, 0x10(%rsp)
0000000001038fa3	movq	%rax, 0x18(%rsp)
0000000001038fa8	movq	0x10(%rsp), %rcx
0000000001038fad	movq	%rcx, 0x38(%rsp)
0000000001038fb2	movq	%rax, 0x40(%rsp)
0000000001038fb7	movq	0x20(%rsp), %rbp
0000000001038fbc	addq	$0x28, %rsp
0000000001038fc0	retq
0000000001038fc1	int3
0000000001038fc2	int3
0000000001038fc3	int3
0000000001038fc4	int3
0000000001038fc5	int3
0000000001038fc6	int3
0000000001038fc7	int3
0000000001038fc8	int3
0000000001038fc9	int3
0000000001038fca	int3
0000000001038fcb	int3
0000000001038fcc	int3
0000000001038fcd	int3
0000000001038fce	int3
0000000001038fcf	int3
runtime.badsystemstack:
0000000001038fd0	subq	$0x28, %rsp
0000000001038fd4	movq	%rbp, 0x20(%rsp)
0000000001038fd9	leaq	0x20(%rsp), %rbp
0000000001038fde	movq	runtime.badsystemstackMsg(%rip), %rax
0000000001038fe5	movq	0x7ddec(%rip), %rcx
0000000001038fec	movl	%ecx, 0x10(%rsp)
0000000001038ff0	movq	$0x2, (%rsp)
0000000001038ff8	movq	%rax, 0x8(%rsp)
0000000001038ffd	callq	runtime.write
0000000001039002	movq	0x20(%rsp), %rbp
0000000001039007	addq	$0x28, %rsp
000000000103900b	retq
000000000103900c	int3
000000000103900d	int3
000000000103900e	int3
000000000103900f	int3
runtime.fastrand:
0000000001039010	movq	%gs:0x30, %rax
0000000001039019	movq	0x30(%rax), %rax
000000000103901d	movl	0x11c(%rax), %ecx
0000000001039023	movl	0x120(%rax), %edx
0000000001039029	movl	%edx, 0x11c(%rax)
000000000103902f	movl	%ecx, %ebx
0000000001039031	shll	$0x11, %ecx
0000000001039034	xorl	%ebx, %ecx
0000000001039036	movl	%edx, %ebx
0000000001039038	xorl	%ecx, %edx
000000000103903a	shrl	$0x7, %ecx
000000000103903d	xorl	%edx, %ecx
000000000103903f	movl	%ebx, %edx
0000000001039041	shrl	$0x10, %ebx
0000000001039044	xorl	%ecx, %ebx
0000000001039046	movl	%ebx, 0x120(%rax)
000000000103904c	leal	(%rdx,%rbx), %eax
000000000103904f	movl	%eax, 0x8(%rsp)
0000000001039053	retq
0000000001039054	int3
0000000001039055	int3
0000000001039056	int3
0000000001039057	int3
0000000001039058	int3
0000000001039059	int3
000000000103905a	int3
000000000103905b	int3
000000000103905c	int3
000000000103905d	int3
000000000103905e	int3
000000000103905f	int3
runtime.modulesinit:
0000000001039060	movq	%gs:0x30, %rcx
0000000001039069	cmpq	0x10(%rcx), %rsp
000000000103906d	jbe	0x10392d3
0000000001039073	subq	$0x58, %rsp
0000000001039077	movq	%rbp, 0x50(%rsp)
000000000103907c	leaq	0x50(%rsp), %rbp
0000000001039081	leaq	0x1d9b8(%rip), %rax
0000000001039088	movq	%rax, (%rsp)
000000000103908c	callq	runtime.newobject
0000000001039091	movq	0x8(%rsp), %rax
0000000001039096	movq	%rax, 0x40(%rsp)
000000000103909b	leaq	runtime.firstmoduledata(%rip), %rcx
00000000010390a2	jmp	0x10390ab
00000000010390a4	movq	0x1c0(%rcx), %rcx
00000000010390ab	testq	%rcx, %rcx
00000000010390ae	je	0x1039239
00000000010390b4	leaq	0x1b8(%rcx), %rdx
00000000010390bb	cmpb	$0x0, (%rdx)
00000000010390be	jne	0x10390a4
00000000010390c0	movq	%rcx, 0x48(%rsp)
00000000010390c5	movq	0x8(%rax), %rdx
00000000010390c9	leaq	0x1(%rdx), %rbx
00000000010390cd	movq	0x10(%rax), %rsi
00000000010390d1	movq	(%rax), %r8
00000000010390d4	cmpq	%rsi, %rbx
00000000010390d7	jg	0x10391d7
00000000010390dd	leaq	0x1(%rdx), %rbx
00000000010390e1	movq	%rbx, 0x8(%rax)
00000000010390e5	leaq	(%r8,%rdx,8), %rdi
00000000010390e9	cmpl	$0x0, 0x9bb40(%rip)
00000000010390f0	jne	0x10391c4
00000000010390f6	movq	%rcx, (%r8,%rdx,8)
00000000010390fa	cmpl	$0x0, 0x190(%rcx)
0000000001039101	jne	0x10390a4
0000000001039103	cmpq	$0x0, 0x198(%rcx)
000000000103910b	jne	0x10390a4
000000000103910d	movq	0xb8(%rcx), %rax
0000000001039114	movq	0x88(%rcx), %rdx
000000000103911b	subq	0x80(%rcx), %rdx
0000000001039122	movq	%rdx, 0x8(%rsp)
0000000001039127	movq	%rax, (%rsp)
000000000103912b	callq	runtime.progToPointerMask
0000000001039130	movq	0x18(%rsp), %rax
0000000001039135	movl	0x10(%rsp), %ecx
0000000001039139	movq	0x48(%rsp), %rdx
000000000103913e	movl	%ecx, 0x190(%rdx)
0000000001039144	cmpl	$0x0, 0x9bae5(%rip)
000000000103914b	jne	0x10391b6
000000000103914d	movq	%rax, 0x198(%rdx)
0000000001039154	movq	0xc0(%rdx), %rax
000000000103915b	movq	0x98(%rdx), %rcx
0000000001039162	subq	0x90(%rdx), %rcx
0000000001039169	movq	%rcx, 0x8(%rsp)
000000000103916e	movq	%rax, (%rsp)
0000000001039172	callq	runtime.progToPointerMask
0000000001039177	movq	0x18(%rsp), %rax
000000000103917c	movl	0x10(%rsp), %ecx
0000000001039180	movq	0x48(%rsp), %rdx
0000000001039185	movl	%ecx, 0x1a0(%rdx)
000000000103918b	cmpl	$0x0, 0x9ba9e(%rip)
0000000001039192	jne	0x10391a8
0000000001039194	movq	%rax, 0x1a8(%rdx)
000000000103919b	movq	0x40(%rsp), %rax
00000000010391a0	movq	%rdx, %rcx
00000000010391a3	jmp	0x10390a4
00000000010391a8	leaq	0x1a8(%rdx), %rdi
00000000010391af	callq	runtime.gcWriteBarrier
00000000010391b4	jmp	0x103919b
00000000010391b6	leaq	0x198(%rdx), %rdi
00000000010391bd	callq	runtime.gcWriteBarrier
00000000010391c2	jmp	0x1039154
00000000010391c4	movq	%rax, %rdx
00000000010391c7	movq	%rcx, %rax
00000000010391ca	callq	runtime.gcWriteBarrier
00000000010391cf	movq	%rdx, %rax
00000000010391d2	jmp	0x10390fa
00000000010391d7	leaq	0x1c542(%rip), %rax
00000000010391de	movq	%rax, (%rsp)
00000000010391e2	movq	%r8, 0x8(%rsp)
00000000010391e7	movq	%rdx, 0x10(%rsp)
00000000010391ec	movq	%rsi, 0x18(%rsp)
00000000010391f1	movq	%rbx, 0x20(%rsp)
00000000010391f6	callq	runtime.growslice
00000000010391fb	movq	0x28(%rsp), %rax
0000000001039200	movq	0x30(%rsp), %rcx
0000000001039205	movq	0x38(%rsp), %rdx
000000000103920a	movq	0x40(%rsp), %rdi
000000000103920f	movq	%rdx, 0x10(%rdi)
0000000001039213	cmpl	$0x0, 0x9ba16(%rip)
000000000103921a	jne	0x1039232
000000000103921c	movq	%rax, (%rdi)
000000000103921f	movq	%rcx, %rdx
0000000001039222	movq	%rax, %r8
0000000001039225	movq	%rdi, %rax
0000000001039228	movq	0x48(%rsp), %rcx
000000000103922d	jmp	0x10390dd
0000000001039232	callq	runtime.gcWriteBarrier
0000000001039237	jmp	0x103921f
0000000001039239	movq	0x8(%rax), %rcx
000000000103923d	movq	(%rax), %rdi
0000000001039240	xorl	%edx, %edx
0000000001039242	jmp	0x1039247
0000000001039244	incq	%rdx
0000000001039247	cmpq	%rcx, %rdx
000000000103924a	jge	0x1039289
000000000103924c	movq	(%rdi,%rdx,8), %rbx
0000000001039250	cmpb	$0x0, 0x188(%rbx)
0000000001039257	je	0x1039244
0000000001039259	cmpl	$0x0, 0x9b9d0(%rip)
0000000001039260	jne	0x10392bc
0000000001039262	movq	%rbx, (%rdi)
0000000001039265	movq	(%rax), %rcx
0000000001039268	movq	0x8(%rax), %rbx
000000000103926c	cmpq	%rbx, %rdx
000000000103926f	jae	0x10392cc
0000000001039271	leaq	(%rcx,%rdx,8), %rdi
0000000001039275	cmpl	$0x0, 0x9b9b4(%rip)
000000000103927c	jne	0x10392a8
000000000103927e	leaq	runtime.firstmoduledata(%rip), %rbx
0000000001039285	movq	%rbx, (%rcx,%rdx,8)
0000000001039289	leaq	runtime.modulesSlice(%rip), %rcx
0000000001039290	movq	%rcx, (%rsp)
0000000001039294	movq	%rax, 0x8(%rsp)
0000000001039299	callq	runtime.atomicstorep
000000000103929e	movq	0x50(%rsp), %rbp
00000000010392a3	addq	$0x58, %rsp
00000000010392a7	retq
00000000010392a8	movq	%rax, %rcx
00000000010392ab	leaq	runtime.firstmoduledata(%rip), %rax
00000000010392b2	callq	runtime.gcWriteBarrier
00000000010392b7	movq	%rcx, %rax
00000000010392ba	jmp	0x1039289
00000000010392bc	movq	%rax, %rcx
00000000010392bf	movq	%rbx, %rax
00000000010392c2	callq	runtime.gcWriteBarrier
00000000010392c7	movq	%rcx, %rax
00000000010392ca	jmp	0x1039265
00000000010392cc	callq	runtime.panicindex
00000000010392d1	ud2
00000000010392d3	callq	runtime.morestack_noctxt
00000000010392d8	jmp	runtime.modulesinit
00000000010392dd	int3
00000000010392de	int3
00000000010392df	int3
runtime.moduledataverify:
00000000010392e0	movq	%gs:0x30, %rcx
00000000010392e9	cmpq	0x10(%rcx), %rsp
00000000010392ed	jbe	0x103932f
00000000010392ef	subq	$0x18, %rsp
00000000010392f3	movq	%rbp, 0x10(%rsp)
00000000010392f8	leaq	0x10(%rsp), %rbp
00000000010392fd	leaq	runtime.firstmoduledata(%rip), %rax
0000000001039304	jmp	0x1039320
0000000001039306	movq	%rax, 0x8(%rsp)
000000000103930b	movq	%rax, (%rsp)
000000000103930f	callq	runtime.moduledataverify1
0000000001039314	movq	0x8(%rsp), %rax
0000000001039319	movq	0x1c0(%rax), %rax
0000000001039320	testq	%rax, %rax
0000000001039323	jne	0x1039306
0000000001039325	movq	0x10(%rsp), %rbp
000000000103932a	addq	$0x18, %rsp
000000000103932e	retq
000000000103932f	callq	runtime.morestack_noctxt
0000000001039334	jmp	runtime.moduledataverify
0000000001039336	int3
0000000001039337	int3
0000000001039338	int3
0000000001039339	int3
000000000103933a	int3
000000000103933b	int3
000000000103933c	int3
000000000103933d	int3
000000000103933e	int3
000000000103933f	int3
runtime.moduledataverify1:
0000000001039340	movq	%gs:0x30, %rcx
0000000001039349	leaq	-0x80(%rsp), %rax
000000000103934e	cmpq	0x10(%rcx), %rax
0000000001039352	jbe	0x10399cb
0000000001039358	subq	$0x100, %rsp
000000000103935f	movq	%rbp, 0xf8(%rsp)
0000000001039367	leaq	0xf8(%rsp), %rbp
000000000103936f	movq	0x108(%rsp), %rax
0000000001039377	movq	(%rax), %rcx
000000000103937a	movq	(%rax), %rdx
000000000103937d	movl	(%rcx), %ecx
000000000103937f	movl	%ecx, 0x24(%rsp)
0000000001039383	cmpl	$-0x5, %ecx
0000000001039386	jne	0x103990b
000000000103938c	cmpb	$0x0, 0x4(%rdx)
0000000001039390	jne	0x103990b
0000000001039396	cmpb	$0x0, 0x5(%rdx)
000000000103939a	jne	0x103990b
00000000010393a0	cmpb	$0x1, 0x6(%rdx)
00000000010393a4	jne	0x103990b
00000000010393aa	cmpb	$0x8, 0x7(%rdx)
00000000010393ae	jne	0x103990b
00000000010393b4	movq	0x18(%rax), %rcx
00000000010393b8	movq	0x20(%rax), %rdx
00000000010393bc	leaq	-0x1(%rdx), %rbx
00000000010393c0	xorl	%esi, %esi
00000000010393c2	jmp	0x10393c7
00000000010393c4	movq	%r10, %rsi
00000000010393c7	cmpq	%rbx, %rsi
00000000010393ca	jge	0x10396b0
00000000010393d0	movq	%rsi, %rdi
00000000010393d3	shlq	$0x4, %rsi
00000000010393d7	movq	(%rsi,%rcx), %r8
00000000010393db	leaq	0x1(%rdi), %r9
00000000010393df	cmpq	%rdx, %r9
00000000010393e2	jae	0x1039904
00000000010393e8	movq	%r9, %r10
00000000010393eb	shlq	$0x4, %r9
00000000010393ef	movq	(%r9,%rcx), %r11
00000000010393f3	cmpq	%r11, %r8
00000000010393f6	jbe	0x10393c4
00000000010393f8	movq	(%rax), %rdx
00000000010393fb	movq	0x8(%rax), %r8
00000000010393ff	movq	0x8(%rsi,%rcx), %r11
0000000001039404	cmpq	%r8, %r11
0000000001039407	jae	0x10398fd
000000000103940d	addq	%rdx, %r11
0000000001039410	movq	0x8(%r9,%rcx), %rcx
0000000001039415	cmpq	%r8, %rcx
0000000001039418	jae	0x10398f6
000000000103941e	movq	%rdi, 0x78(%rsp)
0000000001039423	movq	%r10, 0x70(%rsp)
0000000001039428	movq	%r9, 0x68(%rsp)
000000000103942d	movq	%rsi, 0x60(%rsp)
0000000001039432	addq	%rdx, %rcx
0000000001039435	cmpq	%rbx, %r10
0000000001039438	jl	0x103967b
000000000103943e	movl	$0x3, %ecx
0000000001039443	leaq	0x31694(%rip), %rdx
000000000103944a	movq	%rcx, 0x28(%rsp)
000000000103944f	movq	%rdx, 0x80(%rsp)
0000000001039457	movq	%r11, (%rsp)
000000000103945b	movq	%rax, 0x8(%rsp)
0000000001039460	callq	runtime.funcname
0000000001039465	movq	0x108(%rsp), %rax
000000000103946d	movq	0x18(%rax), %rcx
0000000001039471	movq	0x20(%rax), %rdx
0000000001039475	movq	0x18(%rsp), %rbx
000000000103947a	movq	0x10(%rsp), %rsi
000000000103947f	movq	0x78(%rsp), %rdi
0000000001039484	cmpq	%rdx, %rdi
0000000001039487	jae	0x10398ef
000000000103948d	movq	0x60(%rsp), %r8
0000000001039492	movq	(%r8,%rcx), %r8
0000000001039496	movq	0x70(%rsp), %r9
000000000103949b	cmpq	%rdx, %r9
000000000103949e	jae	0x10398ef
00000000010394a4	movq	%rbx, 0x70(%rsp)
00000000010394a9	movq	%rsi, 0xa0(%rsp)
00000000010394b1	movq	%r8, 0x58(%rsp)
00000000010394b6	movq	0x68(%rsp), %rax
00000000010394bb	movq	(%rax,%rcx), %rax
00000000010394bf	movq	%rax, 0x50(%rsp)
00000000010394c4	callq	runtime.printlock
00000000010394c9	leaq	0x354c1(%rip), %rax
00000000010394d0	movq	%rax, (%rsp)
00000000010394d4	movq	$0x35, 0x8(%rsp)
00000000010394dd	callq	runtime.printstring
00000000010394e2	movq	0x58(%rsp), %rax
00000000010394e7	movq	%rax, (%rsp)
00000000010394eb	callq	runtime.printhex
00000000010394f0	callq	runtime.printsp
00000000010394f5	movq	0xa0(%rsp), %rax
00000000010394fd	movq	%rax, (%rsp)
0000000001039501	movq	0x70(%rsp), %rax
0000000001039506	movq	%rax, 0x8(%rsp)
000000000103950b	callq	runtime.printstring
0000000001039510	leaq	0x315a9(%rip), %rax
0000000001039517	movq	%rax, (%rsp)
000000000103951b	movq	$0x3, 0x8(%rsp)
0000000001039524	callq	runtime.printstring
0000000001039529	movq	0x50(%rsp), %rax
000000000103952e	movq	%rax, (%rsp)
0000000001039532	callq	runtime.printhex
0000000001039537	callq	runtime.printsp
000000000103953c	movq	0x80(%rsp), %rax
0000000001039544	movq	%rax, (%rsp)
0000000001039548	movq	0x28(%rsp), %rax
000000000103954d	movq	%rax, 0x8(%rsp)
0000000001039552	callq	runtime.printstring
0000000001039557	callq	runtime.printnl
000000000103955c	callq	runtime.printunlock
0000000001039561	movq	0x78(%rsp), %rax
0000000001039566	movq	0x108(%rsp), %rcx
000000000103956e	xorl	%edx, %edx
0000000001039570	jmp	0x10395fc
0000000001039575	movq	%rbx, 0xa0(%rsp)
000000000103957d	movq	%rsi, 0x60(%rsp)
0000000001039582	movq	0x70(%rsp), %rax
0000000001039587	movq	(%rax,%rdx), %rax
000000000103958b	movq	%rax, 0x58(%rsp)
0000000001039590	callq	runtime.printlock
0000000001039595	leaq	0x314f2(%rip), %rax
000000000103959c	movq	%rax, (%rsp)
00000000010395a0	movq	$0x1, 0x8(%rsp)
00000000010395a9	callq	runtime.printstring
00000000010395ae	movq	0x58(%rsp), %rax
00000000010395b3	movq	%rax, (%rsp)
00000000010395b7	callq	runtime.printhex
00000000010395bc	callq	runtime.printsp
00000000010395c1	movq	0xa0(%rsp), %rax
00000000010395c9	movq	%rax, (%rsp)
00000000010395cd	movq	0x60(%rsp), %rax
00000000010395d2	movq	%rax, 0x8(%rsp)
00000000010395d7	callq	runtime.printstring
00000000010395dc	callq	runtime.printnl
00000000010395e1	callq	runtime.printunlock
00000000010395e6	movq	0x68(%rsp), %rax
00000000010395eb	leaq	0x1(%rax), %rdx
00000000010395ef	movq	0x78(%rsp), %rax
00000000010395f4	movq	0x108(%rsp), %rcx
00000000010395fc	cmpq	%rax, %rdx
00000000010395ff	jg	0x10398d4
0000000001039605	movq	(%rcx), %rbx
0000000001039608	movq	0x8(%rcx), %rsi
000000000103960c	movq	0x18(%rcx), %rdi
0000000001039610	movq	0x20(%rcx), %r8
0000000001039614	cmpq	%r8, %rdx
0000000001039617	jae	0x10398cd
000000000103961d	movq	%rdx, %r8
0000000001039620	shlq	$0x4, %rdx
0000000001039624	movq	0x8(%rdx,%rdi), %rdi
0000000001039629	cmpq	%rsi, %rdi
000000000103962c	jae	0x10398cd
0000000001039632	movq	%rdx, 0x70(%rsp)
0000000001039637	movq	%r8, 0x68(%rsp)
000000000103963c	leaq	(%rdi,%rbx), %rax
0000000001039640	movq	%rax, (%rsp)
0000000001039644	movq	%rcx, 0x8(%rsp)
0000000001039649	callq	runtime.funcname
000000000103964e	movq	0x108(%rsp), %rax
0000000001039656	movq	0x20(%rax), %rcx
000000000103965a	movq	0x18(%rax), %rdx
000000000103965e	movq	0x10(%rsp), %rbx
0000000001039663	movq	0x18(%rsp), %rsi
0000000001039668	movq	0x68(%rsp), %rdi
000000000103966d	cmpq	%rcx, %rdi
0000000001039670	jb	0x1039575
0000000001039676	jmp	0x10398cd
000000000103967b	movq	%r11, 0x98(%rsp)
0000000001039683	movq	%rcx, (%rsp)
0000000001039687	movq	%rax, 0x8(%rsp)
000000000103968c	callq	runtime.funcname
0000000001039691	movq	0x18(%rsp), %rcx
0000000001039696	movq	0x10(%rsp), %rdx
000000000103969b	movq	0x108(%rsp), %rax
00000000010396a3	movq	0x98(%rsp), %r11
00000000010396ab	jmp	0x103944a
00000000010396b0	movq	0x50(%rax), %rsi
00000000010396b4	testq	%rdx, %rdx
00000000010396b7	jbe	0x10398ab
00000000010396bd	cmpq	%rsi, (%rcx)
00000000010396c0	jne	0x10398b2
00000000010396c6	shlq	$0x4, %rbx
00000000010396ca	movq	(%rbx,%rcx), %rcx
00000000010396ce	cmpq	%rcx, 0x58(%rax)
00000000010396d2	jne	0x10398b2
00000000010396d8	movq	0x170(%rax), %rcx
00000000010396df	movq	0x178(%rax), %rdx
00000000010396e6	testq	%rdx, %rdx
00000000010396e9	jle	0x10397c9
00000000010396ef	movq	%rdx, 0x78(%rsp)
00000000010396f4	xorl	%ebx, %ebx
00000000010396f6	jmp	0x1039712
00000000010396f8	movq	0x90(%rsp), %rsi
0000000001039700	addq	$0x28, %rsi
0000000001039704	movq	0x108(%rsp), %rax
000000000103970c	movq	%rcx, %rbx
000000000103970f	movq	%rsi, %rcx
0000000001039712	movq	(%rcx), %rsi
0000000001039715	movq	%rsi, 0xd0(%rsp)
000000000103971d	movups	0x8(%rcx), %xmm0
0000000001039721	movups	%xmm0, 0xd8(%rsp)
0000000001039729	movups	0x18(%rcx), %xmm0
000000000103972d	movups	%xmm0, 0xe8(%rsp)
0000000001039735	movq	0xd0(%rsp), %rsi
000000000103973d	movq	%rsi, 0xa8(%rsp)
0000000001039745	movups	0xd8(%rsp), %xmm0
000000000103974d	movups	%xmm0, 0xb0(%rsp)
0000000001039755	movups	0xe8(%rsp), %xmm0
000000000103975d	movups	%xmm0, 0xc0(%rsp)
0000000001039765	movq	0xc8(%rsp), %rsi
000000000103976d	movq	0xc0(%rsp), %rdi
0000000001039775	movq	0xb8(%rsp), %r8
000000000103977d	movq	(%rsi), %r9
0000000001039780	movq	0x8(%rsi), %rsi
0000000001039784	cmpq	%rsi, %rdi
0000000001039787	jne	0x10397e1
0000000001039789	movq	%rcx, 0x90(%rsp)
0000000001039791	movq	%rbx, 0x70(%rsp)
0000000001039796	movq	%r8, (%rsp)
000000000103979a	movq	%r9, 0x8(%rsp)
000000000103979f	movq	%rdi, 0x10(%rsp)
00000000010397a4	callq	runtime.memequal
00000000010397a9	leaq	0x18(%rsp), %rax
00000000010397ae	cmpb	$0x0, (%rax)
00000000010397b1	je	0x10397d9
00000000010397b3	movq	0x70(%rsp), %rcx
00000000010397b8	incq	%rcx
00000000010397bb	movq	0x78(%rsp), %rdx
00000000010397c0	cmpq	%rdx, %rcx
00000000010397c3	jl	0x10396f8
00000000010397c9	movq	0xf8(%rsp), %rbp
00000000010397d1	addq	$0x100, %rsp
00000000010397d8	retq
00000000010397d9	movq	0x108(%rsp), %rax
00000000010397e1	movq	0x168(%rax), %rcx
00000000010397e8	movq	%rcx, 0x78(%rsp)
00000000010397ed	movq	0x160(%rax), %rax
00000000010397f4	movq	%rax, 0xa0(%rsp)
00000000010397fc	movq	0xb0(%rsp), %rdx
0000000001039804	movq	%rdx, 0x70(%rsp)
0000000001039809	movq	0xa8(%rsp), %rbx
0000000001039811	movq	%rbx, 0x88(%rsp)
0000000001039819	callq	runtime.printlock
000000000103981e	leaq	0x339f1(%rip), %rax
0000000001039825	movq	%rax, (%rsp)
0000000001039829	movq	$0x1e, 0x8(%rsp)
0000000001039832	callq	runtime.printstring
0000000001039837	movq	0xa0(%rsp), %rax
000000000103983f	movq	%rax, (%rsp)
0000000001039843	movq	0x78(%rsp), %rax
0000000001039848	movq	%rax, 0x8(%rsp)
000000000103984d	callq	runtime.printstring
0000000001039852	leaq	0x3134c(%rip), %rax
0000000001039859	movq	%rax, (%rsp)
000000000103985d	movq	$0x5, 0x8(%rsp)
0000000001039866	callq	runtime.printstring
000000000103986b	movq	0x88(%rsp), %rax
0000000001039873	movq	%rax, (%rsp)
0000000001039877	movq	0x70(%rsp), %rax
000000000103987c	movq	%rax, 0x8(%rsp)
0000000001039881	callq	runtime.printstring
0000000001039886	callq	runtime.printnl
000000000103988b	callq	runtime.printunlock
0000000001039890	leaq	0x31a41(%rip), %rax
0000000001039897	movq	%rax, (%rsp)
000000000103989b	movq	$0xc, 0x8(%rsp)
00000000010398a4	callq	runtime.throw
00000000010398a9	ud2
00000000010398ab	callq	runtime.panicindex
00000000010398b0	ud2
00000000010398b2	leaq	0x328de(%rip), %rax
00000000010398b9	movq	%rax, (%rsp)
00000000010398bd	movq	$0x16, 0x8(%rsp)
00000000010398c6	callq	runtime.throw
00000000010398cb	ud2
00000000010398cd	callq	runtime.panicindex
00000000010398d2	ud2
00000000010398d4	leaq	0x33564(%rip), %rax
00000000010398db	movq	%rax, (%rsp)
00000000010398df	movq	$0x1c, 0x8(%rsp)
00000000010398e8	callq	runtime.throw
00000000010398ed	ud2
00000000010398ef	callq	runtime.panicindex
00000000010398f4	ud2
00000000010398f6	callq	runtime.panicindex
00000000010398fb	ud2
00000000010398fd	callq	runtime.panicindex
0000000001039902	ud2
0000000001039904	callq	runtime.panicindex
0000000001039909	ud2
000000000103990b	movzbl	0x4(%rdx), %eax
000000000103990f	movq	%rax, 0x48(%rsp)
0000000001039914	movzbl	0x5(%rdx), %ecx
0000000001039918	movq	%rcx, 0x40(%rsp)
000000000103991d	movzbl	0x6(%rdx), %ebx
0000000001039921	movq	%rbx, 0x38(%rsp)
0000000001039926	movzbl	0x7(%rdx), %edx
000000000103992a	movq	%rdx, 0x30(%rsp)
000000000103992f	callq	runtime.printlock
0000000001039934	leaq	0x3469c(%rip), %rax
000000000103993b	movq	%rax, (%rsp)
000000000103993f	movq	$0x27, 0x8(%rsp)
0000000001039948	callq	runtime.printstring
000000000103994d	movl	0x24(%rsp), %eax
0000000001039951	movq	%rax, (%rsp)
0000000001039955	callq	runtime.printhex
000000000103995a	callq	runtime.printsp
000000000103995f	movq	0x48(%rsp), %rax
0000000001039964	movq	%rax, (%rsp)
0000000001039968	callq	runtime.printhex
000000000103996d	callq	runtime.printsp
0000000001039972	movq	0x40(%rsp), %rax
0000000001039977	movq	%rax, (%rsp)
000000000103997b	callq	runtime.printhex
0000000001039980	callq	runtime.printsp
0000000001039985	movq	0x38(%rsp), %rax
000000000103998a	movq	%rax, (%rsp)
000000000103998e	callq	runtime.printhex
0000000001039993	callq	runtime.printsp
0000000001039998	movq	0x30(%rsp), %rax
000000000103999d	movq	%rax, (%rsp)
00000000010399a1	callq	runtime.printhex
00000000010399a6	callq	runtime.printnl
00000000010399ab	callq	runtime.printunlock
00000000010399b0	leaq	0x338f5(%rip), %rax
00000000010399b7	movq	%rax, (%rsp)
00000000010399bb	movq	$0x1e, 0x8(%rsp)
00000000010399c4	callq	runtime.throw
00000000010399c9	ud2
00000000010399cb	callq	runtime.morestack_noctxt
00000000010399d0	jmp	runtime.moduledataverify1
00000000010399d5	int3
00000000010399d6	int3
00000000010399d7	int3
00000000010399d8	int3
00000000010399d9	int3
00000000010399da	int3
00000000010399db	int3
00000000010399dc	int3
00000000010399dd	int3
00000000010399de	int3
00000000010399df	int3
runtime.findmoduledatap:
00000000010399e0	movq	0x8(%rsp), %rax
00000000010399e5	leaq	runtime.firstmoduledata(%rip), %rcx
00000000010399ec	jmp	0x10399f5
00000000010399ee	movq	0x1c0(%rcx), %rcx
00000000010399f5	testq	%rcx, %rcx
00000000010399f8	je	0x1039a12
00000000010399fa	movq	0x50(%rcx), %rdx
00000000010399fe	cmpq	%rax, %rdx
0000000001039a01	ja	0x10399ee
0000000001039a03	movq	0x58(%rcx), %rdx
0000000001039a07	cmpq	%rdx, %rax
0000000001039a0a	jae	0x10399ee
0000000001039a0c	movq	%rcx, 0x10(%rsp)
0000000001039a11	retq
0000000001039a12	movq	$0x0, 0x10(%rsp)
0000000001039a1b	retq
0000000001039a1c	int3
0000000001039a1d	int3
0000000001039a1e	int3
0000000001039a1f	int3
runtime.findfunc:
0000000001039a20	movq	%gs:0x30, %rcx
0000000001039a29	cmpq	0x10(%rcx), %rsp
0000000001039a2d	jbe	0x1039b89
0000000001039a33	subq	$0x18, %rsp
0000000001039a37	movq	%rbp, 0x10(%rsp)
0000000001039a3c	leaq	0x10(%rsp), %rbp
0000000001039a41	movq	0x20(%rsp), %rax
0000000001039a46	movq	%rax, (%rsp)
0000000001039a4a	callq	runtime.findmoduledatap
0000000001039a4f	movq	0x8(%rsp), %rax
0000000001039a54	testq	%rax, %rax
0000000001039a57	je	0x1039b39
0000000001039a5d	movq	0x50(%rax), %rcx
0000000001039a61	movq	0x20(%rsp), %rdx
0000000001039a66	movq	%rdx, %rbx
0000000001039a69	subq	%rcx, %rdx
0000000001039a6c	movq	%rdx, %rcx
0000000001039a6f	shrq	$0xc, %rdx
0000000001039a73	leaq	(%rdx,%rdx,4), %rdx
0000000001039a77	shlq	$0x2, %rdx
0000000001039a7b	addq	0x48(%rax), %rdx
0000000001039a7f	andq	$0xfff, %rcx
0000000001039a86	shrq	$0x8, %rcx
0000000001039a8a	movl	(%rdx), %esi
0000000001039a8c	cmpq	$0x10, %rcx
0000000001039a90	jae	0x1039b82
0000000001039a96	movzbl	0x4(%rdx,%rcx), %ecx
0000000001039a9b	addl	%esi, %ecx
0000000001039a9d	movq	0x18(%rax), %rdx
0000000001039aa1	movq	0x20(%rax), %rsi
0000000001039aa5	cmpl	%esi, %ecx
0000000001039aa7	jb	0x1039aad
0000000001039aa9	leaq	-0x1(%rsi), %rcx
0000000001039aad	movl	%ecx, %edi
0000000001039aaf	cmpq	%rsi, %rdi
0000000001039ab2	jae	0x1039b7b
0000000001039ab8	shlq	$0x4, %rdi
0000000001039abc	movq	(%rdx,%rdi), %rdi
0000000001039ac0	cmpq	%rdi, %rbx
0000000001039ac3	jb	0x1039ac9
0000000001039ac5	jmp	0x1039b1f
0000000001039ac7	decl	%ecx
0000000001039ac9	movl	%ecx, %edi
0000000001039acb	cmpq	%rsi, %rdi
0000000001039ace	jae	0x1039b74
0000000001039ad4	shlq	$0x4, %rdi
0000000001039ad8	movq	(%rdi,%rdx), %rdi
0000000001039adc	cmpq	%rbx, %rdi
0000000001039adf	jbe	0x1039ae5
0000000001039ae1	testl	%ecx, %ecx
0000000001039ae3	ja	0x1039ac7
0000000001039ae5	testl	%ecx, %ecx
0000000001039ae7	je	0x1039b59
0000000001039ae9	movq	0x8(%rax), %rbx
0000000001039aed	movq	(%rax), %rdi
0000000001039af0	movl	%ecx, %ecx
0000000001039af2	cmpq	%rsi, %rcx
0000000001039af5	jae	0x1039b4b
0000000001039af7	shlq	$0x4, %rcx
0000000001039afb	movq	0x8(%rdx,%rcx), %rcx
0000000001039b00	cmpq	%rbx, %rcx
0000000001039b03	jae	0x1039b4b
0000000001039b05	addq	%rdi, %rcx
0000000001039b08	movq	%rcx, 0x28(%rsp)
0000000001039b0d	movq	%rax, 0x30(%rsp)
0000000001039b12	movq	0x10(%rsp), %rbp
0000000001039b17	addq	$0x18, %rsp
0000000001039b1b	retq
0000000001039b1c	movl	%r8d, %ecx
0000000001039b1f	leal	0x1(%rcx), %edi
0000000001039b22	cmpq	%rsi, %rdi
0000000001039b25	jae	0x1039b52
0000000001039b27	movl	%edi, %r8d
0000000001039b2a	shlq	$0x4, %rdi
0000000001039b2e	movq	(%rdx,%rdi), %rdi
0000000001039b32	cmpq	%rbx, %rdi
0000000001039b35	jbe	0x1039b1c
0000000001039b37	jmp	0x1039ae9
0000000001039b39	xorps	%xmm0, %xmm0
0000000001039b3c	movups	%xmm0, 0x28(%rsp)
0000000001039b41	movq	0x10(%rsp), %rbp
0000000001039b46	addq	$0x18, %rsp
0000000001039b4a	retq
0000000001039b4b	callq	runtime.panicindex
0000000001039b50	ud2
0000000001039b52	callq	runtime.panicindex
0000000001039b57	ud2
0000000001039b59	leaq	0x33f96(%rip), %rax
0000000001039b60	movq	%rax, (%rsp)
0000000001039b64	movq	$0x23, 0x8(%rsp)
0000000001039b6d	callq	runtime.throw
0000000001039b72	ud2
0000000001039b74	callq	runtime.panicindex
0000000001039b79	ud2
0000000001039b7b	callq	runtime.panicindex
0000000001039b80	ud2
0000000001039b82	callq	runtime.panicindex
0000000001039b87	ud2
0000000001039b89	callq	runtime.morestack_noctxt
0000000001039b8e	jmp	runtime.findfunc
0000000001039b93	int3
0000000001039b94	int3
0000000001039b95	int3
0000000001039b96	int3
0000000001039b97	int3
0000000001039b98	int3
0000000001039b99	int3
0000000001039b9a	int3
0000000001039b9b	int3
0000000001039b9c	int3
0000000001039b9d	int3
0000000001039b9e	int3
0000000001039b9f	int3
runtime.pcvalue:
0000000001039ba0	movq	%gs:0x30, %rcx
0000000001039ba9	leaq	-0x20(%rsp), %rax
0000000001039bae	cmpq	0x10(%rcx), %rax
0000000001039bb2	jbe	0x103a11a
0000000001039bb8	subq	$0xa0, %rsp
0000000001039bbf	movq	%rbp, 0x98(%rsp)
0000000001039bc7	leaq	0x98(%rsp), %rbp
0000000001039bcf	movl	0xb8(%rsp), %eax
0000000001039bd6	testl	%eax, %eax
0000000001039bd8	je	0x103a076
0000000001039bde	movq	0xc8(%rsp), %rcx
0000000001039be6	testq	%rcx, %rcx
0000000001039be9	je	0x103a069
0000000001039bef	movq	0xc0(%rsp), %rdx
0000000001039bf7	xorl	%ebx, %ebx
0000000001039bf9	jmp	0x1039bff
0000000001039bfb	leaq	0x1(%rsi), %rbx
0000000001039bff	cmpq	$0x10, %rbx
0000000001039c03	jge	0x1039c38
0000000001039c05	movq	%rbx, %rsi
0000000001039c08	shlq	$0x4, %rbx
0000000001039c0c	movl	0x8(%rcx,%rbx), %edi
0000000001039c10	cmpl	%edi, %eax
0000000001039c12	jne	0x1039bfb
0000000001039c14	movq	(%rcx,%rbx), %rdi
0000000001039c18	cmpq	%rdi, %rdx
0000000001039c1b	jne	0x1039bfb
0000000001039c1d	movl	0xc(%rcx,%rbx), %eax
0000000001039c21	movl	%eax, 0xd8(%rsp)
0000000001039c28	movq	0x98(%rsp), %rbp
0000000001039c30	addq	$0xa0, %rsp
0000000001039c37	retq
0000000001039c38	movq	0xa8(%rsp), %rbx
0000000001039c40	testq	%rbx, %rbx
0000000001039c43	je	0x103a039
0000000001039c49	movq	0xb0(%rsp), %rsi
0000000001039c51	movq	0x10(%rsi), %rdi
0000000001039c55	movq	0x8(%rsi), %r8
0000000001039c59	movq	(%rsi), %r9
0000000001039c5c	movslq	%eax, %r10
0000000001039c5f	cmpq	%r8, %r10
0000000001039c62	ja	0x103a0ba
0000000001039c68	movq	%r10, 0x80(%rsp)
0000000001039c70	movq	(%rbx), %r11
0000000001039c73	movq	%r11, 0x58(%rsp)
0000000001039c78	movl	$0xffffffff, 0x54(%rsp)
0000000001039c80	subq	%r10, %r8
0000000001039c83	subq	%r10, %rdi
0000000001039c86	movq	%rdi, %r11
0000000001039c89	negq	%rdi
0000000001039c8c	sarq	$0x3f, %rdi
0000000001039c90	andq	%r10, %rdi
0000000001039c93	addq	%r9, %rdi
0000000001039c96	jmp	0x1039ca9
0000000001039c98	movq	0xa8(%rsp), %rbx
0000000001039ca0	movq	%rax, %r11
0000000001039ca3	movq	%rcx, %r8
0000000001039ca6	movq	%rdx, %rdi
0000000001039ca9	movq	0x58(%rsp), %rax
0000000001039cae	cmpq	%rax, (%rbx)
0000000001039cb1	sete	0x28(%rsp)
0000000001039cb6	movq	%rdi, (%rsp)
0000000001039cba	movq	%r8, 0x8(%rsp)
0000000001039cbf	movq	%r11, 0x10(%rsp)
0000000001039cc4	leaq	0x58(%rsp), %rax
0000000001039cc9	movq	%rax, 0x18(%rsp)
0000000001039cce	leaq	0x54(%rsp), %rcx
0000000001039cd3	movq	%rcx, 0x20(%rsp)
0000000001039cd8	callq	runtime.step
0000000001039cdd	movq	0x40(%rsp), %rax
0000000001039ce2	movq	0x38(%rsp), %rcx
0000000001039ce7	movq	0x30(%rsp), %rdx
0000000001039cec	leaq	0x48(%rsp), %rbx
0000000001039cf1	cmpb	$0x0, (%rbx)
0000000001039cf4	je	0x1039da0
0000000001039cfa	movq	0x58(%rsp), %rsi
0000000001039cff	movq	0xc0(%rsp), %rdi
0000000001039d07	cmpq	%rsi, %rdi
0000000001039d0a	jae	0x1039c98
0000000001039d0c	movq	0xc8(%rsp), %rax
0000000001039d14	testq	%rax, %rax
0000000001039d17	je	0x1039d85
0000000001039d19	movq	%gs:0x30, %rcx
0000000001039d22	movq	0x30(%rcx), %rcx
0000000001039d26	movl	0x11c(%rcx), %edx
0000000001039d2c	movl	0x120(%rcx), %ebx
0000000001039d32	movl	%ebx, 0x11c(%rcx)
0000000001039d38	movl	%edx, %esi
0000000001039d3a	shll	$0x11, %edx
0000000001039d3d	xorl	%esi, %edx
0000000001039d3f	movl	%ebx, %esi
0000000001039d41	xorl	%edx, %ebx
0000000001039d43	shrl	$0x7, %edx
0000000001039d46	xorl	%ebx, %edx
0000000001039d48	movl	%esi, %ebx
0000000001039d4a	shrl	$0x10, %esi
0000000001039d4d	xorl	%edx, %esi
0000000001039d4f	movl	%esi, 0x120(%rcx)
0000000001039d55	movl	0x54(%rsp), %ecx
0000000001039d59	leal	(%rbx,%rsi), %edx
0000000001039d5c	shlq	$0x4, %rdx
0000000001039d60	shrq	$0x20, %rdx
0000000001039d64	cmpq	$0x10, %rdx
0000000001039d68	jae	0x103a0b3
0000000001039d6e	shlq	$0x4, %rdx
0000000001039d72	movq	%rdi, (%rax,%rdx)
0000000001039d76	movl	0xb8(%rsp), %ebx
0000000001039d7d	movl	%ebx, 0x8(%rax,%rdx)
0000000001039d81	movl	%ecx, 0xc(%rax,%rdx)
0000000001039d85	movl	0x54(%rsp), %eax
0000000001039d89	movl	%eax, 0xd8(%rsp)
0000000001039d90	movq	0x98(%rsp), %rbp
0000000001039d98	addq	$0xa0, %rsp
0000000001039d9f	retq
0000000001039da0	cmpl	$0x0, 0x9ad6d(%rip)
0000000001039da7	jne	0x103a01e
0000000001039dad	movzbl	0xd0(%rsp), %esi
0000000001039db5	testb	%sil, %sil
0000000001039db8	je	0x103a01e
0000000001039dbe	movq	%rax, 0x68(%rsp)
0000000001039dc3	movq	%rcx, 0x60(%rsp)
0000000001039dc8	movq	%rdx, 0x88(%rsp)
0000000001039dd0	movq	0xa8(%rsp), %rax
0000000001039dd8	movq	%rax, (%rsp)
0000000001039ddc	movq	0xb0(%rsp), %rcx
0000000001039de4	movq	%rcx, 0x8(%rsp)
0000000001039de9	callq	runtime.funcname
0000000001039dee	movq	0x18(%rsp), %rax
0000000001039df3	movq	%rax, 0x78(%rsp)
0000000001039df8	movq	0x10(%rsp), %rcx
0000000001039dfd	movq	%rcx, 0x90(%rsp)
0000000001039e05	movq	0x58(%rsp), %rdx
0000000001039e0a	movq	%rdx, 0x70(%rsp)
0000000001039e0f	callq	runtime.printlock
0000000001039e14	leaq	0x33e3d(%rip), %rax
0000000001039e1b	movq	%rax, (%rsp)
0000000001039e1f	movq	$0x24, 0x8(%rsp)
0000000001039e28	callq	runtime.printstring
0000000001039e2d	movq	0x90(%rsp), %rax
0000000001039e35	movq	%rax, (%rsp)
0000000001039e39	movq	0x78(%rsp), %rax
0000000001039e3e	movq	%rax, 0x8(%rsp)
0000000001039e43	callq	runtime.printstring
0000000001039e48	leaq	0x30cbc(%rip), %rax
0000000001039e4f	movq	%rax, (%rsp)
0000000001039e53	movq	$0x4, 0x8(%rsp)
0000000001039e5c	callq	runtime.printstring
0000000001039e61	movq	0x70(%rsp), %rax
0000000001039e66	movq	%rax, (%rsp)
0000000001039e6a	callq	runtime.printhex
0000000001039e6f	leaq	0x31196(%rip), %rax
0000000001039e76	movq	%rax, (%rsp)
0000000001039e7a	movq	$0xa, 0x8(%rsp)
0000000001039e83	callq	runtime.printstring
0000000001039e88	movq	0xc0(%rsp), %rax
0000000001039e90	movq	%rax, (%rsp)
0000000001039e94	callq	runtime.printhex
0000000001039e99	leaq	0x30d2d(%rip), %rax
0000000001039ea0	movq	%rax, (%rsp)
0000000001039ea4	movq	$0x5, 0x8(%rsp)
0000000001039ead	callq	runtime.printstring
0000000001039eb2	movq	0x88(%rsp), %rax
0000000001039eba	movq	%rax, (%rsp)
0000000001039ebe	movq	0x60(%rsp), %rax
0000000001039ec3	movq	%rax, 0x8(%rsp)
0000000001039ec8	movq	0x68(%rsp), %rax
0000000001039ecd	movq	%rax, 0x10(%rsp)
0000000001039ed2	callq	runtime.printslice
0000000001039ed7	callq	runtime.printnl
0000000001039edc	callq	runtime.printunlock
0000000001039ee1	movq	0xb0(%rsp), %rax
0000000001039ee9	movq	0x10(%rax), %rcx
0000000001039eed	movq	0x8(%rax), %rdx
0000000001039ef1	movq	(%rax), %rax
0000000001039ef4	movq	0x80(%rsp), %rbx
0000000001039efc	cmpq	%rdx, %rbx
0000000001039eff	ja	0x103a0ac
0000000001039f05	movq	0xa8(%rsp), %rsi
0000000001039f0d	movq	(%rsi), %rdi
0000000001039f10	movq	%rdi, 0x58(%rsp)
0000000001039f15	movl	$0xffffffff, 0x54(%rsp)
0000000001039f1d	subq	%rbx, %rcx
0000000001039f20	movq	%rcx, %rdi
0000000001039f23	negq	%rcx
0000000001039f26	sarq	$0x3f, %rcx
0000000001039f2a	andq	%rbx, %rcx
0000000001039f2d	addq	%rcx, %rax
0000000001039f30	subq	%rbx, %rdx
0000000001039f33	jmp	0x1039fcb
0000000001039f38	movq	%rdx, 0x68(%rsp)
0000000001039f3d	movq	%rax, 0x60(%rsp)
0000000001039f42	movq	%rcx, 0x88(%rsp)
0000000001039f4a	movq	0x58(%rsp), %rax
0000000001039f4f	movq	%rax, 0x70(%rsp)
0000000001039f54	callq	runtime.printlock
0000000001039f59	leaq	0x30dae(%rip), %rax
0000000001039f60	movq	%rax, (%rsp)
0000000001039f64	movq	$0x7, 0x8(%rsp)
0000000001039f6d	callq	runtime.printstring
0000000001039f72	movslq	0x54(%rsp), %rax
0000000001039f77	movq	%rax, (%rsp)
0000000001039f7b	callq	runtime.printint
0000000001039f80	leaq	0x31099(%rip), %rax
0000000001039f87	movq	%rax, (%rsp)
0000000001039f8b	movq	$0xa, 0x8(%rsp)
0000000001039f94	callq	runtime.printstring
0000000001039f99	movq	0x70(%rsp), %rax
0000000001039f9e	movq	%rax, (%rsp)
0000000001039fa2	callq	runtime.printhex
0000000001039fa7	callq	runtime.printnl
0000000001039fac	callq	runtime.printunlock
0000000001039fb1	movq	0xa8(%rsp), %rsi
0000000001039fb9	movq	0x68(%rsp), %rdi
0000000001039fbe	movq	0x60(%rsp), %rdx
0000000001039fc3	movq	0x88(%rsp), %rax
0000000001039fcb	movq	0x58(%rsp), %rcx
0000000001039fd0	cmpq	%rcx, (%rsi)
0000000001039fd3	sete	0x28(%rsp)
0000000001039fd8	movq	%rax, (%rsp)
0000000001039fdc	movq	%rdx, 0x8(%rsp)
0000000001039fe1	movq	%rdi, 0x10(%rsp)
0000000001039fe6	leaq	0x58(%rsp), %rax
0000000001039feb	movq	%rax, 0x18(%rsp)
0000000001039ff0	leaq	0x54(%rsp), %rcx
0000000001039ff5	movq	%rcx, 0x20(%rsp)
0000000001039ffa	callq	runtime.step
0000000001039fff	movq	0x38(%rsp), %rax
000000000103a004	movq	0x30(%rsp), %rcx
000000000103a009	movq	0x40(%rsp), %rdx
000000000103a00e	leaq	0x48(%rsp), %rbx
000000000103a013	cmpb	$0x0, (%rbx)
000000000103a016	jne	0x1039f38
000000000103a01c	jmp	0x103a091
000000000103a01e	movl	$0xffffffff, 0xd8(%rsp)
000000000103a029	movq	0x98(%rsp), %rbp
000000000103a031	addq	$0xa0, %rsp
000000000103a038	retq
000000000103a039	movzbl	0xd0(%rsp), %eax
000000000103a041	testb	%al, %al
000000000103a043	je	0x103a04e
000000000103a045	cmpl	$0x0, 0x9aac8(%rip)
000000000103a04c	je	0x103a0c1
000000000103a04e	movl	$0xffffffff, 0xd8(%rsp)
000000000103a059	movq	0x98(%rsp), %rbp
000000000103a061	addq	$0xa0, %rsp
000000000103a068	retq
000000000103a069	movq	0xc0(%rsp), %rdx
000000000103a071	jmp	0x1039c38
000000000103a076	movl	$0xffffffff, 0xd8(%rsp)
000000000103a081	movq	0x98(%rsp), %rbp
000000000103a089	addq	$0xa0, %rsp
000000000103a090	retq
000000000103a091	leaq	0x32da7(%rip), %rax
000000000103a098	movq	%rax, (%rsp)
000000000103a09c	movq	$0x1c, 0x8(%rsp)
000000000103a0a5	callq	runtime.throw
000000000103a0aa	ud2
000000000103a0ac	callq	runtime.panicslice
000000000103a0b1	ud2
000000000103a0b3	callq	runtime.panicindex
000000000103a0b8	ud2
000000000103a0ba	callq	runtime.panicslice
000000000103a0bf	ud2
000000000103a0c1	movq	(%rbx), %rax
000000000103a0c4	movq	%rax, 0x70(%rsp)
000000000103a0c9	callq	runtime.printlock
000000000103a0ce	leaq	0x32e4a(%rip), %rax
000000000103a0d5	movq	%rax, (%rsp)
000000000103a0d9	movq	$0x1c, 0x8(%rsp)
000000000103a0e2	callq	runtime.printstring
000000000103a0e7	movq	0x70(%rsp), %rax
000000000103a0ec	movq	%rax, (%rsp)
000000000103a0f0	callq	runtime.printhex
000000000103a0f5	callq	runtime.printnl
000000000103a0fa	callq	runtime.printunlock
000000000103a0ff	leaq	0x314e2(%rip), %rax
000000000103a106	movq	%rax, (%rsp)
000000000103a10a	movq	$0xe, 0x8(%rsp)
000000000103a113	callq	runtime.throw
000000000103a118	ud2
000000000103a11a	callq	runtime.morestack_noctxt
000000000103a11f	jmp	runtime.pcvalue
000000000103a124	int3
000000000103a125	int3
000000000103a126	int3
000000000103a127	int3
000000000103a128	int3
000000000103a129	int3
000000000103a12a	int3
000000000103a12b	int3
000000000103a12c	int3
000000000103a12d	int3
000000000103a12e	int3
000000000103a12f	int3
runtime.funcname:
000000000103a130	movq	%gs:0x30, %rcx
000000000103a139	cmpq	0x10(%rcx), %rsp
000000000103a13d	jbe	0x103a1a7
000000000103a13f	subq	$0x20, %rsp
000000000103a143	movq	%rbp, 0x18(%rsp)
000000000103a148	leaq	0x18(%rsp), %rbp
000000000103a14d	movq	0x28(%rsp), %rax
000000000103a152	testq	%rax, %rax
000000000103a155	je	0x103a15e
000000000103a157	movl	0x8(%rax), %eax
000000000103a15a	testl	%eax, %eax
000000000103a15c	jne	0x103a187
000000000103a15e	xorl	%eax, %eax
000000000103a160	movq	%rax, (%rsp)
000000000103a164	callq	runtime.gostringnocopy
000000000103a169	movq	0x10(%rsp), %rax
000000000103a16e	movq	0x8(%rsp), %rcx
000000000103a173	movq	%rcx, 0x38(%rsp)
000000000103a178	movq	%rax, 0x40(%rsp)
000000000103a17d	movq	0x18(%rsp), %rbp
000000000103a182	addq	$0x20, %rsp
000000000103a186	retq
000000000103a187	movslq	%eax, %rax
000000000103a18a	movq	0x30(%rsp), %rcx
000000000103a18f	movq	0x8(%rcx), %rdx
000000000103a193	movq	(%rcx), %rcx
000000000103a196	cmpq	%rdx, %rax
000000000103a199	jae	0x103a1a0
000000000103a19b	addq	%rcx, %rax
000000000103a19e	jmp	0x103a160
000000000103a1a0	callq	runtime.panicindex
000000000103a1a5	ud2
000000000103a1a7	callq	runtime.morestack_noctxt
000000000103a1ac	jmp	runtime.funcname
000000000103a1ae	int3
000000000103a1af	int3
runtime.funcnameFromNameoff:
000000000103a1b0	movq	%gs:0x30, %rcx
000000000103a1b9	cmpq	0x10(%rcx), %rsp
000000000103a1bd	jbe	0x103a232
000000000103a1bf	subq	$0x20, %rsp
000000000103a1c3	movq	%rbp, 0x18(%rsp)
000000000103a1c8	leaq	0x18(%rsp), %rbp
000000000103a1cd	movq	0x28(%rsp), %rax
000000000103a1d2	testq	%rax, %rax
000000000103a1d5	je	0x103a219
000000000103a1d7	movl	0x38(%rsp), %eax
000000000103a1db	movslq	%eax, %rax
000000000103a1de	movq	0x30(%rsp), %rcx
000000000103a1e3	movq	(%rcx), %rdx
000000000103a1e6	movq	0x8(%rcx), %rcx
000000000103a1ea	cmpq	%rcx, %rax
000000000103a1ed	jae	0x103a22b
000000000103a1ef	addq	%rdx, %rax
000000000103a1f2	movq	%rax, (%rsp)
000000000103a1f6	callq	runtime.gostringnocopy
000000000103a1fb	movq	0x10(%rsp), %rax
000000000103a200	movq	0x8(%rsp), %rcx
000000000103a205	movq	%rcx, 0x40(%rsp)
000000000103a20a	movq	%rax, 0x48(%rsp)
000000000103a20f	movq	0x18(%rsp), %rbp
000000000103a214	addq	$0x20, %rsp
000000000103a218	retq
000000000103a219	xorps	%xmm0, %xmm0
000000000103a21c	movups	%xmm0, 0x40(%rsp)
000000000103a221	movq	0x18(%rsp), %rbp
000000000103a226	addq	$0x20, %rsp
000000000103a22a	retq
000000000103a22b	callq	runtime.panicindex
000000000103a230	ud2
000000000103a232	callq	runtime.morestack_noctxt
000000000103a237	jmp	runtime.funcnameFromNameoff
000000000103a23c	int3
000000000103a23d	int3
000000000103a23e	int3
000000000103a23f	int3
runtime.funcfile:
000000000103a240	movq	%gs:0x30, %rcx
000000000103a249	cmpq	0x10(%rcx), %rsp
000000000103a24d	jbe	0x103a2e3
000000000103a253	subq	$0x20, %rsp
000000000103a257	movq	%rbp, 0x18(%rsp)
000000000103a25c	leaq	0x18(%rsp), %rbp
000000000103a261	movq	0x28(%rsp), %rax
000000000103a266	testq	%rax, %rax
000000000103a269	je	0x103a2bd
000000000103a26b	movq	0x30(%rsp), %rax
000000000103a270	movq	0x8(%rax), %rcx
000000000103a274	movq	(%rax), %rdx
000000000103a277	movq	0x38(%rax), %rbx
000000000103a27b	movq	0x30(%rax), %rax
000000000103a27f	movl	0x38(%rsp), %esi
000000000103a283	movslq	%esi, %rsi
000000000103a286	cmpq	%rbx, %rsi
000000000103a289	jae	0x103a2dc
000000000103a28b	movl	(%rax,%rsi,4), %eax
000000000103a28e	cmpq	%rcx, %rax
000000000103a291	jae	0x103a2dc
000000000103a293	addq	%rdx, %rax
000000000103a296	movq	%rax, (%rsp)
000000000103a29a	callq	runtime.gostringnocopy
000000000103a29f	movq	0x8(%rsp), %rax
000000000103a2a4	movq	0x10(%rsp), %rcx
000000000103a2a9	movq	%rax, 0x40(%rsp)
000000000103a2ae	movq	%rcx, 0x48(%rsp)
000000000103a2b3	movq	0x18(%rsp), %rbp
000000000103a2b8	addq	$0x20, %rsp
000000000103a2bc	retq
000000000103a2bd	leaq	0x307c7(%rip), %rax
000000000103a2c4	movq	%rax, 0x40(%rsp)
000000000103a2c9	movq	$0x1, 0x48(%rsp)
000000000103a2d2	movq	0x18(%rsp), %rbp
000000000103a2d7	addq	$0x20, %rsp
000000000103a2db	retq
000000000103a2dc	callq	runtime.panicindex
000000000103a2e1	ud2
000000000103a2e3	callq	runtime.morestack_noctxt
000000000103a2e8	jmp	runtime.funcfile
000000000103a2ed	int3
000000000103a2ee	int3
000000000103a2ef	int3
runtime.funcline1:
000000000103a2f0	movq	%gs:0x30, %rcx
000000000103a2f9	cmpq	0x10(%rcx), %rsp
000000000103a2fd	jbe	0x103a46f
000000000103a303	subq	$0x50, %rsp
000000000103a307	movq	%rbp, 0x48(%rsp)
000000000103a30c	leaq	0x48(%rsp), %rbp
000000000103a311	movq	0x58(%rsp), %rax
000000000103a316	testq	%rax, %rax
000000000103a319	je	0x103a43b
000000000103a31f	movl	0x18(%rax), %ecx
000000000103a322	movl	%ecx, 0x10(%rsp)
000000000103a326	movq	%rax, (%rsp)
000000000103a32a	movq	0x60(%rsp), %rcx
000000000103a32f	movq	%rcx, 0x8(%rsp)
000000000103a334	movq	0x68(%rsp), %rdx
000000000103a339	movq	%rdx, 0x18(%rsp)
000000000103a33e	movq	$0x0, 0x20(%rsp)
000000000103a347	movzbl	0x70(%rsp), %ebx
000000000103a34c	movb	%bl, 0x28(%rsp)
000000000103a350	callq	runtime.pcvalue
000000000103a355	movslq	0x30(%rsp), %rax
000000000103a35a	movq	%rax, 0x40(%rsp)
000000000103a35f	movq	0x58(%rsp), %rcx
000000000103a364	movl	0x1c(%rcx), %edx
000000000103a367	movl	%edx, 0x10(%rsp)
000000000103a36b	movq	%rcx, (%rsp)
000000000103a36f	movq	0x60(%rsp), %rcx
000000000103a374	movq	%rcx, 0x8(%rsp)
000000000103a379	movq	0x68(%rsp), %rdx
000000000103a37e	movq	%rdx, 0x18(%rsp)
000000000103a383	movq	$0x0, 0x20(%rsp)
000000000103a38c	movzbl	0x70(%rsp), %edx
000000000103a391	movb	%dl, 0x28(%rsp)
000000000103a395	callq	runtime.pcvalue
000000000103a39a	movl	0x30(%rsp), %eax
000000000103a39e	movq	0x40(%rsp), %rcx
000000000103a3a3	cmpq	$-0x1, %rcx
000000000103a3a7	jne	0x103a3d6
000000000103a3a9	leaq	0x306db(%rip), %rax
000000000103a3b0	movq	%rax, 0x78(%rsp)
000000000103a3b5	movq	$0x1, 0x80(%rsp)
000000000103a3c1	movl	$0x0, 0x88(%rsp)
000000000103a3cc	movq	0x48(%rsp), %rbp
000000000103a3d1	addq	$0x50, %rsp
000000000103a3d5	retq
000000000103a3d6	cmpl	$-0x1, %eax
000000000103a3d9	je	0x103a3a9
000000000103a3db	movq	0x60(%rsp), %rdx
000000000103a3e0	movq	0x38(%rdx), %rbx
000000000103a3e4	movq	0x30(%rdx), %rsi
000000000103a3e8	cmpq	%rbx, %rcx
000000000103a3eb	jge	0x103a3a9
000000000103a3ed	movq	0x8(%rdx), %rbx
000000000103a3f1	movq	(%rdx), %rdx
000000000103a3f4	jae	0x103a468
000000000103a3f6	movl	(%rsi,%rcx,4), %ecx
000000000103a3f9	cmpq	%rbx, %rcx
000000000103a3fc	jae	0x103a468
000000000103a3fe	movl	%eax, 0x3c(%rsp)
000000000103a402	leaq	(%rdx,%rcx), %rax
000000000103a406	movq	%rax, (%rsp)
000000000103a40a	callq	runtime.gostringnocopy
000000000103a40f	movq	0x10(%rsp), %rax
000000000103a414	movq	0x8(%rsp), %rcx
000000000103a419	movq	%rcx, 0x78(%rsp)
000000000103a41e	movq	%rax, 0x80(%rsp)
000000000103a426	movl	0x3c(%rsp), %eax
000000000103a42a	movl	%eax, 0x88(%rsp)
000000000103a431	movq	0x48(%rsp), %rbp
000000000103a436	addq	$0x50, %rsp
000000000103a43a	retq
000000000103a43b	leaq	0x30649(%rip), %rax
000000000103a442	movq	%rax, 0x78(%rsp)
000000000103a447	movq	$0x1, 0x80(%rsp)
000000000103a453	movl	$0x0, 0x88(%rsp)
000000000103a45e	movq	0x48(%rsp), %rbp
000000000103a463	addq	$0x50, %rsp
000000000103a467	retq
000000000103a468	callq	runtime.panicindex
000000000103a46d	ud2
000000000103a46f	callq	runtime.morestack_noctxt
000000000103a474	jmp	runtime.funcline1
000000000103a479	int3
000000000103a47a	int3
000000000103a47b	int3
000000000103a47c	int3
000000000103a47d	int3
000000000103a47e	int3
000000000103a47f	int3
runtime.funcline:
000000000103a480	movq	%gs:0x30, %rcx
000000000103a489	cmpq	0x10(%rcx), %rsp
000000000103a48d	jbe	0x103a4ea
000000000103a48f	subq	$0x40, %rsp
000000000103a493	movq	%rbp, 0x38(%rsp)
000000000103a498	leaq	0x38(%rsp), %rbp
000000000103a49d	movq	0x48(%rsp), %rax
000000000103a4a2	movq	%rax, (%rsp)
000000000103a4a6	movq	0x50(%rsp), %rax
000000000103a4ab	movq	%rax, 0x8(%rsp)
000000000103a4b0	movq	0x58(%rsp), %rax
000000000103a4b5	movq	%rax, 0x10(%rsp)
000000000103a4ba	movb	$0x1, 0x18(%rsp)
000000000103a4bf	callq	runtime.funcline1
000000000103a4c4	movq	0x28(%rsp), %rax
000000000103a4c9	movl	0x30(%rsp), %ecx
000000000103a4cd	movq	0x20(%rsp), %rdx
000000000103a4d2	movq	%rdx, 0x60(%rsp)
000000000103a4d7	movq	%rax, 0x68(%rsp)
000000000103a4dc	movl	%ecx, 0x70(%rsp)
000000000103a4e0	movq	0x38(%rsp), %rbp
000000000103a4e5	addq	$0x40, %rsp
000000000103a4e9	retq
000000000103a4ea	callq	runtime.morestack_noctxt
000000000103a4ef	jmp	runtime.funcline
000000000103a4f1	int3
000000000103a4f2	int3
000000000103a4f3	int3
000000000103a4f4	int3
000000000103a4f5	int3
000000000103a4f6	int3
000000000103a4f7	int3
000000000103a4f8	int3
000000000103a4f9	int3
000000000103a4fa	int3
000000000103a4fb	int3
000000000103a4fc	int3
000000000103a4fd	int3
000000000103a4fe	int3
000000000103a4ff	int3
runtime.funcspdelta:
000000000103a500	movq	%gs:0x30, %rcx
000000000103a509	cmpq	0x10(%rcx), %rsp
000000000103a50d	jbe	0x103a65b
000000000103a513	subq	$0x68, %rsp
000000000103a517	movq	%rbp, 0x60(%rsp)
000000000103a51c	leaq	0x60(%rsp), %rbp
000000000103a521	movq	0x70(%rsp), %rax
000000000103a526	movl	0x14(%rax), %ecx
000000000103a529	movl	%ecx, 0x10(%rsp)
000000000103a52d	movq	%rax, (%rsp)
000000000103a531	movq	0x78(%rsp), %rcx
000000000103a536	movq	%rcx, 0x8(%rsp)
000000000103a53b	movq	0x80(%rsp), %rdx
000000000103a543	movq	%rdx, 0x18(%rsp)
000000000103a548	movq	0x88(%rsp), %rbx
000000000103a550	movq	%rbx, 0x20(%rsp)
000000000103a555	movb	$0x1, 0x28(%rsp)
000000000103a55a	callq	runtime.pcvalue
000000000103a55f	movl	0x30(%rsp), %eax
000000000103a563	testl	$0x7, %eax
000000000103a568	jne	0x103a57b
000000000103a56a	movl	%eax, 0x90(%rsp)
000000000103a571	movq	0x60(%rsp), %rbp
000000000103a576	addq	$0x68, %rsp
000000000103a57a	retq
000000000103a57b	movl	%eax, 0x3c(%rsp)
000000000103a57f	movq	0x70(%rsp), %rax
000000000103a584	movq	%rax, (%rsp)
000000000103a588	movq	0x78(%rsp), %rcx
000000000103a58d	movq	%rcx, 0x8(%rsp)
000000000103a592	callq	runtime.funcname
000000000103a597	movq	0x18(%rsp), %rax
000000000103a59c	movq	%rax, 0x40(%rsp)
000000000103a5a1	movq	0x10(%rsp), %rcx
000000000103a5a6	movq	%rcx, 0x58(%rsp)
000000000103a5ab	movq	0x70(%rsp), %rdx
000000000103a5b0	movq	(%rdx), %rbx
000000000103a5b3	movq	%rbx, 0x50(%rsp)
000000000103a5b8	movslq	0x14(%rdx), %rdx
000000000103a5bc	movq	%rdx, 0x48(%rsp)
000000000103a5c1	callq	runtime.printlock
000000000103a5c6	leaq	0x3125d(%rip), %rax
000000000103a5cd	movq	%rax, (%rsp)
000000000103a5d1	movq	$0x10, 0x8(%rsp)
000000000103a5da	callq	runtime.printstring
000000000103a5df	movq	0x58(%rsp), %rax
000000000103a5e4	movq	%rax, (%rsp)
000000000103a5e8	movq	0x40(%rsp), %rax
000000000103a5ed	movq	%rax, 0x8(%rsp)
000000000103a5f2	callq	runtime.printstring
000000000103a5f7	callq	runtime.printsp
000000000103a5fc	movq	0x50(%rsp), %rax
000000000103a601	movq	%rax, (%rsp)
000000000103a605	callq	runtime.printhex
000000000103a60a	callq	runtime.printsp
000000000103a60f	movq	0x80(%rsp), %rax
000000000103a617	movq	%rax, (%rsp)
000000000103a61b	callq	runtime.printhex
000000000103a620	callq	runtime.printsp
000000000103a625	movq	0x48(%rsp), %rax
000000000103a62a	movq	%rax, (%rsp)
000000000103a62e	callq	runtime.printhex
000000000103a633	callq	runtime.printsp
000000000103a638	movl	0x3c(%rsp), %eax
000000000103a63c	movslq	%eax, %rcx
000000000103a63f	movq	%rcx, (%rsp)
000000000103a643	callq	runtime.printint
000000000103a648	callq	runtime.printnl
000000000103a64d	callq	runtime.printunlock
000000000103a652	movl	0x3c(%rsp), %eax
000000000103a656	jmp	0x103a56a
000000000103a65b	callq	runtime.morestack_noctxt
000000000103a660	jmp	runtime.funcspdelta
000000000103a665	int3
000000000103a666	int3
000000000103a667	int3
000000000103a668	int3
000000000103a669	int3
000000000103a66a	int3
000000000103a66b	int3
000000000103a66c	int3
000000000103a66d	int3
000000000103a66e	int3
000000000103a66f	int3
runtime.pcdatavalue:
000000000103a670	movq	%gs:0x30, %rcx
000000000103a679	cmpq	0x10(%rcx), %rsp
000000000103a67d	jbe	0x103a707
000000000103a683	subq	$0x40, %rsp
000000000103a687	movq	%rbp, 0x38(%rsp)
000000000103a68c	leaq	0x38(%rsp), %rbp
000000000103a691	movl	0x58(%rsp), %eax
000000000103a695	testl	%eax, %eax
000000000103a697	jge	0x103a6ab
000000000103a699	movl	$0xffffffff, 0x70(%rsp)
000000000103a6a1	movq	0x38(%rsp), %rbp
000000000103a6a6	addq	$0x40, %rsp
000000000103a6aa	retq
000000000103a6ab	movq	0x48(%rsp), %rcx
000000000103a6b0	movl	0x20(%rcx), %edx
000000000103a6b3	cmpl	%edx, %eax
000000000103a6b5	jge	0x103a699
000000000103a6b7	leaq	0x24(%rcx), %rdx
000000000103a6bb	movslq	%eax, %rax
000000000103a6be	leaq	0x4(%rdx,%rax,4), %rax
000000000103a6c3	movl	(%rax), %eax
000000000103a6c5	movq	%rcx, (%rsp)
000000000103a6c9	movq	0x50(%rsp), %rcx
000000000103a6ce	movq	%rcx, 0x8(%rsp)
000000000103a6d3	movl	%eax, 0x10(%rsp)
000000000103a6d7	movq	0x60(%rsp), %rax
000000000103a6dc	movq	%rax, 0x18(%rsp)
000000000103a6e1	movq	0x68(%rsp), %rax
000000000103a6e6	movq	%rax, 0x20(%rsp)
000000000103a6eb	movb	$0x1, 0x28(%rsp)
000000000103a6f0	callq	runtime.pcvalue
000000000103a6f5	movl	0x30(%rsp), %eax
000000000103a6f9	movl	%eax, 0x70(%rsp)
000000000103a6fd	movq	0x38(%rsp), %rbp
000000000103a702	addq	$0x40, %rsp
000000000103a706	retq
000000000103a707	callq	runtime.morestack_noctxt
000000000103a70c	jmp	runtime.pcdatavalue
000000000103a711	int3
000000000103a712	int3
000000000103a713	int3
000000000103a714	int3
000000000103a715	int3
000000000103a716	int3
000000000103a717	int3
000000000103a718	int3
000000000103a719	int3
000000000103a71a	int3
000000000103a71b	int3
000000000103a71c	int3
000000000103a71d	int3
000000000103a71e	int3
000000000103a71f	int3
runtime.funcdata:
000000000103a720	movq	%gs:0x30, %rcx
000000000103a729	cmpq	0x10(%rcx), %rsp
000000000103a72d	jbe	0x103a7ef
000000000103a733	subq	$0x20, %rsp
000000000103a737	movq	%rbp, 0x18(%rsp)
000000000103a73c	leaq	0x18(%rsp), %rbp
000000000103a741	movl	0x38(%rsp), %eax
000000000103a745	testl	%eax, %eax
000000000103a747	jge	0x103a75c
000000000103a749	movq	$0x0, 0x40(%rsp)
000000000103a752	movq	0x18(%rsp), %rbp
000000000103a757	addq	$0x20, %rsp
000000000103a75b	retq
000000000103a75c	movq	0x28(%rsp), %rcx
000000000103a761	movl	0x24(%rcx), %edx
000000000103a764	cmpl	%edx, %eax
000000000103a766	jge	0x103a749
000000000103a768	leaq	0x24(%rcx), %rdx
000000000103a76c	movslq	0x20(%rcx), %rbx
000000000103a770	leaq	0x4(%rdx,%rbx,4), %rdx
000000000103a775	movq	%rdx, %rbx
000000000103a778	btl	$0x2, %ebx
000000000103a77c	jae	0x103a7ea
000000000103a77e	btl	$0x2, %ecx
000000000103a782	jb	0x103a7a4
000000000103a784	leaq	0x4(%rdx), %rcx
000000000103a788	movslq	%eax, %rax
000000000103a78b	leaq	(%rcx,%rax,8), %rdx
000000000103a78f	testb	%al, (%rdx)
000000000103a791	movq	(%rcx,%rax,8), %rax
000000000103a795	movq	%rax, 0x40(%rsp)
000000000103a79a	movq	0x18(%rsp), %rbp
000000000103a79f	addq	$0x20, %rsp
000000000103a7a3	retq
000000000103a7a4	movq	%rdx, 0x10(%rsp)
000000000103a7a9	callq	runtime.printlock
000000000103a7ae	leaq	0x3205c(%rip), %rax
000000000103a7b5	movq	%rax, (%rsp)
000000000103a7b9	movq	$0x19, 0x8(%rsp)
000000000103a7c2	callq	runtime.printstring
000000000103a7c7	movq	0x28(%rsp), %rax
000000000103a7cc	movq	%rax, (%rsp)
000000000103a7d0	callq	runtime.printpointer
000000000103a7d5	callq	runtime.printnl
000000000103a7da	callq	runtime.printunlock
000000000103a7df	movl	0x38(%rsp), %eax
000000000103a7e3	movq	0x10(%rsp), %rdx
000000000103a7e8	jmp	0x103a784
000000000103a7ea	movq	%rdx, %rcx
000000000103a7ed	jmp	0x103a788
000000000103a7ef	callq	runtime.morestack_noctxt
000000000103a7f4	jmp	runtime.funcdata
000000000103a7f9	int3
000000000103a7fa	int3
000000000103a7fb	int3
000000000103a7fc	int3
000000000103a7fd	int3
000000000103a7fe	int3
000000000103a7ff	int3
runtime.step:
000000000103a800	movq	%gs:0x30, %rcx
000000000103a809	cmpq	0x10(%rcx), %rsp
000000000103a80d	jbe	0x103a99f
000000000103a813	subq	$0x30, %rsp
000000000103a817	movq	%rbp, 0x28(%rsp)
000000000103a81c	leaq	0x28(%rsp), %rbp
000000000103a821	movq	0x40(%rsp), %rax
000000000103a826	testq	%rax, %rax
000000000103a829	jbe	0x103a998
000000000103a82f	movq	0x38(%rsp), %rcx
000000000103a834	movzbl	(%rcx), %edx
000000000103a837	testl	%edx, %edx
000000000103a839	jne	0x103a848
000000000103a83b	movzbl	0x60(%rsp), %ebx
000000000103a840	testb	%bl, %bl
000000000103a842	je	0x103a960
000000000103a848	btl	$0x7, %edx
000000000103a84c	jb	0x103a931
000000000103a852	movl	$0x1, %ebx
000000000103a857	movl	%edx, %esi
000000000103a859	andl	$0x1, %edx
000000000103a85c	negl	%edx
000000000103a85e	shrl	%esi
000000000103a860	xorl	%esi, %edx
000000000103a862	movq	0x58(%rsp), %rsi
000000000103a867	addl	(%rsi), %edx
000000000103a869	movl	%edx, (%rsi)
000000000103a86b	cmpq	%rax, %rbx
000000000103a86e	ja	0x103a991
000000000103a874	subq	%rbx, %rax
000000000103a877	movq	0x48(%rsp), %rdx
000000000103a87c	subq	%rbx, %rdx
000000000103a87f	movq	%rdx, %rsi
000000000103a882	negq	%rdx
000000000103a885	sarq	$0x3f, %rdx
000000000103a889	andq	%rdx, %rbx
000000000103a88c	leaq	(%rcx,%rbx), %rdx
000000000103a890	testq	%rax, %rax
000000000103a893	jbe	0x103a98a
000000000103a899	movzbl	(%rcx,%rbx), %ecx
000000000103a89d	btl	$0x7, %ecx
000000000103a8a1	jb	0x103a8f3
000000000103a8a3	movl	$0x1, %ebx
000000000103a8a8	cmpq	%rax, %rbx
000000000103a8ab	ja	0x103a983
000000000103a8b1	movq	0x50(%rsp), %rdi
000000000103a8b6	addq	(%rdi), %rcx
000000000103a8b9	movq	%rcx, (%rdi)
000000000103a8bc	subq	%rbx, %rsi
000000000103a8bf	movq	%rsi, %rcx
000000000103a8c2	negq	%rsi
000000000103a8c5	sarq	$0x3f, %rsi
000000000103a8c9	andq	%rbx, %rsi
000000000103a8cc	addq	%rsi, %rdx
000000000103a8cf	movq	%rdx, 0x68(%rsp)
000000000103a8d4	subq	%rbx, %rax
000000000103a8d7	movq	%rax, 0x70(%rsp)
000000000103a8dc	movq	%rcx, 0x78(%rsp)
000000000103a8e1	movb	$0x1, 0x80(%rsp)
000000000103a8e9	movq	0x28(%rsp), %rbp
000000000103a8ee	addq	$0x30, %rsp
000000000103a8f2	retq
000000000103a8f3	movq	%rax, 0x40(%rsp)
000000000103a8f8	movq	%rsi, 0x20(%rsp)
000000000103a8fd	movq	%rdx, 0x38(%rsp)
000000000103a902	movq	%rdx, (%rsp)
000000000103a906	movq	%rax, 0x8(%rsp)
000000000103a90b	movq	%rsi, 0x10(%rsp)
000000000103a910	callq	runtime.readvarint
000000000103a915	movl	0x18(%rsp), %ebx
000000000103a919	movl	0x1c(%rsp), %ecx
000000000103a91d	movq	0x40(%rsp), %rax
000000000103a922	movq	0x38(%rsp), %rdx
000000000103a927	movq	0x20(%rsp), %rsi
000000000103a92c	jmp	0x103a8a8
000000000103a931	movq	%rcx, (%rsp)
000000000103a935	movq	%rax, 0x8(%rsp)
000000000103a93a	movq	0x48(%rsp), %rdx
000000000103a93f	movq	%rdx, 0x10(%rsp)
000000000103a944	callq	runtime.readvarint
000000000103a949	movl	0x18(%rsp), %ebx
000000000103a94d	movl	0x1c(%rsp), %edx
000000000103a951	movq	0x40(%rsp), %rax
000000000103a956	movq	0x38(%rsp), %rcx
000000000103a95b	jmp	0x103a857
000000000103a960	movq	$0x0, 0x68(%rsp)
000000000103a969	xorps	%xmm0, %xmm0
000000000103a96c	movups	%xmm0, 0x70(%rsp)
000000000103a971	movb	$0x0, 0x80(%rsp)
000000000103a979	movq	0x28(%rsp), %rbp
000000000103a97e	addq	$0x30, %rsp
000000000103a982	retq
000000000103a983	callq	runtime.panicslice
000000000103a988	ud2
000000000103a98a	callq	runtime.panicindex
000000000103a98f	ud2
000000000103a991	callq	runtime.panicslice
000000000103a996	ud2
000000000103a998	callq	runtime.panicindex
000000000103a99d	ud2
000000000103a99f	callq	runtime.morestack_noctxt
000000000103a9a4	jmp	runtime.step
000000000103a9a9	int3
000000000103a9aa	int3
000000000103a9ab	int3
000000000103a9ac	int3
000000000103a9ad	int3
000000000103a9ae	int3
000000000103a9af	int3
runtime.readvarint:
000000000103a9b0	subq	$0x8, %rsp
000000000103a9b4	movq	%rbp, (%rsp)
000000000103a9b8	leaq	(%rsp), %rbp
000000000103a9bc	movq	0x10(%rsp), %rax
000000000103a9c1	movq	0x18(%rsp), %rdx
000000000103a9c6	xorl	%ecx, %ecx
000000000103a9c8	xorl	%ebx, %ebx
000000000103a9ca	xorl	%esi, %esi
000000000103a9cc	jmp	0x103a9d4
000000000103a9ce	leal	0x7(%rcx), %esi
000000000103a9d1	movl	%r8d, %ecx
000000000103a9d4	cmpq	%rdx, %rcx
000000000103a9d7	jae	0x103aa05
000000000103a9d9	movzbl	(%rax,%rcx), %edi
000000000103a9dd	leal	0x1(%rcx), %r8d
000000000103a9e1	movl	%edi, %r9d
000000000103a9e4	andl	$0x7f, %edi
000000000103a9e7	movl	%esi, %ecx
000000000103a9e9	shll	%cl, %edi
000000000103a9eb	orl	%edi, %ebx
000000000103a9ed	testb	$-0x80, %r9b
000000000103a9f1	jne	0x103a9ce
000000000103a9f3	movl	%r8d, 0x28(%rsp)
000000000103a9f8	movl	%ebx, 0x2c(%rsp)
000000000103a9fc	movq	(%rsp), %rbp
000000000103aa00	addq	$0x8, %rsp
000000000103aa04	retq
000000000103aa05	callq	runtime.panicindex
000000000103aa0a	ud2
000000000103aa0c	int3
000000000103aa0d	int3
000000000103aa0e	int3
000000000103aa0f	int3
runtime.libcCall:
000000000103aa10	subq	$0x28, %rsp
000000000103aa14	movq	%rbp, 0x20(%rsp)
000000000103aa19	leaq	0x20(%rsp), %rbp
000000000103aa1e	movq	%gs:0x30, %rax
000000000103aa27	testq	%rax, %rax
000000000103aa2a	je	0x103aab3
000000000103aa30	movq	0x30(%rax), %rcx
000000000103aa34	testq	%rcx, %rcx
000000000103aa37	je	0x103aaaf
000000000103aa39	cmpq	$0x0, 0x2e8(%rcx)
000000000103aa41	jne	0x103aaaf
000000000103aa43	leaq	0x2f0(%rcx), %rdx
000000000103aa4a	testb	%al, (%rdx)
000000000103aa4c	movq	%rax, 0x2f0(%rcx)
000000000103aa53	movq	0x28(%rsp), %rax
000000000103aa58	movq	%rax, 0x2e0(%rcx)
000000000103aa5f	leaq	0x30(%rsp), %rax
000000000103aa64	movq	%rax, 0x2e8(%rcx)
000000000103aa6b	movq	%rcx, 0x18(%rsp)
000000000103aa70	movq	0x30(%rsp), %rax
000000000103aa75	movq	%rax, (%rsp)
000000000103aa79	movq	0x38(%rsp), %rax
000000000103aa7e	movq	%rax, 0x8(%rsp)
000000000103aa83	callq	runtime.asmcgocall
000000000103aa88	movl	0x10(%rsp), %eax
000000000103aa8c	movq	0x18(%rsp), %rcx
000000000103aa91	testq	%rcx, %rcx
000000000103aa94	je	0x103aaa1
000000000103aa96	movq	$0x0, 0x2e8(%rcx)
000000000103aaa1	movl	%eax, 0x40(%rsp)
000000000103aaa5	movq	0x20(%rsp), %rbp
000000000103aaaa	addq	$0x28, %rsp
000000000103aaae	retq
000000000103aaaf	xorl	%ecx, %ecx
000000000103aab1	jmp	0x103aa6b
000000000103aab3	xorl	%ecx, %ecx
000000000103aab5	jmp	0x103aa34
000000000103aaba	int3
000000000103aabb	int3
000000000103aabc	int3
000000000103aabd	int3
000000000103aabe	int3
000000000103aabf	int3
runtime.pthread_attr_init:
000000000103aac0	subq	$0x30, %rsp
000000000103aac4	movq	%rbp, 0x28(%rsp)
000000000103aac9	leaq	0x28(%rsp), %rbp
000000000103aace	movl	$0x0, 0x40(%rsp)
000000000103aad6	leaq	0x1cba3(%rip), %rax
000000000103aadd	movq	%rax, 0x18(%rsp)
000000000103aae2	leaq	0x344df(%rip), %rax
000000000103aae9	movq	%rax, 0x20(%rsp)
000000000103aaee	testb	%al, (%rax)
000000000103aaf0	leaq	0x20(%rsp), %rax
000000000103aaf5	testb	%al, (%rax)
000000000103aaf7	movq	0x344ca(%rip), %rax
000000000103aafe	movq	%rax, (%rsp)
000000000103ab02	leaq	0x38(%rsp), %rax
000000000103ab07	movq	%rax, 0x8(%rsp)
000000000103ab0c	callq	runtime.libcCall
000000000103ab11	movl	0x10(%rsp), %eax
000000000103ab15	movl	%eax, 0x40(%rsp)
000000000103ab19	movq	0x28(%rsp), %rbp
000000000103ab1e	addq	$0x30, %rsp
000000000103ab22	retq
000000000103ab23	int3
000000000103ab24	int3
000000000103ab25	int3
000000000103ab26	int3
000000000103ab27	int3
000000000103ab28	int3
000000000103ab29	int3
000000000103ab2a	int3
000000000103ab2b	int3
000000000103ab2c	int3
000000000103ab2d	int3
000000000103ab2e	int3
000000000103ab2f	int3
runtime.pthread_attr_setstacksize:
000000000103ab30	subq	$0x30, %rsp
000000000103ab34	movq	%rbp, 0x28(%rsp)
000000000103ab39	leaq	0x28(%rsp), %rbp
000000000103ab3e	movl	$0x0, 0x48(%rsp)
000000000103ab46	leaq	0x1cb33(%rip), %rax
000000000103ab4d	movq	%rax, 0x18(%rsp)
000000000103ab52	leaq	0x3447f(%rip), %rax
000000000103ab59	movq	%rax, 0x20(%rsp)
000000000103ab5e	testb	%al, (%rax)
000000000103ab60	leaq	0x20(%rsp), %rax
000000000103ab65	testb	%al, (%rax)
000000000103ab67	movq	0x3446a(%rip), %rax
000000000103ab6e	movq	%rax, (%rsp)
000000000103ab72	leaq	0x38(%rsp), %rax
000000000103ab77	movq	%rax, 0x8(%rsp)
000000000103ab7c	callq	runtime.libcCall
000000000103ab81	movl	0x10(%rsp), %eax
000000000103ab85	movl	%eax, 0x48(%rsp)
000000000103ab89	movq	0x28(%rsp), %rbp
000000000103ab8e	addq	$0x30, %rsp
000000000103ab92	retq
000000000103ab93	int3
000000000103ab94	int3
000000000103ab95	int3
000000000103ab96	int3
000000000103ab97	int3
000000000103ab98	int3
000000000103ab99	int3
000000000103ab9a	int3
000000000103ab9b	int3
000000000103ab9c	int3
000000000103ab9d	int3
000000000103ab9e	int3
000000000103ab9f	int3
runtime.pthread_attr_setdetachstate:
000000000103aba0	subq	$0x30, %rsp
000000000103aba4	movq	%rbp, 0x28(%rsp)
000000000103aba9	leaq	0x28(%rsp), %rbp
000000000103abae	movl	$0x0, 0x48(%rsp)
000000000103abb6	leaq	0x1cac3(%rip), %rax
000000000103abbd	movq	%rax, 0x18(%rsp)
000000000103abc2	leaq	0x34407(%rip), %rax
000000000103abc9	movq	%rax, 0x20(%rsp)
000000000103abce	testb	%al, (%rax)
000000000103abd0	leaq	0x20(%rsp), %rax
000000000103abd5	testb	%al, (%rax)
000000000103abd7	movq	0x343f2(%rip), %rax
000000000103abde	movq	%rax, (%rsp)
000000000103abe2	leaq	0x38(%rsp), %rax
000000000103abe7	movq	%rax, 0x8(%rsp)
000000000103abec	callq	runtime.libcCall
000000000103abf1	movl	0x10(%rsp), %eax
000000000103abf5	movl	%eax, 0x48(%rsp)
000000000103abf9	movq	0x28(%rsp), %rbp
000000000103abfe	addq	$0x30, %rsp
000000000103ac02	retq
000000000103ac03	int3
000000000103ac04	int3
000000000103ac05	int3
000000000103ac06	int3
000000000103ac07	int3
000000000103ac08	int3
000000000103ac09	int3
000000000103ac0a	int3
000000000103ac0b	int3
000000000103ac0c	int3
000000000103ac0d	int3
000000000103ac0e	int3
000000000103ac0f	int3
runtime.pthread_create:
000000000103ac10	subq	$0x30, %rsp
000000000103ac14	movq	%rbp, 0x28(%rsp)
000000000103ac19	leaq	0x28(%rsp), %rbp
000000000103ac1e	movl	$0x0, 0x50(%rsp)
000000000103ac26	leaq	0x1ca53(%rip), %rax
000000000103ac2d	movq	%rax, 0x18(%rsp)
000000000103ac32	leaq	0x343c7(%rip), %rax
000000000103ac39	movq	%rax, 0x20(%rsp)
000000000103ac3e	testb	%al, (%rax)
000000000103ac40	leaq	0x20(%rsp), %rax
000000000103ac45	testb	%al, (%rax)
000000000103ac47	movq	0x343b2(%rip), %rax
000000000103ac4e	movq	%rax, (%rsp)
000000000103ac52	leaq	0x38(%rsp), %rax
000000000103ac57	movq	%rax, 0x8(%rsp)
000000000103ac5c	callq	runtime.libcCall
000000000103ac61	movl	0x10(%rsp), %eax
000000000103ac65	movl	%eax, 0x50(%rsp)
000000000103ac69	movq	0x28(%rsp), %rbp
000000000103ac6e	addq	$0x30, %rsp
000000000103ac72	retq
000000000103ac73	int3
000000000103ac74	int3
000000000103ac75	int3
000000000103ac76	int3
000000000103ac77	int3
000000000103ac78	int3
000000000103ac79	int3
000000000103ac7a	int3
000000000103ac7b	int3
000000000103ac7c	int3
000000000103ac7d	int3
000000000103ac7e	int3
000000000103ac7f	int3
runtime.raise:
000000000103ac80	subq	$0x30, %rsp
000000000103ac84	movq	%rbp, 0x28(%rsp)
000000000103ac89	leaq	0x28(%rsp), %rbp
000000000103ac8e	leaq	0x1c9eb(%rip), %rax
000000000103ac95	movq	%rax, 0x18(%rsp)
000000000103ac9a	leaq	0x3437f(%rip), %rax
000000000103aca1	movq	%rax, 0x20(%rsp)
000000000103aca6	testb	%al, (%rax)
000000000103aca8	leaq	0x20(%rsp), %rax
000000000103acad	testb	%al, (%rax)
000000000103acaf	movq	0x3436a(%rip), %rax
000000000103acb6	movq	%rax, (%rsp)
000000000103acba	leaq	0x38(%rsp), %rax
000000000103acbf	movq	%rax, 0x8(%rsp)
000000000103acc4	callq	runtime.libcCall
000000000103acc9	movq	0x28(%rsp), %rbp
000000000103acce	addq	$0x30, %rsp
000000000103acd2	retq
000000000103acd3	int3
000000000103acd4	int3
000000000103acd5	int3
000000000103acd6	int3
000000000103acd7	int3
000000000103acd8	int3
000000000103acd9	int3
000000000103acda	int3
000000000103acdb	int3
000000000103acdc	int3
000000000103acdd	int3
000000000103acde	int3
000000000103acdf	int3
runtime.mmap:
000000000103ace0	movq	%gs:0x30, %rcx
000000000103ace9	cmpq	0x10(%rcx), %rsp
000000000103aced	jbe	0x103adbe
000000000103acf3	subq	$0x60, %rsp
000000000103acf7	movq	%rbp, 0x58(%rsp)
000000000103acfc	leaq	0x58(%rsp), %rbp
000000000103ad01	movups	runtime.statictmp_41(%rip), %xmm0
000000000103ad08	movups	%xmm0, 0x28(%rsp)
000000000103ad0d	movups	0x3bc5c(%rip), %xmm0
000000000103ad14	movups	%xmm0, 0x38(%rsp)
000000000103ad19	movups	0x3bc60(%rip), %xmm0
000000000103ad20	movups	%xmm0, 0x48(%rsp)
000000000103ad25	movq	0x68(%rsp), %rax
000000000103ad2a	movq	%rax, 0x28(%rsp)
000000000103ad2f	movq	0x70(%rsp), %rax
000000000103ad34	movq	%rax, 0x30(%rsp)
000000000103ad39	movl	0x78(%rsp), %eax
000000000103ad3d	movl	%eax, 0x38(%rsp)
000000000103ad41	movl	0x7c(%rsp), %eax
000000000103ad45	movl	%eax, 0x3c(%rsp)
000000000103ad49	movl	0x80(%rsp), %eax
000000000103ad50	movl	%eax, 0x40(%rsp)
000000000103ad54	movl	0x84(%rsp), %eax
000000000103ad5b	movl	%eax, 0x44(%rsp)
000000000103ad5f	leaq	0x1c91a(%rip), %rax
000000000103ad66	movq	%rax, 0x18(%rsp)
000000000103ad6b	leaq	0x341de(%rip), %rax
000000000103ad72	movq	%rax, 0x20(%rsp)
000000000103ad77	testb	%al, (%rax)
000000000103ad79	leaq	0x20(%rsp), %rax
000000000103ad7e	testb	%al, (%rax)
000000000103ad80	movq	0x341c9(%rip), %rax
000000000103ad87	movq	%rax, (%rsp)
000000000103ad8b	leaq	0x28(%rsp), %rax
000000000103ad90	movq	%rax, 0x8(%rsp)
000000000103ad95	callq	runtime.libcCall
000000000103ad9a	movq	0x48(%rsp), %rax
000000000103ad9f	movq	0x50(%rsp), %rcx
000000000103ada4	movq	%rax, 0x88(%rsp)
000000000103adac	movq	%rcx, 0x90(%rsp)
000000000103adb4	movq	0x58(%rsp), %rbp
000000000103adb9	addq	$0x60, %rsp
000000000103adbd	retq
000000000103adbe	callq	runtime.morestack_noctxt
000000000103adc3	jmp	runtime.mmap
000000000103adc8	int3
000000000103adc9	int3
000000000103adca	int3
000000000103adcb	int3
000000000103adcc	int3
000000000103adcd	int3
000000000103adce	int3
000000000103adcf	int3
runtime.munmap:
000000000103add0	subq	$0x30, %rsp
000000000103add4	movq	%rbp, 0x28(%rsp)
000000000103add9	leaq	0x28(%rsp), %rbp
000000000103adde	leaq	0x1c89b(%rip), %rax
000000000103ade5	movq	%rax, 0x18(%rsp)
000000000103adea	leaq	0x3417f(%rip), %rax
000000000103adf1	movq	%rax, 0x20(%rsp)
000000000103adf6	testb	%al, (%rax)
000000000103adf8	leaq	0x20(%rsp), %rax
000000000103adfd	testb	%al, (%rax)
000000000103adff	movq	0x3416a(%rip), %rax
000000000103ae06	movq	%rax, (%rsp)
000000000103ae0a	leaq	0x38(%rsp), %rax
000000000103ae0f	movq	%rax, 0x8(%rsp)
000000000103ae14	callq	runtime.libcCall
000000000103ae19	movq	0x28(%rsp), %rbp
000000000103ae1e	addq	$0x30, %rsp
000000000103ae22	retq
000000000103ae23	int3
000000000103ae24	int3
000000000103ae25	int3
000000000103ae26	int3
000000000103ae27	int3
000000000103ae28	int3
000000000103ae29	int3
000000000103ae2a	int3
000000000103ae2b	int3
000000000103ae2c	int3
000000000103ae2d	int3
000000000103ae2e	int3
000000000103ae2f	int3
runtime.madvise:
000000000103ae30	subq	$0x30, %rsp
000000000103ae34	movq	%rbp, 0x28(%rsp)
000000000103ae39	leaq	0x28(%rsp), %rbp
000000000103ae3e	leaq	0x1c83b(%rip), %rax
000000000103ae45	movq	%rax, 0x18(%rsp)
000000000103ae4a	leaq	0x34067(%rip), %rax
000000000103ae51	movq	%rax, 0x20(%rsp)
000000000103ae56	testb	%al, (%rax)
000000000103ae58	leaq	0x20(%rsp), %rax
000000000103ae5d	testb	%al, (%rax)
000000000103ae5f	movq	0x34052(%rip), %rax
000000000103ae66	movq	%rax, (%rsp)
000000000103ae6a	leaq	0x38(%rsp), %rax
000000000103ae6f	movq	%rax, 0x8(%rsp)
000000000103ae74	callq	runtime.libcCall
000000000103ae79	movq	0x28(%rsp), %rbp
000000000103ae7e	addq	$0x30, %rsp
000000000103ae82	retq
000000000103ae83	int3
000000000103ae84	int3
000000000103ae85	int3
000000000103ae86	int3
000000000103ae87	int3
000000000103ae88	int3
000000000103ae89	int3
000000000103ae8a	int3
000000000103ae8b	int3
000000000103ae8c	int3
000000000103ae8d	int3
000000000103ae8e	int3
000000000103ae8f	int3
runtime.read:
000000000103ae90	subq	$0x30, %rsp
000000000103ae94	movq	%rbp, 0x28(%rsp)
000000000103ae99	leaq	0x28(%rsp), %rbp
000000000103ae9e	movl	$0x0, 0x50(%rsp)
000000000103aea6	leaq	0x1c7d3(%rip), %rax
000000000103aead	movq	%rax, 0x18(%rsp)
000000000103aeb2	leaq	0x34177(%rip), %rax
000000000103aeb9	movq	%rax, 0x20(%rsp)
000000000103aebe	testb	%al, (%rax)
000000000103aec0	leaq	0x20(%rsp), %rax
000000000103aec5	testb	%al, (%rax)
000000000103aec7	movq	0x34162(%rip), %rax
000000000103aece	movq	%rax, (%rsp)
000000000103aed2	leaq	0x38(%rsp), %rax
000000000103aed7	movq	%rax, 0x8(%rsp)
000000000103aedc	callq	runtime.libcCall
000000000103aee1	movl	0x10(%rsp), %eax
000000000103aee5	movl	%eax, 0x50(%rsp)
000000000103aee9	movq	0x28(%rsp), %rbp
000000000103aeee	addq	$0x30, %rsp
000000000103aef2	retq
000000000103aef3	int3
000000000103aef4	int3
000000000103aef5	int3
000000000103aef6	int3
000000000103aef7	int3
000000000103aef8	int3
000000000103aef9	int3
000000000103aefa	int3
000000000103aefb	int3
000000000103aefc	int3
000000000103aefd	int3
000000000103aefe	int3
000000000103aeff	int3
runtime.closefd:
000000000103af00	subq	$0x30, %rsp
000000000103af04	movq	%rbp, 0x28(%rsp)
000000000103af09	leaq	0x28(%rsp), %rbp
000000000103af0e	movl	$0x0, 0x40(%rsp)
000000000103af16	leaq	0x1c763(%rip), %rax
000000000103af1d	movq	%rax, 0x18(%rsp)
000000000103af22	leaq	0x33eb7(%rip), %rax
000000000103af29	movq	%rax, 0x20(%rsp)
000000000103af2e	testb	%al, (%rax)
000000000103af30	leaq	0x20(%rsp), %rax
000000000103af35	testb	%al, (%rax)
000000000103af37	movq	0x33ea2(%rip), %rax
000000000103af3e	movq	%rax, (%rsp)
000000000103af42	leaq	0x38(%rsp), %rax
000000000103af47	movq	%rax, 0x8(%rsp)
000000000103af4c	callq	runtime.libcCall
000000000103af51	movl	0x10(%rsp), %eax
000000000103af55	movl	%eax, 0x40(%rsp)
000000000103af59	movq	0x28(%rsp), %rbp
000000000103af5e	addq	$0x30, %rsp
000000000103af62	retq
000000000103af63	int3
000000000103af64	int3
000000000103af65	int3
000000000103af66	int3
000000000103af67	int3
000000000103af68	int3
000000000103af69	int3
000000000103af6a	int3
000000000103af6b	int3
000000000103af6c	int3
000000000103af6d	int3
000000000103af6e	int3
000000000103af6f	int3
runtime.exit:
000000000103af70	subq	$0x30, %rsp
000000000103af74	movq	%rbp, 0x28(%rsp)
000000000103af79	leaq	0x28(%rsp), %rbp
000000000103af7e	leaq	0x1c6fb(%rip), %rax
000000000103af85	movq	%rax, 0x18(%rsp)
000000000103af8a	leaq	0x33e77(%rip), %rax
000000000103af91	movq	%rax, 0x20(%rsp)
000000000103af96	testb	%al, (%rax)
000000000103af98	leaq	0x20(%rsp), %rax
000000000103af9d	testb	%al, (%rax)
000000000103af9f	movq	0x33e62(%rip), %rax
000000000103afa6	movq	%rax, (%rsp)
000000000103afaa	leaq	0x38(%rsp), %rax
000000000103afaf	movq	%rax, 0x8(%rsp)
000000000103afb4	callq	runtime.libcCall
000000000103afb9	movq	0x28(%rsp), %rbp
000000000103afbe	addq	$0x30, %rsp
000000000103afc2	retq
000000000103afc3	int3
000000000103afc4	int3
000000000103afc5	int3
000000000103afc6	int3
000000000103afc7	int3
000000000103afc8	int3
000000000103afc9	int3
000000000103afca	int3
000000000103afcb	int3
000000000103afcc	int3
000000000103afcd	int3
000000000103afce	int3
000000000103afcf	int3
runtime.usleep:
000000000103afd0	subq	$0x30, %rsp
000000000103afd4	movq	%rbp, 0x28(%rsp)
000000000103afd9	leaq	0x28(%rsp), %rbp
000000000103afde	leaq	0x1c69b(%rip), %rax
000000000103afe5	movq	%rax, 0x18(%rsp)
000000000103afea	leaq	0x340df(%rip), %rax
000000000103aff1	movq	%rax, 0x20(%rsp)
000000000103aff6	testb	%al, (%rax)
000000000103aff8	leaq	0x20(%rsp), %rax
000000000103affd	testb	%al, (%rax)
000000000103afff	movq	0x340ca(%rip), %rax
000000000103b006	movq	%rax, (%rsp)
000000000103b00a	leaq	0x38(%rsp), %rax
000000000103b00f	movq	%rax, 0x8(%rsp)
000000000103b014	callq	runtime.libcCall
000000000103b019	movq	0x28(%rsp), %rbp
000000000103b01e	addq	$0x30, %rsp
000000000103b022	retq
000000000103b023	int3
000000000103b024	int3
000000000103b025	int3
000000000103b026	int3
000000000103b027	int3
000000000103b028	int3
000000000103b029	int3
000000000103b02a	int3
000000000103b02b	int3
000000000103b02c	int3
000000000103b02d	int3
000000000103b02e	int3
000000000103b02f	int3
runtime.write:
000000000103b030	subq	$0x30, %rsp
000000000103b034	movq	%rbp, 0x28(%rsp)
000000000103b039	leaq	0x28(%rsp), %rbp
000000000103b03e	movl	$0x0, 0x50(%rsp)
000000000103b046	leaq	0x1c633(%rip), %rax
000000000103b04d	movq	%rax, 0x18(%rsp)
000000000103b052	leaq	0x3408f(%rip), %rax
000000000103b059	movq	%rax, 0x20(%rsp)
000000000103b05e	testb	%al, (%rax)
000000000103b060	leaq	0x20(%rsp), %rax
000000000103b065	testb	%al, (%rax)
000000000103b067	movq	0x3407a(%rip), %rax
000000000103b06e	movq	%rax, (%rsp)
000000000103b072	leaq	0x38(%rsp), %rax
000000000103b077	movq	%rax, 0x8(%rsp)
000000000103b07c	callq	runtime.libcCall
000000000103b081	movl	0x10(%rsp), %eax
000000000103b085	movl	%eax, 0x50(%rsp)
000000000103b089	movq	0x28(%rsp), %rbp
000000000103b08e	addq	$0x30, %rsp
000000000103b092	retq
000000000103b093	int3
000000000103b094	int3
000000000103b095	int3
000000000103b096	int3
000000000103b097	int3
000000000103b098	int3
000000000103b099	int3
000000000103b09a	int3
000000000103b09b	int3
000000000103b09c	int3
000000000103b09d	int3
000000000103b09e	int3
000000000103b09f	int3
runtime.open:
000000000103b0a0	subq	$0x30, %rsp
000000000103b0a4	movq	%rbp, 0x28(%rsp)
000000000103b0a9	leaq	0x28(%rsp), %rbp
000000000103b0ae	movl	$0x0, 0x48(%rsp)
000000000103b0b6	leaq	0x1c5c3(%rip), %rax
000000000103b0bd	movq	%rax, 0x18(%rsp)
000000000103b0c2	leaq	0x33ec7(%rip), %rax
000000000103b0c9	movq	%rax, 0x20(%rsp)
000000000103b0ce	testb	%al, (%rax)
000000000103b0d0	leaq	0x20(%rsp), %rax
000000000103b0d5	testb	%al, (%rax)
000000000103b0d7	movq	0x33eb2(%rip), %rax
000000000103b0de	movq	%rax, (%rsp)
000000000103b0e2	leaq	0x38(%rsp), %rax
000000000103b0e7	movq	%rax, 0x8(%rsp)
000000000103b0ec	callq	runtime.libcCall
000000000103b0f1	movl	0x10(%rsp), %eax
000000000103b0f5	movl	%eax, 0x48(%rsp)
000000000103b0f9	movq	0x28(%rsp), %rbp
000000000103b0fe	addq	$0x30, %rsp
000000000103b102	retq
000000000103b103	int3
000000000103b104	int3
000000000103b105	int3
000000000103b106	int3
000000000103b107	int3
000000000103b108	int3
000000000103b109	int3
000000000103b10a	int3
000000000103b10b	int3
000000000103b10c	int3
000000000103b10d	int3
000000000103b10e	int3
000000000103b10f	int3
runtime.nanotime:
000000000103b110	subq	$0x40, %rsp
000000000103b114	movq	%rbp, 0x38(%rsp)
000000000103b119	leaq	0x38(%rsp), %rbp
000000000103b11e	movq	$0x0, 0x48(%rsp)
000000000103b127	xorps	%xmm0, %xmm0
000000000103b12a	movups	%xmm0, 0x18(%rsp)
000000000103b12f	leaq	0x1c54a(%rip), %rax
000000000103b136	movq	%rax, 0x28(%rsp)
000000000103b13b	leaq	0x33e36(%rip), %rax
000000000103b142	movq	%rax, 0x30(%rsp)
000000000103b147	testb	%al, (%rax)
000000000103b149	leaq	0x30(%rsp), %rax
000000000103b14e	testb	%al, (%rax)
000000000103b150	movq	0x33e21(%rip), %rax
000000000103b157	movq	%rax, (%rsp)
000000000103b15b	leaq	0x18(%rsp), %rax
000000000103b160	movq	%rax, 0x8(%rsp)
000000000103b165	callq	runtime.libcCall
000000000103b16a	movq	0x18(%rsp), %rax
000000000103b16f	movl	0x20(%rsp), %ecx
000000000103b173	movq	%rax, %rdx
000000000103b176	imulq	%rcx, %rax
000000000103b17a	movl	0x24(%rsp), %ebx
000000000103b17e	cmpl	$0x1, %ecx
000000000103b181	cmovneq	%rax, %rdx
000000000103b185	cmpl	$0x1, %ebx
000000000103b188	je	0x103b1b3
000000000103b18a	testq	%rbx, %rbx
000000000103b18d	je	0x103b1b8
000000000103b18f	movq	%rdx, %rax
000000000103b192	cmpq	$-0x1, %rbx
000000000103b196	je	0x103b19f
000000000103b198	cqto
000000000103b19a	idivq	%rbx
000000000103b19d	jmp	0x103b1a4
000000000103b19f	negq	%rax
000000000103b1a2	xorl	%edx, %edx
000000000103b1a4	movq	%rax, 0x48(%rsp)
000000000103b1a9	movq	0x38(%rsp), %rbp
000000000103b1ae	addq	$0x40, %rsp
000000000103b1b2	retq
000000000103b1b3	movq	%rdx, %rax
000000000103b1b6	jmp	0x103b1a4
000000000103b1b8	callq	runtime.panicdivide
000000000103b1bd	ud2
000000000103b1bf	int3
runtime.walltime:
000000000103b1c0	subq	$0x40, %rsp
000000000103b1c4	movq	%rbp, 0x38(%rsp)
000000000103b1c9	leaq	0x38(%rsp), %rbp
000000000103b1ce	movq	$0x0, 0x48(%rsp)
000000000103b1d7	movl	$0x0, 0x50(%rsp)
000000000103b1df	xorps	%xmm0, %xmm0
000000000103b1e2	movups	%xmm0, 0x18(%rsp)
000000000103b1e7	leaq	0x1c492(%rip), %rax
000000000103b1ee	movq	%rax, 0x28(%rsp)
000000000103b1f3	leaq	0x33ede(%rip), %rax
000000000103b1fa	movq	%rax, 0x30(%rsp)
000000000103b1ff	testb	%al, (%rax)
000000000103b201	leaq	0x30(%rsp), %rax
000000000103b206	testb	%al, (%rax)
000000000103b208	movq	0x33ec9(%rip), %rax
000000000103b20f	movq	%rax, (%rsp)
000000000103b213	leaq	0x18(%rsp), %rax
000000000103b218	movq	%rax, 0x8(%rsp)
000000000103b21d	callq	runtime.libcCall
000000000103b222	movq	0x18(%rsp), %rax
000000000103b227	movq	%rax, 0x48(%rsp)
000000000103b22c	movl	0x20(%rsp), %eax
000000000103b230	imull	$0x3e8, %eax, %eax
000000000103b236	movl	%eax, 0x50(%rsp)
000000000103b23a	movq	0x38(%rsp), %rbp
000000000103b23f	addq	$0x40, %rsp
000000000103b243	retq
000000000103b244	int3
000000000103b245	int3
000000000103b246	int3
000000000103b247	int3
000000000103b248	int3
000000000103b249	int3
000000000103b24a	int3
000000000103b24b	int3
000000000103b24c	int3
000000000103b24d	int3
000000000103b24e	int3
000000000103b24f	int3
runtime.sigaction:
000000000103b250	subq	$0x30, %rsp
000000000103b254	movq	%rbp, 0x28(%rsp)
000000000103b259	leaq	0x28(%rsp), %rbp
000000000103b25e	leaq	0x1c41b(%rip), %rax
000000000103b265	movq	%rax, 0x18(%rsp)
000000000103b26a	leaq	0x33de7(%rip), %rax
000000000103b271	movq	%rax, 0x20(%rsp)
000000000103b276	testb	%al, (%rax)
000000000103b278	leaq	0x20(%rsp), %rax
000000000103b27d	testb	%al, (%rax)
000000000103b27f	movq	0x33dd2(%rip), %rax
000000000103b286	movq	%rax, (%rsp)
000000000103b28a	leaq	0x38(%rsp), %rax
000000000103b28f	movq	%rax, 0x8(%rsp)
000000000103b294	callq	runtime.libcCall
000000000103b299	movq	0x28(%rsp), %rbp
000000000103b29e	addq	$0x30, %rsp
000000000103b2a2	retq
000000000103b2a3	int3
000000000103b2a4	int3
000000000103b2a5	int3
000000000103b2a6	int3
000000000103b2a7	int3
000000000103b2a8	int3
000000000103b2a9	int3
000000000103b2aa	int3
000000000103b2ab	int3
000000000103b2ac	int3
000000000103b2ad	int3
000000000103b2ae	int3
000000000103b2af	int3
runtime.sigprocmask:
000000000103b2b0	subq	$0x30, %rsp
000000000103b2b4	movq	%rbp, 0x28(%rsp)
000000000103b2b9	leaq	0x28(%rsp), %rbp
000000000103b2be	leaq	0x1c3bb(%rip), %rax
000000000103b2c5	movq	%rax, 0x18(%rsp)
000000000103b2ca	leaq	0x33da7(%rip), %rax
000000000103b2d1	movq	%rax, 0x20(%rsp)
000000000103b2d6	testb	%al, (%rax)
000000000103b2d8	leaq	0x20(%rsp), %rax
000000000103b2dd	testb	%al, (%rax)
000000000103b2df	movq	0x33d92(%rip), %rax
000000000103b2e6	movq	%rax, (%rsp)
000000000103b2ea	leaq	0x38(%rsp), %rax
000000000103b2ef	movq	%rax, 0x8(%rsp)
000000000103b2f4	callq	runtime.libcCall
000000000103b2f9	movq	0x28(%rsp), %rbp
000000000103b2fe	addq	$0x30, %rsp
000000000103b302	retq
000000000103b303	int3
000000000103b304	int3
000000000103b305	int3
000000000103b306	int3
000000000103b307	int3
000000000103b308	int3
000000000103b309	int3
000000000103b30a	int3
000000000103b30b	int3
000000000103b30c	int3
000000000103b30d	int3
000000000103b30e	int3
000000000103b30f	int3
runtime.sigaltstack:
000000000103b310	subq	$0x30, %rsp
000000000103b314	movq	%rbp, 0x28(%rsp)
000000000103b319	leaq	0x28(%rsp), %rbp
000000000103b31e	movq	0x38(%rsp), %rax
000000000103b323	testq	%rax, %rax
000000000103b326	je	0x103b340
000000000103b328	movl	0x10(%rax), %ecx
000000000103b32b	btl	$0x2, %ecx
000000000103b32f	jae	0x103b340
000000000103b331	cmpq	$0x0, 0x8(%rax)
000000000103b336	jne	0x103b340
000000000103b338	movq	$0x8000, 0x8(%rax)
000000000103b340	leaq	0x1c339(%rip), %rax
000000000103b347	movq	%rax, 0x18(%rsp)
000000000103b34c	leaq	0x33d0d(%rip), %rax
000000000103b353	movq	%rax, 0x20(%rsp)
000000000103b358	testb	%al, (%rax)
000000000103b35a	leaq	0x20(%rsp), %rax
000000000103b35f	testb	%al, (%rax)
000000000103b361	movq	0x33cf8(%rip), %rax
000000000103b368	movq	%rax, (%rsp)
000000000103b36c	leaq	0x38(%rsp), %rax
000000000103b371	movq	%rax, 0x8(%rsp)
000000000103b376	callq	runtime.libcCall
000000000103b37b	movq	0x28(%rsp), %rbp
000000000103b380	addq	$0x30, %rsp
000000000103b384	retq
000000000103b385	int3
000000000103b386	int3
000000000103b387	int3
000000000103b388	int3
000000000103b389	int3
000000000103b38a	int3
000000000103b38b	int3
000000000103b38c	int3
000000000103b38d	int3
000000000103b38e	int3
000000000103b38f	int3
runtime.raiseproc:
000000000103b390	subq	$0x30, %rsp
000000000103b394	movq	%rbp, 0x28(%rsp)
000000000103b399	leaq	0x28(%rsp), %rbp
000000000103b39e	leaq	0x1c2db(%rip), %rax
000000000103b3a5	movq	%rax, 0x18(%rsp)
000000000103b3aa	leaq	0x33c77(%rip), %rax
000000000103b3b1	movq	%rax, 0x20(%rsp)
000000000103b3b6	testb	%al, (%rax)
000000000103b3b8	leaq	0x20(%rsp), %rax
000000000103b3bd	testb	%al, (%rax)
000000000103b3bf	movq	0x33c62(%rip), %rax
000000000103b3c6	movq	%rax, (%rsp)
000000000103b3ca	leaq	0x38(%rsp), %rax
000000000103b3cf	movq	%rax, 0x8(%rsp)
000000000103b3d4	callq	runtime.libcCall
000000000103b3d9	movq	0x28(%rsp), %rbp
000000000103b3de	addq	$0x30, %rsp
000000000103b3e2	retq
000000000103b3e3	int3
000000000103b3e4	int3
000000000103b3e5	int3
000000000103b3e6	int3
000000000103b3e7	int3
000000000103b3e8	int3
000000000103b3e9	int3
000000000103b3ea	int3
000000000103b3eb	int3
000000000103b3ec	int3
000000000103b3ed	int3
000000000103b3ee	int3
000000000103b3ef	int3
runtime.setitimer:
000000000103b3f0	subq	$0x30, %rsp
000000000103b3f4	movq	%rbp, 0x28(%rsp)
000000000103b3f9	leaq	0x28(%rsp), %rbp
000000000103b3fe	leaq	0x1c27b(%rip), %rax
000000000103b405	movq	%rax, 0x18(%rsp)
000000000103b40a	leaq	0x33c3f(%rip), %rax
000000000103b411	movq	%rax, 0x20(%rsp)
000000000103b416	testb	%al, (%rax)
000000000103b418	leaq	0x20(%rsp), %rax
000000000103b41d	testb	%al, (%rax)
000000000103b41f	movq	0x33c2a(%rip), %rax
000000000103b426	movq	%rax, (%rsp)
000000000103b42a	leaq	0x38(%rsp), %rax
000000000103b42f	movq	%rax, 0x8(%rsp)
000000000103b434	callq	runtime.libcCall
000000000103b439	movq	0x28(%rsp), %rbp
000000000103b43e	addq	$0x30, %rsp
000000000103b442	retq
000000000103b443	int3
000000000103b444	int3
000000000103b445	int3
000000000103b446	int3
000000000103b447	int3
000000000103b448	int3
000000000103b449	int3
000000000103b44a	int3
000000000103b44b	int3
000000000103b44c	int3
000000000103b44d	int3
000000000103b44e	int3
000000000103b44f	int3
runtime.sysctl:
000000000103b450	subq	$0x30, %rsp
000000000103b454	movq	%rbp, 0x28(%rsp)
000000000103b459	leaq	0x28(%rsp), %rbp
000000000103b45e	movl	$0x0, 0x68(%rsp)
000000000103b466	leaq	0x1c213(%rip), %rax
000000000103b46d	movq	%rax, 0x18(%rsp)
000000000103b472	leaq	0x33c2f(%rip), %rax
000000000103b479	movq	%rax, 0x20(%rsp)
000000000103b47e	testb	%al, (%rax)
000000000103b480	leaq	0x20(%rsp), %rax
000000000103b485	testb	%al, (%rax)
000000000103b487	movq	0x33c1a(%rip), %rax
000000000103b48e	movq	%rax, (%rsp)
000000000103b492	leaq	0x38(%rsp), %rax
000000000103b497	movq	%rax, 0x8(%rsp)
000000000103b49c	callq	runtime.libcCall
000000000103b4a1	movl	0x10(%rsp), %eax
000000000103b4a5	movl	%eax, 0x68(%rsp)
000000000103b4a9	movq	0x28(%rsp), %rbp
000000000103b4ae	addq	$0x30, %rsp
000000000103b4b2	retq
000000000103b4b3	int3
000000000103b4b4	int3
000000000103b4b5	int3
000000000103b4b6	int3
000000000103b4b7	int3
000000000103b4b8	int3
000000000103b4b9	int3
000000000103b4ba	int3
000000000103b4bb	int3
000000000103b4bc	int3
000000000103b4bd	int3
000000000103b4be	int3
000000000103b4bf	int3
runtime.kevent:
000000000103b4c0	subq	$0x30, %rsp
000000000103b4c4	movq	%rbp, 0x28(%rsp)
000000000103b4c9	leaq	0x28(%rsp), %rbp
000000000103b4ce	movl	$0x0, 0x68(%rsp)
000000000103b4d6	leaq	0x1c1a3(%rip), %rax
000000000103b4dd	movq	%rax, 0x18(%rsp)
000000000103b4e2	leaq	0x339c7(%rip), %rax
000000000103b4e9	movq	%rax, 0x20(%rsp)
000000000103b4ee	testb	%al, (%rax)
000000000103b4f0	leaq	0x20(%rsp), %rax
000000000103b4f5	testb	%al, (%rax)
000000000103b4f7	movq	0x339b2(%rip), %rax
000000000103b4fe	movq	%rax, (%rsp)
000000000103b502	leaq	0x38(%rsp), %rax
000000000103b507	movq	%rax, 0x8(%rsp)
000000000103b50c	callq	runtime.libcCall
000000000103b511	movl	0x10(%rsp), %eax
000000000103b515	movl	%eax, 0x68(%rsp)
000000000103b519	movq	0x28(%rsp), %rbp
000000000103b51e	addq	$0x30, %rsp
000000000103b522	retq
000000000103b523	int3
000000000103b524	int3
000000000103b525	int3
000000000103b526	int3
000000000103b527	int3
000000000103b528	int3
000000000103b529	int3
000000000103b52a	int3
000000000103b52b	int3
000000000103b52c	int3
000000000103b52d	int3
000000000103b52e	int3
000000000103b52f	int3
runtime.pthread_mutex_init:
000000000103b530	subq	$0x30, %rsp
000000000103b534	movq	%rbp, 0x28(%rsp)
000000000103b539	leaq	0x28(%rsp), %rbp
000000000103b53e	movl	$0x0, 0x48(%rsp)
000000000103b546	leaq	0x1c133(%rip), %rax
000000000103b54d	movq	%rax, 0x18(%rsp)
000000000103b552	leaq	0x33aaf(%rip), %rax
000000000103b559	movq	%rax, 0x20(%rsp)
000000000103b55e	testb	%al, (%rax)
000000000103b560	leaq	0x20(%rsp), %rax
000000000103b565	testb	%al, (%rax)
000000000103b567	movq	0x33a9a(%rip), %rax
000000000103b56e	movq	%rax, (%rsp)
000000000103b572	leaq	0x38(%rsp), %rax
000000000103b577	movq	%rax, 0x8(%rsp)
000000000103b57c	callq	runtime.libcCall
000000000103b581	movl	0x10(%rsp), %eax
000000000103b585	movl	%eax, 0x48(%rsp)
000000000103b589	movq	0x28(%rsp), %rbp
000000000103b58e	addq	$0x30, %rsp
000000000103b592	retq
000000000103b593	int3
000000000103b594	int3
000000000103b595	int3
000000000103b596	int3
000000000103b597	int3
000000000103b598	int3
000000000103b599	int3
000000000103b59a	int3
000000000103b59b	int3
000000000103b59c	int3
000000000103b59d	int3
000000000103b59e	int3
000000000103b59f	int3
runtime.pthread_mutex_lock:
000000000103b5a0	subq	$0x30, %rsp
000000000103b5a4	movq	%rbp, 0x28(%rsp)
000000000103b5a9	leaq	0x28(%rsp), %rbp
000000000103b5ae	movl	$0x0, 0x40(%rsp)
000000000103b5b6	leaq	0x1c0c3(%rip), %rax
000000000103b5bd	movq	%rax, 0x18(%rsp)
000000000103b5c2	leaq	0x33a47(%rip), %rax
000000000103b5c9	movq	%rax, 0x20(%rsp)
000000000103b5ce	testb	%al, (%rax)
000000000103b5d0	leaq	0x20(%rsp), %rax
000000000103b5d5	testb	%al, (%rax)
000000000103b5d7	movq	0x33a32(%rip), %rax
000000000103b5de	movq	%rax, (%rsp)
000000000103b5e2	leaq	0x38(%rsp), %rax
000000000103b5e7	movq	%rax, 0x8(%rsp)
000000000103b5ec	callq	runtime.libcCall
000000000103b5f1	movl	0x10(%rsp), %eax
000000000103b5f5	movl	%eax, 0x40(%rsp)
000000000103b5f9	movq	0x28(%rsp), %rbp
000000000103b5fe	addq	$0x30, %rsp
000000000103b602	retq
000000000103b603	int3
000000000103b604	int3
000000000103b605	int3
000000000103b606	int3
000000000103b607	int3
000000000103b608	int3
000000000103b609	int3
000000000103b60a	int3
000000000103b60b	int3
000000000103b60c	int3
000000000103b60d	int3
000000000103b60e	int3
000000000103b60f	int3
runtime.pthread_mutex_unlock:
000000000103b610	subq	$0x30, %rsp
000000000103b614	movq	%rbp, 0x28(%rsp)
000000000103b619	leaq	0x28(%rsp), %rbp
000000000103b61e	movl	$0x0, 0x40(%rsp)
000000000103b626	leaq	0x1c053(%rip), %rax
000000000103b62d	movq	%rax, 0x18(%rsp)
000000000103b632	leaq	0x339df(%rip), %rax
000000000103b639	movq	%rax, 0x20(%rsp)
000000000103b63e	testb	%al, (%rax)
000000000103b640	leaq	0x20(%rsp), %rax
000000000103b645	testb	%al, (%rax)
000000000103b647	movq	0x339ca(%rip), %rax
000000000103b64e	movq	%rax, (%rsp)
000000000103b652	leaq	0x38(%rsp), %rax
000000000103b657	movq	%rax, 0x8(%rsp)
000000000103b65c	callq	runtime.libcCall
000000000103b661	movl	0x10(%rsp), %eax
000000000103b665	movl	%eax, 0x40(%rsp)
000000000103b669	movq	0x28(%rsp), %rbp
000000000103b66e	addq	$0x30, %rsp
000000000103b672	retq
000000000103b673	int3
000000000103b674	int3
000000000103b675	int3
000000000103b676	int3
000000000103b677	int3
000000000103b678	int3
000000000103b679	int3
000000000103b67a	int3
000000000103b67b	int3
000000000103b67c	int3
000000000103b67d	int3
000000000103b67e	int3
000000000103b67f	int3
runtime.pthread_cond_init:
000000000103b680	subq	$0x30, %rsp
000000000103b684	movq	%rbp, 0x28(%rsp)
000000000103b689	leaq	0x28(%rsp), %rbp
000000000103b68e	movl	$0x0, 0x48(%rsp)
000000000103b696	leaq	0x1bfe3(%rip), %rax
000000000103b69d	movq	%rax, 0x18(%rsp)
000000000103b6a2	leaq	0x33937(%rip), %rax
000000000103b6a9	movq	%rax, 0x20(%rsp)
000000000103b6ae	testb	%al, (%rax)
000000000103b6b0	leaq	0x20(%rsp), %rax
000000000103b6b5	testb	%al, (%rax)
000000000103b6b7	movq	0x33922(%rip), %rax
000000000103b6be	movq	%rax, (%rsp)
000000000103b6c2	leaq	0x38(%rsp), %rax
000000000103b6c7	movq	%rax, 0x8(%rsp)
000000000103b6cc	callq	runtime.libcCall
000000000103b6d1	movl	0x10(%rsp), %eax
000000000103b6d5	movl	%eax, 0x48(%rsp)
000000000103b6d9	movq	0x28(%rsp), %rbp
000000000103b6de	addq	$0x30, %rsp
000000000103b6e2	retq
000000000103b6e3	int3
000000000103b6e4	int3
000000000103b6e5	int3
000000000103b6e6	int3
000000000103b6e7	int3
000000000103b6e8	int3
000000000103b6e9	int3
000000000103b6ea	int3
000000000103b6eb	int3
000000000103b6ec	int3
000000000103b6ed	int3
000000000103b6ee	int3
000000000103b6ef	int3
runtime.pthread_cond_wait:
000000000103b6f0	subq	$0x30, %rsp
000000000103b6f4	movq	%rbp, 0x28(%rsp)
000000000103b6f9	leaq	0x28(%rsp), %rbp
000000000103b6fe	movl	$0x0, 0x48(%rsp)
000000000103b706	leaq	0x1bf73(%rip), %rax
000000000103b70d	movq	%rax, 0x18(%rsp)
000000000103b712	leaq	0x338df(%rip), %rax
000000000103b719	movq	%rax, 0x20(%rsp)
000000000103b71e	testb	%al, (%rax)
000000000103b720	leaq	0x20(%rsp), %rax
000000000103b725	testb	%al, (%rax)
000000000103b727	movq	0x338ca(%rip), %rax
000000000103b72e	movq	%rax, (%rsp)
000000000103b732	leaq	0x38(%rsp), %rax
000000000103b737	movq	%rax, 0x8(%rsp)
000000000103b73c	callq	runtime.libcCall
000000000103b741	movl	0x10(%rsp), %eax
000000000103b745	movl	%eax, 0x48(%rsp)
000000000103b749	movq	0x28(%rsp), %rbp
000000000103b74e	addq	$0x30, %rsp
000000000103b752	retq
000000000103b753	int3
000000000103b754	int3
000000000103b755	int3
000000000103b756	int3
000000000103b757	int3
000000000103b758	int3
000000000103b759	int3
000000000103b75a	int3
000000000103b75b	int3
000000000103b75c	int3
000000000103b75d	int3
000000000103b75e	int3
000000000103b75f	int3
runtime.pthread_cond_timedwait_relative_np:
000000000103b760	subq	$0x30, %rsp
000000000103b764	movq	%rbp, 0x28(%rsp)
000000000103b769	leaq	0x28(%rsp), %rbp
000000000103b76e	movl	$0x0, 0x50(%rsp)
000000000103b776	leaq	0x1bf03(%rip), %rax
000000000103b77d	movq	%rax, 0x18(%rsp)
000000000103b782	leaq	0x33867(%rip), %rax
000000000103b789	movq	%rax, 0x20(%rsp)
000000000103b78e	testb	%al, (%rax)
000000000103b790	leaq	0x20(%rsp), %rax
000000000103b795	testb	%al, (%rax)
000000000103b797	movq	0x33852(%rip), %rax
000000000103b79e	movq	%rax, (%rsp)
000000000103b7a2	leaq	0x38(%rsp), %rax
000000000103b7a7	movq	%rax, 0x8(%rsp)
000000000103b7ac	callq	runtime.libcCall
000000000103b7b1	movl	0x10(%rsp), %eax
000000000103b7b5	movl	%eax, 0x50(%rsp)
000000000103b7b9	movq	0x28(%rsp), %rbp
000000000103b7be	addq	$0x30, %rsp
000000000103b7c2	retq
000000000103b7c3	int3
000000000103b7c4	int3
000000000103b7c5	int3
000000000103b7c6	int3
000000000103b7c7	int3
000000000103b7c8	int3
000000000103b7c9	int3
000000000103b7ca	int3
000000000103b7cb	int3
000000000103b7cc	int3
000000000103b7cd	int3
000000000103b7ce	int3
000000000103b7cf	int3
runtime.pthread_cond_signal:
000000000103b7d0	subq	$0x30, %rsp
000000000103b7d4	movq	%rbp, 0x28(%rsp)
000000000103b7d9	leaq	0x28(%rsp), %rbp
000000000103b7de	movl	$0x0, 0x40(%rsp)
000000000103b7e6	leaq	0x1be93(%rip), %rax
000000000103b7ed	movq	%rax, 0x18(%rsp)
000000000103b7f2	leaq	0x337ef(%rip), %rax
000000000103b7f9	movq	%rax, 0x20(%rsp)
000000000103b7fe	testb	%al, (%rax)
000000000103b800	leaq	0x20(%rsp), %rax
000000000103b805	testb	%al, (%rax)
000000000103b807	movq	0x337da(%rip), %rax
000000000103b80e	movq	%rax, (%rsp)
000000000103b812	leaq	0x38(%rsp), %rax
000000000103b817	movq	%rax, 0x8(%rsp)
000000000103b81c	callq	runtime.libcCall
000000000103b821	movl	0x10(%rsp), %eax
000000000103b825	movl	%eax, 0x40(%rsp)
000000000103b829	movq	0x28(%rsp), %rbp
000000000103b82e	addq	$0x30, %rsp
000000000103b832	retq
000000000103b833	int3
000000000103b834	int3
000000000103b835	int3
000000000103b836	int3
000000000103b837	int3
000000000103b838	int3
000000000103b839	int3
000000000103b83a	int3
000000000103b83b	int3
000000000103b83c	int3
000000000103b83d	int3
000000000103b83e	int3
000000000103b83f	int3
runtime.timejump:
000000000103b840	movq	%gs:0x30, %rcx
000000000103b849	cmpq	0x10(%rcx), %rsp
000000000103b84d	jbe	0x103b903
000000000103b853	subq	$0x28, %rsp
000000000103b857	movq	%rbp, 0x20(%rsp)
000000000103b85c	leaq	0x20(%rsp), %rbp
000000000103b861	cmpq	$0x0, 0x99317(%rip)
000000000103b869	je	0x103b8f0
000000000103b86f	xorl	%eax, %eax
000000000103b871	jmp	0x103b898
000000000103b873	movq	%rax, 0x10(%rsp)
000000000103b878	shlq	$0x7, %rax
000000000103b87c	leaq	runtime.timers(%rip), %rdx
000000000103b883	leaq	(%rax,%rdx), %rax
000000000103b887	movq	%rax, (%rsp)
000000000103b88b	callq	runtime.lock
000000000103b890	movq	0x10(%rsp), %rax
000000000103b895	incq	%rax
000000000103b898	cmpq	$0x40, %rax
000000000103b89c	jl	0x103b873
000000000103b89e	callq	runtime.timejumpLocked
000000000103b8a3	movq	(%rsp), %rax
000000000103b8a7	movq	%rax, 0x18(%rsp)
000000000103b8ac	xorl	%ecx, %ecx
000000000103b8ae	jmp	0x103b8db
000000000103b8b0	movq	%rcx, 0x8(%rsp)
000000000103b8b5	shlq	$0x7, %rcx
000000000103b8b9	leaq	runtime.timers(%rip), %rdx
000000000103b8c0	leaq	(%rcx,%rdx), %rcx
000000000103b8c4	movq	%rcx, (%rsp)
000000000103b8c8	callq	runtime.unlock
000000000103b8cd	movq	0x8(%rsp), %rax
000000000103b8d2	leaq	0x1(%rax), %rcx
000000000103b8d6	movq	0x18(%rsp), %rax
000000000103b8db	cmpq	$0x40, %rcx
000000000103b8df	jl	0x103b8b0
000000000103b8e1	movq	%rax, 0x30(%rsp)
000000000103b8e6	movq	0x20(%rsp), %rbp
000000000103b8eb	addq	$0x28, %rsp
000000000103b8ef	retq
000000000103b8f0	movq	$0x0, 0x30(%rsp)
000000000103b8f9	movq	0x20(%rsp), %rbp
000000000103b8fe	addq	$0x28, %rsp
000000000103b902	retq
000000000103b903	callq	runtime.morestack_noctxt
000000000103b908	jmp	runtime.timejump
000000000103b90d	int3
000000000103b90e	int3
000000000103b90f	int3
runtime.timejumpLocked:
000000000103b910	xorl	%eax, %eax
000000000103b912	xorl	%ecx, %ecx
000000000103b914	jmp	0x103b91a
000000000103b916	leaq	0x1(%rdx), %rax
000000000103b91a	cmpq	$0x40, %rax
000000000103b91e	jge	0x103b963
000000000103b920	movq	%rax, %rdx
000000000103b923	shlq	$0x7, %rax
000000000103b927	leaq	runtime.timers(%rip), %rbx
000000000103b92e	leaq	0x10(%rbx,%rax), %rsi
000000000103b933	cmpb	$0x0, (%rsi)
000000000103b936	je	0x103b916
000000000103b938	movq	0x28(%rbx,%rax), %rsi
000000000103b93d	movq	0x30(%rbx,%rax), %rax
000000000103b942	testq	%rax, %rax
000000000103b945	je	0x103b916
000000000103b947	movq	(%rsi), %rax
000000000103b94a	testq	%rcx, %rcx
000000000103b94d	je	0x103b959
000000000103b94f	movq	0x10(%rcx), %rsi
000000000103b953	cmpq	%rsi, 0x10(%rax)
000000000103b957	jge	0x103b95e
000000000103b959	movq	%rax, %rcx
000000000103b95c	jmp	0x103b916
000000000103b95e	movq	%rcx, %rax
000000000103b961	jmp	0x103b959
000000000103b963	testq	%rcx, %rcx
000000000103b966	je	0x103b978
000000000103b968	movq	0x10(%rcx), %rax
000000000103b96c	movq	runtime.faketime(%rip), %rdx
000000000103b973	cmpq	%rdx, %rax
000000000103b976	jg	0x103b982
000000000103b978	movq	$0x0, 0x8(%rsp)
000000000103b981	retq
000000000103b982	movq	%rax, runtime.faketime(%rip)
000000000103b989	movq	(%rcx), %rax
000000000103b98c	testb	%al, (%rax)
000000000103b98e	leaq	0x12(%rax), %rcx
000000000103b992	cmpb	$0x0, (%rcx)
000000000103b995	je	0x103b9a5
000000000103b997	movb	$0x0, 0x12(%rax)
000000000103b99b	movq	0x8(%rax), %rax
000000000103b99f	movq	%rax, 0x8(%rsp)
000000000103b9a4	retq
000000000103b9a5	movq	$0x0, 0x8(%rsp)
000000000103b9ae	retq
000000000103b9af	int3
time.now:
000000000103b9b0	movq	%gs:0x30, %rcx
000000000103b9b9	cmpq	0x10(%rcx), %rsp
000000000103b9bd	jbe	0x103ba14
000000000103b9bf	subq	$0x28, %rsp
000000000103b9c3	movq	%rbp, 0x20(%rsp)
000000000103b9c8	leaq	0x20(%rsp), %rbp
000000000103b9cd	callq	runtime.walltime
000000000103b9d2	movq	(%rsp), %rax
000000000103b9d6	movq	%rax, 0x18(%rsp)
000000000103b9db	movl	0x8(%rsp), %ecx
000000000103b9df	movl	%ecx, 0x14(%rsp)
000000000103b9e3	callq	runtime.nanotime
000000000103b9e8	movq	(%rsp), %rax
000000000103b9ec	subq	runtime.startNano(%rip), %rax
000000000103b9f3	movq	0x18(%rsp), %rcx
000000000103b9f8	movq	%rcx, 0x30(%rsp)
000000000103b9fd	movl	0x14(%rsp), %ecx
000000000103ba01	movl	%ecx, 0x38(%rsp)
000000000103ba05	movq	%rax, 0x40(%rsp)
000000000103ba0a	movq	0x20(%rsp), %rbp
000000000103ba0f	addq	$0x28, %rsp
000000000103ba13	retq
000000000103ba14	callq	runtime.morestack_noctxt
000000000103ba19	jmp	time.now
000000000103ba1b	int3
000000000103ba1c	int3
000000000103ba1d	int3
000000000103ba1e	int3
000000000103ba1f	int3
runtime.traceReader:
000000000103ba20	movq	%gs:0x30, %rcx
000000000103ba29	cmpq	0x10(%rcx), %rsp
000000000103ba2d	jbe	0x103bb04
000000000103ba33	subq	$0x18, %rsp
000000000103ba37	movq	%rbp, 0x10(%rsp)
000000000103ba3c	leaq	0x10(%rsp), %rbp
000000000103ba41	cmpq	$0x0, 0x88fff(%rip)
000000000103ba49	jne	0x103ba5e
000000000103ba4b	movq	$0x0, 0x20(%rsp)
000000000103ba54	movq	0x10(%rsp), %rbp
000000000103ba59	addq	$0x18, %rsp
000000000103ba5d	retq
000000000103ba5e	cmpq	$0x0, 0x88fd2(%rip)
000000000103ba66	jne	0x103ba74
000000000103ba68	leaq	0x88f82(%rip), %rax
000000000103ba6f	cmpb	$0x0, (%rax)
000000000103ba72	je	0x103ba4b
000000000103ba74	leaq	runtime.trace(%rip), %rax
000000000103ba7b	movq	%rax, (%rsp)
000000000103ba7f	callq	runtime.lock
000000000103ba84	movq	0x88fbd(%rip), %rax
000000000103ba8b	testq	%rax, %rax
000000000103ba8e	jne	0x103bab3
000000000103ba90	leaq	runtime.trace(%rip), %rax
000000000103ba97	movq	%rax, (%rsp)
000000000103ba9b	callq	runtime.unlock
000000000103baa0	movq	$0x0, 0x20(%rsp)
000000000103baa9	movq	0x10(%rsp), %rbp
000000000103baae	addq	$0x18, %rsp
000000000103bab2	retq
000000000103bab3	cmpq	$0x0, 0x88f7d(%rip)
000000000103babb	jne	0x103bac9
000000000103babd	leaq	0x88f2d(%rip), %rcx
000000000103bac4	cmpb	$0x0, (%rcx)
000000000103bac7	je	0x103ba90
000000000103bac9	leaq	0x88f78(%rip), %rcx
000000000103bad0	testb	%al, (%rcx)
000000000103bad2	movq	%rax, 0x8(%rsp)
000000000103bad7	xorl	%ecx, %ecx
000000000103bad9	movq	%rcx, 0x88f68(%rip)
000000000103bae0	leaq	runtime.trace(%rip), %rcx
000000000103bae7	movq	%rcx, (%rsp)
000000000103baeb	callq	runtime.unlock
000000000103baf0	movq	0x8(%rsp), %rax
000000000103baf5	movq	%rax, 0x20(%rsp)
000000000103bafa	movq	0x10(%rsp), %rbp
000000000103baff	addq	$0x18, %rsp
000000000103bb03	retq
000000000103bb04	callq	runtime.morestack_noctxt
000000000103bb09	jmp	runtime.traceReader
000000000103bb0e	int3
000000000103bb0f	int3
runtime.traceProcFree:
000000000103bb10	movq	%gs:0x30, %rcx
000000000103bb19	cmpq	0x10(%rcx), %rsp
000000000103bb1d	jbe	0x103bbbb
000000000103bb23	subq	$0x18, %rsp
000000000103bb27	movq	%rbp, 0x10(%rsp)
000000000103bb2c	leaq	0x10(%rsp), %rbp
000000000103bb31	movq	0x20(%rsp), %rax
000000000103bb36	testb	%al, (%rax)
000000000103bb38	movq	0x1218(%rax), %rcx
000000000103bb3f	movq	$0x0, 0x1218(%rax)
000000000103bb4a	testq	%rcx, %rcx
000000000103bb4d	je	0x103bbb1
000000000103bb4f	movq	%rcx, 0x8(%rsp)
000000000103bb54	leaq	runtime.trace(%rip), %rax
000000000103bb5b	movq	%rax, (%rsp)
000000000103bb5f	callq	runtime.lock
000000000103bb64	movq	0x8(%rsp), %rax
000000000103bb69	movq	%rax, %rcx
000000000103bb6c	movq	$0x0, (%rax)
000000000103bb73	cmpq	$0x0, 0x88ebd(%rip)
000000000103bb7b	jne	0x103bba5
000000000103bb7d	movq	%rcx, 0x88eb4(%rip)
000000000103bb84	movq	%rcx, 0x88eb5(%rip)
000000000103bb8b	leaq	runtime.trace(%rip), %rax
000000000103bb92	movq	%rax, (%rsp)
000000000103bb96	callq	runtime.unlock
000000000103bb9b	movq	0x10(%rsp), %rbp
000000000103bba0	addq	$0x18, %rsp
000000000103bba4	retq
000000000103bba5	movq	0x88e94(%rip), %rax
000000000103bbac	movq	%rcx, (%rax)
000000000103bbaf	jmp	0x103bb84
000000000103bbb1	movq	0x10(%rsp), %rbp
000000000103bbb6	addq	$0x18, %rsp
000000000103bbba	retq
000000000103bbbb	callq	runtime.morestack_noctxt
000000000103bbc0	jmp	runtime.traceProcFree
000000000103bbc5	int3
000000000103bbc6	int3
000000000103bbc7	int3
000000000103bbc8	int3
000000000103bbc9	int3
000000000103bbca	int3
000000000103bbcb	int3
000000000103bbcc	int3
000000000103bbcd	int3
000000000103bbce	int3
000000000103bbcf	int3
runtime.traceEvent:
000000000103bbd0	movq	%gs:0x30, %rcx
000000000103bbd9	cmpq	0x10(%rcx), %rsp
000000000103bbdd	jbe	0x103bcbd
000000000103bbe3	subq	$0x58, %rsp
000000000103bbe7	movq	%rbp, 0x50(%rsp)
000000000103bbec	leaq	0x50(%rsp), %rbp
000000000103bbf1	callq	runtime.traceAcquireBuffer
000000000103bbf6	movq	(%rsp), %rax
000000000103bbfa	movl	0x8(%rsp), %ecx
000000000103bbfe	movq	0x10(%rsp), %rdx
000000000103bc03	leaq	0x88de6(%rip), %rbx
000000000103bc0a	cmpb	$0x0, (%rbx)
000000000103bc0d	je	0x103bc99
000000000103bc13	movq	0x68(%rsp), %rbx
000000000103bc18	testq	%rbx, %rbx
000000000103bc1b	jle	0x103bc35
000000000103bc1d	movq	%gs:0x30, %rsi
000000000103bc26	leaq	0x1(%rbx), %rdi
000000000103bc2a	cmpq	%rsi, 0xc0(%rax)
000000000103bc31	cmoveq	%rdi, %rbx
000000000103bc35	movl	%ecx, 0x4c(%rsp)
000000000103bc39	movq	$0x0, (%rsp)
000000000103bc41	movq	%rax, 0x8(%rsp)
000000000103bc46	movl	%ecx, 0x10(%rsp)
000000000103bc4a	movq	%rdx, 0x18(%rsp)
000000000103bc4f	movzbl	0x60(%rsp), %eax
000000000103bc54	movb	%al, 0x20(%rsp)
000000000103bc58	movq	%rbx, 0x28(%rsp)
000000000103bc5d	movq	0x70(%rsp), %rax
000000000103bc62	movq	%rax, 0x30(%rsp)
000000000103bc67	movq	0x78(%rsp), %rax
000000000103bc6c	movq	%rax, 0x38(%rsp)
000000000103bc71	movq	0x80(%rsp), %rax
000000000103bc79	movq	%rax, 0x40(%rsp)
000000000103bc7e	callq	runtime.traceEventLocked
000000000103bc83	movl	0x4c(%rsp), %eax
000000000103bc87	movl	%eax, (%rsp)
000000000103bc8a	callq	runtime.traceReleaseBuffer
000000000103bc8f	movq	0x50(%rsp), %rbp
000000000103bc94	addq	$0x58, %rsp
000000000103bc98	retq
000000000103bc99	testb	%al, (%rax)
000000000103bc9b	leaq	0x298(%rax), %rbx
000000000103bca2	cmpb	$0x0, (%rbx)
000000000103bca5	jne	0x103bc13
000000000103bcab	movl	%ecx, (%rsp)
000000000103bcae	callq	runtime.traceReleaseBuffer
000000000103bcb3	movq	0x50(%rsp), %rbp
000000000103bcb8	addq	$0x58, %rsp
000000000103bcbc	retq
000000000103bcbd	callq	runtime.morestack_noctxt
000000000103bcc2	jmp	runtime.traceEvent
000000000103bcc7	int3
000000000103bcc8	int3
000000000103bcc9	int3
000000000103bcca	int3
000000000103bccb	int3
000000000103bccc	int3
000000000103bccd	int3
000000000103bcce	int3
000000000103bccf	int3
runtime.traceEventLocked:
000000000103bcd0	movq	%gs:0x30, %rcx
000000000103bcd9	cmpq	0x10(%rcx), %rsp
000000000103bcdd	jbe	0x103bf68
000000000103bce3	subq	$0x68, %rsp
000000000103bce7	movq	%rbp, 0x60(%rsp)
000000000103bcec	leaq	0x60(%rsp), %rbp
000000000103bcf1	movq	0x88(%rsp), %rax
000000000103bcf9	movq	(%rax), %rcx
000000000103bcfc	movq	0x70(%rsp), %rdx
000000000103bd01	addq	$0x34, %rdx
000000000103bd05	movq	%rdx, 0x40(%rsp)
000000000103bd0a	movq	%rcx, %rbx
000000000103bd0d	testq	%rcx, %rcx
000000000103bd10	je	0x103bd29
000000000103bd12	movq	0x10(%rcx), %rsi
000000000103bd16	addq	$-0xfbe8, %rsi
000000000103bd1d	negq	%rsi
000000000103bd20	cmpq	%rdx, %rsi
000000000103bd23	jge	0x103bf37
000000000103bd29	movq	%rbx, (%rsp)
000000000103bd2d	movl	0x80(%rsp), %eax
000000000103bd34	movl	%eax, 0x8(%rsp)
000000000103bd38	callq	runtime.traceFlush
000000000103bd3d	movq	0x10(%rsp), %rax
000000000103bd42	movq	%rax, %rcx
000000000103bd45	movq	0x88(%rsp), %rdx
000000000103bd4d	movq	%rcx, (%rdx)
000000000103bd50	movq	%rax, 0x58(%rsp)
000000000103bd55	callq	runtime.cputicks
000000000103bd5a	movq	(%rsp), %rax
000000000103bd5e	shrq	$0x6, %rax
000000000103bd62	movq	0x58(%rsp), %rcx
000000000103bd67	movq	0x8(%rcx), %rdx
000000000103bd6b	movq	%rax, 0x8(%rcx)
000000000103bd6f	subq	%rdx, %rax
000000000103bd72	movq	0x98(%rsp), %rdx
000000000103bd7a	testq	%rdx, %rdx
000000000103bd7d	jl	0x103bf27
000000000103bd83	movq	0xa8(%rsp), %rbx
000000000103bd8b	leal	0x1(%rbx), %esi
000000000103bd8e	cmpb	$0x3, %sil
000000000103bd92	jbe	0x103bd99
000000000103bd94	movl	$0x3, %esi
000000000103bd99	movq	0x10(%rcx), %rdi
000000000103bd9d	movl	%esi, %r8d
000000000103bda0	shll	$0x6, %esi
000000000103bda3	movzbl	0x90(%rsp), %r9d
000000000103bdac	orl	%esi, %r9d
000000000103bdaf	cmpq	$0xfbe8, %rdi
000000000103bdb6	jae	0x103bf61
000000000103bdbc	movq	%rdi, 0x38(%rsp)
000000000103bdc1	movb	%r9b, 0x418(%rcx,%rdi)
000000000103bdc9	incq	0x10(%rcx)
000000000103bdcd	cmpb	$0x3, %r8b
000000000103bdd1	je	0x103bee3
000000000103bdd7	xorl	%esi, %esi
000000000103bdd9	movq	%rsi, 0x50(%rsp)
000000000103bdde	movq	%rcx, (%rsp)
000000000103bde2	movq	%rax, 0x8(%rsp)
000000000103bde7	callq	"runtime.(*traceBuf).varint"
000000000103bdec	xorl	%eax, %eax
000000000103bdee	jmp	0x103be1c
000000000103bdf0	movq	%rax, 0x48(%rsp)
000000000103bdf5	movq	0xa0(%rsp), %rcx
000000000103bdfd	movq	(%rcx,%rax,8), %rdx
000000000103be01	movq	0x58(%rsp), %rbx
000000000103be06	movq	%rbx, (%rsp)
000000000103be0a	movq	%rdx, 0x8(%rsp)
000000000103be0f	callq	"runtime.(*traceBuf).varint"
000000000103be14	movq	0x48(%rsp), %rax
000000000103be19	incq	%rax
000000000103be1c	movq	0xa8(%rsp), %rcx
000000000103be24	cmpq	%rcx, %rax
000000000103be27	jl	0x103bdf0
000000000103be29	movq	0x98(%rsp), %rax
000000000103be31	testq	%rax, %rax
000000000103be34	je	0x103bec7
000000000103be3a	jg	0x103be75
000000000103be3c	movq	0x58(%rsp), %rax
000000000103be41	movq	0x10(%rax), %rax
000000000103be45	movq	0x38(%rsp), %rcx
000000000103be4a	subq	%rcx, %rax
000000000103be4d	movq	0x40(%rsp), %rcx
000000000103be52	cmpq	%rcx, %rax
000000000103be55	jg	0x103bf3f
000000000103be5b	movq	0x50(%rsp), %rcx
000000000103be60	testq	%rcx, %rcx
000000000103be63	je	0x103be6b
000000000103be65	addq	$-0x2, %rax
000000000103be69	movb	%al, (%rcx)
000000000103be6b	movq	0x60(%rsp), %rbp
000000000103be70	addq	$0x68, %rsp
000000000103be74	retq
000000000103be75	movq	0x58(%rsp), %rcx
000000000103be7a	leaq	0x18(%rcx), %rdx
000000000103be7e	testb	%al, (%rdx)
000000000103be80	movq	0x78(%rsp), %rbx
000000000103be85	movq	%rbx, (%rsp)
000000000103be89	movq	%rdx, 0x8(%rsp)
000000000103be8e	movq	$0x80, 0x10(%rsp)
000000000103be97	movq	$0x80, 0x18(%rsp)
000000000103bea0	movq	%rax, 0x20(%rsp)
000000000103bea5	callq	runtime.traceStackID
000000000103beaa	movq	0x28(%rsp), %rax
000000000103beaf	movq	0x58(%rsp), %rcx
000000000103beb4	movq	%rcx, (%rsp)
000000000103beb8	movq	%rax, 0x8(%rsp)
000000000103bebd	callq	"runtime.(*traceBuf).varint"
000000000103bec2	jmp	0x103be3c
000000000103bec7	movq	0x58(%rsp), %rax
000000000103becc	movq	%rax, (%rsp)
000000000103bed0	movq	$0x0, 0x8(%rsp)
000000000103bed9	callq	"runtime.(*traceBuf).varint"
000000000103bede	jmp	0x103be3c
000000000103bee3	movq	%rax, 0x30(%rsp)
000000000103bee8	movq	%rcx, (%rsp)
000000000103beec	movq	$0x0, 0x8(%rsp)
000000000103bef5	callq	"runtime.(*traceBuf).varint"
000000000103befa	movq	0x58(%rsp), %rax
000000000103beff	movq	0x10(%rax), %rcx
000000000103bf03	leaq	-0x1(%rcx), %rdx
000000000103bf07	cmpq	$0xfbe8, %rdx
000000000103bf0e	jae	0x103bf5a
000000000103bf10	leaq	0x417(%rcx,%rax), %rsi
000000000103bf18	movq	0x30(%rsp), %rax
000000000103bf1d	movq	0x58(%rsp), %rcx
000000000103bf22	jmp	0x103bdd9
000000000103bf27	movq	0xa8(%rsp), %rbx
000000000103bf2f	movq	%rbx, %rsi
000000000103bf32	jmp	0x103bd8e
000000000103bf37	movq	%rcx, %rax
000000000103bf3a	jmp	0x103bd50
000000000103bf3f	leaq	0x310a2(%rip), %rax
000000000103bf46	movq	%rax, (%rsp)
000000000103bf4a	movq	$0x1d, 0x8(%rsp)
000000000103bf53	callq	runtime.throw
000000000103bf58	ud2
000000000103bf5a	callq	runtime.panicindex
000000000103bf5f	ud2
000000000103bf61	callq	runtime.panicindex
000000000103bf66	ud2
000000000103bf68	callq	runtime.morestack_noctxt
000000000103bf6d	jmp	runtime.traceEventLocked
000000000103bf72	int3
000000000103bf73	int3
000000000103bf74	int3
000000000103bf75	int3
000000000103bf76	int3
000000000103bf77	int3
000000000103bf78	int3
000000000103bf79	int3
000000000103bf7a	int3
000000000103bf7b	int3
000000000103bf7c	int3
000000000103bf7d	int3
000000000103bf7e	int3
000000000103bf7f	int3
runtime.traceStackID:
000000000103bf80	movq	%gs:0x30, %rcx
000000000103bf89	cmpq	0x10(%rcx), %rsp
000000000103bf8d	jbe	0x103c0b2
000000000103bf93	subq	$0x40, %rsp
000000000103bf97	movq	%rbp, 0x38(%rsp)
000000000103bf9c	leaq	0x38(%rsp), %rbp
000000000103bfa1	movq	%gs:0x30, %rax
000000000103bfaa	movq	0x48(%rsp), %rcx
000000000103bfaf	movq	0xc0(%rcx), %rcx
000000000103bfb6	movq	%rcx, 0x30(%rsp)
000000000103bfbb	cmpq	%rax, %rcx
000000000103bfbe	je	0x103c06d
000000000103bfc4	testq	%rcx, %rcx
000000000103bfc7	jne	0x103c02d
000000000103bfc9	xorl	%eax, %eax
000000000103bfcb	leaq	-0x1(%rax), %rdx
000000000103bfcf	testq	%rax, %rax
000000000103bfd2	cmovgq	%rdx, %rax
000000000103bfd6	testq	%rax, %rax
000000000103bfd9	jle	0x103bfe8
000000000103bfdb	cmpq	$0x1, 0x98(%rcx)
000000000103bfe3	jne	0x103bfe8
000000000103bfe5	decq	%rax
000000000103bfe8	movq	0x60(%rsp), %rcx
000000000103bfed	cmpq	%rcx, %rax
000000000103bff0	ja	0x103c0ab
000000000103bff6	leaq	0x88a53(%rip), %rdx
000000000103bffd	movq	%rdx, (%rsp)
000000000103c001	movq	0x50(%rsp), %rdx
000000000103c006	movq	%rdx, 0x8(%rsp)
000000000103c00b	movq	%rax, 0x10(%rsp)
000000000103c010	movq	%rcx, 0x18(%rsp)
000000000103c015	callq	"runtime.(*traceStackTable).put"
000000000103c01a	movl	0x20(%rsp), %eax
000000000103c01e	movq	%rax, 0x70(%rsp)
000000000103c023	movq	0x38(%rsp), %rbp
000000000103c028	addq	$0x40, %rsp
000000000103c02c	retq
000000000103c02d	movq	%rcx, (%rsp)
000000000103c031	movq	0x68(%rsp), %rax
000000000103c036	movq	%rax, 0x8(%rsp)
000000000103c03b	movq	0x50(%rsp), %rax
000000000103c040	movq	%rax, 0x10(%rsp)
000000000103c045	movq	0x58(%rsp), %rdx
000000000103c04a	movq	%rdx, 0x18(%rsp)
000000000103c04f	movq	0x60(%rsp), %rdx
000000000103c054	movq	%rdx, 0x20(%rsp)
000000000103c059	callq	runtime.gcallers
000000000103c05e	movq	0x28(%rsp), %rax
000000000103c063	movq	0x30(%rsp), %rcx
000000000103c068	jmp	0x103bfcb
000000000103c06d	movq	0x68(%rsp), %rax
000000000103c072	incq	%rax
000000000103c075	movq	%rax, (%rsp)
000000000103c079	movq	0x50(%rsp), %rax
000000000103c07e	movq	%rax, 0x8(%rsp)
000000000103c083	movq	0x58(%rsp), %rcx
000000000103c088	movq	%rcx, 0x10(%rsp)
000000000103c08d	movq	0x60(%rsp), %rcx
000000000103c092	movq	%rcx, 0x18(%rsp)
000000000103c097	callq	runtime.callers
000000000103c09c	movq	0x20(%rsp), %rax
000000000103c0a1	movq	0x30(%rsp), %rcx
000000000103c0a6	jmp	0x103bfcb
000000000103c0ab	callq	runtime.panicslice
000000000103c0b0	ud2
000000000103c0b2	callq	runtime.morestack_noctxt
000000000103c0b7	jmp	runtime.traceStackID
000000000103c0bc	int3
000000000103c0bd	int3
000000000103c0be	int3
000000000103c0bf	int3
runtime.traceAcquireBuffer:
000000000103c0c0	movq	%gs:0x30, %rcx
000000000103c0c9	cmpq	0x10(%rcx), %rsp
000000000103c0cd	jbe	0x103c164
000000000103c0d3	subq	$0x18, %rsp
000000000103c0d7	movq	%rbp, 0x10(%rsp)
000000000103c0dc	leaq	0x10(%rsp), %rbp
000000000103c0e1	movq	%gs:0x30, %rax
000000000103c0ea	movq	0x30(%rax), %rcx
000000000103c0ee	incl	0x100(%rcx)
000000000103c0f4	movq	0x30(%rax), %rcx
000000000103c0f8	testb	%al, (%rax)
000000000103c0fa	movq	0xd0(%rcx), %rax
000000000103c101	testq	%rax, %rax
000000000103c104	je	0x103c127
000000000103c106	movl	0x8(%rax), %edx
000000000103c109	movq	%rcx, 0x20(%rsp)
000000000103c10e	movl	%edx, 0x28(%rsp)
000000000103c112	addq	$0x1218, %rax
000000000103c118	movq	%rax, 0x30(%rsp)
000000000103c11d	movq	0x10(%rsp), %rbp
000000000103c122	addq	$0x18, %rsp
000000000103c126	retq
000000000103c127	movq	%rcx, 0x8(%rsp)
000000000103c12c	leaq	0x9896d(%rip), %rax
000000000103c133	movq	%rax, (%rsp)
000000000103c137	callq	runtime.lock
000000000103c13c	movq	0x8(%rsp), %rax
000000000103c141	movq	%rax, 0x20(%rsp)
000000000103c146	movl	$0xffffffff, 0x28(%rsp)
000000000103c14e	leaq	0x98953(%rip), %rax
000000000103c155	movq	%rax, 0x30(%rsp)
000000000103c15a	movq	0x10(%rsp), %rbp
000000000103c15f	addq	$0x18, %rsp
000000000103c163	retq
000000000103c164	callq	runtime.morestack_noctxt
000000000103c169	jmp	runtime.traceAcquireBuffer
000000000103c16e	int3
000000000103c16f	int3
runtime.traceReleaseBuffer:
000000000103c170	movq	%gs:0x30, %rcx
000000000103c179	cmpq	0x10(%rcx), %rsp
000000000103c17d	jbe	0x103c1e9
000000000103c17f	subq	$0x10, %rsp
000000000103c183	movq	%rbp, 0x8(%rsp)
000000000103c188	leaq	0x8(%rsp), %rbp
000000000103c18d	movl	0x18(%rsp), %eax
000000000103c191	cmpl	$-0x1, %eax
000000000103c194	je	0x103c1d7
000000000103c196	movq	%gs:0x30, %rax
000000000103c19f	movq	0x30(%rax), %rcx
000000000103c1a3	movl	0x100(%rcx), %edx
000000000103c1a9	leal	-0x1(%rdx), %ebx
000000000103c1ac	movl	%ebx, 0x100(%rcx)
000000000103c1b2	cmpl	$0x1, %edx
000000000103c1b5	jne	0x103c1cd
000000000103c1b7	testb	%al, (%rax)
000000000103c1b9	leaq	0xb1(%rax), %rcx
000000000103c1c0	cmpb	$0x0, (%rcx)
000000000103c1c3	je	0x103c1cd
000000000103c1c5	movq	$-0x522, 0x10(%rax)
000000000103c1cd	movq	0x8(%rsp), %rbp
000000000103c1d2	addq	$0x10, %rsp
000000000103c1d6	retq
000000000103c1d7	leaq	0x988c2(%rip), %rax
000000000103c1de	movq	%rax, (%rsp)
000000000103c1e2	callq	runtime.unlock
000000000103c1e7	jmp	0x103c196
000000000103c1e9	callq	runtime.morestack_noctxt
000000000103c1ee	jmp	runtime.traceReleaseBuffer
runtime.traceFlush:
000000000103c1f0	movq	%gs:0x30, %rcx
000000000103c1f9	cmpq	0x10(%rcx), %rsp
000000000103c1fd	jbe	0x103c3bf
000000000103c203	subq	$0x40, %rsp
000000000103c207	movq	%rbp, 0x38(%rsp)
000000000103c20c	leaq	0x38(%rsp), %rbp
000000000103c211	movq	0x887d0(%rip), %rax
000000000103c218	testq	%rax, %rax
000000000103c21b	je	0x103c393
000000000103c221	movq	%gs:0x30, %rcx
000000000103c22a	movq	0x30(%rcx), %rcx
000000000103c22e	movq	0xc0(%rcx), %rcx
000000000103c235	cmpq	%rcx, %rax
000000000103c238	setne	%al
000000000103c23b	movb	%al, 0x1f(%rsp)
000000000103c23f	testb	%al, %al
000000000103c241	jne	0x103c379
000000000103c247	movq	0x48(%rsp), %rcx
000000000103c24c	testq	%rcx, %rcx
000000000103c24f	je	0x103c277
000000000103c251	movq	%rcx, %rdx
000000000103c254	movq	$0x0, (%rcx)
000000000103c25b	cmpq	$0x0, 0x887d5(%rip)
000000000103c263	jne	0x103c36a
000000000103c269	movq	%rdx, 0x887c8(%rip)
000000000103c270	movq	%rdx, 0x887c9(%rip)
000000000103c277	movq	0x887b2(%rip), %rcx
000000000103c27e	testq	%rcx, %rcx
000000000103c281	je	0x103c33f
000000000103c287	movq	%rcx, %rdx
000000000103c28a	movq	(%rcx), %rcx
000000000103c28d	movq	%rcx, 0x8879c(%rip)
000000000103c294	movq	%rdx, 0x20(%rsp)
000000000103c299	movq	%rdx, 0x30(%rsp)
000000000103c29e	xorl	%ecx, %ecx
000000000103c2a0	movq	%rcx, (%rdx)
000000000103c2a3	movq	$0x0, 0x10(%rdx)
000000000103c2ab	callq	runtime.cputicks
000000000103c2b0	movq	(%rsp), %rax
000000000103c2b4	shrq	$0x6, %rax
000000000103c2b8	movq	0x30(%rsp), %rcx
000000000103c2bd	movq	%rax, 0x8(%rcx)
000000000103c2c1	movq	0x10(%rcx), %rdx
000000000103c2c5	cmpq	$0xfbe8, %rdx
000000000103c2cc	jae	0x103c39d
000000000103c2d2	movq	%rax, 0x28(%rsp)
000000000103c2d7	movb	$0x41, 0x418(%rcx,%rdx)
000000000103c2df	incq	0x10(%rcx)
000000000103c2e3	movq	%rcx, (%rsp)
000000000103c2e7	movl	0x50(%rsp), %eax
000000000103c2eb	movslq	%eax, %rax
000000000103c2ee	movq	%rax, 0x8(%rsp)
000000000103c2f3	callq	"runtime.(*traceBuf).varint"
000000000103c2f8	movq	0x30(%rsp), %rax
000000000103c2fd	movq	%rax, (%rsp)
000000000103c301	movq	0x28(%rsp), %rax
000000000103c306	movq	%rax, 0x8(%rsp)
000000000103c30b	callq	"runtime.(*traceBuf).varint"
000000000103c310	movzbl	0x1f(%rsp), %eax
000000000103c315	testb	%al, %al
000000000103c317	jne	0x103c32d
000000000103c319	movq	0x20(%rsp), %rax
000000000103c31e	movq	%rax, 0x58(%rsp)
000000000103c323	movq	0x38(%rsp), %rbp
000000000103c328	addq	$0x40, %rsp
000000000103c32c	retq
000000000103c32d	leaq	runtime.trace(%rip), %rax
000000000103c334	movq	%rax, (%rsp)
000000000103c338	callq	runtime.unlock
000000000103c33d	jmp	0x103c319
000000000103c33f	movq	$0x10000, (%rsp)
000000000103c347	leaq	0x995d2(%rip), %rax
000000000103c34e	movq	%rax, 0x8(%rsp)
000000000103c353	callq	runtime.sysAlloc
000000000103c358	movq	0x10(%rsp), %rax
000000000103c35d	testq	%rax, %rax
000000000103c360	je	0x103c3a4
000000000103c362	movq	%rax, %rdx
000000000103c365	jmp	0x103c294
000000000103c36a	movq	0x886cf(%rip), %rcx
000000000103c371	movq	%rdx, (%rcx)
000000000103c374	jmp	0x103c270
000000000103c379	leaq	runtime.trace(%rip), %rax
000000000103c380	movq	%rax, (%rsp)
000000000103c384	callq	runtime.lock
000000000103c389	movzbl	0x1f(%rsp), %eax
000000000103c38e	jmp	0x103c247
000000000103c393	movl	$0x1, %eax
000000000103c398	jmp	0x103c23b
000000000103c39d	callq	runtime.panicindex
000000000103c3a2	ud2
000000000103c3a4	leaq	0x2fb85(%rip), %rax
000000000103c3ab	movq	%rax, (%rsp)
000000000103c3af	movq	$0x14, 0x8(%rsp)
000000000103c3b8	callq	runtime.throw
000000000103c3bd	ud2
000000000103c3bf	callq	runtime.morestack_noctxt
000000000103c3c4	jmp	runtime.traceFlush
000000000103c3c9	int3
000000000103c3ca	int3
000000000103c3cb	int3
000000000103c3cc	int3
000000000103c3cd	int3
000000000103c3ce	int3
000000000103c3cf	int3
runtime.(*traceBuf).varint:
000000000103c3d0	subq	$0x8, %rsp
000000000103c3d4	movq	%rbp, (%rsp)
000000000103c3d8	leaq	(%rsp), %rbp
000000000103c3dc	movq	0x10(%rsp), %rax
000000000103c3e1	movq	0x10(%rax), %rcx
000000000103c3e5	movq	0x18(%rsp), %rdx
000000000103c3ea	jmp	0x103c403
000000000103c3ec	movq	%rdx, %rbx
000000000103c3ef	orl	$-0x80, %edx
000000000103c3f2	movb	%dl, 0x418(%rax,%rcx)
000000000103c3f9	shrq	$0x7, %rbx
000000000103c3fd	incq	%rcx
000000000103c400	movq	%rbx, %rdx
000000000103c403	cmpq	$0x80, %rdx
000000000103c40a	jb	0x103c417
000000000103c40c	cmpq	$0xfbe8, %rcx
000000000103c413	jb	0x103c3ec
000000000103c415	jmp	0x103c43e
000000000103c417	cmpq	$0xfbe8, %rcx
000000000103c41e	jae	0x103c437
000000000103c420	movb	%dl, 0x418(%rax,%rcx)
000000000103c427	incq	%rcx
000000000103c42a	movq	%rcx, 0x10(%rax)
000000000103c42e	movq	(%rsp), %rbp
000000000103c432	addq	$0x8, %rsp
000000000103c436	retq
000000000103c437	callq	runtime.panicindex
000000000103c43c	ud2
000000000103c43e	callq	runtime.panicindex
000000000103c443	ud2
000000000103c445	int3
000000000103c446	int3
000000000103c447	int3
000000000103c448	int3
000000000103c449	int3
000000000103c44a	int3
000000000103c44b	int3
000000000103c44c	int3
000000000103c44d	int3
000000000103c44e	int3
000000000103c44f	int3
runtime.(*traceStackTable).put:
000000000103c450	movq	%gs:0x30, %rcx
000000000103c459	cmpq	0x10(%rcx), %rsp
000000000103c45d	jbe	0x103c638
000000000103c463	subq	$0x50, %rsp
000000000103c467	movq	%rbp, 0x48(%rsp)
000000000103c46c	leaq	0x48(%rsp), %rbp
000000000103c471	movq	0x68(%rsp), %rax
000000000103c476	testq	%rax, %rax
000000000103c479	je	0x103c61f
000000000103c47f	movq	0x60(%rsp), %rcx
000000000103c484	movq	%rcx, (%rsp)
000000000103c488	movq	$0x0, 0x8(%rsp)
000000000103c491	shlq	$0x3, %rax
000000000103c495	movq	%rax, 0x10(%rsp)
000000000103c49a	callq	runtime.memhash
000000000103c49f	movq	0x18(%rsp), %rax
000000000103c4a4	movq	%rax, 0x38(%rsp)
000000000103c4a9	movq	0x58(%rsp), %rcx
000000000103c4ae	movq	%rcx, (%rsp)
000000000103c4b2	movq	0x60(%rsp), %rdx
000000000103c4b7	movq	%rdx, 0x8(%rsp)
000000000103c4bc	movq	0x68(%rsp), %rbx
000000000103c4c1	movq	%rbx, 0x10(%rsp)
000000000103c4c6	movq	0x70(%rsp), %rsi
000000000103c4cb	movq	%rsi, 0x18(%rsp)
000000000103c4d0	movq	%rax, 0x20(%rsp)
000000000103c4d5	callq	"runtime.(*traceStackTable).find"
000000000103c4da	movl	0x28(%rsp), %eax
000000000103c4de	testl	%eax, %eax
000000000103c4e0	jne	0x103c611
000000000103c4e6	movq	0x58(%rsp), %rax
000000000103c4eb	testb	%al, (%rax)
000000000103c4ed	movq	%rax, (%rsp)
000000000103c4f1	callq	runtime.lock
000000000103c4f6	movq	0x58(%rsp), %rax
000000000103c4fb	movq	%rax, (%rsp)
000000000103c4ff	movq	0x60(%rsp), %rcx
000000000103c504	movq	%rcx, 0x8(%rsp)
000000000103c509	movq	0x68(%rsp), %rdx
000000000103c50e	movq	%rdx, 0x10(%rsp)
000000000103c513	movq	0x70(%rsp), %rbx
000000000103c518	movq	%rbx, 0x18(%rsp)
000000000103c51d	movq	0x38(%rsp), %rbx
000000000103c522	movq	%rbx, 0x20(%rsp)
000000000103c527	callq	"runtime.(*traceStackTable).find"
000000000103c52c	movl	0x28(%rsp), %eax
000000000103c530	testl	%eax, %eax
000000000103c532	jne	0x103c5ed
000000000103c538	movq	0x58(%rsp), %rax
000000000103c53d	incl	0x8(%rax)
000000000103c540	movq	%rax, (%rsp)
000000000103c544	movq	0x68(%rsp), %rcx
000000000103c549	movq	%rcx, 0x8(%rsp)
000000000103c54e	callq	"runtime.(*traceStackTable).newStack"
000000000103c553	movq	0x10(%rsp), %rax
000000000103c558	movq	0x38(%rsp), %rcx
000000000103c55d	movq	%rcx, 0x8(%rax)
000000000103c561	movq	0x58(%rsp), %rdx
000000000103c566	movl	0x8(%rdx), %ebx
000000000103c569	movl	%ebx, 0x10(%rax)
000000000103c56c	movq	0x68(%rsp), %rbx
000000000103c571	movq	%rbx, 0x18(%rax)
000000000103c575	leaq	0x20(%rax), %rsi
000000000103c579	testb	%al, (%rsi)
000000000103c57b	cmpq	$0x80, %rbx
000000000103c582	ja	0x103c631
000000000103c588	movq	0x60(%rsp), %rsi
000000000103c58d	xorl	%edi, %edi
000000000103c58f	jmp	0x103c59d
000000000103c591	movq	(%rsi,%rdi,8), %r8
000000000103c595	movq	%r8, 0x20(%rax,%rdi,8)
000000000103c59a	incq	%rdi
000000000103c59d	cmpq	%rbx, %rdi
000000000103c5a0	jl	0x103c591
000000000103c5a2	movq	%rax, 0x40(%rsp)
000000000103c5a7	andq	$0x1fff, %rcx
000000000103c5ae	movq	0x20(%rdx,%rcx,8), %rbx
000000000103c5b3	movq	%rbx, (%rax)
000000000103c5b6	leaq	0x20(%rdx,%rcx,8), %rcx
000000000103c5bb	movq	%rcx, (%rsp)
000000000103c5bf	movq	%rax, 0x8(%rsp)
000000000103c5c4	callq	runtime.atomicstorep
000000000103c5c9	movq	0x58(%rsp), %rax
000000000103c5ce	movq	%rax, (%rsp)
000000000103c5d2	callq	runtime.unlock
000000000103c5d7	movq	0x40(%rsp), %rax
000000000103c5dc	movl	0x10(%rax), %eax
000000000103c5df	movl	%eax, 0x78(%rsp)
000000000103c5e3	movq	0x48(%rsp), %rbp
000000000103c5e8	addq	$0x50, %rsp
000000000103c5ec	retq
000000000103c5ed	movl	%eax, 0x34(%rsp)
000000000103c5f1	movq	0x58(%rsp), %rax
000000000103c5f6	movq	%rax, (%rsp)
000000000103c5fa	callq	runtime.unlock
000000000103c5ff	movl	0x34(%rsp), %eax
000000000103c603	movl	%eax, 0x78(%rsp)
000000000103c607	movq	0x48(%rsp), %rbp
000000000103c60c	addq	$0x50, %rsp
000000000103c610	retq
000000000103c611	movl	%eax, 0x78(%rsp)
000000000103c615	movq	0x48(%rsp), %rbp
000000000103c61a	addq	$0x50, %rsp
000000000103c61e	retq
000000000103c61f	movl	$0x0, 0x78(%rsp)
000000000103c627	movq	0x48(%rsp), %rbp
000000000103c62c	addq	$0x50, %rsp
000000000103c630	retq
000000000103c631	callq	runtime.panicslice
000000000103c636	ud2
000000000103c638	callq	runtime.morestack_noctxt
000000000103c63d	jmp	"runtime.(*traceStackTable).put"
000000000103c642	int3
000000000103c643	int3
000000000103c644	int3
000000000103c645	int3
000000000103c646	int3
000000000103c647	int3
000000000103c648	int3
000000000103c649	int3
000000000103c64a	int3
000000000103c64b	int3
000000000103c64c	int3
000000000103c64d	int3
000000000103c64e	int3
000000000103c64f	int3
runtime.(*traceStackTable).find:
000000000103c650	subq	$0x8, %rsp
000000000103c654	movq	%rbp, (%rsp)
000000000103c658	leaq	(%rsp), %rbp
000000000103c65c	movq	0x10(%rsp), %rax
000000000103c661	testb	%al, (%rax)
000000000103c663	movq	0x30(%rsp), %rcx
000000000103c668	movq	%rcx, %rdx
000000000103c66b	andq	$0x1fff, %rcx
000000000103c672	movq	0x20(%rax,%rcx,8), %rax
000000000103c677	movq	0x20(%rsp), %rcx
000000000103c67c	movq	0x18(%rsp), %rbx
000000000103c681	jmp	0x103c6a1
000000000103c683	incq	%rdi
000000000103c686	cmpq	%rsi, %rdi
000000000103c689	jge	0x103c6cb
000000000103c68b	movq	0x20(%rax,%rdi,8), %r8
000000000103c690	cmpq	%rcx, %rdi
000000000103c693	jae	0x103c6ec
000000000103c695	movq	(%rbx,%rdi,8), %r9
000000000103c699	cmpq	%r9, %r8
000000000103c69c	je	0x103c683
000000000103c69e	movq	(%rax), %rax
000000000103c6a1	testq	%rax, %rax
000000000103c6a4	je	0x103c6db
000000000103c6a6	movq	0x8(%rax), %rsi
000000000103c6aa	cmpq	%rsi, %rdx
000000000103c6ad	jne	0x103c69e
000000000103c6af	movq	0x18(%rax), %rsi
000000000103c6b3	cmpq	%rcx, %rsi
000000000103c6b6	jne	0x103c69e
000000000103c6b8	leaq	0x20(%rax), %rdi
000000000103c6bc	testb	%al, (%rdi)
000000000103c6be	cmpq	$0x80, %rsi
000000000103c6c5	ja	0x103c6f3
000000000103c6c7	xorl	%edi, %edi
000000000103c6c9	jmp	0x103c686
000000000103c6cb	movl	0x10(%rax), %eax
000000000103c6ce	movl	%eax, 0x38(%rsp)
000000000103c6d2	movq	(%rsp), %rbp
000000000103c6d6	addq	$0x8, %rsp
000000000103c6da	retq
000000000103c6db	movl	$0x0, 0x38(%rsp)
000000000103c6e3	movq	(%rsp), %rbp
000000000103c6e7	addq	$0x8, %rsp
000000000103c6eb	retq
000000000103c6ec	callq	runtime.panicindex
000000000103c6f1	ud2
000000000103c6f3	callq	runtime.panicslice
000000000103c6f8	ud2
000000000103c6fa	int3
000000000103c6fb	int3
000000000103c6fc	int3
000000000103c6fd	int3
000000000103c6fe	int3
000000000103c6ff	int3
runtime.(*traceStackTable).newStack:
000000000103c700	movq	%gs:0x30, %rcx
000000000103c709	cmpq	0x10(%rcx), %rsp
000000000103c70d	jbe	0x103c757
000000000103c70f	subq	$0x20, %rsp
000000000103c713	movq	%rbp, 0x18(%rsp)
000000000103c718	leaq	0x18(%rsp), %rbp
000000000103c71d	movq	0x28(%rsp), %rax
000000000103c722	testb	%al, (%rax)
000000000103c724	addq	$0x10, %rax
000000000103c728	movq	%rax, (%rsp)
000000000103c72c	movq	0x30(%rsp), %rax
000000000103c731	shlq	$0x3, %rax
000000000103c735	addq	$0x28, %rax
000000000103c739	movq	%rax, 0x8(%rsp)
000000000103c73e	callq	"runtime.(*traceAlloc).alloc"
000000000103c743	movq	0x10(%rsp), %rax
000000000103c748	movq	%rax, 0x38(%rsp)
000000000103c74d	movq	0x18(%rsp), %rbp
000000000103c752	addq	$0x20, %rsp
000000000103c756	retq
000000000103c757	callq	runtime.morestack_noctxt
000000000103c75c	jmp	"runtime.(*traceStackTable).newStack"
000000000103c75e	int3
000000000103c75f	int3
runtime.(*traceAlloc).alloc:
000000000103c760	movq	%gs:0x30, %rcx
000000000103c769	cmpq	0x10(%rcx), %rsp
000000000103c76d	jbe	0x103c868
000000000103c773	subq	$0x20, %rsp
000000000103c777	movq	%rbp, 0x18(%rsp)
000000000103c77c	leaq	0x18(%rsp), %rbp
000000000103c781	movq	0x30(%rsp), %rax
000000000103c786	addq	$0x7, %rax
000000000103c78a	andq	$-0x8, %rax
000000000103c78e	movq	%rax, 0x30(%rsp)
000000000103c793	movq	0x28(%rsp), %rcx
000000000103c798	cmpq	$0x0, (%rcx)
000000000103c79c	jne	0x103c815
000000000103c79e	cmpq	$0xfff8, %rax
000000000103c7a4	ja	0x103c84d
000000000103c7aa	movq	$0x10000, (%rsp)
000000000103c7b2	leaq	0x99167(%rip), %rax
000000000103c7b9	movq	%rax, 0x8(%rsp)
000000000103c7be	callq	runtime.sysAlloc
000000000103c7c3	movq	0x10(%rsp), %rax
000000000103c7c8	testq	%rax, %rax
000000000103c7cb	je	0x103c832
000000000103c7cd	movq	0x28(%rsp), %rcx
000000000103c7d2	movq	(%rcx), %rdx
000000000103c7d5	movq	%rdx, (%rax)
000000000103c7d8	movq	%rax, (%rcx)
000000000103c7db	movq	$0x0, 0x8(%rcx)
000000000103c7e3	movq	(%rcx), %rax
000000000103c7e6	testb	%al, (%rax)
000000000103c7e8	movq	0x8(%rcx), %rdx
000000000103c7ec	cmpq	$0xfff8, %rdx
000000000103c7f3	jae	0x103c82b
000000000103c7f5	movq	0x30(%rsp), %rbx
000000000103c7fa	addq	%rdx, %rbx
000000000103c7fd	movq	%rbx, 0x8(%rcx)
000000000103c801	leaq	0x8(%rax,%rdx), %rax
000000000103c806	movq	%rax, 0x38(%rsp)
000000000103c80b	movq	0x18(%rsp), %rbp
000000000103c810	addq	$0x20, %rsp
000000000103c814	retq
000000000103c815	movq	0x8(%rcx), %rdx
000000000103c819	addq	%rax, %rdx
000000000103c81c	cmpq	$0xfff8, %rdx
000000000103c823	ja	0x103c79e
000000000103c829	jmp	0x103c7e3
000000000103c82b	callq	runtime.panicindex
000000000103c830	ud2
000000000103c832	leaq	0x2f6f7(%rip), %rax
000000000103c839	movq	%rax, (%rsp)
000000000103c83d	movq	$0x14, 0x8(%rsp)
000000000103c846	callq	runtime.throw
000000000103c84b	ud2
000000000103c84d	leaq	0x2fa8d(%rip), %rax
000000000103c854	movq	%rax, (%rsp)
000000000103c858	movq	$0x16, 0x8(%rsp)
000000000103c861	callq	runtime.throw
000000000103c866	ud2
000000000103c868	callq	runtime.morestack_noctxt
000000000103c86d	jmp	"runtime.(*traceAlloc).alloc"
000000000103c872	int3
000000000103c873	int3
000000000103c874	int3
000000000103c875	int3
000000000103c876	int3
000000000103c877	int3
000000000103c878	int3
000000000103c879	int3
000000000103c87a	int3
000000000103c87b	int3
000000000103c87c	int3
000000000103c87d	int3
000000000103c87e	int3
000000000103c87f	int3
runtime.traceGomaxprocs:
000000000103c880	movq	%gs:0x30, %rcx
000000000103c889	cmpq	0x10(%rcx), %rsp
000000000103c88d	jbe	0x103c8ea
000000000103c88f	subq	$0x38, %rsp
000000000103c893	movq	%rbp, 0x30(%rsp)
000000000103c898	leaq	0x30(%rsp), %rbp
000000000103c89d	movq	$0x0, 0x28(%rsp)
000000000103c8a6	movl	0x40(%rsp), %eax
000000000103c8aa	movslq	%eax, %rax
000000000103c8ad	movq	%rax, 0x28(%rsp)
000000000103c8b2	movb	$0x4, (%rsp)
000000000103c8b6	movq	$0x1, 0x8(%rsp)
000000000103c8bf	leaq	0x28(%rsp), %rax
000000000103c8c4	movq	%rax, 0x10(%rsp)
000000000103c8c9	movq	$0x1, 0x18(%rsp)
000000000103c8d2	movq	$0x1, 0x20(%rsp)
000000000103c8db	callq	runtime.traceEvent
000000000103c8e0	movq	0x30(%rsp), %rbp
000000000103c8e5	addq	$0x38, %rsp
000000000103c8e9	retq
000000000103c8ea	callq	runtime.morestack_noctxt
000000000103c8ef	jmp	runtime.traceGomaxprocs
000000000103c8f1	int3
000000000103c8f2	int3
000000000103c8f3	int3
000000000103c8f4	int3
000000000103c8f5	int3
000000000103c8f6	int3
000000000103c8f7	int3
000000000103c8f8	int3
000000000103c8f9	int3
000000000103c8fa	int3
000000000103c8fb	int3
000000000103c8fc	int3
000000000103c8fd	int3
000000000103c8fe	int3
000000000103c8ff	int3
runtime.traceProcStart:
000000000103c900	movq	%gs:0x30, %rcx
000000000103c909	cmpq	0x10(%rcx), %rsp
000000000103c90d	jbe	0x103c977
000000000103c90f	subq	$0x38, %rsp
000000000103c913	movq	%rbp, 0x30(%rsp)
000000000103c918	leaq	0x30(%rsp), %rbp
000000000103c91d	movq	$0x0, 0x28(%rsp)
000000000103c926	movq	%gs:0x30, %rax
000000000103c92f	movq	0x30(%rax), %rax
000000000103c933	movq	0xe0(%rax), %rax
000000000103c93a	movq	%rax, 0x28(%rsp)
000000000103c93f	movb	$0x5, (%rsp)
000000000103c943	movq	$-0x1, 0x8(%rsp)
000000000103c94c	leaq	0x28(%rsp), %rax
000000000103c951	movq	%rax, 0x10(%rsp)
000000000103c956	movq	$0x1, 0x18(%rsp)
000000000103c95f	movq	$0x1, 0x20(%rsp)
000000000103c968	callq	runtime.traceEvent
000000000103c96d	movq	0x30(%rsp), %rbp
000000000103c972	addq	$0x38, %rsp
000000000103c976	retq
000000000103c977	callq	runtime.morestack_noctxt
000000000103c97c	jmp	runtime.traceProcStart
000000000103c97e	int3
000000000103c97f	int3
runtime.traceProcStop:
000000000103c980	movq	%gs:0x30, %rcx
000000000103c989	cmpq	0x10(%rcx), %rsp
000000000103c98d	jbe	0x103ca51
000000000103c993	subq	$0x40, %rsp
000000000103c997	movq	%rbp, 0x38(%rsp)
000000000103c99c	leaq	0x38(%rsp), %rbp
000000000103c9a1	movq	%gs:0x30, %rax
000000000103c9aa	movq	0x30(%rax), %rcx
000000000103c9ae	incl	0x100(%rcx)
000000000103c9b4	movq	0x30(%rax), %rcx
000000000103c9b8	movq	%rcx, 0x30(%rsp)
000000000103c9bd	testb	%al, (%rax)
000000000103c9bf	leaq	0xd0(%rcx), %rax
000000000103c9c6	testb	%al, (%rax)
000000000103c9c8	movq	0xd0(%rcx), %rax
000000000103c9cf	movq	%rax, 0x28(%rsp)
000000000103c9d4	movq	0x48(%rsp), %rdx
000000000103c9d9	movq	%rdx, 0xd0(%rcx)
000000000103c9e0	movb	$0x6, (%rsp)
000000000103c9e4	movq	$-0x1, 0x8(%rsp)
000000000103c9ed	movq	$0x0, 0x10(%rsp)
000000000103c9f6	xorps	%xmm0, %xmm0
000000000103c9f9	movups	%xmm0, 0x18(%rsp)
000000000103c9fe	callq	runtime.traceEvent
000000000103ca03	movq	0x28(%rsp), %rax
000000000103ca08	movq	0x30(%rsp), %rcx
000000000103ca0d	movq	%rax, 0xd0(%rcx)
000000000103ca14	movq	%gs:0x30, %rax
000000000103ca1d	movl	0x100(%rcx), %edx
000000000103ca23	leal	-0x1(%rdx), %ebx
000000000103ca26	movl	%ebx, 0x100(%rcx)
000000000103ca2c	cmpl	$0x1, %edx
000000000103ca2f	jne	0x103ca47
000000000103ca31	testb	%al, (%rax)
000000000103ca33	leaq	0xb1(%rax), %rcx
000000000103ca3a	cmpb	$0x0, (%rcx)
000000000103ca3d	je	0x103ca47
000000000103ca3f	movq	$-0x522, 0x10(%rax)
000000000103ca47	movq	0x38(%rsp), %rbp
000000000103ca4c	addq	$0x40, %rsp
000000000103ca50	retq
000000000103ca51	callq	runtime.morestack_noctxt
000000000103ca56	jmp	runtime.traceProcStop
000000000103ca5b	int3
000000000103ca5c	int3
000000000103ca5d	int3
000000000103ca5e	int3
000000000103ca5f	int3
runtime.traceGCStart:
000000000103ca60	movq	%gs:0x30, %rcx
000000000103ca69	cmpq	0x10(%rcx), %rsp
000000000103ca6d	jbe	0x103cad1
000000000103ca6f	subq	$0x38, %rsp
000000000103ca73	movq	%rbp, 0x30(%rsp)
000000000103ca78	leaq	0x30(%rsp), %rbp
000000000103ca7d	movq	$0x0, 0x28(%rsp)
000000000103ca86	movq	0x87f93(%rip), %rax
000000000103ca8d	movq	%rax, 0x28(%rsp)
000000000103ca92	movb	$0x7, (%rsp)
000000000103ca96	movq	$0x3, 0x8(%rsp)
000000000103ca9f	leaq	0x28(%rsp), %rax
000000000103caa4	movq	%rax, 0x10(%rsp)
000000000103caa9	movq	$0x1, 0x18(%rsp)
000000000103cab2	movq	$0x1, 0x20(%rsp)
000000000103cabb	callq	runtime.traceEvent
000000000103cac0	incq	0x87f59(%rip)
000000000103cac7	movq	0x30(%rsp), %rbp
000000000103cacc	addq	$0x38, %rsp
000000000103cad0	retq
000000000103cad1	callq	runtime.morestack_noctxt
000000000103cad6	jmp	runtime.traceGCStart
000000000103cad8	int3
000000000103cad9	int3
000000000103cada	int3
000000000103cadb	int3
000000000103cadc	int3
000000000103cadd	int3
000000000103cade	int3
000000000103cadf	int3
runtime.traceGCDone:
000000000103cae0	movq	%gs:0x30, %rcx
000000000103cae9	cmpq	0x10(%rcx), %rsp
000000000103caed	jbe	0x103cb2a
000000000103caef	subq	$0x30, %rsp
000000000103caf3	movq	%rbp, 0x28(%rsp)
000000000103caf8	leaq	0x28(%rsp), %rbp
000000000103cafd	movb	$0x8, (%rsp)
000000000103cb01	movq	$-0x1, 0x8(%rsp)
000000000103cb0a	movq	$0x0, 0x10(%rsp)
000000000103cb13	xorps	%xmm0, %xmm0
000000000103cb16	movups	%xmm0, 0x18(%rsp)
000000000103cb1b	callq	runtime.traceEvent
000000000103cb20	movq	0x28(%rsp), %rbp
000000000103cb25	addq	$0x30, %rsp
000000000103cb29	retq
000000000103cb2a	callq	runtime.morestack_noctxt
000000000103cb2f	jmp	runtime.traceGCDone
000000000103cb31	int3
000000000103cb32	int3
000000000103cb33	int3
000000000103cb34	int3
000000000103cb35	int3
000000000103cb36	int3
000000000103cb37	int3
000000000103cb38	int3
000000000103cb39	int3
000000000103cb3a	int3
000000000103cb3b	int3
000000000103cb3c	int3
000000000103cb3d	int3
000000000103cb3e	int3
000000000103cb3f	int3
runtime.traceGCSTWStart:
000000000103cb40	movq	%gs:0x30, %rcx
000000000103cb49	cmpq	0x10(%rcx), %rsp
000000000103cb4d	jbe	0x103cba8
000000000103cb4f	subq	$0x38, %rsp
000000000103cb53	movq	%rbp, 0x30(%rsp)
000000000103cb58	leaq	0x30(%rsp), %rbp
000000000103cb5d	movq	$0x0, 0x28(%rsp)
000000000103cb66	movq	0x40(%rsp), %rax
000000000103cb6b	movq	%rax, 0x28(%rsp)
000000000103cb70	movb	$0x9, (%rsp)
000000000103cb74	movq	$-0x1, 0x8(%rsp)
000000000103cb7d	leaq	0x28(%rsp), %rax
000000000103cb82	movq	%rax, 0x10(%rsp)
000000000103cb87	movq	$0x1, 0x18(%rsp)
000000000103cb90	movq	$0x1, 0x20(%rsp)
000000000103cb99	callq	runtime.traceEvent
000000000103cb9e	movq	0x30(%rsp), %rbp
000000000103cba3	addq	$0x38, %rsp
000000000103cba7	retq
000000000103cba8	callq	runtime.morestack_noctxt
000000000103cbad	jmp	runtime.traceGCSTWStart
000000000103cbaf	int3
runtime.traceGCSTWDone:
000000000103cbb0	movq	%gs:0x30, %rcx
000000000103cbb9	cmpq	0x10(%rcx), %rsp
000000000103cbbd	jbe	0x103cbfa
000000000103cbbf	subq	$0x30, %rsp
000000000103cbc3	movq	%rbp, 0x28(%rsp)
000000000103cbc8	leaq	0x28(%rsp), %rbp
000000000103cbcd	movb	$0xa, (%rsp)
000000000103cbd1	movq	$-0x1, 0x8(%rsp)
000000000103cbda	movq	$0x0, 0x10(%rsp)
000000000103cbe3	xorps	%xmm0, %xmm0
000000000103cbe6	movups	%xmm0, 0x18(%rsp)
000000000103cbeb	callq	runtime.traceEvent
000000000103cbf0	movq	0x28(%rsp), %rbp
000000000103cbf5	addq	$0x30, %rsp
000000000103cbf9	retq
000000000103cbfa	callq	runtime.morestack_noctxt
000000000103cbff	jmp	runtime.traceGCSTWDone
000000000103cc01	int3
000000000103cc02	int3
000000000103cc03	int3
000000000103cc04	int3
000000000103cc05	int3
000000000103cc06	int3
000000000103cc07	int3
000000000103cc08	int3
000000000103cc09	int3
000000000103cc0a	int3
000000000103cc0b	int3
000000000103cc0c	int3
000000000103cc0d	int3
000000000103cc0e	int3
000000000103cc0f	int3
runtime.traceGCSweepStart:
000000000103cc10	movq	%gs:0x30, %rcx
000000000103cc19	cmpq	0x10(%rcx), %rsp
000000000103cc1d	jbe	0x103cc85
000000000103cc1f	subq	$0x18, %rsp
000000000103cc23	movq	%rbp, 0x10(%rsp)
000000000103cc28	leaq	0x10(%rsp), %rbp
000000000103cc2d	movq	%gs:0x30, %rax
000000000103cc36	movq	0x30(%rax), %rax
000000000103cc3a	movq	0xd0(%rax), %rax
000000000103cc41	testb	%al, (%rax)
000000000103cc43	leaq	0x1220(%rax), %rcx
000000000103cc4a	cmpb	$0x0, (%rcx)
000000000103cc4d	jne	0x103cc6a
000000000103cc4f	movb	$0x1, 0x1220(%rax)
000000000103cc56	xorps	%xmm0, %xmm0
000000000103cc59	movups	%xmm0, 0x1228(%rax)
000000000103cc60	movq	0x10(%rsp), %rbp
000000000103cc65	addq	$0x18, %rsp
000000000103cc69	retq
000000000103cc6a	leaq	0x2f96a(%rip), %rax
000000000103cc71	movq	%rax, (%rsp)
000000000103cc75	movq	$0x18, 0x8(%rsp)
000000000103cc7e	callq	runtime.throw
000000000103cc83	ud2
000000000103cc85	callq	runtime.morestack_noctxt
000000000103cc8a	jmp	runtime.traceGCSweepStart
000000000103cc8c	int3
000000000103cc8d	int3
000000000103cc8e	int3
000000000103cc8f	int3
runtime.traceGCSweepSpan:
000000000103cc90	movq	%gs:0x30, %rcx
000000000103cc99	cmpq	0x10(%rcx), %rsp
000000000103cc9d	jbe	0x103cd29
000000000103cca3	subq	$0x38, %rsp
000000000103cca7	movq	%rbp, 0x30(%rsp)
000000000103ccac	leaq	0x30(%rsp), %rbp
000000000103ccb1	movq	%gs:0x30, %rax
000000000103ccba	movq	0x30(%rax), %rax
000000000103ccbe	movq	0xd0(%rax), %rax
000000000103ccc5	testb	%al, (%rax)
000000000103ccc7	leaq	0x1220(%rax), %rcx
000000000103ccce	cmpb	$0x0, (%rcx)
000000000103ccd1	je	0x103ccf0
000000000103ccd3	cmpq	$0x0, 0x1228(%rax)
000000000103ccdb	je	0x103ccfa
000000000103ccdd	movq	0x40(%rsp), %rcx
000000000103cce2	addq	0x1228(%rax), %rcx
000000000103cce9	movq	%rcx, 0x1228(%rax)
000000000103ccf0	movq	0x30(%rsp), %rbp
000000000103ccf5	addq	$0x38, %rsp
000000000103ccf9	retq
000000000103ccfa	movq	%rax, 0x28(%rsp)
000000000103ccff	movb	$0xb, (%rsp)
000000000103cd03	movq	$0x1, 0x8(%rsp)
000000000103cd0c	movq	$0x0, 0x10(%rsp)
000000000103cd15	xorps	%xmm0, %xmm0
000000000103cd18	movups	%xmm0, 0x18(%rsp)
000000000103cd1d	callq	runtime.traceEvent
000000000103cd22	movq	0x28(%rsp), %rax
000000000103cd27	jmp	0x103ccdd
000000000103cd29	callq	runtime.morestack_noctxt
000000000103cd2e	jmp	runtime.traceGCSweepSpan
000000000103cd33	int3
000000000103cd34	int3
000000000103cd35	int3
000000000103cd36	int3
000000000103cd37	int3
000000000103cd38	int3
000000000103cd39	int3
000000000103cd3a	int3
000000000103cd3b	int3
000000000103cd3c	int3
000000000103cd3d	int3
000000000103cd3e	int3
000000000103cd3f	int3
runtime.traceGCSweepDone:
000000000103cd40	movq	%gs:0x30, %rcx
000000000103cd49	cmpq	0x10(%rcx), %rsp
000000000103cd4d	jbe	0x103ce13
000000000103cd53	subq	$0x48, %rsp
000000000103cd57	movq	%rbp, 0x40(%rsp)
000000000103cd5c	leaq	0x40(%rsp), %rbp
000000000103cd61	movq	%gs:0x30, %rax
000000000103cd6a	movq	0x30(%rax), %rax
000000000103cd6e	movq	0xd0(%rax), %rax
000000000103cd75	testb	%al, (%rax)
000000000103cd77	leaq	0x1220(%rax), %rcx
000000000103cd7e	cmpb	$0x0, (%rcx)
000000000103cd81	je	0x103cdf8
000000000103cd83	cmpq	$0x0, 0x1228(%rax)
000000000103cd8b	jne	0x103cd9e
000000000103cd8d	movb	$0x0, 0x1220(%rax)
000000000103cd94	movq	0x40(%rsp), %rbp
000000000103cd99	addq	$0x48, %rsp
000000000103cd9d	retq
000000000103cd9e	movq	%rax, 0x38(%rsp)
000000000103cda3	xorps	%xmm0, %xmm0
000000000103cda6	movups	%xmm0, 0x28(%rsp)
000000000103cdab	movq	0x1228(%rax), %rcx
000000000103cdb2	movq	%rcx, 0x28(%rsp)
000000000103cdb7	movq	0x1230(%rax), %rcx
000000000103cdbe	movq	%rcx, 0x30(%rsp)
000000000103cdc3	movb	$0xc, (%rsp)
000000000103cdc7	movq	$-0x1, 0x8(%rsp)
000000000103cdd0	leaq	0x28(%rsp), %rcx
000000000103cdd5	movq	%rcx, 0x10(%rsp)
000000000103cdda	movq	$0x2, 0x18(%rsp)
000000000103cde3	movq	$0x2, 0x20(%rsp)
000000000103cdec	callq	runtime.traceEvent
000000000103cdf1	movq	0x38(%rsp), %rax
000000000103cdf6	jmp	0x103cd8d
000000000103cdf8	leaq	0x2f9c7(%rip), %rax
000000000103cdff	movq	%rax, (%rsp)
000000000103ce03	movq	$0x19, 0x8(%rsp)
000000000103ce0c	callq	runtime.throw
000000000103ce11	ud2
000000000103ce13	callq	runtime.morestack_noctxt
000000000103ce18	jmp	runtime.traceGCSweepDone
000000000103ce1d	int3
000000000103ce1e	int3
000000000103ce1f	int3
runtime.traceGCMarkAssistStart:
000000000103ce20	movq	%gs:0x30, %rcx
000000000103ce29	cmpq	0x10(%rcx), %rsp
000000000103ce2d	jbe	0x103ce6a
000000000103ce2f	subq	$0x30, %rsp
000000000103ce33	movq	%rbp, 0x28(%rsp)
000000000103ce38	leaq	0x28(%rsp), %rbp
000000000103ce3d	movb	$0x2b, (%rsp)
000000000103ce41	movq	$0x1, 0x8(%rsp)
000000000103ce4a	movq	$0x0, 0x10(%rsp)
000000000103ce53	xorps	%xmm0, %xmm0
000000000103ce56	movups	%xmm0, 0x18(%rsp)
000000000103ce5b	callq	runtime.traceEvent
000000000103ce60	movq	0x28(%rsp), %rbp
000000000103ce65	addq	$0x30, %rsp
000000000103ce69	retq
000000000103ce6a	callq	runtime.morestack_noctxt
000000000103ce6f	jmp	runtime.traceGCMarkAssistStart
000000000103ce71	int3
000000000103ce72	int3
000000000103ce73	int3
000000000103ce74	int3
000000000103ce75	int3
000000000103ce76	int3
000000000103ce77	int3
000000000103ce78	int3
000000000103ce79	int3
000000000103ce7a	int3
000000000103ce7b	int3
000000000103ce7c	int3
000000000103ce7d	int3
000000000103ce7e	int3
000000000103ce7f	int3
runtime.traceGCMarkAssistDone:
000000000103ce80	movq	%gs:0x30, %rcx
000000000103ce89	cmpq	0x10(%rcx), %rsp
000000000103ce8d	jbe	0x103ceca
000000000103ce8f	subq	$0x30, %rsp
000000000103ce93	movq	%rbp, 0x28(%rsp)
000000000103ce98	leaq	0x28(%rsp), %rbp
000000000103ce9d	movb	$0x2c, (%rsp)
000000000103cea1	movq	$-0x1, 0x8(%rsp)
000000000103ceaa	movq	$0x0, 0x10(%rsp)
000000000103ceb3	xorps	%xmm0, %xmm0
000000000103ceb6	movups	%xmm0, 0x18(%rsp)
000000000103cebb	callq	runtime.traceEvent
000000000103cec0	movq	0x28(%rsp), %rbp
000000000103cec5	addq	$0x30, %rsp
000000000103cec9	retq
000000000103ceca	callq	runtime.morestack_noctxt
000000000103cecf	jmp	runtime.traceGCMarkAssistDone
000000000103ced1	int3
000000000103ced2	int3
000000000103ced3	int3
000000000103ced4	int3
000000000103ced5	int3
000000000103ced6	int3
000000000103ced7	int3
000000000103ced8	int3
000000000103ced9	int3
000000000103ceda	int3
000000000103cedb	int3
000000000103cedc	int3
000000000103cedd	int3
000000000103cede	int3
000000000103cedf	int3
runtime.traceGoCreate:
000000000103cee0	movq	%gs:0x30, %rcx
000000000103cee9	cmpq	0x10(%rcx), %rsp
000000000103ceed	jbe	0x103cfcd
000000000103cef3	subq	$0x40, %rsp
000000000103cef7	movq	%rbp, 0x38(%rsp)
000000000103cefc	leaq	0x38(%rsp), %rbp
000000000103cf01	movq	0x48(%rsp), %rax
000000000103cf06	movq	$0x0, 0xc8(%rax)
000000000103cf11	movq	%gs:0x30, %rcx
000000000103cf1a	movq	0x30(%rcx), %rcx
000000000103cf1e	movq	0xd0(%rcx), %rcx
000000000103cf25	movq	%rcx, 0xd0(%rax)
000000000103cf2c	leaq	0x1c06d(%rip), %rcx
000000000103cf33	movq	%rcx, (%rsp)
000000000103cf37	callq	runtime.newobject
000000000103cf3c	movq	0x8(%rsp), %rax
000000000103cf41	movq	0x50(%rsp), %rcx
000000000103cf46	incq	%rcx
000000000103cf49	movq	%rcx, (%rax)
000000000103cf4c	leaq	0x87afd(%rip), %rcx
000000000103cf53	movq	%rcx, (%rsp)
000000000103cf57	movq	%rax, 0x8(%rsp)
000000000103cf5c	movq	$0x1, 0x10(%rsp)
000000000103cf65	movq	$0x1, 0x18(%rsp)
000000000103cf6e	callq	"runtime.(*traceStackTable).put"
000000000103cf73	movl	0x20(%rsp), %eax
000000000103cf77	xorps	%xmm0, %xmm0
000000000103cf7a	movups	%xmm0, 0x28(%rsp)
000000000103cf7f	movq	0x48(%rsp), %rcx
000000000103cf84	movq	0x98(%rcx), %rcx
000000000103cf8b	movq	%rcx, 0x28(%rsp)
000000000103cf90	movq	%rax, 0x30(%rsp)
000000000103cf95	movb	$0xd, (%rsp)
000000000103cf99	movq	$0x2, 0x8(%rsp)
000000000103cfa2	leaq	0x28(%rsp), %rax
000000000103cfa7	movq	%rax, 0x10(%rsp)
000000000103cfac	movq	$0x2, 0x18(%rsp)
000000000103cfb5	movq	$0x2, 0x20(%rsp)
000000000103cfbe	callq	runtime.traceEvent
000000000103cfc3	movq	0x38(%rsp), %rbp
000000000103cfc8	addq	$0x40, %rsp
000000000103cfcc	retq
000000000103cfcd	callq	runtime.morestack_noctxt
000000000103cfd2	jmp	runtime.traceGoCreate
000000000103cfd7	int3
000000000103cfd8	int3
000000000103cfd9	int3
000000000103cfda	int3
000000000103cfdb	int3
000000000103cfdc	int3
000000000103cfdd	int3
000000000103cfde	int3
000000000103cfdf	int3
runtime.traceGoStart:
000000000103cfe0	movq	%gs:0x30, %rcx
000000000103cfe9	cmpq	0x10(%rcx), %rsp
000000000103cfed	jbe	0x103d170
000000000103cff3	subq	$0x60, %rsp
000000000103cff7	movq	%rbp, 0x58(%rsp)
000000000103cffc	leaq	0x58(%rsp), %rbp
000000000103d001	movq	%gs:0x30, %rax
000000000103d00a	movq	0x30(%rax), %rax
000000000103d00e	movq	0xc0(%rax), %rax
000000000103d015	movq	0x30(%rax), %rcx
000000000103d019	movq	0xd0(%rcx), %rcx
000000000103d020	incq	0xc8(%rax)
000000000103d027	movq	%rcx, %rdx
000000000103d02a	testb	%al, (%rcx)
000000000103d02c	movq	0x1258(%rcx), %rbx
000000000103d033	cmpq	%rbx, %rax
000000000103d036	jne	0x103d0be
000000000103d03c	movq	$0x0, 0x40(%rsp)
000000000103d045	xorps	%xmm0, %xmm0
000000000103d048	movups	%xmm0, 0x48(%rsp)
000000000103d04d	movq	0x98(%rax), %rdx
000000000103d054	movq	%rdx, 0x40(%rsp)
000000000103d059	movq	0xc8(%rax), %rax
000000000103d060	movq	%rax, 0x48(%rsp)
000000000103d065	movq	0x1260(%rcx), %rax
000000000103d06c	cmpq	$0x3, %rax
000000000103d070	jae	0x103d169
000000000103d076	leaq	0x97a0b(%rip), %rcx
000000000103d07d	movq	(%rcx,%rax,8), %rax
000000000103d081	movq	%rax, 0x50(%rsp)
000000000103d086	movb	$0x29, (%rsp)
000000000103d08a	movq	$-0x1, 0x8(%rsp)
000000000103d093	leaq	0x40(%rsp), %rax
000000000103d098	movq	%rax, 0x10(%rsp)
000000000103d09d	movq	$0x3, 0x18(%rsp)
000000000103d0a6	movq	$0x3, 0x20(%rsp)
000000000103d0af	callq	runtime.traceEvent
000000000103d0b4	movq	0x58(%rsp), %rbp
000000000103d0b9	addq	$0x60, %rsp
000000000103d0bd	retq
000000000103d0be	movq	0xd0(%rax), %rcx
000000000103d0c5	cmpq	%rdx, %rcx
000000000103d0c8	jne	0x103d10f
000000000103d0ca	movq	$0x0, 0x28(%rsp)
000000000103d0d3	movq	0x98(%rax), %rax
000000000103d0da	movq	%rax, 0x28(%rsp)
000000000103d0df	movb	$0x26, (%rsp)
000000000103d0e3	movq	$-0x1, 0x8(%rsp)
000000000103d0ec	leaq	0x28(%rsp), %rax
000000000103d0f1	movq	%rax, 0x10(%rsp)
000000000103d0f6	movq	$0x1, 0x18(%rsp)
000000000103d0ff	movq	$0x1, 0x20(%rsp)
000000000103d108	callq	runtime.traceEvent
000000000103d10d	jmp	0x103d0b4
000000000103d10f	movq	%rdx, 0xd0(%rax)
000000000103d116	xorps	%xmm0, %xmm0
000000000103d119	movups	%xmm0, 0x30(%rsp)
000000000103d11e	movq	0x98(%rax), %rcx
000000000103d125	movq	%rcx, 0x30(%rsp)
000000000103d12a	movq	0xc8(%rax), %rax
000000000103d131	movq	%rax, 0x38(%rsp)
000000000103d136	movb	$0xe, (%rsp)
000000000103d13a	movq	$-0x1, 0x8(%rsp)
000000000103d143	leaq	0x30(%rsp), %rax
000000000103d148	movq	%rax, 0x10(%rsp)
000000000103d14d	movq	$0x2, 0x18(%rsp)
000000000103d156	movq	$0x2, 0x20(%rsp)
000000000103d15f	callq	runtime.traceEvent
000000000103d164	jmp	0x103d0b4
000000000103d169	callq	runtime.panicindex
000000000103d16e	ud2
000000000103d170	callq	runtime.morestack_noctxt
000000000103d175	jmp	runtime.traceGoStart
000000000103d17a	int3
000000000103d17b	int3
000000000103d17c	int3
000000000103d17d	int3
000000000103d17e	int3
000000000103d17f	int3
runtime.traceGoEnd:
000000000103d180	movq	%gs:0x30, %rcx
000000000103d189	cmpq	0x10(%rcx), %rsp
000000000103d18d	jbe	0x103d1ca
000000000103d18f	subq	$0x30, %rsp
000000000103d193	movq	%rbp, 0x28(%rsp)
000000000103d198	leaq	0x28(%rsp), %rbp
000000000103d19d	movb	$0xf, (%rsp)
000000000103d1a1	movq	$-0x1, 0x8(%rsp)
000000000103d1aa	movq	$0x0, 0x10(%rsp)
000000000103d1b3	xorps	%xmm0, %xmm0
000000000103d1b6	movups	%xmm0, 0x18(%rsp)
000000000103d1bb	callq	runtime.traceEvent
000000000103d1c0	movq	0x28(%rsp), %rbp
000000000103d1c5	addq	$0x30, %rsp
000000000103d1c9	retq
000000000103d1ca	callq	runtime.morestack_noctxt
000000000103d1cf	jmp	runtime.traceGoEnd
000000000103d1d1	int3
000000000103d1d2	int3
000000000103d1d3	int3
000000000103d1d4	int3
000000000103d1d5	int3
000000000103d1d6	int3
000000000103d1d7	int3
000000000103d1d8	int3
000000000103d1d9	int3
000000000103d1da	int3
000000000103d1db	int3
000000000103d1dc	int3
000000000103d1dd	int3
000000000103d1de	int3
000000000103d1df	int3
runtime.traceGoSched:
000000000103d1e0	movq	%gs:0x30, %rcx
000000000103d1e9	cmpq	0x10(%rcx), %rsp
000000000103d1ed	jbe	0x103d245
000000000103d1ef	subq	$0x30, %rsp
000000000103d1f3	movq	%rbp, 0x28(%rsp)
000000000103d1f8	leaq	0x28(%rsp), %rbp
000000000103d1fd	movq	%gs:0x30, %rax
000000000103d206	movq	0x30(%rax), %rcx
000000000103d20a	movq	0xd0(%rcx), %rcx
000000000103d211	movq	%rcx, 0xd0(%rax)
000000000103d218	movb	$0x11, (%rsp)
000000000103d21c	movq	$0x1, 0x8(%rsp)
000000000103d225	movq	$0x0, 0x10(%rsp)
000000000103d22e	xorps	%xmm0, %xmm0
000000000103d231	movups	%xmm0, 0x18(%rsp)
000000000103d236	callq	runtime.traceEvent
000000000103d23b	movq	0x28(%rsp), %rbp
000000000103d240	addq	$0x30, %rsp
000000000103d244	retq
000000000103d245	callq	runtime.morestack_noctxt
000000000103d24a	jmp	runtime.traceGoSched
000000000103d24c	int3
000000000103d24d	int3
000000000103d24e	int3
000000000103d24f	int3
runtime.traceGoPreempt:
000000000103d250	movq	%gs:0x30, %rcx
000000000103d259	cmpq	0x10(%rcx), %rsp
000000000103d25d	jbe	0x103d2b5
000000000103d25f	subq	$0x30, %rsp
000000000103d263	movq	%rbp, 0x28(%rsp)
000000000103d268	leaq	0x28(%rsp), %rbp
000000000103d26d	movq	%gs:0x30, %rax
000000000103d276	movq	0x30(%rax), %rcx
000000000103d27a	movq	0xd0(%rcx), %rcx
000000000103d281	movq	%rcx, 0xd0(%rax)
000000000103d288	movb	$0x12, (%rsp)
000000000103d28c	movq	$0x1, 0x8(%rsp)
000000000103d295	movq	$0x0, 0x10(%rsp)
000000000103d29e	xorps	%xmm0, %xmm0
000000000103d2a1	movups	%xmm0, 0x18(%rsp)
000000000103d2a6	callq	runtime.traceEvent
000000000103d2ab	movq	0x28(%rsp), %rbp
000000000103d2b0	addq	$0x30, %rsp
000000000103d2b4	retq
000000000103d2b5	callq	runtime.morestack_noctxt
000000000103d2ba	jmp	runtime.traceGoPreempt
000000000103d2bc	int3
000000000103d2bd	int3
000000000103d2be	int3
000000000103d2bf	int3
runtime.traceGoPark:
000000000103d2c0	movq	%gs:0x30, %rcx
000000000103d2c9	cmpq	0x10(%rcx), %rsp
000000000103d2cd	jbe	0x103d341
000000000103d2cf	subq	$0x30, %rsp
000000000103d2d3	movq	%rbp, 0x28(%rsp)
000000000103d2d8	leaq	0x28(%rsp), %rbp
000000000103d2dd	movzbl	0x38(%rsp), %eax
000000000103d2e2	testb	$-0x80, %al
000000000103d2e5	jne	0x103d317
000000000103d2e7	andl	$0x7f, %eax
000000000103d2ea	movb	%al, (%rsp)
000000000103d2ed	movq	0x40(%rsp), %rax
000000000103d2f2	movq	%rax, 0x8(%rsp)
000000000103d2f7	movq	$0x0, 0x10(%rsp)
000000000103d300	xorps	%xmm0, %xmm0
000000000103d303	movups	%xmm0, 0x18(%rsp)
000000000103d308	callq	runtime.traceEvent
000000000103d30d	movq	0x28(%rsp), %rbp
000000000103d312	addq	$0x30, %rsp
000000000103d316	retq
000000000103d317	movb	$0x24, (%rsp)
000000000103d31b	movq	$-0x1, 0x8(%rsp)
000000000103d324	movq	$0x0, 0x10(%rsp)
000000000103d32d	xorps	%xmm0, %xmm0
000000000103d330	movups	%xmm0, 0x18(%rsp)
000000000103d335	callq	runtime.traceEvent
000000000103d33a	movzbl	0x38(%rsp), %eax
000000000103d33f	jmp	0x103d2e7
000000000103d341	callq	runtime.morestack_noctxt
000000000103d346	jmp	runtime.traceGoPark
000000000103d34b	int3
000000000103d34c	int3
000000000103d34d	int3
000000000103d34e	int3
000000000103d34f	int3
runtime.traceGoUnpark:
000000000103d350	movq	%gs:0x30, %rcx
000000000103d359	cmpq	0x10(%rcx), %rsp
000000000103d35d	jbe	0x103d443
000000000103d363	subq	$0x48, %rsp
000000000103d367	movq	%rbp, 0x40(%rsp)
000000000103d36c	leaq	0x40(%rsp), %rbp
000000000103d371	movq	%gs:0x30, %rax
000000000103d37a	movq	0x30(%rax), %rax
000000000103d37e	movq	0xd0(%rax), %rax
000000000103d385	movq	0x50(%rsp), %rcx
000000000103d38a	incq	0xc8(%rcx)
000000000103d391	movq	0xd0(%rcx), %rdx
000000000103d398	cmpq	%rax, %rdx
000000000103d39b	jne	0x103d3eb
000000000103d39d	movq	$0x0, 0x28(%rsp)
000000000103d3a6	movq	0x98(%rcx), %rax
000000000103d3ad	movq	%rax, 0x28(%rsp)
000000000103d3b2	movb	$0x27, (%rsp)
000000000103d3b6	movq	0x58(%rsp), %rax
000000000103d3bb	movq	%rax, 0x8(%rsp)
000000000103d3c0	leaq	0x28(%rsp), %rax
000000000103d3c5	movq	%rax, 0x10(%rsp)
000000000103d3ca	movq	$0x1, 0x18(%rsp)
000000000103d3d3	movq	$0x1, 0x20(%rsp)
000000000103d3dc	callq	runtime.traceEvent
000000000103d3e1	movq	0x40(%rsp), %rbp
000000000103d3e6	addq	$0x48, %rsp
000000000103d3ea	retq
000000000103d3eb	movq	%rax, 0xd0(%rcx)
000000000103d3f2	xorps	%xmm0, %xmm0
000000000103d3f5	movups	%xmm0, 0x30(%rsp)
000000000103d3fa	movq	0x98(%rcx), %rax
000000000103d401	movq	%rax, 0x30(%rsp)
000000000103d406	movq	0xc8(%rcx), %rax
000000000103d40d	movq	%rax, 0x38(%rsp)
000000000103d412	movb	$0x15, (%rsp)
000000000103d416	movq	0x58(%rsp), %rax
000000000103d41b	movq	%rax, 0x8(%rsp)
000000000103d420	leaq	0x30(%rsp), %rax
000000000103d425	movq	%rax, 0x10(%rsp)
000000000103d42a	movq	$0x2, 0x18(%rsp)
000000000103d433	movq	$0x2, 0x20(%rsp)
000000000103d43c	callq	runtime.traceEvent
000000000103d441	jmp	0x103d3e1
000000000103d443	callq	runtime.morestack_noctxt
000000000103d448	jmp	runtime.traceGoUnpark
000000000103d44d	int3
000000000103d44e	int3
000000000103d44f	int3
runtime.traceGoSysCall:
000000000103d450	movq	%gs:0x30, %rcx
000000000103d459	cmpq	0x10(%rcx), %rsp
000000000103d45d	jbe	0x103d49a
000000000103d45f	subq	$0x30, %rsp
000000000103d463	movq	%rbp, 0x28(%rsp)
000000000103d468	leaq	0x28(%rsp), %rbp
000000000103d46d	movb	$0x1c, (%rsp)
000000000103d471	movq	$0x1, 0x8(%rsp)
000000000103d47a	movq	$0x0, 0x10(%rsp)
000000000103d483	xorps	%xmm0, %xmm0
000000000103d486	movups	%xmm0, 0x18(%rsp)
000000000103d48b	callq	runtime.traceEvent
000000000103d490	movq	0x28(%rsp), %rbp
000000000103d495	addq	$0x30, %rsp
000000000103d499	retq
000000000103d49a	callq	runtime.morestack_noctxt
000000000103d49f	jmp	runtime.traceGoSysCall
000000000103d4a1	int3
000000000103d4a2	int3
000000000103d4a3	int3
000000000103d4a4	int3
000000000103d4a5	int3
000000000103d4a6	int3
000000000103d4a7	int3
000000000103d4a8	int3
000000000103d4a9	int3
000000000103d4aa	int3
000000000103d4ab	int3
000000000103d4ac	int3
000000000103d4ad	int3
000000000103d4ae	int3
000000000103d4af	int3
runtime.traceGoSysExit:
000000000103d4b0	movq	%gs:0x30, %rcx
000000000103d4b9	cmpq	0x10(%rcx), %rsp
000000000103d4bd	jbe	0x103d580
000000000103d4c3	subq	$0x48, %rsp
000000000103d4c7	movq	%rbp, 0x40(%rsp)
000000000103d4cc	leaq	0x40(%rsp), %rbp
000000000103d4d1	movq	0x50(%rsp), %rax
000000000103d4d6	testq	%rax, %rax
000000000103d4d9	je	0x103d4e9
000000000103d4db	movq	0x8751e(%rip), %rcx
000000000103d4e2	cmpq	%rcx, %rax
000000000103d4e5	jge	0x103d4e9
000000000103d4e7	xorl	%eax, %eax
000000000103d4e9	movq	%gs:0x30, %rcx
000000000103d4f2	movq	0x30(%rcx), %rcx
000000000103d4f6	movq	0xc0(%rcx), %rcx
000000000103d4fd	incq	0xc8(%rcx)
000000000103d504	movq	0x30(%rcx), %rdx
000000000103d508	movq	0xd0(%rdx), %rdx
000000000103d50f	movq	%rdx, 0xd0(%rcx)
000000000103d516	movq	$0x0, 0x28(%rsp)
000000000103d51f	xorps	%xmm0, %xmm0
000000000103d522	movups	%xmm0, 0x30(%rsp)
000000000103d527	movq	0x98(%rcx), %rdx
000000000103d52e	movq	%rdx, 0x28(%rsp)
000000000103d533	movq	0xc8(%rcx), %rcx
000000000103d53a	movq	%rcx, 0x30(%rsp)
000000000103d53f	shrq	$0x6, %rax
000000000103d543	movq	%rax, 0x38(%rsp)
000000000103d548	movb	$0x1d, (%rsp)
000000000103d54c	movq	$-0x1, 0x8(%rsp)
000000000103d555	leaq	0x28(%rsp), %rax
000000000103d55a	movq	%rax, 0x10(%rsp)
000000000103d55f	movq	$0x3, 0x18(%rsp)
000000000103d568	movq	$0x3, 0x20(%rsp)
000000000103d571	callq	runtime.traceEvent
000000000103d576	movq	0x40(%rsp), %rbp
000000000103d57b	addq	$0x48, %rsp
000000000103d57f	retq
000000000103d580	callq	runtime.morestack_noctxt
000000000103d585	jmp	runtime.traceGoSysExit
000000000103d58a	int3
000000000103d58b	int3
000000000103d58c	int3
000000000103d58d	int3
000000000103d58e	int3
000000000103d58f	int3
runtime.traceGoSysBlock:
000000000103d590	movq	%gs:0x30, %rcx
000000000103d599	cmpq	0x10(%rcx), %rsp
000000000103d59d	jbe	0x103d661
000000000103d5a3	subq	$0x40, %rsp
000000000103d5a7	movq	%rbp, 0x38(%rsp)
000000000103d5ac	leaq	0x38(%rsp), %rbp
000000000103d5b1	movq	%gs:0x30, %rax
000000000103d5ba	movq	0x30(%rax), %rcx
000000000103d5be	incl	0x100(%rcx)
000000000103d5c4	movq	0x30(%rax), %rcx
000000000103d5c8	movq	%rcx, 0x30(%rsp)
000000000103d5cd	testb	%al, (%rax)
000000000103d5cf	leaq	0xd0(%rcx), %rax
000000000103d5d6	testb	%al, (%rax)
000000000103d5d8	movq	0xd0(%rcx), %rax
000000000103d5df	movq	%rax, 0x28(%rsp)
000000000103d5e4	movq	0x48(%rsp), %rdx
000000000103d5e9	movq	%rdx, 0xd0(%rcx)
000000000103d5f0	movb	$0x1e, (%rsp)
000000000103d5f4	movq	$-0x1, 0x8(%rsp)
000000000103d5fd	movq	$0x0, 0x10(%rsp)
000000000103d606	xorps	%xmm0, %xmm0
000000000103d609	movups	%xmm0, 0x18(%rsp)
000000000103d60e	callq	runtime.traceEvent
000000000103d613	movq	0x28(%rsp), %rax
000000000103d618	movq	0x30(%rsp), %rcx
000000000103d61d	movq	%rax, 0xd0(%rcx)
000000000103d624	movq	%gs:0x30, %rax
000000000103d62d	movl	0x100(%rcx), %edx
000000000103d633	leal	-0x1(%rdx), %ebx
000000000103d636	movl	%ebx, 0x100(%rcx)
000000000103d63c	cmpl	$0x1, %edx
000000000103d63f	jne	0x103d657
000000000103d641	testb	%al, (%rax)
000000000103d643	leaq	0xb1(%rax), %rcx
000000000103d64a	cmpb	$0x0, (%rcx)
000000000103d64d	je	0x103d657
000000000103d64f	movq	$-0x522, 0x10(%rax)
000000000103d657	movq	0x38(%rsp), %rbp
000000000103d65c	addq	$0x40, %rsp
000000000103d660	retq
000000000103d661	callq	runtime.morestack_noctxt
000000000103d666	jmp	runtime.traceGoSysBlock
000000000103d66b	int3
000000000103d66c	int3
000000000103d66d	int3
000000000103d66e	int3
000000000103d66f	int3
runtime.traceHeapAlloc:
000000000103d670	movq	%gs:0x30, %rcx
000000000103d679	cmpq	0x10(%rcx), %rsp
000000000103d67d	jbe	0x103d6da
000000000103d67f	subq	$0x38, %rsp
000000000103d683	movq	%rbp, 0x30(%rsp)
000000000103d688	leaq	0x30(%rsp), %rbp
000000000103d68d	movq	$0x0, 0x28(%rsp)
000000000103d696	movq	0x99923(%rip), %rax
000000000103d69d	movq	%rax, 0x28(%rsp)
000000000103d6a2	movb	$0x21, (%rsp)
000000000103d6a6	movq	$-0x1, 0x8(%rsp)
000000000103d6af	leaq	0x28(%rsp), %rax
000000000103d6b4	movq	%rax, 0x10(%rsp)
000000000103d6b9	movq	$0x1, 0x18(%rsp)
000000000103d6c2	movq	$0x1, 0x20(%rsp)
000000000103d6cb	callq	runtime.traceEvent
000000000103d6d0	movq	0x30(%rsp), %rbp
000000000103d6d5	addq	$0x38, %rsp
000000000103d6d9	retq
000000000103d6da	callq	runtime.morestack_noctxt
000000000103d6df	jmp	runtime.traceHeapAlloc
000000000103d6e1	int3
000000000103d6e2	int3
000000000103d6e3	int3
000000000103d6e4	int3
000000000103d6e5	int3
000000000103d6e6	int3
000000000103d6e7	int3
000000000103d6e8	int3
000000000103d6e9	int3
000000000103d6ea	int3
000000000103d6eb	int3
000000000103d6ec	int3
000000000103d6ed	int3
000000000103d6ee	int3
000000000103d6ef	int3
runtime.traceNextGC:
000000000103d6f0	movq	%gs:0x30, %rcx
000000000103d6f9	cmpq	0x10(%rcx), %rsp
000000000103d6fd	jbe	0x103d7a4
000000000103d703	subq	$0x40, %rsp
000000000103d707	movq	%rbp, 0x38(%rsp)
000000000103d70c	leaq	0x38(%rsp), %rbp
000000000103d711	cmpq	$-0x1, 0x9820f(%rip)
000000000103d719	jne	0x103d75f
000000000103d71b	movq	runtime.statictmp_48(%rip), %rax
000000000103d722	movq	%rax, 0x30(%rsp)
000000000103d727	movb	$0x22, (%rsp)
000000000103d72b	movq	$-0x1, 0x8(%rsp)
000000000103d734	leaq	0x30(%rsp), %rax
000000000103d739	movq	%rax, 0x10(%rsp)
000000000103d73e	movq	$0x1, 0x18(%rsp)
000000000103d747	movq	$0x1, 0x20(%rsp)
000000000103d750	callq	runtime.traceEvent
000000000103d755	movq	0x38(%rsp), %rbp
000000000103d75a	addq	$0x40, %rsp
000000000103d75e	retq
000000000103d75f	movq	$0x0, 0x28(%rsp)
000000000103d768	movq	0x981b9(%rip), %rax
000000000103d76f	movq	%rax, 0x28(%rsp)
000000000103d774	movb	$0x22, (%rsp)
000000000103d778	movq	$-0x1, 0x8(%rsp)
000000000103d781	leaq	0x28(%rsp), %rax
000000000103d786	movq	%rax, 0x10(%rsp)
000000000103d78b	movq	$0x1, 0x18(%rsp)
000000000103d794	movq	$0x1, 0x20(%rsp)
000000000103d79d	callq	runtime.traceEvent
000000000103d7a2	jmp	0x103d755
000000000103d7a4	callq	runtime.morestack_noctxt
000000000103d7a9	jmp	runtime.traceNextGC
000000000103d7ae	int3
000000000103d7af	int3
runtime.tracebackdefers:
000000000103d7b0	movq	%gs:0x30, %rcx
000000000103d7b9	leaq	-0x30(%rsp), %rax
000000000103d7be	cmpq	0x10(%rcx), %rax
000000000103d7c2	jbe	0x103d9cd
000000000103d7c8	subq	$0xb0, %rsp
000000000103d7cf	movq	%rbp, 0xa8(%rsp)
000000000103d7d7	leaq	0xa8(%rsp), %rbp
000000000103d7df	movq	$0x0, 0x50(%rsp)
000000000103d7e8	leaq	0x58(%rsp), %rdi
000000000103d7ed	xorps	%xmm0, %xmm0
000000000103d7f0	leaq	-0x30(%rdi), %rdi
000000000103d7f4	movq	%rbp, -0x10(%rsp)
000000000103d7f9	leaq	-0x10(%rsp), %rbp
000000000103d7fe	callq	0x1049225
000000000103d803	movq	(%rbp), %rbp
000000000103d807	movq	0xb8(%rsp), %rax
000000000103d80f	movq	0x28(%rax), %rax
000000000103d813	jmp	0x103d824
000000000103d815	movq	0x48(%rsp), %rcx
000000000103d81a	movq	0x28(%rcx), %rcx
000000000103d81e	xorps	%xmm0, %xmm0
000000000103d821	movq	%rcx, %rax
000000000103d824	testq	%rax, %rax
000000000103d827	je	0x103d962
000000000103d82d	movq	%rax, 0x48(%rsp)
000000000103d832	movq	0x18(%rax), %rcx
000000000103d836	testq	%rcx, %rcx
000000000103d839	jne	0x103d8a4
000000000103d83b	movq	$0x0, 0x60(%rsp)
000000000103d844	movups	%xmm0, 0x50(%rsp)
000000000103d849	movups	%xmm0, 0x90(%rsp)
000000000103d851	movq	$0x0, 0xa0(%rsp)
000000000103d85d	movq	0x60(%rsp), %rax
000000000103d862	movq	%rax, 0x68(%rsp)
000000000103d867	leaq	0x50(%rsp), %rax
000000000103d86c	movq	%rax, (%rsp)
000000000103d870	movq	0xc8(%rsp), %rcx
000000000103d878	movq	%rcx, 0x8(%rsp)
000000000103d87d	movq	0xc0(%rsp), %rdx
000000000103d885	movq	(%rdx), %rbx
000000000103d888	callq	*%rbx
000000000103d88a	leaq	0x10(%rsp), %rax
000000000103d88f	cmpb	$0x0, (%rax)
000000000103d892	jne	0x103d815
000000000103d894	movq	0xa8(%rsp), %rbp
000000000103d89c	addq	$0xb0, %rsp
000000000103d8a3	retq
000000000103d8a4	movq	%rcx, 0x40(%rsp)
000000000103d8a9	movq	(%rcx), %rax
000000000103d8ac	movq	%rax, 0x60(%rsp)
000000000103d8b1	movq	%rax, (%rsp)
000000000103d8b5	callq	runtime.findfunc
000000000103d8ba	movq	0x10(%rsp), %rax
000000000103d8bf	movq	0x8(%rsp), %rcx
000000000103d8c4	testq	%rcx, %rcx
000000000103d8c7	je	0x103d972
000000000103d8cd	movq	%rcx, 0x50(%rsp)
000000000103d8d2	movq	%rax, 0x58(%rsp)
000000000103d8d7	movq	0x48(%rsp), %rbx
000000000103d8dc	cmpl	$0x0, (%rbx)
000000000103d8df	jne	0x103d95c
000000000103d8e1	xorl	%edx, %edx
000000000103d8e3	movq	%rdx, 0x90(%rsp)
000000000103d8eb	movl	0xc(%rcx), %esi
000000000103d8ee	movslq	%esi, %rdi
000000000103d8f1	movq	%rdi, 0x98(%rsp)
000000000103d8f9	movq	$0x0, 0xa0(%rsp)
000000000103d905	cmpl	$0x80000000, %esi
000000000103d90b	jne	0x103d85d
000000000103d911	leaq	0x50(%rsp), %rdx
000000000103d916	movq	%rdx, (%rsp)
000000000103d91a	movq	%rcx, 0x8(%rsp)
000000000103d91f	movq	%rax, 0x10(%rsp)
000000000103d924	movb	$0x1, 0x18(%rsp)
000000000103d929	movq	0x40(%rsp), %rax
000000000103d92e	movq	%rax, 0x20(%rsp)
000000000103d933	callq	runtime.getArgInfo
000000000103d938	movq	0x28(%rsp), %rax
000000000103d93d	movq	0x30(%rsp), %rcx
000000000103d942	movq	%rax, 0x98(%rsp)
000000000103d94a	movq	%rcx, 0xa0(%rsp)
000000000103d952	movq	0x48(%rsp), %rbx
000000000103d957	jmp	0x103d85d
000000000103d95c	leaq	0x30(%rbx), %rdx
000000000103d960	jmp	0x103d8e3
000000000103d962	movq	0xa8(%rsp), %rbp
000000000103d96a	addq	$0xb0, %rsp
000000000103d971	retq
000000000103d972	movq	0x60(%rsp), %rax
000000000103d977	movq	%rax, 0x38(%rsp)
000000000103d97c	callq	runtime.printlock
000000000103d981	leaq	0x2f748(%rip), %rax
000000000103d988	movq	%rax, (%rsp)
000000000103d98c	movq	$0x1d, 0x8(%rsp)
000000000103d995	callq	runtime.printstring
000000000103d99a	movq	0x38(%rsp), %rax
000000000103d99f	movq	%rax, (%rsp)
000000000103d9a3	callq	runtime.printhex
000000000103d9a8	callq	runtime.printnl
000000000103d9ad	callq	runtime.printunlock
000000000103d9b2	leaq	0x2d6f3(%rip), %rax
000000000103d9b9	movq	%rax, (%rsp)
000000000103d9bd	movq	$0xa, 0x8(%rsp)
000000000103d9c6	callq	runtime.throw
000000000103d9cb	ud2
000000000103d9cd	callq	runtime.morestack_noctxt
000000000103d9d2	jmp	runtime.tracebackdefers
000000000103d9d7	int3
000000000103d9d8	int3
000000000103d9d9	int3
000000000103d9da	int3
000000000103d9db	int3
000000000103d9dc	int3
000000000103d9dd	int3
000000000103d9de	int3
000000000103d9df	int3
runtime.gentraceback:
000000000103d9e0	movq	%gs:0x30, %rcx
000000000103d9e9	leaq	-0x280(%rsp), %rax
000000000103d9f1	cmpq	0x10(%rcx), %rax
000000000103d9f5	jbe	0x103f667
000000000103d9fb	subq	$0x300, %rsp
000000000103da02	movq	%rbp, 0x2f8(%rsp)
000000000103da0a	leaq	0x2f8(%rsp), %rbp
000000000103da12	movq	0x328(%rsp), %rax
000000000103da1a	testq	%rax, %rax
000000000103da1d	jle	0x103f40b
000000000103da23	movq	0x340(%rsp), %rcx
000000000103da2b	testq	%rcx, %rcx
000000000103da2e	jne	0x103f64c
000000000103da34	movq	%gs:0x30, %rdx
000000000103da3d	movq	0x320(%rsp), %rbx
000000000103da45	cmpq	%rdx, %rbx
000000000103da48	jne	0x103da5e
000000000103da4a	movq	0x30(%rdx), %rsi
000000000103da4e	movq	0xc0(%rsi), %rsi
000000000103da55	cmpq	%rdx, %rsi
000000000103da58	je	0x103f631
000000000103da5e	movl	runtime.traceback_cache(%rip), %esi
000000000103da64	movq	0x30(%rdx), %r8
000000000103da68	movzbl	0x125(%r8), %r8d
000000000103da70	movzbl	%r8b, %r9d
000000000103da74	shrl	$0x2, %esi
000000000103da77	testb	%r8b, %r8b
000000000103da7a	cmovnel	%r9d, %esi
000000000103da7e	movq	0x308(%rsp), %r8
000000000103da86	cmpq	$-0x1, %r8
000000000103da8a	jne	0x103f3fb
000000000103da90	movq	0x310(%rsp), %r9
000000000103da98	cmpq	$-0x1, %r9
000000000103da9c	jne	0x103f3eb
000000000103daa2	movq	0x70(%rbx), %r8
000000000103daa6	testq	%r8, %r8
000000000103daa9	je	0x103f3de
000000000103daaf	movq	0x78(%rbx), %r9
000000000103dab3	movq	$0x0, 0x2a0(%rsp)
000000000103dabf	leaq	0x2a8(%rsp), %rdi
000000000103dac7	xorps	%xmm0, %xmm0
000000000103daca	leaq	-0x30(%rdi), %rdi
000000000103dace	movq	%rbp, -0x10(%rsp)
000000000103dad3	leaq	-0x10(%rsp), %rbp
000000000103dad8	callq	0x1049225
000000000103dadd	movq	(%rbp), %rbp
000000000103dae1	movq	%r9, 0x2b0(%rsp)
000000000103dae9	movq	%r8, 0x2c8(%rsp)
000000000103daf1	movq	0x148(%rbx), %r10
000000000103daf8	movq	0x140(%rbx), %r11
000000000103daff	movq	0x330(%rsp), %r12
000000000103db07	testq	%r12, %r12
000000000103db0a	je	0x103f3d2
000000000103db10	xorl	%edi, %edi
000000000103db12	movq	0x28(%rbx), %r13
000000000103db16	jmp	0x103db1c
000000000103db18	movq	0x28(%r13), %r13
000000000103db1c	testq	%r13, %r13
000000000103db1f	je	0x103db28
000000000103db21	cmpq	$-0x1, 0x8(%r13)
000000000103db26	je	0x103db18
000000000103db28	movq	%rdx, 0x228(%rsp)
000000000103db30	movb	%dil, 0x41(%rsp)
000000000103db35	movq	%r13, 0x260(%rsp)
000000000103db3d	movq	%r10, 0xa8(%rsp)
000000000103db45	movq	%r11, 0x258(%rsp)
000000000103db4d	movl	%esi, 0x48(%rsp)
000000000103db51	testq	%r9, %r9
000000000103db54	jne	0x103db70
000000000103db56	movq	%r8, %r9
000000000103db59	movq	(%r8), %r8
000000000103db5c	movq	%r8, 0x2b0(%rsp)
000000000103db64	leaq	0x8(%r9), %r8
000000000103db68	movq	%r8, 0x2c8(%rsp)
000000000103db70	movq	0x2b0(%rsp), %rax
000000000103db78	movq	%rax, (%rsp)
000000000103db7c	callq	runtime.findfunc
000000000103db81	movq	0x10(%rsp), %rax
000000000103db86	movq	0x8(%rsp), %rcx
000000000103db8b	testq	%rcx, %rcx
000000000103db8e	je	0x103f306
000000000103db94	movq	%rcx, 0x2a0(%rsp)
000000000103db9c	movq	%rax, 0x2a8(%rsp)
000000000103dba4	leaq	0x110(%rsp), %rdi
000000000103dbac	xorps	%xmm0, %xmm0
000000000103dbaf	movq	%rbp, -0x10(%rsp)
000000000103dbb4	leaq	-0x10(%rsp), %rbp
000000000103dbb9	callq	0x10491f4
000000000103dbbe	movq	(%rbp), %rbp
000000000103dbc2	movq	0x320(%rsp), %rax
000000000103dbca	movq	0x338(%rsp), %rcx
000000000103dbd2	movq	0x260(%rsp), %rbx
000000000103dbda	movq	0x328(%rsp), %rsi
000000000103dbe2	movq	0x258(%rsp), %r8
000000000103dbea	movq	0xa8(%rsp), %r9
000000000103dbf2	xorl	%edx, %edx
000000000103dbf4	xorl	%edi, %edi
000000000103dbf6	xorl	%r10d, %r10d
000000000103dbf9	xorl	%r11d, %r11d
000000000103dbfc	jmp	0x103dd3e
000000000103dc01	movq	0x28(%rbx), %rbx
000000000103dc05	movzbl	0x3f(%rsp), %edi
000000000103dc0a	testq	%rbx, %rbx
000000000103dc0d	je	0x103ed93
000000000103dc13	movq	0x8(%rbx), %rcx
000000000103dc17	movq	0x2c8(%rsp), %r14
000000000103dc1f	cmpq	%r14, %rcx
000000000103dc22	jne	0x103dc31
000000000103dc24	movq	0x2d0(%rsp), %rdi
000000000103dc2c	cmpq	%r14, %rdi
000000000103dc2f	jne	0x103dc01
000000000103dc31	cmpq	$-0x1, %rcx
000000000103dc35	je	0x103dc01
000000000103dc37	testq	%rax, %rax
000000000103dc3a	movq	%rbx, 0x260(%rsp)
000000000103dc42	jne	0x103ece5
000000000103dc48	movq	0x330(%rsp), %rcx
000000000103dc50	testq	%rcx, %rcx
000000000103dc53	je	0x103dc77
000000000103dc55	testq	%rsi, %rsi
000000000103dc58	jne	0x103ea75
000000000103dc5e	movq	0x2b0(%rsp), %rdi
000000000103dc66	cmpq	$0x100000, %rdx
000000000103dc6d	jae	0x103f5f4
000000000103dc73	movq	%rdi, (%rcx,%rdx,8)
000000000103dc77	movzbl	0x41(%rsp), %edi
000000000103dc7c	testb	%dil, %dil
000000000103dc7f	jne	0x103e1ab
000000000103dc85	leaq	0x1(%rdx), %r13
000000000103dc89	cmpl	$0xe, 0x10(%r12)
000000000103dc8f	jne	0x103dcac
000000000103dc91	testq	%r9, %r9
000000000103dc94	jle	0x103dcac
000000000103dc96	movq	-0x8(%r8,%r9,8), %r14
000000000103dc9b	testq	%rsi, %rsi
000000000103dc9e	jne	0x103dca9
000000000103dca0	testq	%rax, %rax
000000000103dca3	je	0x103e114
000000000103dca9	decq	%r9
000000000103dcac	movl	0x10(%r12), %r12d
000000000103dcb1	cmpl	$0x9, %r12d
000000000103dcb5	testq	%r15, %r15
000000000103dcb8	je	0x103df01
000000000103dcbe	movq	%r15, 0x2a0(%rsp)
000000000103dcc6	movq	0x248(%rsp), %r14
000000000103dcce	movq	%r14, 0x2a8(%rsp)
000000000103dcd6	movq	0x2c0(%rsp), %r14
000000000103dcde	movq	%r14, 0x2b0(%rsp)
000000000103dce6	movq	$0x0, 0x2c0(%rsp)
000000000103dcf2	movq	0x2d0(%rsp), %r14
000000000103dcfa	movq	%r14, 0x2c8(%rsp)
000000000103dd02	movq	$0x0, 0x2d0(%rsp)
000000000103dd0e	movq	$0x0, 0x2f0(%rsp)
000000000103dd1a	cmpl	$0x9, %r12d
000000000103dd1e	sete	%r12b
000000000103dd22	movq	0x320(%rsp), %r14
000000000103dd2a	movq	0x338(%rsp), %r15
000000000103dd32	movq	%r14, %rax
000000000103dd35	movq	%r15, %rcx
000000000103dd38	movq	%r13, %rdx
000000000103dd3b	movl	%r12d, %edi
000000000103dd3e	cmpq	%rcx, %rdx
000000000103dd41	jge	0x103f2f1
000000000103dd47	movq	0x2a0(%rsp), %r12
000000000103dd4f	movq	0x2a8(%rsp), %r13
000000000103dd57	cmpl	$0x0, 0x14(%r12)
000000000103dd5d	je	0x103f2dc
000000000103dd63	movq	%rdx, 0x88(%rsp)
000000000103dd6b	movq	%r12, 0x298(%rsp)
000000000103dd73	movq	%rbx, 0x290(%rsp)
000000000103dd7b	movq	%r11, 0x68(%rsp)
000000000103dd80	movq	%rsi, 0x328(%rsp)
000000000103dd88	movb	%r10b, 0x40(%rsp)
000000000103dd8d	movq	%r13, 0x288(%rsp)
000000000103dd95	movb	%dil, 0x3f(%rsp)
000000000103dd9a	cmpq	$0x0, 0x2d0(%rsp)
000000000103dda3	je	0x103f153
000000000103dda9	movq	0x30(%rax), %r14
000000000103ddad	testq	%r14, %r14
000000000103ddb0	je	0x103f14b
000000000103ddb6	movq	(%r14), %r14
000000000103ddb9	cmpq	%rax, %r14
000000000103ddbc	sete	%r14b
000000000103ddc0	movl	0x10(%r12), %r15d
000000000103ddc5	cmpl	$0x2, %r15d
000000000103ddc9	jne	0x103f0dc
000000000103ddcf	movl	$0x1, %r14d
000000000103ddd5	movq	%r9, 0xa8(%rsp)
000000000103dddd	movq	%r8, 0x280(%rsp)
000000000103dde5	testb	%r14b, %r14b
000000000103dde8	je	0x103ee6e
000000000103ddee	movq	$0x0, 0x2c0(%rsp)
000000000103ddfa	xorl	%r14d, %r14d
000000000103ddfd	xorl	%r15d, %r15d
000000000103de00	movq	%r14, 0x248(%rsp)
000000000103de08	movq	0x2d0(%rsp), %rax
000000000103de10	movq	%rax, 0x2d8(%rsp)
000000000103de18	leaq	-0x8(%rax), %rcx
000000000103de1c	movq	%rcx, 0x2d8(%rsp)
000000000103de24	leaq	runtime.framepointer_enabled(%rip), %r14
000000000103de2b	cmpb	$0x0, (%r14)
000000000103de2f	je	0x103de4a
000000000103de31	movq	0x2c8(%rsp), %r14
000000000103de39	cmpq	%r14, %rcx
000000000103de3c	jbe	0x103de4a
000000000103de3e	addq	$-0x10, %rax
000000000103de42	movq	%rax, 0x2d8(%rsp)
000000000103de4a	movq	%r15, 0x250(%rsp)
000000000103de52	movq	0x340(%rsp), %rax
000000000103de5a	testq	%rax, %rax
000000000103de5d	je	0x103ee59
000000000103de63	movq	0x2d0(%rsp), %rcx
000000000103de6b	movq	%rcx, 0x2e0(%rsp)
000000000103de73	movl	0xc(%r12), %ecx
000000000103de78	je	0x103ee51
000000000103de7e	cmpl	$0x80000000, %ecx
000000000103de84	sete	%r14b
000000000103de88	movslq	%ecx, %rcx
000000000103de8b	movq	%rcx, 0x2e8(%rsp)
000000000103de93	movq	$0x0, 0x2f0(%rsp)
000000000103de9f	testb	%r14b, %r14b
000000000103dea2	jne	0x103edac
000000000103dea8	movq	0x2b0(%rsp), %rcx
000000000103deb0	movq	%rcx, 0x2b8(%rsp)
000000000103deb8	testb	%dil, %dil
000000000103debb	je	0x103dc0a
000000000103dec1	testq	%rbx, %rbx
000000000103dec4	je	0x103ed9b
000000000103deca	movq	0x8(%rbx), %rcx
000000000103dece	movq	0x2c8(%rsp), %r14
000000000103ded6	cmpq	%r14, %rcx
000000000103ded9	jne	0x103ed9b
000000000103dedf	movq	0x2d0(%rsp), %rcx
000000000103dee7	cmpq	%r14, %rcx
000000000103deea	je	0x103ed9b
000000000103def0	movq	0x10(%rbx), %rcx
000000000103def4	movq	%rcx, 0x2b8(%rsp)
000000000103defc	jmp	0x103dc0a
000000000103df01	movzbl	%dil, %ecx
000000000103df05	testq	%rcx, %rcx
000000000103df08	cmovneq	%r11, %r13
000000000103df0c	testq	%rax, %rax
000000000103df0f	je	0x103e10a
000000000103df15	movq	0x338(%rsp), %rcx
000000000103df1d	cmpq	%rcx, %r13
000000000103df20	jge	0x103e105
000000000103df26	testq	%rbx, %rbx
000000000103df29	je	0x103e0c3
000000000103df2f	movq	0x320(%rsp), %rax
000000000103df37	movq	0x98(%rax), %rcx
000000000103df3e	movq	%rcx, 0x108(%rsp)
000000000103df46	movq	0x8(%rbx), %rdx
000000000103df4a	movq	%rdx, 0x100(%rsp)
000000000103df52	movq	0x10(%rbx), %rbx
000000000103df56	movq	%rbx, 0xf8(%rsp)
000000000103df5e	callq	runtime.printlock
000000000103df63	leaq	0x2d110(%rip), %rax
000000000103df6a	movq	%rax, (%rsp)
000000000103df6e	movq	$0xa, 0x8(%rsp)
000000000103df77	callq	runtime.printstring
000000000103df7c	movq	0x108(%rsp), %rax
000000000103df84	movq	%rax, (%rsp)
000000000103df88	callq	runtime.printint
000000000103df8d	leaq	0x2ddbc(%rip), %rax
000000000103df94	movq	%rax, (%rsp)
000000000103df98	movq	$0x14, 0x8(%rsp)
000000000103dfa1	callq	runtime.printstring
000000000103dfa6	movq	0x100(%rsp), %rax
000000000103dfae	movq	%rax, (%rsp)
000000000103dfb2	callq	runtime.printhex
000000000103dfb7	leaq	0x2cb4d(%rip), %rax
000000000103dfbe	movq	%rax, (%rsp)
000000000103dfc2	movq	$0x4, 0x8(%rsp)
000000000103dfcb	callq	runtime.printstring
000000000103dfd0	movq	0xf8(%rsp), %rax
000000000103dfd8	movq	%rax, (%rsp)
000000000103dfdc	callq	runtime.printhex
000000000103dfe1	callq	runtime.printnl
000000000103dfe6	callq	runtime.printunlock
000000000103dfeb	movq	0x320(%rsp), %rax
000000000103dff3	movq	0x28(%rax), %rax
000000000103dff7	jmp	0x103e0b5
000000000103dffc	movq	%rax, 0x260(%rsp)
000000000103e004	movq	0x8(%rax), %rcx
000000000103e008	movq	%rcx, 0x100(%rsp)
000000000103e010	movq	0x10(%rax), %rdx
000000000103e014	movq	%rdx, 0xf8(%rsp)
000000000103e01c	callq	runtime.printlock
000000000103e021	leaq	0x2ccd8(%rip), %rax
000000000103e028	movq	%rax, (%rsp)
000000000103e02c	movq	$0x7, 0x8(%rsp)
000000000103e035	callq	runtime.printstring
000000000103e03a	movq	0x260(%rsp), %rax
000000000103e042	movq	%rax, (%rsp)
000000000103e046	callq	runtime.printpointer
000000000103e04b	leaq	0x2cac1(%rip), %rax
000000000103e052	movq	%rax, (%rsp)
000000000103e056	movq	$0x4, 0x8(%rsp)
000000000103e05f	callq	runtime.printstring
000000000103e064	movq	0x100(%rsp), %rax
000000000103e06c	movq	%rax, (%rsp)
000000000103e070	callq	runtime.printhex
000000000103e075	leaq	0x2ca8f(%rip), %rax
000000000103e07c	movq	%rax, (%rsp)
000000000103e080	movq	$0x4, 0x8(%rsp)
000000000103e089	callq	runtime.printstring
000000000103e08e	movq	0xf8(%rsp), %rax
000000000103e096	movq	%rax, (%rsp)
000000000103e09a	callq	runtime.printhex
000000000103e09f	callq	runtime.printnl
000000000103e0a4	callq	runtime.printunlock
000000000103e0a9	movq	0x260(%rsp), %rax
000000000103e0b1	movq	0x28(%rax), %rax
000000000103e0b5	testq	%rax, %rax
000000000103e0b8	jne	0x103dffc
000000000103e0be	jmp	0x103f5bd
000000000103e0c3	testq	%rax, %rax
000000000103e0c6	je	0x103e0ed
000000000103e0c8	cmpq	%rcx, %r13
000000000103e0cb	jge	0x103e0ed
000000000103e0cd	movq	0x2c8(%rsp), %rax
000000000103e0d5	movq	0x320(%rsp), %rdx
000000000103e0dd	movq	0x80(%rdx), %rbx
000000000103e0e4	cmpq	%rbx, %rax
000000000103e0e7	jne	0x103f418
000000000103e0ed	movq	%r13, 0x358(%rsp)
000000000103e0f5	movq	0x2f8(%rsp), %rbp
000000000103e0fd	addq	$0x300, %rsp
000000000103e104	retq
000000000103e105	testq	%rax, %rax
000000000103e108	jmp	0x103e0c6
000000000103e10a	movq	0x338(%rsp), %rcx
000000000103e112	jmp	0x103e0c6
000000000103e114	movq	%r11, 0xf0(%rsp)
000000000103e11c	movq	%rsi, 0xe8(%rsp)
000000000103e124	movb	%r10b, 0x43(%rsp)
000000000103e129	movq	%rcx, (%rsp)
000000000103e12d	movb	%dil, 0x8(%rsp)
000000000103e132	movq	%r14, 0x10(%rsp)
000000000103e137	movq	%r13, 0x18(%rsp)
000000000103e13c	movq	0x338(%rsp), %rax
000000000103e144	movq	%rax, 0x20(%rsp)
000000000103e149	callq	runtime.tracebackCgoContext
000000000103e14e	movq	0x28(%rsp), %r13
000000000103e153	movq	0x340(%rsp), %rax
000000000103e15b	movq	0x330(%rsp), %rcx
000000000103e163	movq	0x260(%rsp), %rbx
000000000103e16b	movq	0xe8(%rsp), %rsi
000000000103e173	movzbl	0x41(%rsp), %edi
000000000103e178	movq	0x280(%rsp), %r8
000000000103e180	movq	0xa8(%rsp), %r9
000000000103e188	movzbl	0x43(%rsp), %r10d
000000000103e18e	movq	0xf0(%rsp), %r11
000000000103e196	movq	0x298(%rsp), %r12
000000000103e19e	movq	0x250(%rsp), %r15
000000000103e1a6	jmp	0x103dca9
000000000103e1ab	movq	%rsi, 0xe0(%rsp)
000000000103e1b3	movq	%rdx, 0xd8(%rsp)
000000000103e1bb	movq	%r12, (%rsp)
000000000103e1bf	movq	%r13, 0x8(%rsp)
000000000103e1c4	callq	runtime.funcname
000000000103e1c9	movq	0x10(%rsp), %rax
000000000103e1ce	movq	%rax, 0x210(%rsp)
000000000103e1d6	movq	0x18(%rsp), %rcx
000000000103e1db	movq	%rcx, 0x70(%rsp)
000000000103e1e0	cmpq	$0xf, %rcx
000000000103e1e4	jne	0x103ea66
000000000103e1ea	movq	(%rax), %rdx
000000000103e1ed	movabsq	$0x2e656d69746e7572, %rbx
000000000103e1f7	cmpq	%rdx, %rbx
000000000103e1fa	jne	0x103e9c4
000000000103e200	cmpl	$0x61706f67, 0x8(%rax)
000000000103e207	jne	0x103e9c4
000000000103e20d	cmpw	$0x696e, 0xc(%rax)
000000000103e213	jne	0x103e9c4
000000000103e219	cmpb	$0x63, 0xe(%rax)
000000000103e21d	jne	0x103e9c4
000000000103e223	movl	$0x1, %edx
000000000103e228	movb	%dl, 0x42(%rsp)
000000000103e22c	movq	0x350(%rsp), %rsi
000000000103e234	btl	$0x0, %esi
000000000103e238	jae	0x103e933
000000000103e23e	movq	0x2b0(%rsp), %rdi
000000000103e246	movq	0xd8(%rsp), %r8
000000000103e24e	testq	%r8, %r8
000000000103e251	jle	0x103e91c
000000000103e257	movq	0x298(%rsp), %r9
000000000103e25f	movq	(%r9), %r10
000000000103e262	cmpq	%r10, %rdi
000000000103e265	jbe	0x103e276
000000000103e267	movzbl	0x3f(%rsp), %r10d
000000000103e26d	testb	%r10b, %r10b
000000000103e270	je	0x103e914
000000000103e276	movq	%rdi, 0x58(%rsp)
000000000103e27b	movq	%r9, (%rsp)
000000000103e27f	movq	0x288(%rsp), %rax
000000000103e287	movq	%rax, 0x8(%rsp)
000000000103e28c	movq	%rdi, 0x10(%rsp)
000000000103e291	callq	runtime.funcline
000000000103e296	movl	0x28(%rsp), %eax
000000000103e29a	movl	%eax, 0x44(%rsp)
000000000103e29e	movq	0x20(%rsp), %rcx
000000000103e2a3	movq	%rcx, 0xa0(%rsp)
000000000103e2ab	movq	0x18(%rsp), %rdx
000000000103e2b0	movq	%rdx, 0x240(%rsp)
000000000103e2b8	movq	0x298(%rsp), %rbx
000000000103e2c0	movq	%rbx, (%rsp)
000000000103e2c4	movq	0x288(%rsp), %rsi
000000000103e2cc	movq	%rsi, 0x8(%rsp)
000000000103e2d1	movl	$0x2, 0x10(%rsp)
000000000103e2d9	callq	runtime.funcdata
000000000103e2de	movq	0x18(%rsp), %rax
000000000103e2e3	testq	%rax, %rax
000000000103e2e6	jne	0x103e70e
000000000103e2ec	movq	0x70(%rsp), %rax
000000000103e2f1	cmpq	$0xf, %rax
000000000103e2f5	movq	0x240(%rsp), %rcx
000000000103e2fd	movq	0xa0(%rsp), %rdx
000000000103e305	movl	0x44(%rsp), %ebx
000000000103e309	movq	%rcx, 0x240(%rsp)
000000000103e311	movq	%rdx, 0xa0(%rsp)
000000000103e319	movl	%ebx, 0x44(%rsp)
000000000103e31d	jne	0x103e701
000000000103e323	movq	0x210(%rsp), %rsi
000000000103e32b	movq	(%rsi), %rdi
000000000103e32e	movabsq	$0x2e656d69746e7572, %r8
000000000103e338	cmpq	%r8, %rdi
000000000103e33b	jne	0x103e360
000000000103e33d	cmpl	$0x61706f67, 0x8(%rsi)
000000000103e344	jne	0x103e360
000000000103e346	cmpw	$0x696e, 0xc(%rsi)
000000000103e34c	jne	0x103e360
000000000103e34e	cmpb	$0x63, 0xe(%rsi)
000000000103e352	jne	0x103e360
000000000103e354	movl	$0x5, %eax
000000000103e359	leaq	0x2c8ae(%rip), %rsi
000000000103e360	movq	%rax, 0x80(%rsp)
000000000103e368	movq	%rsi, 0x220(%rsp)
000000000103e370	callq	runtime.printlock
000000000103e375	movq	0x220(%rsp), %rax
000000000103e37d	movq	%rax, (%rsp)
000000000103e381	movq	0x80(%rsp), %rax
000000000103e389	movq	%rax, 0x8(%rsp)
000000000103e38e	callq	runtime.printstring
000000000103e393	leaq	0x2c6e7(%rip), %rax
000000000103e39a	movq	%rax, (%rsp)
000000000103e39e	movq	$0x1, 0x8(%rsp)
000000000103e3a7	callq	runtime.printstring
000000000103e3ac	callq	runtime.printunlock
000000000103e3b1	movq	0x2e0(%rsp), %rax
000000000103e3b9	movq	%rax, 0x278(%rsp)
000000000103e3c1	xorl	%ecx, %ecx
000000000103e3c3	jmp	0x103e402
000000000103e3c5	testb	%al, (%rax)
000000000103e3c7	movq	(%rax,%rcx,8), %rdx
000000000103e3cb	movq	%rdx, 0x100(%rsp)
000000000103e3d3	callq	runtime.printlock
000000000103e3d8	movq	0x100(%rsp), %rax
000000000103e3e0	movq	%rax, (%rsp)
000000000103e3e4	callq	runtime.printhex
000000000103e3e9	callq	runtime.printunlock
000000000103e3ee	movq	0x98(%rsp), %rax
000000000103e3f6	leaq	0x1(%rax), %rcx
000000000103e3fa	movq	0x278(%rsp), %rax
000000000103e402	movq	0x2e8(%rsp), %rdx
000000000103e40a	shrq	$0x3, %rdx
000000000103e40e	cmpq	%rdx, %rcx
000000000103e411	jae	0x103e481
000000000103e413	cmpq	$0xa, %rcx
000000000103e417	jae	0x103e45e
000000000103e419	movq	%rcx, 0x98(%rsp)
000000000103e421	testq	%rcx, %rcx
000000000103e424	je	0x103e3c5
000000000103e426	callq	runtime.printlock
000000000103e42b	leaq	0x2c66a(%rip), %rax
000000000103e432	movq	%rax, (%rsp)
000000000103e436	movq	$0x2, 0x8(%rsp)
000000000103e43f	callq	runtime.printstring
000000000103e444	callq	runtime.printunlock
000000000103e449	movq	0x278(%rsp), %rax
000000000103e451	movq	0x98(%rsp), %rcx
000000000103e459	jmp	0x103e3c5
000000000103e45e	callq	runtime.printlock
000000000103e463	leaq	0x2c777(%rip), %rax
000000000103e46a	movq	%rax, (%rsp)
000000000103e46e	movq	$0x5, 0x8(%rsp)
000000000103e477	callq	runtime.printstring
000000000103e47c	callq	runtime.printunlock
000000000103e481	callq	runtime.printlock
000000000103e486	leaq	0x2c60d(%rip), %rax
000000000103e48d	movq	%rax, (%rsp)
000000000103e491	movq	$0x2, 0x8(%rsp)
000000000103e49a	callq	runtime.printstring
000000000103e49f	callq	runtime.printunlock
000000000103e4a4	callq	runtime.printlock
000000000103e4a9	leaq	0x2c5de(%rip), %rax
000000000103e4b0	movq	%rax, (%rsp)
000000000103e4b4	movq	$0x1, 0x8(%rsp)
000000000103e4bd	callq	runtime.printstring
000000000103e4c2	movq	0x240(%rsp), %rax
000000000103e4ca	movq	%rax, (%rsp)
000000000103e4ce	movq	0xa0(%rsp), %rax
000000000103e4d6	movq	%rax, 0x8(%rsp)
000000000103e4db	callq	runtime.printstring
000000000103e4e0	leaq	0x2c5a1(%rip), %rax
000000000103e4e7	movq	%rax, (%rsp)
000000000103e4eb	movq	$0x1, 0x8(%rsp)
000000000103e4f4	callq	runtime.printstring
000000000103e4f9	movl	0x44(%rsp), %eax
000000000103e4fd	movslq	%eax, %rax
000000000103e500	movq	%rax, (%rsp)
000000000103e504	callq	runtime.printint
000000000103e509	callq	runtime.printunlock
000000000103e50e	movq	0x2b0(%rsp), %rax
000000000103e516	movq	0x298(%rsp), %rcx
000000000103e51e	movq	(%rcx), %rdx
000000000103e521	cmpq	%rdx, %rax
000000000103e524	ja	0x103e6a5
000000000103e52a	movq	0x228(%rsp), %rax
000000000103e532	movq	0x30(%rax), %rdx
000000000103e536	cmpl	$0x0, 0xec(%rdx)
000000000103e53d	jle	0x103e69b
000000000103e543	movq	0xc0(%rdx), %rdx
000000000103e54a	movq	0x320(%rsp), %rbx
000000000103e552	cmpq	%rbx, %rdx
000000000103e555	jne	0x103e689
000000000103e55b	movq	0x2d0(%rsp), %rax
000000000103e563	movq	%rax, 0x100(%rsp)
000000000103e56b	movq	0x2c8(%rsp), %rcx
000000000103e573	movq	%rcx, 0xf8(%rsp)
000000000103e57b	movq	0x2b0(%rsp), %rdx
000000000103e583	movq	%rdx, 0xd0(%rsp)
000000000103e58b	callq	runtime.printlock
000000000103e590	leaq	0x2c564(%rip), %rax
000000000103e597	movq	%rax, (%rsp)
000000000103e59b	movq	$0x4, 0x8(%rsp)
000000000103e5a4	callq	runtime.printstring
000000000103e5a9	movq	0x100(%rsp), %rax
000000000103e5b1	movq	%rax, (%rsp)
000000000103e5b5	callq	runtime.printhex
000000000103e5ba	leaq	0x2c552(%rip), %rax
000000000103e5c1	movq	%rax, (%rsp)
000000000103e5c5	movq	$0x4, 0x8(%rsp)
000000000103e5ce	callq	runtime.printstring
000000000103e5d3	movq	0xf8(%rsp), %rax
000000000103e5db	movq	%rax, (%rsp)
000000000103e5df	callq	runtime.printhex
000000000103e5e4	leaq	0x2c520(%rip), %rax
000000000103e5eb	movq	%rax, (%rsp)
000000000103e5ef	movq	$0x4, 0x8(%rsp)
000000000103e5f8	callq	runtime.printstring
000000000103e5fd	movq	0xd0(%rsp), %rax
000000000103e605	movq	%rax, (%rsp)
000000000103e609	callq	runtime.printhex
000000000103e60e	callq	runtime.printunlock
000000000103e613	callq	runtime.printlock
000000000103e618	callq	runtime.printnl
000000000103e61d	callq	runtime.printunlock
000000000103e622	movq	0x68(%rsp), %rax
000000000103e627	incq	%rax
000000000103e62a	movzbl	0x42(%rsp), %r10d
000000000103e630	xorl	$0x1, %r10d
000000000103e634	movq	0x330(%rsp), %rcx
000000000103e63c	movq	0xd8(%rsp), %rdx
000000000103e644	movq	0x260(%rsp), %rbx
000000000103e64c	movq	0xe0(%rsp), %rsi
000000000103e654	movzbl	0x41(%rsp), %edi
000000000103e659	movq	0x280(%rsp), %r8
000000000103e661	movq	0xa8(%rsp), %r9
000000000103e669	movq	0x298(%rsp), %r12
000000000103e671	movq	0x250(%rsp), %r15
000000000103e679	movq	%rax, %r11
000000000103e67c	movq	0x340(%rsp), %rax
000000000103e684	jmp	0x103dc85
000000000103e689	movl	0x48(%rsp), %edx
000000000103e68d	cmpl	$0x2, %edx
000000000103e690	jge	0x103e55b
000000000103e696	jmp	0x103e613
000000000103e69b	movq	0x320(%rsp), %rbx
000000000103e6a3	jmp	0x103e689
000000000103e6a5	movq	%rax, 0x100(%rsp)
000000000103e6ad	movq	%rdx, 0xf8(%rsp)
000000000103e6b5	callq	runtime.printlock
000000000103e6ba	leaq	0x2c3cf(%rip), %rax
000000000103e6c1	movq	%rax, (%rsp)
000000000103e6c5	movq	$0x2, 0x8(%rsp)
000000000103e6ce	callq	runtime.printstring
000000000103e6d3	movq	0x100(%rsp), %rax
000000000103e6db	movq	0xf8(%rsp), %rcx
000000000103e6e3	subq	%rcx, %rax
000000000103e6e6	movq	%rax, (%rsp)
000000000103e6ea	callq	runtime.printhex
000000000103e6ef	callq	runtime.printunlock
000000000103e6f4	movq	0x298(%rsp), %rcx
000000000103e6fc	jmp	0x103e52a
000000000103e701	movq	0x210(%rsp), %rsi
000000000103e709	jmp	0x103e360
000000000103e70e	movq	%rax, 0x278(%rsp)
000000000103e716	movq	0x298(%rsp), %rax
000000000103e71e	movq	%rax, (%rsp)
000000000103e722	movq	0x288(%rsp), %rcx
000000000103e72a	movq	%rcx, 0x8(%rsp)
000000000103e72f	movl	$0x1, 0x10(%rsp)
000000000103e737	movq	0x58(%rsp), %rdx
000000000103e73c	movq	%rdx, 0x18(%rsp)
000000000103e741	movq	$0x0, 0x20(%rsp)
000000000103e74a	callq	runtime.pcdatavalue
000000000103e74f	movl	0x28(%rsp), %eax
000000000103e753	movq	0x278(%rsp), %rcx
000000000103e75b	movq	0x288(%rsp), %rdx
000000000103e763	movq	0x298(%rsp), %rbx
000000000103e76b	movl	0x44(%rsp), %esi
000000000103e76f	movq	0x240(%rsp), %rdi
000000000103e777	movq	0xa0(%rsp), %r8
000000000103e77f	jmp	0x103e8e5
000000000103e784	movq	%r8, 0xc8(%rsp)
000000000103e78c	movq	%rdi, 0x270(%rsp)
000000000103e794	movl	%esi, 0x4c(%rsp)
000000000103e798	shlq	$0x4, %rax
000000000103e79c	movq	%rax, 0xc0(%rsp)
000000000103e7a4	movl	0xc(%rcx,%rax), %esi
000000000103e7a8	movl	%esi, 0x10(%rsp)
000000000103e7ac	movq	%rbx, (%rsp)
000000000103e7b0	movq	%rdx, 0x8(%rsp)
000000000103e7b5	callq	runtime.funcnameFromNameoff
000000000103e7ba	movq	0x18(%rsp), %rax
000000000103e7bf	movq	%rax, 0x218(%rsp)
000000000103e7c7	movq	0x20(%rsp), %rcx
000000000103e7cc	movq	%rcx, 0x78(%rsp)
000000000103e7d1	callq	runtime.printlock
000000000103e7d6	movq	0x218(%rsp), %rax
000000000103e7de	movq	%rax, (%rsp)
000000000103e7e2	movq	0x78(%rsp), %rax
000000000103e7e7	movq	%rax, 0x8(%rsp)
000000000103e7ec	callq	runtime.printstring
000000000103e7f1	leaq	0x2c47d(%rip), %rax
000000000103e7f8	movq	%rax, (%rsp)
000000000103e7fc	movq	$0x6, 0x8(%rsp)
000000000103e805	callq	runtime.printstring
000000000103e80a	callq	runtime.printunlock
000000000103e80f	callq	runtime.printlock
000000000103e814	leaq	0x2c273(%rip), %rax
000000000103e81b	movq	%rax, (%rsp)
000000000103e81f	movq	$0x1, 0x8(%rsp)
000000000103e828	callq	runtime.printstring
000000000103e82d	movq	0x270(%rsp), %rax
000000000103e835	movq	%rax, (%rsp)
000000000103e839	movq	0xc8(%rsp), %rax
000000000103e841	movq	%rax, 0x8(%rsp)
000000000103e846	callq	runtime.printstring
000000000103e84b	leaq	0x2c236(%rip), %rax
000000000103e852	movq	%rax, (%rsp)
000000000103e856	movq	$0x1, 0x8(%rsp)
000000000103e85f	callq	runtime.printstring
000000000103e864	movl	0x4c(%rsp), %eax
000000000103e868	movslq	%eax, %rax
000000000103e86b	movq	%rax, (%rsp)
000000000103e86f	callq	runtime.printint
000000000103e874	callq	runtime.printnl
000000000103e879	callq	runtime.printunlock
000000000103e87e	movq	0xc0(%rsp), %rax
000000000103e886	movq	0x278(%rsp), %rcx
000000000103e88e	movl	0x4(%rcx,%rax), %edx
000000000103e892	movl	%edx, 0x10(%rsp)
000000000103e896	movq	0x298(%rsp), %rdx
000000000103e89e	movq	%rdx, (%rsp)
000000000103e8a2	movq	0x288(%rsp), %rbx
000000000103e8aa	movq	%rbx, 0x8(%rsp)
000000000103e8af	callq	runtime.funcfile
000000000103e8b4	movq	0x18(%rsp), %rdi
000000000103e8b9	movq	0x20(%rsp), %r8
000000000103e8be	movq	0xc0(%rsp), %rax
000000000103e8c6	movq	0x278(%rsp), %rcx
000000000103e8ce	movl	0x8(%rcx,%rax), %esi
000000000103e8d2	movl	(%rax,%rcx), %eax
000000000103e8d5	movq	0x288(%rsp), %rdx
000000000103e8dd	movq	0x298(%rsp), %rbx
000000000103e8e5	cmpl	$-0x1, %eax
000000000103e8e8	je	0x103e8fe
000000000103e8ea	movslq	%eax, %rax
000000000103e8ed	cmpq	$0x100000, %rax
000000000103e8f3	jb	0x103e784
000000000103e8f9	jmp	0x103f5d8
000000000103e8fe	movq	0x70(%rsp), %rax
000000000103e903	cmpq	$0xf, %rax
000000000103e907	movq	%rdi, %rcx
000000000103e90a	movq	%r8, %rdx
000000000103e90d	movl	%esi, %ebx
000000000103e90f	jmp	0x103e309
000000000103e914	decq	%rdi
000000000103e917	jmp	0x103e276
000000000103e91c	btl	$0x1, %esi
000000000103e920	jae	0x103e257
000000000103e926	movq	0x298(%rsp), %r9
000000000103e92e	jmp	0x103e276
000000000103e933	movq	0x298(%rsp), %rdi
000000000103e93b	movq	%rdi, (%rsp)
000000000103e93f	movq	0x288(%rsp), %r8
000000000103e947	movq	%r8, 0x8(%rsp)
000000000103e94c	movq	0x320(%rsp), %r9
000000000103e954	movq	%r9, 0x10(%rsp)
000000000103e959	movq	0x68(%rsp), %r10
000000000103e95e	testq	%r10, %r10
000000000103e961	sete	0x18(%rsp)
000000000103e966	movzbl	0x40(%rsp), %r11d
000000000103e96c	testb	%r11b, %r11b
000000000103e96f	je	0x103e9bf
000000000103e971	testq	%r10, %r10
000000000103e974	setne	%r11b
000000000103e978	movb	%r11b, 0x19(%rsp)
000000000103e97d	callq	runtime.showframe
000000000103e982	leaq	0x20(%rsp), %rax
000000000103e987	cmpb	$0x0, (%rax)
000000000103e98a	jne	0x103e996
000000000103e98c	movq	0x68(%rsp), %rax
000000000103e991	jmp	0x103e62a
000000000103e996	movq	0x210(%rsp), %rax
000000000103e99e	movq	0x70(%rsp), %rcx
000000000103e9a3	movzbl	0x42(%rsp), %edx
000000000103e9a8	movabsq	$0x2e656d69746e7572, %rbx
000000000103e9b2	movq	0x350(%rsp), %rsi
000000000103e9ba	jmp	0x103e23e
000000000103e9bf	xorl	%r11d, %r11d
000000000103e9c2	jmp	0x103e978
000000000103e9c4	cmpq	$0x10, %rcx
000000000103e9c8	jne	0x103ea58
000000000103e9ce	movq	(%rax), %rdx
000000000103e9d1	cmpq	%rdx, %rbx
000000000103e9d4	jne	0x103ea4a
000000000103e9d6	movq	0x8(%rax), %rdx
000000000103e9da	movabsq	$0x63696e6170676973, %rsi
000000000103e9e4	cmpq	%rdx, %rsi
000000000103e9e7	sete	%dl
000000000103e9ea	testb	%dl, %dl
000000000103e9ec	je	0x103e9f8
000000000103e9ee	movl	$0x1, %edx
000000000103e9f3	jmp	0x103e228
000000000103e9f8	cmpq	$0x11, %rcx
000000000103e9fc	je	0x103ea05
000000000103e9fe	xorl	%edx, %edx
000000000103ea00	jmp	0x103e228
000000000103ea05	movq	%rax, (%rsp)
000000000103ea09	leaq	0x2cf97(%rip), %rdx
000000000103ea10	movq	%rdx, 0x8(%rsp)
000000000103ea15	movq	%rcx, 0x10(%rsp)
000000000103ea1a	callq	runtime.memequal
000000000103ea1f	movzbl	0x18(%rsp), %edx
000000000103ea24	movq	0x210(%rsp), %rax
000000000103ea2c	movq	0x70(%rsp), %rcx
000000000103ea31	movabsq	$0x2e656d69746e7572, %rbx
000000000103ea3b	movabsq	$0x63696e6170676973, %rsi
000000000103ea45	jmp	0x103e228
000000000103ea4a	movabsq	$0x63696e6170676973, %rsi
000000000103ea54	xorl	%edx, %edx
000000000103ea56	jmp	0x103e9ea
000000000103ea58	movabsq	$0x63696e6170676973, %rsi
000000000103ea62	xorl	%edx, %edx
000000000103ea64	jmp	0x103e9ea
000000000103ea66	movabsq	$0x2e656d69746e7572, %rbx
000000000103ea70	jmp	0x103e9c4
000000000103ea75	movq	0x2b0(%rsp), %rdi
000000000103ea7d	testq	%rdx, %rdx
000000000103ea80	jle	0x103ecc7
000000000103ea86	movq	(%r12), %r14
000000000103ea8a	cmpq	%r14, %rdi
000000000103ea8d	jbe	0x103ecbc
000000000103ea93	movzbl	0x3f(%rsp), %r14d
000000000103ea99	testb	%r14b, %r14b
000000000103ea9c	je	0x103ecb4
000000000103eaa2	movq	%rdi, 0x50(%rsp)
000000000103eaa7	movq	%r12, (%rsp)
000000000103eaab	movq	%r13, 0x8(%rsp)
000000000103eab0	movl	$0x2, 0x10(%rsp)
000000000103eab8	callq	runtime.funcdata
000000000103eabd	movq	0x18(%rsp), %rax
000000000103eac2	testq	%rax, %rax
000000000103eac5	jne	0x103eb28
000000000103eac7	movq	0x328(%rsp), %r14
000000000103eacf	leaq	-0x1(%r14), %rsi
000000000103ead3	movq	0x340(%rsp), %rax
000000000103eadb	movq	0x330(%rsp), %rcx
000000000103eae3	movq	0x260(%rsp), %rbx
000000000103eaeb	movzbl	0x41(%rsp), %edi
000000000103eaf0	movq	0x280(%rsp), %r8
000000000103eaf8	movq	0xa8(%rsp), %r9
000000000103eb00	movq	0x298(%rsp), %r12
000000000103eb08	movq	0x250(%rsp), %r15
000000000103eb10	movzbl	0x40(%rsp), %r10d
000000000103eb16	movq	0x68(%rsp), %r11
000000000103eb1b	movq	0x88(%rsp), %r13
000000000103eb23	jmp	0x103dc89
000000000103eb28	movq	%rax, 0x278(%rsp)
000000000103eb30	movq	0x298(%rsp), %rax
000000000103eb38	movq	%rax, (%rsp)
000000000103eb3c	movq	0x288(%rsp), %rcx
000000000103eb44	movq	%rcx, 0x8(%rsp)
000000000103eb49	movl	$0x1, 0x10(%rsp)
000000000103eb51	movq	0x50(%rsp), %rdx
000000000103eb56	movq	%rdx, 0x18(%rsp)
000000000103eb5b	leaq	0x110(%rsp), %rdx
000000000103eb63	movq	%rdx, 0x20(%rsp)
000000000103eb68	callq	runtime.pcdatavalue
000000000103eb6d	movl	0x28(%rsp), %eax
000000000103eb71	movq	0x278(%rsp), %rcx
000000000103eb79	movq	0x328(%rsp), %rdx
000000000103eb81	xorl	%ebx, %ebx
000000000103eb83	jmp	0x103eb92
000000000103eb85	decq	%rdx
000000000103eb88	incq	%rbx
000000000103eb8b	shlq	$0x4, %rax
000000000103eb8f	movl	(%rax,%rcx), %eax
000000000103eb92	testl	%eax, %eax
000000000103eb94	jl	0x103ebab
000000000103eb96	testq	%rdx, %rdx
000000000103eb99	jle	0x103ebab
000000000103eb9b	movslq	%eax, %rax
000000000103eb9e	cmpq	$0x100000, %rax
000000000103eba4	jb	0x103eb85
000000000103eba6	jmp	0x103f5ed
000000000103ebab	testq	%rdx, %rdx
000000000103ebae	jle	0x103ec09
000000000103ebb0	leaq	-0x1(%rdx), %rsi
000000000103ebb4	movq	0x340(%rsp), %rax
000000000103ebbc	movq	0x330(%rsp), %rcx
000000000103ebc4	movq	0x260(%rsp), %rbx
000000000103ebcc	movzbl	0x41(%rsp), %edi
000000000103ebd1	movq	0x280(%rsp), %r8
000000000103ebd9	movq	0xa8(%rsp), %r9
000000000103ebe1	movq	0x298(%rsp), %r12
000000000103ebe9	movq	0x250(%rsp), %r15
000000000103ebf1	movzbl	0x40(%rsp), %r10d
000000000103ebf7	movq	0x68(%rsp), %r11
000000000103ebfc	movq	0x88(%rsp), %r13
000000000103ec04	jmp	0x103dc89
000000000103ec09	movq	0x2b0(%rsp), %rax
000000000103ec11	movq	0x88(%rsp), %rcx
000000000103ec19	cmpq	$0x100000, %rcx
000000000103ec20	jae	0x103f5e6
000000000103ec26	movq	0x330(%rsp), %rsi
000000000103ec2e	movq	%rax, (%rsi,%rcx,8)
000000000103ec32	leaq	0x1(%rcx), %rax
000000000103ec36	movq	0x338(%rsp), %rdi
000000000103ec3e	cmpq	%rdi, %rax
000000000103ec41	jge	0x103ecaf
000000000103ec43	movq	runtime.skipPC(%rip), %r8
000000000103ec4a	addq	%r8, %rbx
000000000103ec4d	cmpq	$0x100000, %rax
000000000103ec53	jae	0x103f5df
000000000103ec59	movq	%rbx, 0x8(%rsi,%rcx,8)
000000000103ec5e	movq	%rsi, %rcx
000000000103ec61	movq	0x260(%rsp), %rbx
000000000103ec69	movq	0x280(%rsp), %r8
000000000103ec71	movq	0xa8(%rsp), %r9
000000000103ec79	movzbl	0x40(%rsp), %r10d
000000000103ec7f	movq	0x68(%rsp), %r11
000000000103ec84	movq	0x298(%rsp), %r12
000000000103ec8c	movq	0x288(%rsp), %r13
000000000103ec94	movq	0x250(%rsp), %r15
000000000103ec9c	movq	%rdx, %rsi
000000000103ec9f	movq	%rax, %rdx
000000000103eca2	movq	0x340(%rsp), %rax
000000000103ecaa	jmp	0x103dc77
000000000103ecaf	movq	%rcx, %rax
000000000103ecb2	jmp	0x103ec5e
000000000103ecb4	decq	%rdi
000000000103ecb7	jmp	0x103eaa2
000000000103ecbc	movzbl	0x3f(%rsp), %r14d
000000000103ecc2	jmp	0x103eaa2
000000000103ecc7	movq	0x350(%rsp), %r14
000000000103eccf	btl	$0x1, %r14d
000000000103ecd4	jae	0x103ea86
000000000103ecda	movzbl	0x3f(%rsp), %r14d
000000000103ece0	jmp	0x103eaa2
000000000103ece5	leaq	0x2a0(%rsp), %rcx
000000000103eced	movq	%rcx, (%rsp)
000000000103ecf1	movq	0x348(%rsp), %rbx
000000000103ecf9	movq	%rbx, 0x8(%rsp)
000000000103ecfe	movq	(%rax), %rsi
000000000103ed01	movq	%rax, %rdx
000000000103ed04	callq	*%rsi
000000000103ed06	leaq	0x10(%rsp), %rax
000000000103ed0b	cmpb	$0x0, (%rax)
000000000103ed0e	je	0x103ed73
000000000103ed10	movq	0x330(%rsp), %rcx
000000000103ed18	testq	%rcx, %rcx
000000000103ed1b	movq	0x340(%rsp), %rax
000000000103ed23	movq	0x88(%rsp), %rdx
000000000103ed2b	movq	0x260(%rsp), %rbx
000000000103ed33	movq	0x328(%rsp), %rsi
000000000103ed3b	movq	0x280(%rsp), %r8
000000000103ed43	movq	0xa8(%rsp), %r9
000000000103ed4b	movzbl	0x40(%rsp), %r10d
000000000103ed51	movq	0x68(%rsp), %r11
000000000103ed56	movq	0x298(%rsp), %r12
000000000103ed5e	movq	0x288(%rsp), %r13
000000000103ed66	movq	0x250(%rsp), %r15
000000000103ed6e	jmp	0x103dc53
000000000103ed73	movq	0x88(%rsp), %rax
000000000103ed7b	movq	%rax, 0x358(%rsp)
000000000103ed83	movq	0x2f8(%rsp), %rbp
000000000103ed8b	addq	$0x300, %rsp
000000000103ed92	retq
000000000103ed93	testq	%rax, %rax
000000000103ed96	jmp	0x103dc3a
000000000103ed9b	movq	$0x0, 0x2b8(%rsp)
000000000103eda7	jmp	0x103dc0a
000000000103edac	leaq	0x2a0(%rsp), %rcx
000000000103edb4	movq	%rcx, (%rsp)
000000000103edb8	movq	%r12, 0x8(%rsp)
000000000103edbd	movq	%r13, 0x10(%rsp)
000000000103edc2	testq	%rax, %rax
000000000103edc5	setne	%dl
000000000103edc8	movb	%dl, 0x18(%rsp)
000000000103edcc	movq	$0x0, 0x20(%rsp)
000000000103edd5	callq	runtime.getArgInfo
000000000103edda	movq	0x28(%rsp), %rax
000000000103eddf	movq	0x30(%rsp), %rcx
000000000103ede4	movq	%rax, 0x2e8(%rsp)
000000000103edec	movq	%rcx, 0x2f0(%rsp)
000000000103edf4	movq	0x340(%rsp), %rax
000000000103edfc	movq	0x88(%rsp), %rdx
000000000103ee04	movq	0x290(%rsp), %rbx
000000000103ee0c	movq	0x328(%rsp), %rsi
000000000103ee14	movzbl	0x3f(%rsp), %edi
000000000103ee19	movq	0x280(%rsp), %r8
000000000103ee21	movq	0xa8(%rsp), %r9
000000000103ee29	movzbl	0x40(%rsp), %r10d
000000000103ee2f	movq	0x68(%rsp), %r11
000000000103ee34	movq	0x298(%rsp), %r12
000000000103ee3c	movq	0x288(%rsp), %r13
000000000103ee44	movq	0x250(%rsp), %r15
000000000103ee4c	jmp	0x103dea8
000000000103ee51	xorl	%r14d, %r14d
000000000103ee54	jmp	0x103de88
000000000103ee59	movzbl	0x41(%rsp), %ecx
000000000103ee5e	testb	%cl, %cl
000000000103ee60	je	0x103dea8
000000000103ee66	testq	%rax, %rax
000000000103ee69	jmp	0x103de63
000000000103ee6e	cmpq	$0x0, 0x2c0(%rsp)
000000000103ee77	jne	0x103f0d4
000000000103ee7d	movq	0x2d0(%rsp), %r14
000000000103ee85	addq	$-0x8, %r14
000000000103ee89	movq	%r14, %r15
000000000103ee8c	movq	(%r14), %r14
000000000103ee8f	movq	%r14, 0x2c0(%rsp)
000000000103ee97	movq	%r15, 0x90(%rsp)
000000000103ee9f	movq	0x2c0(%rsp), %rax
000000000103eea7	movq	%rax, (%rsp)
000000000103eeab	callq	runtime.findfunc
000000000103eeb0	movq	0x10(%rsp), %rax
000000000103eeb5	movq	0x8(%rsp), %rcx
000000000103eeba	testq	%rcx, %rcx
000000000103eebd	je	0x103ef22
000000000103eebf	movq	0x88(%rsp), %rdx
000000000103eec7	movq	0x290(%rsp), %rbx
000000000103eecf	movq	0x328(%rsp), %rsi
000000000103eed7	movzbl	0x3f(%rsp), %edi
000000000103eedc	movq	0x280(%rsp), %r8
000000000103eee4	movq	0xa8(%rsp), %r9
000000000103eeec	movzbl	0x40(%rsp), %r10d
000000000103eef2	movq	0x68(%rsp), %r11
000000000103eef7	movq	0x298(%rsp), %r12
000000000103eeff	movq	0x288(%rsp), %r13
000000000103ef07	movq	%rax, %r14
000000000103ef0a	movq	%rcx, %r15
000000000103ef0d	movq	0x320(%rsp), %rax
000000000103ef15	movq	0x338(%rsp), %rcx
000000000103ef1d	jmp	0x103de00
000000000103ef22	movzbl	0x41(%rsp), %ebx
000000000103ef27	testb	%bl, %bl
000000000103ef29	je	0x103f0bd
000000000103ef2f	movq	0x320(%rsp), %rsi
000000000103ef37	movq	0x30(%rsi), %rdi
000000000103ef3b	testb	%al, (%rdi)
000000000103ef3d	addq	$0x115, %rdi
000000000103ef44	cmpb	$0x0, (%rdi)
000000000103ef47	je	0x103f0b3
000000000103ef4d	movq	0x298(%rsp), %rdi
000000000103ef55	cmpl	$0x9, 0x10(%rdi)
000000000103ef59	jne	0x103f0ac
000000000103ef5f	xorl	%edx, %edx
000000000103ef61	movq	%rax, 0x230(%rsp)
000000000103ef69	movq	%rcx, 0x238(%rsp)
000000000103ef71	movq	0x340(%rsp), %r8
000000000103ef79	testq	%r8, %r8
000000000103ef7c	jne	0x103ef90
000000000103ef7e	testb	%dl, %dl
000000000103ef80	jne	0x103ef90
000000000103ef82	testq	%r8, %r8
000000000103ef85	je	0x103eebf
000000000103ef8b	jmp	0x103f5fb
000000000103ef90	movq	%rdi, (%rsp)
000000000103ef94	movq	0x288(%rsp), %rax
000000000103ef9c	movq	%rax, 0x8(%rsp)
000000000103efa1	callq	runtime.funcname
000000000103efa6	movq	0x10(%rsp), %rax
000000000103efab	movq	%rax, 0x268(%rsp)
000000000103efb3	movq	0x18(%rsp), %rcx
000000000103efb8	movq	%rcx, 0xd8(%rsp)
000000000103efc0	movq	0x2c0(%rsp), %rdx
000000000103efc8	movq	%rdx, 0x100(%rsp)
000000000103efd0	callq	runtime.printlock
000000000103efd5	leaq	0x2ea91(%rip), %rax
000000000103efdc	movq	%rax, (%rsp)
000000000103efe0	movq	$0x22, 0x8(%rsp)
000000000103efe9	callq	runtime.printstring
000000000103efee	movq	0x268(%rsp), %rax
000000000103eff6	movq	%rax, (%rsp)
000000000103effa	movq	0xd8(%rsp), %rax
000000000103f002	movq	%rax, 0x8(%rsp)
000000000103f007	callq	runtime.printstring
000000000103f00c	leaq	0x2c37b(%rip), %rax
000000000103f013	movq	%rax, (%rsp)
000000000103f017	movq	$0xd, 0x8(%rsp)
000000000103f020	callq	runtime.printstring
000000000103f025	movq	0x100(%rsp), %rax
000000000103f02d	movq	%rax, (%rsp)
000000000103f031	callq	runtime.printhex
000000000103f036	callq	runtime.printnl
000000000103f03b	callq	runtime.printunlock
000000000103f040	movq	0x320(%rsp), %rax
000000000103f048	movq	0x8(%rax), %rcx
000000000103f04c	movq	(%rax), %rdx
000000000103f04f	movq	%rdx, (%rsp)
000000000103f053	movq	%rcx, 0x8(%rsp)
000000000103f058	leaq	0x2a0(%rsp), %rcx
000000000103f060	movq	%rcx, 0x10(%rsp)
000000000103f065	movq	0x90(%rsp), %rdx
000000000103f06d	movq	%rdx, 0x18(%rsp)
000000000103f072	callq	runtime.tracebackHexdump
000000000103f077	movq	0x340(%rsp), %r8
000000000103f07f	testq	%r8, %r8
000000000103f082	movq	0x230(%rsp), %rax
000000000103f08a	movq	0x238(%rsp), %rcx
000000000103f092	movzbl	0x41(%rsp), %ebx
000000000103f097	movq	0x320(%rsp), %rsi
000000000103f09f	movq	0x298(%rsp), %rdi
000000000103f0a7	jmp	0x103ef85
000000000103f0ac	movl	%ebx, %edx
000000000103f0ae	jmp	0x103ef61
000000000103f0b3	movq	0x298(%rsp), %rdi
000000000103f0bb	jmp	0x103f0ac
000000000103f0bd	movq	0x320(%rsp), %rsi
000000000103f0c5	movq	0x298(%rsp), %rdi
000000000103f0cd	xorl	%edx, %edx
000000000103f0cf	jmp	0x103ef61
000000000103f0d4	xorl	%r15d, %r15d
000000000103f0d7	jmp	0x103ee97
000000000103f0dc	cmpl	$0x6, %r15d
000000000103f0e0	jne	0x103f0ed
000000000103f0e2	movl	$0x1, %r14d
000000000103f0e8	jmp	0x103ddd5
000000000103f0ed	cmpl	$0x4, %r15d
000000000103f0f1	jne	0x103f0fe
000000000103f0f3	movl	$0x1, %r14d
000000000103f0f9	jmp	0x103ddd5
000000000103f0fe	cmpl	$0x5, %r15d
000000000103f102	jne	0x103f10f
000000000103f104	movl	$0x1, %r14d
000000000103f10a	jmp	0x103ddd5
000000000103f10f	cmpl	$0x7, %r15d
000000000103f113	jne	0x103f120
000000000103f115	movl	$0x1, %r14d
000000000103f11b	jmp	0x103ddd5
000000000103f120	cmpl	$0x10, %r15d
000000000103f124	jne	0x103f131
000000000103f126	movl	$0x1, %r14d
000000000103f12c	jmp	0x103ddd5
000000000103f131	testb	%r14b, %r14b
000000000103f134	je	0x103f143
000000000103f136	cmpl	$0x8, %r15d
000000000103f13a	sete	%r14b
000000000103f13e	jmp	0x103ddd5
000000000103f143	xorl	%r14d, %r14d
000000000103f146	jmp	0x103ddd5
000000000103f14b	xorl	%r14d, %r14d
000000000103f14e	jmp	0x103ddc0
000000000103f153	movq	0x2c8(%rsp), %r14
000000000103f15b	movq	0x350(%rsp), %r15
000000000103f163	btl	$0x2, %r15d
000000000103f168	jae	0x103f2c3
000000000103f16e	cmpl	$0xd, 0x10(%r12)
000000000103f174	jne	0x103f2aa
000000000103f17a	movq	0x228(%rsp), %r15
000000000103f182	movq	0x30(%r15), %r15
000000000103f186	movq	(%r15), %r15
000000000103f189	cmpq	%rax, %r15
000000000103f18c	jne	0x103f299
000000000103f192	movq	0x30(%rax), %r15
000000000103f196	movq	0xc0(%r15), %r15
000000000103f19d	testq	%r15, %r15
000000000103f1a0	je	0x103f288
000000000103f1a6	movq	0x38(%r15), %r8
000000000103f1aa	movq	%r8, 0x2c8(%rsp)
000000000103f1b2	movq	0x30(%rax), %r9
000000000103f1b6	movq	0xc0(%r9), %r9
000000000103f1bd	movq	0x148(%r9), %r14
000000000103f1c4	movq	0x140(%r9), %r9
000000000103f1cb	movq	%r8, 0x60(%rsp)
000000000103f1d0	movq	%r14, 0xa8(%rsp)
000000000103f1d8	movq	%r9, 0x280(%rsp)
000000000103f1e0	movq	%r12, (%rsp)
000000000103f1e4	movq	%r13, 0x8(%rsp)
000000000103f1e9	movq	0x2b0(%rsp), %rax
000000000103f1f1	movq	%rax, 0x10(%rsp)
000000000103f1f6	leaq	0x110(%rsp), %rax
000000000103f1fe	movq	%rax, 0x18(%rsp)
000000000103f203	callq	runtime.funcspdelta
000000000103f208	movslq	0x20(%rsp), %rax
000000000103f20d	movq	0x60(%rsp), %rcx
000000000103f212	leaq	(%rcx,%rax), %rdx
000000000103f216	movq	%rdx, 0x2d0(%rsp)
000000000103f21e	leaq	0x8(%rcx,%rax), %rax
000000000103f223	movq	%rax, 0x2d0(%rsp)
000000000103f22b	movq	0x320(%rsp), %rax
000000000103f233	movq	0x338(%rsp), %rcx
000000000103f23b	movq	0x88(%rsp), %rdx
000000000103f243	movq	0x290(%rsp), %rbx
000000000103f24b	movq	0x328(%rsp), %rsi
000000000103f253	movzbl	0x3f(%rsp), %edi
000000000103f258	movzbl	0x40(%rsp), %r10d
000000000103f25e	movq	0x68(%rsp), %r11
000000000103f263	movq	0x298(%rsp), %r12
000000000103f26b	movq	0x288(%rsp), %r13
000000000103f273	movq	0xa8(%rsp), %r9
000000000103f27b	movq	0x280(%rsp), %r8
000000000103f283	jmp	0x103dda9
000000000103f288	movq	%r8, %r15
000000000103f28b	movq	%r14, %r8
000000000103f28e	movq	%r9, %r14
000000000103f291	movq	%r15, %r9
000000000103f294	jmp	0x103f1cb
000000000103f299	movq	%r8, %r15
000000000103f29c	movq	%r14, %r8
000000000103f29f	movq	%r9, %r14
000000000103f2a2	movq	%r15, %r9
000000000103f2a5	jmp	0x103f1cb
000000000103f2aa	movq	%rax, 0xb0(%rsp)
000000000103f2b2	movq	%r8, %rax
000000000103f2b5	movq	%r14, %r8
000000000103f2b8	movq	%r9, %r14
000000000103f2bb	movq	%rax, %r9
000000000103f2be	jmp	0x103f1cb
000000000103f2c3	movq	%rax, 0xb8(%rsp)
000000000103f2cb	movq	%r8, %rax
000000000103f2ce	movq	%r14, %r8
000000000103f2d1	movq	%r9, %r14
000000000103f2d4	movq	%rax, %r9
000000000103f2d7	jmp	0x103f1cb
000000000103f2dc	movq	0x340(%rsp), %rax
000000000103f2e4	movzbl	0x41(%rsp), %edi
000000000103f2e9	movq	%rdx, %r13
000000000103f2ec	jmp	0x103df01
000000000103f2f1	movq	0x340(%rsp), %rax
000000000103f2f9	movzbl	0x41(%rsp), %edi
000000000103f2fe	movq	%rdx, %r13
000000000103f301	jmp	0x103df01
000000000103f306	movq	0x340(%rsp), %rax
000000000103f30e	testq	%rax, %rax
000000000103f311	je	0x103f3c0
000000000103f317	movq	0x2b0(%rsp), %rax
000000000103f31f	movq	%rax, 0x100(%rsp)
000000000103f327	callq	runtime.printlock
000000000103f32c	leaq	0x2cbd5(%rip), %rax
000000000103f333	movq	%rax, (%rsp)
000000000103f337	movq	$0x14, 0x8(%rsp)
000000000103f340	callq	runtime.printstring
000000000103f345	movq	0x100(%rsp), %rax
000000000103f34d	movq	%rax, (%rsp)
000000000103f351	callq	runtime.printhex
000000000103f356	callq	runtime.printnl
000000000103f35b	callq	runtime.printunlock
000000000103f360	movq	0x320(%rsp), %rax
000000000103f368	movq	0x8(%rax), %rcx
000000000103f36c	movq	(%rax), %rax
000000000103f36f	movq	%rax, (%rsp)
000000000103f373	movq	%rcx, 0x8(%rsp)
000000000103f378	leaq	0x2a0(%rsp), %rax
000000000103f380	movq	%rax, 0x10(%rsp)
000000000103f385	movq	$0x0, 0x18(%rsp)
000000000103f38e	callq	runtime.tracebackHexdump
000000000103f393	movq	0x340(%rsp), %rax
000000000103f39b	testq	%rax, %rax
000000000103f39e	jne	0x103f616
000000000103f3a4	movq	$0x0, 0x358(%rsp)
000000000103f3b0	movq	0x2f8(%rsp), %rbp
000000000103f3b8	addq	$0x300, %rsp
000000000103f3bf	retq
000000000103f3c0	movzbl	0x41(%rsp), %ecx
000000000103f3c5	testb	%cl, %cl
000000000103f3c7	jne	0x103f317
000000000103f3cd	testq	%rax, %rax
000000000103f3d0	jmp	0x103f39e
000000000103f3d2	testq	%rcx, %rcx
000000000103f3d5	sete	%dil
000000000103f3d9	jmp	0x103db12
000000000103f3de	movq	0x40(%rbx), %r9
000000000103f3e2	movq	0x38(%rbx), %r8
000000000103f3e6	jmp	0x103dab3
000000000103f3eb	movq	%r8, %r9
000000000103f3ee	movq	0x310(%rsp), %r8
000000000103f3f6	jmp	0x103dab3
000000000103f3fb	movq	%r8, %r9
000000000103f3fe	movq	0x310(%rsp), %r8
000000000103f406	jmp	0x103dab3
000000000103f40b	movq	0x340(%rsp), %rcx
000000000103f413	jmp	0x103da34
000000000103f418	movq	%rax, 0x100(%rsp)
000000000103f420	movq	%rbx, 0xf8(%rsp)
000000000103f428	movq	%r13, 0x88(%rsp)
000000000103f430	movq	0x98(%rdx), %rax
000000000103f437	movq	%rax, 0x108(%rsp)
000000000103f43f	callq	runtime.printlock
000000000103f444	leaq	0x2bc2f(%rip), %rax
000000000103f44b	movq	%rax, (%rsp)
000000000103f44f	movq	$0xa, 0x8(%rsp)
000000000103f458	callq	runtime.printstring
000000000103f45d	movq	0x108(%rsp), %rax
000000000103f465	movq	%rax, (%rsp)
000000000103f469	callq	runtime.printint
000000000103f46e	leaq	0x2bce6(%rip), %rax
000000000103f475	movq	%rax, (%rsp)
000000000103f479	movq	$0xb, 0x8(%rsp)
000000000103f482	callq	runtime.printstring
000000000103f487	movq	0x100(%rsp), %rax
000000000103f48f	movq	%rax, (%rsp)
000000000103f493	callq	runtime.printhex
000000000103f498	leaq	0x2b733(%rip), %rax
000000000103f49f	movq	%rax, (%rsp)
000000000103f4a3	movq	$0x5, 0x8(%rsp)
000000000103f4ac	callq	runtime.printstring
000000000103f4b1	movq	0xf8(%rsp), %rax
000000000103f4b9	movq	%rax, (%rsp)
000000000103f4bd	callq	runtime.printhex
000000000103f4c2	callq	runtime.printnl
000000000103f4c7	callq	runtime.printunlock
000000000103f4cc	movq	0x320(%rsp), %rax
000000000103f4d4	movq	(%rax), %rcx
000000000103f4d7	movq	%rcx, 0x100(%rsp)
000000000103f4df	movq	0x8(%rax), %rax
000000000103f4e3	movq	%rax, 0xf8(%rsp)
000000000103f4eb	callq	runtime.printlock
000000000103f4f0	leaq	0x2b962(%rip), %rax
000000000103f4f7	movq	%rax, (%rsp)
000000000103f4fb	movq	$0x8, 0x8(%rsp)
000000000103f504	callq	runtime.printstring
000000000103f509	movq	0x100(%rsp), %rax
000000000103f511	movq	%rax, (%rsp)
000000000103f515	callq	runtime.printhex
000000000103f51a	leaq	0x2b564(%rip), %rax
000000000103f521	movq	%rax, (%rsp)
000000000103f525	movq	$0x1, 0x8(%rsp)
000000000103f52e	callq	runtime.printstring
000000000103f533	movq	0xf8(%rsp), %rax
000000000103f53b	movq	%rax, (%rsp)
000000000103f53f	callq	runtime.printhex
000000000103f544	leaq	0x2b5ec(%rip), %rax
000000000103f54b	movq	%rax, (%rsp)
000000000103f54f	movq	$0x4, 0x8(%rsp)
000000000103f558	callq	runtime.printstring
000000000103f55d	movq	0x88(%rsp), %rax
000000000103f565	movq	%rax, (%rsp)
000000000103f569	callq	runtime.printint
000000000103f56e	leaq	0x2b649(%rip), %rax
000000000103f575	movq	%rax, (%rsp)
000000000103f579	movq	$0x5, 0x8(%rsp)
000000000103f582	callq	runtime.printstring
000000000103f587	movq	0x338(%rsp), %rax
000000000103f58f	movq	%rax, (%rsp)
000000000103f593	callq	runtime.printint
000000000103f598	callq	runtime.printnl
000000000103f59d	callq	runtime.printunlock
000000000103f5a2	leaq	0x2e5fc(%rip), %rax
000000000103f5a9	movq	%rax, (%rsp)
000000000103f5ad	movq	$0x23, 0x8(%rsp)
000000000103f5b6	callq	runtime.throw
000000000103f5bb	ud2
000000000103f5bd	leaq	0x2db63(%rip), %rax
000000000103f5c4	movq	%rax, (%rsp)
000000000103f5c8	movq	$0x1d, 0x8(%rsp)
000000000103f5d1	callq	runtime.throw
000000000103f5d6	ud2
000000000103f5d8	callq	runtime.panicindex
000000000103f5dd	ud2
000000000103f5df	callq	runtime.panicindex
000000000103f5e4	ud2
000000000103f5e6	callq	runtime.panicindex
000000000103f5eb	ud2
000000000103f5ed	callq	runtime.panicindex
000000000103f5f2	ud2
000000000103f5f4	callq	runtime.panicindex
000000000103f5f9	ud2
000000000103f5fb	leaq	0x2c44f(%rip), %rax
000000000103f602	movq	%rax, (%rsp)
000000000103f606	movq	$0x11, 0x8(%rsp)
000000000103f60f	callq	runtime.throw
000000000103f614	ud2
000000000103f616	leaq	0x2ba8f(%rip), %rax
000000000103f61d	movq	%rax, (%rsp)
000000000103f621	movq	$0xa, 0x8(%rsp)
000000000103f62a	callq	runtime.throw
000000000103f62f	ud2
000000000103f631	leaq	0x2f50d(%rip), %rax
000000000103f638	movq	%rax, (%rsp)
000000000103f63c	movq	$0x39, 0x8(%rsp)
000000000103f645	callq	runtime.throw
000000000103f64a	ud2
000000000103f64c	leaq	0x2f44c(%rip), %rax
000000000103f653	movq	%rax, (%rsp)
000000000103f657	movq	$0x37, 0x8(%rsp)
000000000103f660	callq	runtime.throw
000000000103f665	ud2
000000000103f667	callq	runtime.morestack_noctxt
000000000103f66c	jmp	runtime.gentraceback
000000000103f671	int3
000000000103f672	int3
000000000103f673	int3
000000000103f674	int3
000000000103f675	int3
000000000103f676	int3
000000000103f677	int3
000000000103f678	int3
000000000103f679	int3
000000000103f67a	int3
000000000103f67b	int3
000000000103f67c	int3
000000000103f67d	int3
000000000103f67e	int3
000000000103f67f	int3
runtime.getArgInfo:
000000000103f680	movq	%gs:0x30, %rcx
000000000103f689	cmpq	0x10(%rcx), %rsp
000000000103f68d	jbe	0x103f85a
000000000103f693	subq	$0x40, %rsp
000000000103f697	movq	%rbp, 0x38(%rsp)
000000000103f69c	leaq	0x38(%rsp), %rbp
000000000103f6a1	movq	0x50(%rsp), %rax
000000000103f6a6	movl	0xc(%rax), %ecx
000000000103f6a9	movslq	%ecx, %rdx
000000000103f6ac	movzbl	0x60(%rsp), %ebx
000000000103f6b1	testb	%bl, %bl
000000000103f6b3	je	0x103f7d1
000000000103f6b9	cmpl	$0x80000000, %ecx
000000000103f6bf	je	0x103f6d7
000000000103f6c1	xorl	%eax, %eax
000000000103f6c3	movq	%rdx, 0x70(%rsp)
000000000103f6c8	movq	%rax, 0x78(%rsp)
000000000103f6cd	movq	0x38(%rsp), %rbp
000000000103f6d2	addq	$0x40, %rsp
000000000103f6d6	retq
000000000103f6d7	movq	%rdx, 0x28(%rsp)
000000000103f6dc	movq	%rax, (%rsp)
000000000103f6e0	movq	0x58(%rsp), %rcx
000000000103f6e5	movq	%rcx, 0x8(%rsp)
000000000103f6ea	callq	runtime.funcname
000000000103f6ef	movq	0x18(%rsp), %rax
000000000103f6f4	movq	0x10(%rsp), %rcx
000000000103f6f9	cmpq	$0x14, %rax
000000000103f6fd	je	0x103f790
000000000103f703	cmpq	$0x17, %rax
000000000103f707	je	0x103f715
000000000103f709	xorl	%eax, %eax
000000000103f70b	movq	0x28(%rsp), %rcx
000000000103f710	movq	%rcx, %rdx
000000000103f713	jmp	0x103f6c3
000000000103f715	movq	%rcx, (%rsp)
000000000103f719	leaq	0x2cd5e(%rip), %rcx
000000000103f720	movq	%rcx, 0x8(%rsp)
000000000103f725	movq	%rax, 0x10(%rsp)
000000000103f72a	callq	runtime.memequal
000000000103f72f	leaq	0x18(%rsp), %rax
000000000103f734	cmpb	$0x0, (%rax)
000000000103f737	je	0x103f709
000000000103f739	movq	0x68(%rsp), %rax
000000000103f73e	testq	%rax, %rax
000000000103f741	je	0x103f778
000000000103f743	xorl	%ecx, %ecx
000000000103f745	movq	0x50(%rsp), %rdx
000000000103f74a	movq	(%rdx), %rbx
000000000103f74d	cmpq	%rbx, (%rax)
000000000103f750	jne	0x103f7d8
000000000103f756	movq	0x8(%rax), %rdx
000000000103f75a	movl	(%rdx), %ebx
000000000103f75c	shll	$0x3, %ebx
000000000103f75f	movslq	%ebx, %rbx
000000000103f762	testb	%cl, %cl
000000000103f764	je	0x103f76e
000000000103f766	movq	%rdx, %rax
000000000103f769	movq	%rbx, %rcx
000000000103f76c	jmp	0x103f710
000000000103f76e	movq	0x10(%rax), %rbx
000000000103f772	andq	$-0x8, %rbx
000000000103f776	jmp	0x103f766
000000000103f778	movq	0x48(%rsp), %rdx
000000000103f77d	movq	0x28(%rdx), %rdx
000000000103f781	movq	%rdx, %rbx
000000000103f784	addq	$0x18, %rbx
000000000103f788	movq	(%rdx), %rax
000000000103f78b	movzbl	(%rbx), %ecx
000000000103f78e	jmp	0x103f745
000000000103f790	movq	%rax, 0x20(%rsp)
000000000103f795	movq	%rcx, 0x30(%rsp)
000000000103f79a	movq	%rcx, (%rsp)
000000000103f79e	leaq	0x2c73b(%rip), %rdx
000000000103f7a5	movq	%rdx, 0x8(%rsp)
000000000103f7aa	movq	%rax, 0x10(%rsp)
000000000103f7af	callq	runtime.memequal
000000000103f7b4	leaq	0x18(%rsp), %rax
000000000103f7b9	cmpb	$0x0, (%rax)
000000000103f7bc	jne	0x103f739
000000000103f7c2	movq	0x20(%rsp), %rax
000000000103f7c7	movq	0x30(%rsp), %rcx
000000000103f7cc	jmp	0x103f703
000000000103f7d1	xorl	%eax, %eax
000000000103f7d3	jmp	0x103f6c3
000000000103f7d8	movq	%rdx, (%rsp)
000000000103f7dc	movq	0x58(%rsp), %rax
000000000103f7e1	movq	%rax, 0x8(%rsp)
000000000103f7e6	callq	runtime.funcname
000000000103f7eb	movq	0x10(%rsp), %rax
000000000103f7f0	movq	%rax, 0x30(%rsp)
000000000103f7f5	movq	0x18(%rsp), %rcx
000000000103f7fa	movq	%rcx, 0x20(%rsp)
000000000103f7ff	callq	runtime.printlock
000000000103f804	leaq	0x2c833(%rip), %rax
000000000103f80b	movq	%rax, (%rsp)
000000000103f80f	movq	$0x15, 0x8(%rsp)
000000000103f818	callq	runtime.printstring
000000000103f81d	movq	0x30(%rsp), %rax
000000000103f822	movq	%rax, (%rsp)
000000000103f826	movq	0x20(%rsp), %rax
000000000103f82b	movq	%rax, 0x8(%rsp)
000000000103f830	callq	runtime.printstring
000000000103f835	callq	runtime.printnl
000000000103f83a	callq	runtime.printunlock
000000000103f83f	leaq	0x2c024(%rip), %rax
000000000103f846	movq	%rax, (%rsp)
000000000103f84a	movq	$0x10, 0x8(%rsp)
000000000103f853	callq	runtime.throw
000000000103f858	ud2
000000000103f85a	callq	runtime.morestack_noctxt
000000000103f85f	jmp	runtime.getArgInfo
000000000103f864	int3
000000000103f865	int3
000000000103f866	int3
000000000103f867	int3
000000000103f868	int3
000000000103f869	int3
000000000103f86a	int3
000000000103f86b	int3
000000000103f86c	int3
000000000103f86d	int3
000000000103f86e	int3
000000000103f86f	int3
runtime.tracebackCgoContext:
000000000103f870	movq	%gs:0x30, %rcx
000000000103f879	leaq	-0x200(%rsp), %rax
000000000103f881	cmpq	0x10(%rcx), %rax
000000000103f885	jbe	0x103fac3
000000000103f88b	subq	$0x280, %rsp
000000000103f892	movq	%rbp, 0x278(%rsp)
000000000103f89a	leaq	0x278(%rsp), %rbp
000000000103f8a2	leaq	0x40(%rsp), %rdi
000000000103f8a7	xorps	%xmm0, %xmm0
000000000103f8aa	movq	%rbp, -0x10(%rsp)
000000000103f8af	leaq	-0x10(%rsp), %rbp
000000000103f8b4	callq	0x10491f4
000000000103f8b9	movq	(%rbp), %rbp
000000000103f8bd	movq	0x298(%rsp), %rax
000000000103f8c5	movq	%rax, (%rsp)
000000000103f8c9	leaq	0x40(%rsp), %rax
000000000103f8ce	movq	%rax, 0x8(%rsp)
000000000103f8d3	movq	$0x20, 0x10(%rsp)
000000000103f8dc	movq	$0x20, 0x18(%rsp)
000000000103f8e5	callq	runtime.cgoContextPCs
000000000103f8ea	movq	$0x0, 0x240(%rsp)
000000000103f8f6	xorps	%xmm1, %xmm1
000000000103f8f9	movups	%xmm1, 0x248(%rsp)
000000000103f901	movups	%xmm1, 0x258(%rsp)
000000000103f909	movups	%xmm1, 0x268(%rsp)
000000000103f911	leaq	0x140(%rsp), %rdi
000000000103f919	leaq	0x40(%rsp), %rsi
000000000103f91e	movq	%rbp, -0x10(%rsp)
000000000103f923	leaq	-0x10(%rsp), %rbp
000000000103f928	callq	0x10494f0
000000000103f92d	movq	(%rbp), %rbp
000000000103f931	movzbl	0x290(%rsp), %eax
000000000103f939	movq	0x288(%rsp), %rcx
000000000103f941	movq	0x2a8(%rsp), %rdx
000000000103f949	movq	0x2a0(%rsp), %rbx
000000000103f951	xorl	%esi, %esi
000000000103f953	xorl	%edi, %edi
000000000103f955	jmp	0x103f95d
000000000103f957	incq	%rsi
000000000103f95a	incq	%rbx
000000000103f95d	movq	%rbx, 0x2a0(%rsp)
000000000103f965	cmpq	$0x20, %rsi
000000000103f969	jge	0x103fa78
000000000103f96f	movq	0x140(%rsp,%rsi,8), %r8
000000000103f977	testq	%r8, %r8
000000000103f97a	je	0x103fa78
000000000103f980	cmpq	%rdx, %rbx
000000000103f983	jge	0x103fa78
000000000103f989	testq	%rcx, %rcx
000000000103f98c	je	0x103f99f
000000000103f98e	cmpq	$0x100000, %rbx
000000000103f995	jae	0x103fabc
000000000103f99b	movq	%r8, (%rcx,%rbx,8)
000000000103f99f	testb	%al, %al
000000000103f9a1	je	0x103f957
000000000103f9a3	movq	%rsi, 0x38(%rsp)
000000000103f9a8	movb	%dil, 0x27(%rsp)
000000000103f9ad	movq	runtime.cgoSymbolizer(%rip), %r9
000000000103f9b4	movq	%r9, 0x30(%rsp)
000000000103f9b9	cmpq	$0x0, %r9
000000000103f9bd	je	0x103fa2a
000000000103f9bf	movq	%r8, (%rsp)
000000000103f9c3	subq	%rbx, %rdx
000000000103f9c6	movq	%rdx, 0x8(%rsp)
000000000103f9cb	leaq	0x240(%rsp), %rcx
000000000103f9d3	movq	%rcx, 0x10(%rsp)
000000000103f9d8	callq	runtime.printOneCgoTraceback
000000000103f9dd	movq	0x18(%rsp), %rax
000000000103f9e2	movq	0x2a0(%rsp), %rcx
000000000103f9ea	leaq	-0x1(%rax,%rcx), %rax
000000000103f9ef	movq	0x30(%rsp), %rcx
000000000103f9f4	cmpq	$0x0, %rcx
000000000103f9f8	setne	%dil
000000000103f9fc	movzbl	0x27(%rsp), %r8d
000000000103fa02	orl	%r8d, %edi
000000000103fa05	movq	0x288(%rsp), %rcx
000000000103fa0d	movq	0x2a8(%rsp), %rdx
000000000103fa15	movq	0x38(%rsp), %rsi
000000000103fa1a	movq	%rax, %rbx
000000000103fa1d	movzbl	0x290(%rsp), %eax
000000000103fa25	jmp	0x103f957
000000000103fa2a	movq	%r8, 0x28(%rsp)
000000000103fa2f	callq	runtime.printlock
000000000103fa34	leaq	0x2c772(%rip), %rax
000000000103fa3b	movq	%rax, (%rsp)
000000000103fa3f	movq	$0x16, 0x8(%rsp)
000000000103fa48	callq	runtime.printstring
000000000103fa4d	movq	0x28(%rsp), %rax
000000000103fa52	movq	%rax, (%rsp)
000000000103fa56	callq	runtime.printhex
000000000103fa5b	callq	runtime.printnl
000000000103fa60	callq	runtime.printunlock
000000000103fa65	movq	0x30(%rsp), %rax
000000000103fa6a	cmpq	$0x0, %rax
000000000103fa6e	movq	0x2a0(%rsp), %rax
000000000103fa76	jmp	0x103f9f8
000000000103fa78	testb	%dil, %dil
000000000103fa7b	jne	0x103fa95
000000000103fa7d	movq	%rbx, 0x2b0(%rsp)
000000000103fa85	movq	0x278(%rsp), %rbp
000000000103fa8d	addq	$0x280, %rsp
000000000103fa94	retq
000000000103fa95	movq	$0x0, 0x240(%rsp)
000000000103faa1	leaq	0x240(%rsp), %rax
000000000103faa9	movq	%rax, (%rsp)
000000000103faad	callq	runtime.callCgoSymbolizer
000000000103fab2	movq	0x2a0(%rsp), %rbx
000000000103faba	jmp	0x103fa7d
000000000103fabc	callq	runtime.panicindex
000000000103fac1	ud2
000000000103fac3	callq	runtime.morestack_noctxt
000000000103fac8	jmp	runtime.tracebackCgoContext
000000000103facd	int3
000000000103face	int3
000000000103facf	int3
runtime.printcreatedby:
000000000103fad0	movq	%gs:0x30, %rcx
000000000103fad9	cmpq	0x10(%rcx), %rsp
000000000103fadd	jbe	0x103fb8a
000000000103fae3	subq	$0x48, %rsp
000000000103fae7	movq	%rbp, 0x40(%rsp)
000000000103faec	leaq	0x40(%rsp), %rbp
000000000103faf1	movq	0x50(%rsp), %rax
000000000103faf6	movq	0x118(%rax), %rcx
000000000103fafd	movq	%rcx, 0x28(%rsp)
000000000103fb02	movq	%rcx, (%rsp)
000000000103fb06	callq	runtime.findfunc
000000000103fb0b	movq	0x10(%rsp), %rax
000000000103fb10	movq	0x8(%rsp), %rcx
000000000103fb15	testq	%rcx, %rcx
000000000103fb18	jne	0x103fb24
000000000103fb1a	movq	0x40(%rsp), %rbp
000000000103fb1f	addq	$0x48, %rsp
000000000103fb23	retq
000000000103fb24	movq	%rax, 0x38(%rsp)
000000000103fb29	movq	%rcx, 0x30(%rsp)
000000000103fb2e	movq	%rcx, (%rsp)
000000000103fb32	movq	%rax, 0x8(%rsp)
000000000103fb37	movq	0x50(%rsp), %rdx
000000000103fb3c	movq	%rdx, 0x10(%rsp)
000000000103fb41	movw	$0x0, 0x18(%rsp)
000000000103fb48	callq	runtime.showframe
000000000103fb4d	leaq	0x20(%rsp), %rax
000000000103fb52	cmpb	$0x0, (%rax)
000000000103fb55	je	0x103fb1a
000000000103fb57	movq	0x50(%rsp), %rax
000000000103fb5c	cmpq	$0x1, 0x98(%rax)
000000000103fb64	je	0x103fb1a
000000000103fb66	movq	0x30(%rsp), %rax
000000000103fb6b	movq	%rax, (%rsp)
000000000103fb6f	movq	0x38(%rsp), %rax
000000000103fb74	movq	%rax, 0x8(%rsp)
000000000103fb79	movq	0x28(%rsp), %rax
000000000103fb7e	movq	%rax, 0x10(%rsp)
000000000103fb83	callq	runtime.printcreatedby1
000000000103fb88	jmp	0x103fb1a
000000000103fb8a	callq	runtime.morestack_noctxt
000000000103fb8f	jmp	runtime.printcreatedby
000000000103fb94	int3
000000000103fb95	int3
000000000103fb96	int3
000000000103fb97	int3
000000000103fb98	int3
000000000103fb99	int3
000000000103fb9a	int3
000000000103fb9b	int3
000000000103fb9c	int3
000000000103fb9d	int3
000000000103fb9e	int3
000000000103fb9f	int3
runtime.printcreatedby1:
000000000103fba0	movq	%gs:0x30, %rcx
000000000103fba9	cmpq	0x10(%rcx), %rsp
000000000103fbad	jbe	0x103fd51
000000000103fbb3	subq	$0x68, %rsp
000000000103fbb7	movq	%rbp, 0x60(%rsp)
000000000103fbbc	leaq	0x60(%rsp), %rbp
000000000103fbc1	movq	0x70(%rsp), %rax
000000000103fbc6	movq	%rax, (%rsp)
000000000103fbca	movq	0x78(%rsp), %rcx
000000000103fbcf	movq	%rcx, 0x8(%rsp)
000000000103fbd4	callq	runtime.funcname
000000000103fbd9	movq	0x18(%rsp), %rax
000000000103fbde	movq	%rax, 0x48(%rsp)
000000000103fbe3	movq	0x10(%rsp), %rcx
000000000103fbe8	movq	%rcx, 0x58(%rsp)
000000000103fbed	callq	runtime.printlock
000000000103fbf2	leaq	0x2b5a4(%rip), %rax
000000000103fbf9	movq	%rax, (%rsp)
000000000103fbfd	movq	$0xb, 0x8(%rsp)
000000000103fc06	callq	runtime.printstring
000000000103fc0b	movq	0x58(%rsp), %rax
000000000103fc10	movq	%rax, (%rsp)
000000000103fc14	movq	0x48(%rsp), %rax
000000000103fc19	movq	%rax, 0x8(%rsp)
000000000103fc1e	callq	runtime.printstring
000000000103fc23	callq	runtime.printnl
000000000103fc28	callq	runtime.printunlock
000000000103fc2d	movq	0x70(%rsp), %rax
000000000103fc32	movq	(%rax), %rcx
000000000103fc35	movq	%rax, (%rsp)
000000000103fc39	movq	0x78(%rsp), %rdx
000000000103fc3e	movq	%rdx, 0x8(%rsp)
000000000103fc43	movq	0x80(%rsp), %rdx
000000000103fc4b	leaq	-0x1(%rdx), %rbx
000000000103fc4f	cmpq	%rcx, %rdx
000000000103fc52	cmovaq	%rbx, %rdx
000000000103fc56	movq	%rdx, 0x10(%rsp)
000000000103fc5b	callq	runtime.funcline
000000000103fc60	movq	0x20(%rsp), %rax
000000000103fc65	movq	%rax, 0x30(%rsp)
000000000103fc6a	movq	0x18(%rsp), %rcx
000000000103fc6f	movq	%rcx, 0x50(%rsp)
000000000103fc74	movslq	0x28(%rsp), %rdx
000000000103fc79	movq	%rdx, 0x40(%rsp)
000000000103fc7e	callq	runtime.printlock
000000000103fc83	leaq	0x2ae04(%rip), %rax
000000000103fc8a	movq	%rax, (%rsp)
000000000103fc8e	movq	$0x1, 0x8(%rsp)
000000000103fc97	callq	runtime.printstring
000000000103fc9c	movq	0x50(%rsp), %rax
000000000103fca1	movq	%rax, (%rsp)
000000000103fca5	movq	0x30(%rsp), %rax
000000000103fcaa	movq	%rax, 0x8(%rsp)
000000000103fcaf	callq	runtime.printstring
000000000103fcb4	leaq	0x2adcd(%rip), %rax
000000000103fcbb	movq	%rax, (%rsp)
000000000103fcbf	movq	$0x1, 0x8(%rsp)
000000000103fcc8	callq	runtime.printstring
000000000103fccd	movq	0x40(%rsp), %rax
000000000103fcd2	movq	%rax, (%rsp)
000000000103fcd6	callq	runtime.printint
000000000103fcdb	callq	runtime.printunlock
000000000103fce0	movq	0x70(%rsp), %rax
000000000103fce5	movq	(%rax), %rax
000000000103fce8	movq	0x80(%rsp), %rcx
000000000103fcf0	cmpq	%rax, %rcx
000000000103fcf3	ja	0x103fd0e
000000000103fcf5	callq	runtime.printlock
000000000103fcfa	callq	runtime.printnl
000000000103fcff	callq	runtime.printunlock
000000000103fd04	movq	0x60(%rsp), %rbp
000000000103fd09	addq	$0x68, %rsp
000000000103fd0d	retq
000000000103fd0e	movq	%rax, 0x38(%rsp)
000000000103fd13	callq	runtime.printlock
000000000103fd18	leaq	0x2ad71(%rip), %rax
000000000103fd1f	movq	%rax, (%rsp)
000000000103fd23	movq	$0x2, 0x8(%rsp)
000000000103fd2c	callq	runtime.printstring
000000000103fd31	movq	0x80(%rsp), %rax
000000000103fd39	movq	0x38(%rsp), %rcx
000000000103fd3e	subq	%rcx, %rax
000000000103fd41	movq	%rax, (%rsp)
000000000103fd45	callq	runtime.printhex
000000000103fd4a	callq	runtime.printunlock
000000000103fd4f	jmp	0x103fcf5
000000000103fd51	callq	runtime.morestack_noctxt
000000000103fd56	jmp	runtime.printcreatedby1
000000000103fd5b	int3
000000000103fd5c	int3
000000000103fd5d	int3
000000000103fd5e	int3
000000000103fd5f	int3
runtime.traceback:
000000000103fd60	movq	%gs:0x30, %rcx
000000000103fd69	cmpq	0x10(%rcx), %rsp
000000000103fd6d	jbe	0x103fdbc
000000000103fd6f	subq	$0x30, %rsp
000000000103fd73	movq	%rbp, 0x28(%rsp)
000000000103fd78	leaq	0x28(%rsp), %rbp
000000000103fd7d	movq	0x38(%rsp), %rax
000000000103fd82	movq	%rax, (%rsp)
000000000103fd86	movq	0x40(%rsp), %rax
000000000103fd8b	movq	%rax, 0x8(%rsp)
000000000103fd90	movq	0x48(%rsp), %rax
000000000103fd95	movq	%rax, 0x10(%rsp)
000000000103fd9a	movq	0x50(%rsp), %rax
000000000103fd9f	movq	%rax, 0x18(%rsp)
000000000103fda4	movq	$0x0, 0x20(%rsp)
000000000103fdad	callq	runtime.traceback1
000000000103fdb2	movq	0x28(%rsp), %rbp
000000000103fdb7	addq	$0x30, %rsp
000000000103fdbb	retq
000000000103fdbc	callq	runtime.morestack_noctxt
000000000103fdc1	jmp	runtime.traceback
000000000103fdc3	int3
000000000103fdc4	int3
000000000103fdc5	int3
000000000103fdc6	int3
000000000103fdc7	int3
000000000103fdc8	int3
000000000103fdc9	int3
000000000103fdca	int3
000000000103fdcb	int3
000000000103fdcc	int3
000000000103fdcd	int3
000000000103fdce	int3
000000000103fdcf	int3
runtime.tracebacktrap:
000000000103fdd0	movq	%gs:0x30, %rcx
000000000103fdd9	cmpq	0x10(%rcx), %rsp
000000000103fddd	jbe	0x103fe7d
000000000103fde3	subq	$0x30, %rsp
000000000103fde7	movq	%rbp, 0x28(%rsp)
000000000103fdec	leaq	0x28(%rsp), %rbp
000000000103fdf1	movq	0x50(%rsp), %rax
000000000103fdf6	movq	0x30(%rax), %rcx
000000000103fdfa	movq	0x2e8(%rcx), %rdx
000000000103fe01	testq	%rdx, %rdx
000000000103fe04	je	0x103fe43
000000000103fe06	movq	0x2e0(%rcx), %rax
000000000103fe0d	movq	0x2f0(%rcx), %rcx
000000000103fe14	movq	%rdx, 0x8(%rsp)
000000000103fe19	movq	%rax, (%rsp)
000000000103fe1d	movq	$0x0, 0x10(%rsp)
000000000103fe26	movq	%rcx, 0x18(%rsp)
000000000103fe2b	movq	$0x0, 0x20(%rsp)
000000000103fe34	callq	runtime.traceback1
000000000103fe39	movq	0x28(%rsp), %rbp
000000000103fe3e	addq	$0x30, %rsp
000000000103fe42	retq
000000000103fe43	movq	0x38(%rsp), %rcx
000000000103fe48	movq	%rcx, (%rsp)
000000000103fe4c	movq	0x40(%rsp), %rcx
000000000103fe51	movq	%rcx, 0x8(%rsp)
000000000103fe56	movq	0x48(%rsp), %rcx
000000000103fe5b	movq	%rcx, 0x10(%rsp)
000000000103fe60	movq	%rax, 0x18(%rsp)
000000000103fe65	movq	$0x2, 0x20(%rsp)
000000000103fe6e	callq	runtime.traceback1
000000000103fe73	movq	0x28(%rsp), %rbp
000000000103fe78	addq	$0x30, %rsp
000000000103fe7c	retq
000000000103fe7d	callq	runtime.morestack_noctxt
000000000103fe82	jmp	runtime.tracebacktrap
000000000103fe87	int3
000000000103fe88	int3
000000000103fe89	int3
000000000103fe8a	int3
000000000103fe8b	int3
000000000103fe8c	int3
000000000103fe8d	int3
000000000103fe8e	int3
000000000103fe8f	int3
runtime.traceback1:
000000000103fe90	movq	%gs:0x30, %rcx
000000000103fe99	leaq	-0x148(%rsp), %rax
000000000103fea1	cmpq	0x10(%rcx), %rax
000000000103fea5	jbe	0x10401da
000000000103feab	subq	$0x1c8, %rsp
000000000103feb2	movq	%rbp, 0x1c0(%rsp)
000000000103feba	leaq	0x1c0(%rsp), %rbp
000000000103fec2	leaq	runtime.iscgo(%rip), %rax
000000000103fec9	cmpb	$0x0, (%rax)
000000000103fecc	je	0x10401cd
000000000103fed2	movq	0x1e8(%rsp), %rax
000000000103feda	movq	0x30(%rax), %rcx
000000000103fede	testq	%rcx, %rcx
000000000103fee1	je	0x103ff09
000000000103fee3	cmpl	$0x0, 0x130(%rcx)
000000000103feea	jle	0x103ff09
000000000103feec	cmpq	$0x0, 0x70(%rax)
000000000103fef1	je	0x103ff09
000000000103fef3	movq	0x138(%rcx), %rdx
000000000103fefa	testq	%rdx, %rdx
000000000103fefd	je	0x103ff09
000000000103feff	cmpq	$0x0, (%rdx)
000000000103ff03	jne	0x1040164
000000000103ff09	movl	0x90(%rax), %ecx
000000000103ff0f	btrl	$0xc, %ecx
000000000103ff13	cmpl	$0x3, %ecx
000000000103ff16	jne	0x1040147
000000000103ff1c	movq	0x78(%rax), %rcx
000000000103ff20	movq	0x70(%rax), %rdx
000000000103ff24	movq	0x1f0(%rsp), %rbx
000000000103ff2c	andq	$-0x3, %rbx
000000000103ff30	movq	%rcx, 0x1d0(%rsp)
000000000103ff38	movq	%rdx, 0x1d8(%rsp)
000000000103ff40	movq	%rbx, 0x1f0(%rsp)
000000000103ff48	movq	%rcx, (%rsp)
000000000103ff4c	movq	%rdx, 0x8(%rsp)
000000000103ff51	movq	0x1e0(%rsp), %rsi
000000000103ff59	movq	%rsi, 0x10(%rsp)
000000000103ff5e	movq	%rax, 0x18(%rsp)
000000000103ff63	xorps	%xmm0, %xmm0
000000000103ff66	movups	%xmm0, 0x20(%rsp)
000000000103ff6b	movq	$0x64, 0x30(%rsp)
000000000103ff74	movups	%xmm0, 0x38(%rsp)
000000000103ff79	movq	%rbx, 0x48(%rsp)
000000000103ff7e	callq	runtime.gentraceback
000000000103ff83	movq	0x50(%rsp), %rax
000000000103ff88	testq	%rax, %rax
000000000103ff8b	jne	0x103ff9f
000000000103ff8d	movq	0x1f0(%rsp), %rcx
000000000103ff95	btl	$0x0, %ecx
000000000103ff99	jae	0x10400e6
000000000103ff9f	cmpq	$0x64, %rax
000000000103ffa3	je	0x10400be
000000000103ffa9	movq	0x1e8(%rsp), %rax
000000000103ffb1	movq	%rax, (%rsp)
000000000103ffb5	callq	runtime.printcreatedby
000000000103ffba	movq	0x1e8(%rsp), %rax
000000000103ffc2	movq	0x120(%rax), %rax
000000000103ffc9	testq	%rax, %rax
000000000103ffcc	je	0x10400ae
000000000103ffd2	movq	0x8(%rax), %rcx
000000000103ffd6	movq	(%rax), %rax
000000000103ffd9	testq	%rcx, %rcx
000000000103ffdc	jle	0x104009e
000000000103ffe2	movq	%rcx, 0x60(%rsp)
000000000103ffe7	xorl	%edx, %edx
000000000103ffe9	jmp	0x103fffd
000000000103ffeb	movq	0x168(%rsp), %rbx
000000000103fff3	addq	$0x28, %rbx
000000000103fff7	movq	%rax, %rdx
000000000103fffa	movq	%rbx, %rax
000000000103fffd	movq	%rax, 0x168(%rsp)
0000000001040005	movq	%rdx, 0x58(%rsp)
000000000104000a	movq	(%rax), %rcx
000000000104000d	movq	%rcx, 0x198(%rsp)
0000000001040015	movups	0x8(%rax), %xmm0
0000000001040019	movups	%xmm0, 0x1a0(%rsp)
0000000001040021	movups	0x18(%rax), %xmm0
0000000001040025	movups	%xmm0, 0x1b0(%rsp)
000000000104002d	movq	0x198(%rsp), %rcx
0000000001040035	movq	%rcx, 0x170(%rsp)
000000000104003d	movups	0x1a0(%rsp), %xmm0
0000000001040045	movups	%xmm0, 0x178(%rsp)
000000000104004d	movups	0x1b0(%rsp), %xmm0
0000000001040055	movups	%xmm0, 0x188(%rsp)
000000000104005d	movq	0x170(%rsp), %rcx
0000000001040065	movq	%rcx, (%rsp)
0000000001040069	movups	0x178(%rsp), %xmm0
0000000001040071	movups	%xmm0, 0x8(%rsp)
0000000001040076	movups	0x188(%rsp), %xmm0
000000000104007e	movups	%xmm0, 0x18(%rsp)
0000000001040083	callq	runtime.printAncestorTraceback
0000000001040088	movq	0x58(%rsp), %rax
000000000104008d	incq	%rax
0000000001040090	movq	0x60(%rsp), %rcx
0000000001040095	cmpq	%rcx, %rax
0000000001040098	jl	0x103ffeb
000000000104009e	movq	0x1c0(%rsp), %rbp
00000000010400a6	addq	$0x1c8, %rsp
00000000010400ad	retq
00000000010400ae	movq	0x1c0(%rsp), %rbp
00000000010400b6	addq	$0x1c8, %rsp
00000000010400bd	retq
00000000010400be	callq	runtime.printlock
00000000010400c3	leaq	0x2d2d3(%rip), %rax
00000000010400ca	movq	%rax, (%rsp)
00000000010400ce	movq	$0x1f, 0x8(%rsp)
00000000010400d7	callq	runtime.printstring
00000000010400dc	callq	runtime.printunlock
00000000010400e1	jmp	0x103ffa9
00000000010400e6	movq	0x1d0(%rsp), %rax
00000000010400ee	movq	%rax, (%rsp)
00000000010400f2	movq	0x1d8(%rsp), %rax
00000000010400fa	movq	%rax, 0x8(%rsp)
00000000010400ff	movq	0x1e0(%rsp), %rax
0000000001040107	movq	%rax, 0x10(%rsp)
000000000104010c	movq	0x1e8(%rsp), %rax
0000000001040114	movq	%rax, 0x18(%rsp)
0000000001040119	xorps	%xmm0, %xmm0
000000000104011c	movups	%xmm0, 0x20(%rsp)
0000000001040121	movq	$0x64, 0x30(%rsp)
000000000104012a	movups	%xmm0, 0x38(%rsp)
000000000104012f	orq	$0x1, %rcx
0000000001040133	movq	%rcx, 0x48(%rsp)
0000000001040138	callq	runtime.gentraceback
000000000104013d	movq	0x50(%rsp), %rax
0000000001040142	jmp	0x103ff9f
0000000001040147	movq	0x1d0(%rsp), %rcx
000000000104014f	movq	0x1d8(%rsp), %rdx
0000000001040157	movq	0x1f0(%rsp), %rbx
000000000104015f	jmp	0x103ff30
0000000001040164	movl	$0x1, %edx
0000000001040169	xchgl	%edx, 0x134(%rcx)
000000000104016f	movq	0x30(%rax), %rcx
0000000001040173	movq	0x138(%rcx), %rsi
000000000104017a	testb	%al, (%rcx)
000000000104017c	leaq	0x68(%rsp), %rdi
0000000001040181	movq	%rbp, -0x10(%rsp)
0000000001040186	leaq	-0x10(%rsp), %rbp
000000000104018b	callq	0x10494f0
0000000001040190	movq	(%rbp), %rbp
0000000001040194	movq	0x30(%rax), %rcx
0000000001040198	movq	0x138(%rcx), %rcx
000000000104019f	movq	$0x0, (%rcx)
00000000010401a6	movq	0x30(%rax), %rcx
00000000010401aa	xorl	%edx, %edx
00000000010401ac	xchgl	%edx, 0x134(%rcx)
00000000010401b2	leaq	0x68(%rsp), %rcx
00000000010401b7	movq	%rcx, (%rsp)
00000000010401bb	callq	runtime.printCgoTraceback
00000000010401c0	movq	0x1e8(%rsp), %rax
00000000010401c8	jmp	0x103ff09
00000000010401cd	movq	0x1e8(%rsp), %rax
00000000010401d5	jmp	0x103ff09
00000000010401da	callq	runtime.morestack_noctxt
00000000010401df	jmp	runtime.traceback1
00000000010401e4	int3
00000000010401e5	int3
00000000010401e6	int3
00000000010401e7	int3
00000000010401e8	int3
00000000010401e9	int3
00000000010401ea	int3
00000000010401eb	int3
00000000010401ec	int3
00000000010401ed	int3
00000000010401ee	int3
00000000010401ef	int3
runtime.printAncestorTraceback:
00000000010401f0	movq	%gs:0x30, %rcx
00000000010401f9	cmpq	0x10(%rcx), %rsp
00000000010401fd	jbe	0x1040401
0000000001040203	subq	$0x68, %rsp
0000000001040207	movq	%rbp, 0x60(%rsp)
000000000104020c	leaq	0x60(%rsp), %rbp
0000000001040211	movq	0x88(%rsp), %rax
0000000001040219	movq	%rax, 0x40(%rsp)
000000000104021e	callq	runtime.printlock
0000000001040223	leaq	0x2cb35(%rip), %rax
000000000104022a	movq	%rax, (%rsp)
000000000104022e	movq	$0x1c, 0x8(%rsp)
0000000001040237	callq	runtime.printstring
000000000104023c	movq	0x40(%rsp), %rax
0000000001040241	movq	%rax, (%rsp)
0000000001040245	callq	runtime.printint
000000000104024a	leaq	0x2a881(%rip), %rax
0000000001040251	movq	%rax, (%rsp)
0000000001040255	movq	$0x3, 0x8(%rsp)
000000000104025e	callq	runtime.printstring
0000000001040263	callq	runtime.printunlock
0000000001040268	movq	0x78(%rsp), %rax
000000000104026d	movq	%rax, 0x38(%rsp)
0000000001040272	movq	0x70(%rsp), %rcx
0000000001040277	movq	%rcx, 0x58(%rsp)
000000000104027c	xorl	%edx, %edx
000000000104027e	xorl	%ebx, %ebx
0000000001040280	jmp	0x1040297
0000000001040282	movq	0x30(%rsp), %rsi
0000000001040287	leaq	0x1(%rsi), %rdx
000000000104028b	movq	0x38(%rsp), %rax
0000000001040290	movl	%ecx, %ebx
0000000001040292	movq	0x58(%rsp), %rcx
0000000001040297	cmpq	%rax, %rdx
000000000104029a	jge	0x1040348
00000000010402a0	movq	%rdx, 0x30(%rsp)
00000000010402a5	movb	%bl, 0x27(%rsp)
00000000010402a9	movq	(%rcx,%rdx,8), %rax
00000000010402ad	movq	%rax, 0x28(%rsp)
00000000010402b2	movq	%rax, (%rsp)
00000000010402b6	callq	runtime.findfunc
00000000010402bb	movq	0x10(%rsp), %rax
00000000010402c0	movq	%rax, 0x50(%rsp)
00000000010402c5	movq	0x8(%rsp), %rcx
00000000010402ca	movq	%rcx, 0x48(%rsp)
00000000010402cf	movq	%rcx, (%rsp)
00000000010402d3	movq	%rax, 0x8(%rsp)
00000000010402d8	movq	0x30(%rsp), %rdx
00000000010402dd	testq	%rdx, %rdx
00000000010402e0	sete	0x10(%rsp)
00000000010402e5	movzbl	0x27(%rsp), %ebx
00000000010402ea	testb	%bl, %bl
00000000010402ec	je	0x1040344
00000000010402ee	testq	%rdx, %rdx
00000000010402f1	setne	%sil
00000000010402f5	movb	%sil, 0x11(%rsp)
00000000010402fa	callq	runtime.showfuncinfo
00000000010402ff	leaq	0x18(%rsp), %rax
0000000001040304	cmpb	$0x0, (%rax)
0000000001040307	jne	0x1040313
0000000001040309	movzbl	0x27(%rsp), %ecx
000000000104030e	jmp	0x1040282
0000000001040313	movq	0x48(%rsp), %rax
0000000001040318	movq	%rax, (%rsp)
000000000104031c	movq	0x50(%rsp), %rax
0000000001040321	movq	%rax, 0x8(%rsp)
0000000001040326	movq	0x28(%rsp), %rax
000000000104032b	movq	%rax, 0x10(%rsp)
0000000001040330	callq	runtime.printAncestorTracebackFuncInfo
0000000001040335	movzbl	0x18(%rsp), %ecx
000000000104033a	leaq	0x18(%rsp), %rax
000000000104033f	jmp	0x1040282
0000000001040344	xorl	%esi, %esi
0000000001040346	jmp	0x10402f5
0000000001040348	cmpq	$0x64, 0x78(%rsp)
000000000104034e	je	0x10403d9
0000000001040354	movq	0x90(%rsp), %rax
000000000104035c	movq	%rax, (%rsp)
0000000001040360	callq	runtime.findfunc
0000000001040365	movq	0x10(%rsp), %rax
000000000104036a	movq	0x8(%rsp), %rcx
000000000104036f	testq	%rcx, %rcx
0000000001040372	jne	0x104037e
0000000001040374	movq	0x60(%rsp), %rbp
0000000001040379	addq	$0x68, %rsp
000000000104037d	retq
000000000104037e	movq	%rax, 0x50(%rsp)
0000000001040383	movq	%rcx, 0x48(%rsp)
0000000001040388	movq	%rcx, (%rsp)
000000000104038c	movq	%rax, 0x8(%rsp)
0000000001040391	movw	$0x0, 0x10(%rsp)
0000000001040398	callq	runtime.showfuncinfo
000000000104039d	leaq	0x18(%rsp), %rax
00000000010403a2	cmpb	$0x0, (%rax)
00000000010403a5	je	0x1040374
00000000010403a7	cmpq	$0x1, 0x88(%rsp)
00000000010403b0	je	0x1040374
00000000010403b2	movq	0x48(%rsp), %rax
00000000010403b7	movq	%rax, (%rsp)
00000000010403bb	movq	0x50(%rsp), %rax
00000000010403c0	movq	%rax, 0x8(%rsp)
00000000010403c5	movq	0x90(%rsp), %rax
00000000010403cd	movq	%rax, 0x10(%rsp)
00000000010403d2	callq	runtime.printcreatedby1
00000000010403d7	jmp	0x1040374
00000000010403d9	callq	runtime.printlock
00000000010403de	leaq	0x2cfb8(%rip), %rax
00000000010403e5	movq	%rax, (%rsp)
00000000010403e9	movq	$0x1f, 0x8(%rsp)
00000000010403f2	callq	runtime.printstring
00000000010403f7	callq	runtime.printunlock
00000000010403fc	jmp	0x1040354
0000000001040401	callq	runtime.morestack_noctxt
0000000001040406	jmp	runtime.printAncestorTraceback
000000000104040b	int3
000000000104040c	int3
000000000104040d	int3
000000000104040e	int3
000000000104040f	int3
runtime.printAncestorTracebackFuncInfo:
0000000001040410	movq	%gs:0x30, %rcx
0000000001040419	leaq	-0x20(%rsp), %rax
000000000104041e	cmpq	0x10(%rcx), %rax
0000000001040422	jbe	0x104097a
0000000001040428	subq	$0xa0, %rsp
000000000104042f	movq	%rbp, 0x98(%rsp)
0000000001040437	leaq	0x98(%rsp), %rbp
000000000104043f	movq	0xa8(%rsp), %rax
0000000001040447	movq	(%rax), %rcx
000000000104044a	movq	%rax, (%rsp)
000000000104044e	movq	0xb0(%rsp), %rdx
0000000001040456	movq	%rdx, 0x8(%rsp)
000000000104045b	movq	0xb8(%rsp), %rbx
0000000001040463	leaq	-0x1(%rbx), %rsi
0000000001040467	cmpq	%rcx, %rbx
000000000104046a	cmovaq	%rsi, %rbx
000000000104046e	movq	%rbx, 0x38(%rsp)
0000000001040473	movq	%rbx, 0x10(%rsp)
0000000001040478	callq	runtime.funcline
000000000104047d	movl	0x28(%rsp), %eax
0000000001040481	movl	%eax, 0x30(%rsp)
0000000001040485	movq	0x18(%rsp), %rcx
000000000104048a	movq	%rcx, 0x80(%rsp)
0000000001040492	movq	0x20(%rsp), %rdx
0000000001040497	movq	%rdx, 0x50(%rsp)
000000000104049c	movq	0xa8(%rsp), %rbx
00000000010404a4	movq	%rbx, (%rsp)
00000000010404a8	movq	0xb0(%rsp), %rsi
00000000010404b0	movq	%rsi, 0x8(%rsp)
00000000010404b5	movl	$0x2, 0x10(%rsp)
00000000010404bd	callq	runtime.funcdata
00000000010404c2	movq	0x18(%rsp), %rax
00000000010404c7	testq	%rax, %rax
00000000010404ca	je	0x104094d
00000000010404d0	movq	%rax, 0x90(%rsp)
00000000010404d8	movq	0xa8(%rsp), %rax
00000000010404e0	movq	%rax, (%rsp)
00000000010404e4	movq	0xb0(%rsp), %rcx
00000000010404ec	movq	%rcx, 0x8(%rsp)
00000000010404f1	movl	$0x1, 0x10(%rsp)
00000000010404f9	movq	0x38(%rsp), %rdx
00000000010404fe	movq	%rdx, 0x18(%rsp)
0000000001040503	movq	$0x0, 0x20(%rsp)
000000000104050c	callq	runtime.pcdatavalue
0000000001040511	movl	0x28(%rsp), %eax
0000000001040515	movq	0x90(%rsp), %rcx
000000000104051d	movq	0xb0(%rsp), %rdx
0000000001040525	movq	0xa8(%rsp), %rbx
000000000104052d	movl	0x30(%rsp), %esi
0000000001040531	movq	0x50(%rsp), %rdi
0000000001040536	movq	0x80(%rsp), %r8
000000000104053e	jmp	0x104068f
0000000001040543	movq	%r8, 0x88(%rsp)
000000000104054b	movq	%rdi, 0x68(%rsp)
0000000001040550	movl	%esi, 0x34(%rsp)
0000000001040554	shlq	$0x4, %rax
0000000001040558	movq	%rax, 0x60(%rsp)
000000000104055d	movl	0xc(%rcx,%rax), %esi
0000000001040561	movl	%esi, 0x10(%rsp)
0000000001040565	movq	%rbx, (%rsp)
0000000001040569	movq	%rdx, 0x8(%rsp)
000000000104056e	callq	runtime.funcnameFromNameoff
0000000001040573	movq	0x18(%rsp), %rax
0000000001040578	movq	%rax, 0x70(%rsp)
000000000104057d	movq	0x20(%rsp), %rcx
0000000001040582	movq	%rcx, 0x40(%rsp)
0000000001040587	callq	runtime.printlock
000000000104058c	movq	0x70(%rsp), %rax
0000000001040591	movq	%rax, (%rsp)
0000000001040595	movq	0x40(%rsp), %rax
000000000104059a	movq	%rax, 0x8(%rsp)
000000000104059f	callq	runtime.printstring
00000000010405a4	leaq	0x2a6ca(%rip), %rax
00000000010405ab	movq	%rax, (%rsp)
00000000010405af	movq	$0x6, 0x8(%rsp)
00000000010405b8	callq	runtime.printstring
00000000010405bd	callq	runtime.printunlock
00000000010405c2	callq	runtime.printlock
00000000010405c7	leaq	0x2a4c0(%rip), %rax
00000000010405ce	movq	%rax, (%rsp)
00000000010405d2	movq	$0x1, 0x8(%rsp)
00000000010405db	callq	runtime.printstring
00000000010405e0	movq	0x88(%rsp), %rax
00000000010405e8	movq	%rax, (%rsp)
00000000010405ec	movq	0x68(%rsp), %rax
00000000010405f1	movq	%rax, 0x8(%rsp)
00000000010405f6	callq	runtime.printstring
00000000010405fb	leaq	0x2a486(%rip), %rax
0000000001040602	movq	%rax, (%rsp)
0000000001040606	movq	$0x1, 0x8(%rsp)
000000000104060f	callq	runtime.printstring
0000000001040614	movl	0x34(%rsp), %eax
0000000001040618	movslq	%eax, %rax
000000000104061b	movq	%rax, (%rsp)
000000000104061f	callq	runtime.printint
0000000001040624	callq	runtime.printnl
0000000001040629	callq	runtime.printunlock
000000000104062e	movq	0x60(%rsp), %rax
0000000001040633	movq	0x90(%rsp), %rcx
000000000104063b	movl	0x4(%rcx,%rax), %edx
000000000104063f	movl	%edx, 0x10(%rsp)
0000000001040643	movq	0xa8(%rsp), %rdx
000000000104064b	movq	%rdx, (%rsp)
000000000104064f	movq	0xb0(%rsp), %rbx
0000000001040657	movq	%rbx, 0x8(%rsp)
000000000104065c	callq	runtime.funcfile
0000000001040661	movq	0x20(%rsp), %rdi
0000000001040666	movq	0x18(%rsp), %r8
000000000104066b	movq	0x60(%rsp), %rax
0000000001040670	movq	0x90(%rsp), %rcx
0000000001040678	movl	0x8(%rcx,%rax), %esi
000000000104067c	movl	(%rcx,%rax), %eax
000000000104067f	movq	0xb0(%rsp), %rdx
0000000001040687	movq	0xa8(%rsp), %rbx
000000000104068f	cmpl	$-0x1, %eax
0000000001040692	je	0x10406a8
0000000001040694	movslq	%eax, %rax
0000000001040697	cmpq	$0x100000, %rax
000000000104069d	jb	0x1040543
00000000010406a3	jmp	0x1040973
00000000010406a8	movq	%rdi, 0x50(%rsp)
00000000010406ad	movq	%r8, 0x80(%rsp)
00000000010406b5	movl	%esi, 0x30(%rsp)
00000000010406b9	movq	%rbx, (%rsp)
00000000010406bd	movq	%rdx, 0x8(%rsp)
00000000010406c2	callq	runtime.funcname
00000000010406c7	movq	0x10(%rsp), %rax
00000000010406cc	movq	0x18(%rsp), %rcx
00000000010406d1	cmpq	$0xf, %rcx
00000000010406d5	jne	0x104093f
00000000010406db	movq	(%rax), %rdx
00000000010406de	movabsq	$0x2e656d69746e7572, %rbx
00000000010406e8	cmpq	%rbx, %rdx
00000000010406eb	jne	0x1040931
00000000010406f1	cmpl	$0x61706f67, 0x8(%rax)
00000000010406f8	jne	0x1040923
00000000010406fe	cmpw	$0x696e, 0xc(%rax)
0000000001040704	jne	0x1040915
000000000104070a	cmpb	$0x63, 0xe(%rax)
000000000104070e	jne	0x1040907
0000000001040714	movl	$0x5, %eax
0000000001040719	leaq	0x2a4ee(%rip), %rcx
0000000001040720	movq	%rax, 0x48(%rsp)
0000000001040725	movq	%rcx, 0x78(%rsp)
000000000104072a	callq	runtime.printlock
000000000104072f	movq	0x78(%rsp), %rax
0000000001040734	movq	%rax, (%rsp)
0000000001040738	movq	0x48(%rsp), %rcx
000000000104073d	movq	%rcx, 0x8(%rsp)
0000000001040742	callq	runtime.printstring
0000000001040747	leaq	0x2a527(%rip), %rax
000000000104074e	movq	%rax, (%rsp)
0000000001040752	movq	$0x6, 0x8(%rsp)
000000000104075b	callq	runtime.printstring
0000000001040760	callq	runtime.printunlock
0000000001040765	callq	runtime.printlock
000000000104076a	leaq	0x2a31d(%rip), %rax
0000000001040771	movq	%rax, (%rsp)
0000000001040775	movq	$0x1, 0x8(%rsp)
000000000104077e	callq	runtime.printstring
0000000001040783	movq	0x80(%rsp), %rax
000000000104078b	movq	%rax, (%rsp)
000000000104078f	movq	0x50(%rsp), %rax
0000000001040794	movq	%rax, 0x8(%rsp)
0000000001040799	callq	runtime.printstring
000000000104079e	leaq	0x2a2e3(%rip), %rax
00000000010407a5	movq	%rax, (%rsp)
00000000010407a9	movq	$0x1, 0x8(%rsp)
00000000010407b2	callq	runtime.printstring
00000000010407b7	movl	0x30(%rsp), %eax
00000000010407bb	movslq	%eax, %rax
00000000010407be	movq	%rax, (%rsp)
00000000010407c2	callq	runtime.printint
00000000010407c7	callq	runtime.printunlock
00000000010407cc	movq	0xa8(%rsp), %rax
00000000010407d4	movq	(%rax), %rax
00000000010407d7	movq	0xb8(%rsp), %rcx
00000000010407df	cmpq	%rax, %rcx
00000000010407e2	ja	0x10408c1
00000000010407e8	callq	runtime.printlock
00000000010407ed	callq	runtime.printnl
00000000010407f2	callq	runtime.printunlock
00000000010407f7	movq	0x48(%rsp), %rax
00000000010407fc	cmpq	$0xf, %rax
0000000001040800	jne	0x10408b0
0000000001040806	movq	0x78(%rsp), %rcx
000000000104080b	movq	(%rcx), %rdx
000000000104080e	movabsq	$0x2e656d69746e7572, %rbx
0000000001040818	cmpq	%rdx, %rbx
000000000104081b	jne	0x1040853
000000000104081d	cmpl	$0x61706f67, 0x8(%rcx)
0000000001040824	jne	0x1040853
0000000001040826	cmpw	$0x696e, 0xc(%rcx)
000000000104082c	jne	0x1040853
000000000104082e	cmpb	$0x63, 0xe(%rcx)
0000000001040832	jne	0x1040853
0000000001040834	movl	$0x1, %eax
0000000001040839	xorl	$0x1, %eax
000000000104083c	movb	%al, 0xc0(%rsp)
0000000001040843	movq	0x98(%rsp), %rbp
000000000104084b	addq	$0xa0, %rsp
0000000001040852	retq
0000000001040853	cmpq	$0x10, %rax
0000000001040857	jne	0x10408ac
0000000001040859	movq	(%rcx), %rdx
000000000104085c	cmpq	%rdx, %rbx
000000000104085f	jne	0x10408a8
0000000001040861	movabsq	$0x63696e6170676973, %rdx
000000000104086b	cmpq	%rdx, 0x8(%rcx)
000000000104086f	sete	%dl
0000000001040872	testb	%dl, %dl
0000000001040874	je	0x104087d
0000000001040876	movl	$0x1, %eax
000000000104087b	jmp	0x1040839
000000000104087d	cmpq	$0x11, %rax
0000000001040881	je	0x1040887
0000000001040883	xorl	%eax, %eax
0000000001040885	jmp	0x1040839
0000000001040887	movq	%rcx, (%rsp)
000000000104088b	leaq	0x2b115(%rip), %rcx
0000000001040892	movq	%rcx, 0x8(%rsp)
0000000001040897	movq	%rax, 0x10(%rsp)
000000000104089c	callq	runtime.memequal
00000000010408a1	movzbl	0x18(%rsp), %eax
00000000010408a6	jmp	0x1040839
00000000010408a8	xorl	%edx, %edx
00000000010408aa	jmp	0x1040872
00000000010408ac	xorl	%edx, %edx
00000000010408ae	jmp	0x1040872
00000000010408b0	movq	0x78(%rsp), %rcx
00000000010408b5	movabsq	$0x2e656d69746e7572, %rbx
00000000010408bf	jmp	0x1040853
00000000010408c1	movq	%rax, 0x58(%rsp)
00000000010408c6	callq	runtime.printlock
00000000010408cb	leaq	0x2a1be(%rip), %rax
00000000010408d2	movq	%rax, (%rsp)
00000000010408d6	movq	$0x2, 0x8(%rsp)
00000000010408df	callq	runtime.printstring
00000000010408e4	movq	0xb8(%rsp), %rax
00000000010408ec	movq	0x58(%rsp), %rcx
00000000010408f1	subq	%rcx, %rax
00000000010408f4	movq	%rax, (%rsp)
00000000010408f8	callq	runtime.printhex
00000000010408fd	callq	runtime.printunlock
0000000001040902	jmp	0x10407e8
0000000001040907	movq	%rax, %rdx
000000000104090a	movq	%rcx, %rax
000000000104090d	movq	%rdx, %rcx
0000000001040910	jmp	0x1040720
0000000001040915	movq	%rax, %rdx
0000000001040918	movq	%rcx, %rax
000000000104091b	movq	%rdx, %rcx
000000000104091e	jmp	0x1040720
0000000001040923	movq	%rax, %rdx
0000000001040926	movq	%rcx, %rax
0000000001040929	movq	%rdx, %rcx
000000000104092c	jmp	0x1040720
0000000001040931	movq	%rax, %rdx
0000000001040934	movq	%rcx, %rax
0000000001040937	movq	%rdx, %rcx
000000000104093a	jmp	0x1040720
000000000104093f	movq	%rax, %rdx
0000000001040942	movq	%rcx, %rax
0000000001040945	movq	%rdx, %rcx
0000000001040948	jmp	0x1040720
000000000104094d	movq	0xb0(%rsp), %rdx
0000000001040955	movq	0xa8(%rsp), %rbx
000000000104095d	movq	0x50(%rsp), %rdi
0000000001040962	movq	0x80(%rsp), %r8
000000000104096a	movl	0x30(%rsp), %esi
000000000104096e	jmp	0x10406a8
0000000001040973	callq	runtime.panicindex
0000000001040978	ud2
000000000104097a	callq	runtime.morestack_noctxt
000000000104097f	jmp	runtime.printAncestorTracebackFuncInfo
0000000001040984	int3
0000000001040985	int3
0000000001040986	int3
0000000001040987	int3
0000000001040988	int3
0000000001040989	int3
000000000104098a	int3
000000000104098b	int3
000000000104098c	int3
000000000104098d	int3
000000000104098e	int3
000000000104098f	int3
runtime.callers:
0000000001040990	movq	%gs:0x30, %rcx
0000000001040999	cmpq	0x10(%rcx), %rsp
000000000104099d	jbe	0x1040a62
00000000010409a3	subq	$0x60, %rsp
00000000010409a7	movq	%rbp, 0x58(%rsp)
00000000010409ac	leaq	0x58(%rsp), %rbp
00000000010409b1	movq	%gs:0x30, %rax
00000000010409ba	movq	$0x0, 0x8(%rsp)
00000000010409c3	movq	$0x0, 0x10(%rsp)
00000000010409cc	xorps	%xmm0, %xmm0
00000000010409cf	movups	%xmm0, 0x18(%rsp)
00000000010409d4	movups	%xmm0, 0x28(%rsp)
00000000010409d9	movups	%xmm0, 0x38(%rsp)
00000000010409de	movups	%xmm0, 0x48(%rsp)
00000000010409e3	leaq	runtime.callers.func1(%rip), %rcx
00000000010409ea	movq	%rcx, 0x10(%rsp)
00000000010409ef	movq	0x60(%rsp), %rcx
00000000010409f4	movq	%rcx, 0x18(%rsp)
00000000010409f9	leaq	0x68(%rsp), %rcx
00000000010409fe	movq	%rcx, 0x20(%rsp)
0000000001040a03	movq	%rax, 0x28(%rsp)
0000000001040a08	movq	0x68(%rsp), %rax
0000000001040a0d	movq	%rax, 0x30(%rsp)
0000000001040a12	movq	0x70(%rsp), %rax
0000000001040a17	movq	%rax, 0x38(%rsp)
0000000001040a1c	movq	0x78(%rsp), %rax
0000000001040a21	movq	%rax, 0x40(%rsp)
0000000001040a26	movq	0x80(%rsp), %rax
0000000001040a2e	movq	%rax, 0x48(%rsp)
0000000001040a33	leaq	0x8(%rsp), %rax
0000000001040a38	movq	%rax, 0x50(%rsp)
0000000001040a3d	leaq	0x10(%rsp), %rax
0000000001040a42	movq	%rax, (%rsp)
0000000001040a46	callq	runtime.systemstack
0000000001040a4b	movq	0x8(%rsp), %rax
0000000001040a50	movq	%rax, 0x88(%rsp)
0000000001040a58	movq	0x58(%rsp), %rbp
0000000001040a5d	addq	$0x60, %rsp
0000000001040a61	retq
0000000001040a62	callq	runtime.morestack_noctxt
0000000001040a67	jmp	runtime.callers
0000000001040a6c	int3
0000000001040a6d	int3
0000000001040a6e	int3
0000000001040a6f	int3
runtime.gcallers:
0000000001040a70	movq	%gs:0x30, %rcx
0000000001040a79	cmpq	0x10(%rcx), %rsp
0000000001040a7d	jbe	0x1040b0f
0000000001040a83	subq	$0x60, %rsp
0000000001040a87	movq	%rbp, 0x58(%rsp)
0000000001040a8c	leaq	0x58(%rsp), %rbp
0000000001040a91	movq	0x80(%rsp), %rax
0000000001040a99	testq	%rax, %rax
0000000001040a9c	jbe	0x1040b08
0000000001040a9e	movq	0x78(%rsp), %rcx
0000000001040aa3	movq	%rcx, 0x28(%rsp)
0000000001040aa8	movq	$-0x1, (%rsp)
0000000001040ab0	movq	$-0x1, 0x8(%rsp)
0000000001040ab9	movq	$0x0, 0x10(%rsp)
0000000001040ac2	movq	0x68(%rsp), %rcx
0000000001040ac7	movq	%rcx, 0x18(%rsp)
0000000001040acc	movq	0x70(%rsp), %rcx
0000000001040ad1	movq	%rcx, 0x20(%rsp)
0000000001040ad6	movq	%rax, 0x30(%rsp)
0000000001040adb	xorps	%xmm0, %xmm0
0000000001040ade	movups	%xmm0, 0x38(%rsp)
0000000001040ae3	movq	$0x0, 0x48(%rsp)
0000000001040aec	callq	runtime.gentraceback
0000000001040af1	movq	0x50(%rsp), %rax
0000000001040af6	movq	%rax, 0x90(%rsp)
0000000001040afe	movq	0x58(%rsp), %rbp
0000000001040b03	addq	$0x60, %rsp
0000000001040b07	retq
0000000001040b08	callq	runtime.panicindex
0000000001040b0d	ud2
0000000001040b0f	callq	runtime.morestack_noctxt
0000000001040b14	jmp	runtime.gcallers
0000000001040b19	int3
0000000001040b1a	int3
0000000001040b1b	int3
0000000001040b1c	int3
0000000001040b1d	int3
0000000001040b1e	int3
0000000001040b1f	int3
runtime.showframe:
0000000001040b20	movq	%gs:0x30, %rcx
0000000001040b29	cmpq	0x10(%rcx), %rsp
0000000001040b2d	jbe	0x1040bc5
0000000001040b33	subq	$0x28, %rsp
0000000001040b37	movq	%rbp, 0x20(%rsp)
0000000001040b3c	leaq	0x20(%rsp), %rbp
0000000001040b41	movq	%gs:0x30, %rax
0000000001040b4a	movq	0x30(%rax), %rax
0000000001040b4e	cmpl	$0x0, 0xec(%rax)
0000000001040b55	jle	0x1040b88
0000000001040b57	movq	0x40(%rsp), %rcx
0000000001040b5c	testq	%rcx, %rcx
0000000001040b5f	je	0x1040b88
0000000001040b61	movq	0xc0(%rax), %rdx
0000000001040b68	cmpq	%rcx, %rdx
0000000001040b6b	jne	0x1040b7c
0000000001040b6d	movb	$0x1, 0x50(%rsp)
0000000001040b72	movq	0x20(%rsp), %rbp
0000000001040b77	addq	$0x28, %rsp
0000000001040b7b	retq
0000000001040b7c	movq	0xc8(%rax), %rax
0000000001040b83	cmpq	%rcx, %rax
0000000001040b86	je	0x1040b6d
0000000001040b88	movq	0x30(%rsp), %rax
0000000001040b8d	movq	%rax, (%rsp)
0000000001040b91	movq	0x38(%rsp), %rax
0000000001040b96	movq	%rax, 0x8(%rsp)
0000000001040b9b	movzbl	0x48(%rsp), %eax
0000000001040ba0	movb	%al, 0x10(%rsp)
0000000001040ba4	movzbl	0x49(%rsp), %eax
0000000001040ba9	movb	%al, 0x11(%rsp)
0000000001040bad	callq	runtime.showfuncinfo
0000000001040bb2	movzbl	0x18(%rsp), %eax
0000000001040bb7	movb	%al, 0x50(%rsp)
0000000001040bbb	movq	0x20(%rsp), %rbp
0000000001040bc0	addq	$0x28, %rsp
0000000001040bc4	retq
0000000001040bc5	callq	runtime.morestack_noctxt
0000000001040bca	jmp	runtime.showframe
0000000001040bcf	int3
runtime.showfuncinfo:
0000000001040bd0	movq	%gs:0x30, %rcx
0000000001040bd9	cmpq	0x10(%rcx), %rsp
0000000001040bdd	jbe	0x1040df1
0000000001040be3	subq	$0x48, %rsp
0000000001040be7	movq	%rbp, 0x40(%rsp)
0000000001040bec	leaq	0x40(%rsp), %rbp
0000000001040bf1	movq	%gs:0x30, %rax
0000000001040bfa	movl	runtime.traceback_cache(%rip), %ecx
0000000001040c00	movq	0x30(%rax), %rax
0000000001040c04	movzbl	0x125(%rax), %eax
0000000001040c0b	movzbl	%al, %edx
0000000001040c0e	shrl	$0x2, %ecx
0000000001040c11	testb	%al, %al
0000000001040c13	cmovnel	%edx, %ecx
0000000001040c16	cmpl	$0x1, %ecx
0000000001040c19	jg	0x1040de2
0000000001040c1f	movq	0x50(%rsp), %rax
0000000001040c24	testq	%rax, %rax
0000000001040c27	je	0x1040dd3
0000000001040c2d	movzbl	0x61(%rsp), %ecx
0000000001040c32	testb	%cl, %cl
0000000001040c34	jne	0x1040d6c
0000000001040c3a	movq	%rax, (%rsp)
0000000001040c3e	movq	0x58(%rsp), %rax
0000000001040c43	movq	%rax, 0x8(%rsp)
0000000001040c48	callq	runtime.funcname
0000000001040c4d	movq	0x18(%rsp), %rax
0000000001040c52	movq	0x10(%rsp), %rcx
0000000001040c57	cmpq	$0xf, %rax
0000000001040c5b	jne	0x1040c93
0000000001040c5d	movq	(%rcx), %rdx
0000000001040c60	movabsq	$0x2e656d69746e7572, %rbx
0000000001040c6a	cmpq	%rbx, %rdx
0000000001040c6d	jne	0x1040c93
0000000001040c6f	cmpl	$0x61706f67, 0x8(%rcx)
0000000001040c76	jne	0x1040c93
0000000001040c78	cmpw	$0x696e, 0xc(%rcx)
0000000001040c7e	jne	0x1040c93
0000000001040c80	cmpb	$0x63, 0xe(%rcx)
0000000001040c84	jne	0x1040c93
0000000001040c86	movzbl	0x60(%rsp), %edx
0000000001040c8b	testb	%dl, %dl
0000000001040c8d	je	0x1040d5d
0000000001040c93	movq	%rax, 0x30(%rsp)
0000000001040c98	movq	%rcx, 0x38(%rsp)
0000000001040c9d	movq	%rcx, (%rsp)
0000000001040ca1	movq	%rax, 0x8(%rsp)
0000000001040ca6	leaq	0x29dd9(%rip), %rdx
0000000001040cad	movq	%rdx, 0x10(%rsp)
0000000001040cb2	movq	$0x1, 0x18(%rsp)
0000000001040cbb	callq	runtime.contains
0000000001040cc0	leaq	0x20(%rsp), %rax
0000000001040cc5	cmpb	$0x0, (%rax)
0000000001040cc8	je	0x1040d59
0000000001040cce	movq	0x30(%rsp), %rax
0000000001040cd3	cmpq	$0x8, %rax
0000000001040cd7	jge	0x1040d2a
0000000001040cd9	xorl	%ecx, %ecx
0000000001040cdb	testb	%cl, %cl
0000000001040cdd	je	0x1040d23
0000000001040cdf	cmpq	$0x8, %rax
0000000001040ce3	jle	0x1040d1f
0000000001040ce5	movq	0x38(%rsp), %rax
0000000001040cea	movq	(%rax), %rcx
0000000001040ced	movabsq	$0x2e656d69746e7572, %rdx
0000000001040cf7	cmpq	%rdx, %rcx
0000000001040cfa	jne	0x1040d1b
0000000001040cfc	movzbl	0x8(%rax), %eax
0000000001040d00	cmpb	$0x41, %al
0000000001040d02	jb	0x1040d17
0000000001040d04	cmpb	$0x5a, %al
0000000001040d06	setbe	%al
0000000001040d09	movb	%al, 0x68(%rsp)
0000000001040d0d	movq	0x40(%rsp), %rbp
0000000001040d12	addq	$0x48, %rsp
0000000001040d16	retq
0000000001040d17	xorl	%eax, %eax
0000000001040d19	jmp	0x1040d09
0000000001040d1b	xorl	%eax, %eax
0000000001040d1d	jmp	0x1040d09
0000000001040d1f	xorl	%eax, %eax
0000000001040d21	jmp	0x1040d09
0000000001040d23	movl	$0x1, %eax
0000000001040d28	jmp	0x1040d09
0000000001040d2a	movq	0x38(%rsp), %rax
0000000001040d2f	movq	%rax, (%rsp)
0000000001040d33	leaq	0x2a147(%rip), %rcx
0000000001040d3a	movq	%rcx, 0x8(%rsp)
0000000001040d3f	movq	$0x8, 0x10(%rsp)
0000000001040d48	callq	runtime.memequal
0000000001040d4d	movzbl	0x18(%rsp), %ecx
0000000001040d52	movq	0x30(%rsp), %rax
0000000001040d57	jmp	0x1040cdb
0000000001040d59	xorl	%eax, %eax
0000000001040d5b	jmp	0x1040d09
0000000001040d5d	movb	$0x1, 0x68(%rsp)
0000000001040d62	movq	0x40(%rsp), %rbp
0000000001040d67	addq	$0x48, %rsp
0000000001040d6b	retq
0000000001040d6c	movq	(%rax), %rcx
0000000001040d6f	movq	%rcx, 0x10(%rsp)
0000000001040d74	movq	%rax, (%rsp)
0000000001040d78	movq	0x58(%rsp), %rcx
0000000001040d7d	movq	%rcx, 0x8(%rsp)
0000000001040d82	callq	runtime.funcline
0000000001040d87	movq	0x18(%rsp), %rax
0000000001040d8c	cmpq	$0xf, 0x20(%rsp)
0000000001040d92	jne	0x1040dba
0000000001040d94	movabsq	$0x6e65676f7475613c, %rcx
0000000001040d9e	cmpq	%rcx, (%rax)
0000000001040da1	jne	0x1040dba
0000000001040da3	cmpl	$0x74617265, 0x8(%rax)
0000000001040daa	jne	0x1040dba
0000000001040dac	cmpw	$0x6465, 0xc(%rax)
0000000001040db2	jne	0x1040dba
0000000001040db4	cmpb	$0x3e, 0xe(%rax)
0000000001040db8	je	0x1040dc4
0000000001040dba	movq	0x50(%rsp), %rax
0000000001040dbf	jmp	0x1040c3a
0000000001040dc4	movb	$0x0, 0x68(%rsp)
0000000001040dc9	movq	0x40(%rsp), %rbp
0000000001040dce	addq	$0x48, %rsp
0000000001040dd2	retq
0000000001040dd3	movb	$0x0, 0x68(%rsp)
0000000001040dd8	movq	0x40(%rsp), %rbp
0000000001040ddd	addq	$0x48, %rsp
0000000001040de1	retq
0000000001040de2	movb	$0x1, 0x68(%rsp)
0000000001040de7	movq	0x40(%rsp), %rbp
0000000001040dec	addq	$0x48, %rsp
0000000001040df0	retq
0000000001040df1	callq	runtime.morestack_noctxt
0000000001040df6	jmp	runtime.showfuncinfo
0000000001040dfb	int3
0000000001040dfc	int3
0000000001040dfd	int3
0000000001040dfe	int3
0000000001040dff	int3
runtime.goroutineheader:
0000000001040e00	movq	%gs:0x30, %rcx
0000000001040e09	cmpq	0x10(%rcx), %rsp
0000000001040e0d	jbe	0x10410bb
0000000001040e13	subq	$0x40, %rsp
0000000001040e17	movq	%rbp, 0x38(%rsp)
0000000001040e1c	leaq	0x38(%rsp), %rbp
0000000001040e21	movq	0x48(%rsp), %rax
0000000001040e26	movl	0x90(%rax), %ecx
0000000001040e2c	movl	%ecx, %edx
0000000001040e2e	btrl	$0xc, %ecx
0000000001040e32	cmpl	$0x9, %ecx
0000000001040e35	jae	0x104109c
0000000001040e3b	movl	%ecx, %ebx
0000000001040e3d	cmpq	$0x9, %rbx
0000000001040e41	jae	0x10410b4
0000000001040e47	shlq	$0x4, %rbx
0000000001040e4b	leaq	runtime.gStatusStrings(%rip), %rsi
0000000001040e52	movq	0x8(%rbx,%rsi), %rdi
0000000001040e57	movq	(%rbx,%rsi), %rbx
0000000001040e5b	cmpl	$0x4, %ecx
0000000001040e5e	jne	0x1041094
0000000001040e64	movzbl	0xb0(%rax), %esi
0000000001040e6b	testb	%sil, %sil
0000000001040e6e	je	0x1041089
0000000001040e74	cmpb	$0x18, %sil
0000000001040e78	jb	0x1041063
0000000001040e7e	cmpl	$0x4, %ecx
0000000001040e81	leaq	0x2ae79(%rip), %rbx
0000000001040e88	movl	$0x13, %esi
0000000001040e8d	movl	%edx, 0x14(%rsp)
0000000001040e91	movq	%rbx, 0x30(%rsp)
0000000001040e96	movq	%rsi, 0x20(%rsp)
0000000001040e9b	jne	0x1041053
0000000001040ea1	cmpq	$0x0, 0xa8(%rax)
0000000001040ea9	jne	0x1041015
0000000001040eaf	xorl	%ecx, %ecx
0000000001040eb1	movq	%rcx, 0x18(%rsp)
0000000001040eb6	movq	0x98(%rax), %rdx
0000000001040ebd	movq	%rdx, 0x28(%rsp)
0000000001040ec2	callq	runtime.printlock
0000000001040ec7	leaq	0x2a198(%rip), %rax
0000000001040ece	movq	%rax, (%rsp)
0000000001040ed2	movq	$0xa, 0x8(%rsp)
0000000001040edb	callq	runtime.printstring
0000000001040ee0	movq	0x28(%rsp), %rax
0000000001040ee5	movq	%rax, (%rsp)
0000000001040ee9	callq	runtime.printint
0000000001040eee	leaq	0x29ba1(%rip), %rax
0000000001040ef5	movq	%rax, (%rsp)
0000000001040ef9	movq	$0x2, 0x8(%rsp)
0000000001040f02	callq	runtime.printstring
0000000001040f07	movq	0x30(%rsp), %rax
0000000001040f0c	movq	%rax, (%rsp)
0000000001040f10	movq	0x20(%rsp), %rax
0000000001040f15	movq	%rax, 0x8(%rsp)
0000000001040f1a	callq	runtime.printstring
0000000001040f1f	callq	runtime.printunlock
0000000001040f24	movl	0x14(%rsp), %eax
0000000001040f28	btl	$0xc, %eax
0000000001040f2c	jb	0x1040fed
0000000001040f32	movq	0x18(%rsp), %rax
0000000001040f37	cmpq	$0x1, %rax
0000000001040f3b	jge	0x1040f9e
0000000001040f3d	movq	0x48(%rsp), %rax
0000000001040f42	cmpq	$0x0, 0xd8(%rax)
0000000001040f4a	jne	0x1040f79
0000000001040f4c	callq	runtime.printlock
0000000001040f51	leaq	0x29b7a(%rip), %rax
0000000001040f58	movq	%rax, (%rsp)
0000000001040f5c	movq	$0x3, 0x8(%rsp)
0000000001040f65	callq	runtime.printstring
0000000001040f6a	callq	runtime.printunlock
0000000001040f6f	movq	0x38(%rsp), %rbp
0000000001040f74	addq	$0x40, %rsp
0000000001040f78	retq
0000000001040f79	callq	runtime.printlock
0000000001040f7e	leaq	0x2ab12(%rip), %rax
0000000001040f85	movq	%rax, (%rsp)
0000000001040f89	movq	$0x12, 0x8(%rsp)
0000000001040f92	callq	runtime.printstring
0000000001040f97	callq	runtime.printunlock
0000000001040f9c	jmp	0x1040f4c
0000000001040f9e	callq	runtime.printlock
0000000001040fa3	leaq	0x29af2(%rip), %rax
0000000001040faa	movq	%rax, (%rsp)
0000000001040fae	movq	$0x2, 0x8(%rsp)
0000000001040fb7	callq	runtime.printstring
0000000001040fbc	movq	0x18(%rsp), %rax
0000000001040fc1	movq	%rax, (%rsp)
0000000001040fc5	callq	runtime.printint
0000000001040fca	leaq	0x29e30(%rip), %rax
0000000001040fd1	movq	%rax, (%rsp)
0000000001040fd5	movq	$0x8, 0x8(%rsp)
0000000001040fde	callq	runtime.printstring
0000000001040fe3	callq	runtime.printunlock
0000000001040fe8	jmp	0x1040f3d
0000000001040fed	callq	runtime.printlock
0000000001040ff2	leaq	0x29cb3(%rip), %rax
0000000001040ff9	movq	%rax, (%rsp)
0000000001040ffd	movq	$0x7, 0x8(%rsp)
0000000001041006	callq	runtime.printstring
000000000104100b	callq	runtime.printunlock
0000000001041010	jmp	0x1040f32
0000000001041015	callq	runtime.nanotime
000000000104101a	movq	(%rsp), %rax
000000000104101e	movq	0x48(%rsp), %rcx
0000000001041023	subq	0xa8(%rcx), %rax
000000000104102a	movq	%rax, %rdx
000000000104102d	movabsq	$0x494cff9a3f4f4740, %rax
0000000001041037	movq	%rdx, %rbx
000000000104103a	imulq	%rdx
000000000104103d	sarq	$0x22, %rdx
0000000001041041	sarq	$0x3f, %rbx
0000000001041045	subq	%rbx, %rdx
0000000001041048	movq	%rcx, %rax
000000000104104b	movq	%rdx, %rcx
000000000104104e	jmp	0x1040eb1
0000000001041053	cmpl	$0x3, %ecx
0000000001041056	je	0x1040ea1
000000000104105c	xorl	%ecx, %ecx
000000000104105e	jmp	0x1040eb1
0000000001041063	movzbl	%sil, %ebx
0000000001041067	cmpq	$0x18, %rbx
000000000104106b	jae	0x10410ad
000000000104106d	shlq	$0x4, %rbx
0000000001041071	leaq	runtime.waitReasonStrings(%rip), %rdi
0000000001041078	movq	0x8(%rdi,%rbx), %rsi
000000000104107d	movq	(%rdi,%rbx), %rbx
0000000001041081	cmpl	$0x4, %ecx
0000000001041084	jmp	0x1040e8d
0000000001041089	cmpl	$0x4, %ecx
000000000104108c	movq	%rdi, %rsi
000000000104108f	jmp	0x1040e8d
0000000001041094	movq	%rdi, %rsi
0000000001041097	jmp	0x1040e8d
000000000104109c	movl	$0x3, %edi
00000000010410a1	leaq	0x29a21(%rip), %rbx
00000000010410a8	jmp	0x1040e5b
00000000010410ad	callq	runtime.panicindex
00000000010410b2	ud2
00000000010410b4	callq	runtime.panicindex
00000000010410b9	ud2
00000000010410bb	callq	runtime.morestack_noctxt
00000000010410c0	jmp	runtime.goroutineheader
00000000010410c5	int3
00000000010410c6	int3
00000000010410c7	int3
00000000010410c8	int3
00000000010410c9	int3
00000000010410ca	int3
00000000010410cb	int3
00000000010410cc	int3
00000000010410cd	int3
00000000010410ce	int3
00000000010410cf	int3
runtime.tracebackothers:
00000000010410d0	movq	%gs:0x30, %rcx
00000000010410d9	cmpq	0x10(%rcx), %rsp
00000000010410dd	jbe	0x104131c
00000000010410e3	subq	$0x60, %rsp
00000000010410e7	movq	%rbp, 0x58(%rsp)
00000000010410ec	leaq	0x58(%rsp), %rbp
00000000010410f1	movq	%gs:0x30, %rax
00000000010410fa	movl	runtime.traceback_cache(%rip), %ecx
0000000001041100	movq	%gs:0x30, %rdx
0000000001041109	movq	%rdx, 0x48(%rsp)
000000000104110e	movq	0x30(%rdx), %rbx
0000000001041112	movq	0x30(%rax), %rax
0000000001041116	movzbl	0x125(%rax), %eax
000000000104111d	movzbl	%al, %esi
0000000001041120	shrl	$0x2, %ecx
0000000001041123	testb	%al, %al
0000000001041125	cmovnel	%esi, %ecx
0000000001041128	movl	%ecx, 0x24(%rsp)
000000000104112c	movq	0xc0(%rbx), %rax
0000000001041133	testq	%rax, %rax
0000000001041136	je	0x1041312
000000000104113c	movq	0x68(%rsp), %rbx
0000000001041141	cmpq	%rax, %rbx
0000000001041144	jne	0x10412c2
000000000104114a	leaq	runtime.allglock(%rip), %rax
0000000001041151	movq	%rax, (%rsp)
0000000001041155	callq	runtime.lock
000000000104115a	movq	0x776d7(%rip), %rax
0000000001041161	movq	%rax, 0x30(%rsp)
0000000001041166	movq	runtime.allgs(%rip), %rcx
000000000104116d	movq	%rcx, 0x50(%rsp)
0000000001041172	movq	0x68(%rsp), %rdx
0000000001041177	movq	0x48(%rsp), %rbx
000000000104117c	xorl	%esi, %esi
000000000104117e	jmp	0x1041183
0000000001041180	incq	%rsi
0000000001041183	cmpq	%rax, %rsi
0000000001041186	jge	0x10412a8
000000000104118c	movq	(%rcx,%rsi,8), %rdi
0000000001041190	cmpq	%rdi, %rdx
0000000001041193	je	0x1041180
0000000001041195	movq	0x30(%rbx), %r8
0000000001041199	movq	0xc0(%r8), %r8
00000000010411a0	cmpq	%r8, %rdi
00000000010411a3	je	0x1041180
00000000010411a5	movl	0x90(%rdi), %r8d
00000000010411ac	cmpl	$0x6, %r8d
00000000010411b0	je	0x1041180
00000000010411b2	movq	%rsi, 0x28(%rsp)
00000000010411b7	movq	%rdi, 0x38(%rsp)
00000000010411bc	movq	%rdi, (%rsp)
00000000010411c0	callq	runtime.isSystemGoroutine
00000000010411c5	leaq	0x8(%rsp), %rax
00000000010411ca	cmpb	$0x0, (%rax)
00000000010411cd	je	0x10411f3
00000000010411cf	movl	0x24(%rsp), %ecx
00000000010411d3	cmpl	$0x2, %ecx
00000000010411d6	jge	0x10411f3
00000000010411d8	movq	0x30(%rsp), %rax
00000000010411dd	movq	0x50(%rsp), %rcx
00000000010411e2	movq	0x68(%rsp), %rdx
00000000010411e7	movq	0x48(%rsp), %rbx
00000000010411ec	movq	0x28(%rsp), %rsi
00000000010411f1	jmp	0x1041180
00000000010411f3	callq	runtime.printlock
00000000010411f8	callq	runtime.printnl
00000000010411fd	callq	runtime.printunlock
0000000001041202	movq	0x38(%rsp), %rax
0000000001041207	movq	%rax, (%rsp)
000000000104120b	callq	runtime.goroutineheader
0000000001041210	movq	0x48(%rsp), %rax
0000000001041215	movq	0x30(%rax), %rcx
0000000001041219	movq	0x38(%rsp), %rdx
000000000104121e	cmpq	%rcx, 0x30(%rdx)
0000000001041222	je	0x1041233
0000000001041224	movl	0x90(%rdx), %ecx
000000000104122a	btrl	$0xc, %ecx
000000000104122e	cmpl	$0x2, %ecx
0000000001041231	je	0x1041275
0000000001041233	movq	$-0x1, (%rsp)
000000000104123b	movq	$-0x1, 0x8(%rsp)
0000000001041244	movq	$0x0, 0x10(%rsp)
000000000104124d	movq	%rdx, 0x18(%rsp)
0000000001041252	callq	runtime.traceback
0000000001041257	movq	0x30(%rsp), %rax
000000000104125c	movq	0x50(%rsp), %rcx
0000000001041261	movq	0x68(%rsp), %rdx
0000000001041266	movq	0x48(%rsp), %rbx
000000000104126b	movq	0x28(%rsp), %rsi
0000000001041270	jmp	0x1041180
0000000001041275	callq	runtime.printlock
000000000104127a	leaq	0x2d745(%rip), %rax
0000000001041281	movq	%rax, (%rsp)
0000000001041285	movq	$0x36, 0x8(%rsp)
000000000104128e	callq	runtime.printstring
0000000001041293	callq	runtime.printunlock
0000000001041298	movq	0x38(%rsp), %rax
000000000104129d	movq	%rax, (%rsp)
00000000010412a1	callq	runtime.printcreatedby
00000000010412a6	jmp	0x1041257
00000000010412a8	leaq	runtime.allglock(%rip), %rax
00000000010412af	movq	%rax, (%rsp)
00000000010412b3	callq	runtime.unlock
00000000010412b8	movq	0x58(%rsp), %rbp
00000000010412bd	addq	$0x60, %rsp
00000000010412c1	retq
00000000010412c2	movq	%rax, 0x40(%rsp)
00000000010412c7	callq	runtime.printlock
00000000010412cc	callq	runtime.printnl
00000000010412d1	callq	runtime.printunlock
00000000010412d6	movq	0x40(%rsp), %rax
00000000010412db	movq	%rax, (%rsp)
00000000010412df	callq	runtime.goroutineheader
00000000010412e4	movq	$-0x1, (%rsp)
00000000010412ec	movq	$-0x1, 0x8(%rsp)
00000000010412f5	movq	$0x0, 0x10(%rsp)
00000000010412fe	movq	0x40(%rsp), %rax
0000000001041303	movq	%rax, 0x18(%rsp)
0000000001041308	callq	runtime.traceback
000000000104130d	jmp	0x104114a
0000000001041312	movq	0x68(%rsp), %rbx
0000000001041317	jmp	0x104114a
000000000104131c	callq	runtime.morestack_noctxt
0000000001041321	jmp	runtime.tracebackothers
0000000001041326	int3
0000000001041327	int3
0000000001041328	int3
0000000001041329	int3
000000000104132a	int3
000000000104132b	int3
000000000104132c	int3
000000000104132d	int3
000000000104132e	int3
000000000104132f	int3
runtime.tracebackHexdump:
0000000001041330	movq	%gs:0x30, %rcx
0000000001041339	cmpq	0x10(%rcx), %rsp
000000000104133d	jbe	0x1041510
0000000001041343	subq	$0x58, %rsp
0000000001041347	movq	%rbp, 0x50(%rsp)
000000000104134c	leaq	0x50(%rsp), %rbp
0000000001041351	movq	0x70(%rsp), %rax
0000000001041356	movq	0x28(%rax), %rcx
000000000104135a	movq	0x30(%rax), %rdx
000000000104135e	testq	%rdx, %rdx
0000000001041361	je	0x1041505
0000000001041367	cmpq	%rcx, %rdx
000000000104136a	jae	0x1041502
0000000001041370	testq	%rdx, %rdx
0000000001041373	movq	%rdx, %rbx
0000000001041376	movq	%rcx, 0x20(%rsp)
000000000104137b	movq	%rbx, 0x30(%rsp)
0000000001041380	movq	%rdx, 0x18(%rsp)
0000000001041385	je	0x10414fa
000000000104138b	cmpq	%rcx, %rbx
000000000104138e	jbe	0x10414fa
0000000001041394	movq	%rbx, 0x28(%rsp)
0000000001041399	callq	runtime.printlock
000000000104139e	leaq	0x2a68a(%rip), %rax
00000000010413a5	movq	%rax, (%rsp)
00000000010413a9	movq	$0x11, 0x8(%rsp)
00000000010413b2	callq	runtime.printstring
00000000010413b7	movq	0x20(%rsp), %rax
00000000010413bc	movq	%rax, (%rsp)
00000000010413c0	callq	runtime.printhex
00000000010413c5	leaq	0x2981a(%rip), %rax
00000000010413cc	movq	%rax, (%rsp)
00000000010413d0	movq	$0x5, 0x8(%rsp)
00000000010413d9	callq	runtime.printstring
00000000010413de	movq	0x30(%rsp), %rax
00000000010413e3	movq	%rax, (%rsp)
00000000010413e7	callq	runtime.printhex
00000000010413ec	leaq	0x29ba2(%rip), %rax
00000000010413f3	movq	%rax, (%rsp)
00000000010413f7	movq	$0x9, 0x8(%rsp)
0000000001041400	callq	runtime.printstring
0000000001041405	movq	0x60(%rsp), %rax
000000000104140a	movq	%rax, (%rsp)
000000000104140e	callq	runtime.printhex
0000000001041413	leaq	0x2966a(%rip), %rax
000000000104141a	movq	%rax, (%rsp)
000000000104141e	movq	$0x1, 0x8(%rsp)
0000000001041427	callq	runtime.printstring
000000000104142c	movq	0x68(%rsp), %rax
0000000001041431	movq	%rax, (%rsp)
0000000001041435	callq	runtime.printhex
000000000104143a	leaq	0x29659(%rip), %rax
0000000001041441	movq	%rax, (%rsp)
0000000001041445	movq	$0x2, 0x8(%rsp)
000000000104144e	callq	runtime.printstring
0000000001041453	callq	runtime.printunlock
0000000001041458	xorps	%xmm0, %xmm0
000000000104145b	movups	%xmm0, 0x38(%rsp)
0000000001041460	movq	$0x0, 0x48(%rsp)
0000000001041469	leaq	runtime.tracebackHexdump.func1(%rip), %rax
0000000001041470	movq	%rax, 0x38(%rsp)
0000000001041475	movq	0x70(%rsp), %rax
000000000104147a	movq	%rax, 0x40(%rsp)
000000000104147f	movq	0x78(%rsp), %rax
0000000001041484	movq	%rax, 0x48(%rsp)
0000000001041489	movq	0x18(%rsp), %rax
000000000104148e	addq	$-0x100, %rax
0000000001041494	movq	0x20(%rsp), %rcx
0000000001041499	leaq	-0x800(%rcx), %rdx
00000000010414a0	cmpq	%rdx, %rax
00000000010414a3	cmovbq	%rdx, %rax
00000000010414a7	movq	0x60(%rsp), %rdx
00000000010414ac	cmpq	%rdx, %rax
00000000010414af	cmovbq	%rdx, %rax
00000000010414b3	movq	%rax, (%rsp)
00000000010414b7	movq	0x28(%rsp), %rax
00000000010414bc	addq	$0x100, %rax
00000000010414c2	addq	$0x800, %rcx
00000000010414c9	cmpq	%rcx, %rax
00000000010414cc	cmovaq	%rcx, %rax
00000000010414d0	movq	0x68(%rsp), %rcx
00000000010414d5	cmpq	%rcx, %rax
00000000010414d8	cmovaq	%rcx, %rax
00000000010414dc	movq	%rax, 0x8(%rsp)
00000000010414e1	leaq	0x38(%rsp), %rax
00000000010414e6	movq	%rax, 0x10(%rsp)
00000000010414eb	callq	runtime.hexdumpWords
00000000010414f0	movq	0x50(%rsp), %rbp
00000000010414f5	addq	$0x58, %rsp
00000000010414f9	retq
00000000010414fa	movq	%rcx, %rbx
00000000010414fd	jmp	0x1041394
0000000001041502	testq	%rdx, %rdx
0000000001041505	movq	%rdx, %rbx
0000000001041508	movq	%rcx, %rdx
000000000104150b	jmp	0x1041376
0000000001041510	callq	runtime.morestack_noctxt
0000000001041515	jmp	runtime.tracebackHexdump
000000000104151a	int3
000000000104151b	int3
000000000104151c	int3
000000000104151d	int3
000000000104151e	int3
000000000104151f	int3
runtime.isSystemGoroutine:
0000000001041520	movq	%gs:0x30, %rcx
0000000001041529	cmpq	0x10(%rcx), %rsp
000000000104152d	jbe	0x10415fc
0000000001041533	subq	$0x28, %rsp
0000000001041537	movq	%rbp, 0x20(%rsp)
000000000104153c	leaq	0x20(%rsp), %rbp
0000000001041541	movq	0x30(%rsp), %rax
0000000001041546	movq	0x128(%rax), %rax
000000000104154d	movq	%rax, (%rsp)
0000000001041551	callq	runtime.findfunc
0000000001041556	movq	0x10(%rsp), %rax
000000000104155b	movq	0x8(%rsp), %rcx
0000000001041560	testq	%rcx, %rcx
0000000001041563	je	0x10415ed
0000000001041569	movl	0x10(%rcx), %edx
000000000104156c	cmpl	$0x1, %edx
000000000104156f	je	0x10415de
0000000001041571	cmpl	$0xa, %edx
0000000001041574	je	0x10415c6
0000000001041576	movq	%rcx, (%rsp)
000000000104157a	movq	%rax, 0x8(%rsp)
000000000104157f	callq	runtime.funcname
0000000001041584	movq	0x10(%rsp), %rax
0000000001041589	cmpq	$0x8, 0x18(%rsp)
000000000104158f	jge	0x10415a1
0000000001041591	xorl	%eax, %eax
0000000001041593	movb	%al, 0x38(%rsp)
0000000001041597	movq	0x20(%rsp), %rbp
000000000104159c	addq	$0x28, %rsp
00000000010415a0	retq
00000000010415a1	movq	%rax, (%rsp)
00000000010415a5	leaq	0x298d5(%rip), %rax
00000000010415ac	movq	%rax, 0x8(%rsp)
00000000010415b1	movq	$0x8, 0x10(%rsp)
00000000010415ba	callq	runtime.memequal
00000000010415bf	movzbl	0x18(%rsp), %eax
00000000010415c4	jmp	0x1041593
00000000010415c6	movzbl	runtime.fingRunning(%rip), %eax
00000000010415cd	xorl	$0x1, %eax
00000000010415d0	movb	%al, 0x38(%rsp)
00000000010415d4	movq	0x20(%rsp), %rbp
00000000010415d9	addq	$0x28, %rsp
00000000010415dd	retq
00000000010415de	movb	$0x0, 0x38(%rsp)
00000000010415e3	movq	0x20(%rsp), %rbp
00000000010415e8	addq	$0x28, %rsp
00000000010415ec	retq
00000000010415ed	movb	$0x0, 0x38(%rsp)
00000000010415f2	movq	0x20(%rsp), %rbp
00000000010415f7	addq	$0x28, %rsp
00000000010415fb	retq
00000000010415fc	callq	runtime.morestack_noctxt
0000000001041601	jmp	runtime.isSystemGoroutine
0000000001041606	int3
0000000001041607	int3
0000000001041608	int3
0000000001041609	int3
000000000104160a	int3
000000000104160b	int3
000000000104160c	int3
000000000104160d	int3
000000000104160e	int3
000000000104160f	int3
runtime.printCgoTraceback:
0000000001041610	movq	%gs:0x30, %rcx
0000000001041619	cmpq	0x10(%rcx), %rsp
000000000104161d	jbe	0x1041736
0000000001041623	subq	$0x70, %rsp
0000000001041627	movq	%rbp, 0x68(%rsp)
000000000104162c	leaq	0x68(%rsp), %rbp
0000000001041631	cmpq	$0x0, 0x77167(%rip)
0000000001041639	je	0x10416c4
000000000104163f	movq	$0x0, 0x30(%rsp)
0000000001041648	xorps	%xmm0, %xmm0
000000000104164b	movups	%xmm0, 0x38(%rsp)
0000000001041650	movups	%xmm0, 0x48(%rsp)
0000000001041655	movups	%xmm0, 0x58(%rsp)
000000000104165a	movq	0x78(%rsp), %rax
000000000104165f	xorl	%ecx, %ecx
0000000001041661	jmp	0x1041692
0000000001041663	movq	%rcx, 0x28(%rsp)
0000000001041668	movq	%rdx, (%rsp)
000000000104166c	movq	$0x7fffffff, 0x8(%rsp)
0000000001041675	leaq	0x30(%rsp), %rax
000000000104167a	movq	%rax, 0x10(%rsp)
000000000104167f	callq	runtime.printOneCgoTraceback
0000000001041684	movq	0x28(%rsp), %rax
0000000001041689	leaq	0x1(%rax), %rcx
000000000104168d	movq	0x78(%rsp), %rax
0000000001041692	cmpq	$0x20, %rcx
0000000001041696	jge	0x10416a3
0000000001041698	testb	%al, (%rax)
000000000104169a	movq	(%rax,%rcx,8), %rdx
000000000104169e	testq	%rdx, %rdx
00000000010416a1	jne	0x1041663
00000000010416a3	movq	$0x0, 0x30(%rsp)
00000000010416ac	leaq	0x30(%rsp), %rax
00000000010416b1	movq	%rax, (%rsp)
00000000010416b5	callq	runtime.callCgoSymbolizer
00000000010416ba	movq	0x68(%rsp), %rbp
00000000010416bf	addq	$0x70, %rsp
00000000010416c3	retq
00000000010416c4	movq	0x78(%rsp), %rax
00000000010416c9	xorl	%ecx, %ecx
00000000010416cb	jmp	0x104171b
00000000010416cd	movq	%rcx, 0x28(%rsp)
00000000010416d2	movq	%rdx, 0x20(%rsp)
00000000010416d7	callq	runtime.printlock
00000000010416dc	leaq	0x2aaca(%rip), %rax
00000000010416e3	movq	%rax, (%rsp)
00000000010416e7	movq	$0x16, 0x8(%rsp)
00000000010416f0	callq	runtime.printstring
00000000010416f5	movq	0x20(%rsp), %rax
00000000010416fa	movq	%rax, (%rsp)
00000000010416fe	callq	runtime.printhex
0000000001041703	callq	runtime.printnl
0000000001041708	callq	runtime.printunlock
000000000104170d	movq	0x28(%rsp), %rax
0000000001041712	leaq	0x1(%rax), %rcx
0000000001041716	movq	0x78(%rsp), %rax
000000000104171b	cmpq	$0x20, %rcx
000000000104171f	jge	0x104172c
0000000001041721	testb	%al, (%rax)
0000000001041723	movq	(%rax,%rcx,8), %rdx
0000000001041727	testq	%rdx, %rdx
000000000104172a	jne	0x10416cd
000000000104172c	movq	0x68(%rsp), %rbp
0000000001041731	addq	$0x70, %rsp
0000000001041735	retq
0000000001041736	callq	runtime.morestack_noctxt
000000000104173b	jmp	runtime.printCgoTraceback
runtime.printOneCgoTraceback:
0000000001041740	movq	%gs:0x30, %rcx
0000000001041749	cmpq	0x10(%rcx), %rsp
000000000104174d	jbe	0x1041928
0000000001041753	subq	$0x40, %rsp
0000000001041757	movq	%rbp, 0x38(%rsp)
000000000104175c	leaq	0x38(%rsp), %rbp
0000000001041761	movq	0x48(%rsp), %rax
0000000001041766	movq	0x58(%rsp), %rcx
000000000104176b	movq	%rax, (%rcx)
000000000104176e	xorl	%edx, %edx
0000000001041770	jmp	0x104177a
0000000001041772	movq	%rax, %rdx
0000000001041775	movq	0x48(%rsp), %rax
000000000104177a	movq	0x50(%rsp), %rbx
000000000104177f	cmpq	%rbx, %rdx
0000000001041782	jg	0x1041920
0000000001041788	movq	%rdx, 0x18(%rsp)
000000000104178d	movq	%rcx, (%rsp)
0000000001041791	callq	runtime.callCgoSymbolizer
0000000001041796	movq	0x58(%rsp), %rax
000000000104179b	movq	0x18(%rax), %rcx
000000000104179f	testq	%rcx, %rcx
00000000010417a2	je	0x10418f8
00000000010417a8	movq	%rcx, (%rsp)
00000000010417ac	callq	runtime.gostringnocopy
00000000010417b1	movq	0x10(%rsp), %rax
00000000010417b6	movq	%rax, 0x20(%rsp)
00000000010417bb	movq	0x8(%rsp), %rcx
00000000010417c0	movq	%rcx, 0x30(%rsp)
00000000010417c5	callq	runtime.printlock
00000000010417ca	movq	0x30(%rsp), %rax
00000000010417cf	movq	%rax, (%rsp)
00000000010417d3	movq	0x20(%rsp), %rax
00000000010417d8	movq	%rax, 0x8(%rsp)
00000000010417dd	callq	runtime.printstring
00000000010417e2	callq	runtime.printnl
00000000010417e7	callq	runtime.printunlock
00000000010417ec	callq	runtime.printlock
00000000010417f1	leaq	0x29296(%rip), %rax
00000000010417f8	movq	%rax, (%rsp)
00000000010417fc	movq	$0x1, 0x8(%rsp)
0000000001041805	callq	runtime.printstring
000000000104180a	callq	runtime.printunlock
000000000104180f	movq	0x58(%rsp), %rax
0000000001041814	movq	0x8(%rax), %rcx
0000000001041818	testq	%rcx, %rcx
000000000104181b	jne	0x104187a
000000000104181d	callq	runtime.printlock
0000000001041822	leaq	0x292c7(%rip), %rax
0000000001041829	movq	%rax, (%rsp)
000000000104182d	movq	$0x3, 0x8(%rsp)
0000000001041836	callq	runtime.printstring
000000000104183b	movq	0x48(%rsp), %rax
0000000001041840	movq	%rax, (%rsp)
0000000001041844	callq	runtime.printhex
0000000001041849	callq	runtime.printnl
000000000104184e	callq	runtime.printunlock
0000000001041853	movq	0x18(%rsp), %rax
0000000001041858	incq	%rax
000000000104185b	movq	0x58(%rsp), %rcx
0000000001041860	cmpq	$0x0, 0x28(%rcx)
0000000001041865	jne	0x1041772
000000000104186b	movq	%rax, 0x60(%rsp)
0000000001041870	movq	0x38(%rsp), %rbp
0000000001041875	addq	$0x40, %rsp
0000000001041879	retq
000000000104187a	movq	%rcx, (%rsp)
000000000104187e	callq	runtime.gostringnocopy
0000000001041883	movq	0x8(%rsp), %rax
0000000001041888	movq	%rax, 0x30(%rsp)
000000000104188d	movq	0x10(%rsp), %rcx
0000000001041892	movq	%rcx, 0x20(%rsp)
0000000001041897	movq	0x58(%rsp), %rdx
000000000104189c	movq	0x10(%rdx), %rbx
00000000010418a0	movq	%rbx, 0x28(%rsp)
00000000010418a5	callq	runtime.printlock
00000000010418aa	movq	0x30(%rsp), %rax
00000000010418af	movq	%rax, (%rsp)
00000000010418b3	movq	0x20(%rsp), %rax
00000000010418b8	movq	%rax, 0x8(%rsp)
00000000010418bd	callq	runtime.printstring
00000000010418c2	leaq	0x291bf(%rip), %rax
00000000010418c9	movq	%rax, (%rsp)
00000000010418cd	movq	$0x1, 0x8(%rsp)
00000000010418d6	callq	runtime.printstring
00000000010418db	movq	0x28(%rsp), %rax
00000000010418e0	movq	%rax, (%rsp)
00000000010418e4	callq	runtime.printuint
00000000010418e9	callq	runtime.printsp
00000000010418ee	callq	runtime.printunlock
00000000010418f3	jmp	0x104181d
00000000010418f8	callq	runtime.printlock
00000000010418fd	leaq	0x29f46(%rip), %rax
0000000001041904	movq	%rax, (%rsp)
0000000001041908	movq	$0x10, 0x8(%rsp)
0000000001041911	callq	runtime.printstring
0000000001041916	callq	runtime.printunlock
000000000104191b	jmp	0x10417ec
0000000001041920	movq	%rdx, %rax
0000000001041923	jmp	0x104186b
0000000001041928	callq	runtime.morestack_noctxt
000000000104192d	jmp	runtime.printOneCgoTraceback
0000000001041932	int3
0000000001041933	int3
0000000001041934	int3
0000000001041935	int3
0000000001041936	int3
0000000001041937	int3
0000000001041938	int3
0000000001041939	int3
000000000104193a	int3
000000000104193b	int3
000000000104193c	int3
000000000104193d	int3
000000000104193e	int3
000000000104193f	int3
runtime.callCgoSymbolizer:
0000000001041940	movq	%gs:0x30, %rcx
0000000001041949	cmpq	0x10(%rcx), %rsp
000000000104194d	jbe	0x10419b6
000000000104194f	subq	$0x20, %rsp
0000000001041953	movq	%rbp, 0x18(%rsp)
0000000001041958	leaq	0x18(%rsp), %rbp
000000000104195d	cmpl	$0x0, 0x931b0(%rip)
0000000001041964	jbe	0x1041994
0000000001041966	leaq	0x2d41b(%rip), %rax
000000000104196d	movq	runtime.cgoSymbolizer(%rip), %rcx
0000000001041974	movq	%rcx, (%rsp)
0000000001041978	movq	0x28(%rsp), %rcx
000000000104197d	movq	%rcx, 0x8(%rsp)
0000000001041982	movq	(%rax), %rcx
0000000001041985	movq	%rax, %rdx
0000000001041988	callq	*%rcx
000000000104198a	movq	0x18(%rsp), %rbp
000000000104198f	addq	$0x20, %rsp
0000000001041993	retq
0000000001041994	movq	%gs:0x30, %rax
000000000104199d	movq	0x30(%rax), %rcx
00000000010419a1	movq	0xc0(%rcx), %rcx
00000000010419a8	cmpq	%rax, %rcx
00000000010419ab	jne	0x1041966
00000000010419ad	leaq	0x2d414(%rip), %rax
00000000010419b4	jmp	0x104196d
00000000010419b6	callq	runtime.morestack_noctxt
00000000010419bb	jmp	runtime.callCgoSymbolizer
00000000010419bd	int3
00000000010419be	int3
00000000010419bf	int3
runtime.cgoContextPCs:
00000000010419c0	movq	%gs:0x30, %rcx
00000000010419c9	cmpq	0x10(%rcx), %rsp
00000000010419cd	jbe	0x1041a89
00000000010419d3	subq	$0x40, %rsp
00000000010419d7	movq	%rbp, 0x38(%rsp)
00000000010419dc	leaq	0x38(%rsp), %rbp
00000000010419e1	cmpq	$0x0, 0x76dbf(%rip)
00000000010419e9	je	0x1041a78
00000000010419ef	cmpl	$0x0, 0x9311e(%rip)
00000000010419f6	jbe	0x1041a56
00000000010419f8	leaq	0x2d389(%rip), %rax
00000000010419ff	movq	0x58(%rsp), %rcx
0000000001041a04	testq	%rcx, %rcx
0000000001041a07	jbe	0x1041a82
0000000001041a09	xorps	%xmm0, %xmm0
0000000001041a0c	movups	%xmm0, 0x18(%rsp)
0000000001041a11	movups	%xmm0, 0x28(%rsp)
0000000001041a16	movq	0x48(%rsp), %rbx
0000000001041a1b	movq	%rbx, 0x18(%rsp)
0000000001041a20	movq	0x50(%rsp), %rbx
0000000001041a25	movq	%rbx, 0x28(%rsp)
0000000001041a2a	movq	%rcx, 0x30(%rsp)
0000000001041a2f	movq	runtime.cgoTraceback(%rip), %rcx
0000000001041a36	movq	%rcx, (%rsp)
0000000001041a3a	leaq	0x18(%rsp), %rcx
0000000001041a3f	movq	%rcx, 0x8(%rsp)
0000000001041a44	movq	(%rax), %rcx
0000000001041a47	movq	%rax, %rdx
0000000001041a4a	callq	*%rcx
0000000001041a4c	movq	0x38(%rsp), %rbp
0000000001041a51	addq	$0x40, %rsp
0000000001041a55	retq
0000000001041a56	movq	%gs:0x30, %rax
0000000001041a5f	movq	0x30(%rax), %rcx
0000000001041a63	movq	0xc0(%rcx), %rcx
0000000001041a6a	cmpq	%rax, %rcx
0000000001041a6d	jne	0x10419f8
0000000001041a6f	leaq	0x2d352(%rip), %rax
0000000001041a76	jmp	0x10419ff
0000000001041a78	movq	0x38(%rsp), %rbp
0000000001041a7d	addq	$0x40, %rsp
0000000001041a81	retq
0000000001041a82	callq	runtime.panicindex
0000000001041a87	ud2
0000000001041a89	callq	runtime.morestack_noctxt
0000000001041a8e	jmp	runtime.cgoContextPCs
0000000001041a93	int3
0000000001041a94	int3
0000000001041a95	int3
0000000001041a96	int3
0000000001041a97	int3
0000000001041a98	int3
0000000001041a99	int3
0000000001041a9a	int3
0000000001041a9b	int3
0000000001041a9c	int3
0000000001041a9d	int3
0000000001041a9e	int3
0000000001041a9f	int3
runtime.(*_type).string:
0000000001041aa0	movq	%gs:0x30, %rcx
0000000001041aa9	cmpq	0x10(%rcx), %rsp
0000000001041aad	jbe	0x1041b45
0000000001041ab3	subq	$0x20, %rsp
0000000001041ab7	movq	%rbp, 0x18(%rsp)
0000000001041abc	leaq	0x18(%rsp), %rbp
0000000001041ac1	movq	0x28(%rsp), %rax
0000000001041ac6	movl	0x28(%rax), %ecx
0000000001041ac9	movl	%ecx, 0x8(%rsp)
0000000001041acd	movq	%rax, (%rsp)
0000000001041ad1	callq	"runtime.(*_type).nameOff"
0000000001041ad6	movq	0x10(%rsp), %rax
0000000001041adb	movq	%rax, (%rsp)
0000000001041adf	callq	runtime.name.name
0000000001041ae4	movq	0x10(%rsp), %rax
0000000001041ae9	movq	0x8(%rsp), %rcx
0000000001041aee	movq	0x28(%rsp), %rdx
0000000001041af3	movzbl	0x14(%rdx), %edx
0000000001041af7	testb	$0x2, %dl
0000000001041afa	je	0x1041b2a
0000000001041afc	cmpq	$0x1, %rax
0000000001041b00	jb	0x1041b3e
0000000001041b02	decq	%rax
0000000001041b05	movq	%rax, %rdx
0000000001041b08	negq	%rax
0000000001041b0b	sarq	$0x3f, %rax
0000000001041b0f	andq	$0x1, %rax
0000000001041b13	addq	%rcx, %rax
0000000001041b16	movq	%rax, 0x30(%rsp)
0000000001041b1b	movq	%rdx, 0x38(%rsp)
0000000001041b20	movq	0x18(%rsp), %rbp
0000000001041b25	addq	$0x20, %rsp
0000000001041b29	retq
0000000001041b2a	movq	%rcx, 0x30(%rsp)
0000000001041b2f	movq	%rax, 0x38(%rsp)
0000000001041b34	movq	0x18(%rsp), %rbp
0000000001041b39	addq	$0x20, %rsp
0000000001041b3d	retq
0000000001041b3e	callq	runtime.panicslice
0000000001041b43	ud2
0000000001041b45	callq	runtime.morestack_noctxt
0000000001041b4a	jmp	"runtime.(*_type).string"
0000000001041b4f	int3
runtime.(*_type).uncommon:
0000000001041b50	movq	0x8(%rsp), %rax
0000000001041b55	movzbl	0x14(%rax), %ecx
0000000001041b59	testb	$0x1, %cl
0000000001041b5c	je	0x1041bf0
0000000001041b62	movzbl	0x17(%rax), %ecx
0000000001041b66	andl	$0x1f, %ecx
0000000001041b69	cmpb	$0x14, %cl
0000000001041b6c	ja	0x1041bb4
0000000001041b6e	cmpb	$0x12, %cl
0000000001041b71	ja	0x1041b9b
0000000001041b73	cmpb	$0x11, %cl
0000000001041b76	je	0x1041b91
0000000001041b78	cmpb	$0x12, %cl
0000000001041b7b	je	0x1041b87
0000000001041b7d	addq	$0x30, %rax
0000000001041b81	movq	%rax, 0x10(%rsp)
0000000001041b86	retq
0000000001041b87	addq	$0x40, %rax
0000000001041b8b	movq	%rax, 0x10(%rsp)
0000000001041b90	retq
0000000001041b91	addq	$0x48, %rax
0000000001041b95	movq	%rax, 0x10(%rsp)
0000000001041b9a	retq
0000000001041b9b	cmpb	$0x13, %cl
0000000001041b9e	jne	0x1041baa
0000000001041ba0	addq	$0x38, %rax
0000000001041ba4	movq	%rax, 0x10(%rsp)
0000000001041ba9	retq
0000000001041baa	addq	$0x50, %rax
0000000001041bae	movq	%rax, 0x10(%rsp)
0000000001041bb3	retq
0000000001041bb4	cmpb	$0x16, %cl
0000000001041bb7	ja	0x1041bd2
0000000001041bb9	cmpb	$0x15, %cl
0000000001041bbc	jne	0x1041bc8
0000000001041bbe	addq	$0x50, %rax
0000000001041bc2	movq	%rax, 0x10(%rsp)
0000000001041bc7	retq
0000000001041bc8	addq	$0x38, %rax
0000000001041bcc	movq	%rax, 0x10(%rsp)
0000000001041bd1	retq
0000000001041bd2	cmpb	$0x17, %cl
0000000001041bd5	je	0x1041be6
0000000001041bd7	cmpb	$0x19, %cl
0000000001041bda	jne	0x1041b7d
0000000001041bdc	addq	$0x50, %rax
0000000001041be0	movq	%rax, 0x10(%rsp)
0000000001041be5	retq
0000000001041be6	addq	$0x38, %rax
0000000001041bea	movq	%rax, 0x10(%rsp)
0000000001041bef	retq
0000000001041bf0	movq	$0x0, 0x10(%rsp)
0000000001041bf9	retq
0000000001041bfa	int3
0000000001041bfb	int3
0000000001041bfc	int3
0000000001041bfd	int3
0000000001041bfe	int3
0000000001041bff	int3
runtime.(*_type).pkgpath:
0000000001041c00	movq	%gs:0x30, %rcx
0000000001041c09	cmpq	0x10(%rcx), %rsp
0000000001041c0d	jbe	0x1041cf7
0000000001041c13	subq	$0x20, %rsp
0000000001041c17	movq	%rbp, 0x18(%rsp)
0000000001041c1c	leaq	0x18(%rsp), %rbp
0000000001041c21	movq	0x28(%rsp), %rax
0000000001041c26	movq	%rax, (%rsp)
0000000001041c2a	callq	"runtime.(*_type).uncommon"
0000000001041c2f	movq	0x8(%rsp), %rax
0000000001041c34	testq	%rax, %rax
0000000001041c37	jne	0x1041cb7
0000000001041c39	movq	0x28(%rsp), %rax
0000000001041c3e	movzbl	0x17(%rax), %ecx
0000000001041c42	andl	$0x1f, %ecx
0000000001041c45	cmpb	$0x14, %cl
0000000001041c48	je	0x1041c8c
0000000001041c4a	cmpb	$0x19, %cl
0000000001041c4d	jne	0x1041c7a
0000000001041c4f	movq	0x30(%rax), %rax
0000000001041c53	movq	%rax, (%rsp)
0000000001041c57	callq	runtime.name.name
0000000001041c5c	movq	0x10(%rsp), %rax
0000000001041c61	movq	0x8(%rsp), %rcx
0000000001041c66	movq	%rcx, 0x30(%rsp)
0000000001041c6b	movq	%rax, 0x38(%rsp)
0000000001041c70	movq	0x18(%rsp), %rbp
0000000001041c75	addq	$0x20, %rsp
0000000001041c79	retq
0000000001041c7a	xorps	%xmm0, %xmm0
0000000001041c7d	movups	%xmm0, 0x30(%rsp)
0000000001041c82	movq	0x18(%rsp), %rbp
0000000001041c87	addq	$0x20, %rsp
0000000001041c8b	retq
0000000001041c8c	movq	0x30(%rax), %rax
0000000001041c90	movq	%rax, (%rsp)
0000000001041c94	callq	runtime.name.name
0000000001041c99	movq	0x8(%rsp), %rax
0000000001041c9e	movq	0x10(%rsp), %rcx
0000000001041ca3	movq	%rax, 0x30(%rsp)
0000000001041ca8	movq	%rcx, 0x38(%rsp)
0000000001041cad	movq	0x18(%rsp), %rbp
0000000001041cb2	addq	$0x20, %rsp
0000000001041cb6	retq
0000000001041cb7	movl	(%rax), %eax
0000000001041cb9	movl	%eax, 0x8(%rsp)
0000000001041cbd	movq	0x28(%rsp), %rax
0000000001041cc2	movq	%rax, (%rsp)
0000000001041cc6	callq	"runtime.(*_type).nameOff"
0000000001041ccb	movq	0x10(%rsp), %rax
0000000001041cd0	movq	%rax, (%rsp)
0000000001041cd4	callq	runtime.name.name
0000000001041cd9	movq	0x8(%rsp), %rax
0000000001041cde	movq	0x10(%rsp), %rcx
0000000001041ce3	movq	%rax, 0x30(%rsp)
0000000001041ce8	movq	%rcx, 0x38(%rsp)
0000000001041ced	movq	0x18(%rsp), %rbp
0000000001041cf2	addq	$0x20, %rsp
0000000001041cf6	retq
0000000001041cf7	callq	runtime.morestack_noctxt
0000000001041cfc	jmp	"runtime.(*_type).pkgpath"
0000000001041d01	int3
0000000001041d02	int3
0000000001041d03	int3
0000000001041d04	int3
0000000001041d05	int3
0000000001041d06	int3
0000000001041d07	int3
0000000001041d08	int3
0000000001041d09	int3
0000000001041d0a	int3
0000000001041d0b	int3
0000000001041d0c	int3
0000000001041d0d	int3
0000000001041d0e	int3
0000000001041d0f	int3
runtime.reflectOffsLock:
0000000001041d10	movq	%gs:0x30, %rcx
0000000001041d19	cmpq	0x10(%rcx), %rsp
0000000001041d1d	jbe	0x1041d47
0000000001041d1f	subq	$0x10, %rsp
0000000001041d23	movq	%rbp, 0x8(%rsp)
0000000001041d28	leaq	0x8(%rsp), %rbp
0000000001041d2d	leaq	runtime.reflectOffs(%rip), %rax
0000000001041d34	movq	%rax, (%rsp)
0000000001041d38	callq	runtime.lock
0000000001041d3d	movq	0x8(%rsp), %rbp
0000000001041d42	addq	$0x10, %rsp
0000000001041d46	retq
0000000001041d47	callq	runtime.morestack_noctxt
0000000001041d4c	jmp	runtime.reflectOffsLock
0000000001041d4e	int3
0000000001041d4f	int3
runtime.reflectOffsUnlock:
0000000001041d50	movq	%gs:0x30, %rcx
0000000001041d59	cmpq	0x10(%rcx), %rsp
0000000001041d5d	jbe	0x1041d87
0000000001041d5f	subq	$0x10, %rsp
0000000001041d63	movq	%rbp, 0x8(%rsp)
0000000001041d68	leaq	0x8(%rsp), %rbp
0000000001041d6d	leaq	runtime.reflectOffs(%rip), %rax
0000000001041d74	movq	%rax, (%rsp)
0000000001041d78	callq	runtime.unlock
0000000001041d7d	movq	0x8(%rsp), %rbp
0000000001041d82	addq	$0x10, %rsp
0000000001041d86	retq
0000000001041d87	callq	runtime.morestack_noctxt
0000000001041d8c	jmp	runtime.reflectOffsUnlock
0000000001041d8e	int3
0000000001041d8f	int3
runtime.resolveNameOff:
0000000001041d90	movq	%gs:0x30, %rcx
0000000001041d99	cmpq	0x10(%rcx), %rsp
0000000001041d9d	jbe	0x1042066
0000000001041da3	subq	$0x60, %rsp
0000000001041da7	movq	%rbp, 0x58(%rsp)
0000000001041dac	leaq	0x58(%rsp), %rbp
0000000001041db1	movl	0x70(%rsp), %eax
0000000001041db5	testl	%eax, %eax
0000000001041db7	je	0x1041f8d
0000000001041dbd	movq	0x68(%rsp), %rcx
0000000001041dc2	leaq	runtime.firstmoduledata(%rip), %rdx
0000000001041dc9	jmp	0x1041dd2
0000000001041dcb	movq	0x1c0(%rdx), %rdx
0000000001041dd2	testq	%rdx, %rdx
0000000001041dd5	je	0x1041e0d
0000000001041dd7	movq	0xc8(%rdx), %rbx
0000000001041dde	cmpq	%rbx, %rcx
0000000001041de1	jb	0x1041dcb
0000000001041de3	movq	0xd0(%rdx), %rsi
0000000001041dea	cmpq	%rsi, %rcx
0000000001041ded	jae	0x1041dcb
0000000001041def	movslq	%eax, %rcx
0000000001041df2	addq	%rbx, %rcx
0000000001041df5	cmpq	%rsi, %rcx
0000000001041df8	ja	0x1041fbb
0000000001041dfe	movq	%rcx, 0x78(%rsp)
0000000001041e03	movq	0x58(%rsp), %rbp
0000000001041e08	addq	$0x60, %rsp
0000000001041e0c	retq
0000000001041e0d	movq	%rcx, 0x30(%rsp)
0000000001041e12	callq	runtime.reflectOffsLock
0000000001041e17	leaq	0x19222(%rip), %rax
0000000001041e1e	movq	%rax, (%rsp)
0000000001041e22	movq	0x76b07(%rip), %rax
0000000001041e29	movq	%rax, 0x8(%rsp)
0000000001041e2e	movl	0x70(%rsp), %eax
0000000001041e32	movl	%eax, 0x10(%rsp)
0000000001041e36	callq	runtime.mapaccess2_fast32
0000000001041e3b	movq	0x18(%rsp), %rax
0000000001041e40	movq	(%rax), %rax
0000000001041e43	movq	%rax, 0x48(%rsp)
0000000001041e48	leaq	0x20(%rsp), %rcx
0000000001041e4d	movzbl	(%rcx), %ecx
0000000001041e50	movb	%cl, 0x2f(%rsp)
0000000001041e54	cmpb	$0x0, %cl
0000000001041e57	callq	runtime.reflectOffsUnlock
0000000001041e5c	movzbl	0x2f(%rsp), %eax
0000000001041e61	cmpb	$0x0, %al
0000000001041e63	jne	0x1041f79
0000000001041e69	callq	runtime.printlock
0000000001041e6e	leaq	0x29b43(%rip), %rax
0000000001041e75	movq	%rax, (%rsp)
0000000001041e79	movq	$0x11, 0x8(%rsp)
0000000001041e82	callq	runtime.printstring
0000000001041e87	movl	0x70(%rsp), %eax
0000000001041e8b	movslq	%eax, %rax
0000000001041e8e	movq	%rax, (%rsp)
0000000001041e92	callq	runtime.printhex
0000000001041e97	leaq	0x28d95(%rip), %rax
0000000001041e9e	movq	%rax, (%rsp)
0000000001041ea2	movq	$0x6, 0x8(%rsp)
0000000001041eab	callq	runtime.printstring
0000000001041eb0	movq	0x30(%rsp), %rax
0000000001041eb5	movq	%rax, (%rsp)
0000000001041eb9	callq	runtime.printhex
0000000001041ebe	leaq	0x29875(%rip), %rax
0000000001041ec5	movq	%rax, (%rsp)
0000000001041ec9	movq	$0x10, 0x8(%rsp)
0000000001041ed2	callq	runtime.printstring
0000000001041ed7	callq	runtime.printunlock
0000000001041edc	leaq	runtime.firstmoduledata(%rip), %rax
0000000001041ee3	jmp	0x1041f6e
0000000001041ee8	movq	%rax, 0x50(%rsp)
0000000001041eed	movq	0xc8(%rax), %rcx
0000000001041ef4	movq	%rcx, 0x40(%rsp)
0000000001041ef9	movq	0xd0(%rax), %rdx
0000000001041f00	movq	%rdx, 0x38(%rsp)
0000000001041f05	callq	runtime.printlock
0000000001041f0a	leaq	0x28df6(%rip), %rax
0000000001041f11	movq	%rax, (%rsp)
0000000001041f15	movq	$0x7, 0x8(%rsp)
0000000001041f1e	callq	runtime.printstring
0000000001041f23	movq	0x40(%rsp), %rax
0000000001041f28	movq	%rax, (%rsp)
0000000001041f2c	callq	runtime.printhex
0000000001041f31	leaq	0x28ea1(%rip), %rax
0000000001041f38	movq	%rax, (%rsp)
0000000001041f3c	movq	$0x8, 0x8(%rsp)
0000000001041f45	callq	runtime.printstring
0000000001041f4a	movq	0x38(%rsp), %rax
0000000001041f4f	movq	%rax, (%rsp)
0000000001041f53	callq	runtime.printhex
0000000001041f58	callq	runtime.printnl
0000000001041f5d	callq	runtime.printunlock
0000000001041f62	movq	0x50(%rsp), %rax
0000000001041f67	movq	0x1c0(%rax), %rax
0000000001041f6e	testq	%rax, %rax
0000000001041f71	jne	0x1041ee8
0000000001041f77	jmp	0x1041fa0
0000000001041f79	movq	0x48(%rsp), %rax
0000000001041f7e	movq	%rax, 0x78(%rsp)
0000000001041f83	movq	0x58(%rsp), %rbp
0000000001041f88	addq	$0x60, %rsp
0000000001041f8c	retq
0000000001041f8d	movq	$0x0, 0x78(%rsp)
0000000001041f96	movq	0x58(%rsp), %rbp
0000000001041f9b	addq	$0x60, %rsp
0000000001041f9f	retq
0000000001041fa0	leaq	0x2c61d(%rip), %rax
0000000001041fa7	movq	%rax, (%rsp)
0000000001041fab	movq	$0x2e, 0x8(%rsp)
0000000001041fb4	callq	runtime.throw
0000000001041fb9	ud2
0000000001041fbb	movq	%rbx, 0x40(%rsp)
0000000001041fc0	movq	%rsi, 0x38(%rsp)
0000000001041fc5	callq	runtime.printlock
0000000001041fca	leaq	0x299e7(%rip), %rax
0000000001041fd1	movq	%rax, (%rsp)
0000000001041fd5	movq	$0x11, 0x8(%rsp)
0000000001041fde	callq	runtime.printstring
0000000001041fe3	movl	0x70(%rsp), %eax
0000000001041fe7	movslq	%eax, %rax
0000000001041fea	movq	%rax, (%rsp)
0000000001041fee	callq	runtime.printhex
0000000001041ff3	leaq	0x2951c(%rip), %rax
0000000001041ffa	movq	%rax, (%rsp)
0000000001041ffe	movq	$0xe, 0x8(%rsp)
0000000001042007	callq	runtime.printstring
000000000104200c	movq	0x40(%rsp), %rax
0000000001042011	movq	%rax, (%rsp)
0000000001042015	callq	runtime.printhex
000000000104201a	leaq	0x28a99(%rip), %rax
0000000001042021	movq	%rax, (%rsp)
0000000001042025	movq	$0x3, 0x8(%rsp)
000000000104202e	callq	runtime.printstring
0000000001042033	movq	0x38(%rsp), %rax
0000000001042038	movq	%rax, (%rsp)
000000000104203c	callq	runtime.printhex
0000000001042041	callq	runtime.printnl
0000000001042046	callq	runtime.printunlock
000000000104204b	leaq	0x2b88a(%rip), %rax
0000000001042052	movq	%rax, (%rsp)
0000000001042056	movq	$0x21, 0x8(%rsp)
000000000104205f	callq	runtime.throw
0000000001042064	ud2
0000000001042066	callq	runtime.morestack_noctxt
000000000104206b	jmp	runtime.resolveNameOff
runtime.(*_type).nameOff:
0000000001042070	movq	%gs:0x30, %rcx
0000000001042079	cmpq	0x10(%rcx), %rsp
000000000104207d	jbe	0x10420b7
000000000104207f	subq	$0x20, %rsp
0000000001042083	movq	%rbp, 0x18(%rsp)
0000000001042088	leaq	0x18(%rsp), %rbp
000000000104208d	movq	0x28(%rsp), %rax
0000000001042092	movq	%rax, (%rsp)
0000000001042096	movl	0x30(%rsp), %eax
000000000104209a	movl	%eax, 0x8(%rsp)
000000000104209e	callq	runtime.resolveNameOff
00000000010420a3	movq	0x10(%rsp), %rax
00000000010420a8	movq	%rax, 0x38(%rsp)
00000000010420ad	movq	0x18(%rsp), %rbp
00000000010420b2	addq	$0x20, %rsp
00000000010420b6	retq
00000000010420b7	callq	runtime.morestack_noctxt
00000000010420bc	jmp	"runtime.(*_type).nameOff"
00000000010420be	int3
00000000010420bf	int3
runtime.resolveTypeOff:
00000000010420c0	movq	%gs:0x30, %rcx
00000000010420c9	cmpq	0x10(%rcx), %rsp
00000000010420cd	jbe	0x10423ee
00000000010420d3	subq	$0x58, %rsp
00000000010420d7	movq	%rbp, 0x50(%rsp)
00000000010420dc	leaq	0x50(%rsp), %rbp
00000000010420e1	movl	0x68(%rsp), %eax
00000000010420e5	testl	%eax, %eax
00000000010420e7	je	0x1042315
00000000010420ed	movq	0x60(%rsp), %rcx
00000000010420f2	leaq	runtime.firstmoduledata(%rip), %rdx
00000000010420f9	jmp	0x1042102
00000000010420fb	movq	0x1c0(%rdx), %rdx
0000000001042102	testq	%rdx, %rdx
0000000001042105	je	0x104230e
000000000104210b	movq	0xc8(%rdx), %rbx
0000000001042112	cmpq	%rbx, %rcx
0000000001042115	jb	0x10420fb
0000000001042117	movq	0xd0(%rdx), %rbx
000000000104211e	cmpq	%rbx, %rcx
0000000001042121	jae	0x10420fb
0000000001042123	testq	%rdx, %rdx
0000000001042126	je	0x104219e
0000000001042128	movq	%rdx, 0x48(%rsp)
000000000104212d	movq	0x1b0(%rdx), %rcx
0000000001042134	movq	%rcx, 0x8(%rsp)
0000000001042139	leaq	0x18fc0(%rip), %rcx
0000000001042140	movq	%rcx, (%rsp)
0000000001042144	movl	%eax, 0x10(%rsp)
0000000001042148	callq	runtime.mapaccess1_fast32
000000000104214d	movq	0x18(%rsp), %rax
0000000001042152	movq	(%rax), %rax
0000000001042155	testq	%rax, %rax
0000000001042158	jne	0x104218f
000000000104215a	movq	0x48(%rsp), %rax
000000000104215f	movq	0xc8(%rax), %rcx
0000000001042166	movl	0x68(%rsp), %edx
000000000104216a	movslq	%edx, %rbx
000000000104216d	addq	%rcx, %rbx
0000000001042170	movq	0xd0(%rax), %rax
0000000001042177	cmpq	%rax, %rbx
000000000104217a	ja	0x1042328
0000000001042180	movq	%rbx, 0x70(%rsp)
0000000001042185	movq	0x50(%rsp), %rbp
000000000104218a	addq	$0x58, %rsp
000000000104218e	retq
000000000104218f	movq	%rax, 0x70(%rsp)
0000000001042194	movq	0x50(%rsp), %rbp
0000000001042199	addq	$0x58, %rsp
000000000104219d	retq
000000000104219e	movq	%rcx, 0x20(%rsp)
00000000010421a3	callq	runtime.reflectOffsLock
00000000010421a8	leaq	0x18e91(%rip), %rax
00000000010421af	movq	%rax, (%rsp)
00000000010421b3	movq	0x76776(%rip), %rax
00000000010421ba	movq	%rax, 0x8(%rsp)
00000000010421bf	movl	0x68(%rsp), %eax
00000000010421c3	movl	%eax, 0x10(%rsp)
00000000010421c7	callq	runtime.mapaccess1_fast32
00000000010421cc	movq	0x18(%rsp), %rax
00000000010421d1	movq	(%rax), %rax
00000000010421d4	movq	%rax, 0x38(%rsp)
00000000010421d9	callq	runtime.reflectOffsUnlock
00000000010421de	movq	0x38(%rsp), %rax
00000000010421e3	testq	%rax, %rax
00000000010421e6	jne	0x10422ff
00000000010421ec	callq	runtime.printlock
00000000010421f1	leaq	0x29804(%rip), %rax
00000000010421f8	movq	%rax, (%rsp)
00000000010421fc	movq	$0x11, 0x8(%rsp)
0000000001042205	callq	runtime.printstring
000000000104220a	movl	0x68(%rsp), %eax
000000000104220e	movslq	%eax, %rax
0000000001042211	movq	%rax, (%rsp)
0000000001042215	callq	runtime.printhex
000000000104221a	leaq	0x28a12(%rip), %rax
0000000001042221	movq	%rax, (%rsp)
0000000001042225	movq	$0x6, 0x8(%rsp)
000000000104222e	callq	runtime.printstring
0000000001042233	movq	0x20(%rsp), %rax
0000000001042238	movq	%rax, (%rsp)
000000000104223c	callq	runtime.printhex
0000000001042241	leaq	0x294f2(%rip), %rax
0000000001042248	movq	%rax, (%rsp)
000000000104224c	movq	$0x10, 0x8(%rsp)
0000000001042255	callq	runtime.printstring
000000000104225a	callq	runtime.printunlock
000000000104225f	leaq	runtime.firstmoduledata(%rip), %rax
0000000001042266	jmp	0x10422f1
000000000104226b	movq	%rax, 0x40(%rsp)
0000000001042270	movq	0xc8(%rax), %rcx
0000000001042277	movq	%rcx, 0x30(%rsp)
000000000104227c	movq	0xd0(%rax), %rdx
0000000001042283	movq	%rdx, 0x28(%rsp)
0000000001042288	callq	runtime.printlock
000000000104228d	leaq	0x28a73(%rip), %rax
0000000001042294	movq	%rax, (%rsp)
0000000001042298	movq	$0x7, 0x8(%rsp)
00000000010422a1	callq	runtime.printstring
00000000010422a6	movq	0x30(%rsp), %rax
00000000010422ab	movq	%rax, (%rsp)
00000000010422af	callq	runtime.printhex
00000000010422b4	leaq	0x28b1e(%rip), %rax
00000000010422bb	movq	%rax, (%rsp)
00000000010422bf	movq	$0x8, 0x8(%rsp)
00000000010422c8	callq	runtime.printstring
00000000010422cd	movq	0x28(%rsp), %rax
00000000010422d2	movq	%rax, (%rsp)
00000000010422d6	callq	runtime.printhex
00000000010422db	callq	runtime.printnl
00000000010422e0	callq	runtime.printunlock
00000000010422e5	movq	0x40(%rsp), %rax
00000000010422ea	movq	0x1c0(%rax), %rax
00000000010422f1	testq	%rax, %rax
00000000010422f4	jne	0x104226b
00000000010422fa	jmp	0x10423d3
00000000010422ff	movq	%rax, 0x70(%rsp)
0000000001042304	movq	0x50(%rsp), %rbp
0000000001042309	addq	$0x58, %rsp
000000000104230d	retq
000000000104230e	xorl	%edx, %edx
0000000001042310	jmp	0x1042123
0000000001042315	movq	$0x0, 0x70(%rsp)
000000000104231e	movq	0x50(%rsp), %rbp
0000000001042323	addq	$0x58, %rsp
0000000001042327	retq
0000000001042328	movq	%rcx, 0x30(%rsp)
000000000104232d	movq	%rax, 0x28(%rsp)
0000000001042332	callq	runtime.printlock
0000000001042337	leaq	0x296be(%rip), %rax
000000000104233e	movq	%rax, (%rsp)
0000000001042342	movq	$0x11, 0x8(%rsp)
000000000104234b	callq	runtime.printstring
0000000001042350	movl	0x68(%rsp), %eax
0000000001042354	movslq	%eax, %rax
0000000001042357	movq	%rax, (%rsp)
000000000104235b	callq	runtime.printhex
0000000001042360	leaq	0x291af(%rip), %rax
0000000001042367	movq	%rax, (%rsp)
000000000104236b	movq	$0xe, 0x8(%rsp)
0000000001042374	callq	runtime.printstring
0000000001042379	movq	0x30(%rsp), %rax
000000000104237e	movq	%rax, (%rsp)
0000000001042382	callq	runtime.printhex
0000000001042387	leaq	0x2872c(%rip), %rax
000000000104238e	movq	%rax, (%rsp)
0000000001042392	movq	$0x3, 0x8(%rsp)
000000000104239b	callq	runtime.printstring
00000000010423a0	movq	0x28(%rsp), %rax
00000000010423a5	movq	%rax, (%rsp)
00000000010423a9	callq	runtime.printhex
00000000010423ae	callq	runtime.printnl
00000000010423b3	callq	runtime.printunlock
00000000010423b8	leaq	0x2b55f(%rip), %rax
00000000010423bf	movq	%rax, (%rsp)
00000000010423c3	movq	$0x21, 0x8(%rsp)
00000000010423cc	callq	runtime.throw
00000000010423d1	ud2
00000000010423d3	leaq	0x2c274(%rip), %rax
00000000010423da	movq	%rax, (%rsp)
00000000010423de	movq	$0x2e, 0x8(%rsp)
00000000010423e7	callq	runtime.throw
00000000010423ec	ud2
00000000010423ee	callq	runtime.morestack_noctxt
00000000010423f3	jmp	runtime.resolveTypeOff
00000000010423f8	int3
00000000010423f9	int3
00000000010423fa	int3
00000000010423fb	int3
00000000010423fc	int3
00000000010423fd	int3
00000000010423fe	int3
00000000010423ff	int3
runtime.(*_type).typeOff:
0000000001042400	movq	%gs:0x30, %rcx
0000000001042409	cmpq	0x10(%rcx), %rsp
000000000104240d	jbe	0x1042447
000000000104240f	subq	$0x20, %rsp
0000000001042413	movq	%rbp, 0x18(%rsp)
0000000001042418	leaq	0x18(%rsp), %rbp
000000000104241d	movq	0x28(%rsp), %rax
0000000001042422	movq	%rax, (%rsp)
0000000001042426	movl	0x30(%rsp), %eax
000000000104242a	movl	%eax, 0x8(%rsp)
000000000104242e	callq	runtime.resolveTypeOff
0000000001042433	movq	0x10(%rsp), %rax
0000000001042438	movq	%rax, 0x38(%rsp)
000000000104243d	movq	0x18(%rsp), %rbp
0000000001042442	addq	$0x20, %rsp
0000000001042446	retq
0000000001042447	callq	runtime.morestack_noctxt
000000000104244c	jmp	"runtime.(*_type).typeOff"
000000000104244e	int3
000000000104244f	int3
runtime.(*_type).textOff:
0000000001042450	movq	%gs:0x30, %rcx
0000000001042459	cmpq	0x10(%rcx), %rsp
000000000104245d	jbe	0x1042766
0000000001042463	subq	$0x50, %rsp
0000000001042467	movq	%rbp, 0x48(%rsp)
000000000104246c	leaq	0x48(%rsp), %rbp
0000000001042471	movq	0x58(%rsp), %rax
0000000001042476	leaq	runtime.firstmoduledata(%rip), %rcx
000000000104247d	jmp	0x1042486
000000000104247f	movq	0x1c0(%rcx), %rcx
0000000001042486	testq	%rcx, %rcx
0000000001042489	je	0x1042695
000000000104248f	movq	0xc8(%rcx), %rdx
0000000001042496	cmpq	%rdx, %rax
0000000001042499	jb	0x104247f
000000000104249b	movq	0xd0(%rcx), %rdx
00000000010424a2	cmpq	%rdx, %rax
00000000010424a5	jae	0x104247f
00000000010424a7	testq	%rcx, %rcx
00000000010424aa	je	0x1042525
00000000010424ac	movq	0xd8(%rcx), %rax
00000000010424b3	movq	0xe0(%rcx), %rdx
00000000010424ba	cmpq	$0x1, %rdx
00000000010424be	jle	0x1042518
00000000010424c0	movl	0x60(%rsp), %ebx
00000000010424c4	xorl	%esi, %esi
00000000010424c6	jmp	0x10424cb
00000000010424c8	incq	%rsi
00000000010424cb	cmpq	%rdx, %rsi
00000000010424ce	jge	0x1042514
00000000010424d0	leaq	(%rsi,%rsi,2), %rdi
00000000010424d4	movq	(%rax,%rdi,8), %r8
00000000010424d8	movq	0x8(%rax,%rdi,8), %r9
00000000010424dd	movslq	%ebx, %r10
00000000010424e0	cmpq	%r8, %r10
00000000010424e3	jb	0x10424c8
00000000010424e5	addq	%r8, %r9
00000000010424e8	cmpq	%r9, %r10
00000000010424eb	ja	0x10424c8
00000000010424ed	movq	0x10(%rax,%rdi,8), %rax
00000000010424f2	addq	%r10, %rax
00000000010424f5	subq	%r8, %rax
00000000010424f8	movq	0x68(%rcx), %rdx
00000000010424fc	cmpq	%rdx, %rax
00000000010424ff	ja	0x104269c
0000000001042505	movq	%rax, 0x68(%rsp)
000000000104250a	movq	0x48(%rsp), %rbp
000000000104250f	addq	$0x50, %rsp
0000000001042513	retq
0000000001042514	xorl	%eax, %eax
0000000001042516	jmp	0x10424f8
0000000001042518	movl	0x60(%rsp), %ebx
000000000104251c	movslq	%ebx, %rax
000000000104251f	addq	0x60(%rcx), %rax
0000000001042523	jmp	0x10424f8
0000000001042525	movq	%rax, 0x20(%rsp)
000000000104252a	callq	runtime.reflectOffsLock
000000000104252f	leaq	0x18b0a(%rip), %rax
0000000001042536	movq	%rax, (%rsp)
000000000104253a	movq	0x763ef(%rip), %rax
0000000001042541	movq	%rax, 0x8(%rsp)
0000000001042546	movl	0x60(%rsp), %eax
000000000104254a	movl	%eax, 0x10(%rsp)
000000000104254e	callq	runtime.mapaccess1_fast32
0000000001042553	movq	0x18(%rsp), %rax
0000000001042558	movq	(%rax), %rax
000000000104255b	movq	%rax, 0x38(%rsp)
0000000001042560	callq	runtime.reflectOffsUnlock
0000000001042565	movq	0x38(%rsp), %rax
000000000104256a	testq	%rax, %rax
000000000104256d	jne	0x1042686
0000000001042573	callq	runtime.printlock
0000000001042578	leaq	0x2946c(%rip), %rax
000000000104257f	movq	%rax, (%rsp)
0000000001042583	movq	$0x11, 0x8(%rsp)
000000000104258c	callq	runtime.printstring
0000000001042591	movl	0x60(%rsp), %eax
0000000001042595	movslq	%eax, %rax
0000000001042598	movq	%rax, (%rsp)
000000000104259c	callq	runtime.printhex
00000000010425a1	leaq	0x2868b(%rip), %rax
00000000010425a8	movq	%rax, (%rsp)
00000000010425ac	movq	$0x6, 0x8(%rsp)
00000000010425b5	callq	runtime.printstring
00000000010425ba	movq	0x20(%rsp), %rax
00000000010425bf	movq	%rax, (%rsp)
00000000010425c3	callq	runtime.printhex
00000000010425c8	leaq	0x2916b(%rip), %rax
00000000010425cf	movq	%rax, (%rsp)
00000000010425d3	movq	$0x10, 0x8(%rsp)
00000000010425dc	callq	runtime.printstring
00000000010425e1	callq	runtime.printunlock
00000000010425e6	leaq	runtime.firstmoduledata(%rip), %rax
00000000010425ed	jmp	0x1042678
00000000010425f2	movq	%rax, 0x40(%rsp)
00000000010425f7	movq	0xc8(%rax), %rcx
00000000010425fe	movq	%rcx, 0x30(%rsp)
0000000001042603	movq	0xd0(%rax), %rdx
000000000104260a	movq	%rdx, 0x28(%rsp)
000000000104260f	callq	runtime.printlock
0000000001042614	leaq	0x286ec(%rip), %rax
000000000104261b	movq	%rax, (%rsp)
000000000104261f	movq	$0x7, 0x8(%rsp)
0000000001042628	callq	runtime.printstring
000000000104262d	movq	0x30(%rsp), %rax
0000000001042632	movq	%rax, (%rsp)
0000000001042636	callq	runtime.printhex
000000000104263b	leaq	0x28797(%rip), %rax
0000000001042642	movq	%rax, (%rsp)
0000000001042646	movq	$0x8, 0x8(%rsp)
000000000104264f	callq	runtime.printstring
0000000001042654	movq	0x28(%rsp), %rax
0000000001042659	movq	%rax, (%rsp)
000000000104265d	callq	runtime.printhex
0000000001042662	callq	runtime.printnl
0000000001042667	callq	runtime.printunlock
000000000104266c	movq	0x40(%rsp), %rax
0000000001042671	movq	0x1c0(%rax), %rax
0000000001042678	testq	%rax, %rax
000000000104267b	jne	0x10425f2
0000000001042681	jmp	0x104274b
0000000001042686	movq	%rax, 0x68(%rsp)
000000000104268b	movq	0x48(%rsp), %rbp
0000000001042690	addq	$0x50, %rsp
0000000001042694	retq
0000000001042695	xorl	%ecx, %ecx
0000000001042697	jmp	0x10424a7
000000000104269c	movq	%rdx, 0x30(%rsp)
00000000010426a1	movq	0x60(%rcx), %rax
00000000010426a5	movq	%rax, 0x28(%rsp)
00000000010426aa	callq	runtime.printlock
00000000010426af	leaq	0x29335(%rip), %rax
00000000010426b6	movq	%rax, (%rsp)
00000000010426ba	movq	$0x11, 0x8(%rsp)
00000000010426c3	callq	runtime.printstring
00000000010426c8	movl	0x60(%rsp), %eax
00000000010426cc	movslq	%eax, %rax
00000000010426cf	movq	%rax, (%rsp)
00000000010426d3	callq	runtime.printhex
00000000010426d8	leaq	0x28e37(%rip), %rax
00000000010426df	movq	%rax, (%rsp)
00000000010426e3	movq	$0xe, 0x8(%rsp)
00000000010426ec	callq	runtime.printstring
00000000010426f1	movq	0x28(%rsp), %rax
00000000010426f6	movq	%rax, (%rsp)
00000000010426fa	callq	runtime.printhex
00000000010426ff	leaq	0x283b4(%rip), %rax
0000000001042706	movq	%rax, (%rsp)
000000000104270a	movq	$0x3, 0x8(%rsp)
0000000001042713	callq	runtime.printstring
0000000001042718	movq	0x30(%rsp), %rax
000000000104271d	movq	%rax, (%rsp)
0000000001042721	callq	runtime.printhex
0000000001042726	callq	runtime.printnl
000000000104272b	callq	runtime.printunlock
0000000001042730	leaq	0x2b1c6(%rip), %rax
0000000001042737	movq	%rax, (%rsp)
000000000104273b	movq	$0x21, 0x8(%rsp)
0000000001042744	callq	runtime.throw
0000000001042749	ud2
000000000104274b	leaq	0x2bece(%rip), %rax
0000000001042752	movq	%rax, (%rsp)
0000000001042756	movq	$0x2e, 0x8(%rsp)
000000000104275f	callq	runtime.throw
0000000001042764	ud2
0000000001042766	callq	runtime.morestack_noctxt
000000000104276b	jmp	"runtime.(*_type).textOff"
runtime.name.tagLen:
0000000001042770	movq	0x8(%rsp), %rax
0000000001042775	movzbl	(%rax), %ecx
0000000001042778	testb	$0x2, %cl
000000000104277b	jne	0x1042787
000000000104277d	movq	$0x0, 0x10(%rsp)
0000000001042786	retq
0000000001042787	movzwl	0x1(%rax), %ecx
000000000104278b	rolw	$0x8, %cx
000000000104278f	movzwl	%cx, %ecx
0000000001042792	movq	%rax, %rdx
0000000001042795	leaq	0x3(%rcx,%rax), %rbx
000000000104279a	leaq	0x4(%rcx,%rax), %rax
000000000104279f	leaq	0x1(%rdx), %rcx
00000000010427a3	testb	%al, (%rcx)
00000000010427a5	leaq	0x2(%rdx), %rcx
00000000010427a9	testb	%al, (%rcx)
00000000010427ab	movzbl	(%rbx), %ecx
00000000010427ae	movzbl	(%rax), %eax
00000000010427b1	shll	$0x8, %ecx
00000000010427b4	orl	%ecx, %eax
00000000010427b6	movzwl	%ax, %eax
00000000010427b9	movq	%rax, 0x10(%rsp)
00000000010427be	retq
00000000010427bf	int3
runtime.name.name:
00000000010427c0	xorps	%xmm0, %xmm0
00000000010427c3	movups	%xmm0, 0x10(%rsp)
00000000010427c8	movq	0x8(%rsp), %rax
00000000010427cd	testq	%rax, %rax
00000000010427d0	je	0x1042803
00000000010427d2	leaq	0x1(%rax), %rcx
00000000010427d6	testb	%al, (%rcx)
00000000010427d8	leaq	0x2(%rax), %rcx
00000000010427dc	testb	%al, (%rcx)
00000000010427de	movzwl	0x1(%rax), %ecx
00000000010427e2	rolw	$0x8, %cx
00000000010427e6	movzwl	%cx, %ecx
00000000010427e9	testq	%rcx, %rcx
00000000010427ec	jne	0x10427f4
00000000010427ee	movups	%xmm0, 0x10(%rsp)
00000000010427f3	retq
00000000010427f4	addq	$0x3, %rax
00000000010427f8	movq	%rax, 0x10(%rsp)
00000000010427fd	movq	%rcx, 0x18(%rsp)
0000000001042802	retq
0000000001042803	movups	%xmm0, 0x10(%rsp)
0000000001042808	retq
0000000001042809	int3
000000000104280a	int3
000000000104280b	int3
000000000104280c	int3
000000000104280d	int3
000000000104280e	int3
000000000104280f	int3
runtime.name.tag:
0000000001042810	movq	%gs:0x30, %rcx
0000000001042819	cmpq	0x10(%rcx), %rsp
000000000104281d	jbe	0x1042894
000000000104281f	subq	$0x18, %rsp
0000000001042823	movq	%rbp, 0x10(%rsp)
0000000001042828	leaq	0x10(%rsp), %rbp
000000000104282d	xorps	%xmm0, %xmm0
0000000001042830	movups	%xmm0, 0x28(%rsp)
0000000001042835	movq	0x20(%rsp), %rax
000000000104283a	movq	%rax, (%rsp)
000000000104283e	callq	runtime.name.tagLen
0000000001042843	movq	0x8(%rsp), %rax
0000000001042848	testq	%rax, %rax
000000000104284b	jne	0x104285f
000000000104284d	xorps	%xmm0, %xmm0
0000000001042850	movups	%xmm0, 0x28(%rsp)
0000000001042855	movq	0x10(%rsp), %rbp
000000000104285a	addq	$0x18, %rsp
000000000104285e	retq
000000000104285f	movq	0x20(%rsp), %rcx
0000000001042864	leaq	0x1(%rcx), %rdx
0000000001042868	testb	%al, (%rdx)
000000000104286a	leaq	0x2(%rcx), %rdx
000000000104286e	testb	%al, (%rdx)
0000000001042870	movzwl	0x1(%rcx), %edx
0000000001042874	rolw	$0x8, %dx
0000000001042878	movzwl	%dx, %edx
000000000104287b	leaq	0x5(%rdx,%rcx), %rcx
0000000001042880	movq	%rcx, 0x28(%rsp)
0000000001042885	movq	%rax, 0x30(%rsp)
000000000104288a	movq	0x10(%rsp), %rbp
000000000104288f	addq	$0x18, %rsp
0000000001042893	retq
0000000001042894	callq	runtime.morestack_noctxt
0000000001042899	jmp	runtime.name.tag
000000000104289e	int3
000000000104289f	int3
runtime.name.pkgPath:
00000000010428a0	movq	%gs:0x30, %rcx
00000000010428a9	cmpq	0x10(%rcx), %rsp
00000000010428ad	jbe	0x1042985
00000000010428b3	subq	$0x28, %rsp
00000000010428b7	movq	%rbp, 0x20(%rsp)
00000000010428bc	leaq	0x20(%rsp), %rbp
00000000010428c1	movq	0x30(%rsp), %rax
00000000010428c6	testq	%rax, %rax
00000000010428c9	je	0x10428d3
00000000010428cb	movzbl	(%rax), %ecx
00000000010428ce	testb	$0x4, %cl
00000000010428d1	jne	0x10428e5
00000000010428d3	xorps	%xmm0, %xmm0
00000000010428d6	movups	%xmm0, 0x38(%rsp)
00000000010428db	movq	0x20(%rsp), %rbp
00000000010428e0	addq	$0x28, %rsp
00000000010428e4	retq
00000000010428e5	leaq	0x1(%rax), %rcx
00000000010428e9	testb	%al, (%rcx)
00000000010428eb	leaq	0x2(%rax), %rcx
00000000010428ef	testb	%al, (%rcx)
00000000010428f1	movzwl	0x1(%rax), %ecx
00000000010428f5	movw	%cx, 0x1a(%rsp)
00000000010428fa	movq	%rax, (%rsp)
00000000010428fe	callq	runtime.name.tagLen
0000000001042903	movq	0x8(%rsp), %rax
0000000001042908	movl	$0x0, 0x1c(%rsp)
0000000001042910	movzwl	0x1a(%rsp), %ecx
0000000001042915	rolw	$0x8, %cx
0000000001042919	movzwl	%cx, %ecx
000000000104291c	leaq	0x3(%rcx), %rdx
0000000001042920	leaq	0x5(%rax,%rcx), %rcx
0000000001042925	testq	%rax, %rax
0000000001042928	cmovgq	%rcx, %rdx
000000000104292c	movq	0x30(%rsp), %rax
0000000001042931	leaq	(%rdx,%rax), %rcx
0000000001042935	testb	%al, (%rcx)
0000000001042937	leaq	0x1c(%rsp), %rbx
000000000104293c	cmpq	%rcx, %rbx
000000000104293f	je	0x1042948
0000000001042941	movl	(%rdx,%rax), %ecx
0000000001042944	movl	%ecx, 0x1c(%rsp)
0000000001042948	movq	%rax, (%rsp)
000000000104294c	movl	0x1c(%rsp), %eax
0000000001042950	movl	%eax, 0x8(%rsp)
0000000001042954	callq	runtime.resolveNameOff
0000000001042959	movq	0x10(%rsp), %rax
000000000104295e	movq	%rax, (%rsp)
0000000001042962	callq	runtime.name.name
0000000001042967	movq	0x8(%rsp), %rax
000000000104296c	movq	0x10(%rsp), %rcx
0000000001042971	movq	%rax, 0x38(%rsp)
0000000001042976	movq	%rcx, 0x40(%rsp)
000000000104297b	movq	0x20(%rsp), %rbp
0000000001042980	addq	$0x28, %rsp
0000000001042984	retq
0000000001042985	callq	runtime.morestack_noctxt
000000000104298a	jmp	runtime.name.pkgPath
000000000104298f	int3
runtime.typelinksinit:
0000000001042990	movq	%gs:0x30, %rcx
0000000001042999	leaq	-0x240(%rsp), %rax
00000000010429a1	cmpq	0x10(%rcx), %rax
00000000010429a5	jbe	0x1043055
00000000010429ab	subq	$0x2c0, %rsp
00000000010429b2	movq	%rbp, 0x2b8(%rsp)
00000000010429ba	leaq	0x2b8(%rsp), %rbp
00000000010429c2	xorps	%xmm0, %xmm0
00000000010429c5	leaq	0x108(%rsp), %rdi
00000000010429cd	movq	%rbp, -0x10(%rsp)
00000000010429d2	leaq	-0x10(%rsp), %rbp
00000000010429d7	callq	0x1049212
00000000010429dc	movq	(%rbp), %rbp
00000000010429e0	movups	%xmm0, 0xd8(%rsp)
00000000010429e8	movups	%xmm0, 0xe8(%rsp)
00000000010429f0	movups	%xmm0, 0xf8(%rsp)
00000000010429f8	cmpq	$0x0, 0x74360(%rip)
0000000001042a00	je	0x104303e
0000000001042a06	movq	0x7428b(%rip), %rax
0000000001042a0d	xorps	%xmm0, %xmm0
0000000001042a10	movups	%xmm0, 0x108(%rsp)
0000000001042a18	movups	%xmm0, 0x118(%rsp)
0000000001042a20	movups	%xmm0, 0x128(%rsp)
0000000001042a28	leaq	0x1c8(%rsp), %rdi
0000000001042a30	leaq	-0x10(%rdi), %rdi
0000000001042a34	movq	%rbp, -0x10(%rsp)
0000000001042a39	leaq	-0x10(%rsp), %rbp
0000000001042a3e	callq	0x10491f7
0000000001042a43	movq	(%rbp), %rbp
0000000001042a47	leaq	0x1c8(%rsp), %rcx
0000000001042a4f	movq	%rcx, 0x118(%rsp)
0000000001042a57	leaq	0x18762(%rip), %rcx
0000000001042a5e	movq	%rcx, (%rsp)
0000000001042a62	movq	%rax, 0x8(%rsp)
0000000001042a67	leaq	0x108(%rsp), %rax
0000000001042a6f	movq	%rax, 0x10(%rsp)
0000000001042a74	callq	runtime.makemap
0000000001042a79	movq	0x18(%rsp), %rax
0000000001042a7e	movq	runtime.modulesSlice(%rip), %rcx
0000000001042a85	testq	%rcx, %rcx
0000000001042a88	je	0x1043033
0000000001042a8e	movq	0x8(%rcx), %rdx
0000000001042a92	movq	0x10(%rcx), %rbx
0000000001042a96	movq	(%rcx), %rcx
0000000001042a99	testq	%rdx, %rdx
0000000001042a9c	jbe	0x104304e
0000000001042aa2	movq	%rax, 0x80(%rsp)
0000000001042aaa	movq	(%rcx), %rsi
0000000001042aad	decq	%rbx
0000000001042ab0	negq	%rbx
0000000001042ab3	sarq	$0x3f, %rbx
0000000001042ab7	andq	$0x8, %rbx
0000000001042abb	addq	%rbx, %rcx
0000000001042abe	movq	%rcx, 0xd0(%rsp)
0000000001042ac6	decq	%rdx
0000000001042ac9	movq	%rdx, 0x78(%rsp)
0000000001042ace	xorl	%ebx, %ebx
0000000001042ad0	jmp	0x1042cc7
0000000001042ad5	incq	%rsi
0000000001042ad8	cmpq	%rax, %rsi
0000000001042adb	jge	0x1042b9a
0000000001042ae1	movq	(%rdx,%rsi,8), %r8
0000000001042ae5	cmpq	%rbx, %r8
0000000001042ae8	jne	0x1042ad5
0000000001042aea	movq	0x60(%rsp), %r11
0000000001042aef	leaq	0x1(%r11), %r10
0000000001042af3	movq	0x80(%rsp), %rax
0000000001042afb	movq	0xd0(%rsp), %rcx
0000000001042b03	movq	0x78(%rsp), %rdx
0000000001042b08	movq	0x70(%rsp), %rbx
0000000001042b0d	movq	0xa0(%rsp), %rsi
0000000001042b15	movq	0xa8(%rsp), %rdi
0000000001042b1d	movq	0xc8(%rsp), %r8
0000000001042b25	movq	0x68(%rsp), %r9
0000000001042b2a	cmpq	%r9, %r10
0000000001042b2d	jge	0x1042cb7
0000000001042b33	movq	%r10, 0x60(%rsp)
0000000001042b38	movl	(%r8,%r10,4), %r11d
0000000001042b3c	movq	0x1b0(%rsi), %r12
0000000001042b43	testq	%r12, %r12
0000000001042b46	jne	0x1042c88
0000000001042b4c	movslq	%r11d, %r11
0000000001042b4f	addq	0xc8(%rsi), %r11
0000000001042b56	movq	%r11, 0x90(%rsp)
0000000001042b5e	movl	0x10(%r11), %ecx
0000000001042b62	movl	%ecx, 0x10(%rsp)
0000000001042b66	leaq	0x18653(%rip), %rcx
0000000001042b6d	movq	%rcx, (%rsp)
0000000001042b71	movq	%rax, 0x8(%rsp)
0000000001042b76	callq	runtime.mapaccess1_fast32
0000000001042b7b	movq	0x18(%rsp), %rax
0000000001042b80	movq	0x10(%rax), %rcx
0000000001042b84	movq	(%rax), %rdx
0000000001042b87	movq	0x8(%rax), %rax
0000000001042b8b	movq	0x90(%rsp), %rbx
0000000001042b93	xorl	%esi, %esi
0000000001042b95	jmp	0x1042ad8
0000000001042b9a	leaq	0x1(%rax), %rsi
0000000001042b9e	cmpq	%rcx, %rsi
0000000001042ba1	jg	0x1042c3a
0000000001042ba7	movq	%rdx, 0xc0(%rsp)
0000000001042baf	movq	%rsi, 0x58(%rsp)
0000000001042bb4	movq	%rcx, 0x50(%rsp)
0000000001042bb9	leaq	(%rdx,%rax,8), %rdi
0000000001042bbd	cmpl	$0x0, 0x9206c(%rip)
0000000001042bc4	jne	0x1042c30
0000000001042bc6	movq	%rbx, (%rdx,%rax,8)
0000000001042bca	movl	0x10(%rbx), %eax
0000000001042bcd	movl	%eax, 0x10(%rsp)
0000000001042bd1	leaq	0x185e8(%rip), %rax
0000000001042bd8	movq	%rax, (%rsp)
0000000001042bdc	movq	0x80(%rsp), %rcx
0000000001042be4	movq	%rcx, 0x8(%rsp)
0000000001042be9	callq	runtime.mapassign_fast32
0000000001042bee	movq	0x18(%rsp), %rdi
0000000001042bf3	movq	0x58(%rsp), %rax
0000000001042bf8	movq	%rax, 0x8(%rdi)
0000000001042bfc	movq	0x50(%rsp), %rax
0000000001042c01	movq	%rax, 0x10(%rdi)
0000000001042c05	cmpl	$0x0, 0x92024(%rip)
0000000001042c0c	jne	0x1042c1e
0000000001042c0e	movq	0xc0(%rsp), %rax
0000000001042c16	movq	%rax, (%rdi)
0000000001042c19	jmp	0x1042aea
0000000001042c1e	movq	0xc0(%rsp), %rax
0000000001042c26	callq	runtime.gcWriteBarrier
0000000001042c2b	jmp	0x1042aea
0000000001042c30	movq	%rbx, %rax
0000000001042c33	callq	runtime.gcWriteBarrier
0000000001042c38	jmp	0x1042bca
0000000001042c3a	movq	%rax, 0x48(%rsp)
0000000001042c3f	leaq	0x1f9fa(%rip), %rbx
0000000001042c46	movq	%rbx, (%rsp)
0000000001042c4a	movq	%rdx, 0x8(%rsp)
0000000001042c4f	movq	%rax, 0x10(%rsp)
0000000001042c54	movq	%rcx, 0x18(%rsp)
0000000001042c59	movq	%rsi, 0x20(%rsp)
0000000001042c5e	callq	runtime.growslice
0000000001042c63	movq	0x28(%rsp), %rdx
0000000001042c68	movq	0x30(%rsp), %rax
0000000001042c6d	movq	0x38(%rsp), %rcx
0000000001042c72	leaq	0x1(%rax), %rsi
0000000001042c76	movq	0x48(%rsp), %rax
0000000001042c7b	movq	0x90(%rsp), %rbx
0000000001042c83	jmp	0x1042ba7
0000000001042c88	movq	%r12, 0x8(%rsp)
0000000001042c8d	leaq	0x1846c(%rip), %rax
0000000001042c94	movq	%rax, (%rsp)
0000000001042c98	movl	%r11d, 0x10(%rsp)
0000000001042c9d	callq	runtime.mapaccess1_fast32
0000000001042ca2	movq	0x18(%rsp), %rax
0000000001042ca7	movq	(%rax), %r11
0000000001042caa	movq	0x80(%rsp), %rax
0000000001042cb2	jmp	0x1042b56
0000000001042cb7	cmpq	$0x0, 0x1b0(%rdi)
0000000001042cbf	je	0x1042d0c
0000000001042cc1	incq	%rbx
0000000001042cc4	movq	%rdi, %rsi
0000000001042cc7	cmpq	%rdx, %rbx
0000000001042cca	jge	0x1043023
0000000001042cd0	movq	%rbx, 0x70(%rsp)
0000000001042cd5	movq	%rsi, 0xa0(%rsp)
0000000001042cdd	movq	(%rcx,%rbx,8), %rdi
0000000001042ce1	movq	%rdi, 0xa8(%rsp)
0000000001042ce9	movq	0xf0(%rsi), %r8
0000000001042cf0	movq	%r8, 0xc8(%rsp)
0000000001042cf8	movq	0xf8(%rsi), %r9
0000000001042cff	movq	%r9, 0x68(%rsp)
0000000001042d04	xorl	%r10d, %r10d
0000000001042d07	jmp	0x1042b2a
0000000001042d0c	movq	0xf8(%rdi), %rax
0000000001042d13	leaq	0x183e6(%rip), %rcx
0000000001042d1a	movq	%rcx, (%rsp)
0000000001042d1e	movq	%rax, 0x8(%rsp)
0000000001042d23	movq	$0x0, 0x10(%rsp)
0000000001042d2c	callq	runtime.makemap
0000000001042d31	movq	0x18(%rsp), %rax
0000000001042d36	movq	0x75bbb(%rip), %rcx
0000000001042d3d	leaq	0x1(%rcx), %rdx
0000000001042d41	movq	runtime.pinnedTypemaps(%rip), %rbx
0000000001042d48	movq	0x75bb1(%rip), %rsi
0000000001042d4f	cmpq	%rsi, %rdx
0000000001042d52	jg	0x1042fb3
0000000001042d58	leaq	0x1(%rcx), %rdx
0000000001042d5c	movq	%rdx, 0x75b95(%rip)
0000000001042d63	leaq	(%rbx,%rcx,8), %rdi
0000000001042d67	cmpl	$0x0, 0x91ec2(%rip)
0000000001042d6e	jne	0x1042f95
0000000001042d74	movq	%rax, (%rbx,%rcx,8)
0000000001042d78	movq	0xa8(%rsp), %rcx
0000000001042d80	movq	%rax, 0x1b0(%rcx)
0000000001042d87	movq	0xf8(%rcx), %rax
0000000001042d8e	movq	%rax, 0x68(%rsp)
0000000001042d93	movq	0xf0(%rcx), %rdx
0000000001042d9a	movq	%rdx, 0xc8(%rsp)
0000000001042da2	xorl	%ebx, %ebx
0000000001042da4	jmp	0x1042ee4
0000000001042da9	movq	0x50(%rsp), %rbx
0000000001042dae	leaq	0x1(%rbx), %rdx
0000000001042db2	movq	0xc0(%rsp), %rax
0000000001042dba	movq	0x58(%rsp), %rcx
0000000001042dbf	cmpq	%rcx, %rdx
0000000001042dc2	jge	0x1042f61
0000000001042dc8	movq	%rdx, 0x50(%rsp)
0000000001042dcd	movq	(%rax,%rdx,8), %rcx
0000000001042dd1	movq	%rcx, 0xb0(%rsp)
0000000001042dd9	xorps	%xmm0, %xmm0
0000000001042ddc	movups	%xmm0, 0xd8(%rsp)
0000000001042de4	movups	%xmm0, 0xe8(%rsp)
0000000001042dec	movups	%xmm0, 0xf8(%rsp)
0000000001042df4	leaq	0x138(%rsp), %rdi
0000000001042dfc	leaq	-0x30(%rdi), %rdi
0000000001042e00	movq	%rbp, -0x10(%rsp)
0000000001042e05	leaq	-0x10(%rsp), %rbp
0000000001042e0a	callq	0x1049212
0000000001042e0f	movq	(%rbp), %rbp
0000000001042e13	leaq	0x138(%rsp), %rbx
0000000001042e1b	movq	%rbx, 0xe8(%rsp)
0000000001042e23	callq	runtime.fastrand
0000000001042e28	movl	(%rsp), %eax
0000000001042e2b	movl	%eax, 0xe4(%rsp)
0000000001042e32	movq	0xb8(%rsp), %rax
0000000001042e3a	movq	%rax, (%rsp)
0000000001042e3e	movq	0xb0(%rsp), %rcx
0000000001042e46	movq	%rcx, 0x8(%rsp)
0000000001042e4b	leaq	0xd8(%rsp), %rdx
0000000001042e53	movq	%rdx, 0x10(%rsp)
0000000001042e58	callq	runtime.typesEqual
0000000001042e5d	leaq	0x18(%rsp), %rax
0000000001042e62	cmpb	$0x0, (%rax)
0000000001042e65	je	0x1042da9
0000000001042e6b	movq	0xb0(%rsp), %rcx
0000000001042e73	movq	%rcx, 0x98(%rsp)
0000000001042e7b	movq	0xa8(%rsp), %rax
0000000001042e83	movq	0x1b0(%rax), %rdx
0000000001042e8a	movq	%rdx, 0x8(%rsp)
0000000001042e8f	leaq	0x1826a(%rip), %rdx
0000000001042e96	movq	%rdx, (%rsp)
0000000001042e9a	movl	0x44(%rsp), %ebx
0000000001042e9e	movl	%ebx, 0x10(%rsp)
0000000001042ea2	callq	runtime.mapassign_fast32
0000000001042ea7	movq	0x18(%rsp), %rdi
0000000001042eac	testb	%al, (%rdi)
0000000001042eae	cmpl	$0x0, 0x91d7b(%rip)
0000000001042eb5	jne	0x1042f4f
0000000001042ebb	movq	0x98(%rsp), %rax
0000000001042ec3	movq	%rax, (%rdi)
0000000001042ec6	movq	0x60(%rsp), %rsi
0000000001042ecb	leaq	0x1(%rsi), %rbx
0000000001042ecf	movq	0x68(%rsp), %rax
0000000001042ed4	movq	0xa8(%rsp), %rcx
0000000001042edc	movq	0xc8(%rsp), %rdx
0000000001042ee4	cmpq	%rax, %rbx
0000000001042ee7	jge	0x1042f6e
0000000001042eed	movq	%rbx, 0x60(%rsp)
0000000001042ef2	movl	(%rdx,%rbx,4), %eax
0000000001042ef5	movl	%eax, 0x44(%rsp)
0000000001042ef9	movslq	%eax, %rsi
0000000001042efc	addq	0xc8(%rcx), %rsi
0000000001042f03	movq	%rsi, 0xb8(%rsp)
0000000001042f0b	movl	0x10(%rsi), %edi
0000000001042f0e	movl	%edi, 0x10(%rsp)
0000000001042f12	leaq	0x182a7(%rip), %rdi
0000000001042f19	movq	%rdi, (%rsp)
0000000001042f1d	movq	0x80(%rsp), %r8
0000000001042f25	movq	%r8, 0x8(%rsp)
0000000001042f2a	callq	runtime.mapaccess1_fast32
0000000001042f2f	movq	0x18(%rsp), %rax
0000000001042f34	movq	0x8(%rax), %rcx
0000000001042f38	movq	%rcx, 0x58(%rsp)
0000000001042f3d	movq	(%rax), %rax
0000000001042f40	movq	%rax, 0xc0(%rsp)
0000000001042f48	xorl	%edx, %edx
0000000001042f4a	jmp	0x1042dbf
0000000001042f4f	movq	0x98(%rsp), %rax
0000000001042f57	callq	runtime.gcWriteBarrier
0000000001042f5c	jmp	0x1042ec6
0000000001042f61	movq	0xb8(%rsp), %rcx
0000000001042f69	jmp	0x1042e73
0000000001042f6e	movq	0x80(%rsp), %rax
0000000001042f76	movq	0xd0(%rsp), %rcx
0000000001042f7e	movq	0x78(%rsp), %rdx
0000000001042f83	movq	0x70(%rsp), %rbx
0000000001042f88	movq	0xa8(%rsp), %rdi
0000000001042f90	jmp	0x1042cc1
0000000001042f95	callq	runtime.gcWriteBarrier
0000000001042f9a	movq	0xa8(%rsp), %rcx
0000000001042fa2	leaq	0x1b0(%rcx), %rdi
0000000001042fa9	callq	runtime.gcWriteBarrier
0000000001042fae	jmp	0x1042d87
0000000001042fb3	movq	%rax, 0x88(%rsp)
0000000001042fbb	leaq	0x1813e(%rip), %rax
0000000001042fc2	movq	%rax, (%rsp)
0000000001042fc6	movq	%rbx, 0x8(%rsp)
0000000001042fcb	movq	%rcx, 0x10(%rsp)
0000000001042fd0	movq	%rsi, 0x18(%rsp)
0000000001042fd5	movq	%rdx, 0x20(%rsp)
0000000001042fda	callq	runtime.growslice
0000000001042fdf	movq	0x28(%rsp), %rax
0000000001042fe4	movq	0x30(%rsp), %rcx
0000000001042fe9	movq	0x38(%rsp), %rdx
0000000001042fee	movq	%rdx, 0x7590b(%rip)
0000000001042ff5	cmpl	$0x0, 0x91c34(%rip)
0000000001042ffc	jne	0x1043015
0000000001042ffe	movq	%rax, runtime.pinnedTypemaps(%rip)
0000000001043005	movq	%rax, %rbx
0000000001043008	movq	0x88(%rsp), %rax
0000000001043010	jmp	0x1042d58
0000000001043015	leaq	runtime.pinnedTypemaps(%rip), %rdi
000000000104301c	callq	runtime.gcWriteBarrier
0000000001043021	jmp	0x1043005
0000000001043023	movq	0x2b8(%rsp), %rbp
000000000104302b	addq	$0x2c0, %rsp
0000000001043032	retq
0000000001043033	xorl	%ebx, %ebx
0000000001043035	xorl	%edx, %edx
0000000001043037	xorl	%ecx, %ecx
0000000001043039	jmp	0x1042a99
000000000104303e	movq	0x2b8(%rsp), %rbp
0000000001043046	addq	$0x2c0, %rsp
000000000104304d	retq
000000000104304e	callq	runtime.panicindex
0000000001043053	ud2
0000000001043055	callq	runtime.morestack_noctxt
000000000104305a	jmp	runtime.typelinksinit
000000000104305f	int3
runtime.typesEqual:
0000000001043060	movq	%gs:0x30, %rcx
0000000001043069	leaq	-0xc8(%rsp), %rax
0000000001043071	cmpq	0x10(%rcx), %rax
0000000001043075	jbe	0x1043fd8
000000000104307b	subq	$0x148, %rsp
0000000001043082	movq	%rbp, 0x140(%rsp)
000000000104308a	leaq	0x140(%rsp), %rbp
0000000001043092	movq	0x150(%rsp), %rax
000000000104309a	movq	%rax, 0x130(%rsp)
00000000010430a2	movq	0x158(%rsp), %rcx
00000000010430aa	movq	%rcx, 0x138(%rsp)
00000000010430b2	leaq	0x17fe7(%rip), %rdx
00000000010430b9	movq	%rdx, (%rsp)
00000000010430bd	movq	0x160(%rsp), %rbx
00000000010430c5	movq	%rbx, 0x8(%rsp)
00000000010430ca	leaq	0x130(%rsp), %rsi
00000000010430d2	movq	%rsi, 0x10(%rsp)
00000000010430d7	callq	runtime.mapaccess2
00000000010430dc	leaq	0x20(%rsp), %rax
00000000010430e1	cmpb	$0x0, (%rax)
00000000010430e4	jne	0x1043f34
00000000010430ea	movq	0x150(%rsp), %rax
00000000010430f2	movq	%rax, 0x120(%rsp)
00000000010430fa	movq	0x158(%rsp), %rcx
0000000001043102	movq	%rcx, 0x128(%rsp)
000000000104310a	leaq	0x17f8f(%rip), %rdx
0000000001043111	movq	%rdx, (%rsp)
0000000001043115	movq	0x160(%rsp), %rdx
000000000104311d	movq	%rdx, 0x8(%rsp)
0000000001043122	leaq	0x120(%rsp), %rbx
000000000104312a	movq	%rbx, 0x10(%rsp)
000000000104312f	callq	runtime.mapassign
0000000001043134	movq	0x18(%rsp), %rax
0000000001043139	testb	%al, (%rax)
000000000104313b	movq	0x150(%rsp), %rax
0000000001043143	movq	0x158(%rsp), %rcx
000000000104314b	cmpq	%rcx, %rax
000000000104314e	je	0x1043f1c
0000000001043154	movzbl	0x17(%rax), %edx
0000000001043158	movl	%edx, %ebx
000000000104315a	andl	$0x1f, %edx
000000000104315d	movzbl	0x17(%rcx), %esi
0000000001043161	andl	$0x1f, %esi
0000000001043164	cmpb	%sil, %dl
0000000001043167	jne	0x1043f04
000000000104316d	movb	%bl, 0x2f(%rsp)
0000000001043171	movb	%dl, 0x2e(%rsp)
0000000001043175	movq	%rax, (%rsp)
0000000001043179	callq	"runtime.(*_type).string"
000000000104317e	movq	0x10(%rsp), %rax
0000000001043183	movq	%rax, 0x88(%rsp)
000000000104318b	movq	0x8(%rsp), %rcx
0000000001043190	movq	%rcx, 0x118(%rsp)
0000000001043198	movq	0x158(%rsp), %rdx
00000000010431a0	movq	%rdx, (%rsp)
00000000010431a4	callq	"runtime.(*_type).string"
00000000010431a9	movq	0x10(%rsp), %rax
00000000010431ae	movq	0x88(%rsp), %rcx
00000000010431b6	cmpq	%rcx, %rax
00000000010431b9	je	0x10431d3
00000000010431bb	movb	$0x0, 0x168(%rsp)
00000000010431c3	movq	0x140(%rsp), %rbp
00000000010431cb	addq	$0x148, %rsp
00000000010431d2	retq
00000000010431d3	movq	0x118(%rsp), %rax
00000000010431db	movq	%rax, (%rsp)
00000000010431df	movq	%rcx, 0x10(%rsp)
00000000010431e4	callq	runtime.memequal
00000000010431e9	leaq	0x18(%rsp), %rax
00000000010431ee	cmpb	$0x0, (%rax)
00000000010431f1	je	0x10431bb
00000000010431f3	movq	0x150(%rsp), %rax
00000000010431fb	movq	%rax, (%rsp)
00000000010431ff	callq	"runtime.(*_type).uncommon"
0000000001043204	movq	0x8(%rsp), %rax
0000000001043209	movq	%rax, 0xa8(%rsp)
0000000001043211	movq	0x158(%rsp), %rcx
0000000001043219	movq	%rcx, (%rsp)
000000000104321d	callq	"runtime.(*_type).uncommon"
0000000001043222	movq	0x8(%rsp), %rax
0000000001043227	movq	0xa8(%rsp), %rcx
000000000104322f	testq	%rcx, %rcx
0000000001043232	jne	0x1043e29
0000000001043238	testq	%rax, %rax
000000000104323b	jne	0x1043e26
0000000001043241	movzbl	0x2e(%rsp), %eax
0000000001043246	leal	-0x1(%rax), %ecx
0000000001043249	cmpb	$0xf, %cl
000000000104324c	jbe	0x1043e0e
0000000001043252	cmpb	$0x15, %al
0000000001043254	ja	0x10439fb
000000000104325a	cmpb	$0x12, %al
000000000104325c	jbe	0x104391f
0000000001043262	cmpb	$0x13, %al
0000000001043264	jne	0x1043510
000000000104326a	movq	0x158(%rsp), %rax
0000000001043272	movzwl	0x32(%rax), %ecx
0000000001043276	movq	0x150(%rsp), %rdx
000000000104327e	cmpw	%cx, 0x32(%rdx)
0000000001043282	jne	0x10434f8
0000000001043288	movzwl	0x30(%rdx), %ecx
000000000104328c	movzwl	0x30(%rax), %ebx
0000000001043290	cmpw	%cx, %bx
0000000001043293	jne	0x10434f8
0000000001043299	movzbl	0x14(%rdx), %esi
000000000104329d	testb	$0x1, %sil
00000000010432a1	movl	$0x38, %esi
00000000010432a6	movl	$0x48, %edi
00000000010432ab	cmovneq	%rdi, %rsi
00000000010432af	addq	%rdx, %rsi
00000000010432b2	testb	%al, (%rsi)
00000000010432b4	movzbl	0x14(%rax), %r8d
00000000010432b9	testb	$0x1, %r8b
00000000010432bd	movl	$0x38, %r8d
00000000010432c3	cmovneq	%rdi, %r8
00000000010432c7	addq	%rax, %r8
00000000010432ca	testb	%al, (%r8)
00000000010432cd	movq	%rsi, 0x110(%rsp)
00000000010432d5	movq	%r8, 0x108(%rsp)
00000000010432dd	movzwl	%cx, %ecx
00000000010432e0	movq	%rcx, 0x48(%rsp)
00000000010432e5	movzwl	%bx, %ebx
00000000010432e8	movq	%rbx, 0x38(%rsp)
00000000010432ed	movq	0x160(%rsp), %r9
00000000010432f5	xorl	%r10d, %r10d
00000000010432f8	jmp	0x1043349
00000000010432fa	movq	0x70(%rsp), %r11
00000000010432ff	leaq	0x1(%r11), %r10
0000000001043303	movq	0x48(%rsp), %r11
0000000001043308	movq	0x160(%rsp), %r12
0000000001043310	movq	0x38(%rsp), %r13
0000000001043315	movq	0x108(%rsp), %r14
000000000104331d	movq	0x110(%rsp), %r15
0000000001043325	movq	0x158(%rsp), %rax
000000000104332d	movq	%r11, %rcx
0000000001043330	movq	0x150(%rsp), %rdx
0000000001043338	movq	%r13, %rbx
000000000104333b	movq	%r15, %rsi
000000000104333e	movl	$0x48, %edi
0000000001043343	movq	%r14, %r8
0000000001043346	movq	%r12, %r9
0000000001043349	cmpq	%rcx, %r10
000000000104334c	jge	0x104339d
000000000104334e	movq	(%rsi,%r10,8), %r11
0000000001043352	cmpq	%rbx, %r10
0000000001043355	jae	0x1043f7d
000000000104335b	movq	%r10, 0x70(%rsp)
0000000001043360	movq	(%r8,%r10,8), %rax
0000000001043364	movq	%rax, 0x8(%rsp)
0000000001043369	movq	%r11, (%rsp)
000000000104336d	movq	%r9, 0x10(%rsp)
0000000001043372	callq	runtime.typesEqual
0000000001043377	leaq	0x18(%rsp), %rax
000000000104337c	cmpb	$0x0, (%rax)
000000000104337f	jne	0x10432fa
0000000001043385	movb	$0x0, 0x168(%rsp)
000000000104338d	movq	0x140(%rsp), %rbp
0000000001043395	addq	$0x148, %rsp
000000000104339c	retq
000000000104339d	movzbl	0x14(%rdx), %ecx
00000000010433a1	testb	$0x1, %cl
00000000010433a4	movl	$0x38, %ecx
00000000010433a9	cmovneq	%rdi, %rcx
00000000010433ad	addq	%rdx, %rcx
00000000010433b0	testb	%al, (%rcx)
00000000010433b2	movzwl	0x32(%rdx), %ebx
00000000010433b6	andl	$0x7fff, %ebx
00000000010433bc	movzwl	0x30(%rdx), %edx
00000000010433c0	movzwl	%dx, %esi
00000000010433c3	addl	%ebx, %edx
00000000010433c5	movzwl	%dx, %edx
00000000010433c8	cmpq	%rdx, %rsi
00000000010433cb	ja	0x1043f76
00000000010433d1	movzbl	0x14(%rax), %ebx
00000000010433d5	testb	$0x1, %bl
00000000010433d8	movl	$0x38, %ebx
00000000010433dd	cmovneq	%rdi, %rbx
00000000010433e1	addq	%rax, %rbx
00000000010433e4	testb	%al, (%rbx)
00000000010433e6	subq	%rsi, %rdx
00000000010433e9	leaq	-0x100000(%rsi), %rdi
00000000010433f0	sarq	$0x3f, %rdi
00000000010433f4	shlq	$0x3, %rsi
00000000010433f8	andq	%rdi, %rsi
00000000010433fb	addq	%rsi, %rcx
00000000010433fe	movzwl	0x32(%rax), %esi
0000000001043402	andl	$0x7fff, %esi
0000000001043408	movzwl	0x30(%rax), %eax
000000000104340c	movzwl	%ax, %edi
000000000104340f	addl	%esi, %eax
0000000001043411	movzwl	%ax, %eax
0000000001043414	cmpq	%rax, %rdi
0000000001043417	ja	0x1043f6f
000000000104341d	movq	%rdx, 0x40(%rsp)
0000000001043422	movq	%rcx, 0xb0(%rsp)
000000000104342a	subq	%rdi, %rax
000000000104342d	movq	%rax, 0x30(%rsp)
0000000001043432	movq	%rdi, %rsi
0000000001043435	shlq	$0x3, %rdi
0000000001043439	addq	$-0x100000, %rsi
0000000001043440	sarq	$0x3f, %rsi
0000000001043444	andq	%rsi, %rdi
0000000001043447	addq	%rdi, %rbx
000000000104344a	movq	%rbx, 0x90(%rsp)
0000000001043452	xorl	%esi, %esi
0000000001043454	jmp	0x1043490
0000000001043456	movq	0x68(%rsp), %rdi
000000000104345b	leaq	0x1(%rdi), %rsi
000000000104345f	movq	0x40(%rsp), %rdi
0000000001043464	movq	0x160(%rsp), %r8
000000000104346c	movq	0x30(%rsp), %r10
0000000001043471	movq	0x90(%rsp), %r11
0000000001043479	movq	0xb0(%rsp), %r12
0000000001043481	movq	%r10, %rax
0000000001043484	movq	%r12, %rcx
0000000001043487	movq	%rdi, %rdx
000000000104348a	movq	%r11, %rbx
000000000104348d	movq	%r8, %r9
0000000001043490	cmpq	%rdx, %rsi
0000000001043493	jge	0x10434e0
0000000001043495	movq	(%rcx,%rsi,8), %rdi
0000000001043499	cmpq	%rax, %rsi
000000000104349c	jae	0x1043f68
00000000010434a2	movq	%rsi, 0x68(%rsp)
00000000010434a7	movq	(%rbx,%rsi,8), %rax
00000000010434ab	movq	%rax, 0x8(%rsp)
00000000010434b0	movq	%rdi, (%rsp)
00000000010434b4	movq	%r9, 0x10(%rsp)
00000000010434b9	callq	runtime.typesEqual
00000000010434be	leaq	0x18(%rsp), %rax
00000000010434c3	cmpb	$0x0, (%rax)
00000000010434c6	jne	0x1043456
00000000010434c8	movb	$0x0, 0x168(%rsp)
00000000010434d0	movq	0x140(%rsp), %rbp
00000000010434d8	addq	$0x148, %rsp
00000000010434df	retq
00000000010434e0	movb	$0x1, 0x168(%rsp)
00000000010434e8	movq	0x140(%rsp), %rbp
00000000010434f0	addq	$0x148, %rsp
00000000010434f7	retq
00000000010434f8	movb	$0x0, 0x168(%rsp)
0000000001043500	movq	0x140(%rsp), %rbp
0000000001043508	addq	$0x148, %rsp
000000000104350f	retq
0000000001043510	cmpb	$0x14, %al
0000000001043512	jne	0x104388f
0000000001043518	movq	0x150(%rsp), %rax
0000000001043520	movq	0x30(%rax), %rcx
0000000001043524	movq	%rcx, (%rsp)
0000000001043528	callq	runtime.name.name
000000000104352d	movq	0x10(%rsp), %rax
0000000001043532	movq	%rax, 0x88(%rsp)
000000000104353a	movq	0x8(%rsp), %rcx
000000000104353f	movq	%rcx, 0x118(%rsp)
0000000001043547	movq	0x158(%rsp), %rdx
000000000104354f	movq	0x30(%rdx), %rbx
0000000001043553	movq	%rbx, (%rsp)
0000000001043557	callq	runtime.name.name
000000000104355c	movq	0x10(%rsp), %rax
0000000001043561	movq	0x88(%rsp), %rcx
0000000001043569	cmpq	%rcx, %rax
000000000104356c	je	0x1043586
000000000104356e	movb	$0x0, 0x168(%rsp)
0000000001043576	movq	0x140(%rsp), %rbp
000000000104357e	addq	$0x148, %rsp
0000000001043585	retq
0000000001043586	movq	0x118(%rsp), %rax
000000000104358e	movq	%rax, (%rsp)
0000000001043592	movq	%rcx, 0x10(%rsp)
0000000001043597	callq	runtime.memequal
000000000104359c	leaq	0x18(%rsp), %rax
00000000010435a1	cmpb	$0x0, (%rax)
00000000010435a4	je	0x104356e
00000000010435a6	movq	0x150(%rsp), %rcx
00000000010435ae	movq	0x40(%rcx), %rdx
00000000010435b2	movq	0x158(%rsp), %rbx
00000000010435ba	movq	0x40(%rbx), %rsi
00000000010435be	cmpq	%rsi, %rdx
00000000010435c1	jne	0x1043877
00000000010435c7	movq	%rdx, 0x88(%rsp)
00000000010435cf	xorl	%esi, %esi
00000000010435d1	jmp	0x10435fd
00000000010435d3	movq	0x60(%rsp), %rdi
00000000010435d8	leaq	0x1(%rdi), %rsi
00000000010435dc	movq	0x88(%rsp), %rdi
00000000010435e4	movq	0x158(%rsp), %r8
00000000010435ec	movq	0x150(%rsp), %r9
00000000010435f4	movq	%r9, %rcx
00000000010435f7	movq	%rdi, %rdx
00000000010435fa	movq	%r8, %rbx
00000000010435fd	cmpq	%rdx, %rsi
0000000001043600	jge	0x104385f
0000000001043606	movq	0x38(%rcx), %rdi
000000000104360a	movq	0x40(%rcx), %r8
000000000104360e	cmpq	%r8, %rsi
0000000001043611	jae	0x1043f61
0000000001043617	leaq	(%rdi,%rsi,8), %r8
000000000104361b	movq	0x38(%rbx), %r9
000000000104361f	movq	0x40(%rbx), %r10
0000000001043623	cmpq	%r10, %rsi
0000000001043626	jae	0x1043f5a
000000000104362c	movq	%r9, 0x100(%rsp)
0000000001043634	movq	%rdi, 0xf8(%rsp)
000000000104363c	movq	%rsi, 0x60(%rsp)
0000000001043641	movq	%r8, 0xb8(%rsp)
0000000001043649	movl	(%rdi,%rsi,8), %eax
000000000104364c	movl	%eax, 0x8(%rsp)
0000000001043650	movq	%r8, (%rsp)
0000000001043654	callq	runtime.resolveNameOff
0000000001043659	movq	0x10(%rsp), %rax
000000000104365e	movq	%rax, 0xf0(%rsp)
0000000001043666	movq	0x60(%rsp), %rcx
000000000104366b	movq	0x100(%rsp), %rdx
0000000001043673	movl	(%rdx,%rcx,8), %ebx
0000000001043676	movl	%ebx, 0x8(%rsp)
000000000104367a	leaq	(%rdx,%rcx,8), %rbx
000000000104367e	movq	%rbx, 0x98(%rsp)
0000000001043686	movq	%rbx, (%rsp)
000000000104368a	callq	runtime.resolveNameOff
000000000104368f	movq	0x10(%rsp), %rax
0000000001043694	movq	%rax, 0xe8(%rsp)
000000000104369c	movq	0xf0(%rsp), %rcx
00000000010436a4	movq	%rcx, (%rsp)
00000000010436a8	callq	runtime.name.name
00000000010436ad	movq	0x10(%rsp), %rax
00000000010436b2	movq	%rax, 0x80(%rsp)
00000000010436ba	movq	0x8(%rsp), %rcx
00000000010436bf	movq	%rcx, 0xe0(%rsp)
00000000010436c7	movq	0xe8(%rsp), %rdx
00000000010436cf	movq	%rdx, (%rsp)
00000000010436d3	callq	runtime.name.name
00000000010436d8	movq	0x10(%rsp), %rax
00000000010436dd	movq	0x80(%rsp), %rcx
00000000010436e5	cmpq	%rcx, %rax
00000000010436e8	jne	0x1043847
00000000010436ee	movq	0xe0(%rsp), %rax
00000000010436f6	movq	%rax, (%rsp)
00000000010436fa	movq	%rcx, 0x10(%rsp)
00000000010436ff	callq	runtime.memequal
0000000001043704	leaq	0x18(%rsp), %rax
0000000001043709	cmpb	$0x0, (%rax)
000000000104370c	je	0x1043847
0000000001043712	movq	0xf0(%rsp), %rax
000000000104371a	movq	%rax, (%rsp)
000000000104371e	callq	runtime.name.pkgPath
0000000001043723	movq	0x10(%rsp), %rax
0000000001043728	movq	%rax, 0x80(%rsp)
0000000001043730	movq	0x8(%rsp), %rcx
0000000001043735	movq	%rcx, 0x118(%rsp)
000000000104373d	movq	0xe8(%rsp), %rdx
0000000001043745	movq	%rdx, (%rsp)
0000000001043749	callq	runtime.name.pkgPath
000000000104374e	movq	0x10(%rsp), %rax
0000000001043753	movq	0x80(%rsp), %rcx
000000000104375b	cmpq	%rcx, %rax
000000000104375e	jne	0x104382f
0000000001043764	movq	0x118(%rsp), %rax
000000000104376c	movq	%rax, (%rsp)
0000000001043770	movq	%rcx, 0x10(%rsp)
0000000001043775	callq	runtime.memequal
000000000104377a	leaq	0x18(%rsp), %rax
000000000104377f	cmpb	$0x0, (%rax)
0000000001043782	je	0x104382f
0000000001043788	movq	0x60(%rsp), %rax
000000000104378d	movq	0xf8(%rsp), %rcx
0000000001043795	movl	0x4(%rcx,%rax,8), %ecx
0000000001043799	movl	%ecx, 0x8(%rsp)
000000000104379d	movq	0xb8(%rsp), %rcx
00000000010437a5	movq	%rcx, (%rsp)
00000000010437a9	callq	runtime.resolveTypeOff
00000000010437ae	movq	0x10(%rsp), %rax
00000000010437b3	movq	%rax, 0xc0(%rsp)
00000000010437bb	movq	0x60(%rsp), %rcx
00000000010437c0	movq	0x100(%rsp), %rdx
00000000010437c8	movl	0x4(%rdx,%rcx,8), %edx
00000000010437cc	movl	%edx, 0x8(%rsp)
00000000010437d0	movq	0x98(%rsp), %rdx
00000000010437d8	movq	%rdx, (%rsp)
00000000010437dc	callq	runtime.resolveTypeOff
00000000010437e1	movq	0x10(%rsp), %rax
00000000010437e6	movq	0xc0(%rsp), %rcx
00000000010437ee	movq	%rcx, (%rsp)
00000000010437f2	movq	%rax, 0x8(%rsp)
00000000010437f7	movq	0x160(%rsp), %rax
00000000010437ff	movq	%rax, 0x10(%rsp)
0000000001043804	callq	runtime.typesEqual
0000000001043809	leaq	0x18(%rsp), %rax
000000000104380e	cmpb	$0x0, (%rax)
0000000001043811	jne	0x10435d3
0000000001043817	movb	$0x0, 0x168(%rsp)
000000000104381f	movq	0x140(%rsp), %rbp
0000000001043827	addq	$0x148, %rsp
000000000104382e	retq
000000000104382f	movb	$0x0, 0x168(%rsp)
0000000001043837	movq	0x140(%rsp), %rbp
000000000104383f	addq	$0x148, %rsp
0000000001043846	retq
0000000001043847	movb	$0x0, 0x168(%rsp)
000000000104384f	movq	0x140(%rsp), %rbp
0000000001043857	addq	$0x148, %rsp
000000000104385e	retq
000000000104385f	movb	$0x1, 0x168(%rsp)
0000000001043867	movq	0x140(%rsp), %rbp
000000000104386f	addq	$0x148, %rsp
0000000001043876	retq
0000000001043877	movb	$0x0, 0x168(%rsp)
000000000104387f	movq	0x140(%rsp), %rbp
0000000001043887	addq	$0x148, %rsp
000000000104388e	retq
000000000104388f	movq	0x150(%rsp), %rax
0000000001043897	movq	0x30(%rax), %rcx
000000000104389b	movq	0x158(%rsp), %rdx
00000000010438a3	movq	0x30(%rdx), %rbx
00000000010438a7	movq	%rbx, 0x8(%rsp)
00000000010438ac	movq	%rcx, (%rsp)
00000000010438b0	movq	0x160(%rsp), %rcx
00000000010438b8	movq	%rcx, 0x10(%rsp)
00000000010438bd	callq	runtime.typesEqual
00000000010438c2	leaq	0x18(%rsp), %rax
00000000010438c7	cmpb	$0x0, (%rax)
00000000010438ca	jne	0x10438e5
00000000010438cc	xorl	%eax, %eax
00000000010438ce	movb	%al, 0x168(%rsp)
00000000010438d5	movq	0x140(%rsp), %rbp
00000000010438dd	addq	$0x148, %rsp
00000000010438e4	retq
00000000010438e5	movq	0x150(%rsp), %rax
00000000010438ed	movq	0x38(%rax), %rax
00000000010438f1	movq	0x158(%rsp), %rcx
00000000010438f9	movq	0x38(%rcx), %rcx
00000000010438fd	movq	%rcx, 0x8(%rsp)
0000000001043902	movq	%rax, (%rsp)
0000000001043906	movq	0x160(%rsp), %rax
000000000104390e	movq	%rax, 0x10(%rsp)
0000000001043913	callq	runtime.typesEqual
0000000001043918	movzbl	0x18(%rsp), %eax
000000000104391d	jmp	0x10438ce
000000000104391f	cmpb	$0x11, %al
0000000001043921	je	0x1043988
0000000001043923	cmpb	$0x12, %al
0000000001043925	jne	0x1043f84
000000000104392b	movq	0x158(%rsp), %rax
0000000001043933	movq	0x38(%rax), %rcx
0000000001043937	movq	0x150(%rsp), %rdx
000000000104393f	cmpq	%rcx, 0x38(%rdx)
0000000001043943	je	0x104395e
0000000001043945	xorl	%eax, %eax
0000000001043947	movb	%al, 0x168(%rsp)
000000000104394e	movq	0x140(%rsp), %rbp
0000000001043956	addq	$0x148, %rsp
000000000104395d	retq
000000000104395e	movq	0x30(%rdx), %rcx
0000000001043962	movq	0x30(%rax), %rax
0000000001043966	movq	%rax, 0x8(%rsp)
000000000104396b	movq	%rcx, (%rsp)
000000000104396f	movq	0x160(%rsp), %rax
0000000001043977	movq	%rax, 0x10(%rsp)
000000000104397c	callq	runtime.typesEqual
0000000001043981	movzbl	0x18(%rsp), %eax
0000000001043986	jmp	0x1043947
0000000001043988	movq	0x150(%rsp), %rax
0000000001043990	movq	0x30(%rax), %rcx
0000000001043994	movq	0x158(%rsp), %rdx
000000000104399c	movq	0x30(%rdx), %rbx
00000000010439a0	movq	%rbx, 0x8(%rsp)
00000000010439a5	movq	%rcx, (%rsp)
00000000010439a9	movq	0x160(%rsp), %rcx
00000000010439b1	movq	%rcx, 0x10(%rsp)
00000000010439b6	callq	runtime.typesEqual
00000000010439bb	leaq	0x18(%rsp), %rax
00000000010439c0	cmpb	$0x0, (%rax)
00000000010439c3	je	0x10439f7
00000000010439c5	movq	0x158(%rsp), %rax
00000000010439cd	movq	0x40(%rax), %rax
00000000010439d1	movq	0x150(%rsp), %rcx
00000000010439d9	cmpq	%rax, 0x40(%rcx)
00000000010439dd	sete	%al
00000000010439e0	movb	%al, 0x168(%rsp)
00000000010439e7	movq	0x140(%rsp), %rbp
00000000010439ef	addq	$0x148, %rsp
00000000010439f6	retq
00000000010439f7	xorl	%eax, %eax
00000000010439f9	jmp	0x10439e0
00000000010439fb	cmpb	$0x17, %al
00000000010439fd	ja	0x1043aa5
0000000001043a03	cmpb	$0x16, %al
0000000001043a05	jne	0x1043a56
0000000001043a07	movq	0x150(%rsp), %rax
0000000001043a0f	movq	0x30(%rax), %rax
0000000001043a13	movq	0x158(%rsp), %rcx
0000000001043a1b	movq	0x30(%rcx), %rcx
0000000001043a1f	movq	%rcx, 0x8(%rsp)
0000000001043a24	movq	%rax, (%rsp)
0000000001043a28	movq	0x160(%rsp), %rax
0000000001043a30	movq	%rax, 0x10(%rsp)
0000000001043a35	callq	runtime.typesEqual
0000000001043a3a	movzbl	0x18(%rsp), %eax
0000000001043a3f	movb	%al, 0x168(%rsp)
0000000001043a46	movq	0x140(%rsp), %rbp
0000000001043a4e	addq	$0x148, %rsp
0000000001043a55	retq
0000000001043a56	movq	0x150(%rsp), %rax
0000000001043a5e	movq	0x30(%rax), %rax
0000000001043a62	movq	0x158(%rsp), %rcx
0000000001043a6a	movq	0x30(%rcx), %rcx
0000000001043a6e	movq	%rcx, 0x8(%rsp)
0000000001043a73	movq	%rax, (%rsp)
0000000001043a77	movq	0x160(%rsp), %rax
0000000001043a7f	movq	%rax, 0x10(%rsp)
0000000001043a84	callq	runtime.typesEqual
0000000001043a89	movzbl	0x18(%rsp), %eax
0000000001043a8e	movb	%al, 0x168(%rsp)
0000000001043a95	movq	0x140(%rsp), %rbp
0000000001043a9d	addq	$0x148, %rsp
0000000001043aa4	retq
0000000001043aa5	cmpb	$0x18, %al
0000000001043aa7	jne	0x1043ac1
0000000001043aa9	movb	$0x1, 0x168(%rsp)
0000000001043ab1	movq	0x140(%rsp), %rbp
0000000001043ab9	addq	$0x148, %rsp
0000000001043ac0	retq
0000000001043ac1	cmpb	$0x19, %al
0000000001043ac3	jne	0x1043e01
0000000001043ac9	movq	0x158(%rsp), %rax
0000000001043ad1	movq	0x40(%rax), %rcx
0000000001043ad5	movq	0x150(%rsp), %rdx
0000000001043add	cmpq	%rcx, 0x40(%rdx)
0000000001043ae1	jne	0x1043de9
0000000001043ae7	movq	0x30(%rdx), %rax
0000000001043aeb	movq	%rax, (%rsp)
0000000001043aef	callq	runtime.name.name
0000000001043af4	movq	0x10(%rsp), %rax
0000000001043af9	movq	%rax, 0x88(%rsp)
0000000001043b01	movq	0x8(%rsp), %rcx
0000000001043b06	movq	%rcx, 0x118(%rsp)
0000000001043b0e	movq	0x158(%rsp), %rdx
0000000001043b16	movq	0x30(%rdx), %rbx
0000000001043b1a	movq	%rbx, (%rsp)
0000000001043b1e	callq	runtime.name.name
0000000001043b23	movq	0x10(%rsp), %rax
0000000001043b28	movq	0x88(%rsp), %rcx
0000000001043b30	cmpq	%rcx, %rax
0000000001043b33	je	0x1043b4d
0000000001043b35	movb	$0x0, 0x168(%rsp)
0000000001043b3d	movq	0x140(%rsp), %rbp
0000000001043b45	addq	$0x148, %rsp
0000000001043b4c	retq
0000000001043b4d	movq	0x118(%rsp), %rax
0000000001043b55	movq	%rax, (%rsp)
0000000001043b59	movq	%rcx, 0x10(%rsp)
0000000001043b5e	callq	runtime.memequal
0000000001043b63	leaq	0x18(%rsp), %rax
0000000001043b68	cmpb	$0x0, (%rax)
0000000001043b6b	je	0x1043b35
0000000001043b6d	movq	0x150(%rsp), %rcx
0000000001043b75	movq	0x40(%rcx), %rdx
0000000001043b79	movq	%rdx, 0x88(%rsp)
0000000001043b81	movq	0x158(%rsp), %rbx
0000000001043b89	xorl	%esi, %esi
0000000001043b8b	jmp	0x1043bb7
0000000001043b8d	movq	0x58(%rsp), %rdi
0000000001043b92	leaq	0x1(%rdi), %rsi
0000000001043b96	movq	0x88(%rsp), %rdi
0000000001043b9e	movq	0x158(%rsp), %r8
0000000001043ba6	movq	0x150(%rsp), %r9
0000000001043bae	movq	%r9, %rcx
0000000001043bb1	movq	%rdi, %rdx
0000000001043bb4	movq	%r8, %rbx
0000000001043bb7	cmpq	%rdx, %rsi
0000000001043bba	jge	0x1043dd1
0000000001043bc0	movq	0x40(%rcx), %rdi
0000000001043bc4	movq	0x38(%rcx), %r8
0000000001043bc8	cmpq	%rdi, %rsi
0000000001043bcb	jae	0x1043f53
0000000001043bd1	leaq	(%rsi,%rsi,2), %rdi
0000000001043bd5	movq	0x40(%rbx), %r9
0000000001043bd9	movq	0x38(%rbx), %r10
0000000001043bdd	cmpq	%r9, %rsi
0000000001043be0	jae	0x1043f4c
0000000001043be6	movq	%r10, 0xd8(%rsp)
0000000001043bee	movq	%rdi, 0x80(%rsp)
0000000001043bf6	movq	%rsi, 0x58(%rsp)
0000000001043bfb	movq	%r8, 0xd0(%rsp)
0000000001043c03	movq	(%r8,%rdi,8), %rax
0000000001043c07	movq	%rax, (%rsp)
0000000001043c0b	callq	runtime.name.name
0000000001043c10	movq	0x8(%rsp), %rax
0000000001043c15	movq	%rax, 0x118(%rsp)
0000000001043c1d	movq	0x10(%rsp), %rcx
0000000001043c22	movq	%rcx, 0x78(%rsp)
0000000001043c27	movq	0x80(%rsp), %rdx
0000000001043c2f	movq	0xd8(%rsp), %rbx
0000000001043c37	movq	(%rbx,%rdx,8), %rsi
0000000001043c3b	movq	%rsi, (%rsp)
0000000001043c3f	callq	runtime.name.name
0000000001043c44	movq	0x10(%rsp), %rax
0000000001043c49	movq	0x78(%rsp), %rcx
0000000001043c4e	cmpq	%rcx, %rax
0000000001043c51	jne	0x1043db9
0000000001043c57	movq	0x118(%rsp), %rax
0000000001043c5f	movq	%rax, (%rsp)
0000000001043c63	movq	%rcx, 0x10(%rsp)
0000000001043c68	callq	runtime.memequal
0000000001043c6d	leaq	0x18(%rsp), %rax
0000000001043c72	cmpb	$0x0, (%rax)
0000000001043c75	je	0x1043db9
0000000001043c7b	movq	0x80(%rsp), %rax
0000000001043c83	movq	0xd0(%rsp), %rcx
0000000001043c8b	movq	0x8(%rcx,%rax,8), %rdx
0000000001043c90	movq	0xd8(%rsp), %rbx
0000000001043c98	movq	0x8(%rbx,%rax,8), %rsi
0000000001043c9d	movq	%rsi, 0x8(%rsp)
0000000001043ca2	movq	%rdx, (%rsp)
0000000001043ca6	movq	0x160(%rsp), %rdx
0000000001043cae	movq	%rdx, 0x10(%rsp)
0000000001043cb3	callq	runtime.typesEqual
0000000001043cb8	leaq	0x18(%rsp), %rax
0000000001043cbd	cmpb	$0x0, (%rax)
0000000001043cc0	je	0x1043da1
0000000001043cc6	movq	0x80(%rsp), %rax
0000000001043cce	movq	0xd0(%rsp), %rcx
0000000001043cd6	movq	(%rcx,%rax,8), %rdx
0000000001043cda	movq	%rdx, (%rsp)
0000000001043cde	callq	runtime.name.tag
0000000001043ce3	movq	0x10(%rsp), %rax
0000000001043ce8	movq	%rax, 0x78(%rsp)
0000000001043ced	movq	0x8(%rsp), %rcx
0000000001043cf2	movq	%rcx, 0x118(%rsp)
0000000001043cfa	movq	0x80(%rsp), %rdx
0000000001043d02	movq	0xd8(%rsp), %rbx
0000000001043d0a	movq	(%rbx,%rdx,8), %rsi
0000000001043d0e	movq	%rsi, (%rsp)
0000000001043d12	callq	runtime.name.tag
0000000001043d17	movq	0x10(%rsp), %rax
0000000001043d1c	movq	0x78(%rsp), %rcx
0000000001043d21	cmpq	%rcx, %rax
0000000001043d24	jne	0x1043d89
0000000001043d26	movq	0x118(%rsp), %rax
0000000001043d2e	movq	%rax, (%rsp)
0000000001043d32	movq	%rcx, 0x10(%rsp)
0000000001043d37	callq	runtime.memequal
0000000001043d3c	leaq	0x18(%rsp), %rax
0000000001043d41	cmpb	$0x0, (%rax)
0000000001043d44	je	0x1043d89
0000000001043d46	movq	0x80(%rsp), %rcx
0000000001043d4e	movq	0xd0(%rsp), %rdx
0000000001043d56	movq	0x10(%rdx,%rcx,8), %rdx
0000000001043d5b	movq	0xd8(%rsp), %rbx
0000000001043d63	movq	0x10(%rbx,%rcx,8), %rcx
0000000001043d68	cmpq	%rcx, %rdx
0000000001043d6b	je	0x1043b8d
0000000001043d71	movb	$0x0, 0x168(%rsp)
0000000001043d79	movq	0x140(%rsp), %rbp
0000000001043d81	addq	$0x148, %rsp
0000000001043d88	retq
0000000001043d89	movb	$0x0, 0x168(%rsp)
0000000001043d91	movq	0x140(%rsp), %rbp
0000000001043d99	addq	$0x148, %rsp
0000000001043da0	retq
0000000001043da1	movb	$0x0, 0x168(%rsp)
0000000001043da9	movq	0x140(%rsp), %rbp
0000000001043db1	addq	$0x148, %rsp
0000000001043db8	retq
0000000001043db9	movb	$0x0, 0x168(%rsp)
0000000001043dc1	movq	0x140(%rsp), %rbp
0000000001043dc9	addq	$0x148, %rsp
0000000001043dd0	retq
0000000001043dd1	movb	$0x1, 0x168(%rsp)
0000000001043dd9	movq	0x140(%rsp), %rbp
0000000001043de1	addq	$0x148, %rsp
0000000001043de8	retq
0000000001043de9	movb	$0x0, 0x168(%rsp)
0000000001043df1	movq	0x140(%rsp), %rbp
0000000001043df9	addq	$0x148, %rsp
0000000001043e00	retq
0000000001043e01	cmpb	$0x1a, %al
0000000001043e03	je	0x1043aa9
0000000001043e09	jmp	0x1043f84
0000000001043e0e	movb	$0x1, 0x168(%rsp)
0000000001043e16	movq	0x140(%rsp), %rbp
0000000001043e1e	addq	$0x148, %rsp
0000000001043e25	retq
0000000001043e26	testq	%rcx, %rcx
0000000001043e29	je	0x1043e30
0000000001043e2b	testq	%rax, %rax
0000000001043e2e	jne	0x1043e48
0000000001043e30	movb	$0x0, 0x168(%rsp)
0000000001043e38	movq	0x140(%rsp), %rbp
0000000001043e40	addq	$0x148, %rsp
0000000001043e47	retq
0000000001043e48	movq	%rax, 0xa0(%rsp)
0000000001043e50	movl	(%rcx), %eax
0000000001043e52	movl	%eax, 0x8(%rsp)
0000000001043e56	movq	0x150(%rsp), %rax
0000000001043e5e	movq	%rax, (%rsp)
0000000001043e62	callq	"runtime.(*_type).nameOff"
0000000001043e67	movq	0x10(%rsp), %rax
0000000001043e6c	movq	%rax, (%rsp)
0000000001043e70	callq	runtime.name.name
0000000001043e75	movq	0x10(%rsp), %rax
0000000001043e7a	movq	%rax, 0x50(%rsp)
0000000001043e7f	movq	0x8(%rsp), %rcx
0000000001043e84	movq	%rcx, 0xc8(%rsp)
0000000001043e8c	movq	0xa0(%rsp), %rdx
0000000001043e94	movl	(%rdx), %edx
0000000001043e96	movl	%edx, 0x8(%rsp)
0000000001043e9a	movq	0x158(%rsp), %rdx
0000000001043ea2	movq	%rdx, (%rsp)
0000000001043ea6	callq	"runtime.(*_type).nameOff"
0000000001043eab	movq	0x10(%rsp), %rax
0000000001043eb0	movq	%rax, (%rsp)
0000000001043eb4	callq	runtime.name.name
0000000001043eb9	movq	0x10(%rsp), %rax
0000000001043ebe	movq	0x50(%rsp), %rcx
0000000001043ec3	cmpq	%rcx, %rax
0000000001043ec6	jne	0x1043eec
0000000001043ec8	movq	0xc8(%rsp), %rax
0000000001043ed0	movq	%rax, (%rsp)
0000000001043ed4	movq	%rcx, 0x10(%rsp)
0000000001043ed9	callq	runtime.memequal
0000000001043ede	leaq	0x18(%rsp), %rax
0000000001043ee3	cmpb	$0x0, (%rax)
0000000001043ee6	jne	0x1043241
0000000001043eec	movb	$0x0, 0x168(%rsp)
0000000001043ef4	movq	0x140(%rsp), %rbp
0000000001043efc	addq	$0x148, %rsp
0000000001043f03	retq
0000000001043f04	movb	$0x0, 0x168(%rsp)
0000000001043f0c	movq	0x140(%rsp), %rbp
0000000001043f14	addq	$0x148, %rsp
0000000001043f1b	retq
0000000001043f1c	movb	$0x1, 0x168(%rsp)
0000000001043f24	movq	0x140(%rsp), %rbp
0000000001043f2c	addq	$0x148, %rsp
0000000001043f33	retq
0000000001043f34	movb	$0x1, 0x168(%rsp)
0000000001043f3c	movq	0x140(%rsp), %rbp
0000000001043f44	addq	$0x148, %rsp
0000000001043f4b	retq
0000000001043f4c	callq	runtime.panicindex
0000000001043f51	ud2
0000000001043f53	callq	runtime.panicindex
0000000001043f58	ud2
0000000001043f5a	callq	runtime.panicindex
0000000001043f5f	ud2
0000000001043f61	callq	runtime.panicindex
0000000001043f66	ud2
0000000001043f68	callq	runtime.panicindex
0000000001043f6d	ud2
0000000001043f6f	callq	runtime.panicslice
0000000001043f74	ud2
0000000001043f76	callq	runtime.panicslice
0000000001043f7b	ud2
0000000001043f7d	callq	runtime.panicindex
0000000001043f82	ud2
0000000001043f84	callq	runtime.printlock
0000000001043f89	leaq	0x293d0(%rip), %rax
0000000001043f90	movq	%rax, (%rsp)
0000000001043f94	movq	$0x1e, 0x8(%rsp)
0000000001043f9d	callq	runtime.printstring
0000000001043fa2	movzbl	0x2f(%rsp), %eax
0000000001043fa7	andl	$0x1f, %eax
0000000001043faa	movq	%rax, (%rsp)
0000000001043fae	callq	runtime.printuint
0000000001043fb3	callq	runtime.printnl
0000000001043fb8	callq	runtime.printunlock
0000000001043fbd	leaq	0x2905e(%rip), %rax
0000000001043fc4	movq	%rax, (%rsp)
0000000001043fc8	movq	$0x1d, 0x8(%rsp)
0000000001043fd1	callq	runtime.throw
0000000001043fd6	ud2
0000000001043fd8	callq	runtime.morestack_noctxt
0000000001043fdd	jmp	runtime.typesEqual
0000000001043fe2	int3
0000000001043fe3	int3
0000000001043fe4	int3
0000000001043fe5	int3
0000000001043fe6	int3
0000000001043fe7	int3
0000000001043fe8	int3
0000000001043fe9	int3
0000000001043fea	int3
0000000001043feb	int3
0000000001043fec	int3
0000000001043fed	int3
0000000001043fee	int3
0000000001043fef	int3
runtime.writeErr:
0000000001043ff0	movq	%gs:0x30, %rcx
0000000001043ff9	cmpq	0x10(%rcx), %rsp
0000000001043ffd	jbe	0x1044043
0000000001043fff	subq	$0x28, %rsp
0000000001044003	movq	%rbp, 0x20(%rsp)
0000000001044008	leaq	0x20(%rsp), %rbp
000000000104400d	movq	0x38(%rsp), %rax
0000000001044012	testq	%rax, %rax
0000000001044015	jbe	0x104403c
0000000001044017	movq	0x30(%rsp), %rcx
000000000104401c	movq	%rcx, 0x8(%rsp)
0000000001044021	movq	$0x2, (%rsp)
0000000001044029	movl	%eax, 0x10(%rsp)
000000000104402d	callq	runtime.write
0000000001044032	movq	0x20(%rsp), %rbp
0000000001044037	addq	$0x28, %rsp
000000000104403b	retq
000000000104403c	callq	runtime.panicindex
0000000001044041	ud2
0000000001044043	callq	runtime.morestack_noctxt
0000000001044048	jmp	runtime.writeErr
000000000104404a	int3
000000000104404b	int3
000000000104404c	int3
000000000104404d	int3
000000000104404e	int3
000000000104404f	int3
runtime.cgoCheckWriteBarrier.func1:
0000000001044050	movq	%gs:0x30, %rcx
0000000001044059	cmpq	0x10(%rcx), %rsp
000000000104405d	jbe	0x10440fb
0000000001044063	subq	$0x28, %rsp
0000000001044067	movq	%rbp, 0x20(%rsp)
000000000104406c	leaq	0x20(%rsp), %rbp
0000000001044071	movq	0x10(%rdx), %rax
0000000001044075	movq	0x8(%rdx), %rcx
0000000001044079	movq	%rcx, 0x10(%rsp)
000000000104407e	movq	%rax, 0x18(%rsp)
0000000001044083	callq	runtime.printlock
0000000001044088	leaq	0x27ec9(%rip), %rax
000000000104408f	movq	%rax, (%rsp)
0000000001044093	movq	$0x14, 0x8(%rsp)
000000000104409c	callq	runtime.printstring
00000000010440a1	movq	0x10(%rsp), %rax
00000000010440a6	movq	%rax, (%rsp)
00000000010440aa	callq	runtime.printhex
00000000010440af	leaq	0x279cf(%rip), %rax
00000000010440b6	movq	%rax, (%rsp)
00000000010440ba	movq	$0x12, 0x8(%rsp)
00000000010440c3	callq	runtime.printstring
00000000010440c8	movq	0x18(%rsp), %rax
00000000010440cd	movq	%rax, (%rsp)
00000000010440d1	callq	runtime.printhex
00000000010440d6	callq	runtime.printnl
00000000010440db	callq	runtime.printunlock
00000000010440e0	leaq	0x29ae1(%rip), %rax
00000000010440e7	movq	%rax, (%rsp)
00000000010440eb	movq	$0x24, 0x8(%rsp)
00000000010440f4	callq	runtime.throw
00000000010440f9	ud2
00000000010440fb	callq	runtime.morestack
0000000001044100	jmp	runtime.cgoCheckWriteBarrier.func1
0000000001044105	int3
0000000001044106	int3
0000000001044107	int3
0000000001044108	int3
0000000001044109	int3
000000000104410a	int3
000000000104410b	int3
000000000104410c	int3
000000000104410d	int3
000000000104410e	int3
000000000104410f	int3
runtime.cgoCheckTypedBlock.func1:
0000000001044110	movq	%gs:0x30, %rcx
0000000001044119	cmpq	0x10(%rcx), %rsp
000000000104411d	jbe	0x104415f
000000000104411f	subq	$0x28, %rsp
0000000001044123	movq	%rbp, 0x20(%rsp)
0000000001044128	leaq	0x20(%rsp), %rbp
000000000104412d	movq	0x10(%rdx), %rax
0000000001044131	movq	0x18(%rdx), %rcx
0000000001044135	movq	0x20(%rdx), %rbx
0000000001044139	movq	0x8(%rdx), %rdx
000000000104413d	movq	%rdx, (%rsp)
0000000001044141	movq	%rax, 0x8(%rsp)
0000000001044146	movq	%rcx, 0x10(%rsp)
000000000104414b	movq	%rbx, 0x18(%rsp)
0000000001044150	callq	runtime.cgoCheckUsingType
0000000001044155	movq	0x20(%rsp), %rbp
000000000104415a	addq	$0x28, %rsp
000000000104415e	retq
000000000104415f	callq	runtime.morestack
0000000001044164	jmp	runtime.cgoCheckTypedBlock.func1
0000000001044166	int3
0000000001044167	int3
0000000001044168	int3
0000000001044169	int3
000000000104416a	int3
000000000104416b	int3
000000000104416c	int3
000000000104416d	int3
000000000104416e	int3
000000000104416f	int3
runtime.chansend.func1:
0000000001044170	movq	%gs:0x30, %rcx
0000000001044179	cmpq	0x10(%rcx), %rsp
000000000104417d	jbe	0x10441aa
000000000104417f	subq	$0x10, %rsp
0000000001044183	movq	%rbp, 0x8(%rsp)
0000000001044188	leaq	0x8(%rsp), %rbp
000000000104418d	movq	0x8(%rdx), %rax
0000000001044191	testb	%al, (%rax)
0000000001044193	addq	$0x58, %rax
0000000001044197	movq	%rax, (%rsp)
000000000104419b	callq	runtime.unlock
00000000010441a0	movq	0x8(%rsp), %rbp
00000000010441a5	addq	$0x10, %rsp
00000000010441a9	retq
00000000010441aa	callq	runtime.morestack
00000000010441af	jmp	runtime.chansend.func1
00000000010441b1	int3
00000000010441b2	int3
00000000010441b3	int3
00000000010441b4	int3
00000000010441b5	int3
00000000010441b6	int3
00000000010441b7	int3
00000000010441b8	int3
00000000010441b9	int3
00000000010441ba	int3
00000000010441bb	int3
00000000010441bc	int3
00000000010441bd	int3
00000000010441be	int3
00000000010441bf	int3
runtime.chanrecv.func1:
00000000010441c0	movq	%gs:0x30, %rcx
00000000010441c9	cmpq	0x10(%rcx), %rsp
00000000010441cd	jbe	0x10441fa
00000000010441cf	subq	$0x10, %rsp
00000000010441d3	movq	%rbp, 0x8(%rsp)
00000000010441d8	leaq	0x8(%rsp), %rbp
00000000010441dd	movq	0x8(%rdx), %rax
00000000010441e1	testb	%al, (%rax)
00000000010441e3	addq	$0x58, %rax
00000000010441e7	movq	%rax, (%rsp)
00000000010441eb	callq	runtime.unlock
00000000010441f0	movq	0x8(%rsp), %rbp
00000000010441f5	addq	$0x10, %rsp
00000000010441f9	retq
00000000010441fa	callq	runtime.morestack
00000000010441ff	jmp	runtime.chanrecv.func1
0000000001044201	int3
0000000001044202	int3
0000000001044203	int3
0000000001044204	int3
0000000001044205	int3
0000000001044206	int3
0000000001044207	int3
0000000001044208	int3
0000000001044209	int3
000000000104420a	int3
000000000104420b	int3
000000000104420c	int3
000000000104420d	int3
000000000104420e	int3
000000000104420f	int3
runtime.debugCallCheck.func1:
0000000001044210	movq	%gs:0x30, %rcx
0000000001044219	cmpq	0x10(%rcx), %rsp
000000000104421d	jbe	0x1044402
0000000001044223	subq	$0x60, %rsp
0000000001044227	movq	%rbp, 0x58(%rsp)
000000000104422c	leaq	0x58(%rsp), %rbp
0000000001044231	movq	0x10(%rdx), %rax
0000000001044235	movq	%rax, 0x48(%rsp)
000000000104423a	movq	0x8(%rdx), %rcx
000000000104423e	movq	%rcx, 0x50(%rsp)
0000000001044243	movq	(%rcx), %rdx
0000000001044246	movq	%rdx, (%rsp)
000000000104424a	callq	runtime.findfunc
000000000104424f	movq	0x8(%rsp), %rax
0000000001044254	movq	0x10(%rsp), %rcx
0000000001044259	testq	%rax, %rax
000000000104425c	jne	0x1044296
000000000104425e	movq	0x48(%rsp), %rdi
0000000001044263	movq	$0x1a, 0x8(%rdi)
000000000104426b	cmpl	$0x0, 0x909be(%rip)
0000000001044272	jne	0x1044288
0000000001044274	leaq	0x28645(%rip), %rax
000000000104427b	movq	%rax, (%rdi)
000000000104427e	movq	0x58(%rsp), %rbp
0000000001044283	addq	$0x60, %rsp
0000000001044287	retq
0000000001044288	leaq	0x28631(%rip), %rax
000000000104428f	callq	runtime.gcWriteBarrier
0000000001044294	jmp	0x104427e
0000000001044296	movq	%rax, 0x40(%rsp)
000000000104429b	movq	%rcx, 0x38(%rsp)
00000000010442a0	movq	%rax, (%rsp)
00000000010442a4	movq	%rcx, 0x8(%rsp)
00000000010442a9	callq	runtime.funcname
00000000010442ae	movq	0x10(%rsp), %rax
00000000010442b3	cmpq	$0x8, 0x18(%rsp)
00000000010442b9	jg	0x104439e
00000000010442bf	movq	0x50(%rsp), %rax
00000000010442c4	movq	(%rax), %rcx
00000000010442c7	movq	0x40(%rsp), %rdx
00000000010442cc	movq	(%rdx), %rbx
00000000010442cf	cmpq	%rbx, %rcx
00000000010442d2	jne	0x1044361
00000000010442d8	movl	$0xffffffff, %eax
00000000010442dd	movl	%eax, 0x34(%rsp)
00000000010442e1	movq	%rdx, (%rsp)
00000000010442e5	movq	0x38(%rsp), %rcx
00000000010442ea	movq	%rcx, 0x8(%rsp)
00000000010442ef	movl	$0x3, 0x10(%rsp)
00000000010442f7	callq	runtime.funcdata
00000000010442fc	movl	0x34(%rsp), %eax
0000000001044300	cmpl	$-0x1, %eax
0000000001044303	movl	$0x0, %ecx
0000000001044308	cmovel	%ecx, %eax
000000000104430b	movq	0x18(%rsp), %rcx
0000000001044310	cmpq	$0x0, %rcx
0000000001044314	cmpl	$-0x2, %eax
0000000001044317	jne	0x1044351
0000000001044319	movq	0x48(%rsp), %rdi
000000000104431e	movq	$0x16, 0x8(%rdi)
0000000001044326	cmpl	$0x0, 0x90903(%rip)
000000000104432d	jne	0x1044343
000000000104432f	leaq	0x27df3(%rip), %rax
0000000001044336	movq	%rax, (%rdi)
0000000001044339	movq	0x58(%rsp), %rbp
000000000104433e	addq	$0x60, %rsp
0000000001044342	retq
0000000001044343	leaq	0x27ddf(%rip), %rax
000000000104434a	callq	runtime.gcWriteBarrier
000000000104434f	jmp	0x1044339
0000000001044351	cmpq	$0x0, %rcx
0000000001044355	je	0x1044319
0000000001044357	movq	0x58(%rsp), %rbp
000000000104435c	addq	$0x60, %rsp
0000000001044360	retq
0000000001044361	decq	%rcx
0000000001044364	movq	%rcx, (%rax)
0000000001044367	movq	%rcx, 0x18(%rsp)
000000000104436c	movq	%rdx, (%rsp)
0000000001044370	movq	0x38(%rsp), %rax
0000000001044375	movq	%rax, 0x8(%rsp)
000000000104437a	movl	$0x2, 0x10(%rsp)
0000000001044382	movq	$0x0, 0x20(%rsp)
000000000104438b	callq	runtime.pcdatavalue
0000000001044390	movl	0x28(%rsp), %eax
0000000001044394	movq	0x40(%rsp), %rdx
0000000001044399	jmp	0x10442dd
000000000104439e	movq	%rax, (%rsp)
00000000010443a2	leaq	0x26ad8(%rip), %rax
00000000010443a9	movq	%rax, 0x8(%rsp)
00000000010443ae	movq	$0x8, 0x10(%rsp)
00000000010443b7	callq	runtime.memequal
00000000010443bc	leaq	0x18(%rsp), %rax
00000000010443c1	cmpb	$0x0, (%rax)
00000000010443c4	je	0x10442bf
00000000010443ca	movq	0x48(%rsp), %rdi
00000000010443cf	movq	$0x1f, 0x8(%rdi)
00000000010443d7	cmpl	$0x0, 0x90852(%rip)
00000000010443de	jne	0x10443f4
00000000010443e0	leaq	0x29013(%rip), %rax
00000000010443e7	movq	%rax, (%rdi)
00000000010443ea	movq	0x58(%rsp), %rbp
00000000010443ef	addq	$0x60, %rsp
00000000010443f3	retq
00000000010443f4	leaq	0x28fff(%rip), %rax
00000000010443fb	callq	runtime.gcWriteBarrier
0000000001044400	jmp	0x10443ea
0000000001044402	callq	runtime.morestack
0000000001044407	jmp	runtime.debugCallCheck.func1
000000000104440c	int3
000000000104440d	int3
000000000104440e	int3
000000000104440f	int3
runtime.debugCallWrap.func1:
0000000001044410	movq	%gs:0x30, %rcx
0000000001044419	cmpq	0x10(%rcx), %rsp
000000000104441d	jbe	0x1044469
000000000104441f	subq	$0x20, %rsp
0000000001044423	movq	%rbp, 0x18(%rsp)
0000000001044428	leaq	0x18(%rsp), %rbp
000000000104442d	movq	0x28(%rsp), %rax
0000000001044432	cmpb	$0x0, (%rax)
0000000001044435	je	0x1044441
0000000001044437	movq	0x18(%rsp), %rbp
000000000104443c	addq	$0x20, %rsp
0000000001044440	retq
0000000001044441	leaq	0x28(%rsp), %rax
0000000001044446	movq	%rax, (%rsp)
000000000104444a	callq	runtime.gorecover
000000000104444f	movq	0x10(%rsp), %rax
0000000001044454	movq	0x8(%rsp), %rcx
0000000001044459	movq	%rcx, (%rsp)
000000000104445d	movq	%rax, 0x8(%rsp)
0000000001044462	callq	runtime.debugCallPanicked
0000000001044467	jmp	0x1044437
0000000001044469	callq	runtime.morestack_noctxt
000000000104446e	jmp	runtime.debugCallWrap.func1
runtime.(*mcache).nextFree.func1:
0000000001044470	movq	%gs:0x30, %rcx
0000000001044479	cmpq	0x10(%rcx), %rsp
000000000104447d	jbe	0x10444ac
000000000104447f	subq	$0x18, %rsp
0000000001044483	movq	%rbp, 0x10(%rsp)
0000000001044488	leaq	0x10(%rsp), %rbp
000000000104448d	movzbl	0x10(%rdx), %eax
0000000001044491	movq	0x8(%rdx), %rcx
0000000001044495	movq	%rcx, (%rsp)
0000000001044499	movb	%al, 0x8(%rsp)
000000000104449d	callq	"runtime.(*mcache).refill"
00000000010444a2	movq	0x10(%rsp), %rbp
00000000010444a7	addq	$0x18, %rsp
00000000010444ab	retq
00000000010444ac	callq	runtime.morestack
00000000010444b1	jmp	"runtime.(*mcache).nextFree.func1"
00000000010444b3	int3
00000000010444b4	int3
00000000010444b5	int3
00000000010444b6	int3
00000000010444b7	int3
00000000010444b8	int3
00000000010444b9	int3
00000000010444ba	int3
00000000010444bb	int3
00000000010444bc	int3
00000000010444bd	int3
00000000010444be	int3
00000000010444bf	int3
runtime.mallocgc.func1:
00000000010444c0	movq	%gs:0x30, %rcx
00000000010444c9	cmpq	0x10(%rcx), %rsp
00000000010444cd	jbe	0x104451d
00000000010444cf	subq	$0x28, %rsp
00000000010444d3	movq	%rbp, 0x20(%rsp)
00000000010444d8	leaq	0x20(%rsp), %rbp
00000000010444dd	movzbl	0x10(%rdx), %eax
00000000010444e1	movzbl	0x11(%rdx), %ecx
00000000010444e5	movq	0x18(%rdx), %rbx
00000000010444e9	movq	%rbx, 0x18(%rsp)
00000000010444ee	movq	0x8(%rdx), %rdx
00000000010444f2	movq	(%rdx), %rdx
00000000010444f5	movq	%rdx, (%rsp)
00000000010444f9	movb	%al, 0x8(%rsp)
00000000010444fd	movb	%cl, 0x9(%rsp)
0000000001044501	callq	runtime.largeAlloc
0000000001044506	movq	0x10(%rsp), %rax
000000000104450b	movq	0x18(%rsp), %rcx
0000000001044510	movq	%rax, (%rcx)
0000000001044513	movq	0x20(%rsp), %rbp
0000000001044518	addq	$0x28, %rsp
000000000104451c	retq
000000000104451d	callq	runtime.morestack
0000000001044522	jmp	runtime.mallocgc.func1
0000000001044524	int3
0000000001044525	int3
0000000001044526	int3
0000000001044527	int3
0000000001044528	int3
0000000001044529	int3
000000000104452a	int3
000000000104452b	int3
000000000104452c	int3
000000000104452d	int3
000000000104452e	int3
000000000104452f	int3
runtime.persistentalloc.func1:
0000000001044530	movq	%gs:0x30, %rcx
0000000001044539	cmpq	0x10(%rcx), %rsp
000000000104453d	jbe	0x104458c
000000000104453f	subq	$0x30, %rsp
0000000001044543	movq	%rbp, 0x28(%rsp)
0000000001044548	leaq	0x28(%rsp), %rbp
000000000104454d	movq	0x10(%rdx), %rax
0000000001044551	movq	0x18(%rdx), %rcx
0000000001044555	movq	0x20(%rdx), %rbx
0000000001044559	movq	%rbx, 0x20(%rsp)
000000000104455e	movq	0x8(%rdx), %rdx
0000000001044562	movq	%rdx, (%rsp)
0000000001044566	movq	%rax, 0x8(%rsp)
000000000104456b	movq	%rcx, 0x10(%rsp)
0000000001044570	callq	runtime.persistentalloc1
0000000001044575	movq	0x18(%rsp), %rax
000000000104457a	movq	0x20(%rsp), %rcx
000000000104457f	movq	%rax, (%rcx)
0000000001044582	movq	0x28(%rsp), %rbp
0000000001044587	addq	$0x30, %rsp
000000000104458b	retq
000000000104458c	callq	runtime.morestack
0000000001044591	jmp	runtime.persistentalloc.func1
0000000001044593	int3
0000000001044594	int3
0000000001044595	int3
0000000001044596	int3
0000000001044597	int3
0000000001044598	int3
0000000001044599	int3
000000000104459a	int3
000000000104459b	int3
000000000104459c	int3
000000000104459d	int3
000000000104459e	int3
000000000104459f	int3
runtime.freemcache.func1:
00000000010445a0	movq	%gs:0x30, %rcx
00000000010445a9	cmpq	0x10(%rcx), %rsp
00000000010445ad	jbe	0x104464d
00000000010445b3	subq	$0x18, %rsp
00000000010445b7	movq	%rbp, 0x10(%rsp)
00000000010445bc	leaq	0x10(%rsp), %rbp
00000000010445c1	movq	0x8(%rdx), %rax
00000000010445c5	movq	%rax, 0x8(%rsp)
00000000010445ca	movq	%rax, (%rsp)
00000000010445ce	callq	"runtime.(*mcache).releaseAll"
00000000010445d3	movq	0x8(%rsp), %rax
00000000010445d8	movq	%rax, (%rsp)
00000000010445dc	callq	runtime.stackcache_clear
00000000010445e1	leaq	runtime.mheap_(%rip), %rax
00000000010445e8	movq	%rax, (%rsp)
00000000010445ec	callq	runtime.lock
00000000010445f1	movq	0x8(%rsp), %rax
00000000010445f6	movq	%rax, (%rsp)
00000000010445fa	callq	runtime.purgecachedstats
00000000010445ff	leaq	0x7c39a(%rip), %rax
0000000001044606	testb	%al, (%rax)
0000000001044608	movq	0x7c3c1(%rip), %rax
000000000104460f	subq	0x7c38a(%rip), %rax
0000000001044616	movq	%rax, 0x7c3b3(%rip)
000000000104461d	movq	0x7c394(%rip), %rax
0000000001044624	movq	0x8(%rsp), %rcx
0000000001044629	movq	%rax, (%rcx)
000000000104462c	movq	%rcx, 0x7c385(%rip)
0000000001044633	leaq	runtime.mheap_(%rip), %rax
000000000104463a	movq	%rax, (%rsp)
000000000104463e	callq	runtime.unlock
0000000001044643	movq	0x10(%rsp), %rbp
0000000001044648	addq	$0x18, %rsp
000000000104464c	retq
000000000104464d	callq	runtime.morestack
0000000001044652	jmp	runtime.freemcache.func1
0000000001044657	int3
0000000001044658	int3
0000000001044659	int3
000000000104465a	int3
000000000104465b	int3
000000000104465c	int3
000000000104465d	int3
000000000104465e	int3
000000000104465f	int3
runtime.gcStart.func1:
0000000001044660	movq	%gs:0x30, %rcx
0000000001044669	cmpq	0x10(%rcx), %rsp
000000000104466d	jbe	0x1044689
000000000104466f	subq	$0x8, %rsp
0000000001044673	movq	%rbp, (%rsp)
0000000001044677	leaq	(%rsp), %rbp
000000000104467b	callq	runtime.finishsweep_m
0000000001044680	movq	(%rsp), %rbp
0000000001044684	addq	$0x8, %rsp
0000000001044688	retq
0000000001044689	callq	runtime.morestack_noctxt
000000000104468e	jmp	runtime.gcStart.func1
runtime.gcStart.func2:
0000000001044690	movq	%gs:0x30, %rcx
0000000001044699	cmpq	0x10(%rcx), %rsp
000000000104469d	jbe	0x10446dc
000000000104469f	subq	$0x20, %rsp
00000000010446a3	movq	%rbp, 0x18(%rsp)
00000000010446a8	leaq	0x18(%rsp), %rbp
00000000010446ad	movq	0x8(%rdx), %rax
00000000010446b1	movq	%rax, 0x10(%rsp)
00000000010446b6	movzbl	0x80333(%rip), %ecx
00000000010446bd	movb	%cl, (%rsp)
00000000010446c0	callq	runtime.startTheWorldWithSema
00000000010446c5	movq	0x8(%rsp), %rax
00000000010446ca	movq	0x10(%rsp), %rcx
00000000010446cf	movq	%rax, (%rcx)
00000000010446d2	movq	0x18(%rsp), %rbp
00000000010446d7	addq	$0x20, %rsp
00000000010446db	retq
00000000010446dc	callq	runtime.morestack
00000000010446e1	jmp	runtime.gcStart.func2
00000000010446e3	int3
00000000010446e4	int3
00000000010446e5	int3
00000000010446e6	int3
00000000010446e7	int3
00000000010446e8	int3
00000000010446e9	int3
00000000010446ea	int3
00000000010446eb	int3
00000000010446ec	int3
00000000010446ed	int3
00000000010446ee	int3
00000000010446ef	int3
runtime.gcMarkDone.func1.1:
00000000010446f0	movq	%gs:0x30, %rcx
00000000010446f9	cmpq	0x10(%rcx), %rsp
00000000010446fd	jbe	0x104473b
00000000010446ff	subq	$0x10, %rsp
0000000001044703	movq	%rbp, 0x8(%rsp)
0000000001044708	leaq	0x8(%rsp), %rbp
000000000104470d	movq	0x18(%rsp), %rax
0000000001044712	movq	%rax, (%rsp)
0000000001044716	callq	runtime.wbBufFlush1
000000000104471b	movq	0x18(%rsp), %rax
0000000001044720	testb	%al, (%rax)
0000000001044722	addq	$0x1270, %rax
0000000001044728	movq	%rax, (%rsp)
000000000104472c	callq	"runtime.(*gcWork).dispose"
0000000001044731	movq	0x8(%rsp), %rbp
0000000001044736	addq	$0x10, %rsp
000000000104473a	retq
000000000104473b	callq	runtime.morestack_noctxt
0000000001044740	jmp	runtime.gcMarkDone.func1.1
0000000001044742	int3
0000000001044743	int3
0000000001044744	int3
0000000001044745	int3
0000000001044746	int3
0000000001044747	int3
0000000001044748	int3
0000000001044749	int3
000000000104474a	int3
000000000104474b	int3
000000000104474c	int3
000000000104474d	int3
000000000104474e	int3
000000000104474f	int3
runtime.gcMarkDone.func1:
0000000001044750	movq	%gs:0x30, %rcx
0000000001044759	cmpq	0x10(%rcx), %rsp
000000000104475d	jbe	0x1044787
000000000104475f	subq	$0x10, %rsp
0000000001044763	movq	%rbp, 0x8(%rsp)
0000000001044768	leaq	0x8(%rsp), %rbp
000000000104476d	leaq	0x2a6ec(%rip), %rax
0000000001044774	movq	%rax, (%rsp)
0000000001044778	callq	runtime.forEachP
000000000104477d	movq	0x8(%rsp), %rbp
0000000001044782	addq	$0x10, %rsp
0000000001044786	retq
0000000001044787	callq	runtime.morestack_noctxt
000000000104478c	jmp	runtime.gcMarkDone.func1
000000000104478e	int3
000000000104478f	int3
runtime.gcMarkTermination.func1:
0000000001044790	movq	%gs:0x30, %rcx
0000000001044799	cmpq	0x10(%rcx), %rsp
000000000104479d	jbe	0x10447c7
000000000104479f	subq	$0x10, %rsp
00000000010447a3	movq	%rbp, 0x8(%rsp)
00000000010447a8	leaq	0x8(%rsp), %rbp
00000000010447ad	movq	0x8(%rdx), %rax
00000000010447b1	movq	(%rax), %rax
00000000010447b4	movq	%rax, (%rsp)
00000000010447b8	callq	runtime.gcMark
00000000010447bd	movq	0x8(%rsp), %rbp
00000000010447c2	addq	$0x10, %rsp
00000000010447c6	retq
00000000010447c7	callq	runtime.morestack
00000000010447cc	jmp	runtime.gcMarkTermination.func1
00000000010447ce	int3
00000000010447cf	int3
runtime.gcMarkTermination.func2:
00000000010447d0	movq	%gs:0x30, %rcx
00000000010447d9	cmpq	0x10(%rcx), %rsp
00000000010447dd	jbe	0x104497e
00000000010447e3	subq	$0x18, %rsp
00000000010447e7	movq	%rbp, 0x10(%rsp)
00000000010447ec	leaq	0x10(%rsp), %rbp
00000000010447f1	movq	0x8(%rdx), %rax
00000000010447f5	movq	%rax, 0x8(%rsp)
00000000010447fa	movq	0x745df(%rip), %rcx
0000000001044801	movq	%rcx, 0x746f0(%rip)
0000000001044808	cmpl	$0x0, 0x9051d(%rip)
000000000104480f	jg	0x1044954
0000000001044815	xorl	%ecx, %ecx
0000000001044817	leaq	runtime.gcphase(%rip), %rdx
000000000104481e	xchgl	%ecx, (%rdx)
0000000001044820	movl	runtime.gcphase(%rip), %ecx
0000000001044826	cmpl	$0x1, %ecx
0000000001044829	jne	0x1044949
000000000104482f	movl	$0x1, %ecx
0000000001044834	movb	%cl, 0x903fa(%rip)
000000000104483a	testb	%cl, %cl
000000000104483c	je	0x104493d
0000000001044842	movl	$0x1, %ecx
0000000001044847	movb	%cl, runtime.writeBarrier(%rip)
000000000104484d	movq	0x7460c(%rip), %rax
0000000001044854	movq	%rax, (%rsp)
0000000001044858	callq	runtime.gcSweep
000000000104485d	cmpl	$0x1, 0x904dc(%rip)
0000000001044864	jg	0x1044870
0000000001044866	movq	0x10(%rsp), %rbp
000000000104486b	addq	$0x18, %rsp
000000000104486f	retq
0000000001044870	callq	runtime.nanotime
0000000001044875	movq	(%rsp), %rax
0000000001044879	movq	0x8(%rsp), %rcx
000000000104487e	movq	%rax, (%rcx)
0000000001044881	callq	runtime.gcResetMarkState
0000000001044886	callq	runtime.finishsweep_m
000000000104488b	movl	$0x2, %eax
0000000001044890	leaq	runtime.gcphase(%rip), %rcx
0000000001044897	xchgl	%eax, (%rcx)
0000000001044899	movl	runtime.gcphase(%rip), %eax
000000000104489f	cmpl	$0x1, %eax
00000000010448a2	jne	0x1044932
00000000010448a8	movl	$0x1, %eax
00000000010448ad	movb	%al, 0x90381(%rip)
00000000010448b3	testb	%al, %al
00000000010448b5	je	0x1044929
00000000010448b7	movl	$0x1, %eax
00000000010448bc	movb	%al, runtime.writeBarrier(%rip)
00000000010448c2	movq	0x8(%rsp), %rax
00000000010448c7	movq	(%rax), %rax
00000000010448ca	movq	%rax, (%rsp)
00000000010448ce	callq	runtime.gcMark
00000000010448d3	xorl	%eax, %eax
00000000010448d5	leaq	runtime.gcphase(%rip), %rcx
00000000010448dc	xchgl	%eax, (%rcx)
00000000010448de	movl	runtime.gcphase(%rip), %eax
00000000010448e4	cmpl	$0x1, %eax
00000000010448e7	jne	0x1044921
00000000010448e9	movl	$0x1, %eax
00000000010448ee	movb	%al, 0x90340(%rip)
00000000010448f4	testb	%al, %al
00000000010448f6	je	0x1044918
00000000010448f8	movl	$0x1, %eax
00000000010448fd	movb	%al, runtime.writeBarrier(%rip)
0000000001044903	movq	0x74556(%rip), %rax
000000000104490a	movq	%rax, (%rsp)
000000000104490e	callq	runtime.gcSweep
0000000001044913	jmp	0x1044866
0000000001044918	movzbl	0x90316(%rip), %eax
000000000104491f	jmp	0x10448fd
0000000001044921	cmpl	$0x2, %eax
0000000001044924	sete	%al
0000000001044927	jmp	0x10448ee
0000000001044929	movzbl	0x90305(%rip), %eax
0000000001044930	jmp	0x10448bc
0000000001044932	cmpl	$0x2, %eax
0000000001044935	sete	%al
0000000001044938	jmp	0x10448ad
000000000104493d	movzbl	0x902f1(%rip), %ecx
0000000001044944	jmp	0x1044847
0000000001044949	cmpl	$0x2, %ecx
000000000104494c	sete	%cl
000000000104494f	jmp	0x1044834
0000000001044954	callq	runtime.gcResetMarkState
0000000001044959	callq	runtime.initCheckmarks
000000000104495e	movq	0x8(%rsp), %rax
0000000001044963	movq	(%rax), %rcx
0000000001044966	movq	%rcx, (%rsp)
000000000104496a	callq	runtime.gcMark
000000000104496f	callq	runtime.clearCheckmarks
0000000001044974	movq	0x8(%rsp), %rax
0000000001044979	jmp	0x1044815
000000000104497e	callq	runtime.morestack
0000000001044983	jmp	runtime.gcMarkTermination.func2
0000000001044988	int3
0000000001044989	int3
000000000104498a	int3
000000000104498b	int3
000000000104498c	int3
000000000104498d	int3
000000000104498e	int3
000000000104498f	int3
runtime.gcMarkTermination.func3:
0000000001044990	movq	%gs:0x30, %rcx
0000000001044999	cmpq	0x10(%rcx), %rsp
000000000104499d	jbe	0x10449c0
000000000104499f	subq	$0x18, %rsp
00000000010449a3	movq	%rbp, 0x10(%rsp)
00000000010449a8	leaq	0x10(%rsp), %rbp
00000000010449ad	movb	$0x1, (%rsp)
00000000010449b1	callq	runtime.startTheWorldWithSema
00000000010449b6	movq	0x10(%rsp), %rbp
00000000010449bb	addq	$0x18, %rsp
00000000010449bf	retq
00000000010449c0	callq	runtime.morestack_noctxt
00000000010449c5	jmp	runtime.gcMarkTermination.func3
00000000010449c7	int3
00000000010449c8	int3
00000000010449c9	int3
00000000010449ca	int3
00000000010449cb	int3
00000000010449cc	int3
00000000010449cd	int3
00000000010449ce	int3
00000000010449cf	int3
runtime.gcBgMarkWorker.func1:
00000000010449d0	movq	0x10(%rsp), %rcx
00000000010449d5	movq	(%rcx), %rdx
00000000010449d8	movq	%gs:0x30, %rbx
00000000010449e1	movl	0x100(%rdx), %esi
00000000010449e7	leal	-0x1(%rsi), %edi
00000000010449ea	movl	%edi, 0x100(%rdx)
00000000010449f0	cmpl	$0x1, %esi
00000000010449f3	jne	0x1044a0b
00000000010449f5	testb	%al, (%rbx)
00000000010449f7	leaq	0xb1(%rbx), %rdx
00000000010449fe	cmpb	$0x0, (%rdx)
0000000001044a01	je	0x1044a0b
0000000001044a03	movq	$-0x522, 0x10(%rbx)
0000000001044a0b	movq	0x8(%rcx), %rdx
0000000001044a0f	testq	%rdx, %rdx
0000000001044a12	je	0x1044a39
0000000001044a14	leaq	0x8(%rcx), %rbx
0000000001044a18	testb	%al, (%rbx)
0000000001044a1a	xorl	%ebx, %ebx
0000000001044a1c	movq	%rbx, 0x8(%rcx)
0000000001044a20	testb	%al, (%rdx)
0000000001044a22	movq	0x8(%rsp), %rcx
0000000001044a27	xorl	%eax, %eax
0000000001044a29	lock
0000000001044a2a	cmpxchgq	%rcx, 0x1258(%rdx)
0000000001044a32	sete	%cl
0000000001044a35	testb	%cl, %cl
0000000001044a37	je	0x1044a3f
0000000001044a39	movb	$0x1, 0x18(%rsp)
0000000001044a3e	retq
0000000001044a3f	movb	$0x0, 0x18(%rsp)
0000000001044a44	retq
0000000001044a45	int3
0000000001044a46	int3
0000000001044a47	int3
0000000001044a48	int3
0000000001044a49	int3
0000000001044a4a	int3
0000000001044a4b	int3
0000000001044a4c	int3
0000000001044a4d	int3
0000000001044a4e	int3
0000000001044a4f	int3
runtime.gcBgMarkWorker.func2:
0000000001044a50	movq	%gs:0x30, %rcx
0000000001044a59	cmpq	0x10(%rcx), %rsp
0000000001044a5d	jbe	0x1044c11
0000000001044a63	subq	$0x38, %rsp
0000000001044a67	movq	%rbp, 0x30(%rsp)
0000000001044a6c	leaq	0x30(%rsp), %rbp
0000000001044a71	movq	0x10(%rdx), %rax
0000000001044a75	movq	%rax, 0x20(%rsp)
0000000001044a7a	movq	0x8(%rdx), %rcx
0000000001044a7e	movq	%rcx, 0x18(%rsp)
0000000001044a83	movq	%rcx, (%rsp)
0000000001044a87	movabsq	$0x400000002, %rdx
0000000001044a91	movq	%rdx, 0x8(%rsp)
0000000001044a96	callq	runtime.casgstatus
0000000001044a9b	movq	0x20(%rsp), %rax
0000000001044aa0	testb	%al, (%rax)
0000000001044aa2	movq	0x1260(%rax), %rcx
0000000001044aa9	testq	%rcx, %rcx
0000000001044aac	jne	0x1044bb6
0000000001044ab2	leaq	0x1270(%rax), %rcx
0000000001044ab9	movq	%rcx, 0x28(%rsp)
0000000001044abe	movq	%rcx, (%rsp)
0000000001044ac2	movq	$0x5, 0x8(%rsp)
0000000001044acb	callq	runtime.gcDrain
0000000001044ad0	movq	0x18(%rsp), %rax
0000000001044ad5	testb	%al, (%rax)
0000000001044ad7	leaq	0xb1(%rax), %rcx
0000000001044ade	cmpb	$0x0, (%rcx)
0000000001044ae1	je	0x1044b78
0000000001044ae7	leaq	0x73fc2(%rip), %rax
0000000001044aee	movq	%rax, (%rsp)
0000000001044af2	callq	runtime.lock
0000000001044af7	jmp	0x1044b0f
0000000001044af9	leaq	0x74000(%rip), %rax
0000000001044b00	testb	%al, (%rax)
0000000001044b02	movq	%rdx, 0x73ff7(%rip)
0000000001044b09	incl	0x73ff9(%rip)
0000000001044b0f	movq	0x20(%rsp), %rax
0000000001044b14	movq	%rax, (%rsp)
0000000001044b18	callq	runtime.runqget
0000000001044b1d	movq	0x8(%rsp), %rax
0000000001044b22	testq	%rax, %rax
0000000001044b25	je	0x1044b68
0000000001044b27	movq	$0x0, 0xa0(%rax)
0000000001044b32	movq	0x73fc7(%rip), %rcx
0000000001044b39	testq	%rcx, %rcx
0000000001044b3c	je	0x1044b53
0000000001044b3e	leaq	0xa0(%rcx), %rdx
0000000001044b45	testb	%al, (%rdx)
0000000001044b47	movq	%rax, %rdx
0000000001044b4a	movq	%rax, 0xa0(%rcx)
0000000001044b51	jmp	0x1044af9
0000000001044b53	leaq	0x73f9e(%rip), %rcx
0000000001044b5a	testb	%al, (%rcx)
0000000001044b5c	movq	%rax, %rdx
0000000001044b5f	movq	%rax, 0x73f92(%rip)
0000000001044b66	jmp	0x1044af9
0000000001044b68	leaq	0x73f41(%rip), %rax
0000000001044b6f	movq	%rax, (%rsp)
0000000001044b73	callq	runtime.unlock
0000000001044b78	movq	0x28(%rsp), %rax
0000000001044b7d	movq	%rax, (%rsp)
0000000001044b81	movq	$0x6, 0x8(%rsp)
0000000001044b8a	callq	runtime.gcDrain
0000000001044b8f	movq	0x18(%rsp), %rax
0000000001044b94	movq	%rax, (%rsp)
0000000001044b98	movabsq	$0x200000004, %rax
0000000001044ba2	movq	%rax, 0x8(%rsp)
0000000001044ba7	callq	runtime.casgstatus
0000000001044bac	movq	0x30(%rsp), %rbp
0000000001044bb1	addq	$0x38, %rsp
0000000001044bb5	retq
0000000001044bb6	cmpq	$0x1, %rcx
0000000001044bba	je	0x1044bdc
0000000001044bbc	cmpq	$0x2, %rcx
0000000001044bc0	jne	0x1044bf6
0000000001044bc2	addq	$0x1270, %rax
0000000001044bc8	movq	%rax, (%rsp)
0000000001044bcc	movq	$0xd, 0x8(%rsp)
0000000001044bd5	callq	runtime.gcDrain
0000000001044bda	jmp	0x1044b8f
0000000001044bdc	addq	$0x1270, %rax
0000000001044be2	movq	%rax, (%rsp)
0000000001044be6	movq	$0x15, 0x8(%rsp)
0000000001044bef	callq	runtime.gcDrain
0000000001044bf4	jmp	0x1044b8f
0000000001044bf6	leaq	0x29730(%rip), %rax
0000000001044bfd	movq	%rax, (%rsp)
0000000001044c01	movq	$0x2b, 0x8(%rsp)
0000000001044c0a	callq	runtime.throw
0000000001044c0f	ud2
0000000001044c11	callq	runtime.morestack
0000000001044c16	jmp	runtime.gcBgMarkWorker.func2
0000000001044c1b	int3
0000000001044c1c	int3
0000000001044c1d	int3
0000000001044c1e	int3
0000000001044c1f	int3
runtime.markroot.func1:
0000000001044c20	movq	%gs:0x30, %rcx
0000000001044c29	cmpq	0x10(%rcx), %rsp
0000000001044c2d	jbe	0x1044d00
0000000001044c33	subq	$0x38, %rsp
0000000001044c37	movq	%rbp, 0x30(%rsp)
0000000001044c3c	leaq	0x30(%rsp), %rbp
0000000001044c41	movq	%gs:0x30, %rax
0000000001044c4a	movq	0x30(%rax), %rax
0000000001044c4e	movq	0x10(%rdx), %rcx
0000000001044c52	movq	0x8(%rdx), %rdx
0000000001044c56	movq	0xc0(%rax), %rax
0000000001044c5d	cmpq	%rax, %rdx
0000000001044c60	jne	0x1044cf9
0000000001044c66	movl	0x90(%rax), %ebx
0000000001044c6c	cmpl	$0x2, %ebx
0000000001044c6f	sete	%bl
0000000001044c72	movq	%rax, 0x20(%rsp)
0000000001044c77	movb	%bl, 0x17(%rsp)
0000000001044c7b	testb	%bl, %bl
0000000001044c7d	jne	0x1044cbf
0000000001044c7f	movq	%rdx, (%rsp)
0000000001044c83	movq	%rcx, 0x8(%rsp)
0000000001044c88	callq	runtime.scang
0000000001044c8d	movzbl	0x17(%rsp), %eax
0000000001044c92	testb	%al, %al
0000000001044c94	jne	0x1044ca0
0000000001044c96	movq	0x30(%rsp), %rbp
0000000001044c9b	addq	$0x38, %rsp
0000000001044c9f	retq
0000000001044ca0	movq	0x20(%rsp), %rax
0000000001044ca5	movq	%rax, (%rsp)
0000000001044ca9	movabsq	$0x200000004, %rax
0000000001044cb3	movq	%rax, 0x8(%rsp)
0000000001044cb8	callq	runtime.casgstatus
0000000001044cbd	jmp	0x1044c96
0000000001044cbf	movq	%rdx, 0x18(%rsp)
0000000001044cc4	movq	%rcx, 0x28(%rsp)
0000000001044cc9	movq	%rax, (%rsp)
0000000001044ccd	movabsq	$0x400000002, %rcx
0000000001044cd7	movq	%rcx, 0x8(%rsp)
0000000001044cdc	callq	runtime.casgstatus
0000000001044ce1	movq	0x20(%rsp), %rax
0000000001044ce6	movb	$0x7, 0xb0(%rax)
0000000001044ced	movq	0x28(%rsp), %rcx
0000000001044cf2	movq	0x18(%rsp), %rdx
0000000001044cf7	jmp	0x1044c7f
0000000001044cf9	xorl	%ebx, %ebx
0000000001044cfb	jmp	0x1044c72
0000000001044d00	callq	runtime.morestack
0000000001044d05	jmp	runtime.markroot.func1
0000000001044d0a	int3
0000000001044d0b	int3
0000000001044d0c	int3
0000000001044d0d	int3
0000000001044d0e	int3
0000000001044d0f	int3
runtime.gcAssistAlloc.func1:
0000000001044d10	movq	%gs:0x30, %rcx
0000000001044d19	cmpq	0x10(%rcx), %rsp
0000000001044d1d	jbe	0x1044d4d
0000000001044d1f	subq	$0x18, %rsp
0000000001044d23	movq	%rbp, 0x10(%rsp)
0000000001044d28	leaq	0x10(%rsp), %rbp
0000000001044d2d	movq	0x10(%rdx), %rax
0000000001044d31	movq	0x8(%rdx), %rcx
0000000001044d35	movq	%rcx, (%rsp)
0000000001044d39	movq	%rax, 0x8(%rsp)
0000000001044d3e	callq	runtime.gcAssistAlloc1
0000000001044d43	movq	0x10(%rsp), %rbp
0000000001044d48	addq	$0x18, %rsp
0000000001044d4c	retq
0000000001044d4d	callq	runtime.morestack
0000000001044d52	jmp	runtime.gcAssistAlloc.func1
0000000001044d54	int3
0000000001044d55	int3
0000000001044d56	int3
0000000001044d57	int3
0000000001044d58	int3
0000000001044d59	int3
0000000001044d5a	int3
0000000001044d5b	int3
0000000001044d5c	int3
0000000001044d5d	int3
0000000001044d5e	int3
0000000001044d5f	int3
runtime.scanstack.func1:
0000000001044d60	movq	%gs:0x30, %rcx
0000000001044d69	cmpq	0x10(%rcx), %rsp
0000000001044d6d	jbe	0x1044dac
0000000001044d6f	subq	$0x20, %rsp
0000000001044d73	movq	%rbp, 0x18(%rsp)
0000000001044d78	leaq	0x18(%rsp), %rbp
0000000001044d7d	movq	0x10(%rdx), %rax
0000000001044d81	movq	0x8(%rdx), %rcx
0000000001044d85	movq	%rcx, 0x8(%rsp)
0000000001044d8a	movq	0x28(%rsp), %rcx
0000000001044d8f	movq	%rcx, (%rsp)
0000000001044d93	movq	%rax, 0x10(%rsp)
0000000001044d98	callq	runtime.scanframeworker
0000000001044d9d	movb	$0x1, 0x38(%rsp)
0000000001044da2	movq	0x18(%rsp), %rbp
0000000001044da7	addq	$0x20, %rsp
0000000001044dab	retq
0000000001044dac	callq	runtime.morestack
0000000001044db1	jmp	runtime.scanstack.func1
0000000001044db3	int3
0000000001044db4	int3
0000000001044db5	int3
0000000001044db6	int3
0000000001044db7	int3
0000000001044db8	int3
0000000001044db9	int3
0000000001044dba	int3
0000000001044dbb	int3
0000000001044dbc	int3
0000000001044dbd	int3
0000000001044dbe	int3
0000000001044dbf	int3
runtime.gosweepone.func1:
0000000001044dc0	movq	%gs:0x30, %rcx
0000000001044dc9	cmpq	0x10(%rcx), %rsp
0000000001044dcd	jbe	0x1044e01
0000000001044dcf	subq	$0x18, %rsp
0000000001044dd3	movq	%rbp, 0x10(%rsp)
0000000001044dd8	leaq	0x10(%rsp), %rbp
0000000001044ddd	movq	0x8(%rdx), %rax
0000000001044de1	movq	%rax, 0x8(%rsp)
0000000001044de6	callq	runtime.sweepone
0000000001044deb	movq	(%rsp), %rax
0000000001044def	movq	0x8(%rsp), %rcx
0000000001044df4	movq	%rax, (%rcx)
0000000001044df7	movq	0x10(%rsp), %rbp
0000000001044dfc	addq	$0x18, %rsp
0000000001044e00	retq
0000000001044e01	callq	runtime.morestack
0000000001044e06	jmp	runtime.gosweepone.func1
0000000001044e08	int3
0000000001044e09	int3
0000000001044e0a	int3
0000000001044e0b	int3
0000000001044e0c	int3
0000000001044e0d	int3
0000000001044e0e	int3
0000000001044e0f	int3
runtime.getempty.func1:
0000000001044e10	movq	%gs:0x30, %rcx
0000000001044e19	cmpq	0x10(%rcx), %rsp
0000000001044e1d	jbe	0x1044e72
0000000001044e1f	subq	$0x30, %rsp
0000000001044e23	movq	%rbp, 0x28(%rsp)
0000000001044e28	leaq	0x28(%rsp), %rbp
0000000001044e2d	movq	0x8(%rdx), %rax
0000000001044e31	movq	%rax, 0x20(%rsp)
0000000001044e36	leaq	runtime.mheap_(%rip), %rcx
0000000001044e3d	movq	%rcx, (%rsp)
0000000001044e41	movq	$0x4, 0x8(%rsp)
0000000001044e4a	leaq	0x90ac7(%rip), %rcx
0000000001044e51	movq	%rcx, 0x10(%rsp)
0000000001044e56	callq	"runtime.(*mheap).allocManual"
0000000001044e5b	movq	0x18(%rsp), %rax
0000000001044e60	movq	0x20(%rsp), %rcx
0000000001044e65	movq	%rax, (%rcx)
0000000001044e68	movq	0x28(%rsp), %rbp
0000000001044e6d	addq	$0x30, %rsp
0000000001044e71	retq
0000000001044e72	callq	runtime.morestack
0000000001044e77	jmp	runtime.getempty.func1
0000000001044e79	int3
0000000001044e7a	int3
0000000001044e7b	int3
0000000001044e7c	int3
0000000001044e7d	int3
0000000001044e7e	int3
0000000001044e7f	int3
runtime.freeSomeWbufs.func1:
0000000001044e80	movq	%gs:0x30, %rcx
0000000001044e89	cmpq	0x10(%rcx), %rsp
0000000001044e8d	jbe	0x1044f5f
0000000001044e93	subq	$0x40, %rsp
0000000001044e97	movq	%rbp, 0x38(%rsp)
0000000001044e9c	leaq	0x38(%rsp), %rbp
0000000001044ea1	movq	%gs:0x30, %rax
0000000001044eaa	movq	0x30(%rax), %rax
0000000001044eae	leaq	0x8(%rdx), %rcx
0000000001044eb2	movq	0xc0(%rax), %rax
0000000001044eb9	movq	%rax, 0x30(%rsp)
0000000001044ebe	movzbl	(%rcx), %ecx
0000000001044ec1	movb	%cl, 0x1f(%rsp)
0000000001044ec5	cmpb	$0x0, %cl
0000000001044ec8	xorl	%edx, %edx
0000000001044eca	jmp	0x1044f2c
0000000001044ecc	movq	%rdx, 0x20(%rsp)
0000000001044ed1	movq	%rbx, 0x28(%rsp)
0000000001044ed6	leaq	0x73edb(%rip), %rax
0000000001044edd	movq	%rax, (%rsp)
0000000001044ee1	movq	%rbx, 0x8(%rsp)
0000000001044ee6	callq	"runtime.(*mSpanList).remove"
0000000001044eeb	leaq	runtime.mheap_(%rip), %rax
0000000001044ef2	movq	%rax, (%rsp)
0000000001044ef6	movq	0x28(%rsp), %rcx
0000000001044efb	movq	%rcx, 0x8(%rsp)
0000000001044f00	leaq	0x90a11(%rip), %rcx
0000000001044f07	movq	%rcx, 0x10(%rsp)
0000000001044f0c	callq	"runtime.(*mheap).freeManual"
0000000001044f11	movq	0x20(%rsp), %rax
0000000001044f16	leaq	0x1(%rax), %rdx
0000000001044f1a	movzbl	0x1f(%rsp), %eax
0000000001044f1f	movq	0x30(%rsp), %rcx
0000000001044f24	movq	%rcx, %rax
0000000001044f27	movzbl	0x1f(%rsp), %ecx
0000000001044f2c	cmpq	$0x40, %rdx
0000000001044f30	jge	0x1044f55
0000000001044f32	cmpb	$0x0, %cl
0000000001044f35	je	0x1044f45
0000000001044f37	testb	%al, (%rax)
0000000001044f39	leaq	0xb1(%rax), %rbx
0000000001044f40	cmpb	$0x0, (%rbx)
0000000001044f43	jne	0x1044f55
0000000001044f45	movq	0x73e6c(%rip), %rbx
0000000001044f4c	testq	%rbx, %rbx
0000000001044f4f	jne	0x1044ecc
0000000001044f55	movq	0x38(%rsp), %rbp
0000000001044f5a	addq	$0x40, %rsp
0000000001044f5e	retq
0000000001044f5f	callq	runtime.morestack
0000000001044f64	jmp	runtime.freeSomeWbufs.func1
0000000001044f69	int3
0000000001044f6a	int3
0000000001044f6b	int3
0000000001044f6c	int3
0000000001044f6d	int3
0000000001044f6e	int3
0000000001044f6f	int3
runtime.(*mheap).alloc.func1:
0000000001044f70	movq	%gs:0x30, %rcx
0000000001044f79	cmpq	0x10(%rcx), %rsp
0000000001044f7d	jbe	0x1044fd3
0000000001044f7f	subq	$0x30, %rsp
0000000001044f83	movq	%rbp, 0x28(%rsp)
0000000001044f88	leaq	0x28(%rsp), %rbp
0000000001044f8d	movq	0x10(%rdx), %rax
0000000001044f91	movzbl	0x18(%rdx), %ecx
0000000001044f95	movzbl	0x19(%rdx), %ebx
0000000001044f99	movq	0x20(%rdx), %rsi
0000000001044f9d	movq	%rsi, 0x20(%rsp)
0000000001044fa2	movq	0x8(%rdx), %rdx
0000000001044fa6	movq	%rdx, (%rsp)
0000000001044faa	movq	%rax, 0x8(%rsp)
0000000001044faf	movb	%cl, 0x10(%rsp)
0000000001044fb3	movb	%bl, 0x11(%rsp)
0000000001044fb7	callq	"runtime.(*mheap).alloc_m"
0000000001044fbc	movq	0x18(%rsp), %rax
0000000001044fc1	movq	0x20(%rsp), %rcx
0000000001044fc6	movq	%rax, (%rcx)
0000000001044fc9	movq	0x28(%rsp), %rbp
0000000001044fce	addq	$0x30, %rsp
0000000001044fd2	retq
0000000001044fd3	callq	runtime.morestack
0000000001044fd8	jmp	"runtime.(*mheap).alloc.func1"
0000000001044fda	int3
0000000001044fdb	int3
0000000001044fdc	int3
0000000001044fdd	int3
0000000001044fde	int3
0000000001044fdf	int3
runtime.(*mheap).freeSpan.func1:
0000000001044fe0	movq	%gs:0x30, %rcx
0000000001044fe9	cmpq	0x10(%rcx), %rsp
0000000001044fed	jbe	0x10450fb
0000000001044ff3	subq	$0x48, %rsp
0000000001044ff7	movq	%rbp, 0x40(%rsp)
0000000001044ffc	leaq	0x40(%rsp), %rbp
0000000001045001	movq	0x8(%rdx), %rax
0000000001045005	movq	%rax, 0x38(%rsp)
000000000104500a	testb	%al, (%rax)
000000000104500c	movq	0x10(%rdx), %rcx
0000000001045010	movq	%rcx, 0x28(%rsp)
0000000001045015	movq	%gs:0x30, %rbx
000000000104501e	movq	0x30(%rbx), %rbx
0000000001045022	movq	%rbx, 0x30(%rsp)
0000000001045027	movl	0x18(%rdx), %edx
000000000104502a	movl	%edx, 0x24(%rsp)
000000000104502e	cmpl	$0x0, %edx
0000000001045031	movq	%rax, (%rsp)
0000000001045035	callq	runtime.lock
000000000104503a	movq	0x30(%rsp), %rax
000000000104503f	movq	0x158(%rax), %rcx
0000000001045046	movq	0x8(%rcx), %rcx
000000000104504a	addq	0x91f77(%rip), %rcx
0000000001045051	movq	%rcx, 0x91f70(%rip)
0000000001045058	movq	0x158(%rax), %rcx
000000000104505f	movq	$0x0, 0x8(%rcx)
0000000001045067	movq	0x158(%rax), %rcx
000000000104506e	movq	0x20(%rcx), %rcx
0000000001045072	addq	0x91f2f(%rip), %rcx
0000000001045079	movq	%rcx, 0x91f28(%rip)
0000000001045080	movq	0x158(%rax), %rax
0000000001045087	movq	$0x0, 0x20(%rax)
000000000104508f	movl	0x24(%rsp), %eax
0000000001045093	cmpl	$0x0, %eax
0000000001045096	je	0x10450a0
0000000001045098	addq	$-0x1, 0x90838(%rip)
00000000010450a0	cmpl	$0x0, 0x8fa49(%rip)
00000000010450a7	jne	0x10450e9
00000000010450a9	movq	0x38(%rsp), %rax
00000000010450ae	movq	%rax, (%rsp)
00000000010450b2	movq	0x28(%rsp), %rcx
00000000010450b7	movq	%rcx, 0x8(%rsp)
00000000010450bc	movw	$0x101, 0x10(%rsp)
00000000010450c3	movq	$0x0, 0x18(%rsp)
00000000010450cc	callq	"runtime.(*mheap).freeSpanLocked"
00000000010450d1	movq	0x38(%rsp), %rax
00000000010450d6	movq	%rax, (%rsp)
00000000010450da	callq	runtime.unlock
00000000010450df	movq	0x40(%rsp), %rbp
00000000010450e4	addq	$0x48, %rsp
00000000010450e8	retq
00000000010450e9	leaq	runtime.gcController(%rip), %rax
00000000010450f0	movq	%rax, (%rsp)
00000000010450f4	callq	"runtime.(*gcControllerState).revise"
00000000010450f9	jmp	0x10450a9
00000000010450fb	callq	runtime.morestack
0000000001045100	jmp	"runtime.(*mheap).freeSpan.func1"
0000000001045105	int3
0000000001045106	int3
0000000001045107	int3
0000000001045108	int3
0000000001045109	int3
000000000104510a	int3
000000000104510b	int3
000000000104510c	int3
000000000104510d	int3
000000000104510e	int3
000000000104510f	int3
runtime.mProf_Malloc.func1:
0000000001045110	movq	%gs:0x30, %rcx
0000000001045119	cmpq	0x10(%rcx), %rsp
000000000104511d	jbe	0x104514d
000000000104511f	subq	$0x18, %rsp
0000000001045123	movq	%rbp, 0x10(%rsp)
0000000001045128	leaq	0x10(%rsp), %rbp
000000000104512d	movq	0x10(%rdx), %rax
0000000001045131	movq	0x8(%rdx), %rcx
0000000001045135	movq	%rcx, (%rsp)
0000000001045139	movq	%rax, 0x8(%rsp)
000000000104513e	callq	runtime.setprofilebucket
0000000001045143	movq	0x10(%rsp), %rbp
0000000001045148	addq	$0x18, %rsp
000000000104514c	retq
000000000104514d	callq	runtime.morestack
0000000001045152	jmp	runtime.mProf_Malloc.func1
0000000001045154	int3
0000000001045155	int3
0000000001045156	int3
0000000001045157	int3
0000000001045158	int3
0000000001045159	int3
000000000104515a	int3
000000000104515b	int3
000000000104515c	int3
000000000104515d	int3
000000000104515e	int3
000000000104515f	int3
runtime.tracealloc.func1:
0000000001045160	movq	%gs:0x30, %rcx
0000000001045169	cmpq	0x10(%rcx), %rsp
000000000104516d	jbe	0x10451af
000000000104516f	subq	$0x28, %rsp
0000000001045173	movq	%rbp, 0x20(%rsp)
0000000001045178	leaq	0x20(%rsp), %rbp
000000000104517d	movq	0x10(%rdx), %rax
0000000001045181	movq	0x18(%rdx), %rcx
0000000001045185	movq	0x8(%rdx), %rdx
0000000001045189	movq	%rdx, (%rsp)
000000000104518d	movq	%rax, 0x8(%rsp)
0000000001045192	movq	$0x0, 0x10(%rsp)
000000000104519b	movq	%rcx, 0x18(%rsp)
00000000010451a0	callq	runtime.traceback
00000000010451a5	movq	0x20(%rsp), %rbp
00000000010451aa	addq	$0x28, %rsp
00000000010451ae	retq
00000000010451af	callq	runtime.morestack
00000000010451b4	jmp	runtime.tracealloc.func1
00000000010451b6	int3
00000000010451b7	int3
00000000010451b8	int3
00000000010451b9	int3
00000000010451ba	int3
00000000010451bb	int3
00000000010451bc	int3
00000000010451bd	int3
00000000010451be	int3
00000000010451bf	int3
runtime.tracefree.func1:
00000000010451c0	movq	%gs:0x30, %rcx
00000000010451c9	cmpq	0x10(%rcx), %rsp
00000000010451cd	jbe	0x104520f
00000000010451cf	subq	$0x28, %rsp
00000000010451d3	movq	%rbp, 0x20(%rsp)
00000000010451d8	leaq	0x20(%rsp), %rbp
00000000010451dd	movq	0x10(%rdx), %rax
00000000010451e1	movq	0x18(%rdx), %rcx
00000000010451e5	movq	0x8(%rdx), %rdx
00000000010451e9	movq	%rdx, (%rsp)
00000000010451ed	movq	%rax, 0x8(%rsp)
00000000010451f2	movq	$0x0, 0x10(%rsp)
00000000010451fb	movq	%rcx, 0x18(%rsp)
0000000001045200	callq	runtime.traceback
0000000001045205	movq	0x20(%rsp), %rbp
000000000104520a	addq	$0x28, %rsp
000000000104520e	retq
000000000104520f	callq	runtime.morestack
0000000001045214	jmp	runtime.tracefree.func1
0000000001045216	int3
0000000001045217	int3
0000000001045218	int3
0000000001045219	int3
000000000104521a	int3
000000000104521b	int3
000000000104521c	int3
000000000104521d	int3
000000000104521e	int3
000000000104521f	int3
runtime.wbBufFlush.func1:
0000000001045220	movq	%gs:0x30, %rcx
0000000001045229	cmpq	0x10(%rcx), %rsp
000000000104522d	jbe	0x1045264
000000000104522f	subq	$0x10, %rsp
0000000001045233	movq	%rbp, 0x8(%rsp)
0000000001045238	leaq	0x8(%rsp), %rbp
000000000104523d	movq	%gs:0x30, %rax
0000000001045246	movq	0x30(%rax), %rax
000000000104524a	movq	0xd0(%rax), %rax
0000000001045251	movq	%rax, (%rsp)
0000000001045255	callq	runtime.wbBufFlush1
000000000104525a	movq	0x8(%rsp), %rbp
000000000104525f	addq	$0x10, %rsp
0000000001045263	retq
0000000001045264	callq	runtime.morestack_noctxt
0000000001045269	jmp	runtime.wbBufFlush.func1
000000000104526b	int3
000000000104526c	int3
000000000104526d	int3
000000000104526e	int3
000000000104526f	int3
runtime.newdefer.func1:
0000000001045270	movq	%gs:0x30, %rcx
0000000001045279	cmpq	0x10(%rcx), %rsp
000000000104527d	jbe	0x104542a
0000000001045283	subq	$0x70, %rsp
0000000001045287	movq	%rbp, 0x68(%rsp)
000000000104528c	leaq	0x68(%rsp), %rbp
0000000001045291	movq	0x10(%rdx), %rax
0000000001045295	movq	%rax, 0x40(%rsp)
000000000104529a	movq	0x8(%rdx), %rcx
000000000104529e	movq	%rcx, 0x50(%rsp)
00000000010452a3	leaq	0x73896(%rip), %rdx
00000000010452aa	movq	%rdx, (%rsp)
00000000010452ae	callq	runtime.lock
00000000010452b3	movq	0x50(%rsp), %rax
00000000010452b8	movq	0x40(%rsp), %rcx
00000000010452bd	testb	%al, (%rax)
00000000010452bf	cmpq	$0x5, %rcx
00000000010452c3	jae	0x1045423
00000000010452c9	leaq	(%rcx,%rcx,2), %rdx
00000000010452cd	leaq	0x58(%rax,%rdx,8), %rbx
00000000010452d2	movq	0x68(%rax,%rdx,8), %rsi
00000000010452d7	shrq	%rsi
00000000010452da	cmpq	%rsi, 0x8(%rbx)
00000000010452de	jge	0x1045409
00000000010452e4	leaq	0x7385d(%rip), %rsi
00000000010452eb	movq	(%rsi,%rcx,8), %r8
00000000010452ef	testq	%r8, %r8
00000000010452f2	je	0x1045409
00000000010452f8	movq	0x28(%r8), %r9
00000000010452fc	cmpl	$0x0, 0x8f92d(%rip)
0000000001045303	jne	0x10453e7
0000000001045309	movq	%r9, (%rsi,%rcx,8)
000000000104530d	movq	$0x0, 0x28(%r8)
0000000001045315	movq	0x60(%rax,%rdx,8), %rsi
000000000104531a	movq	0x58(%rax,%rdx,8), %r9
000000000104531f	movq	0x68(%rax,%rdx,8), %r10
0000000001045324	leaq	0x1(%rsi), %r11
0000000001045328	cmpq	%r10, %r11
000000000104532b	jg	0x104535f
000000000104532d	leaq	0x1(%rsi), %rbx
0000000001045331	movq	%rbx, 0x60(%rax,%rdx,8)
0000000001045336	leaq	(%r9,%rsi,8), %rdi
000000000104533a	cmpl	$0x0, 0x8f8ef(%rip)
0000000001045341	jne	0x104534c
0000000001045343	movq	%r8, (%r9,%rsi,8)
0000000001045347	jmp	0x10452bd
000000000104534c	movq	%rax, %rdx
000000000104534f	movq	%r8, %rax
0000000001045352	callq	runtime.gcWriteBarrier
0000000001045357	movq	%rdx, %rax
000000000104535a	jmp	0x10452bd
000000000104535f	movq	%rbx, 0x60(%rsp)
0000000001045364	movq	%r8, 0x58(%rsp)
0000000001045369	movq	%rdx, 0x48(%rsp)
000000000104536e	leaq	0xf7eb(%rip), %rax
0000000001045375	movq	%rax, (%rsp)
0000000001045379	movq	%r9, 0x8(%rsp)
000000000104537e	movq	%rsi, 0x10(%rsp)
0000000001045383	movq	%r10, 0x18(%rsp)
0000000001045388	movq	%r11, 0x20(%rsp)
000000000104538d	callq	runtime.growslice
0000000001045392	movq	0x28(%rsp), %rax
0000000001045397	movq	0x30(%rsp), %rcx
000000000104539c	movq	0x38(%rsp), %rdx
00000000010453a1	movq	0x48(%rsp), %rbx
00000000010453a6	movq	0x50(%rsp), %rsi
00000000010453ab	movq	%rdx, 0x68(%rsi,%rbx,8)
00000000010453b0	cmpl	$0x0, 0x8f879(%rip)
00000000010453b7	jne	0x10453db
00000000010453b9	movq	%rax, 0x58(%rsi,%rbx,8)
00000000010453be	movq	%rbx, %rdx
00000000010453c1	movq	0x58(%rsp), %r8
00000000010453c6	movq	%rcx, %rsi
00000000010453c9	movq	%rax, %r9
00000000010453cc	movq	0x50(%rsp), %rax
00000000010453d1	movq	0x40(%rsp), %rcx
00000000010453d6	jmp	0x104532d
00000000010453db	movq	0x60(%rsp), %rdi
00000000010453e0	callq	runtime.gcWriteBarrier
00000000010453e5	jmp	0x10453be
00000000010453e7	leaq	(%rsi,%rcx,8), %rdi
00000000010453eb	movq	%rax, %rsi
00000000010453ee	movq	%r9, %rax
00000000010453f1	callq	runtime.gcWriteBarrier
00000000010453f6	leaq	0x28(%r8), %rdi
00000000010453fa	xorl	%eax, %eax
00000000010453fc	callq	runtime.gcWriteBarrier
0000000001045401	movq	%rsi, %rax
0000000001045404	jmp	0x1045315
0000000001045409	leaq	0x73730(%rip), %rax
0000000001045410	movq	%rax, (%rsp)
0000000001045414	callq	runtime.unlock
0000000001045419	movq	0x68(%rsp), %rbp
000000000104541e	addq	$0x70, %rsp
0000000001045422	retq
0000000001045423	callq	runtime.panicindex
0000000001045428	ud2
000000000104542a	callq	runtime.morestack
000000000104542f	jmp	runtime.newdefer.func1
0000000001045434	int3
0000000001045435	int3
0000000001045436	int3
0000000001045437	int3
0000000001045438	int3
0000000001045439	int3
000000000104543a	int3
000000000104543b	int3
000000000104543c	int3
000000000104543d	int3
000000000104543e	int3
000000000104543f	int3
runtime.newdefer.func2:
0000000001045440	movq	%gs:0x30, %rcx
0000000001045449	cmpq	0x10(%rcx), %rsp
000000000104544d	jbe	0x1045576
0000000001045453	subq	$0x30, %rsp
0000000001045457	movq	%rbp, 0x28(%rsp)
000000000104545c	leaq	0x28(%rsp), %rbp
0000000001045461	movq	0x10(%rdx), %rax
0000000001045465	movq	%rax, 0x20(%rsp)
000000000104546a	movslq	0x8(%rdx), %rcx
000000000104546e	leaq	0x30(%rcx), %rdx
0000000001045472	testq	%rcx, %rcx
0000000001045475	movl	$0x30, %ecx
000000000104547a	cmovbeq	%rcx, %rdx
000000000104547e	cmpq	$0x8000, %rdx
0000000001045485	jae	0x1045541
000000000104548b	cmpq	$0x3f8, %rdx
0000000001045492	ja	0x104550f
0000000001045494	leaq	0x7(%rdx), %rcx
0000000001045498	shrq	$0x3, %rcx
000000000104549c	cmpq	$0x81, %rcx
00000000010454a3	jae	0x104556f
00000000010454a9	leaq	runtime.size_to_class8(%rip), %rdx
00000000010454b0	movzbl	(%rcx,%rdx), %ecx
00000000010454b4	cmpq	$0x43, %rcx
00000000010454b8	jae	0x104556f
00000000010454be	leaq	runtime.class_to_size(%rip), %rdx
00000000010454c5	movzwl	(%rdx,%rcx,2), %ecx
00000000010454c9	movq	%rcx, (%rsp)
00000000010454cd	movq	runtime.deferType(%rip), %rax
00000000010454d4	movq	%rax, 0x8(%rsp)
00000000010454d9	movb	$0x1, 0x10(%rsp)
00000000010454de	callq	runtime.mallocgc
00000000010454e3	movq	0x18(%rsp), %rax
00000000010454e8	cmpl	$0x0, 0x8f741(%rip)
00000000010454ef	jne	0x1045503
00000000010454f1	movq	0x20(%rsp), %rcx
00000000010454f6	movq	%rax, (%rcx)
00000000010454f9	movq	0x28(%rsp), %rbp
00000000010454fe	addq	$0x30, %rsp
0000000001045502	retq
0000000001045503	movq	0x20(%rsp), %rdi
0000000001045508	callq	runtime.gcWriteBarrier
000000000104550d	jmp	0x10454f9
000000000104550f	leaq	-0x381(%rdx), %rcx
0000000001045516	shrq	$0x7, %rcx
000000000104551a	cmpq	$0xf9, %rcx
0000000001045521	jae	0x1045568
0000000001045523	leaq	runtime.size_to_class128(%rip), %rdx
000000000104552a	movzbl	(%rdx,%rcx), %ecx
000000000104552e	cmpq	$0x43, %rcx
0000000001045532	jae	0x1045568
0000000001045534	leaq	runtime.class_to_size(%rip), %rdx
000000000104553b	movzwl	(%rdx,%rcx,2), %ecx
000000000104553f	jmp	0x10454c9
0000000001045541	leaq	0x2000(%rdx), %rcx
0000000001045548	cmpq	%rdx, %rcx
000000000104554b	jae	0x1045555
000000000104554d	movq	%rdx, %rcx
0000000001045550	jmp	0x10454c9
0000000001045555	leaq	0x1fff(%rdx), %rcx
000000000104555c	andq	$-0x2000, %rcx
0000000001045563	jmp	0x10454c9
0000000001045568	callq	runtime.panicindex
000000000104556d	ud2
000000000104556f	callq	runtime.panicindex
0000000001045574	ud2
0000000001045576	callq	runtime.morestack
000000000104557b	jmp	runtime.newdefer.func2
runtime.freedefer.func1:
0000000001045580	movq	%gs:0x30, %rcx
0000000001045589	cmpq	0x10(%rcx), %rsp
000000000104558d	jbe	0x10456ea
0000000001045593	subq	$0x28, %rsp
0000000001045597	movq	%rbp, 0x20(%rsp)
000000000104559c	leaq	0x20(%rsp), %rbp
00000000010455a1	movq	0x10(%rdx), %rcx
00000000010455a5	movq	0x8(%rdx), %rdx
00000000010455a9	xorl	%eax, %eax
00000000010455ab	xorl	%ebx, %ebx
00000000010455ad	jmp	0x10455b2
00000000010455af	movq	%r11, %rax
00000000010455b2	testb	%al, (%rdx)
00000000010455b4	cmpq	$0x5, %rcx
00000000010455b8	jae	0x10456e3
00000000010455be	leaq	(%rcx,%rcx,2), %rsi
00000000010455c2	movq	0x60(%rdx,%rsi,8), %r8
00000000010455c7	movq	0x58(%rdx,%rsi,8), %r9
00000000010455cc	movq	0x68(%rdx,%rsi,8), %r10
00000000010455d1	shrq	%r10
00000000010455d4	cmpq	%r10, %r8
00000000010455d7	jle	0x1045653
00000000010455d9	leaq	-0x1(%r8), %r10
00000000010455dd	cmpq	%r8, %r10
00000000010455e0	jae	0x10456dc
00000000010455e6	movq	-0x8(%r9,%r8,8), %r11
00000000010455eb	leaq	-0x8(%r9,%r8,8), %rdi
00000000010455f0	cmpl	$0x0, 0x8f639(%rip)
00000000010455f7	jne	0x1045644
00000000010455f9	movq	$0x0, -0x8(%r9,%r8,8)
0000000001045602	movq	0x68(%rdx,%rsi,8), %r8
0000000001045607	cmpq	%r8, %r10
000000000104560a	ja	0x10456d5
0000000001045610	movq	%r10, 0x60(%rdx,%rsi,8)
0000000001045615	testq	%rbx, %rbx
0000000001045618	je	0x104563c
000000000104561a	testb	%al, (%rax)
000000000104561c	cmpl	$0x0, 0x8f60d(%rip)
0000000001045623	jne	0x104562b
0000000001045625	movq	%r11, 0x28(%rax)
0000000001045629	jmp	0x10455af
000000000104562b	leaq	0x28(%rax), %rdi
000000000104562f	movq	%r11, %rax
0000000001045632	callq	runtime.gcWriteBarrier
0000000001045637	jmp	0x10455af
000000000104563c	movq	%r11, %rbx
000000000104563f	jmp	0x10455af
0000000001045644	movq	%rax, %r8
0000000001045647	xorl	%eax, %eax
0000000001045649	callq	runtime.gcWriteBarrier
000000000104564e	movq	%r8, %rax
0000000001045651	jmp	0x1045602
0000000001045653	movq	%rcx, 0x8(%rsp)
0000000001045658	movq	%rbx, 0x18(%rsp)
000000000104565d	movq	%rax, 0x10(%rsp)
0000000001045662	leaq	0x734d7(%rip), %rax
0000000001045669	movq	%rax, (%rsp)
000000000104566d	callq	runtime.lock
0000000001045672	movq	0x10(%rsp), %rax
0000000001045677	testb	%al, (%rax)
0000000001045679	movq	0x8(%rsp), %rcx
000000000104567e	leaq	0x734c3(%rip), %rdx
0000000001045685	movq	(%rdx,%rcx,8), %rbx
0000000001045689	cmpl	$0x0, 0x8f5a0(%rip)
0000000001045690	jne	0x10456b9
0000000001045692	movq	%rbx, 0x28(%rax)
0000000001045696	movq	0x18(%rsp), %rax
000000000104569b	movq	%rax, (%rdx,%rcx,8)
000000000104569f	leaq	0x7349a(%rip), %rax
00000000010456a6	movq	%rax, (%rsp)
00000000010456aa	callq	runtime.unlock
00000000010456af	movq	0x20(%rsp), %rbp
00000000010456b4	addq	$0x28, %rsp
00000000010456b8	retq
00000000010456b9	leaq	0x28(%rax), %rdi
00000000010456bd	movq	%rbx, %rax
00000000010456c0	callq	runtime.gcWriteBarrier
00000000010456c5	leaq	(%rdx,%rcx,8), %rdi
00000000010456c9	movq	0x18(%rsp), %rax
00000000010456ce	callq	runtime.gcWriteBarrier
00000000010456d3	jmp	0x104569f
00000000010456d5	callq	runtime.panicslice
00000000010456da	ud2
00000000010456dc	callq	runtime.panicindex
00000000010456e1	ud2
00000000010456e3	callq	runtime.panicindex
00000000010456e8	ud2
00000000010456ea	callq	runtime.morestack
00000000010456ef	jmp	runtime.freedefer.func1
00000000010456f4	int3
00000000010456f5	int3
00000000010456f6	int3
00000000010456f7	int3
00000000010456f8	int3
00000000010456f9	int3
00000000010456fa	int3
00000000010456fb	int3
00000000010456fc	int3
00000000010456fd	int3
00000000010456fe	int3
00000000010456ff	int3
runtime.preprintpanics.func1:
0000000001045700	movq	%gs:0x30, %rcx
0000000001045709	cmpq	0x10(%rcx), %rsp
000000000104570d	jbe	0x1045758
000000000104570f	subq	$0x20, %rsp
0000000001045713	movq	%rbp, 0x18(%rsp)
0000000001045718	leaq	0x18(%rsp), %rbp
000000000104571d	leaq	0x28(%rsp), %rax
0000000001045722	movq	%rax, (%rsp)
0000000001045726	callq	runtime.gorecover
000000000104572b	cmpq	$0x0, 0x8(%rsp)
0000000001045731	jne	0x104573d
0000000001045733	movq	0x18(%rsp), %rbp
0000000001045738	addq	$0x20, %rsp
000000000104573c	retq
000000000104573d	leaq	0x27ecb(%rip), %rax
0000000001045744	movq	%rax, (%rsp)
0000000001045748	movq	$0x20, 0x8(%rsp)
0000000001045751	callq	runtime.throw
0000000001045756	ud2
0000000001045758	callq	runtime.morestack_noctxt
000000000104575d	jmp	runtime.preprintpanics.func1
000000000104575f	int3
runtime.throw.func1:
0000000001045760	movq	%gs:0x30, %rcx
0000000001045769	cmpq	0x10(%rcx), %rsp
000000000104576d	jbe	0x10457d9
000000000104576f	subq	$0x28, %rsp
0000000001045773	movq	%rbp, 0x20(%rsp)
0000000001045778	leaq	0x20(%rsp), %rbp
000000000104577d	movq	0x8(%rdx), %rax
0000000001045781	movq	%rax, 0x18(%rsp)
0000000001045786	movq	0x10(%rdx), %rcx
000000000104578a	movq	%rcx, 0x10(%rsp)
000000000104578f	callq	runtime.printlock
0000000001045794	leaq	0x25cdd(%rip), %rax
000000000104579b	movq	%rax, (%rsp)
000000000104579f	movq	$0xd, 0x8(%rsp)
00000000010457a8	callq	runtime.printstring
00000000010457ad	movq	0x18(%rsp), %rax
00000000010457b2	movq	%rax, (%rsp)
00000000010457b6	movq	0x10(%rsp), %rax
00000000010457bb	movq	%rax, 0x8(%rsp)
00000000010457c0	callq	runtime.printstring
00000000010457c5	callq	runtime.printnl
00000000010457ca	callq	runtime.printunlock
00000000010457cf	movq	0x20(%rsp), %rbp
00000000010457d4	addq	$0x28, %rsp
00000000010457d8	retq
00000000010457d9	callq	runtime.morestack
00000000010457de	jmp	runtime.throw.func1
runtime.fatalthrow.func1:
00000000010457e0	movq	%gs:0x30, %rcx
00000000010457e9	cmpq	0x10(%rcx), %rsp
00000000010457ed	jbe	0x1045866
00000000010457ef	subq	$0x40, %rsp
00000000010457f3	movq	%rbp, 0x38(%rsp)
00000000010457f8	leaq	0x38(%rsp), %rbp
00000000010457fd	movq	0x10(%rdx), %rax
0000000001045801	movq	%rax, 0x28(%rsp)
0000000001045806	movq	0x18(%rdx), %rcx
000000000104580a	movq	%rcx, 0x20(%rsp)
000000000104580f	movq	0x8(%rdx), %rdx
0000000001045813	movq	%rdx, 0x30(%rsp)
0000000001045818	callq	runtime.startpanic_m
000000000104581d	movq	0x30(%rsp), %rax
0000000001045822	movq	%rax, (%rsp)
0000000001045826	movq	0x28(%rsp), %rax
000000000104582b	movq	%rax, 0x8(%rsp)
0000000001045830	movq	0x20(%rsp), %rax
0000000001045835	movq	%rax, 0x10(%rsp)
000000000104583a	callq	runtime.dopanic_m
000000000104583f	leaq	0x18(%rsp), %rax
0000000001045844	cmpb	$0x0, (%rax)
0000000001045847	jne	0x104585f
0000000001045849	movl	$0x2, (%rsp)
0000000001045850	callq	runtime.exit
0000000001045855	movq	0x38(%rsp), %rbp
000000000104585a	addq	$0x40, %rsp
000000000104585e	retq
000000000104585f	callq	runtime.crash
0000000001045864	jmp	0x1045849
0000000001045866	callq	runtime.morestack
000000000104586b	jmp	runtime.fatalthrow.func1
runtime.fatalpanic.func1:
0000000001045870	movq	%gs:0x30, %rcx
0000000001045879	cmpq	0x10(%rcx), %rsp
000000000104587d	jbe	0x1045926
0000000001045883	subq	$0x50, %rsp
0000000001045887	movq	%rbp, 0x48(%rsp)
000000000104588c	leaq	0x48(%rsp), %rbp
0000000001045891	movq	0x10(%rdx), %rax
0000000001045895	movq	%rax, 0x38(%rsp)
000000000104589a	movq	0x18(%rdx), %rcx
000000000104589e	movq	%rcx, 0x28(%rsp)
00000000010458a3	movq	0x20(%rdx), %rbx
00000000010458a7	movq	%rbx, 0x20(%rsp)
00000000010458ac	movq	0x28(%rdx), %rsi
00000000010458b0	movq	%rsi, 0x40(%rsp)
00000000010458b5	movq	0x8(%rdx), %rdx
00000000010458b9	movq	%rdx, 0x30(%rsp)
00000000010458be	callq	runtime.startpanic_m
00000000010458c3	cmpb	$0x0, (%rsp)
00000000010458c7	je	0x10458d3
00000000010458c9	movq	0x30(%rsp), %rax
00000000010458ce	testq	%rax, %rax
00000000010458d1	jne	0x104590b
00000000010458d3	movq	0x38(%rsp), %rax
00000000010458d8	movq	%rax, (%rsp)
00000000010458dc	movq	0x28(%rsp), %rax
00000000010458e1	movq	%rax, 0x8(%rsp)
00000000010458e6	movq	0x20(%rsp), %rax
00000000010458eb	movq	%rax, 0x10(%rsp)
00000000010458f0	callq	runtime.dopanic_m
00000000010458f5	movzbl	0x18(%rsp), %eax
00000000010458fa	movq	0x40(%rsp), %rcx
00000000010458ff	movb	%al, (%rcx)
0000000001045901	movq	0x48(%rsp), %rbp
0000000001045906	addq	$0x50, %rsp
000000000104590a	retq
000000000104590b	movl	$0xffffffff, %ecx
0000000001045910	leaq	runtime.runningPanicDefers(%rip), %rdx
0000000001045917	lock
0000000001045918	xaddl	%ecx, (%rdx)
000000000104591b	movq	%rax, (%rsp)
000000000104591f	callq	runtime.printpanics
0000000001045924	jmp	0x10458d3
0000000001045926	callq	runtime.morestack
000000000104592b	jmp	runtime.fatalpanic.func1
runtime.fatalpanic.func2:
0000000001045930	movq	%gs:0x30, %rcx
0000000001045939	cmpq	0x10(%rcx), %rsp
000000000104593d	jbe	0x1045963
000000000104593f	subq	$0x10, %rsp
0000000001045943	movq	%rbp, 0x8(%rsp)
0000000001045948	leaq	0x8(%rsp), %rbp
000000000104594d	movl	$0x2, (%rsp)
0000000001045954	callq	runtime.exit
0000000001045959	movq	0x8(%rsp), %rbp
000000000104595e	addq	$0x10, %rsp
0000000001045962	retq
0000000001045963	callq	runtime.morestack_noctxt
0000000001045968	jmp	runtime.fatalpanic.func2
000000000104596a	int3
000000000104596b	int3
000000000104596c	int3
000000000104596d	int3
000000000104596e	int3
000000000104596f	int3
runtime.hexdumpWords.func1:
0000000001045970	movq	%gs:0x30, %rcx
0000000001045979	cmpq	0x10(%rcx), %rsp
000000000104597d	jbe	0x10459f9
000000000104597f	subq	$0x30, %rsp
0000000001045983	movq	%rbp, 0x28(%rsp)
0000000001045988	leaq	0x28(%rsp), %rbp
000000000104598d	xorps	%xmm0, %xmm0
0000000001045990	movups	%xmm0, 0x18(%rsp)
0000000001045995	movq	0x38(%rsp), %rax
000000000104599a	movl	$0xf, %ecx
000000000104599f	jmp	0x10459ab
00000000010459a1	decq	%rcx
00000000010459a4	shrq	$0x4, %rdx
00000000010459a8	movq	%rdx, %rax
00000000010459ab	testq	%rcx, %rcx
00000000010459ae	jl	0x10459cf
00000000010459b0	movq	%rax, %rdx
00000000010459b3	andq	$0xf, %rax
00000000010459b7	cmpq	$0xa, %rax
00000000010459bb	jae	0x10459c6
00000000010459bd	addl	$0x30, %eax
00000000010459c0	movb	%al, 0x18(%rsp,%rcx)
00000000010459c4	jmp	0x10459a1
00000000010459c6	addl	$0x57, %eax
00000000010459c9	movb	%al, 0x18(%rsp,%rcx)
00000000010459cd	jmp	0x10459a1
00000000010459cf	leaq	0x18(%rsp), %rax
00000000010459d4	movq	%rax, (%rsp)
00000000010459d8	movq	$0x10, 0x8(%rsp)
00000000010459e1	movq	$0x10, 0x10(%rsp)
00000000010459ea	callq	runtime.gwrite
00000000010459ef	movq	0x28(%rsp), %rbp
00000000010459f4	addq	$0x30, %rsp
00000000010459f8	retq
00000000010459f9	callq	runtime.morestack_noctxt
00000000010459fe	jmp	runtime.hexdumpWords.func1
0000000001045a03	int3
0000000001045a04	int3
0000000001045a05	int3
0000000001045a06	int3
0000000001045a07	int3
0000000001045a08	int3
0000000001045a09	int3
0000000001045a0a	int3
0000000001045a0b	int3
0000000001045a0c	int3
0000000001045a0d	int3
0000000001045a0e	int3
0000000001045a0f	int3
runtime.main.func1:
0000000001045a10	movq	%gs:0x30, %rcx
0000000001045a19	cmpq	0x10(%rcx), %rsp
0000000001045a1d	jbe	0x1045a50
0000000001045a1f	subq	$0x18, %rsp
0000000001045a23	movq	%rbp, 0x10(%rsp)
0000000001045a28	leaq	0x10(%rsp), %rbp
0000000001045a2d	leaq	0x2967c(%rip), %rax
0000000001045a34	movq	%rax, (%rsp)
0000000001045a38	movq	$0x0, 0x8(%rsp)
0000000001045a41	callq	runtime.newm
0000000001045a46	movq	0x10(%rsp), %rbp
0000000001045a4b	addq	$0x18, %rsp
0000000001045a4f	retq
0000000001045a50	callq	runtime.morestack_noctxt
0000000001045a55	jmp	runtime.main.func1
0000000001045a57	int3
0000000001045a58	int3
0000000001045a59	int3
0000000001045a5a	int3
0000000001045a5b	int3
0000000001045a5c	int3
0000000001045a5d	int3
0000000001045a5e	int3
0000000001045a5f	int3
runtime.main.func2:
0000000001045a60	movq	%gs:0x30, %rcx
0000000001045a69	cmpq	0x10(%rcx), %rsp
0000000001045a6d	jbe	0x1045a95
0000000001045a6f	subq	$0x8, %rsp
0000000001045a73	movq	%rbp, (%rsp)
0000000001045a77	leaq	(%rsp), %rbp
0000000001045a7b	movq	0x10(%rsp), %rax
0000000001045a80	cmpb	$0x0, (%rax)
0000000001045a83	jne	0x1045a8e
0000000001045a85	movq	(%rsp), %rbp
0000000001045a89	addq	$0x8, %rsp
0000000001045a8d	retq
0000000001045a8e	callq	runtime.unlockOSThread
0000000001045a93	jmp	0x1045a85
0000000001045a95	callq	runtime.morestack_noctxt
0000000001045a9a	jmp	runtime.main.func2
0000000001045a9c	int3
0000000001045a9d	int3
0000000001045a9e	int3
0000000001045a9f	int3
runtime.goready.func1:
0000000001045aa0	movq	%gs:0x30, %rcx
0000000001045aa9	cmpq	0x10(%rcx), %rsp
0000000001045aad	jbe	0x1045ae2
0000000001045aaf	subq	$0x20, %rsp
0000000001045ab3	movq	%rbp, 0x18(%rsp)
0000000001045ab8	leaq	0x18(%rsp), %rbp
0000000001045abd	movq	0x10(%rdx), %rax
0000000001045ac1	movq	0x8(%rdx), %rcx
0000000001045ac5	movq	%rcx, (%rsp)
0000000001045ac9	movq	%rax, 0x8(%rsp)
0000000001045ace	movb	$0x1, 0x10(%rsp)
0000000001045ad3	callq	runtime.ready
0000000001045ad8	movq	0x18(%rsp), %rbp
0000000001045add	addq	$0x20, %rsp
0000000001045ae1	retq
0000000001045ae2	callq	runtime.morestack
0000000001045ae7	jmp	runtime.goready.func1
0000000001045ae9	int3
0000000001045aea	int3
0000000001045aeb	int3
0000000001045aec	int3
0000000001045aed	int3
0000000001045aee	int3
0000000001045aef	int3
runtime.casgstatus.func1:
0000000001045af0	movq	%gs:0x30, %rcx
0000000001045af9	cmpq	0x10(%rcx), %rsp
0000000001045afd	jbe	0x1045b99
0000000001045b03	subq	$0x28, %rsp
0000000001045b07	movq	%rbp, 0x20(%rsp)
0000000001045b0c	leaq	0x20(%rsp), %rbp
0000000001045b11	movl	0x8(%rdx), %eax
0000000001045b14	movq	%rax, 0x18(%rsp)
0000000001045b19	movl	0xc(%rdx), %ecx
0000000001045b1c	movq	%rcx, 0x10(%rsp)
0000000001045b21	callq	runtime.printlock
0000000001045b26	leaq	0x273d6(%rip), %rax
0000000001045b2d	movq	%rax, (%rsp)
0000000001045b31	movq	$0x1c, 0x8(%rsp)
0000000001045b3a	callq	runtime.printstring
0000000001045b3f	movq	0x18(%rsp), %rax
0000000001045b44	movq	%rax, (%rsp)
0000000001045b48	callq	runtime.printhex
0000000001045b4d	leaq	0x252bd(%rip), %rax
0000000001045b54	movq	%rax, (%rsp)
0000000001045b58	movq	$0x8, 0x8(%rsp)
0000000001045b61	callq	runtime.printstring
0000000001045b66	movq	0x10(%rsp), %rax
0000000001045b6b	movq	%rax, (%rsp)
0000000001045b6f	callq	runtime.printhex
0000000001045b74	callq	runtime.printnl
0000000001045b79	callq	runtime.printunlock
0000000001045b7e	leaq	0x27894(%rip), %rax
0000000001045b85	movq	%rax, (%rsp)
0000000001045b89	movq	$0x1f, 0x8(%rsp)
0000000001045b92	callq	runtime.throw
0000000001045b97	ud2
0000000001045b99	callq	runtime.morestack
0000000001045b9e	jmp	runtime.casgstatus.func1
0000000001045ba3	int3
0000000001045ba4	int3
0000000001045ba5	int3
0000000001045ba6	int3
0000000001045ba7	int3
0000000001045ba8	int3
0000000001045ba9	int3
0000000001045baa	int3
0000000001045bab	int3
0000000001045bac	int3
0000000001045bad	int3
0000000001045bae	int3
0000000001045baf	int3
runtime.casgstatus.func2:
0000000001045bb0	movq	%gs:0x30, %rcx
0000000001045bb9	cmpq	0x10(%rcx), %rsp
0000000001045bbd	jbe	0x1045ca3
0000000001045bc3	subq	$0x30, %rsp
0000000001045bc7	movq	%rbp, 0x28(%rsp)
0000000001045bcc	leaq	0x28(%rsp), %rbp
0000000001045bd1	movq	0x10(%rdx), %rax
0000000001045bd5	movl	0x8(%rdx), %ecx
0000000001045bd8	movq	%rcx, 0x20(%rsp)
0000000001045bdd	movl	0xc(%rdx), %edx
0000000001045be0	movq	%rdx, 0x18(%rsp)
0000000001045be5	movl	0x90(%rax), %eax
0000000001045beb	movq	%rax, 0x10(%rsp)
0000000001045bf0	callq	runtime.printlock
0000000001045bf5	leaq	0x262f8(%rip), %rax
0000000001045bfc	movq	%rax, (%rsp)
0000000001045c00	movq	$0x14, 0x8(%rsp)
0000000001045c09	callq	runtime.printstring
0000000001045c0e	movq	0x20(%rsp), %rax
0000000001045c13	movq	%rax, (%rsp)
0000000001045c17	callq	runtime.printhex
0000000001045c1c	leaq	0x24e7b(%rip), %rax
0000000001045c23	movq	%rax, (%rsp)
0000000001045c27	movq	$0x2, 0x8(%rsp)
0000000001045c30	callq	runtime.printstring
0000000001045c35	movq	0x18(%rsp), %rax
0000000001045c3a	movq	%rax, (%rsp)
0000000001045c3e	callq	runtime.printhex
0000000001045c43	leaq	0x2548d(%rip), %rax
0000000001045c4a	movq	%rax, (%rsp)
0000000001045c4e	movq	$0xb, 0x8(%rsp)
0000000001045c57	callq	runtime.printstring
0000000001045c5c	movq	0x10(%rsp), %rax
0000000001045c61	movq	%rax, (%rsp)
0000000001045c65	callq	runtime.printhex
0000000001045c6a	leaq	0x262fb(%rip), %rax
0000000001045c71	movq	%rax, (%rsp)
0000000001045c75	movq	$0x15, 0x8(%rsp)
0000000001045c7e	callq	runtime.printstring
0000000001045c83	callq	runtime.printunlock
0000000001045c88	leaq	0x253cd(%rip), %rax
0000000001045c8f	movq	%rax, (%rsp)
0000000001045c93	movq	$0xa, 0x8(%rsp)
0000000001045c9c	callq	runtime.throw
0000000001045ca1	ud2
0000000001045ca3	callq	runtime.morestack
0000000001045ca8	jmp	runtime.casgstatus.func2
0000000001045cad	int3
0000000001045cae	int3
0000000001045caf	int3
runtime.reentersyscall.func1:
0000000001045cb0	movq	%gs:0x30, %rcx
0000000001045cb9	cmpq	0x10(%rcx), %rsp
0000000001045cbd	jbe	0x1045da2
0000000001045cc3	subq	$0x30, %rsp
0000000001045cc7	movq	%rbp, 0x28(%rsp)
0000000001045ccc	leaq	0x28(%rsp), %rbp
0000000001045cd1	movq	0x8(%rdx), %rax
0000000001045cd5	movq	0x70(%rax), %rcx
0000000001045cd9	movq	%rcx, 0x20(%rsp)
0000000001045cde	movq	(%rax), %rdx
0000000001045ce1	movq	%rdx, 0x18(%rsp)
0000000001045ce6	movq	0x8(%rax), %rax
0000000001045cea	movq	%rax, 0x10(%rsp)
0000000001045cef	callq	runtime.printlock
0000000001045cf4	leaq	0x26bf9(%rip), %rax
0000000001045cfb	movq	%rax, (%rsp)
0000000001045cff	movq	$0x1a, 0x8(%rsp)
0000000001045d08	callq	runtime.printstring
0000000001045d0d	movq	0x20(%rsp), %rax
0000000001045d12	movq	%rax, (%rsp)
0000000001045d16	callq	runtime.printhex
0000000001045d1b	leaq	0x24d74(%rip), %rax
0000000001045d22	movq	%rax, (%rsp)
0000000001045d26	movq	$0x2, 0x8(%rsp)
0000000001045d2f	callq	runtime.printstring
0000000001045d34	movq	0x18(%rsp), %rax
0000000001045d39	movq	%rax, (%rsp)
0000000001045d3d	callq	runtime.printhex
0000000001045d42	leaq	0x24d3b(%rip), %rax
0000000001045d49	movq	%rax, (%rsp)
0000000001045d4d	movq	$0x1, 0x8(%rsp)
0000000001045d56	callq	runtime.printstring
0000000001045d5b	movq	0x10(%rsp), %rax
0000000001045d60	movq	%rax, (%rsp)
0000000001045d64	callq	runtime.printhex
0000000001045d69	leaq	0x24d36(%rip), %rax
0000000001045d70	movq	%rax, (%rsp)
0000000001045d74	movq	$0x2, 0x8(%rsp)
0000000001045d7d	callq	runtime.printstring
0000000001045d82	callq	runtime.printunlock
0000000001045d87	leaq	0x255aa(%rip), %rax
0000000001045d8e	movq	%rax, (%rsp)
0000000001045d92	movq	$0xc, 0x8(%rsp)
0000000001045d9b	callq	runtime.throw
0000000001045da0	ud2
0000000001045da2	callq	runtime.morestack
0000000001045da7	jmp	runtime.reentersyscall.func1
0000000001045dac	int3
0000000001045dad	int3
0000000001045dae	int3
0000000001045daf	int3
runtime.entersyscallblock.func1:
0000000001045db0	movq	%gs:0x30, %rcx
0000000001045db9	cmpq	0x10(%rcx), %rsp
0000000001045dbd	jbe	0x1045eda
0000000001045dc3	subq	$0x40, %rsp
0000000001045dc7	movq	%rbp, 0x38(%rsp)
0000000001045dcc	leaq	0x38(%rsp), %rbp
0000000001045dd1	movq	0x20(%rdx), %rax
0000000001045dd5	movq	0x10(%rdx), %rcx
0000000001045dd9	movq	%rcx, 0x18(%rsp)
0000000001045dde	movq	0x18(%rdx), %rbx
0000000001045de2	movq	%rbx, 0x10(%rsp)
0000000001045de7	movq	0x8(%rdx), %rdx
0000000001045deb	movq	%rdx, 0x20(%rsp)
0000000001045df0	movq	(%rax), %rsi
0000000001045df3	movq	%rsi, 0x28(%rsp)
0000000001045df8	movq	0x8(%rax), %rax
0000000001045dfc	movq	%rax, 0x30(%rsp)
0000000001045e01	callq	runtime.printlock
0000000001045e06	leaq	0x2764a(%rip), %rax
0000000001045e0d	movq	%rax, (%rsp)
0000000001045e11	movq	$0x1f, 0x8(%rsp)
0000000001045e1a	callq	runtime.printstring
0000000001045e1f	movq	0x20(%rsp), %rax
0000000001045e24	movq	%rax, (%rsp)
0000000001045e28	callq	runtime.printhex
0000000001045e2d	callq	runtime.printsp
0000000001045e32	movq	0x18(%rsp), %rax
0000000001045e37	movq	%rax, (%rsp)
0000000001045e3b	callq	runtime.printhex
0000000001045e40	callq	runtime.printsp
0000000001045e45	movq	0x10(%rsp), %rax
0000000001045e4a	movq	%rax, (%rsp)
0000000001045e4e	callq	runtime.printhex
0000000001045e53	leaq	0x24c3c(%rip), %rax
0000000001045e5a	movq	%rax, (%rsp)
0000000001045e5e	movq	$0x2, 0x8(%rsp)
0000000001045e67	callq	runtime.printstring
0000000001045e6c	movq	0x28(%rsp), %rax
0000000001045e71	movq	%rax, (%rsp)
0000000001045e75	callq	runtime.printhex
0000000001045e7a	leaq	0x24c03(%rip), %rax
0000000001045e81	movq	%rax, (%rsp)
0000000001045e85	movq	$0x1, 0x8(%rsp)
0000000001045e8e	callq	runtime.printstring
0000000001045e93	movq	0x30(%rsp), %rax
0000000001045e98	movq	%rax, (%rsp)
0000000001045e9c	callq	runtime.printhex
0000000001045ea1	leaq	0x24bfe(%rip), %rax
0000000001045ea8	movq	%rax, (%rsp)
0000000001045eac	movq	$0x2, 0x8(%rsp)
0000000001045eb5	callq	runtime.printstring
0000000001045eba	callq	runtime.printunlock
0000000001045ebf	leaq	0x25a7b(%rip), %rax
0000000001045ec6	movq	%rax, (%rsp)
0000000001045eca	movq	$0x11, 0x8(%rsp)
0000000001045ed3	callq	runtime.throw
0000000001045ed8	ud2
0000000001045eda	callq	runtime.morestack
0000000001045edf	jmp	runtime.entersyscallblock.func1
0000000001045ee4	int3
0000000001045ee5	int3
0000000001045ee6	int3
0000000001045ee7	int3
0000000001045ee8	int3
0000000001045ee9	int3
0000000001045eea	int3
0000000001045eeb	int3
0000000001045eec	int3
0000000001045eed	int3
0000000001045eee	int3
0000000001045eef	int3
runtime.entersyscallblock.func2:
0000000001045ef0	movq	%gs:0x30, %rcx
0000000001045ef9	cmpq	0x10(%rcx), %rsp
0000000001045efd	jbe	0x104601a
0000000001045f03	subq	$0x40, %rsp
0000000001045f07	movq	%rbp, 0x38(%rsp)
0000000001045f0c	leaq	0x38(%rsp), %rbp
0000000001045f11	movq	0x10(%rdx), %rax
0000000001045f15	movq	0x8(%rdx), %rcx
0000000001045f19	movq	%rcx, 0x10(%rsp)
0000000001045f1e	movq	0x38(%rax), %rdx
0000000001045f22	movq	%rdx, 0x28(%rsp)
0000000001045f27	movq	0x70(%rax), %rbx
0000000001045f2b	movq	%rbx, 0x20(%rsp)
0000000001045f30	movq	(%rax), %rsi
0000000001045f33	movq	%rsi, 0x18(%rsp)
0000000001045f38	movq	0x8(%rax), %rax
0000000001045f3c	movq	%rax, 0x30(%rsp)
0000000001045f41	callq	runtime.printlock
0000000001045f46	leaq	0x2750a(%rip), %rax
0000000001045f4d	movq	%rax, (%rsp)
0000000001045f51	movq	$0x1f, 0x8(%rsp)
0000000001045f5a	callq	runtime.printstring
0000000001045f5f	movq	0x10(%rsp), %rax
0000000001045f64	movq	%rax, (%rsp)
0000000001045f68	callq	runtime.printhex
0000000001045f6d	callq	runtime.printsp
0000000001045f72	movq	0x28(%rsp), %rax
0000000001045f77	movq	%rax, (%rsp)
0000000001045f7b	callq	runtime.printhex
0000000001045f80	callq	runtime.printsp
0000000001045f85	movq	0x20(%rsp), %rax
0000000001045f8a	movq	%rax, (%rsp)
0000000001045f8e	callq	runtime.printhex
0000000001045f93	leaq	0x24afc(%rip), %rax
0000000001045f9a	movq	%rax, (%rsp)
0000000001045f9e	movq	$0x2, 0x8(%rsp)
0000000001045fa7	callq	runtime.printstring
0000000001045fac	movq	0x18(%rsp), %rax
0000000001045fb1	movq	%rax, (%rsp)
0000000001045fb5	callq	runtime.printhex
0000000001045fba	leaq	0x24ac3(%rip), %rax
0000000001045fc1	movq	%rax, (%rsp)
0000000001045fc5	movq	$0x1, 0x8(%rsp)
0000000001045fce	callq	runtime.printstring
0000000001045fd3	movq	0x30(%rsp), %rax
0000000001045fd8	movq	%rax, (%rsp)
0000000001045fdc	callq	runtime.printhex
0000000001045fe1	leaq	0x24abe(%rip), %rax
0000000001045fe8	movq	%rax, (%rsp)
0000000001045fec	movq	$0x2, 0x8(%rsp)
0000000001045ff5	callq	runtime.printstring
0000000001045ffa	callq	runtime.printunlock
0000000001045fff	leaq	0x2593b(%rip), %rax
0000000001046006	movq	%rax, (%rsp)
000000000104600a	movq	$0x11, 0x8(%rsp)
0000000001046013	callq	runtime.throw
0000000001046018	ud2
000000000104601a	callq	runtime.morestack
000000000104601f	jmp	runtime.entersyscallblock.func2
0000000001046024	int3
0000000001046025	int3
0000000001046026	int3
0000000001046027	int3
0000000001046028	int3
0000000001046029	int3
000000000104602a	int3
000000000104602b	int3
000000000104602c	int3
000000000104602d	int3
000000000104602e	int3
000000000104602f	int3
runtime.exitsyscallfast.func1:
0000000001046030	movq	%gs:0x30, %rcx
0000000001046039	cmpq	0x10(%rcx), %rsp
000000000104603d	jbe	0x10460cd
0000000001046043	subq	$0x28, %rsp
0000000001046047	movq	%rbp, 0x20(%rsp)
000000000104604c	leaq	0x20(%rsp), %rbp
0000000001046051	movq	0x10(%rdx), %rax
0000000001046055	movq	%rax, 0x8(%rsp)
000000000104605a	movq	0x18(%rdx), %rcx
000000000104605e	movq	%rcx, 0x10(%rsp)
0000000001046063	movq	0x8(%rdx), %rdx
0000000001046067	movq	%rdx, 0x18(%rsp)
000000000104606c	callq	runtime.exitsyscallfast_pidle
0000000001046071	movzbl	(%rsp), %eax
0000000001046075	movq	0x18(%rsp), %rcx
000000000104607a	movb	%al, (%rcx)
000000000104607c	testb	%al, %al
000000000104607e	je	0x10460c3
0000000001046080	leaq	0x7e969(%rip), %rax
0000000001046087	cmpb	$0x0, (%rax)
000000000104608a	je	0x10460c3
000000000104608c	movq	0x8(%rsp), %rax
0000000001046091	testq	%rax, %rax
0000000001046094	jne	0x10460a2
0000000001046096	jmp	0x10460b6
0000000001046098	callq	runtime.osyield
000000000104609d	movq	0x8(%rsp), %rax
00000000010460a2	movq	0x10(%rsp), %rcx
00000000010460a7	movq	0x30(%rcx), %rdx
00000000010460ab	movl	0x29c(%rdx), %edx
00000000010460b1	cmpl	%edx, 0x1c(%rax)
00000000010460b4	je	0x1046098
00000000010460b6	movq	$0x0, (%rsp)
00000000010460be	callq	runtime.traceGoSysExit
00000000010460c3	movq	0x20(%rsp), %rbp
00000000010460c8	addq	$0x28, %rsp
00000000010460cc	retq
00000000010460cd	callq	runtime.morestack
00000000010460d2	jmp	runtime.exitsyscallfast.func1
00000000010460d7	int3
00000000010460d8	int3
00000000010460d9	int3
00000000010460da	int3
00000000010460db	int3
00000000010460dc	int3
00000000010460dd	int3
00000000010460de	int3
00000000010460df	int3
runtime.exitsyscallfast_reacquired.func1:
00000000010460e0	movq	%gs:0x30, %rcx
00000000010460e9	cmpq	0x10(%rcx), %rsp
00000000010460ed	jbe	0x104612c
00000000010460ef	subq	$0x10, %rsp
00000000010460f3	movq	%rbp, 0x8(%rsp)
00000000010460f8	leaq	0x8(%rsp), %rbp
00000000010460fd	movq	0x8(%rdx), %rax
0000000001046101	movq	0x30(%rax), %rax
0000000001046105	movq	0xd0(%rax), %rax
000000000104610c	movq	%rax, (%rsp)
0000000001046110	callq	runtime.traceGoSysBlock
0000000001046115	movq	$0x0, (%rsp)
000000000104611d	callq	runtime.traceGoSysExit
0000000001046122	movq	0x8(%rsp), %rbp
0000000001046127	addq	$0x10, %rsp
000000000104612b	retq
000000000104612c	callq	runtime.morestack
0000000001046131	jmp	runtime.exitsyscallfast_reacquired.func1
0000000001046133	int3
0000000001046134	int3
0000000001046135	int3
0000000001046136	int3
0000000001046137	int3
0000000001046138	int3
0000000001046139	int3
000000000104613a	int3
000000000104613b	int3
000000000104613c	int3
000000000104613d	int3
000000000104613e	int3
000000000104613f	int3
runtime.malg.func1:
0000000001046140	movq	%gs:0x30, %rcx
0000000001046149	cmpq	0x10(%rcx), %rsp
000000000104614d	jbe	0x1046191
000000000104614f	subq	$0x28, %rsp
0000000001046153	movq	%rbp, 0x20(%rsp)
0000000001046158	leaq	0x20(%rsp), %rbp
000000000104615d	movq	0x10(%rdx), %rax
0000000001046161	movq	%rax, 0x18(%rsp)
0000000001046166	movl	0x8(%rdx), %ecx
0000000001046169	movl	%ecx, (%rsp)
000000000104616c	callq	runtime.stackalloc
0000000001046171	movq	0x8(%rsp), %rax
0000000001046176	movq	0x10(%rsp), %rcx
000000000104617b	movq	0x18(%rsp), %rdx
0000000001046180	movq	%rax, (%rdx)
0000000001046183	movq	%rcx, 0x8(%rdx)
0000000001046187	movq	0x20(%rsp), %rbp
000000000104618c	addq	$0x28, %rsp
0000000001046190	retq
0000000001046191	callq	runtime.morestack
0000000001046196	jmp	runtime.malg.func1
0000000001046198	int3
0000000001046199	int3
000000000104619a	int3
000000000104619b	int3
000000000104619c	int3
000000000104619d	int3
000000000104619e	int3
000000000104619f	int3
runtime.newproc.func1:
00000000010461a0	movq	%gs:0x30, %rcx
00000000010461a9	cmpq	0x10(%rcx), %rsp
00000000010461ad	jbe	0x10461f9
00000000010461af	subq	$0x30, %rsp
00000000010461b3	movq	%rbp, 0x28(%rsp)
00000000010461b8	leaq	0x28(%rsp), %rbp
00000000010461bd	movq	0x10(%rdx), %rax
00000000010461c1	movl	0x18(%rdx), %ecx
00000000010461c4	movq	0x20(%rdx), %rbx
00000000010461c8	movq	0x28(%rdx), %rsi
00000000010461cc	movq	0x8(%rdx), %rdx
00000000010461d0	movq	(%rdx), %rdx
00000000010461d3	movq	%rdx, (%rsp)
00000000010461d7	movq	%rax, 0x8(%rsp)
00000000010461dc	movl	%ecx, 0x10(%rsp)
00000000010461e0	movq	%rbx, 0x18(%rsp)
00000000010461e5	movq	%rsi, 0x20(%rsp)
00000000010461ea	callq	runtime.newproc1
00000000010461ef	movq	0x28(%rsp), %rbp
00000000010461f4	addq	$0x30, %rsp
00000000010461f8	retq
00000000010461f9	callq	runtime.morestack
00000000010461fe	jmp	runtime.newproc.func1
runtime.gfget.func1:
0000000001046200	movq	%gs:0x30, %rcx
0000000001046209	cmpq	0x10(%rcx), %rsp
000000000104620d	jbe	0x1046252
000000000104620f	subq	$0x28, %rsp
0000000001046213	movq	%rbp, 0x20(%rsp)
0000000001046218	leaq	0x20(%rsp), %rbp
000000000104621d	movq	0x8(%rdx), %rax
0000000001046221	movq	%rax, 0x18(%rsp)
0000000001046226	movl	$0x800, (%rsp)
000000000104622d	callq	runtime.stackalloc
0000000001046232	movq	0x8(%rsp), %rax
0000000001046237	movq	0x10(%rsp), %rcx
000000000104623c	movq	0x18(%rsp), %rdx
0000000001046241	movq	%rax, (%rdx)
0000000001046244	movq	%rcx, 0x8(%rdx)
0000000001046248	movq	0x20(%rsp), %rbp
000000000104624d	addq	$0x28, %rsp
0000000001046251	retq
0000000001046252	callq	runtime.morestack
0000000001046257	jmp	runtime.gfget.func1
0000000001046259	int3
000000000104625a	int3
000000000104625b	int3
000000000104625c	int3
000000000104625d	int3
000000000104625e	int3
000000000104625f	int3
runtime.(*rwmutex).rlock.func1:
0000000001046260	movq	%gs:0x30, %rcx
0000000001046269	cmpq	0x10(%rcx), %rsp
000000000104626d	jbe	0x104631c
0000000001046273	subq	$0x28, %rsp
0000000001046277	movq	%rbp, 0x20(%rsp)
000000000104627c	leaq	0x20(%rsp), %rbp
0000000001046281	movq	0x8(%rdx), %rax
0000000001046285	movq	%rax, 0x8(%rsp)
000000000104628a	testb	%al, (%rax)
000000000104628c	movq	%rax, (%rsp)
0000000001046290	callq	runtime.lock
0000000001046295	movq	0x8(%rsp), %rax
000000000104629a	movl	0x10(%rax), %ecx
000000000104629d	testl	%ecx, %ecx
000000000104629f	jbe	0x10462b9
00000000010462a1	decl	%ecx
00000000010462a3	movl	%ecx, 0x10(%rax)
00000000010462a6	movq	%rax, (%rsp)
00000000010462aa	callq	runtime.unlock
00000000010462af	movq	0x20(%rsp), %rbp
00000000010462b4	addq	$0x28, %rsp
00000000010462b8	retq
00000000010462b9	movq	%gs:0x30, %rcx
00000000010462c2	movq	0x30(%rcx), %rcx
00000000010462c6	movq	%rcx, 0x10(%rsp)
00000000010462cb	movq	0x8(%rax), %rdx
00000000010462cf	movq	%rdx, 0x150(%rcx)
00000000010462d6	leaq	0x8(%rax), %rdx
00000000010462da	testb	%al, (%rdx)
00000000010462dc	movq	%rcx, 0x8(%rax)
00000000010462e0	movq	%rax, (%rsp)
00000000010462e4	callq	runtime.unlock
00000000010462e9	movq	0x10(%rsp), %rax
00000000010462ee	leaq	0x140(%rax), %rcx
00000000010462f5	movq	%rcx, 0x18(%rsp)
00000000010462fa	movq	%rcx, (%rsp)
00000000010462fe	callq	runtime.notesleep
0000000001046303	movq	0x18(%rsp), %rax
0000000001046308	testb	%al, (%rax)
000000000104630a	movq	0x10(%rsp), %rax
000000000104630f	movq	$0x0, 0x140(%rax)
000000000104631a	jmp	0x10462af
000000000104631c	callq	runtime.morestack
0000000001046321	jmp	"runtime.(*rwmutex).rlock.func1"
0000000001046326	int3
0000000001046327	int3
0000000001046328	int3
0000000001046329	int3
000000000104632a	int3
000000000104632b	int3
000000000104632c	int3
000000000104632d	int3
000000000104632e	int3
000000000104632f	int3
runtime.callers.func1:
0000000001046330	movq	%gs:0x30, %rcx
0000000001046339	cmpq	0x10(%rcx), %rsp
000000000104633d	jbe	0x10463d1
0000000001046343	subq	$0x68, %rsp
0000000001046347	movq	%rbp, 0x60(%rsp)
000000000104634c	leaq	0x60(%rsp), %rbp
0000000001046351	movq	0x10(%rdx), %rax
0000000001046355	movq	0x18(%rdx), %rcx
0000000001046359	movq	0x20(%rdx), %rbx
000000000104635d	movq	0x40(%rdx), %rsi
0000000001046361	movq	0x8(%rdx), %rdi
0000000001046365	movq	0x30(%rdx), %r8
0000000001046369	movq	0x28(%rdx), %rdx
000000000104636d	testq	%r8, %r8
0000000001046370	jbe	0x10463ca
0000000001046372	movq	%rsi, 0x58(%rsp)
0000000001046377	movq	%rdx, 0x28(%rsp)
000000000104637c	movq	%rdi, (%rsp)
0000000001046380	movq	%rax, 0x8(%rsp)
0000000001046385	movq	$0x0, 0x10(%rsp)
000000000104638e	movq	%rcx, 0x18(%rsp)
0000000001046393	movq	%rbx, 0x20(%rsp)
0000000001046398	movq	%r8, 0x30(%rsp)
000000000104639d	xorps	%xmm0, %xmm0
00000000010463a0	movups	%xmm0, 0x38(%rsp)
00000000010463a5	movq	$0x0, 0x48(%rsp)
00000000010463ae	callq	runtime.gentraceback
00000000010463b3	movq	0x50(%rsp), %rax
00000000010463b8	movq	0x58(%rsp), %rcx
00000000010463bd	movq	%rax, (%rcx)
00000000010463c0	movq	0x60(%rsp), %rbp
00000000010463c5	addq	$0x68, %rsp
00000000010463c9	retq
00000000010463ca	callq	runtime.panicindex
00000000010463cf	ud2
00000000010463d1	callq	runtime.morestack
00000000010463d6	jmp	runtime.callers.func1
00000000010463db	int3
00000000010463dc	int3
00000000010463dd	int3
00000000010463de	int3
00000000010463df	int3
runtime.tracebackHexdump.func1:
00000000010463e0	movq	0x8(%rdx), %rax
00000000010463e4	movq	0x10(%rdx), %rcx
00000000010463e8	movq	0x30(%rax), %rdx
00000000010463ec	movq	0x8(%rsp), %rbx
00000000010463f1	cmpq	%rbx, %rdx
00000000010463f4	je	0x1046416
00000000010463f6	movq	0x28(%rax), %rax
00000000010463fa	cmpq	%rbx, %rax
00000000010463fd	je	0x1046410
00000000010463ff	cmpq	%rbx, %rcx
0000000001046402	jne	0x104640a
0000000001046404	movb	$0x21, 0x10(%rsp)
0000000001046409	retq
000000000104640a	movb	$0x0, 0x10(%rsp)
000000000104640f	retq
0000000001046410	movb	$0x3c, 0x10(%rsp)
0000000001046415	retq
0000000001046416	movb	$0x3e, 0x10(%rsp)
000000000104641b	retq
000000000104641c	int3
000000000104641d	int3
000000000104641e	int3
000000000104641f	int3
runtime.init:
0000000001046420	movq	%gs:0x30, %rcx
0000000001046429	cmpq	0x10(%rcx), %rsp
000000000104642d	jbe	0x104651e
0000000001046433	subq	$0x20, %rsp
0000000001046437	movq	%rbp, 0x18(%rsp)
000000000104643c	leaq	0x18(%rsp), %rbp
0000000001046441	movzbl	runtime.initdone.(%rip), %eax
0000000001046448	cmpb	$0x1, %al
000000000104644a	jbe	0x1046456
000000000104644c	movq	0x18(%rsp), %rbp
0000000001046451	addq	$0x20, %rsp
0000000001046455	retq
0000000001046456	jne	0x104645f
0000000001046458	callq	runtime.throwinit
000000000104645d	ud2
000000000104645f	movb	$0x1, runtime.gcBlackenPromptly(%rip)
0000000001046466	callq	"internal/bytealg.init"
000000000104646b	movabsq	$0x7ff0000000000000, %rax
0000000001046475	movq	%rax, (%rsp)
0000000001046479	callq	runtime.float64frombits
000000000104647e	movsd	0x8(%rsp), %xmm0
0000000001046484	movsd	%xmm0, runtime.inf(%rip)
000000000104648c	leaq	0x15a8d(%rip), %rax
0000000001046493	movq	%rax, (%rsp)
0000000001046497	leaq	0x2893a(%rip), %rax
000000000104649e	movq	%rax, 0x8(%rsp)
00000000010464a3	callq	runtime.funcPC
00000000010464a8	movq	0x10(%rsp), %rax
00000000010464ad	movq	%rax, runtime.chansendpc(%rip)
00000000010464b4	leaq	0x15a05(%rip), %rax
00000000010464bb	movq	%rax, (%rsp)
00000000010464bf	leaq	0x2890a(%rip), %rax
00000000010464c6	movq	%rax, 0x8(%rsp)
00000000010464cb	callq	runtime.funcPC
00000000010464d0	movq	0x10(%rsp), %rax
00000000010464d5	movq	%rax, runtime.chanrecvpc(%rip)
00000000010464dc	callq	runtime.nanotime
00000000010464e1	movq	(%rsp), %rax
00000000010464e5	decq	%rax
00000000010464e8	movq	%rax, runtime.startNano(%rip)
00000000010464ef	callq	runtime.init.0
00000000010464f4	callq	runtime.init.1
00000000010464f9	callq	runtime.init.2
00000000010464fe	callq	runtime.init.3
0000000001046503	callq	runtime.init.4
0000000001046508	callq	runtime.init.5
000000000104650d	movb	$0x2, runtime.gcBlackenPromptly(%rip)
0000000001046514	movq	0x18(%rsp), %rbp
0000000001046519	addq	$0x20, %rsp
000000000104651d	retq
000000000104651e	callq	runtime.morestack_noctxt
0000000001046523	jmp	runtime.init
0000000001046528	int3
0000000001046529	int3
000000000104652a	int3
000000000104652b	int3
000000000104652c	int3
000000000104652d	int3
000000000104652e	int3
000000000104652f	int3
runtime.skipPleaseUseCallersFrames:
0000000001046530	nop
0000000001046531	nop
0000000001046532	nop
0000000001046533	nop
0000000001046534	nop
0000000001046535	nop
0000000001046536	nop
0000000001046537	nop
0000000001046538	nop
0000000001046539	nop
000000000104653a	nop
000000000104653b	nop
000000000104653c	nop
000000000104653d	nop
000000000104653e	nop
000000000104653f	nop
0000000001046540	nop
0000000001046541	nop
0000000001046542	nop
0000000001046543	nop
0000000001046544	nop
0000000001046545	nop
0000000001046546	nop
0000000001046547	nop
0000000001046548	nop
0000000001046549	nop
000000000104654a	nop
000000000104654b	nop
000000000104654c	nop
000000000104654d	nop
000000000104654e	nop
000000000104654f	nop
0000000001046550	nop
0000000001046551	nop
0000000001046552	nop
0000000001046553	nop
0000000001046554	nop
0000000001046555	nop
0000000001046556	nop
0000000001046557	nop
0000000001046558	nop
0000000001046559	nop
000000000104655a	nop
000000000104655b	nop
000000000104655c	nop
000000000104655d	nop
000000000104655e	nop
000000000104655f	nop
0000000001046560	nop
0000000001046561	nop
0000000001046562	nop
0000000001046563	nop
0000000001046564	nop
0000000001046565	nop
0000000001046566	nop
0000000001046567	nop
0000000001046568	nop
0000000001046569	nop
000000000104656a	nop
000000000104656b	nop
000000000104656c	nop
000000000104656d	nop
000000000104656e	nop
000000000104656f	nop
0000000001046570	nop
0000000001046571	nop
0000000001046572	nop
0000000001046573	nop
0000000001046574	nop
0000000001046575	nop
0000000001046576	nop
0000000001046577	nop
0000000001046578	nop
0000000001046579	nop
000000000104657a	nop
000000000104657b	nop
000000000104657c	nop
000000000104657d	nop
000000000104657e	nop
000000000104657f	nop
0000000001046580	nop
0000000001046581	nop
0000000001046582	nop
0000000001046583	nop
0000000001046584	nop
0000000001046585	nop
0000000001046586	nop
0000000001046587	nop
0000000001046588	nop
0000000001046589	nop
000000000104658a	nop
000000000104658b	nop
000000000104658c	nop
000000000104658d	nop
000000000104658e	nop
000000000104658f	nop
0000000001046590	nop
0000000001046591	nop
0000000001046592	nop
0000000001046593	nop
0000000001046594	nop
0000000001046595	nop
0000000001046596	nop
0000000001046597	nop
0000000001046598	nop
0000000001046599	nop
000000000104659a	nop
000000000104659b	nop
000000000104659c	nop
000000000104659d	nop
000000000104659e	nop
000000000104659f	nop
00000000010465a0	nop
00000000010465a1	nop
00000000010465a2	nop
00000000010465a3	nop
00000000010465a4	nop
00000000010465a5	nop
00000000010465a6	nop
00000000010465a7	nop
00000000010465a8	nop
00000000010465a9	nop
00000000010465aa	nop
00000000010465ab	nop
00000000010465ac	nop
00000000010465ad	nop
00000000010465ae	nop
00000000010465af	nop
00000000010465b0	nop
00000000010465b1	nop
00000000010465b2	nop
00000000010465b3	nop
00000000010465b4	nop
00000000010465b5	nop
00000000010465b6	nop
00000000010465b7	nop
00000000010465b8	nop
00000000010465b9	nop
00000000010465ba	nop
00000000010465bb	nop
00000000010465bc	nop
00000000010465bd	nop
00000000010465be	nop
00000000010465bf	nop
00000000010465c0	nop
00000000010465c1	nop
00000000010465c2	nop
00000000010465c3	nop
00000000010465c4	nop
00000000010465c5	nop
00000000010465c6	nop
00000000010465c7	nop
00000000010465c8	nop
00000000010465c9	nop
00000000010465ca	nop
00000000010465cb	nop
00000000010465cc	nop
00000000010465cd	nop
00000000010465ce	nop
00000000010465cf	nop
00000000010465d0	nop
00000000010465d1	nop
00000000010465d2	nop
00000000010465d3	nop
00000000010465d4	nop
00000000010465d5	nop
00000000010465d6	nop
00000000010465d7	nop
00000000010465d8	nop
00000000010465d9	nop
00000000010465da	nop
00000000010465db	nop
00000000010465dc	nop
00000000010465dd	nop
00000000010465de	nop
00000000010465df	nop
00000000010465e0	nop
00000000010465e1	nop
00000000010465e2	nop
00000000010465e3	nop
00000000010465e4	nop
00000000010465e5	nop
00000000010465e6	nop
00000000010465e7	nop
00000000010465e8	nop
00000000010465e9	nop
00000000010465ea	nop
00000000010465eb	nop
00000000010465ec	nop
00000000010465ed	nop
00000000010465ee	nop
00000000010465ef	nop
00000000010465f0	nop
00000000010465f1	nop
00000000010465f2	nop
00000000010465f3	nop
00000000010465f4	nop
00000000010465f5	nop
00000000010465f6	nop
00000000010465f7	nop
00000000010465f8	nop
00000000010465f9	nop
00000000010465fa	nop
00000000010465fb	nop
00000000010465fc	nop
00000000010465fd	nop
00000000010465fe	nop
00000000010465ff	nop
0000000001046600	nop
0000000001046601	nop
0000000001046602	nop
0000000001046603	nop
0000000001046604	nop
0000000001046605	nop
0000000001046606	nop
0000000001046607	nop
0000000001046608	nop
0000000001046609	nop
000000000104660a	nop
000000000104660b	nop
000000000104660c	nop
000000000104660d	nop
000000000104660e	nop
000000000104660f	nop
0000000001046610	nop
0000000001046611	nop
0000000001046612	nop
0000000001046613	nop
0000000001046614	nop
0000000001046615	nop
0000000001046616	nop
0000000001046617	nop
0000000001046618	nop
0000000001046619	nop
000000000104661a	nop
000000000104661b	nop
000000000104661c	nop
000000000104661d	nop
000000000104661e	nop
000000000104661f	nop
0000000001046620	nop
0000000001046621	nop
0000000001046622	nop
0000000001046623	nop
0000000001046624	nop
0000000001046625	nop
0000000001046626	nop
0000000001046627	nop
0000000001046628	nop
0000000001046629	nop
000000000104662a	nop
000000000104662b	nop
000000000104662c	nop
000000000104662d	nop
000000000104662e	nop
000000000104662f	nop
__rt0_amd64:
0000000001046630	movq	(%rsp), %rdi
0000000001046634	leaq	0x8(%rsp), %rsi
0000000001046639	jmp	runtime.rt0_go
000000000104663e	int3
000000000104663f	int3
runtime.rt0_go:
0000000001046640	movq	%rdi, %rax
0000000001046643	movq	%rsi, %rbx
0000000001046646	subq	$0x27, %rsp
000000000104664a	andq	$-0x10, %rsp
000000000104664e	movq	%rax, 0x10(%rsp)
0000000001046653	movq	%rbx, 0x18(%rsp)
0000000001046658	leaq	runtime.g0(%rip), %rdi
000000000104665f	leaq	-0xff98(%rsp), %rbx
0000000001046667	movq	%rbx, 0x10(%rdi)
000000000104666b	movq	%rbx, 0x18(%rdi)
000000000104666f	movq	%rbx, (%rdi)
0000000001046672	movq	%rsp, 0x8(%rdi)
0000000001046676	movl	$0x0, %eax
000000000104667b	cpuid
000000000104667d	movl	%eax, %esi
000000000104667f	cmpl	$0x0, %eax
0000000001046682	je	0x10466b7
0000000001046684	cmpl	$0x756e6547, %ebx
000000000104668a	jne	0x10466aa
000000000104668c	cmpl	$0x49656e69, %edx
0000000001046692	jne	0x10466aa
0000000001046694	cmpl	$0x6c65746e, %ecx
000000000104669a	jne	0x10466aa
000000000104669c	movb	$0x1, runtime.initdone.(%rip)
00000000010466a3	movb	$0x1, runtime.islibrary(%rip)
00000000010466aa	movl	$0x1, %eax
00000000010466af	cpuid
00000000010466b1	movl	%eax, runtime.processorVersionInfo(%rip)
00000000010466b7	movq	__cgo_init(%rip), %rax
00000000010466be	testq	%rax, %rax
00000000010466c1	je	0x1046718
00000000010466c3	movq	%rdi, %rcx
00000000010466c6	leaq	_setg_gcc(%rip), %rsi
00000000010466cd	callq	*%rax
00000000010466cf	leaq	runtime.g0(%rip), %rcx
00000000010466d6	movq	(%rcx), %rax
00000000010466d9	addq	$0x370, %rax
00000000010466df	movq	%rax, 0x10(%rcx)
00000000010466e3	movq	%rax, 0x18(%rcx)
00000000010466e7	jmp	0x1046718
00000000010466e9	jmp	0x1046718
00000000010466eb	leaq	0x72af6(%rip), %rdi
00000000010466f2	callq	runtime.settls
00000000010466f7	movq	$0x123, %gs:0x30
0000000001046704	movq	0x72add(%rip), %rax
000000000104670b	cmpq	$0x123, %rax
0000000001046711	je	0x1046718
0000000001046713	callq	runtime.abort
0000000001046718	leaq	runtime.g0(%rip), %rcx
000000000104671f	movq	%rcx, %gs:0x30
0000000001046728	leaq	runtime.m0(%rip), %rax
000000000104672f	movq	%rcx, (%rax)
0000000001046732	movq	%rax, 0x30(%rcx)
0000000001046736	cld
0000000001046737	callq	runtime.check
000000000104673c	movl	0x10(%rsp), %eax
0000000001046740	movl	%eax, (%rsp)
0000000001046743	movq	0x18(%rsp), %rax
0000000001046748	movq	%rax, 0x8(%rsp)
000000000104674d	callq	runtime.args
0000000001046752	callq	runtime.osinit
0000000001046757	callq	runtime.schedinit
000000000104675c	leaq	runtime.mainPC(%rip), %rax
0000000001046763	pushq	%rax
0000000001046764	pushq	$0x0
0000000001046766	callq	runtime.newproc
000000000104676b	popq	%rax
000000000104676c	popq	%rax
000000000104676d	callq	runtime.mstart
0000000001046772	callq	runtime.abort
0000000001046777	retq
0000000001046778	leaq	runtime.debugCallV1(%rip), %rax
000000000104677f	retq
runtime.asminit:
0000000001046780	retq
0000000001046781	int3
0000000001046782	int3
0000000001046783	int3
0000000001046784	int3
0000000001046785	int3
0000000001046786	int3
0000000001046787	int3
0000000001046788	int3
0000000001046789	int3
000000000104678a	int3
000000000104678b	int3
000000000104678c	int3
000000000104678d	int3
000000000104678e	int3
000000000104678f	int3
runtime.gogo:
0000000001046790	subq	$0x18, %rsp
0000000001046794	movq	%rbp, 0x10(%rsp)
0000000001046799	leaq	0x10(%rsp), %rbp
000000000104679e	movq	0x20(%rsp), %rbx
00000000010467a3	movq	0x10(%rbx), %rdx
00000000010467a7	movq	(%rdx), %rcx
00000000010467aa	movq	%rdx, %gs:0x30
00000000010467b3	movq	(%rbx), %rsp
00000000010467b6	movq	0x20(%rbx), %rax
00000000010467ba	movq	0x18(%rbx), %rdx
00000000010467be	movq	0x30(%rbx), %rbp
00000000010467c2	movq	$0x0, (%rbx)
00000000010467c9	movq	$0x0, 0x20(%rbx)
00000000010467d1	movq	$0x0, 0x18(%rbx)
00000000010467d9	movq	$0x0, 0x30(%rbx)
00000000010467e1	movq	0x8(%rbx), %rbx
00000000010467e5	jmpq	*%rbx
00000000010467e7	int3
00000000010467e8	int3
00000000010467e9	int3
00000000010467ea	int3
00000000010467eb	int3
00000000010467ec	int3
00000000010467ed	int3
00000000010467ee	int3
00000000010467ef	int3
runtime.mcall:
00000000010467f0	movq	0x8(%rsp), %rdi
00000000010467f5	movq	%gs:0x30, %rax
00000000010467fe	movq	(%rsp), %rbx
0000000001046802	movq	%rbx, 0x40(%rax)
0000000001046806	leaq	0x8(%rsp), %rbx
000000000104680b	movq	%rbx, 0x38(%rax)
000000000104680f	movq	%rax, 0x48(%rax)
0000000001046813	movq	%rbp, 0x68(%rax)
0000000001046817	movq	%gs:0x30, %rbx
0000000001046820	movq	0x30(%rbx), %rbx
0000000001046824	movq	(%rbx), %rsi
0000000001046827	cmpq	%rax, %rsi
000000000104682a	jne	0x1046835
000000000104682c	leaq	runtime.badmcall(%rip), %rax
0000000001046833	jmpq	*%rax
0000000001046835	movq	%rsi, %gs:0x30
000000000104683e	movq	0x38(%rsi), %rsp
0000000001046842	pushq	%rax
0000000001046843	movq	%rdi, %rdx
0000000001046846	movq	(%rdi), %rdi
0000000001046849	callq	*%rdi
000000000104684b	popq	%rax
000000000104684c	leaq	runtime.badmcall2(%rip), %rax
0000000001046853	jmpq	*%rax
0000000001046855	retq
0000000001046856	int3
0000000001046857	int3
0000000001046858	int3
0000000001046859	int3
000000000104685a	int3
000000000104685b	int3
000000000104685c	int3
000000000104685d	int3
000000000104685e	int3
000000000104685f	int3
runtime.systemstack_switch:
0000000001046860	retq
0000000001046861	int3
0000000001046862	int3
0000000001046863	int3
0000000001046864	int3
0000000001046865	int3
0000000001046866	int3
0000000001046867	int3
0000000001046868	int3
0000000001046869	int3
000000000104686a	int3
000000000104686b	int3
000000000104686c	int3
000000000104686d	int3
000000000104686e	int3
000000000104686f	int3
runtime.systemstack:
0000000001046870	movq	0x8(%rsp), %rdi
0000000001046875	movq	%gs:0x30, %rax
000000000104687e	movq	0x30(%rax), %rbx
0000000001046882	cmpq	0x50(%rbx), %rax
0000000001046886	je	0x1046900
0000000001046888	movq	(%rbx), %rdx
000000000104688b	cmpq	%rdx, %rax
000000000104688e	je	0x1046900
0000000001046890	cmpq	0xc0(%rbx), %rax
0000000001046897	jne	0x1046908
0000000001046899	leaq	runtime.systemstack_switch(%rip), %rsi
00000000010468a0	movq	%rsi, 0x40(%rax)
00000000010468a4	movq	%rsp, 0x38(%rax)
00000000010468a8	movq	%rax, 0x48(%rax)
00000000010468ac	movq	%rbp, 0x68(%rax)
00000000010468b0	movq	%rdx, %gs:0x30
00000000010468b9	movq	0x38(%rdx), %rbx
00000000010468bd	subq	$0x8, %rbx
00000000010468c1	leaq	runtime.mstart(%rip), %rdx
00000000010468c8	movq	%rdx, (%rbx)
00000000010468cb	movq	%rbx, %rsp
00000000010468ce	movq	%rdi, %rdx
00000000010468d1	movq	(%rdi), %rdi
00000000010468d4	callq	*%rdi
00000000010468d6	movq	%gs:0x30, %rax
00000000010468df	movq	0x30(%rax), %rbx
00000000010468e3	movq	0xc0(%rbx), %rax
00000000010468ea	movq	%rax, %gs:0x30
00000000010468f3	movq	0x38(%rax), %rsp
00000000010468f7	movq	$0x0, 0x38(%rax)
00000000010468ff	retq
0000000001046900	movq	%rdi, %rdx
0000000001046903	movq	(%rdi), %rdi
0000000001046906	jmpq	*%rdi
0000000001046908	leaq	runtime.badsystemstack(%rip), %rax
000000000104690f	callq	*%rax
0000000001046911	int	$0x3
0000000001046913	int3
0000000001046914	int3
0000000001046915	int3
0000000001046916	int3
0000000001046917	int3
0000000001046918	int3
0000000001046919	int3
000000000104691a	int3
000000000104691b	int3
000000000104691c	int3
000000000104691d	int3
000000000104691e	int3
000000000104691f	int3
runtime.morestack:
0000000001046920	movq	%gs:0x30, %rbx
0000000001046929	movq	0x30(%rbx), %rbx
000000000104692d	movq	(%rbx), %rsi
0000000001046930	cmpq	%rsi, %gs:0x30
0000000001046939	jne	0x1046945
000000000104693b	callq	runtime.badmorestackg0
0000000001046940	callq	runtime.abort
0000000001046945	movq	0x50(%rbx), %rsi
0000000001046949	cmpq	%rsi, %gs:0x30
0000000001046952	jne	0x104695e
0000000001046954	callq	runtime.badmorestackgsignal
0000000001046959	callq	runtime.abort
000000000104695e	movq	0x8(%rsp), %rax
0000000001046963	movq	%rax, 0x10(%rbx)
0000000001046967	leaq	0x10(%rsp), %rax
000000000104696c	movq	%rax, 0x8(%rbx)
0000000001046970	movq	%gs:0x30, %rsi
0000000001046979	movq	%rsi, 0x18(%rbx)
000000000104697d	movq	(%rsp), %rax
0000000001046981	movq	%rax, 0x40(%rsi)
0000000001046985	movq	%rsi, 0x48(%rsi)
0000000001046989	leaq	0x8(%rsp), %rax
000000000104698e	movq	%rax, 0x38(%rsi)
0000000001046992	movq	%rbp, 0x68(%rsi)
0000000001046996	movq	%rdx, 0x50(%rsi)
000000000104699a	movq	(%rbx), %rbx
000000000104699d	movq	%rbx, %gs:0x30
00000000010469a6	movq	0x38(%rbx), %rsp
00000000010469aa	callq	runtime.newstack
00000000010469af	callq	runtime.abort
00000000010469b4	retq
00000000010469b5	int3
00000000010469b6	int3
00000000010469b7	int3
00000000010469b8	int3
00000000010469b9	int3
00000000010469ba	int3
00000000010469bb	int3
00000000010469bc	int3
00000000010469bd	int3
00000000010469be	int3
00000000010469bf	int3
runtime.morestack_noctxt:
00000000010469c0	movl	$0x0, %edx
00000000010469c5	jmp	runtime.morestack
00000000010469ca	int3
00000000010469cb	int3
00000000010469cc	int3
00000000010469cd	int3
00000000010469ce	int3
00000000010469cf	int3
runtime.reflectcall:
00000000010469d0	movl	0x20(%rsp), %ecx
00000000010469d4	cmpq	$0x20, %rcx
00000000010469d8	ja	0x10469e3
00000000010469da	leaq	runtime.call32(%rip), %rax
00000000010469e1	jmpq	*%rax
00000000010469e3	cmpq	$0x40, %rcx
00000000010469e7	ja	0x10469f2
00000000010469e9	leaq	runtime.call64(%rip), %rax
00000000010469f0	jmpq	*%rax
00000000010469f2	cmpq	$0x80, %rcx
00000000010469f9	ja	0x1046a04
00000000010469fb	leaq	runtime.call128(%rip), %rax
0000000001046a02	jmpq	*%rax
0000000001046a04	cmpq	$0x100, %rcx
0000000001046a0b	ja	0x1046a16
0000000001046a0d	leaq	runtime.call256(%rip), %rax
0000000001046a14	jmpq	*%rax
0000000001046a16	cmpq	$0x200, %rcx
0000000001046a1d	ja	0x1046a28
0000000001046a1f	leaq	runtime.call512(%rip), %rax
0000000001046a26	jmpq	*%rax
0000000001046a28	cmpq	$0x400, %rcx
0000000001046a2f	ja	0x1046a3a
0000000001046a31	leaq	runtime.call1024(%rip), %rax
0000000001046a38	jmpq	*%rax
0000000001046a3a	cmpq	$0x800, %rcx
0000000001046a41	ja	0x1046a4c
0000000001046a43	leaq	runtime.call2048(%rip), %rax
0000000001046a4a	jmpq	*%rax
0000000001046a4c	cmpq	$0x1000, %rcx
0000000001046a53	ja	0x1046a5e
0000000001046a55	leaq	runtime.call4096(%rip), %rax
0000000001046a5c	jmpq	*%rax
0000000001046a5e	cmpq	$0x2000, %rcx
0000000001046a65	ja	0x1046a70
0000000001046a67	leaq	runtime.call8192(%rip), %rax
0000000001046a6e	jmpq	*%rax
0000000001046a70	cmpq	$0x4000, %rcx
0000000001046a77	ja	0x1046a82
0000000001046a79	leaq	runtime.call16384(%rip), %rax
0000000001046a80	jmpq	*%rax
0000000001046a82	cmpq	$0x8000, %rcx
0000000001046a89	ja	0x1046a94
0000000001046a8b	leaq	runtime.call32768(%rip), %rax
0000000001046a92	jmpq	*%rax
0000000001046a94	cmpq	$0x10000, %rcx
0000000001046a9b	ja	0x1046aa6
0000000001046a9d	leaq	runtime.call65536(%rip), %rax
0000000001046aa4	jmpq	*%rax
0000000001046aa6	cmpq	$0x20000, %rcx
0000000001046aad	ja	0x1046ab8
0000000001046aaf	leaq	runtime.call131072(%rip), %rax
0000000001046ab6	jmpq	*%rax
0000000001046ab8	cmpq	$0x40000, %rcx
0000000001046abf	ja	0x1046aca
0000000001046ac1	leaq	runtime.call262144(%rip), %rax
0000000001046ac8	jmpq	*%rax
0000000001046aca	cmpq	$0x80000, %rcx
0000000001046ad1	ja	0x1046adc
0000000001046ad3	leaq	runtime.call524288(%rip), %rax
0000000001046ada	jmpq	*%rax
0000000001046adc	cmpq	$0x100000, %rcx
0000000001046ae3	ja	0x1046aee
0000000001046ae5	leaq	runtime.call1048576(%rip), %rax
0000000001046aec	jmpq	*%rax
0000000001046aee	cmpq	$0x200000, %rcx
0000000001046af5	ja	0x1046b00
0000000001046af7	leaq	runtime.call2097152(%rip), %rax
0000000001046afe	jmpq	*%rax
0000000001046b00	cmpq	$0x400000, %rcx
0000000001046b07	ja	0x1046b12
0000000001046b09	leaq	runtime.call4194304(%rip), %rax
0000000001046b10	jmpq	*%rax
0000000001046b12	cmpq	$0x800000, %rcx
0000000001046b19	ja	0x1046b24
0000000001046b1b	leaq	runtime.call8388608(%rip), %rax
0000000001046b22	jmpq	*%rax
0000000001046b24	cmpq	$0x1000000, %rcx
0000000001046b2b	ja	0x1046b36
0000000001046b2d	leaq	runtime.call16777216(%rip), %rax
0000000001046b34	jmpq	*%rax
0000000001046b36	cmpq	$0x2000000, %rcx
0000000001046b3d	ja	0x1046b48
0000000001046b3f	leaq	runtime.call33554432(%rip), %rax
0000000001046b46	jmpq	*%rax
0000000001046b48	cmpq	$0x4000000, %rcx
0000000001046b4f	ja	0x1046b5a
0000000001046b51	leaq	runtime.call67108864(%rip), %rax
0000000001046b58	jmpq	*%rax
0000000001046b5a	cmpq	$0x8000000, %rcx
0000000001046b61	ja	0x1046b6c
0000000001046b63	leaq	runtime.call134217728(%rip), %rax
0000000001046b6a	jmpq	*%rax
0000000001046b6c	cmpq	$0x10000000, %rcx
0000000001046b73	ja	0x1046b7e
0000000001046b75	leaq	runtime.call268435456(%rip), %rax
0000000001046b7c	jmpq	*%rax
0000000001046b7e	cmpq	$0x20000000, %rcx
0000000001046b85	ja	0x1046b90
0000000001046b87	leaq	runtime.call536870912(%rip), %rax
0000000001046b8e	jmpq	*%rax
0000000001046b90	cmpq	$0x40000000, %rcx
0000000001046b97	ja	0x1046ba2
0000000001046b99	leaq	runtime.call1073741824(%rip), %rax
0000000001046ba0	jmpq	*%rax
0000000001046ba2	leaq	runtime.badreflectcall(%rip), %rax
0000000001046ba9	jmpq	*%rax
0000000001046bab	int3
0000000001046bac	int3
0000000001046bad	int3
0000000001046bae	int3
0000000001046baf	int3
_callRet:
0000000001046bb0	subq	$0x28, %rsp
0000000001046bb4	movq	%rbp, 0x20(%rsp)
0000000001046bb9	leaq	0x20(%rsp), %rbp
0000000001046bbe	movq	%rdx, (%rsp)
0000000001046bc2	movq	%rdi, 0x8(%rsp)
0000000001046bc7	movq	%rsi, 0x10(%rsp)
0000000001046bcc	movq	%rcx, 0x18(%rsp)
0000000001046bd1	callq	runtime.reflectcallmove
0000000001046bd6	movq	0x20(%rsp), %rbp
0000000001046bdb	addq	$0x28, %rsp
0000000001046bdf	retq
runtime.call32:
0000000001046be0	movq	%gs:0x30, %rcx
0000000001046be9	cmpq	0x10(%rcx), %rsp
0000000001046bed	jbe	0x1046c48
0000000001046bef	subq	$0x28, %rsp
0000000001046bf3	movq	%rbp, 0x20(%rsp)
0000000001046bf8	leaq	0x20(%rsp), %rbp
0000000001046bfd	movq	0x20(%rcx), %rbx
0000000001046c01	testq	%rbx, %rbx
0000000001046c04	jne	0x1046c4f
0000000001046c06	movq	0x40(%rsp), %rsi
0000000001046c0b	movl	0x48(%rsp), %ecx
0000000001046c0f	movq	%rsp, %rdi
0000000001046c12	rep		movsb	(%rsi), %es:(%rdi)
0000000001046c14	movq	0x38(%rsp), %rdx
0000000001046c19	callq	*(%rdx)
0000000001046c1b	movq	0x30(%rsp), %rdx
0000000001046c20	movq	0x40(%rsp), %rdi
0000000001046c25	movl	0x48(%rsp), %ecx
0000000001046c29	movl	0x4c(%rsp), %ebx
0000000001046c2d	movq	%rsp, %rsi
0000000001046c30	addq	%rbx, %rdi
0000000001046c33	addq	%rbx, %rsi
0000000001046c36	subq	%rbx, %rcx
0000000001046c39	callq	_callRet
0000000001046c3e	movq	0x20(%rsp), %rbp
0000000001046c43	addq	$0x28, %rsp
0000000001046c47	retq
0000000001046c48	callq	runtime.morestack_noctxt
0000000001046c4d	jmp	runtime.call32
0000000001046c4f	leaq	0x30(%rsp), %rdi
0000000001046c54	cmpq	%rdi, (%rbx)
0000000001046c57	jne	0x1046c06
0000000001046c59	movq	%rsp, (%rbx)
0000000001046c5c	jmp	0x1046c06
0000000001046c5e	int3
0000000001046c5f	int3
runtime.call64:
0000000001046c60	movq	%gs:0x30, %rcx
0000000001046c69	cmpq	0x10(%rcx), %rsp
0000000001046c6d	jbe	0x1046cc8
0000000001046c6f	subq	$0x48, %rsp
0000000001046c73	movq	%rbp, 0x40(%rsp)
0000000001046c78	leaq	0x40(%rsp), %rbp
0000000001046c7d	movq	0x20(%rcx), %rbx
0000000001046c81	testq	%rbx, %rbx
0000000001046c84	jne	0x1046ccf
0000000001046c86	movq	0x60(%rsp), %rsi
0000000001046c8b	movl	0x68(%rsp), %ecx
0000000001046c8f	movq	%rsp, %rdi
0000000001046c92	rep		movsb	(%rsi), %es:(%rdi)
0000000001046c94	movq	0x58(%rsp), %rdx
0000000001046c99	callq	*(%rdx)
0000000001046c9b	movq	0x50(%rsp), %rdx
0000000001046ca0	movq	0x60(%rsp), %rdi
0000000001046ca5	movl	0x68(%rsp), %ecx
0000000001046ca9	movl	0x6c(%rsp), %ebx
0000000001046cad	movq	%rsp, %rsi
0000000001046cb0	addq	%rbx, %rdi
0000000001046cb3	addq	%rbx, %rsi
0000000001046cb6	subq	%rbx, %rcx
0000000001046cb9	callq	_callRet
0000000001046cbe	movq	0x40(%rsp), %rbp
0000000001046cc3	addq	$0x48, %rsp
0000000001046cc7	retq
0000000001046cc8	callq	runtime.morestack_noctxt
0000000001046ccd	jmp	runtime.call64
0000000001046ccf	leaq	0x50(%rsp), %rdi
0000000001046cd4	cmpq	%rdi, (%rbx)
0000000001046cd7	jne	0x1046c86
0000000001046cd9	movq	%rsp, (%rbx)
0000000001046cdc	jmp	0x1046c86
0000000001046cde	int3
0000000001046cdf	int3
runtime.call128:
0000000001046ce0	movq	%gs:0x30, %rcx
0000000001046ce9	leaq	-0x8(%rsp), %rax
0000000001046cee	cmpq	0x10(%rcx), %rax
0000000001046cf2	jbe	0x1046d71
0000000001046cf4	subq	$0x88, %rsp
0000000001046cfb	movq	%rbp, 0x80(%rsp)
0000000001046d03	leaq	0x80(%rsp), %rbp
0000000001046d0b	movq	0x20(%rcx), %rbx
0000000001046d0f	testq	%rbx, %rbx
0000000001046d12	jne	0x1046d7b
0000000001046d14	movq	0xa0(%rsp), %rsi
0000000001046d1c	movl	0xa8(%rsp), %ecx
0000000001046d23	movq	%rsp, %rdi
0000000001046d26	rep		movsb	(%rsi), %es:(%rdi)
0000000001046d28	movq	0x98(%rsp), %rdx
0000000001046d30	callq	*(%rdx)
0000000001046d32	movq	0x90(%rsp), %rdx
0000000001046d3a	movq	0xa0(%rsp), %rdi
0000000001046d42	movl	0xa8(%rsp), %ecx
0000000001046d49	movl	0xac(%rsp), %ebx
0000000001046d50	movq	%rsp, %rsi
0000000001046d53	addq	%rbx, %rdi
0000000001046d56	addq	%rbx, %rsi
0000000001046d59	subq	%rbx, %rcx
0000000001046d5c	callq	_callRet
0000000001046d61	movq	0x80(%rsp), %rbp
0000000001046d69	addq	$0x88, %rsp
0000000001046d70	retq
0000000001046d71	callq	runtime.morestack_noctxt
0000000001046d76	jmp	runtime.call128
0000000001046d7b	leaq	0x90(%rsp), %rdi
0000000001046d83	cmpq	%rdi, (%rbx)
0000000001046d86	jne	0x1046d14
0000000001046d88	movq	%rsp, (%rbx)
0000000001046d8b	jmp	0x1046d14
0000000001046d8d	int3
0000000001046d8e	int3
0000000001046d8f	int3
runtime.call256:
0000000001046d90	movq	%gs:0x30, %rcx
0000000001046d99	leaq	-0x88(%rsp), %rax
0000000001046da1	cmpq	0x10(%rcx), %rax
0000000001046da5	jbe	0x1046e24
0000000001046da7	subq	$0x108, %rsp
0000000001046dae	movq	%rbp, 0x100(%rsp)
0000000001046db6	leaq	0x100(%rsp), %rbp
0000000001046dbe	movq	0x20(%rcx), %rbx
0000000001046dc2	testq	%rbx, %rbx
0000000001046dc5	jne	0x1046e2e
0000000001046dc7	movq	0x120(%rsp), %rsi
0000000001046dcf	movl	0x128(%rsp), %ecx
0000000001046dd6	movq	%rsp, %rdi
0000000001046dd9	rep		movsb	(%rsi), %es:(%rdi)
0000000001046ddb	movq	0x118(%rsp), %rdx
0000000001046de3	callq	*(%rdx)
0000000001046de5	movq	0x110(%rsp), %rdx
0000000001046ded	movq	0x120(%rsp), %rdi
0000000001046df5	movl	0x128(%rsp), %ecx
0000000001046dfc	movl	0x12c(%rsp), %ebx
0000000001046e03	movq	%rsp, %rsi
0000000001046e06	addq	%rbx, %rdi
0000000001046e09	addq	%rbx, %rsi
0000000001046e0c	subq	%rbx, %rcx
0000000001046e0f	callq	_callRet
0000000001046e14	movq	0x100(%rsp), %rbp
0000000001046e1c	addq	$0x108, %rsp
0000000001046e23	retq
0000000001046e24	callq	runtime.morestack_noctxt
0000000001046e29	jmp	runtime.call256
0000000001046e2e	leaq	0x110(%rsp), %rdi
0000000001046e36	cmpq	%rdi, (%rbx)
0000000001046e39	jne	0x1046dc7
0000000001046e3b	movq	%rsp, (%rbx)
0000000001046e3e	jmp	0x1046dc7
runtime.call512:
0000000001046e40	movq	%gs:0x30, %rcx
0000000001046e49	leaq	-0x188(%rsp), %rax
0000000001046e51	cmpq	0x10(%rcx), %rax
0000000001046e55	jbe	0x1046ed4
0000000001046e57	subq	$0x208, %rsp
0000000001046e5e	movq	%rbp, 0x200(%rsp)
0000000001046e66	leaq	0x200(%rsp), %rbp
0000000001046e6e	movq	0x20(%rcx), %rbx
0000000001046e72	testq	%rbx, %rbx
0000000001046e75	jne	0x1046ede
0000000001046e77	movq	0x220(%rsp), %rsi
0000000001046e7f	movl	0x228(%rsp), %ecx
0000000001046e86	movq	%rsp, %rdi
0000000001046e89	rep		movsb	(%rsi), %es:(%rdi)
0000000001046e8b	movq	0x218(%rsp), %rdx
0000000001046e93	callq	*(%rdx)
0000000001046e95	movq	0x210(%rsp), %rdx
0000000001046e9d	movq	0x220(%rsp), %rdi
0000000001046ea5	movl	0x228(%rsp), %ecx
0000000001046eac	movl	0x22c(%rsp), %ebx
0000000001046eb3	movq	%rsp, %rsi
0000000001046eb6	addq	%rbx, %rdi
0000000001046eb9	addq	%rbx, %rsi
0000000001046ebc	subq	%rbx, %rcx
0000000001046ebf	callq	_callRet
0000000001046ec4	movq	0x200(%rsp), %rbp
0000000001046ecc	addq	$0x208, %rsp
0000000001046ed3	retq
0000000001046ed4	callq	runtime.morestack_noctxt
0000000001046ed9	jmp	runtime.call512
0000000001046ede	leaq	0x210(%rsp), %rdi
0000000001046ee6	cmpq	%rdi, (%rbx)
0000000001046ee9	jne	0x1046e77
0000000001046eeb	movq	%rsp, (%rbx)
0000000001046eee	jmp	0x1046e77
runtime.call1024:
0000000001046ef0	movq	%gs:0x30, %rcx
0000000001046ef9	leaq	-0x388(%rsp), %rax
0000000001046f01	cmpq	0x10(%rcx), %rax
0000000001046f05	jbe	0x1046f84
0000000001046f07	subq	$0x408, %rsp
0000000001046f0e	movq	%rbp, 0x400(%rsp)
0000000001046f16	leaq	0x400(%rsp), %rbp
0000000001046f1e	movq	0x20(%rcx), %rbx
0000000001046f22	testq	%rbx, %rbx
0000000001046f25	jne	0x1046f8e
0000000001046f27	movq	0x420(%rsp), %rsi
0000000001046f2f	movl	0x428(%rsp), %ecx
0000000001046f36	movq	%rsp, %rdi
0000000001046f39	rep		movsb	(%rsi), %es:(%rdi)
0000000001046f3b	movq	0x418(%rsp), %rdx
0000000001046f43	callq	*(%rdx)
0000000001046f45	movq	0x410(%rsp), %rdx
0000000001046f4d	movq	0x420(%rsp), %rdi
0000000001046f55	movl	0x428(%rsp), %ecx
0000000001046f5c	movl	0x42c(%rsp), %ebx
0000000001046f63	movq	%rsp, %rsi
0000000001046f66	addq	%rbx, %rdi
0000000001046f69	addq	%rbx, %rsi
0000000001046f6c	subq	%rbx, %rcx
0000000001046f6f	callq	_callRet
0000000001046f74	movq	0x400(%rsp), %rbp
0000000001046f7c	addq	$0x408, %rsp
0000000001046f83	retq
0000000001046f84	callq	runtime.morestack_noctxt
0000000001046f89	jmp	runtime.call1024
0000000001046f8e	leaq	0x410(%rsp), %rdi
0000000001046f96	cmpq	%rdi, (%rbx)
0000000001046f99	jne	0x1046f27
0000000001046f9b	movq	%rsp, (%rbx)
0000000001046f9e	jmp	0x1046f27
runtime.call2048:
0000000001046fa0	movq	%gs:0x30, %rcx
0000000001046fa9	leaq	-0x788(%rsp), %rax
0000000001046fb1	cmpq	0x10(%rcx), %rax
0000000001046fb5	jbe	0x1047034
0000000001046fb7	subq	$0x808, %rsp
0000000001046fbe	movq	%rbp, 0x800(%rsp)
0000000001046fc6	leaq	0x800(%rsp), %rbp
0000000001046fce	movq	0x20(%rcx), %rbx
0000000001046fd2	testq	%rbx, %rbx
0000000001046fd5	jne	0x104703e
0000000001046fd7	movq	0x820(%rsp), %rsi
0000000001046fdf	movl	0x828(%rsp), %ecx
0000000001046fe6	movq	%rsp, %rdi
0000000001046fe9	rep		movsb	(%rsi), %es:(%rdi)
0000000001046feb	movq	0x818(%rsp), %rdx
0000000001046ff3	callq	*(%rdx)
0000000001046ff5	movq	0x810(%rsp), %rdx
0000000001046ffd	movq	0x820(%rsp), %rdi
0000000001047005	movl	0x828(%rsp), %ecx
000000000104700c	movl	0x82c(%rsp), %ebx
0000000001047013	movq	%rsp, %rsi
0000000001047016	addq	%rbx, %rdi
0000000001047019	addq	%rbx, %rsi
000000000104701c	subq	%rbx, %rcx
000000000104701f	callq	_callRet
0000000001047024	movq	0x800(%rsp), %rbp
000000000104702c	addq	$0x808, %rsp
0000000001047033	retq
0000000001047034	callq	runtime.morestack_noctxt
0000000001047039	jmp	runtime.call2048
000000000104703e	leaq	0x810(%rsp), %rdi
0000000001047046	cmpq	%rdi, (%rbx)
0000000001047049	jne	0x1046fd7
000000000104704b	movq	%rsp, (%rbx)
000000000104704e	jmp	0x1046fd7
runtime.call4096:
0000000001047050	movq	%gs:0x30, %rcx
0000000001047059	movq	0x10(%rcx), %rsi
000000000104705d	cmpq	$-0x522, %rsi
0000000001047064	je	0x10470fa
000000000104706a	leaq	0x370(%rsp), %rax
0000000001047072	subq	%rsi, %rax
0000000001047075	cmpq	$0x12f8, %rax
000000000104707b	jbe	0x10470fa
000000000104707d	subq	$0x1008, %rsp
0000000001047084	movq	%rbp, 0x1000(%rsp)
000000000104708c	leaq	0x1000(%rsp), %rbp
0000000001047094	movq	0x20(%rcx), %rbx
0000000001047098	testq	%rbx, %rbx
000000000104709b	jne	0x1047104
000000000104709d	movq	0x1020(%rsp), %rsi
00000000010470a5	movl	0x1028(%rsp), %ecx
00000000010470ac	movq	%rsp, %rdi
00000000010470af	rep		movsb	(%rsi), %es:(%rdi)
00000000010470b1	movq	0x1018(%rsp), %rdx
00000000010470b9	callq	*(%rdx)
00000000010470bb	movq	0x1010(%rsp), %rdx
00000000010470c3	movq	0x1020(%rsp), %rdi
00000000010470cb	movl	0x1028(%rsp), %ecx
00000000010470d2	movl	0x102c(%rsp), %ebx
00000000010470d9	movq	%rsp, %rsi
00000000010470dc	addq	%rbx, %rdi
00000000010470df	addq	%rbx, %rsi
00000000010470e2	subq	%rbx, %rcx
00000000010470e5	callq	_callRet
00000000010470ea	movq	0x1000(%rsp), %rbp
00000000010470f2	addq	$0x1008, %rsp
00000000010470f9	retq
00000000010470fa	callq	runtime.morestack_noctxt
00000000010470ff	jmp	runtime.call4096
0000000001047104	leaq	0x1010(%rsp), %rdi
000000000104710c	cmpq	%rdi, (%rbx)
000000000104710f	jne	0x104709d
0000000001047111	movq	%rsp, (%rbx)
0000000001047114	jmp	0x104709d
0000000001047116	int3
0000000001047117	int3
0000000001047118	int3
0000000001047119	int3
000000000104711a	int3
000000000104711b	int3
000000000104711c	int3
000000000104711d	int3
000000000104711e	int3
000000000104711f	int3
runtime.call8192:
0000000001047120	movq	%gs:0x30, %rcx
0000000001047129	movq	0x10(%rcx), %rsi
000000000104712d	cmpq	$-0x522, %rsi
0000000001047134	je	0x10471ca
000000000104713a	leaq	0x370(%rsp), %rax
0000000001047142	subq	%rsi, %rax
0000000001047145	cmpq	$0x22f8, %rax
000000000104714b	jbe	0x10471ca
000000000104714d	subq	$0x2008, %rsp
0000000001047154	movq	%rbp, 0x2000(%rsp)
000000000104715c	leaq	0x2000(%rsp), %rbp
0000000001047164	movq	0x20(%rcx), %rbx
0000000001047168	testq	%rbx, %rbx
000000000104716b	jne	0x10471d4
000000000104716d	movq	0x2020(%rsp), %rsi
0000000001047175	movl	0x2028(%rsp), %ecx
000000000104717c	movq	%rsp, %rdi
000000000104717f	rep		movsb	(%rsi), %es:(%rdi)
0000000001047181	movq	0x2018(%rsp), %rdx
0000000001047189	callq	*(%rdx)
000000000104718b	movq	0x2010(%rsp), %rdx
0000000001047193	movq	0x2020(%rsp), %rdi
000000000104719b	movl	0x2028(%rsp), %ecx
00000000010471a2	movl	0x202c(%rsp), %ebx
00000000010471a9	movq	%rsp, %rsi
00000000010471ac	addq	%rbx, %rdi
00000000010471af	addq	%rbx, %rsi
00000000010471b2	subq	%rbx, %rcx
00000000010471b5	callq	_callRet
00000000010471ba	movq	0x2000(%rsp), %rbp
00000000010471c2	addq	$0x2008, %rsp
00000000010471c9	retq
00000000010471ca	callq	runtime.morestack_noctxt
00000000010471cf	jmp	runtime.call8192
00000000010471d4	leaq	0x2010(%rsp), %rdi
00000000010471dc	cmpq	%rdi, (%rbx)
00000000010471df	jne	0x104716d
00000000010471e1	movq	%rsp, (%rbx)
00000000010471e4	jmp	0x104716d
00000000010471e6	int3
00000000010471e7	int3
00000000010471e8	int3
00000000010471e9	int3
00000000010471ea	int3
00000000010471eb	int3
00000000010471ec	int3
00000000010471ed	int3
00000000010471ee	int3
00000000010471ef	int3
runtime.call16384:
00000000010471f0	movq	%gs:0x30, %rcx
00000000010471f9	movq	0x10(%rcx), %rsi
00000000010471fd	cmpq	$-0x522, %rsi
0000000001047204	je	0x104729a
000000000104720a	leaq	0x370(%rsp), %rax
0000000001047212	subq	%rsi, %rax
0000000001047215	cmpq	$0x42f8, %rax
000000000104721b	jbe	0x104729a
000000000104721d	subq	$0x4008, %rsp
0000000001047224	movq	%rbp, 0x4000(%rsp)
000000000104722c	leaq	0x4000(%rsp), %rbp
0000000001047234	movq	0x20(%rcx), %rbx
0000000001047238	testq	%rbx, %rbx
000000000104723b	jne	0x10472a4
000000000104723d	movq	0x4020(%rsp), %rsi
0000000001047245	movl	0x4028(%rsp), %ecx
000000000104724c	movq	%rsp, %rdi
000000000104724f	rep		movsb	(%rsi), %es:(%rdi)
0000000001047251	movq	0x4018(%rsp), %rdx
0000000001047259	callq	*(%rdx)
000000000104725b	movq	0x4010(%rsp), %rdx
0000000001047263	movq	0x4020(%rsp), %rdi
000000000104726b	movl	0x4028(%rsp), %ecx
0000000001047272	movl	0x402c(%rsp), %ebx
0000000001047279	movq	%rsp, %rsi
000000000104727c	addq	%rbx, %rdi
000000000104727f	addq	%rbx, %rsi
0000000001047282	subq	%rbx, %rcx
0000000001047285	callq	_callRet
000000000104728a	movq	0x4000(%rsp), %rbp
0000000001047292	addq	$0x4008, %rsp
0000000001047299	retq
000000000104729a	callq	runtime.morestack_noctxt
000000000104729f	jmp	runtime.call16384
00000000010472a4	leaq	0x4010(%rsp), %rdi
00000000010472ac	cmpq	%rdi, (%rbx)
00000000010472af	jne	0x104723d
00000000010472b1	movq	%rsp, (%rbx)
00000000010472b4	jmp	0x104723d
00000000010472b6	int3
00000000010472b7	int3
00000000010472b8	int3
00000000010472b9	int3
00000000010472ba	int3
00000000010472bb	int3
00000000010472bc	int3
00000000010472bd	int3
00000000010472be	int3
00000000010472bf	int3
runtime.call32768:
00000000010472c0	movq	%gs:0x30, %rcx
00000000010472c9	movq	0x10(%rcx), %rsi
00000000010472cd	cmpq	$-0x522, %rsi
00000000010472d4	je	0x104736a
00000000010472da	leaq	0x370(%rsp), %rax
00000000010472e2	subq	%rsi, %rax
00000000010472e5	cmpq	$0x82f8, %rax
00000000010472eb	jbe	0x104736a
00000000010472ed	subq	$0x8008, %rsp
00000000010472f4	movq	%rbp, 0x8000(%rsp)
00000000010472fc	leaq	0x8000(%rsp), %rbp
0000000001047304	movq	0x20(%rcx), %rbx
0000000001047308	testq	%rbx, %rbx
000000000104730b	jne	0x1047374
000000000104730d	movq	0x8020(%rsp), %rsi
0000000001047315	movl	0x8028(%rsp), %ecx
000000000104731c	movq	%rsp, %rdi
000000000104731f	rep		movsb	(%rsi), %es:(%rdi)
0000000001047321	movq	0x8018(%rsp), %rdx
0000000001047329	callq	*(%rdx)
000000000104732b	movq	0x8010(%rsp), %rdx
0000000001047333	movq	0x8020(%rsp), %rdi
000000000104733b	movl	0x8028(%rsp), %ecx
0000000001047342	movl	0x802c(%rsp), %ebx
0000000001047349	movq	%rsp, %rsi
000000000104734c	addq	%rbx, %rdi
000000000104734f	addq	%rbx, %rsi
0000000001047352	subq	%rbx, %rcx
0000000001047355	callq	_callRet
000000000104735a	movq	0x8000(%rsp), %rbp
0000000001047362	addq	$0x8008, %rsp
0000000001047369	retq
000000000104736a	callq	runtime.morestack_noctxt
000000000104736f	jmp	runtime.call32768
0000000001047374	leaq	0x8010(%rsp), %rdi
000000000104737c	cmpq	%rdi, (%rbx)
000000000104737f	jne	0x104730d
0000000001047381	movq	%rsp, (%rbx)
0000000001047384	jmp	0x104730d
0000000001047386	int3
0000000001047387	int3
0000000001047388	int3
0000000001047389	int3
000000000104738a	int3
000000000104738b	int3
000000000104738c	int3
000000000104738d	int3
000000000104738e	int3
000000000104738f	int3
runtime.call65536:
0000000001047390	movq	%gs:0x30, %rcx
0000000001047399	movq	0x10(%rcx), %rsi
000000000104739d	cmpq	$-0x522, %rsi
00000000010473a4	je	0x104743a
00000000010473aa	leaq	0x370(%rsp), %rax
00000000010473b2	subq	%rsi, %rax
00000000010473b5	cmpq	$0x102f8, %rax
00000000010473bb	jbe	0x104743a
00000000010473bd	subq	$0x10008, %rsp
00000000010473c4	movq	%rbp, 0x10000(%rsp)
00000000010473cc	leaq	0x10000(%rsp), %rbp
00000000010473d4	movq	0x20(%rcx), %rbx
00000000010473d8	testq	%rbx, %rbx
00000000010473db	jne	0x1047444
00000000010473dd	movq	0x10020(%rsp), %rsi
00000000010473e5	movl	0x10028(%rsp), %ecx
00000000010473ec	movq	%rsp, %rdi
00000000010473ef	rep		movsb	(%rsi), %es:(%rdi)
00000000010473f1	movq	0x10018(%rsp), %rdx
00000000010473f9	callq	*(%rdx)
00000000010473fb	movq	0x10010(%rsp), %rdx
0000000001047403	movq	0x10020(%rsp), %rdi
000000000104740b	movl	0x10028(%rsp), %ecx
0000000001047412	movl	0x1002c(%rsp), %ebx
0000000001047419	movq	%rsp, %rsi
000000000104741c	addq	%rbx, %rdi
000000000104741f	addq	%rbx, %rsi
0000000001047422	subq	%rbx, %rcx
0000000001047425	callq	_callRet
000000000104742a	movq	0x10000(%rsp), %rbp
0000000001047432	addq	$0x10008, %rsp
0000000001047439	retq
000000000104743a	callq	runtime.morestack_noctxt
000000000104743f	jmp	runtime.call65536
0000000001047444	leaq	0x10010(%rsp), %rdi
000000000104744c	cmpq	%rdi, (%rbx)
000000000104744f	jne	0x10473dd
0000000001047451	movq	%rsp, (%rbx)
0000000001047454	jmp	0x10473dd
0000000001047456	int3
0000000001047457	int3
0000000001047458	int3
0000000001047459	int3
000000000104745a	int3
000000000104745b	int3
000000000104745c	int3
000000000104745d	int3
000000000104745e	int3
000000000104745f	int3
runtime.call131072:
0000000001047460	movq	%gs:0x30, %rcx
0000000001047469	movq	0x10(%rcx), %rsi
000000000104746d	cmpq	$-0x522, %rsi
0000000001047474	je	0x104750a
000000000104747a	leaq	0x370(%rsp), %rax
0000000001047482	subq	%rsi, %rax
0000000001047485	cmpq	$0x202f8, %rax
000000000104748b	jbe	0x104750a
000000000104748d	subq	$0x20008, %rsp
0000000001047494	movq	%rbp, 0x20000(%rsp)
000000000104749c	leaq	0x20000(%rsp), %rbp
00000000010474a4	movq	0x20(%rcx), %rbx
00000000010474a8	testq	%rbx, %rbx
00000000010474ab	jne	0x1047514
00000000010474ad	movq	0x20020(%rsp), %rsi
00000000010474b5	movl	0x20028(%rsp), %ecx
00000000010474bc	movq	%rsp, %rdi
00000000010474bf	rep		movsb	(%rsi), %es:(%rdi)
00000000010474c1	movq	0x20018(%rsp), %rdx
00000000010474c9	callq	*(%rdx)
00000000010474cb	movq	0x20010(%rsp), %rdx
00000000010474d3	movq	0x20020(%rsp), %rdi
00000000010474db	movl	0x20028(%rsp), %ecx
00000000010474e2	movl	0x2002c(%rsp), %ebx
00000000010474e9	movq	%rsp, %rsi
00000000010474ec	addq	%rbx, %rdi
00000000010474ef	addq	%rbx, %rsi
00000000010474f2	subq	%rbx, %rcx
00000000010474f5	callq	_callRet
00000000010474fa	movq	0x20000(%rsp), %rbp
0000000001047502	addq	$0x20008, %rsp
0000000001047509	retq
000000000104750a	callq	runtime.morestack_noctxt
000000000104750f	jmp	runtime.call131072
0000000001047514	leaq	0x20010(%rsp), %rdi
000000000104751c	cmpq	%rdi, (%rbx)
000000000104751f	jne	0x10474ad
0000000001047521	movq	%rsp, (%rbx)
0000000001047524	jmp	0x10474ad
0000000001047526	int3
0000000001047527	int3
0000000001047528	int3
0000000001047529	int3
000000000104752a	int3
000000000104752b	int3
000000000104752c	int3
000000000104752d	int3
000000000104752e	int3
000000000104752f	int3
runtime.call262144:
0000000001047530	movq	%gs:0x30, %rcx
0000000001047539	movq	0x10(%rcx), %rsi
000000000104753d	cmpq	$-0x522, %rsi
0000000001047544	je	0x10475da
000000000104754a	leaq	0x370(%rsp), %rax
0000000001047552	subq	%rsi, %rax
0000000001047555	cmpq	$0x402f8, %rax
000000000104755b	jbe	0x10475da
000000000104755d	subq	$0x40008, %rsp
0000000001047564	movq	%rbp, 0x40000(%rsp)
000000000104756c	leaq	0x40000(%rsp), %rbp
0000000001047574	movq	0x20(%rcx), %rbx
0000000001047578	testq	%rbx, %rbx
000000000104757b	jne	0x10475e4
000000000104757d	movq	0x40020(%rsp), %rsi
0000000001047585	movl	0x40028(%rsp), %ecx
000000000104758c	movq	%rsp, %rdi
000000000104758f	rep		movsb	(%rsi), %es:(%rdi)
0000000001047591	movq	0x40018(%rsp), %rdx
0000000001047599	callq	*(%rdx)
000000000104759b	movq	0x40010(%rsp), %rdx
00000000010475a3	movq	0x40020(%rsp), %rdi
00000000010475ab	movl	0x40028(%rsp), %ecx
00000000010475b2	movl	0x4002c(%rsp), %ebx
00000000010475b9	movq	%rsp, %rsi
00000000010475bc	addq	%rbx, %rdi
00000000010475bf	addq	%rbx, %rsi
00000000010475c2	subq	%rbx, %rcx
00000000010475c5	callq	_callRet
00000000010475ca	movq	0x40000(%rsp), %rbp
00000000010475d2	addq	$0x40008, %rsp
00000000010475d9	retq
00000000010475da	callq	runtime.morestack_noctxt
00000000010475df	jmp	runtime.call262144
00000000010475e4	leaq	0x40010(%rsp), %rdi
00000000010475ec	cmpq	%rdi, (%rbx)
00000000010475ef	jne	0x104757d
00000000010475f1	movq	%rsp, (%rbx)
00000000010475f4	jmp	0x104757d
00000000010475f6	int3
00000000010475f7	int3
00000000010475f8	int3
00000000010475f9	int3
00000000010475fa	int3
00000000010475fb	int3
00000000010475fc	int3
00000000010475fd	int3
00000000010475fe	int3
00000000010475ff	int3
runtime.call524288:
0000000001047600	movq	%gs:0x30, %rcx
0000000001047609	movq	0x10(%rcx), %rsi
000000000104760d	cmpq	$-0x522, %rsi
0000000001047614	je	0x10476aa
000000000104761a	leaq	0x370(%rsp), %rax
0000000001047622	subq	%rsi, %rax
0000000001047625	cmpq	$0x802f8, %rax
000000000104762b	jbe	0x10476aa
000000000104762d	subq	$0x80008, %rsp
0000000001047634	movq	%rbp, 0x80000(%rsp)
000000000104763c	leaq	0x80000(%rsp), %rbp
0000000001047644	movq	0x20(%rcx), %rbx
0000000001047648	testq	%rbx, %rbx
000000000104764b	jne	0x10476b4
000000000104764d	movq	0x80020(%rsp), %rsi
0000000001047655	movl	0x80028(%rsp), %ecx
000000000104765c	movq	%rsp, %rdi
000000000104765f	rep		movsb	(%rsi), %es:(%rdi)
0000000001047661	movq	0x80018(%rsp), %rdx
0000000001047669	callq	*(%rdx)
000000000104766b	movq	0x80010(%rsp), %rdx
0000000001047673	movq	0x80020(%rsp), %rdi
000000000104767b	movl	0x80028(%rsp), %ecx
0000000001047682	movl	0x8002c(%rsp), %ebx
0000000001047689	movq	%rsp, %rsi
000000000104768c	addq	%rbx, %rdi
000000000104768f	addq	%rbx, %rsi
0000000001047692	subq	%rbx, %rcx
0000000001047695	callq	_callRet
000000000104769a	movq	0x80000(%rsp), %rbp
00000000010476a2	addq	$0x80008, %rsp
00000000010476a9	retq
00000000010476aa	callq	runtime.morestack_noctxt
00000000010476af	jmp	runtime.call524288
00000000010476b4	leaq	0x80010(%rsp), %rdi
00000000010476bc	cmpq	%rdi, (%rbx)
00000000010476bf	jne	0x104764d
00000000010476c1	movq	%rsp, (%rbx)
00000000010476c4	jmp	0x104764d
00000000010476c6	int3
00000000010476c7	int3
00000000010476c8	int3
00000000010476c9	int3
00000000010476ca	int3
00000000010476cb	int3
00000000010476cc	int3
00000000010476cd	int3
00000000010476ce	int3
00000000010476cf	int3
runtime.call1048576:
00000000010476d0	movq	%gs:0x30, %rcx
00000000010476d9	movq	0x10(%rcx), %rsi
00000000010476dd	cmpq	$-0x522, %rsi
00000000010476e4	je	0x104777a
00000000010476ea	leaq	0x370(%rsp), %rax
00000000010476f2	subq	%rsi, %rax
00000000010476f5	cmpq	$0x1002f8, %rax
00000000010476fb	jbe	0x104777a
00000000010476fd	subq	$0x100008, %rsp
0000000001047704	movq	%rbp, 0x100000(%rsp)
000000000104770c	leaq	0x100000(%rsp), %rbp
0000000001047714	movq	0x20(%rcx), %rbx
0000000001047718	testq	%rbx, %rbx
000000000104771b	jne	0x1047784
000000000104771d	movq	0x100020(%rsp), %rsi
0000000001047725	movl	0x100028(%rsp), %ecx
000000000104772c	movq	%rsp, %rdi
000000000104772f	rep		movsb	(%rsi), %es:(%rdi)
0000000001047731	movq	0x100018(%rsp), %rdx
0000000001047739	callq	*(%rdx)
000000000104773b	movq	0x100010(%rsp), %rdx
0000000001047743	movq	0x100020(%rsp), %rdi
000000000104774b	movl	0x100028(%rsp), %ecx
0000000001047752	movl	0x10002c(%rsp), %ebx
0000000001047759	movq	%rsp, %rsi
000000000104775c	addq	%rbx, %rdi
000000000104775f	addq	%rbx, %rsi
0000000001047762	subq	%rbx, %rcx
0000000001047765	callq	_callRet
000000000104776a	movq	0x100000(%rsp), %rbp
0000000001047772	addq	$0x100008, %rsp
0000000001047779	retq
000000000104777a	callq	runtime.morestack_noctxt
000000000104777f	jmp	runtime.call1048576
0000000001047784	leaq	0x100010(%rsp), %rdi
000000000104778c	cmpq	%rdi, (%rbx)
000000000104778f	jne	0x104771d
0000000001047791	movq	%rsp, (%rbx)
0000000001047794	jmp	0x104771d
0000000001047796	int3
0000000001047797	int3
0000000001047798	int3
0000000001047799	int3
000000000104779a	int3
000000000104779b	int3
000000000104779c	int3
000000000104779d	int3
000000000104779e	int3
000000000104779f	int3
runtime.call2097152:
00000000010477a0	movq	%gs:0x30, %rcx
00000000010477a9	movq	0x10(%rcx), %rsi
00000000010477ad	cmpq	$-0x522, %rsi
00000000010477b4	je	0x104784a
00000000010477ba	leaq	0x370(%rsp), %rax
00000000010477c2	subq	%rsi, %rax
00000000010477c5	cmpq	$0x2002f8, %rax
00000000010477cb	jbe	0x104784a
00000000010477cd	subq	$0x200008, %rsp
00000000010477d4	movq	%rbp, 0x200000(%rsp)
00000000010477dc	leaq	0x200000(%rsp), %rbp
00000000010477e4	movq	0x20(%rcx), %rbx
00000000010477e8	testq	%rbx, %rbx
00000000010477eb	jne	0x1047854
00000000010477ed	movq	0x200020(%rsp), %rsi
00000000010477f5	movl	0x200028(%rsp), %ecx
00000000010477fc	movq	%rsp, %rdi
00000000010477ff	rep		movsb	(%rsi), %es:(%rdi)
0000000001047801	movq	0x200018(%rsp), %rdx
0000000001047809	callq	*(%rdx)
000000000104780b	movq	0x200010(%rsp), %rdx
0000000001047813	movq	0x200020(%rsp), %rdi
000000000104781b	movl	0x200028(%rsp), %ecx
0000000001047822	movl	0x20002c(%rsp), %ebx
0000000001047829	movq	%rsp, %rsi
000000000104782c	addq	%rbx, %rdi
000000000104782f	addq	%rbx, %rsi
0000000001047832	subq	%rbx, %rcx
0000000001047835	callq	_callRet
000000000104783a	movq	0x200000(%rsp), %rbp
0000000001047842	addq	$0x200008, %rsp
0000000001047849	retq
000000000104784a	callq	runtime.morestack_noctxt
000000000104784f	jmp	runtime.call2097152
0000000001047854	leaq	0x200010(%rsp), %rdi
000000000104785c	cmpq	%rdi, (%rbx)
000000000104785f	jne	0x10477ed
0000000001047861	movq	%rsp, (%rbx)
0000000001047864	jmp	0x10477ed
0000000001047866	int3
0000000001047867	int3
0000000001047868	int3
0000000001047869	int3
000000000104786a	int3
000000000104786b	int3
000000000104786c	int3
000000000104786d	int3
000000000104786e	int3
000000000104786f	int3
runtime.call4194304:
0000000001047870	movq	%gs:0x30, %rcx
0000000001047879	movq	0x10(%rcx), %rsi
000000000104787d	cmpq	$-0x522, %rsi
0000000001047884	je	0x104791a
000000000104788a	leaq	0x370(%rsp), %rax
0000000001047892	subq	%rsi, %rax
0000000001047895	cmpq	$0x4002f8, %rax
000000000104789b	jbe	0x104791a
000000000104789d	subq	$0x400008, %rsp
00000000010478a4	movq	%rbp, 0x400000(%rsp)
00000000010478ac	leaq	0x400000(%rsp), %rbp
00000000010478b4	movq	0x20(%rcx), %rbx
00000000010478b8	testq	%rbx, %rbx
00000000010478bb	jne	0x1047924
00000000010478bd	movq	0x400020(%rsp), %rsi
00000000010478c5	movl	0x400028(%rsp), %ecx
00000000010478cc	movq	%rsp, %rdi
00000000010478cf	rep		movsb	(%rsi), %es:(%rdi)
00000000010478d1	movq	0x400018(%rsp), %rdx
00000000010478d9	callq	*(%rdx)
00000000010478db	movq	0x400010(%rsp), %rdx
00000000010478e3	movq	0x400020(%rsp), %rdi
00000000010478eb	movl	0x400028(%rsp), %ecx
00000000010478f2	movl	0x40002c(%rsp), %ebx
00000000010478f9	movq	%rsp, %rsi
00000000010478fc	addq	%rbx, %rdi
00000000010478ff	addq	%rbx, %rsi
0000000001047902	subq	%rbx, %rcx
0000000001047905	callq	_callRet
000000000104790a	movq	0x400000(%rsp), %rbp
0000000001047912	addq	$0x400008, %rsp
0000000001047919	retq
000000000104791a	callq	runtime.morestack_noctxt
000000000104791f	jmp	runtime.call4194304
0000000001047924	leaq	0x400010(%rsp), %rdi
000000000104792c	cmpq	%rdi, (%rbx)
000000000104792f	jne	0x10478bd
0000000001047931	movq	%rsp, (%rbx)
0000000001047934	jmp	0x10478bd
0000000001047936	int3
0000000001047937	int3
0000000001047938	int3
0000000001047939	int3
000000000104793a	int3
000000000104793b	int3
000000000104793c	int3
000000000104793d	int3
000000000104793e	int3
000000000104793f	int3
runtime.call8388608:
0000000001047940	movq	%gs:0x30, %rcx
0000000001047949	movq	0x10(%rcx), %rsi
000000000104794d	cmpq	$-0x522, %rsi
0000000001047954	je	0x10479ea
000000000104795a	leaq	0x370(%rsp), %rax
0000000001047962	subq	%rsi, %rax
0000000001047965	cmpq	$0x8002f8, %rax
000000000104796b	jbe	0x10479ea
000000000104796d	subq	$0x800008, %rsp
0000000001047974	movq	%rbp, 0x800000(%rsp)
000000000104797c	leaq	0x800000(%rsp), %rbp
0000000001047984	movq	0x20(%rcx), %rbx
0000000001047988	testq	%rbx, %rbx
000000000104798b	jne	0x10479f4
000000000104798d	movq	0x800020(%rsp), %rsi
0000000001047995	movl	0x800028(%rsp), %ecx
000000000104799c	movq	%rsp, %rdi
000000000104799f	rep		movsb	(%rsi), %es:(%rdi)
00000000010479a1	movq	0x800018(%rsp), %rdx
00000000010479a9	callq	*(%rdx)
00000000010479ab	movq	0x800010(%rsp), %rdx
00000000010479b3	movq	0x800020(%rsp), %rdi
00000000010479bb	movl	0x800028(%rsp), %ecx
00000000010479c2	movl	0x80002c(%rsp), %ebx
00000000010479c9	movq	%rsp, %rsi
00000000010479cc	addq	%rbx, %rdi
00000000010479cf	addq	%rbx, %rsi
00000000010479d2	subq	%rbx, %rcx
00000000010479d5	callq	_callRet
00000000010479da	movq	0x800000(%rsp), %rbp
00000000010479e2	addq	$0x800008, %rsp
00000000010479e9	retq
00000000010479ea	callq	runtime.morestack_noctxt
00000000010479ef	jmp	runtime.call8388608
00000000010479f4	leaq	0x800010(%rsp), %rdi
00000000010479fc	cmpq	%rdi, (%rbx)
00000000010479ff	jne	0x104798d
0000000001047a01	movq	%rsp, (%rbx)
0000000001047a04	jmp	0x104798d
0000000001047a06	int3
0000000001047a07	int3
0000000001047a08	int3
0000000001047a09	int3
0000000001047a0a	int3
0000000001047a0b	int3
0000000001047a0c	int3
0000000001047a0d	int3
0000000001047a0e	int3
0000000001047a0f	int3
runtime.call16777216:
0000000001047a10	movq	%gs:0x30, %rcx
0000000001047a19	movq	0x10(%rcx), %rsi
0000000001047a1d	cmpq	$-0x522, %rsi
0000000001047a24	je	0x1047aba
0000000001047a2a	leaq	0x370(%rsp), %rax
0000000001047a32	subq	%rsi, %rax
0000000001047a35	cmpq	$0x10002f8, %rax
0000000001047a3b	jbe	0x1047aba
0000000001047a3d	subq	$0x1000008, %rsp
0000000001047a44	movq	%rbp, 0x1000000(%rsp)
0000000001047a4c	leaq	0x1000000(%rsp), %rbp
0000000001047a54	movq	0x20(%rcx), %rbx
0000000001047a58	testq	%rbx, %rbx
0000000001047a5b	jne	0x1047ac4
0000000001047a5d	movq	0x1000020(%rsp), %rsi
0000000001047a65	movl	0x1000028(%rsp), %ecx
0000000001047a6c	movq	%rsp, %rdi
0000000001047a6f	rep		movsb	(%rsi), %es:(%rdi)
0000000001047a71	movq	0x1000018(%rsp), %rdx
0000000001047a79	callq	*(%rdx)
0000000001047a7b	movq	0x1000010(%rsp), %rdx
0000000001047a83	movq	0x1000020(%rsp), %rdi
0000000001047a8b	movl	0x1000028(%rsp), %ecx
0000000001047a92	movl	0x100002c(%rsp), %ebx
0000000001047a99	movq	%rsp, %rsi
0000000001047a9c	addq	%rbx, %rdi
0000000001047a9f	addq	%rbx, %rsi
0000000001047aa2	subq	%rbx, %rcx
0000000001047aa5	callq	_callRet
0000000001047aaa	movq	0x1000000(%rsp), %rbp
0000000001047ab2	addq	$0x1000008, %rsp
0000000001047ab9	retq
0000000001047aba	callq	runtime.morestack_noctxt
0000000001047abf	jmp	runtime.call16777216
0000000001047ac4	leaq	0x1000010(%rsp), %rdi
0000000001047acc	cmpq	%rdi, (%rbx)
0000000001047acf	jne	0x1047a5d
0000000001047ad1	movq	%rsp, (%rbx)
0000000001047ad4	jmp	0x1047a5d
0000000001047ad6	int3
0000000001047ad7	int3
0000000001047ad8	int3
0000000001047ad9	int3
0000000001047ada	int3
0000000001047adb	int3
0000000001047adc	int3
0000000001047add	int3
0000000001047ade	int3
0000000001047adf	int3
runtime.call33554432:
0000000001047ae0	movq	%gs:0x30, %rcx
0000000001047ae9	movq	0x10(%rcx), %rsi
0000000001047aed	cmpq	$-0x522, %rsi
0000000001047af4	je	0x1047b8a
0000000001047afa	leaq	0x370(%rsp), %rax
0000000001047b02	subq	%rsi, %rax
0000000001047b05	cmpq	$0x20002f8, %rax
0000000001047b0b	jbe	0x1047b8a
0000000001047b0d	subq	$0x2000008, %rsp
0000000001047b14	movq	%rbp, 0x2000000(%rsp)
0000000001047b1c	leaq	0x2000000(%rsp), %rbp
0000000001047b24	movq	0x20(%rcx), %rbx
0000000001047b28	testq	%rbx, %rbx
0000000001047b2b	jne	0x1047b94
0000000001047b2d	movq	0x2000020(%rsp), %rsi
0000000001047b35	movl	0x2000028(%rsp), %ecx
0000000001047b3c	movq	%rsp, %rdi
0000000001047b3f	rep		movsb	(%rsi), %es:(%rdi)
0000000001047b41	movq	0x2000018(%rsp), %rdx
0000000001047b49	callq	*(%rdx)
0000000001047b4b	movq	0x2000010(%rsp), %rdx
0000000001047b53	movq	0x2000020(%rsp), %rdi
0000000001047b5b	movl	0x2000028(%rsp), %ecx
0000000001047b62	movl	0x200002c(%rsp), %ebx
0000000001047b69	movq	%rsp, %rsi
0000000001047b6c	addq	%rbx, %rdi
0000000001047b6f	addq	%rbx, %rsi
0000000001047b72	subq	%rbx, %rcx
0000000001047b75	callq	_callRet
0000000001047b7a	movq	0x2000000(%rsp), %rbp
0000000001047b82	addq	$0x2000008, %rsp
0000000001047b89	retq
0000000001047b8a	callq	runtime.morestack_noctxt
0000000001047b8f	jmp	runtime.call33554432
0000000001047b94	leaq	0x2000010(%rsp), %rdi
0000000001047b9c	cmpq	%rdi, (%rbx)
0000000001047b9f	jne	0x1047b2d
0000000001047ba1	movq	%rsp, (%rbx)
0000000001047ba4	jmp	0x1047b2d
0000000001047ba6	int3
0000000001047ba7	int3
0000000001047ba8	int3
0000000001047ba9	int3
0000000001047baa	int3
0000000001047bab	int3
0000000001047bac	int3
0000000001047bad	int3
0000000001047bae	int3
0000000001047baf	int3
runtime.call67108864:
0000000001047bb0	movq	%gs:0x30, %rcx
0000000001047bb9	movq	0x10(%rcx), %rsi
0000000001047bbd	cmpq	$-0x522, %rsi
0000000001047bc4	je	0x1047c5a
0000000001047bca	leaq	0x370(%rsp), %rax
0000000001047bd2	subq	%rsi, %rax
0000000001047bd5	cmpq	$0x40002f8, %rax
0000000001047bdb	jbe	0x1047c5a
0000000001047bdd	subq	$0x4000008, %rsp
0000000001047be4	movq	%rbp, 0x4000000(%rsp)
0000000001047bec	leaq	0x4000000(%rsp), %rbp
0000000001047bf4	movq	0x20(%rcx), %rbx
0000000001047bf8	testq	%rbx, %rbx
0000000001047bfb	jne	0x1047c64
0000000001047bfd	movq	0x4000020(%rsp), %rsi
0000000001047c05	movl	0x4000028(%rsp), %ecx
0000000001047c0c	movq	%rsp, %rdi
0000000001047c0f	rep		movsb	(%rsi), %es:(%rdi)
0000000001047c11	movq	0x4000018(%rsp), %rdx
0000000001047c19	callq	*(%rdx)
0000000001047c1b	movq	0x4000010(%rsp), %rdx
0000000001047c23	movq	0x4000020(%rsp), %rdi
0000000001047c2b	movl	0x4000028(%rsp), %ecx
0000000001047c32	movl	0x400002c(%rsp), %ebx
0000000001047c39	movq	%rsp, %rsi
0000000001047c3c	addq	%rbx, %rdi
0000000001047c3f	addq	%rbx, %rsi
0000000001047c42	subq	%rbx, %rcx
0000000001047c45	callq	_callRet
0000000001047c4a	movq	0x4000000(%rsp), %rbp
0000000001047c52	addq	$0x4000008, %rsp
0000000001047c59	retq
0000000001047c5a	callq	runtime.morestack_noctxt
0000000001047c5f	jmp	runtime.call67108864
0000000001047c64	leaq	0x4000010(%rsp), %rdi
0000000001047c6c	cmpq	%rdi, (%rbx)
0000000001047c6f	jne	0x1047bfd
0000000001047c71	movq	%rsp, (%rbx)
0000000001047c74	jmp	0x1047bfd
0000000001047c76	int3
0000000001047c77	int3
0000000001047c78	int3
0000000001047c79	int3
0000000001047c7a	int3
0000000001047c7b	int3
0000000001047c7c	int3
0000000001047c7d	int3
0000000001047c7e	int3
0000000001047c7f	int3
runtime.call134217728:
0000000001047c80	movq	%gs:0x30, %rcx
0000000001047c89	movq	0x10(%rcx), %rsi
0000000001047c8d	cmpq	$-0x522, %rsi
0000000001047c94	je	0x1047d2a
0000000001047c9a	leaq	0x370(%rsp), %rax
0000000001047ca2	subq	%rsi, %rax
0000000001047ca5	cmpq	$0x80002f8, %rax
0000000001047cab	jbe	0x1047d2a
0000000001047cad	subq	$0x8000008, %rsp
0000000001047cb4	movq	%rbp, 0x8000000(%rsp)
0000000001047cbc	leaq	0x8000000(%rsp), %rbp
0000000001047cc4	movq	0x20(%rcx), %rbx
0000000001047cc8	testq	%rbx, %rbx
0000000001047ccb	jne	0x1047d34
0000000001047ccd	movq	0x8000020(%rsp), %rsi
0000000001047cd5	movl	0x8000028(%rsp), %ecx
0000000001047cdc	movq	%rsp, %rdi
0000000001047cdf	rep		movsb	(%rsi), %es:(%rdi)
0000000001047ce1	movq	0x8000018(%rsp), %rdx
0000000001047ce9	callq	*(%rdx)
0000000001047ceb	movq	0x8000010(%rsp), %rdx
0000000001047cf3	movq	0x8000020(%rsp), %rdi
0000000001047cfb	movl	0x8000028(%rsp), %ecx
0000000001047d02	movl	0x800002c(%rsp), %ebx
0000000001047d09	movq	%rsp, %rsi
0000000001047d0c	addq	%rbx, %rdi
0000000001047d0f	addq	%rbx, %rsi
0000000001047d12	subq	%rbx, %rcx
0000000001047d15	callq	_callRet
0000000001047d1a	movq	0x8000000(%rsp), %rbp
0000000001047d22	addq	$0x8000008, %rsp
0000000001047d29	retq
0000000001047d2a	callq	runtime.morestack_noctxt
0000000001047d2f	jmp	runtime.call134217728
0000000001047d34	leaq	0x8000010(%rsp), %rdi
0000000001047d3c	cmpq	%rdi, (%rbx)
0000000001047d3f	jne	0x1047ccd
0000000001047d41	movq	%rsp, (%rbx)
0000000001047d44	jmp	0x1047ccd
0000000001047d46	int3
0000000001047d47	int3
0000000001047d48	int3
0000000001047d49	int3
0000000001047d4a	int3
0000000001047d4b	int3
0000000001047d4c	int3
0000000001047d4d	int3
0000000001047d4e	int3
0000000001047d4f	int3
runtime.call268435456:
0000000001047d50	movq	%gs:0x30, %rcx
0000000001047d59	movq	0x10(%rcx), %rsi
0000000001047d5d	cmpq	$-0x522, %rsi
0000000001047d64	je	0x1047dfa
0000000001047d6a	leaq	0x370(%rsp), %rax
0000000001047d72	subq	%rsi, %rax
0000000001047d75	cmpq	$0x100002f8, %rax
0000000001047d7b	jbe	0x1047dfa
0000000001047d7d	subq	$0x10000008, %rsp
0000000001047d84	movq	%rbp, 0x10000000(%rsp)
0000000001047d8c	leaq	0x10000000(%rsp), %rbp
0000000001047d94	movq	0x20(%rcx), %rbx
0000000001047d98	testq	%rbx, %rbx
0000000001047d9b	jne	0x1047e04
0000000001047d9d	movq	0x10000020(%rsp), %rsi
0000000001047da5	movl	0x10000028(%rsp), %ecx
0000000001047dac	movq	%rsp, %rdi
0000000001047daf	rep		movsb	(%rsi), %es:(%rdi)
0000000001047db1	movq	0x10000018(%rsp), %rdx
0000000001047db9	callq	*(%rdx)
0000000001047dbb	movq	0x10000010(%rsp), %rdx
0000000001047dc3	movq	0x10000020(%rsp), %rdi
0000000001047dcb	movl	0x10000028(%rsp), %ecx
0000000001047dd2	movl	0x1000002c(%rsp), %ebx
0000000001047dd9	movq	%rsp, %rsi
0000000001047ddc	addq	%rbx, %rdi
0000000001047ddf	addq	%rbx, %rsi
0000000001047de2	subq	%rbx, %rcx
0000000001047de5	callq	_callRet
0000000001047dea	movq	0x10000000(%rsp), %rbp
0000000001047df2	addq	$0x10000008, %rsp
0000000001047df9	retq
0000000001047dfa	callq	runtime.morestack_noctxt
0000000001047dff	jmp	runtime.call268435456
0000000001047e04	leaq	0x10000010(%rsp), %rdi
0000000001047e0c	cmpq	%rdi, (%rbx)
0000000001047e0f	jne	0x1047d9d
0000000001047e11	movq	%rsp, (%rbx)
0000000001047e14	jmp	0x1047d9d
0000000001047e16	int3
0000000001047e17	int3
0000000001047e18	int3
0000000001047e19	int3
0000000001047e1a	int3
0000000001047e1b	int3
0000000001047e1c	int3
0000000001047e1d	int3
0000000001047e1e	int3
0000000001047e1f	int3
runtime.call536870912:
0000000001047e20	movq	%gs:0x30, %rcx
0000000001047e29	movq	0x10(%rcx), %rsi
0000000001047e2d	cmpq	$-0x522, %rsi
0000000001047e34	je	0x1047eca
0000000001047e3a	leaq	0x370(%rsp), %rax
0000000001047e42	subq	%rsi, %rax
0000000001047e45	cmpq	$0x200002f8, %rax
0000000001047e4b	jbe	0x1047eca
0000000001047e4d	subq	$0x20000008, %rsp
0000000001047e54	movq	%rbp, 0x20000000(%rsp)
0000000001047e5c	leaq	0x20000000(%rsp), %rbp
0000000001047e64	movq	0x20(%rcx), %rbx
0000000001047e68	testq	%rbx, %rbx
0000000001047e6b	jne	0x1047ed4
0000000001047e6d	movq	0x20000020(%rsp), %rsi
0000000001047e75	movl	0x20000028(%rsp), %ecx
0000000001047e7c	movq	%rsp, %rdi
0000000001047e7f	rep		movsb	(%rsi), %es:(%rdi)
0000000001047e81	movq	0x20000018(%rsp), %rdx
0000000001047e89	callq	*(%rdx)
0000000001047e8b	movq	0x20000010(%rsp), %rdx
0000000001047e93	movq	0x20000020(%rsp), %rdi
0000000001047e9b	movl	0x20000028(%rsp), %ecx
0000000001047ea2	movl	0x2000002c(%rsp), %ebx
0000000001047ea9	movq	%rsp, %rsi
0000000001047eac	addq	%rbx, %rdi
0000000001047eaf	addq	%rbx, %rsi
0000000001047eb2	subq	%rbx, %rcx
0000000001047eb5	callq	_callRet
0000000001047eba	movq	0x20000000(%rsp), %rbp
0000000001047ec2	addq	$0x20000008, %rsp
0000000001047ec9	retq
0000000001047eca	callq	runtime.morestack_noctxt
0000000001047ecf	jmp	runtime.call536870912
0000000001047ed4	leaq	0x20000010(%rsp), %rdi
0000000001047edc	cmpq	%rdi, (%rbx)
0000000001047edf	jne	0x1047e6d
0000000001047ee1	movq	%rsp, (%rbx)
0000000001047ee4	jmp	0x1047e6d
0000000001047ee6	int3
0000000001047ee7	int3
0000000001047ee8	int3
0000000001047ee9	int3
0000000001047eea	int3
0000000001047eeb	int3
0000000001047eec	int3
0000000001047eed	int3
0000000001047eee	int3
0000000001047eef	int3
runtime.call1073741824:
0000000001047ef0	movq	%gs:0x30, %rcx
0000000001047ef9	movq	0x10(%rcx), %rsi
0000000001047efd	cmpq	$-0x522, %rsi
0000000001047f04	je	0x1047f9a
0000000001047f0a	leaq	0x370(%rsp), %rax
0000000001047f12	subq	%rsi, %rax
0000000001047f15	cmpq	$0x400002f8, %rax
0000000001047f1b	jbe	0x1047f9a
0000000001047f1d	subq	$0x40000008, %rsp
0000000001047f24	movq	%rbp, 0x40000000(%rsp)
0000000001047f2c	leaq	0x40000000(%rsp), %rbp
0000000001047f34	movq	0x20(%rcx), %rbx
0000000001047f38	testq	%rbx, %rbx
0000000001047f3b	jne	0x1047fa4
0000000001047f3d	movq	0x40000020(%rsp), %rsi
0000000001047f45	movl	0x40000028(%rsp), %ecx
0000000001047f4c	movq	%rsp, %rdi
0000000001047f4f	rep		movsb	(%rsi), %es:(%rdi)
0000000001047f51	movq	0x40000018(%rsp), %rdx
0000000001047f59	callq	*(%rdx)
0000000001047f5b	movq	0x40000010(%rsp), %rdx
0000000001047f63	movq	0x40000020(%rsp), %rdi
0000000001047f6b	movl	0x40000028(%rsp), %ecx
0000000001047f72	movl	0x4000002c(%rsp), %ebx
0000000001047f79	movq	%rsp, %rsi
0000000001047f7c	addq	%rbx, %rdi
0000000001047f7f	addq	%rbx, %rsi
0000000001047f82	subq	%rbx, %rcx
0000000001047f85	callq	_callRet
0000000001047f8a	movq	0x40000000(%rsp), %rbp
0000000001047f92	addq	$0x40000008, %rsp
0000000001047f99	retq
0000000001047f9a	callq	runtime.morestack_noctxt
0000000001047f9f	jmp	runtime.call1073741824
0000000001047fa4	leaq	0x40000010(%rsp), %rdi
0000000001047fac	cmpq	%rdi, (%rbx)
0000000001047faf	jne	0x1047f3d
0000000001047fb1	movq	%rsp, (%rbx)
0000000001047fb4	jmp	0x1047f3d
0000000001047fb6	int3
0000000001047fb7	int3
0000000001047fb8	int3
0000000001047fb9	int3
0000000001047fba	int3
0000000001047fbb	int3
0000000001047fbc	int3
0000000001047fbd	int3
0000000001047fbe	int3
0000000001047fbf	int3
runtime.procyield:
0000000001047fc0	movl	0x8(%rsp), %eax
0000000001047fc4	pause
0000000001047fc6	subl	$0x1, %eax
0000000001047fc9	jne	0x1047fc4
0000000001047fcb	retq
0000000001047fcc	int3
0000000001047fcd	int3
0000000001047fce	int3
0000000001047fcf	int3
runtime.publicationBarrier:
0000000001047fd0	retq
0000000001047fd1	int3
0000000001047fd2	int3
0000000001047fd3	int3
0000000001047fd4	int3
0000000001047fd5	int3
0000000001047fd6	int3
0000000001047fd7	int3
0000000001047fd8	int3
0000000001047fd9	int3
0000000001047fda	int3
0000000001047fdb	int3
0000000001047fdc	int3
0000000001047fdd	int3
0000000001047fde	int3
0000000001047fdf	int3
runtime.jmpdefer:
0000000001047fe0	movq	0x8(%rsp), %rdx
0000000001047fe5	movq	0x10(%rsp), %rbx
0000000001047fea	leaq	-0x8(%rbx), %rsp
0000000001047fee	movq	-0x8(%rsp), %rbp
0000000001047ff3	subq	$0x5, (%rsp)
0000000001047ff8	movq	(%rdx), %rbx
0000000001047ffb	jmpq	*%rbx
0000000001047ffd	int3
0000000001047ffe	int3
0000000001047fff	int3
_gosave:
0000000001048000	movq	%gs:0x30, %r8
0000000001048009	movq	(%rsp), %r9
000000000104800d	movq	%r9, 0x40(%r8)
0000000001048011	leaq	0x8(%rsp), %r9
0000000001048016	movq	%r9, 0x38(%r8)
000000000104801a	movq	$0x0, 0x58(%r8)
0000000001048022	movq	%rbp, 0x68(%r8)
0000000001048026	movq	0x50(%r8), %r9
000000000104802a	testq	%r9, %r9
000000000104802d	je	0x1048034
000000000104802f	callq	runtime.badctxt
0000000001048034	retq
0000000001048035	int3
0000000001048036	int3
0000000001048037	int3
0000000001048038	int3
0000000001048039	int3
000000000104803a	int3
000000000104803b	int3
000000000104803c	int3
000000000104803d	int3
000000000104803e	int3
000000000104803f	int3
runtime.asmcgocall:
0000000001048040	movq	0x8(%rsp), %rax
0000000001048045	movq	0x10(%rsp), %rbx
000000000104804a	movq	%rsp, %rdx
000000000104804d	movq	%gs:0x30, %r8
0000000001048056	cmpq	$0x0, %r8
000000000104805a	je	0x10480cf
000000000104805c	movq	0x30(%r8), %r8
0000000001048060	movq	(%r8), %rsi
0000000001048063	movq	%gs:0x30, %rdi
000000000104806c	cmpq	%rdi, %rsi
000000000104806f	je	0x10480cf
0000000001048071	movq	0x50(%r8), %rsi
0000000001048075	cmpq	%rdi, %rsi
0000000001048078	je	0x10480cf
000000000104807a	movq	(%r8), %rsi
000000000104807d	callq	_gosave
0000000001048082	movq	%rsi, %gs:0x30
000000000104808b	movq	0x38(%rsi), %rsp
000000000104808f	subq	$0x40, %rsp
0000000001048093	andq	$-0x10, %rsp
0000000001048097	movq	%rdi, 0x30(%rsp)
000000000104809c	movq	0x8(%rdi), %rdi
00000000010480a0	subq	%rdx, %rdi
00000000010480a3	movq	%rdi, 0x28(%rsp)
00000000010480a8	movq	%rbx, %rdi
00000000010480ab	movq	%rbx, %rcx
00000000010480ae	callq	*%rax
00000000010480b0	movq	0x30(%rsp), %rdi
00000000010480b5	movq	0x8(%rdi), %rsi
00000000010480b9	subq	0x28(%rsp), %rsi
00000000010480be	movq	%rdi, %gs:0x30
00000000010480c7	movq	%rsi, %rsp
00000000010480ca	movl	%eax, 0x18(%rsp)
00000000010480ce	retq
00000000010480cf	subq	$0x40, %rsp
00000000010480d3	andq	$-0x10, %rsp
00000000010480d7	movq	$0x0, 0x30(%rsp)
00000000010480e0	movq	%rdx, 0x28(%rsp)
00000000010480e5	movq	%rbx, %rdi
00000000010480e8	movq	%rbx, %rcx
00000000010480eb	callq	*%rax
00000000010480ed	movq	0x28(%rsp), %rsi
00000000010480f2	movq	%rsi, %rsp
00000000010480f5	movl	%eax, 0x18(%rsp)
00000000010480f9	retq
00000000010480fa	int3
00000000010480fb	int3
00000000010480fc	int3
00000000010480fd	int3
00000000010480fe	int3
00000000010480ff	int3
runtime.setg:
0000000001048100	movq	0x8(%rsp), %rbx
0000000001048105	movq	%rbx, %gs:0x30
000000000104810e	retq
000000000104810f	int3
_setg_gcc:
0000000001048110	movq	%rdi, %gs:0x30
0000000001048119	retq
000000000104811a	int3
000000000104811b	int3
000000000104811c	int3
000000000104811d	int3
000000000104811e	int3
000000000104811f	int3
runtime.abort:
0000000001048120	int	$0x3
0000000001048122	jmp	0x1048122
0000000001048124	int3
0000000001048125	int3
0000000001048126	int3
0000000001048127	int3
0000000001048128	int3
0000000001048129	int3
000000000104812a	int3
000000000104812b	int3
000000000104812c	int3
000000000104812d	int3
000000000104812e	int3
000000000104812f	int3
runtime.cputicks:
0000000001048130	cmpb	$0x1, runtime.islibrary(%rip)
0000000001048137	jne	0x104813e
0000000001048139	lfence
000000000104813c	jmp	0x1048141
000000000104813e	mfence
0000000001048141	rdtsc
0000000001048143	shlq	$0x20, %rdx
0000000001048147	addq	%rdx, %rax
000000000104814a	movq	%rax, 0x8(%rsp)
000000000104814f	retq
runtime.aeshash:
0000000001048150	movq	0x8(%rsp), %rax
0000000001048155	movq	0x18(%rsp), %rcx
000000000104815a	leaq	0x20(%rsp), %rdx
000000000104815f	jmp	runtime.aeshashbody
0000000001048164	int3
0000000001048165	int3
0000000001048166	int3
0000000001048167	int3
0000000001048168	int3
0000000001048169	int3
000000000104816a	int3
000000000104816b	int3
000000000104816c	int3
000000000104816d	int3
000000000104816e	int3
000000000104816f	int3
runtime.aeshashstr:
0000000001048170	movq	0x8(%rsp), %rax
0000000001048175	movq	0x8(%rax), %rcx
0000000001048179	movq	(%rax), %rax
000000000104817c	leaq	0x18(%rsp), %rdx
0000000001048181	jmp	runtime.aeshashbody
0000000001048186	int3
0000000001048187	int3
0000000001048188	int3
0000000001048189	int3
000000000104818a	int3
000000000104818b	int3
000000000104818c	int3
000000000104818d	int3
000000000104818e	int3
000000000104818f	int3
runtime.aeshashbody:
0000000001048190	movq	0x10(%rsp), %xmm0
0000000001048196	pinsrw	$0x4, %ecx, %xmm0
000000000104819b	pshufhw	$0x0, %xmm0, %xmm0
00000000010481a0	movdqa	%xmm0, %xmm1
00000000010481a4	pxor	0x8cbf4(%rip), %xmm0
00000000010481ac	aesenc	%xmm0, %xmm0
00000000010481b1	cmpq	$0x10, %rcx
00000000010481b5	jb	0x10481db
00000000010481b7	je	0x1048238
00000000010481b9	cmpq	$0x20, %rcx
00000000010481bd	jbe	0x104823e
00000000010481bf	cmpq	$0x40, %rcx
00000000010481c3	jbe	0x1048284
00000000010481c9	cmpq	$0x80, %rcx
00000000010481d0	jbe	0x1048325
00000000010481d6	jmp	0x10484ac
00000000010481db	testq	%rcx, %rcx
00000000010481de	je	0x104822e
00000000010481e0	addq	$0x10, %rax
00000000010481e4	testw	$0xff0, %ax
00000000010481e8	je	0x1048216
00000000010481ea	movdqu	-0x10(%rax), %xmm1
00000000010481ef	addq	%rcx, %rcx
00000000010481f2	leaq	_masks(%rip), %rax
00000000010481f9	pand	(%rax,%rcx,8), %xmm1
00000000010481fe	pxor	%xmm0, %xmm1
0000000001048202	aesenc	%xmm1, %xmm1
0000000001048207	aesenc	%xmm1, %xmm1
000000000104820c	aesenc	%xmm1, %xmm1
0000000001048211	movq	%xmm1, (%rdx)
0000000001048215	retq
0000000001048216	movdqu	-0x20(%rax,%rcx), %xmm1
000000000104821c	addq	%rcx, %rcx
000000000104821f	leaq	_shifts(%rip), %rax
0000000001048226	pshufb	(%rax,%rcx,8), %xmm1
000000000104822c	jmp	0x10481fe
000000000104822e	aesenc	%xmm0, %xmm0
0000000001048233	movq	%xmm0, (%rdx)
0000000001048237	retq
0000000001048238	movdqu	(%rax), %xmm1
000000000104823c	jmp	0x10481fe
000000000104823e	pxor	0x8cb6a(%rip), %xmm1
0000000001048246	aesenc	%xmm1, %xmm1
000000000104824b	movdqu	(%rax), %xmm2
000000000104824f	movdqu	-0x10(%rax,%rcx), %xmm3
0000000001048255	pxor	%xmm0, %xmm2
0000000001048259	pxor	%xmm1, %xmm3
000000000104825d	aesenc	%xmm2, %xmm2
0000000001048262	aesenc	%xmm3, %xmm3
0000000001048267	aesenc	%xmm2, %xmm2
000000000104826c	aesenc	%xmm3, %xmm3
0000000001048271	aesenc	%xmm2, %xmm2
0000000001048276	aesenc	%xmm3, %xmm3
000000000104827b	pxor	%xmm3, %xmm2
000000000104827f	movq	%xmm2, (%rdx)
0000000001048283	retq
0000000001048284	movdqa	%xmm1, %xmm2
0000000001048288	movdqa	%xmm1, %xmm3
000000000104828c	pxor	0x8cb1c(%rip), %xmm1
0000000001048294	pxor	0x8cb24(%rip), %xmm2
000000000104829c	pxor	0x8cb2c(%rip), %xmm3
00000000010482a4	aesenc	%xmm1, %xmm1
00000000010482a9	aesenc	%xmm2, %xmm2
00000000010482ae	aesenc	%xmm3, %xmm3
00000000010482b3	movdqu	(%rax), %xmm4
00000000010482b7	movdqu	0x10(%rax), %xmm5
00000000010482bc	movdqu	-0x20(%rax,%rcx), %xmm6
00000000010482c2	movdqu	-0x10(%rax,%rcx), %xmm7
00000000010482c8	pxor	%xmm0, %xmm4
00000000010482cc	pxor	%xmm1, %xmm5
00000000010482d0	pxor	%xmm2, %xmm6
00000000010482d4	pxor	%xmm3, %xmm7
00000000010482d8	aesenc	%xmm4, %xmm4
00000000010482dd	aesenc	%xmm5, %xmm5
00000000010482e2	aesenc	%xmm6, %xmm6
00000000010482e7	aesenc	%xmm7, %xmm7
00000000010482ec	aesenc	%xmm4, %xmm4
00000000010482f1	aesenc	%xmm5, %xmm5
00000000010482f6	aesenc	%xmm6, %xmm6
00000000010482fb	aesenc	%xmm7, %xmm7
0000000001048300	aesenc	%xmm4, %xmm4
0000000001048305	aesenc	%xmm5, %xmm5
000000000104830a	aesenc	%xmm6, %xmm6
000000000104830f	aesenc	%xmm7, %xmm7
0000000001048314	pxor	%xmm6, %xmm4
0000000001048318	pxor	%xmm7, %xmm5
000000000104831c	pxor	%xmm5, %xmm4
0000000001048320	movq	%xmm4, (%rdx)
0000000001048324	retq
0000000001048325	movdqa	%xmm1, %xmm2
0000000001048329	movdqa	%xmm1, %xmm3
000000000104832d	movdqa	%xmm1, %xmm4
0000000001048331	movdqa	%xmm1, %xmm5
0000000001048335	movdqa	%xmm1, %xmm6
0000000001048339	movdqa	%xmm1, %xmm7
000000000104833d	pxor	0x8ca6b(%rip), %xmm1
0000000001048345	pxor	0x8ca73(%rip), %xmm2
000000000104834d	pxor	0x8ca7b(%rip), %xmm3
0000000001048355	pxor	0x8ca83(%rip), %xmm4
000000000104835d	pxor	0x8ca8b(%rip), %xmm5
0000000001048365	pxor	0x8ca93(%rip), %xmm6
000000000104836d	pxor	0x8ca9b(%rip), %xmm7
0000000001048375	aesenc	%xmm1, %xmm1
000000000104837a	aesenc	%xmm2, %xmm2
000000000104837f	aesenc	%xmm3, %xmm3
0000000001048384	aesenc	%xmm4, %xmm4
0000000001048389	aesenc	%xmm5, %xmm5
000000000104838e	aesenc	%xmm6, %xmm6
0000000001048393	aesenc	%xmm7, %xmm7
0000000001048398	movdqu	(%rax), %xmm8
000000000104839d	movdqu	0x10(%rax), %xmm9
00000000010483a3	movdqu	0x20(%rax), %xmm10
00000000010483a9	movdqu	0x30(%rax), %xmm11
00000000010483af	movdqu	-0x40(%rax,%rcx), %xmm12
00000000010483b6	movdqu	-0x30(%rax,%rcx), %xmm13
00000000010483bd	movdqu	-0x20(%rax,%rcx), %xmm14
00000000010483c4	movdqu	-0x10(%rax,%rcx), %xmm15
00000000010483cb	pxor	%xmm0, %xmm8
00000000010483d0	pxor	%xmm1, %xmm9
00000000010483d5	pxor	%xmm2, %xmm10
00000000010483da	pxor	%xmm3, %xmm11
00000000010483df	pxor	%xmm4, %xmm12
00000000010483e4	pxor	%xmm5, %xmm13
00000000010483e9	pxor	%xmm6, %xmm14
00000000010483ee	pxor	%xmm7, %xmm15
00000000010483f3	aesenc	%xmm8, %xmm8
00000000010483f9	aesenc	%xmm9, %xmm9
00000000010483ff	aesenc	%xmm10, %xmm10
0000000001048405	aesenc	%xmm11, %xmm11
000000000104840b	aesenc	%xmm12, %xmm12
0000000001048411	aesenc	%xmm13, %xmm13
0000000001048417	aesenc	%xmm14, %xmm14
000000000104841d	aesenc	%xmm15, %xmm15
0000000001048423	aesenc	%xmm8, %xmm8
0000000001048429	aesenc	%xmm9, %xmm9
000000000104842f	aesenc	%xmm10, %xmm10
0000000001048435	aesenc	%xmm11, %xmm11
000000000104843b	aesenc	%xmm12, %xmm12
0000000001048441	aesenc	%xmm13, %xmm13
0000000001048447	aesenc	%xmm14, %xmm14
000000000104844d	aesenc	%xmm15, %xmm15
0000000001048453	aesenc	%xmm8, %xmm8
0000000001048459	aesenc	%xmm9, %xmm9
000000000104845f	aesenc	%xmm10, %xmm10
0000000001048465	aesenc	%xmm11, %xmm11
000000000104846b	aesenc	%xmm12, %xmm12
0000000001048471	aesenc	%xmm13, %xmm13
0000000001048477	aesenc	%xmm14, %xmm14
000000000104847d	aesenc	%xmm15, %xmm15
0000000001048483	pxor	%xmm12, %xmm8
0000000001048488	pxor	%xmm13, %xmm9
000000000104848d	pxor	%xmm14, %xmm10
0000000001048492	pxor	%xmm15, %xmm11
0000000001048497	pxor	%xmm10, %xmm8
000000000104849c	pxor	%xmm11, %xmm9
00000000010484a1	pxor	%xmm9, %xmm8
00000000010484a6	movq	%xmm8, (%rdx)
00000000010484ab	retq
00000000010484ac	movdqa	%xmm1, %xmm2
00000000010484b0	movdqa	%xmm1, %xmm3
00000000010484b4	movdqa	%xmm1, %xmm4
00000000010484b8	movdqa	%xmm1, %xmm5
00000000010484bc	movdqa	%xmm1, %xmm6
00000000010484c0	movdqa	%xmm1, %xmm7
00000000010484c4	pxor	0x8c8e4(%rip), %xmm1
00000000010484cc	pxor	0x8c8ec(%rip), %xmm2
00000000010484d4	pxor	0x8c8f4(%rip), %xmm3
00000000010484dc	pxor	0x8c8fc(%rip), %xmm4
00000000010484e4	pxor	0x8c904(%rip), %xmm5
00000000010484ec	pxor	0x8c90c(%rip), %xmm6
00000000010484f4	pxor	0x8c914(%rip), %xmm7
00000000010484fc	aesenc	%xmm1, %xmm1
0000000001048501	aesenc	%xmm2, %xmm2
0000000001048506	aesenc	%xmm3, %xmm3
000000000104850b	aesenc	%xmm4, %xmm4
0000000001048510	aesenc	%xmm5, %xmm5
0000000001048515	aesenc	%xmm6, %xmm6
000000000104851a	aesenc	%xmm7, %xmm7
000000000104851f	movdqu	-0x80(%rax,%rcx), %xmm8
0000000001048526	movdqu	-0x70(%rax,%rcx), %xmm9
000000000104852d	movdqu	-0x60(%rax,%rcx), %xmm10
0000000001048534	movdqu	-0x50(%rax,%rcx), %xmm11
000000000104853b	movdqu	-0x40(%rax,%rcx), %xmm12
0000000001048542	movdqu	-0x30(%rax,%rcx), %xmm13
0000000001048549	movdqu	-0x20(%rax,%rcx), %xmm14
0000000001048550	movdqu	-0x10(%rax,%rcx), %xmm15
0000000001048557	pxor	%xmm0, %xmm8
000000000104855c	pxor	%xmm1, %xmm9
0000000001048561	pxor	%xmm2, %xmm10
0000000001048566	pxor	%xmm3, %xmm11
000000000104856b	pxor	%xmm4, %xmm12
0000000001048570	pxor	%xmm5, %xmm13
0000000001048575	pxor	%xmm6, %xmm14
000000000104857a	pxor	%xmm7, %xmm15
000000000104857f	decq	%rcx
0000000001048582	shrq	$0x7, %rcx
0000000001048586	aesenc	%xmm8, %xmm8
000000000104858c	aesenc	%xmm9, %xmm9
0000000001048592	aesenc	%xmm10, %xmm10
0000000001048598	aesenc	%xmm11, %xmm11
000000000104859e	aesenc	%xmm12, %xmm12
00000000010485a4	aesenc	%xmm13, %xmm13
00000000010485aa	aesenc	%xmm14, %xmm14
00000000010485b0	aesenc	%xmm15, %xmm15
00000000010485b6	movdqu	(%rax), %xmm0
00000000010485ba	movdqu	0x10(%rax), %xmm1
00000000010485bf	movdqu	0x20(%rax), %xmm2
00000000010485c4	movdqu	0x30(%rax), %xmm3
00000000010485c9	aesenc	%xmm0, %xmm8
00000000010485cf	aesenc	%xmm1, %xmm9
00000000010485d5	aesenc	%xmm2, %xmm10
00000000010485db	aesenc	%xmm3, %xmm11
00000000010485e1	movdqu	0x40(%rax), %xmm4
00000000010485e6	movdqu	0x50(%rax), %xmm5
00000000010485eb	movdqu	0x60(%rax), %xmm6
00000000010485f0	movdqu	0x70(%rax), %xmm7
00000000010485f5	aesenc	%xmm4, %xmm12
00000000010485fb	aesenc	%xmm5, %xmm13
0000000001048601	aesenc	%xmm6, %xmm14
0000000001048607	aesenc	%xmm7, %xmm15
000000000104860d	addq	$0x80, %rax
0000000001048613	decq	%rcx
0000000001048616	jne	0x1048586
000000000104861c	aesenc	%xmm8, %xmm8
0000000001048622	aesenc	%xmm9, %xmm9
0000000001048628	aesenc	%xmm10, %xmm10
000000000104862e	aesenc	%xmm11, %xmm11
0000000001048634	aesenc	%xmm12, %xmm12
000000000104863a	aesenc	%xmm13, %xmm13
0000000001048640	aesenc	%xmm14, %xmm14
0000000001048646	aesenc	%xmm15, %xmm15
000000000104864c	aesenc	%xmm8, %xmm8
0000000001048652	aesenc	%xmm9, %xmm9
0000000001048658	aesenc	%xmm10, %xmm10
000000000104865e	aesenc	%xmm11, %xmm11
0000000001048664	aesenc	%xmm12, %xmm12
000000000104866a	aesenc	%xmm13, %xmm13
0000000001048670	aesenc	%xmm14, %xmm14
0000000001048676	aesenc	%xmm15, %xmm15
000000000104867c	aesenc	%xmm8, %xmm8
0000000001048682	aesenc	%xmm9, %xmm9
0000000001048688	aesenc	%xmm10, %xmm10
000000000104868e	aesenc	%xmm11, %xmm11
0000000001048694	aesenc	%xmm12, %xmm12
000000000104869a	aesenc	%xmm13, %xmm13
00000000010486a0	aesenc	%xmm14, %xmm14
00000000010486a6	aesenc	%xmm15, %xmm15
00000000010486ac	pxor	%xmm12, %xmm8
00000000010486b1	pxor	%xmm13, %xmm9
00000000010486b6	pxor	%xmm14, %xmm10
00000000010486bb	pxor	%xmm15, %xmm11
00000000010486c0	pxor	%xmm10, %xmm8
00000000010486c5	pxor	%xmm11, %xmm9
00000000010486ca	pxor	%xmm9, %xmm8
00000000010486cf	movq	%xmm8, (%rdx)
00000000010486d4	retq
00000000010486d5	int3
00000000010486d6	int3
00000000010486d7	int3
00000000010486d8	int3
00000000010486d9	int3
00000000010486da	int3
00000000010486db	int3
00000000010486dc	int3
00000000010486dd	int3
00000000010486de	int3
00000000010486df	int3
runtime.aeshash32:
00000000010486e0	movq	0x8(%rsp), %rax
00000000010486e5	movq	0x10(%rsp), %xmm0
00000000010486eb	pinsrd	$0x2, (%rax), %xmm0
00000000010486f1	aesenc	0x8c6a6(%rip), %xmm0
00000000010486fa	aesenc	0x8c6ad(%rip), %xmm0
0000000001048703	aesenc	0x8c6b4(%rip), %xmm0
000000000104870c	movq	%xmm0, 0x18(%rsp)
0000000001048712	retq
0000000001048713	int3
0000000001048714	int3
0000000001048715	int3
0000000001048716	int3
0000000001048717	int3
0000000001048718	int3
0000000001048719	int3
000000000104871a	int3
000000000104871b	int3
000000000104871c	int3
000000000104871d	int3
000000000104871e	int3
000000000104871f	int3
runtime.aeshash64:
0000000001048720	movq	0x8(%rsp), %rax
0000000001048725	movq	0x10(%rsp), %xmm0
000000000104872b	pinsrq	$0x1, (%rax), %xmm0
0000000001048732	aesenc	0x8c665(%rip), %xmm0
000000000104873b	aesenc	0x8c66c(%rip), %xmm0
0000000001048744	aesenc	0x8c673(%rip), %xmm0
000000000104874d	movq	%xmm0, 0x18(%rsp)
0000000001048753	retq
0000000001048754	int3
0000000001048755	int3
0000000001048756	int3
0000000001048757	int3
0000000001048758	int3
0000000001048759	int3
000000000104875a	int3
000000000104875b	int3
000000000104875c	int3
000000000104875d	int3
000000000104875e	int3
000000000104875f	int3
runtime.checkASM:
0000000001048760	leaq	_masks(%rip), %rax
0000000001048767	leaq	_shifts(%rip), %rbx
000000000104876e	orq	%rbx, %rax
0000000001048771	testq	$0xf, %rax
0000000001048777	sete	0x8(%rsp)
000000000104877c	retq
000000000104877d	int3
000000000104877e	int3
000000000104877f	int3
runtime.return0:
0000000001048780	movl	$0x0, %eax
0000000001048785	retq
0000000001048786	int3
0000000001048787	int3
0000000001048788	int3
0000000001048789	int3
000000000104878a	int3
000000000104878b	int3
000000000104878c	int3
000000000104878d	int3
000000000104878e	int3
000000000104878f	int3
runtime.goexit:
0000000001048790	nop
0000000001048791	callq	runtime.goexit1
0000000001048796	nop
0000000001048797	int3
0000000001048798	int3
0000000001048799	int3
000000000104879a	int3
000000000104879b	int3
000000000104879c	int3
000000000104879d	int3
000000000104879e	int3
000000000104879f	int3
runtime.gcWriteBarrier:
00000000010487a0	subq	$0x80, %rsp
00000000010487a7	movq	%rbp, 0x78(%rsp)
00000000010487ac	leaq	0x78(%rsp), %rbp
00000000010487b1	movq	%r14, 0x68(%rsp)
00000000010487b6	movq	%r13, 0x70(%rsp)
00000000010487bb	movq	%gs:0x30, %r13
00000000010487c4	movq	0x30(%r13), %r13
00000000010487c8	movq	0xd0(%r13), %r13
00000000010487cf	movq	0x1290(%r13), %r14
00000000010487d6	leaq	0x10(%r14), %r14
00000000010487da	movq	%r14, 0x1290(%r13)
00000000010487e1	cmpq	0x1298(%r13), %r14
00000000010487e8	movq	%rax, -0x10(%r14)
00000000010487ec	movq	(%rdi), %r13
00000000010487ef	movq	%r13, -0x8(%r14)
00000000010487f3	je	0x104880f
00000000010487f5	movq	0x68(%rsp), %r14
00000000010487fa	movq	0x70(%rsp), %r13
00000000010487ff	movq	%rax, (%rdi)
0000000001048802	movq	0x78(%rsp), %rbp
0000000001048807	addq	$0x80, %rsp
000000000104880e	retq
000000000104880f	movq	%rdi, (%rsp)
0000000001048813	movq	%rax, 0x8(%rsp)
0000000001048818	movq	%rbx, 0x10(%rsp)
000000000104881d	movq	%rcx, 0x18(%rsp)
0000000001048822	movq	%rdx, 0x20(%rsp)
0000000001048827	movq	%rsi, 0x28(%rsp)
000000000104882c	movq	%rbp, 0x30(%rsp)
0000000001048831	movq	%r8, 0x38(%rsp)
0000000001048836	movq	%r9, 0x40(%rsp)
000000000104883b	movq	%r10, 0x48(%rsp)
0000000001048840	movq	%r11, 0x50(%rsp)
0000000001048845	movq	%r12, 0x58(%rsp)
000000000104884a	movq	%r15, 0x60(%rsp)
000000000104884f	callq	runtime.wbBufFlush
0000000001048854	movq	(%rsp), %rdi
0000000001048858	movq	0x8(%rsp), %rax
000000000104885d	movq	0x10(%rsp), %rbx
0000000001048862	movq	0x18(%rsp), %rcx
0000000001048867	movq	0x20(%rsp), %rdx
000000000104886c	movq	0x28(%rsp), %rsi
0000000001048871	movq	0x30(%rsp), %rbp
0000000001048876	movq	0x38(%rsp), %r8
000000000104887b	movq	0x40(%rsp), %r9
0000000001048880	movq	0x48(%rsp), %r10
0000000001048885	movq	0x50(%rsp), %r11
000000000104888a	movq	0x58(%rsp), %r12
000000000104888f	movq	0x60(%rsp), %r15
0000000001048894	jmp	0x10487f5
0000000001048899	int3
000000000104889a	int3
000000000104889b	int3
000000000104889c	int3
000000000104889d	int3
000000000104889e	int3
000000000104889f	int3
runtime.debugCallV1:
00000000010488a0	subq	$0xa0, %rsp
00000000010488a7	movq	%rbp, 0x98(%rsp)
00000000010488af	leaq	0x98(%rsp), %rbp
00000000010488b7	movq	%r15, 0x20(%rsp)
00000000010488bc	movq	%r14, 0x28(%rsp)
00000000010488c1	movq	%r13, 0x30(%rsp)
00000000010488c6	movq	%r12, 0x38(%rsp)
00000000010488cb	movq	%r11, 0x40(%rsp)
00000000010488d0	movq	%r10, 0x48(%rsp)
00000000010488d5	movq	%r9, 0x50(%rsp)
00000000010488da	movq	%r8, 0x58(%rsp)
00000000010488df	movq	%rdi, 0x60(%rsp)
00000000010488e4	movq	%rsi, 0x68(%rsp)
00000000010488e9	movq	%rbp, 0x70(%rsp)
00000000010488ee	movq	%rbx, 0x78(%rsp)
00000000010488f3	movq	%rdx, 0x80(%rsp)
00000000010488fb	movq	0x90(%rsp), %rdx
0000000001048903	movq	%rcx, 0x88(%rsp)
000000000104890b	movq	%rax, 0x90(%rsp)
0000000001048913	movq	%rdx, 0x18(%rsp)
0000000001048918	movq	0xa0(%rsp), %rax
0000000001048920	movq	%rax, (%rsp)
0000000001048924	callq	runtime.debugCallCheck
0000000001048929	movq	0x8(%rsp), %rax
000000000104892e	testq	%rax, %rax
0000000001048931	je	0x104894e
0000000001048933	movq	%rax, (%rsp)
0000000001048937	movq	0x10(%rsp), %rax
000000000104893c	movq	%rax, 0x8(%rsp)
0000000001048941	movq	$0x8, %rax
0000000001048948	int3
0000000001048949	jmp	0x1048abd
000000000104894e	movq	0x18(%rsp), %rax
0000000001048953	cmpq	$0x20, %rax
0000000001048957	ja	0x104896e
0000000001048959	leaq	_debugCall32(%rip), %rax
0000000001048960	movq	%rax, (%rsp)
0000000001048964	callq	runtime.debugCallWrap
0000000001048969	jmp	0x1048abd
000000000104896e	cmpq	$0x40, %rax
0000000001048972	ja	0x1048989
0000000001048974	leaq	_debugCall64(%rip), %rax
000000000104897b	movq	%rax, (%rsp)
000000000104897f	callq	runtime.debugCallWrap
0000000001048984	jmp	0x1048abd
0000000001048989	cmpq	$0x80, %rax
000000000104898f	ja	0x10489a6
0000000001048991	leaq	_debugCall128(%rip), %rax
0000000001048998	movq	%rax, (%rsp)
000000000104899c	callq	runtime.debugCallWrap
00000000010489a1	jmp	0x1048abd
00000000010489a6	cmpq	$0x100, %rax
00000000010489ac	ja	0x10489c3
00000000010489ae	leaq	_debugCall256(%rip), %rax
00000000010489b5	movq	%rax, (%rsp)
00000000010489b9	callq	runtime.debugCallWrap
00000000010489be	jmp	0x1048abd
00000000010489c3	cmpq	$0x200, %rax
00000000010489c9	ja	0x10489e0
00000000010489cb	leaq	_debugCall512(%rip), %rax
00000000010489d2	movq	%rax, (%rsp)
00000000010489d6	callq	runtime.debugCallWrap
00000000010489db	jmp	0x1048abd
00000000010489e0	cmpq	$0x400, %rax
00000000010489e6	ja	0x10489fd
00000000010489e8	leaq	_debugCall1024(%rip), %rax
00000000010489ef	movq	%rax, (%rsp)
00000000010489f3	callq	runtime.debugCallWrap
00000000010489f8	jmp	0x1048abd
00000000010489fd	cmpq	$0x800, %rax
0000000001048a03	ja	0x1048a1a
0000000001048a05	leaq	_debugCall2048(%rip), %rax
0000000001048a0c	movq	%rax, (%rsp)
0000000001048a10	callq	runtime.debugCallWrap
0000000001048a15	jmp	0x1048abd
0000000001048a1a	cmpq	$0x1000, %rax
0000000001048a20	ja	0x1048a37
0000000001048a22	leaq	_debugCall4096(%rip), %rax
0000000001048a29	movq	%rax, (%rsp)
0000000001048a2d	callq	runtime.debugCallWrap
0000000001048a32	jmp	0x1048abd
0000000001048a37	cmpq	$0x2000, %rax
0000000001048a3d	ja	0x1048a51
0000000001048a3f	leaq	_debugCall8192(%rip), %rax
0000000001048a46	movq	%rax, (%rsp)
0000000001048a4a	callq	runtime.debugCallWrap
0000000001048a4f	jmp	0x1048abd
0000000001048a51	cmpq	$0x4000, %rax
0000000001048a57	ja	0x1048a6b
0000000001048a59	leaq	_debugCall16384(%rip), %rax
0000000001048a60	movq	%rax, (%rsp)
0000000001048a64	callq	runtime.debugCallWrap
0000000001048a69	jmp	0x1048abd
0000000001048a6b	cmpq	$0x8000, %rax
0000000001048a71	ja	0x1048a85
0000000001048a73	leaq	_debugCall32768(%rip), %rax
0000000001048a7a	movq	%rax, (%rsp)
0000000001048a7e	callq	runtime.debugCallWrap
0000000001048a83	jmp	0x1048abd
0000000001048a85	cmpq	$0x10000, %rax
0000000001048a8b	ja	0x1048a9f
0000000001048a8d	leaq	_debugCall65536(%rip), %rax
0000000001048a94	movq	%rax, (%rsp)
0000000001048a98	callq	runtime.debugCallWrap
0000000001048a9d	jmp	0x1048abd
0000000001048a9f	leaq	_debugCallFrameTooLarge(%rip), %rax
0000000001048aa6	movq	%rax, (%rsp)
0000000001048aaa	movq	$0x14, 0x8(%rsp)
0000000001048ab3	movq	$0x8, %rax
0000000001048aba	int3
0000000001048abb	jmp	0x1048abd
0000000001048abd	movq	$0x10, %rax
0000000001048ac4	int3
0000000001048ac5	movq	0x90(%rsp), %rax
0000000001048acd	movq	0x88(%rsp), %rcx
0000000001048ad5	movq	0x80(%rsp), %rdx
0000000001048add	movq	0x78(%rsp), %rbx
0000000001048ae2	movq	0x70(%rsp), %rbp
0000000001048ae7	movq	0x68(%rsp), %rsi
0000000001048aec	movq	0x60(%rsp), %rdi
0000000001048af1	movq	0x58(%rsp), %r8
0000000001048af6	movq	0x50(%rsp), %r9
0000000001048afb	movq	0x48(%rsp), %r10
0000000001048b00	movq	0x40(%rsp), %r11
0000000001048b05	movq	0x38(%rsp), %r12
0000000001048b0a	movq	0x30(%rsp), %r13
0000000001048b0f	movq	0x28(%rsp), %r14
0000000001048b14	movq	0x20(%rsp), %r15
0000000001048b19	movq	0x98(%rsp), %rbp
0000000001048b21	addq	$0xa0, %rsp
0000000001048b28	retq
0000000001048b29	int3
0000000001048b2a	int3
0000000001048b2b	int3
0000000001048b2c	int3
0000000001048b2d	int3
0000000001048b2e	int3
0000000001048b2f	int3
_debugCall32:
0000000001048b30	movq	%gs:0x30, %rcx
0000000001048b39	subq	$0x28, %rsp
0000000001048b3d	movq	%rbp, 0x20(%rsp)
0000000001048b42	leaq	0x20(%rsp), %rbp
0000000001048b47	movq	0x20(%rcx), %rbx
0000000001048b4b	testq	%rbx, %rbx
0000000001048b4e	jne	0x1048b6a
0000000001048b50	movq	$0x0, %rax
0000000001048b57	int3
0000000001048b58	movq	$0x1, %rax
0000000001048b5f	int3
0000000001048b60	movq	0x20(%rsp), %rbp
0000000001048b65	addq	$0x28, %rsp
0000000001048b69	retq
0000000001048b6a	leaq	0x30(%rsp), %rdi
0000000001048b6f	cmpq	%rdi, (%rbx)
0000000001048b72	jne	0x1048b50
0000000001048b74	movq	%rsp, (%rbx)
0000000001048b77	jmp	0x1048b50
0000000001048b79	int3
0000000001048b7a	int3
0000000001048b7b	int3
0000000001048b7c	int3
0000000001048b7d	int3
0000000001048b7e	int3
0000000001048b7f	int3
_debugCall64:
0000000001048b80	movq	%gs:0x30, %rcx
0000000001048b89	subq	$0x48, %rsp
0000000001048b8d	movq	%rbp, 0x40(%rsp)
0000000001048b92	leaq	0x40(%rsp), %rbp
0000000001048b97	movq	0x20(%rcx), %rbx
0000000001048b9b	testq	%rbx, %rbx
0000000001048b9e	jne	0x1048bba
0000000001048ba0	movq	$0x0, %rax
0000000001048ba7	int3
0000000001048ba8	movq	$0x1, %rax
0000000001048baf	int3
0000000001048bb0	movq	0x40(%rsp), %rbp
0000000001048bb5	addq	$0x48, %rsp
0000000001048bb9	retq
0000000001048bba	leaq	0x50(%rsp), %rdi
0000000001048bbf	cmpq	%rdi, (%rbx)
0000000001048bc2	jne	0x1048ba0
0000000001048bc4	movq	%rsp, (%rbx)
0000000001048bc7	jmp	0x1048ba0
0000000001048bc9	int3
0000000001048bca	int3
0000000001048bcb	int3
0000000001048bcc	int3
0000000001048bcd	int3
0000000001048bce	int3
0000000001048bcf	int3
_debugCall128:
0000000001048bd0	movq	%gs:0x30, %rcx
0000000001048bd9	leaq	-0x8(%rsp), %rax
0000000001048bde	cmpq	0x10(%rcx), %rax
0000000001048be2	jbe	0x1048c24
0000000001048be4	subq	$0x88, %rsp
0000000001048beb	movq	%rbp, 0x80(%rsp)
0000000001048bf3	leaq	0x80(%rsp), %rbp
0000000001048bfb	movq	0x20(%rcx), %rbx
0000000001048bff	testq	%rbx, %rbx
0000000001048c02	jne	0x1048c2b
0000000001048c04	movq	$0x0, %rax
0000000001048c0b	int3
0000000001048c0c	movq	$0x1, %rax
0000000001048c13	int3
0000000001048c14	movq	0x80(%rsp), %rbp
0000000001048c1c	addq	$0x88, %rsp
0000000001048c23	retq
0000000001048c24	callq	runtime.morestack_noctxt
0000000001048c29	jmp	_debugCall128
0000000001048c2b	leaq	0x90(%rsp), %rdi
0000000001048c33	cmpq	%rdi, (%rbx)
0000000001048c36	jne	0x1048c04
0000000001048c38	movq	%rsp, (%rbx)
0000000001048c3b	jmp	0x1048c04
0000000001048c3d	int3
0000000001048c3e	int3
0000000001048c3f	int3
_debugCall256:
0000000001048c40	movq	%gs:0x30, %rcx
0000000001048c49	leaq	-0x88(%rsp), %rax
0000000001048c51	cmpq	0x10(%rcx), %rax
0000000001048c55	jbe	0x1048c97
0000000001048c57	subq	$0x108, %rsp
0000000001048c5e	movq	%rbp, 0x100(%rsp)
0000000001048c66	leaq	0x100(%rsp), %rbp
0000000001048c6e	movq	0x20(%rcx), %rbx
0000000001048c72	testq	%rbx, %rbx
0000000001048c75	jne	0x1048c9e
0000000001048c77	movq	$0x0, %rax
0000000001048c7e	int3
0000000001048c7f	movq	$0x1, %rax
0000000001048c86	int3
0000000001048c87	movq	0x100(%rsp), %rbp
0000000001048c8f	addq	$0x108, %rsp
0000000001048c96	retq
0000000001048c97	callq	runtime.morestack_noctxt
0000000001048c9c	jmp	_debugCall256
0000000001048c9e	leaq	0x110(%rsp), %rdi
0000000001048ca6	cmpq	%rdi, (%rbx)
0000000001048ca9	jne	0x1048c77
0000000001048cab	movq	%rsp, (%rbx)
0000000001048cae	jmp	0x1048c77
_debugCall512:
0000000001048cb0	movq	%gs:0x30, %rcx
0000000001048cb9	leaq	-0x188(%rsp), %rax
0000000001048cc1	cmpq	0x10(%rcx), %rax
0000000001048cc5	jbe	0x1048d07
0000000001048cc7	subq	$0x208, %rsp
0000000001048cce	movq	%rbp, 0x200(%rsp)
0000000001048cd6	leaq	0x200(%rsp), %rbp
0000000001048cde	movq	0x20(%rcx), %rbx
0000000001048ce2	testq	%rbx, %rbx
0000000001048ce5	jne	0x1048d0e
0000000001048ce7	movq	$0x0, %rax
0000000001048cee	int3
0000000001048cef	movq	$0x1, %rax
0000000001048cf6	int3
0000000001048cf7	movq	0x200(%rsp), %rbp
0000000001048cff	addq	$0x208, %rsp
0000000001048d06	retq
0000000001048d07	callq	runtime.morestack_noctxt
0000000001048d0c	jmp	_debugCall512
0000000001048d0e	leaq	0x210(%rsp), %rdi
0000000001048d16	cmpq	%rdi, (%rbx)
0000000001048d19	jne	0x1048ce7
0000000001048d1b	movq	%rsp, (%rbx)
0000000001048d1e	jmp	0x1048ce7
_debugCall1024:
0000000001048d20	movq	%gs:0x30, %rcx
0000000001048d29	leaq	-0x388(%rsp), %rax
0000000001048d31	cmpq	0x10(%rcx), %rax
0000000001048d35	jbe	0x1048d77
0000000001048d37	subq	$0x408, %rsp
0000000001048d3e	movq	%rbp, 0x400(%rsp)
0000000001048d46	leaq	0x400(%rsp), %rbp
0000000001048d4e	movq	0x20(%rcx), %rbx
0000000001048d52	testq	%rbx, %rbx
0000000001048d55	jne	0x1048d7e
0000000001048d57	movq	$0x0, %rax
0000000001048d5e	int3
0000000001048d5f	movq	$0x1, %rax
0000000001048d66	int3
0000000001048d67	movq	0x400(%rsp), %rbp
0000000001048d6f	addq	$0x408, %rsp
0000000001048d76	retq
0000000001048d77	callq	runtime.morestack_noctxt
0000000001048d7c	jmp	_debugCall1024
0000000001048d7e	leaq	0x410(%rsp), %rdi
0000000001048d86	cmpq	%rdi, (%rbx)
0000000001048d89	jne	0x1048d57
0000000001048d8b	movq	%rsp, (%rbx)
0000000001048d8e	jmp	0x1048d57
_debugCall2048:
0000000001048d90	movq	%gs:0x30, %rcx
0000000001048d99	leaq	-0x788(%rsp), %rax
0000000001048da1	cmpq	0x10(%rcx), %rax
0000000001048da5	jbe	0x1048de7
0000000001048da7	subq	$0x808, %rsp
0000000001048dae	movq	%rbp, 0x800(%rsp)
0000000001048db6	leaq	0x800(%rsp), %rbp
0000000001048dbe	movq	0x20(%rcx), %rbx
0000000001048dc2	testq	%rbx, %rbx
0000000001048dc5	jne	0x1048dee
0000000001048dc7	movq	$0x0, %rax
0000000001048dce	int3
0000000001048dcf	movq	$0x1, %rax
0000000001048dd6	int3
0000000001048dd7	movq	0x800(%rsp), %rbp
0000000001048ddf	addq	$0x808, %rsp
0000000001048de6	retq
0000000001048de7	callq	runtime.morestack_noctxt
0000000001048dec	jmp	_debugCall2048
0000000001048dee	leaq	0x810(%rsp), %rdi
0000000001048df6	cmpq	%rdi, (%rbx)
0000000001048df9	jne	0x1048dc7
0000000001048dfb	movq	%rsp, (%rbx)
0000000001048dfe	jmp	0x1048dc7
_debugCall4096:
0000000001048e00	movq	%gs:0x30, %rcx
0000000001048e09	movq	0x10(%rcx), %rsi
0000000001048e0d	cmpq	$-0x522, %rsi
0000000001048e14	je	0x1048e69
0000000001048e16	leaq	0x370(%rsp), %rax
0000000001048e1e	subq	%rsi, %rax
0000000001048e21	cmpq	$0x12f8, %rax
0000000001048e27	jbe	0x1048e69
0000000001048e29	subq	$0x1008, %rsp
0000000001048e30	movq	%rbp, 0x1000(%rsp)
0000000001048e38	leaq	0x1000(%rsp), %rbp
0000000001048e40	movq	0x20(%rcx), %rbx
0000000001048e44	testq	%rbx, %rbx
0000000001048e47	jne	0x1048e70
0000000001048e49	movq	$0x0, %rax
0000000001048e50	int3
0000000001048e51	movq	$0x1, %rax
0000000001048e58	int3
0000000001048e59	movq	0x1000(%rsp), %rbp
0000000001048e61	addq	$0x1008, %rsp
0000000001048e68	retq
0000000001048e69	callq	runtime.morestack_noctxt
0000000001048e6e	jmp	_debugCall4096
0000000001048e70	leaq	0x1010(%rsp), %rdi
0000000001048e78	cmpq	%rdi, (%rbx)
0000000001048e7b	jne	0x1048e49
0000000001048e7d	movq	%rsp, (%rbx)
0000000001048e80	jmp	0x1048e49
0000000001048e82	int3
0000000001048e83	int3
0000000001048e84	int3
0000000001048e85	int3
0000000001048e86	int3
0000000001048e87	int3
0000000001048e88	int3
0000000001048e89	int3
0000000001048e8a	int3
0000000001048e8b	int3
0000000001048e8c	int3
0000000001048e8d	int3
0000000001048e8e	int3
0000000001048e8f	int3
_debugCall8192:
0000000001048e90	movq	%gs:0x30, %rcx
0000000001048e99	movq	0x10(%rcx), %rsi
0000000001048e9d	cmpq	$-0x522, %rsi
0000000001048ea4	je	0x1048ef9
0000000001048ea6	leaq	0x370(%rsp), %rax
0000000001048eae	subq	%rsi, %rax
0000000001048eb1	cmpq	$0x22f8, %rax
0000000001048eb7	jbe	0x1048ef9
0000000001048eb9	subq	$0x2008, %rsp
0000000001048ec0	movq	%rbp, 0x2000(%rsp)
0000000001048ec8	leaq	0x2000(%rsp), %rbp
0000000001048ed0	movq	0x20(%rcx), %rbx
0000000001048ed4	testq	%rbx, %rbx
0000000001048ed7	jne	0x1048f00
0000000001048ed9	movq	$0x0, %rax
0000000001048ee0	int3
0000000001048ee1	movq	$0x1, %rax
0000000001048ee8	int3
0000000001048ee9	movq	0x2000(%rsp), %rbp
0000000001048ef1	addq	$0x2008, %rsp
0000000001048ef8	retq
0000000001048ef9	callq	runtime.morestack_noctxt
0000000001048efe	jmp	_debugCall8192
0000000001048f00	leaq	0x2010(%rsp), %rdi
0000000001048f08	cmpq	%rdi, (%rbx)
0000000001048f0b	jne	0x1048ed9
0000000001048f0d	movq	%rsp, (%rbx)
0000000001048f10	jmp	0x1048ed9
0000000001048f12	int3
0000000001048f13	int3
0000000001048f14	int3
0000000001048f15	int3
0000000001048f16	int3
0000000001048f17	int3
0000000001048f18	int3
0000000001048f19	int3
0000000001048f1a	int3
0000000001048f1b	int3
0000000001048f1c	int3
0000000001048f1d	int3
0000000001048f1e	int3
0000000001048f1f	int3
_debugCall16384:
0000000001048f20	movq	%gs:0x30, %rcx
0000000001048f29	movq	0x10(%rcx), %rsi
0000000001048f2d	cmpq	$-0x522, %rsi
0000000001048f34	je	0x1048f89
0000000001048f36	leaq	0x370(%rsp), %rax
0000000001048f3e	subq	%rsi, %rax
0000000001048f41	cmpq	$0x42f8, %rax
0000000001048f47	jbe	0x1048f89
0000000001048f49	subq	$0x4008, %rsp
0000000001048f50	movq	%rbp, 0x4000(%rsp)
0000000001048f58	leaq	0x4000(%rsp), %rbp
0000000001048f60	movq	0x20(%rcx), %rbx
0000000001048f64	testq	%rbx, %rbx
0000000001048f67	jne	0x1048f90
0000000001048f69	movq	$0x0, %rax
0000000001048f70	int3
0000000001048f71	movq	$0x1, %rax
0000000001048f78	int3
0000000001048f79	movq	0x4000(%rsp), %rbp
0000000001048f81	addq	$0x4008, %rsp
0000000001048f88	retq
0000000001048f89	callq	runtime.morestack_noctxt
0000000001048f8e	jmp	_debugCall16384
0000000001048f90	leaq	0x4010(%rsp), %rdi
0000000001048f98	cmpq	%rdi, (%rbx)
0000000001048f9b	jne	0x1048f69
0000000001048f9d	movq	%rsp, (%rbx)
0000000001048fa0	jmp	0x1048f69
0000000001048fa2	int3
0000000001048fa3	int3
0000000001048fa4	int3
0000000001048fa5	int3
0000000001048fa6	int3
0000000001048fa7	int3
0000000001048fa8	int3
0000000001048fa9	int3
0000000001048faa	int3
0000000001048fab	int3
0000000001048fac	int3
0000000001048fad	int3
0000000001048fae	int3
0000000001048faf	int3
_debugCall32768:
0000000001048fb0	movq	%gs:0x30, %rcx
0000000001048fb9	movq	0x10(%rcx), %rsi
0000000001048fbd	cmpq	$-0x522, %rsi
0000000001048fc4	je	0x1049019
0000000001048fc6	leaq	0x370(%rsp), %rax
0000000001048fce	subq	%rsi, %rax
0000000001048fd1	cmpq	$0x82f8, %rax
0000000001048fd7	jbe	0x1049019
0000000001048fd9	subq	$0x8008, %rsp
0000000001048fe0	movq	%rbp, 0x8000(%rsp)
0000000001048fe8	leaq	0x8000(%rsp), %rbp
0000000001048ff0	movq	0x20(%rcx), %rbx
0000000001048ff4	testq	%rbx, %rbx
0000000001048ff7	jne	0x1049020
0000000001048ff9	movq	$0x0, %rax
0000000001049000	int3
0000000001049001	movq	$0x1, %rax
0000000001049008	int3
0000000001049009	movq	0x8000(%rsp), %rbp
0000000001049011	addq	$0x8008, %rsp
0000000001049018	retq
0000000001049019	callq	runtime.morestack_noctxt
000000000104901e	jmp	_debugCall32768
0000000001049020	leaq	0x8010(%rsp), %rdi
0000000001049028	cmpq	%rdi, (%rbx)
000000000104902b	jne	0x1048ff9
000000000104902d	movq	%rsp, (%rbx)
0000000001049030	jmp	0x1048ff9
0000000001049032	int3
0000000001049033	int3
0000000001049034	int3
0000000001049035	int3
0000000001049036	int3
0000000001049037	int3
0000000001049038	int3
0000000001049039	int3
000000000104903a	int3
000000000104903b	int3
000000000104903c	int3
000000000104903d	int3
000000000104903e	int3
000000000104903f	int3
_debugCall65536:
0000000001049040	movq	%gs:0x30, %rcx
0000000001049049	movq	0x10(%rcx), %rsi
000000000104904d	cmpq	$-0x522, %rsi
0000000001049054	je	0x10490a9
0000000001049056	leaq	0x370(%rsp), %rax
000000000104905e	subq	%rsi, %rax
0000000001049061	cmpq	$0x102f8, %rax
0000000001049067	jbe	0x10490a9
0000000001049069	subq	$0x10008, %rsp
0000000001049070	movq	%rbp, 0x10000(%rsp)
0000000001049078	leaq	0x10000(%rsp), %rbp
0000000001049080	movq	0x20(%rcx), %rbx
0000000001049084	testq	%rbx, %rbx
0000000001049087	jne	0x10490b0
0000000001049089	movq	$0x0, %rax
0000000001049090	int3
0000000001049091	movq	$0x1, %rax
0000000001049098	int3
0000000001049099	movq	0x10000(%rsp), %rbp
00000000010490a1	addq	$0x10008, %rsp
00000000010490a8	retq
00000000010490a9	callq	runtime.morestack_noctxt
00000000010490ae	jmp	_debugCall65536
00000000010490b0	leaq	0x10010(%rsp), %rdi
00000000010490b8	cmpq	%rdi, (%rbx)
00000000010490bb	jne	0x1049089
00000000010490bd	movq	%rsp, (%rbx)
00000000010490c0	jmp	0x1049089
00000000010490c2	int3
00000000010490c3	int3
00000000010490c4	int3
00000000010490c5	int3
00000000010490c6	int3
00000000010490c7	int3
00000000010490c8	int3
00000000010490c9	int3
00000000010490ca	int3
00000000010490cb	int3
00000000010490cc	int3
00000000010490cd	int3
00000000010490ce	int3
00000000010490cf	int3
runtime.debugCallPanicked:
00000000010490d0	subq	$0x18, %rsp
00000000010490d4	movq	%rbp, 0x10(%rsp)
00000000010490d9	leaq	0x10(%rsp), %rbp
00000000010490de	movq	0x20(%rsp), %rax
00000000010490e3	movq	%rax, (%rsp)
00000000010490e7	movq	0x28(%rsp), %rax
00000000010490ec	movq	%rax, 0x8(%rsp)
00000000010490f1	movq	$0x2, %rax
00000000010490f8	int3
00000000010490f9	movq	0x10(%rsp), %rbp
00000000010490fe	addq	$0x18, %rsp
0000000001049102	retq
0000000001049103	int3
0000000001049104	int3
0000000001049105	int3
0000000001049106	int3
0000000001049107	int3
0000000001049108	int3
0000000001049109	int3
000000000104910a	int3
000000000104910b	int3
000000000104910c	int3
000000000104910d	int3
000000000104910e	int3
000000000104910f	int3
runtime.duffzero:
0000000001049110	movups	%xmm0, (%rdi)
0000000001049113	movups	%xmm0, 0x10(%rdi)
0000000001049117	movups	%xmm0, 0x20(%rdi)
000000000104911b	movups	%xmm0, 0x30(%rdi)
000000000104911f	leaq	0x40(%rdi), %rdi
0000000001049123	movups	%xmm0, (%rdi)
0000000001049126	movups	%xmm0, 0x10(%rdi)
000000000104912a	movups	%xmm0, 0x20(%rdi)
000000000104912e	movups	%xmm0, 0x30(%rdi)
0000000001049132	leaq	0x40(%rdi), %rdi
0000000001049136	movups	%xmm0, (%rdi)
0000000001049139	movups	%xmm0, 0x10(%rdi)
000000000104913d	movups	%xmm0, 0x20(%rdi)
0000000001049141	movups	%xmm0, 0x30(%rdi)
0000000001049145	leaq	0x40(%rdi), %rdi
0000000001049149	movups	%xmm0, (%rdi)
000000000104914c	movups	%xmm0, 0x10(%rdi)
0000000001049150	movups	%xmm0, 0x20(%rdi)
0000000001049154	movups	%xmm0, 0x30(%rdi)
0000000001049158	leaq	0x40(%rdi), %rdi
000000000104915c	movups	%xmm0, (%rdi)
000000000104915f	movups	%xmm0, 0x10(%rdi)
0000000001049163	movups	%xmm0, 0x20(%rdi)
0000000001049167	movups	%xmm0, 0x30(%rdi)
000000000104916b	leaq	0x40(%rdi), %rdi
000000000104916f	movups	%xmm0, (%rdi)
0000000001049172	movups	%xmm0, 0x10(%rdi)
0000000001049176	movups	%xmm0, 0x20(%rdi)
000000000104917a	movups	%xmm0, 0x30(%rdi)
000000000104917e	leaq	0x40(%rdi), %rdi
0000000001049182	movups	%xmm0, (%rdi)
0000000001049185	movups	%xmm0, 0x10(%rdi)
0000000001049189	movups	%xmm0, 0x20(%rdi)
000000000104918d	movups	%xmm0, 0x30(%rdi)
0000000001049191	leaq	0x40(%rdi), %rdi
0000000001049195	movups	%xmm0, (%rdi)
0000000001049198	movups	%xmm0, 0x10(%rdi)
000000000104919c	movups	%xmm0, 0x20(%rdi)
00000000010491a0	movups	%xmm0, 0x30(%rdi)
00000000010491a4	leaq	0x40(%rdi), %rdi
00000000010491a8	movups	%xmm0, (%rdi)
00000000010491ab	movups	%xmm0, 0x10(%rdi)
00000000010491af	movups	%xmm0, 0x20(%rdi)
00000000010491b3	movups	%xmm0, 0x30(%rdi)
00000000010491b7	leaq	0x40(%rdi), %rdi
00000000010491bb	movups	%xmm0, (%rdi)
00000000010491be	movups	%xmm0, 0x10(%rdi)
00000000010491c2	movups	%xmm0, 0x20(%rdi)
00000000010491c6	movups	%xmm0, 0x30(%rdi)
00000000010491ca	leaq	0x40(%rdi), %rdi
00000000010491ce	movups	%xmm0, (%rdi)
00000000010491d1	movups	%xmm0, 0x10(%rdi)
00000000010491d5	movups	%xmm0, 0x20(%rdi)
00000000010491d9	movups	%xmm0, 0x30(%rdi)
00000000010491dd	leaq	0x40(%rdi), %rdi
00000000010491e1	movups	%xmm0, (%rdi)
00000000010491e4	movups	%xmm0, 0x10(%rdi)
00000000010491e8	movups	%xmm0, 0x20(%rdi)
00000000010491ec	movups	%xmm0, 0x30(%rdi)
00000000010491f0	leaq	0x40(%rdi), %rdi
00000000010491f4	movups	%xmm0, (%rdi)
00000000010491f7	movups	%xmm0, 0x10(%rdi)
00000000010491fb	movups	%xmm0, 0x20(%rdi)
00000000010491ff	movups	%xmm0, 0x30(%rdi)
0000000001049203	leaq	0x40(%rdi), %rdi
0000000001049207	movups	%xmm0, (%rdi)
000000000104920a	movups	%xmm0, 0x10(%rdi)
000000000104920e	movups	%xmm0, 0x20(%rdi)
0000000001049212	movups	%xmm0, 0x30(%rdi)
0000000001049216	leaq	0x40(%rdi), %rdi
000000000104921a	movups	%xmm0, (%rdi)
000000000104921d	movups	%xmm0, 0x10(%rdi)
0000000001049221	movups	%xmm0, 0x20(%rdi)
0000000001049225	movups	%xmm0, 0x30(%rdi)
0000000001049229	leaq	0x40(%rdi), %rdi
000000000104922d	movups	%xmm0, (%rdi)
0000000001049230	movups	%xmm0, 0x10(%rdi)
0000000001049234	movups	%xmm0, 0x20(%rdi)
0000000001049238	movups	%xmm0, 0x30(%rdi)
000000000104923c	leaq	0x40(%rdi), %rdi
0000000001049240	retq
0000000001049241	int3
0000000001049242	int3
0000000001049243	int3
0000000001049244	int3
0000000001049245	int3
0000000001049246	int3
0000000001049247	int3
0000000001049248	int3
0000000001049249	int3
000000000104924a	int3
000000000104924b	int3
000000000104924c	int3
000000000104924d	int3
000000000104924e	int3
000000000104924f	int3
runtime.duffcopy:
0000000001049250	movups	(%rsi), %xmm0
0000000001049253	addq	$0x10, %rsi
0000000001049257	movups	%xmm0, (%rdi)
000000000104925a	addq	$0x10, %rdi
000000000104925e	movups	(%rsi), %xmm0
0000000001049261	addq	$0x10, %rsi
0000000001049265	movups	%xmm0, (%rdi)
0000000001049268	addq	$0x10, %rdi
000000000104926c	movups	(%rsi), %xmm0
000000000104926f	addq	$0x10, %rsi
0000000001049273	movups	%xmm0, (%rdi)
0000000001049276	addq	$0x10, %rdi
000000000104927a	movups	(%rsi), %xmm0
000000000104927d	addq	$0x10, %rsi
0000000001049281	movups	%xmm0, (%rdi)
0000000001049284	addq	$0x10, %rdi
0000000001049288	movups	(%rsi), %xmm0
000000000104928b	addq	$0x10, %rsi
000000000104928f	movups	%xmm0, (%rdi)
0000000001049292	addq	$0x10, %rdi
0000000001049296	movups	(%rsi), %xmm0
0000000001049299	addq	$0x10, %rsi
000000000104929d	movups	%xmm0, (%rdi)
00000000010492a0	addq	$0x10, %rdi
00000000010492a4	movups	(%rsi), %xmm0
00000000010492a7	addq	$0x10, %rsi
00000000010492ab	movups	%xmm0, (%rdi)
00000000010492ae	addq	$0x10, %rdi
00000000010492b2	movups	(%rsi), %xmm0
00000000010492b5	addq	$0x10, %rsi
00000000010492b9	movups	%xmm0, (%rdi)
00000000010492bc	addq	$0x10, %rdi
00000000010492c0	movups	(%rsi), %xmm0
00000000010492c3	addq	$0x10, %rsi
00000000010492c7	movups	%xmm0, (%rdi)
00000000010492ca	addq	$0x10, %rdi
00000000010492ce	movups	(%rsi), %xmm0
00000000010492d1	addq	$0x10, %rsi
00000000010492d5	movups	%xmm0, (%rdi)
00000000010492d8	addq	$0x10, %rdi
00000000010492dc	movups	(%rsi), %xmm0
00000000010492df	addq	$0x10, %rsi
00000000010492e3	movups	%xmm0, (%rdi)
00000000010492e6	addq	$0x10, %rdi
00000000010492ea	movups	(%rsi), %xmm0
00000000010492ed	addq	$0x10, %rsi
00000000010492f1	movups	%xmm0, (%rdi)
00000000010492f4	addq	$0x10, %rdi
00000000010492f8	movups	(%rsi), %xmm0
00000000010492fb	addq	$0x10, %rsi
00000000010492ff	movups	%xmm0, (%rdi)
0000000001049302	addq	$0x10, %rdi
0000000001049306	movups	(%rsi), %xmm0
0000000001049309	addq	$0x10, %rsi
000000000104930d	movups	%xmm0, (%rdi)
0000000001049310	addq	$0x10, %rdi
0000000001049314	movups	(%rsi), %xmm0
0000000001049317	addq	$0x10, %rsi
000000000104931b	movups	%xmm0, (%rdi)
000000000104931e	addq	$0x10, %rdi
0000000001049322	movups	(%rsi), %xmm0
0000000001049325	addq	$0x10, %rsi
0000000001049329	movups	%xmm0, (%rdi)
000000000104932c	addq	$0x10, %rdi
0000000001049330	movups	(%rsi), %xmm0
0000000001049333	addq	$0x10, %rsi
0000000001049337	movups	%xmm0, (%rdi)
000000000104933a	addq	$0x10, %rdi
000000000104933e	movups	(%rsi), %xmm0
0000000001049341	addq	$0x10, %rsi
0000000001049345	movups	%xmm0, (%rdi)
0000000001049348	addq	$0x10, %rdi
000000000104934c	movups	(%rsi), %xmm0
000000000104934f	addq	$0x10, %rsi
0000000001049353	movups	%xmm0, (%rdi)
0000000001049356	addq	$0x10, %rdi
000000000104935a	movups	(%rsi), %xmm0
000000000104935d	addq	$0x10, %rsi
0000000001049361	movups	%xmm0, (%rdi)
0000000001049364	addq	$0x10, %rdi
0000000001049368	movups	(%rsi), %xmm0
000000000104936b	addq	$0x10, %rsi
000000000104936f	movups	%xmm0, (%rdi)
0000000001049372	addq	$0x10, %rdi
0000000001049376	movups	(%rsi), %xmm0
0000000001049379	addq	$0x10, %rsi
000000000104937d	movups	%xmm0, (%rdi)
0000000001049380	addq	$0x10, %rdi
0000000001049384	movups	(%rsi), %xmm0
0000000001049387	addq	$0x10, %rsi
000000000104938b	movups	%xmm0, (%rdi)
000000000104938e	addq	$0x10, %rdi
0000000001049392	movups	(%rsi), %xmm0
0000000001049395	addq	$0x10, %rsi
0000000001049399	movups	%xmm0, (%rdi)
000000000104939c	addq	$0x10, %rdi
00000000010493a0	movups	(%rsi), %xmm0
00000000010493a3	addq	$0x10, %rsi
00000000010493a7	movups	%xmm0, (%rdi)
00000000010493aa	addq	$0x10, %rdi
00000000010493ae	movups	(%rsi), %xmm0
00000000010493b1	addq	$0x10, %rsi
00000000010493b5	movups	%xmm0, (%rdi)
00000000010493b8	addq	$0x10, %rdi
00000000010493bc	movups	(%rsi), %xmm0
00000000010493bf	addq	$0x10, %rsi
00000000010493c3	movups	%xmm0, (%rdi)
00000000010493c6	addq	$0x10, %rdi
00000000010493ca	movups	(%rsi), %xmm0
00000000010493cd	addq	$0x10, %rsi
00000000010493d1	movups	%xmm0, (%rdi)
00000000010493d4	addq	$0x10, %rdi
00000000010493d8	movups	(%rsi), %xmm0
00000000010493db	addq	$0x10, %rsi
00000000010493df	movups	%xmm0, (%rdi)
00000000010493e2	addq	$0x10, %rdi
00000000010493e6	movups	(%rsi), %xmm0
00000000010493e9	addq	$0x10, %rsi
00000000010493ed	movups	%xmm0, (%rdi)
00000000010493f0	addq	$0x10, %rdi
00000000010493f4	movups	(%rsi), %xmm0
00000000010493f7	addq	$0x10, %rsi
00000000010493fb	movups	%xmm0, (%rdi)
00000000010493fe	addq	$0x10, %rdi
0000000001049402	movups	(%rsi), %xmm0
0000000001049405	addq	$0x10, %rsi
0000000001049409	movups	%xmm0, (%rdi)
000000000104940c	addq	$0x10, %rdi
0000000001049410	movups	(%rsi), %xmm0
0000000001049413	addq	$0x10, %rsi
0000000001049417	movups	%xmm0, (%rdi)
000000000104941a	addq	$0x10, %rdi
000000000104941e	movups	(%rsi), %xmm0
0000000001049421	addq	$0x10, %rsi
0000000001049425	movups	%xmm0, (%rdi)
0000000001049428	addq	$0x10, %rdi
000000000104942c	movups	(%rsi), %xmm0
000000000104942f	addq	$0x10, %rsi
0000000001049433	movups	%xmm0, (%rdi)
0000000001049436	addq	$0x10, %rdi
000000000104943a	movups	(%rsi), %xmm0
000000000104943d	addq	$0x10, %rsi
0000000001049441	movups	%xmm0, (%rdi)
0000000001049444	addq	$0x10, %rdi
0000000001049448	movups	(%rsi), %xmm0
000000000104944b	addq	$0x10, %rsi
000000000104944f	movups	%xmm0, (%rdi)
0000000001049452	addq	$0x10, %rdi
0000000001049456	movups	(%rsi), %xmm0
0000000001049459	addq	$0x10, %rsi
000000000104945d	movups	%xmm0, (%rdi)
0000000001049460	addq	$0x10, %rdi
0000000001049464	movups	(%rsi), %xmm0
0000000001049467	addq	$0x10, %rsi
000000000104946b	movups	%xmm0, (%rdi)
000000000104946e	addq	$0x10, %rdi
0000000001049472	movups	(%rsi), %xmm0
0000000001049475	addq	$0x10, %rsi
0000000001049479	movups	%xmm0, (%rdi)
000000000104947c	addq	$0x10, %rdi
0000000001049480	movups	(%rsi), %xmm0
0000000001049483	addq	$0x10, %rsi
0000000001049487	movups	%xmm0, (%rdi)
000000000104948a	addq	$0x10, %rdi
000000000104948e	movups	(%rsi), %xmm0
0000000001049491	addq	$0x10, %rsi
0000000001049495	movups	%xmm0, (%rdi)
0000000001049498	addq	$0x10, %rdi
000000000104949c	movups	(%rsi), %xmm0
000000000104949f	addq	$0x10, %rsi
00000000010494a3	movups	%xmm0, (%rdi)
00000000010494a6	addq	$0x10, %rdi
00000000010494aa	movups	(%rsi), %xmm0
00000000010494ad	addq	$0x10, %rsi
00000000010494b1	movups	%xmm0, (%rdi)
00000000010494b4	addq	$0x10, %rdi
00000000010494b8	movups	(%rsi), %xmm0
00000000010494bb	addq	$0x10, %rsi
00000000010494bf	movups	%xmm0, (%rdi)
00000000010494c2	addq	$0x10, %rdi
00000000010494c6	movups	(%rsi), %xmm0
00000000010494c9	addq	$0x10, %rsi
00000000010494cd	movups	%xmm0, (%rdi)
00000000010494d0	addq	$0x10, %rdi
00000000010494d4	movups	(%rsi), %xmm0
00000000010494d7	addq	$0x10, %rsi
00000000010494db	movups	%xmm0, (%rdi)
00000000010494de	addq	$0x10, %rdi
00000000010494e2	movups	(%rsi), %xmm0
00000000010494e5	addq	$0x10, %rsi
00000000010494e9	movups	%xmm0, (%rdi)
00000000010494ec	addq	$0x10, %rdi
00000000010494f0	movups	(%rsi), %xmm0
00000000010494f3	addq	$0x10, %rsi
00000000010494f7	movups	%xmm0, (%rdi)
00000000010494fa	addq	$0x10, %rdi
00000000010494fe	movups	(%rsi), %xmm0
0000000001049501	addq	$0x10, %rsi
0000000001049505	movups	%xmm0, (%rdi)
0000000001049508	addq	$0x10, %rdi
000000000104950c	movups	(%rsi), %xmm0
000000000104950f	addq	$0x10, %rsi
0000000001049513	movups	%xmm0, (%rdi)
0000000001049516	addq	$0x10, %rdi
000000000104951a	movups	(%rsi), %xmm0
000000000104951d	addq	$0x10, %rsi
0000000001049521	movups	%xmm0, (%rdi)
0000000001049524	addq	$0x10, %rdi
0000000001049528	movups	(%rsi), %xmm0
000000000104952b	addq	$0x10, %rsi
000000000104952f	movups	%xmm0, (%rdi)
0000000001049532	addq	$0x10, %rdi
0000000001049536	movups	(%rsi), %xmm0
0000000001049539	addq	$0x10, %rsi
000000000104953d	movups	%xmm0, (%rdi)
0000000001049540	addq	$0x10, %rdi
0000000001049544	movups	(%rsi), %xmm0
0000000001049547	addq	$0x10, %rsi
000000000104954b	movups	%xmm0, (%rdi)
000000000104954e	addq	$0x10, %rdi
0000000001049552	movups	(%rsi), %xmm0
0000000001049555	addq	$0x10, %rsi
0000000001049559	movups	%xmm0, (%rdi)
000000000104955c	addq	$0x10, %rdi
0000000001049560	movups	(%rsi), %xmm0
0000000001049563	addq	$0x10, %rsi
0000000001049567	movups	%xmm0, (%rdi)
000000000104956a	addq	$0x10, %rdi
000000000104956e	movups	(%rsi), %xmm0
0000000001049571	addq	$0x10, %rsi
0000000001049575	movups	%xmm0, (%rdi)
0000000001049578	addq	$0x10, %rdi
000000000104957c	movups	(%rsi), %xmm0
000000000104957f	addq	$0x10, %rsi
0000000001049583	movups	%xmm0, (%rdi)
0000000001049586	addq	$0x10, %rdi
000000000104958a	movups	(%rsi), %xmm0
000000000104958d	addq	$0x10, %rsi
0000000001049591	movups	%xmm0, (%rdi)
0000000001049594	addq	$0x10, %rdi
0000000001049598	movups	(%rsi), %xmm0
000000000104959b	addq	$0x10, %rsi
000000000104959f	movups	%xmm0, (%rdi)
00000000010495a2	addq	$0x10, %rdi
00000000010495a6	movups	(%rsi), %xmm0
00000000010495a9	addq	$0x10, %rsi
00000000010495ad	movups	%xmm0, (%rdi)
00000000010495b0	addq	$0x10, %rdi
00000000010495b4	movups	(%rsi), %xmm0
00000000010495b7	addq	$0x10, %rsi
00000000010495bb	movups	%xmm0, (%rdi)
00000000010495be	addq	$0x10, %rdi
00000000010495c2	movups	(%rsi), %xmm0
00000000010495c5	addq	$0x10, %rsi
00000000010495c9	movups	%xmm0, (%rdi)
00000000010495cc	addq	$0x10, %rdi
00000000010495d0	retq
00000000010495d1	int3
00000000010495d2	int3
00000000010495d3	int3
00000000010495d4	int3
00000000010495d5	int3
00000000010495d6	int3
00000000010495d7	int3
00000000010495d8	int3
00000000010495d9	int3
00000000010495da	int3
00000000010495db	int3
00000000010495dc	int3
00000000010495dd	int3
00000000010495de	int3
00000000010495df	int3
runtime.memclrNoHeapPointers:
00000000010495e0	movq	0x8(%rsp), %rdi
00000000010495e5	movq	0x10(%rsp), %rbx
00000000010495ea	xorq	%rax, %rax
00000000010495ed	testq	%rbx, %rbx
00000000010495f0	je	0x104979e
00000000010495f6	cmpq	$0x2, %rbx
00000000010495fa	jbe	0x1049797
0000000001049600	cmpq	$0x4, %rbx
0000000001049604	jbe	0x104979f
000000000104960a	cmpq	$0x8, %rbx
000000000104960e	jb	0x10497a8
0000000001049614	je	0x10497af
000000000104961a	cmpq	$0x10, %rbx
000000000104961e	jbe	0x10497b3
0000000001049624	pxor	%xmm0, %xmm0
0000000001049628	cmpq	$0x20, %rbx
000000000104962c	jbe	0x10497bc
0000000001049632	cmpq	$0x40, %rbx
0000000001049636	jbe	0x10497c7
000000000104963c	cmpq	$0x80, %rbx
0000000001049643	jbe	0x10497dd
0000000001049649	cmpq	$0x100, %rbx
0000000001049650	jbe	0x1049809
0000000001049656	cmpb	$0x1, 0x8b886(%rip)
000000000104965d	je	0x10496e6
0000000001049663	movdqu	%xmm0, (%rdi)
0000000001049667	movdqu	%xmm0, 0x10(%rdi)
000000000104966c	movdqu	%xmm0, 0x20(%rdi)
0000000001049671	movdqu	%xmm0, 0x30(%rdi)
0000000001049676	movdqu	%xmm0, 0x40(%rdi)
000000000104967b	movdqu	%xmm0, 0x50(%rdi)
0000000001049680	movdqu	%xmm0, 0x60(%rdi)
0000000001049685	movdqu	%xmm0, 0x70(%rdi)
000000000104968a	movdqu	%xmm0, 0x80(%rdi)
0000000001049692	movdqu	%xmm0, 0x90(%rdi)
000000000104969a	movdqu	%xmm0, 0xa0(%rdi)
00000000010496a2	movdqu	%xmm0, 0xb0(%rdi)
00000000010496aa	movdqu	%xmm0, 0xc0(%rdi)
00000000010496b2	movdqu	%xmm0, 0xd0(%rdi)
00000000010496ba	movdqu	%xmm0, 0xe0(%rdi)
00000000010496c2	movdqu	%xmm0, 0xf0(%rdi)
00000000010496ca	subq	$0x100, %rbx
00000000010496d1	addq	$0x100, %rdi
00000000010496d8	cmpq	$0x100, %rbx
00000000010496df	jae	0x1049663
00000000010496e1	jmp	0x10495ed
00000000010496e6	vpxor	%ymm0, %ymm0, %ymm0
00000000010496ea	cmpq	$0x2000000, %rbx
00000000010496f1	jae	0x1049739
00000000010496f3	vmovdqu	%ymm0, (%rdi)
00000000010496f7	vmovdqu	%ymm0, 0x20(%rdi)
00000000010496fc	vmovdqu	%ymm0, 0x40(%rdi)
0000000001049701	vmovdqu	%ymm0, 0x60(%rdi)
0000000001049706	subq	$0x80, %rbx
000000000104970d	addq	$0x80, %rdi
0000000001049714	cmpq	$0x80, %rbx
000000000104971b	jae	0x10496f3
000000000104971d	vmovdqu	%ymm0, -0x20(%rdi,%rbx)
0000000001049723	vmovdqu	%ymm0, -0x40(%rdi,%rbx)
0000000001049729	vmovdqu	%ymm0, -0x60(%rdi,%rbx)
000000000104972f	vmovdqu	%ymm0, -0x80(%rdi,%rbx)
0000000001049735	vzeroupper
0000000001049738	retq
0000000001049739	vmovdqu	%ymm0, (%rdi)
000000000104973d	movq	%rdi, %rsi
0000000001049740	addq	$0x20, %rdi
0000000001049744	andq	$-0x20, %rdi
0000000001049748	subq	%rdi, %rsi
000000000104974b	addq	%rsi, %rbx
000000000104974e	vmovntdq	%ymm0, (%rdi)
0000000001049752	vmovntdq	%ymm0, 0x20(%rdi)
0000000001049757	vmovntdq	%ymm0, 0x40(%rdi)
000000000104975c	vmovntdq	%ymm0, 0x60(%rdi)
0000000001049761	subq	$0x80, %rbx
0000000001049768	addq	$0x80, %rdi
000000000104976f	cmpq	$0x80, %rbx
0000000001049776	jae	0x104974e
0000000001049778	sfence
000000000104977b	vmovdqu	%ymm0, -0x20(%rdi,%rbx)
0000000001049781	vmovdqu	%ymm0, -0x40(%rdi,%rbx)
0000000001049787	vmovdqu	%ymm0, -0x60(%rdi,%rbx)
000000000104978d	vmovdqu	%ymm0, -0x80(%rdi,%rbx)
0000000001049793	vzeroupper
0000000001049796	retq
0000000001049797	movb	%al, (%rdi)
0000000001049799	movb	%al, -0x1(%rdi,%rbx)
000000000104979d	retq
000000000104979e	retq
000000000104979f	movw	%ax, (%rdi)
00000000010497a2	movw	%ax, -0x2(%rdi,%rbx)
00000000010497a7	retq
00000000010497a8	movl	%eax, (%rdi)
00000000010497aa	movl	%eax, -0x4(%rdi,%rbx)
00000000010497ae	retq
00000000010497af	movq	%rax, (%rdi)
00000000010497b2	retq
00000000010497b3	movq	%rax, (%rdi)
00000000010497b6	movq	%rax, -0x8(%rdi,%rbx)
00000000010497bb	retq
00000000010497bc	movdqu	%xmm0, (%rdi)
00000000010497c0	movdqu	%xmm0, -0x10(%rdi,%rbx)
00000000010497c6	retq
00000000010497c7	movdqu	%xmm0, (%rdi)
00000000010497cb	movdqu	%xmm0, 0x10(%rdi)
00000000010497d0	movdqu	%xmm0, -0x20(%rdi,%rbx)
00000000010497d6	movdqu	%xmm0, -0x10(%rdi,%rbx)
00000000010497dc	retq
00000000010497dd	movdqu	%xmm0, (%rdi)
00000000010497e1	movdqu	%xmm0, 0x10(%rdi)
00000000010497e6	movdqu	%xmm0, 0x20(%rdi)
00000000010497eb	movdqu	%xmm0, 0x30(%rdi)
00000000010497f0	movdqu	%xmm0, -0x40(%rdi,%rbx)
00000000010497f6	movdqu	%xmm0, -0x30(%rdi,%rbx)
00000000010497fc	movdqu	%xmm0, -0x20(%rdi,%rbx)
0000000001049802	movdqu	%xmm0, -0x10(%rdi,%rbx)
0000000001049808	retq
0000000001049809	movdqu	%xmm0, (%rdi)
000000000104980d	movdqu	%xmm0, 0x10(%rdi)
0000000001049812	movdqu	%xmm0, 0x20(%rdi)
0000000001049817	movdqu	%xmm0, 0x30(%rdi)
000000000104981c	movdqu	%xmm0, 0x40(%rdi)
0000000001049821	movdqu	%xmm0, 0x50(%rdi)
0000000001049826	movdqu	%xmm0, 0x60(%rdi)
000000000104982b	movdqu	%xmm0, 0x70(%rdi)
0000000001049830	movdqu	%xmm0, -0x80(%rdi,%rbx)
0000000001049836	movdqu	%xmm0, -0x70(%rdi,%rbx)
000000000104983c	movdqu	%xmm0, -0x60(%rdi,%rbx)
0000000001049842	movdqu	%xmm0, -0x50(%rdi,%rbx)
0000000001049848	movdqu	%xmm0, -0x40(%rdi,%rbx)
000000000104984e	movdqu	%xmm0, -0x30(%rdi,%rbx)
0000000001049854	movdqu	%xmm0, -0x20(%rdi,%rbx)
000000000104985a	movdqu	%xmm0, -0x10(%rdi,%rbx)
0000000001049860	retq
0000000001049861	int3
0000000001049862	int3
0000000001049863	int3
0000000001049864	int3
0000000001049865	int3
0000000001049866	int3
0000000001049867	int3
0000000001049868	int3
0000000001049869	int3
000000000104986a	int3
000000000104986b	int3
000000000104986c	int3
000000000104986d	int3
000000000104986e	int3
000000000104986f	int3
runtime.memmove:
0000000001049870	movq	0x8(%rsp), %rdi
0000000001049875	movq	0x10(%rsp), %rsi
000000000104987a	movq	0x18(%rsp), %rbx
000000000104987f	testq	%rbx, %rbx
0000000001049882	je	0x104997f
0000000001049888	cmpq	$0x2, %rbx
000000000104988c	jbe	0x1049972
0000000001049892	cmpq	$0x4, %rbx
0000000001049896	jb	0x1049985
000000000104989c	jbe	0x1049980
00000000010498a2	cmpq	$0x8, %rbx
00000000010498a6	jb	0x1049992
00000000010498ac	je	0x104999f
00000000010498b2	cmpq	$0x10, %rbx
00000000010498b6	jbe	0x10499a6
00000000010498bc	cmpq	$0x20, %rbx
00000000010498c0	jbe	0x10499b7
00000000010498c6	cmpq	$0x40, %rbx
00000000010498ca	jbe	0x10499cc
00000000010498d0	cmpq	$0x80, %rbx
00000000010498d7	jbe	0x10499f7
00000000010498dd	cmpq	$0x100, %rbx
00000000010498e4	jbe	0x1049a4e
00000000010498ea	testb	$0x1, runtime.support_sse41(%rip)
00000000010498f1	jne	0x1049c12
00000000010498f7	cmpq	%rdi, %rsi
00000000010498fa	jbe	0x1049936
00000000010498fc	cmpq	$0x800, %rbx
0000000001049903	jbe	0x1049b0d
0000000001049909	cmpb	$0x1, runtime.signalsOK(%rip)
0000000001049910	jne	0x1049923
0000000001049912	movl	%esi, %eax
0000000001049914	orl	%edi, %eax
0000000001049916	testl	$0x7, %eax
000000000104991b	je	0x1049923
000000000104991d	movq	%rbx, %rcx
0000000001049920	rep		movsb	(%rsi), %es:(%rdi)
0000000001049922	retq
0000000001049923	movq	%rbx, %rcx
0000000001049926	shrq	$0x3, %rcx
000000000104992a	andq	$0x7, %rbx
000000000104992e	rep		movsq	(%rsi), %es:(%rdi)
0000000001049931	jmp	0x104987f
0000000001049936	movq	%rsi, %rcx
0000000001049939	addq	%rbx, %rcx
000000000104993c	cmpq	%rdi, %rcx
000000000104993f	jbe	0x10498fc
0000000001049941	addq	%rbx, %rdi
0000000001049944	addq	%rbx, %rsi
0000000001049947	std
0000000001049948	movq	%rbx, %rcx
000000000104994b	shrq	$0x3, %rcx
000000000104994f	andq	$0x7, %rbx
0000000001049953	subq	$0x8, %rdi
0000000001049957	subq	$0x8, %rsi
000000000104995b	rep		movsq	(%rsi), %es:(%rdi)
000000000104995e	cld
000000000104995f	addq	$0x8, %rdi
0000000001049963	addq	$0x8, %rsi
0000000001049967	subq	%rbx, %rdi
000000000104996a	subq	%rbx, %rsi
000000000104996d	jmp	0x104987f
0000000001049972	movb	(%rsi), %al
0000000001049974	movb	-0x1(%rsi,%rbx), %cl
0000000001049978	movb	%al, (%rdi)
000000000104997a	movb	%cl, -0x1(%rdi,%rbx)
000000000104997e	retq
000000000104997f	retq
0000000001049980	movl	(%rsi), %eax
0000000001049982	movl	%eax, (%rdi)
0000000001049984	retq
0000000001049985	movw	(%rsi), %ax
0000000001049988	movb	0x2(%rsi), %cl
000000000104998b	movw	%ax, (%rdi)
000000000104998e	movb	%cl, 0x2(%rdi)
0000000001049991	retq
0000000001049992	movl	(%rsi), %eax
0000000001049994	movl	-0x4(%rsi,%rbx), %ecx
0000000001049998	movl	%eax, (%rdi)
000000000104999a	movl	%ecx, -0x4(%rdi,%rbx)
000000000104999e	retq
000000000104999f	movq	(%rsi), %rax
00000000010499a2	movq	%rax, (%rdi)
00000000010499a5	retq
00000000010499a6	movq	(%rsi), %rax
00000000010499a9	movq	-0x8(%rsi,%rbx), %rcx
00000000010499ae	movq	%rax, (%rdi)
00000000010499b1	movq	%rcx, -0x8(%rdi,%rbx)
00000000010499b6	retq
00000000010499b7	movdqu	(%rsi), %xmm0
00000000010499bb	movdqu	-0x10(%rsi,%rbx), %xmm1
00000000010499c1	movdqu	%xmm0, (%rdi)
00000000010499c5	movdqu	%xmm1, -0x10(%rdi,%rbx)
00000000010499cb	retq
00000000010499cc	movdqu	(%rsi), %xmm0
00000000010499d0	movdqu	0x10(%rsi), %xmm1
00000000010499d5	movdqu	-0x20(%rsi,%rbx), %xmm2
00000000010499db	movdqu	-0x10(%rsi,%rbx), %xmm3
00000000010499e1	movdqu	%xmm0, (%rdi)
00000000010499e5	movdqu	%xmm1, 0x10(%rdi)
00000000010499ea	movdqu	%xmm2, -0x20(%rdi,%rbx)
00000000010499f0	movdqu	%xmm3, -0x10(%rdi,%rbx)
00000000010499f6	retq
00000000010499f7	movdqu	(%rsi), %xmm0
00000000010499fb	movdqu	0x10(%rsi), %xmm1
0000000001049a00	movdqu	0x20(%rsi), %xmm2
0000000001049a05	movdqu	0x30(%rsi), %xmm3
0000000001049a0a	movdqu	-0x40(%rsi,%rbx), %xmm4
0000000001049a10	movdqu	-0x30(%rsi,%rbx), %xmm5
0000000001049a16	movdqu	-0x20(%rsi,%rbx), %xmm6
0000000001049a1c	movdqu	-0x10(%rsi,%rbx), %xmm7
0000000001049a22	movdqu	%xmm0, (%rdi)
0000000001049a26	movdqu	%xmm1, 0x10(%rdi)
0000000001049a2b	movdqu	%xmm2, 0x20(%rdi)
0000000001049a30	movdqu	%xmm3, 0x30(%rdi)
0000000001049a35	movdqu	%xmm4, -0x40(%rdi,%rbx)
0000000001049a3b	movdqu	%xmm5, -0x30(%rdi,%rbx)
0000000001049a41	movdqu	%xmm6, -0x20(%rdi,%rbx)
0000000001049a47	movdqu	%xmm7, -0x10(%rdi,%rbx)
0000000001049a4d	retq
0000000001049a4e	movdqu	(%rsi), %xmm0
0000000001049a52	movdqu	0x10(%rsi), %xmm1
0000000001049a57	movdqu	0x20(%rsi), %xmm2
0000000001049a5c	movdqu	0x30(%rsi), %xmm3
0000000001049a61	movdqu	0x40(%rsi), %xmm4
0000000001049a66	movdqu	0x50(%rsi), %xmm5
0000000001049a6b	movdqu	0x60(%rsi), %xmm6
0000000001049a70	movdqu	0x70(%rsi), %xmm7
0000000001049a75	movdqu	-0x80(%rsi,%rbx), %xmm8
0000000001049a7c	movdqu	-0x70(%rsi,%rbx), %xmm9
0000000001049a83	movdqu	-0x60(%rsi,%rbx), %xmm10
0000000001049a8a	movdqu	-0x50(%rsi,%rbx), %xmm11
0000000001049a91	movdqu	-0x40(%rsi,%rbx), %xmm12
0000000001049a98	movdqu	-0x30(%rsi,%rbx), %xmm13
0000000001049a9f	movdqu	-0x20(%rsi,%rbx), %xmm14
0000000001049aa6	movdqu	-0x10(%rsi,%rbx), %xmm15
0000000001049aad	movdqu	%xmm0, (%rdi)
0000000001049ab1	movdqu	%xmm1, 0x10(%rdi)
0000000001049ab6	movdqu	%xmm2, 0x20(%rdi)
0000000001049abb	movdqu	%xmm3, 0x30(%rdi)
0000000001049ac0	movdqu	%xmm4, 0x40(%rdi)
0000000001049ac5	movdqu	%xmm5, 0x50(%rdi)
0000000001049aca	movdqu	%xmm6, 0x60(%rdi)
0000000001049acf	movdqu	%xmm7, 0x70(%rdi)
0000000001049ad4	movdqu	%xmm8, -0x80(%rdi,%rbx)
0000000001049adb	movdqu	%xmm9, -0x70(%rdi,%rbx)
0000000001049ae2	movdqu	%xmm10, -0x60(%rdi,%rbx)
0000000001049ae9	movdqu	%xmm11, -0x50(%rdi,%rbx)
0000000001049af0	movdqu	%xmm12, -0x40(%rdi,%rbx)
0000000001049af7	movdqu	%xmm13, -0x30(%rdi,%rbx)
0000000001049afe	movdqu	%xmm14, -0x20(%rdi,%rbx)
0000000001049b05	movdqu	%xmm15, -0x10(%rdi,%rbx)
0000000001049b0c	retq
0000000001049b0d	subq	$0x100, %rbx
0000000001049b14	movdqu	(%rsi), %xmm0
0000000001049b18	movdqu	0x10(%rsi), %xmm1
0000000001049b1d	movdqu	0x20(%rsi), %xmm2
0000000001049b22	movdqu	0x30(%rsi), %xmm3
0000000001049b27	movdqu	0x40(%rsi), %xmm4
0000000001049b2c	movdqu	0x50(%rsi), %xmm5
0000000001049b31	movdqu	0x60(%rsi), %xmm6
0000000001049b36	movdqu	0x70(%rsi), %xmm7
0000000001049b3b	movdqu	0x80(%rsi), %xmm8
0000000001049b44	movdqu	0x90(%rsi), %xmm9
0000000001049b4d	movdqu	0xa0(%rsi), %xmm10
0000000001049b56	movdqu	0xb0(%rsi), %xmm11
0000000001049b5f	movdqu	0xc0(%rsi), %xmm12
0000000001049b68	movdqu	0xd0(%rsi), %xmm13
0000000001049b71	movdqu	0xe0(%rsi), %xmm14
0000000001049b7a	movdqu	0xf0(%rsi), %xmm15
0000000001049b83	movdqu	%xmm0, (%rdi)
0000000001049b87	movdqu	%xmm1, 0x10(%rdi)
0000000001049b8c	movdqu	%xmm2, 0x20(%rdi)
0000000001049b91	movdqu	%xmm3, 0x30(%rdi)
0000000001049b96	movdqu	%xmm4, 0x40(%rdi)
0000000001049b9b	movdqu	%xmm5, 0x50(%rdi)
0000000001049ba0	movdqu	%xmm6, 0x60(%rdi)
0000000001049ba5	movdqu	%xmm7, 0x70(%rdi)
0000000001049baa	movdqu	%xmm8, 0x80(%rdi)
0000000001049bb3	movdqu	%xmm9, 0x90(%rdi)
0000000001049bbc	movdqu	%xmm10, 0xa0(%rdi)
0000000001049bc5	movdqu	%xmm11, 0xb0(%rdi)
0000000001049bce	movdqu	%xmm12, 0xc0(%rdi)
0000000001049bd7	movdqu	%xmm13, 0xd0(%rdi)
0000000001049be0	movdqu	%xmm14, 0xe0(%rdi)
0000000001049be9	movdqu	%xmm15, 0xf0(%rdi)
0000000001049bf2	cmpq	$0x100, %rbx
0000000001049bf9	leaq	0x100(%rsi), %rsi
0000000001049c00	leaq	0x100(%rdi), %rdi
0000000001049c07	jge	0x1049b0d
0000000001049c0d	jmp	0x104987f
0000000001049c12	movq	%rdi, %rcx
0000000001049c15	subq	%rsi, %rcx
0000000001049c18	cmpq	%rbx, %rcx
0000000001049c1b	jb	0x1049dcd
0000000001049c21	cmpq	$0x100000, %rbx
0000000001049c28	jae	0x1049cf1
0000000001049c2e	leaq	(%rsi,%rbx), %rcx
0000000001049c32	movq	%rdi, %r10
0000000001049c35	movdqu	-0x80(%rcx), %xmm5
0000000001049c3a	movdqu	-0x70(%rcx), %xmm6
0000000001049c3f	movq	$0x80, %rax
0000000001049c46	andq	$-0x20, %rdi
0000000001049c4a	addq	$0x20, %rdi
0000000001049c4e	movdqu	-0x60(%rcx), %xmm7
0000000001049c53	movdqu	-0x50(%rcx), %xmm8
0000000001049c59	movq	%rdi, %r11
0000000001049c5c	subq	%r10, %r11
0000000001049c5f	movdqu	-0x40(%rcx), %xmm9
0000000001049c65	movdqu	-0x30(%rcx), %xmm10
0000000001049c6b	subq	%r11, %rbx
0000000001049c6e	movdqu	-0x20(%rcx), %xmm11
0000000001049c74	movdqu	-0x10(%rcx), %xmm12
0000000001049c7a	vmovdqu	(%rsi), %ymm4
0000000001049c7e	addq	%r11, %rsi
0000000001049c81	subq	%rax, %rbx
0000000001049c84	vmovdqu	(%rsi), %ymm0
0000000001049c88	vmovdqu	0x20(%rsi), %ymm1
0000000001049c8d	vmovdqu	0x40(%rsi), %ymm2
0000000001049c92	vmovdqu	0x60(%rsi), %ymm3
0000000001049c97	addq	%rax, %rsi
0000000001049c9a	vmovdqa	%ymm0, (%rdi)
0000000001049c9e	vmovdqa	%ymm1, 0x20(%rdi)
0000000001049ca3	vmovdqa	%ymm2, 0x40(%rdi)
0000000001049ca8	vmovdqa	%ymm3, 0x60(%rdi)
0000000001049cad	addq	%rax, %rdi
0000000001049cb0	subq	%rax, %rbx
0000000001049cb3	ja	0x1049c84
0000000001049cb5	addq	%rax, %rbx
0000000001049cb8	addq	%rdi, %rbx
0000000001049cbb	vmovdqu	%ymm4, (%r10)
0000000001049cc0	vzeroupper
0000000001049cc3	movdqu	%xmm5, -0x80(%rbx)
0000000001049cc8	movdqu	%xmm6, -0x70(%rbx)
0000000001049ccd	movdqu	%xmm7, -0x60(%rbx)
0000000001049cd2	movdqu	%xmm8, -0x50(%rbx)
0000000001049cd8	movdqu	%xmm9, -0x40(%rbx)
0000000001049cde	movdqu	%xmm10, -0x30(%rbx)
0000000001049ce4	movdqu	%xmm11, -0x20(%rbx)
0000000001049cea	movdqu	%xmm12, -0x10(%rbx)
0000000001049cf0	retq
0000000001049cf1	leaq	(%rsi,%rbx), %rcx
0000000001049cf5	movdqu	-0x80(%rsi,%rbx), %xmm5
0000000001049cfb	movdqu	-0x70(%rcx), %xmm6
0000000001049d00	movdqu	-0x60(%rcx), %xmm7
0000000001049d05	movdqu	-0x50(%rcx), %xmm8
0000000001049d0b	movdqu	-0x40(%rcx), %xmm9
0000000001049d11	movdqu	-0x30(%rcx), %xmm10
0000000001049d17	movdqu	-0x20(%rcx), %xmm11
0000000001049d1d	movdqu	-0x10(%rcx), %xmm12
0000000001049d23	vmovdqu	(%rsi), %ymm4
0000000001049d27	movq	%rdi, %r8
0000000001049d2a	andq	$-0x20, %rdi
0000000001049d2e	addq	$0x20, %rdi
0000000001049d32	movq	%rdi, %r10
0000000001049d35	subq	%r8, %r10
0000000001049d38	subq	%r10, %rbx
0000000001049d3b	addq	%r10, %rsi
0000000001049d3e	leaq	(%rdi,%rbx), %rcx
0000000001049d42	subq	$0x80, %rbx
0000000001049d49	prefetchnta	0x1c0(%rsi)
0000000001049d50	prefetchnta	0x280(%rsi)
0000000001049d57	vmovdqu	(%rsi), %ymm0
0000000001049d5b	vmovdqu	0x20(%rsi), %ymm1
0000000001049d60	vmovdqu	0x40(%rsi), %ymm2
0000000001049d65	vmovdqu	0x60(%rsi), %ymm3
0000000001049d6a	addq	$0x80, %rsi
0000000001049d71	vmovntdq	%ymm0, (%rdi)
0000000001049d75	vmovntdq	%ymm1, 0x20(%rdi)
0000000001049d7a	vmovntdq	%ymm2, 0x40(%rdi)
0000000001049d7f	vmovntdq	%ymm3, 0x60(%rdi)
0000000001049d84	addq	$0x80, %rdi
0000000001049d8b	subq	$0x80, %rbx
0000000001049d92	ja	0x1049d49
0000000001049d94	sfence
0000000001049d97	vmovdqu	%ymm4, (%r8)
0000000001049d9c	vzeroupper
0000000001049d9f	movdqu	%xmm5, -0x80(%rcx)
0000000001049da4	movdqu	%xmm6, -0x70(%rcx)
0000000001049da9	movdqu	%xmm7, -0x60(%rcx)
0000000001049dae	movdqu	%xmm8, -0x50(%rcx)
0000000001049db4	movdqu	%xmm9, -0x40(%rcx)
0000000001049dba	movdqu	%xmm10, -0x30(%rcx)
0000000001049dc0	movdqu	%xmm11, -0x20(%rcx)
0000000001049dc6	movdqu	%xmm12, -0x10(%rcx)
0000000001049dcc	retq
0000000001049dcd	movq	%rdi, %rax
0000000001049dd0	movdqu	(%rsi), %xmm5
0000000001049dd4	movdqu	0x10(%rsi), %xmm6
0000000001049dd9	addq	%rbx, %rdi
0000000001049ddc	movdqu	0x20(%rsi), %xmm7
0000000001049de1	movdqu	0x30(%rsi), %xmm8
0000000001049de7	leaq	-0x20(%rdi), %r10
0000000001049deb	movq	%rdi, %r11
0000000001049dee	movdqu	0x40(%rsi), %xmm9
0000000001049df4	movdqu	0x50(%rsi), %xmm10
0000000001049dfa	andq	$0x1f, %r11
0000000001049dfe	movdqu	0x60(%rsi), %xmm11
0000000001049e04	movdqu	0x70(%rsi), %xmm12
0000000001049e0a	xorq	%r11, %rdi
0000000001049e0d	addq	%rbx, %rsi
0000000001049e10	vmovdqu	-0x20(%rsi), %ymm4
0000000001049e15	subq	%r11, %rsi
0000000001049e18	subq	%r11, %rbx
0000000001049e1b	cmpq	$0x100000, %rbx
0000000001049e22	ja	0x1049e9f
0000000001049e24	subq	$0x80, %rbx
0000000001049e2b	vmovdqu	-0x20(%rsi), %ymm0
0000000001049e30	vmovdqu	-0x40(%rsi), %ymm1
0000000001049e35	vmovdqu	-0x60(%rsi), %ymm2
0000000001049e3a	vmovdqu	-0x80(%rsi), %ymm3
0000000001049e3f	subq	$0x80, %rsi
0000000001049e46	vmovdqa	%ymm0, -0x20(%rdi)
0000000001049e4b	vmovdqa	%ymm1, -0x40(%rdi)
0000000001049e50	vmovdqa	%ymm2, -0x60(%rdi)
0000000001049e55	vmovdqa	%ymm3, -0x80(%rdi)
0000000001049e5a	subq	$0x80, %rdi
0000000001049e61	subq	$0x80, %rbx
0000000001049e68	ja	0x1049e2b
0000000001049e6a	vmovdqu	%ymm4, (%r10)
0000000001049e6f	vzeroupper
0000000001049e72	movdqu	%xmm5, (%rax)
0000000001049e76	movdqu	%xmm6, 0x10(%rax)
0000000001049e7b	movdqu	%xmm7, 0x20(%rax)
0000000001049e80	movdqu	%xmm8, 0x30(%rax)
0000000001049e86	movdqu	%xmm9, 0x40(%rax)
0000000001049e8c	movdqu	%xmm10, 0x50(%rax)
0000000001049e92	movdqu	%xmm11, 0x60(%rax)
0000000001049e98	movdqu	%xmm12, 0x70(%rax)
0000000001049e9e	retq
0000000001049e9f	subq	$0x80, %rbx
0000000001049ea6	prefetchnta	-0x1c0(%rsi)
0000000001049ead	prefetchnta	-0x280(%rsi)
0000000001049eb4	vmovdqu	-0x20(%rsi), %ymm0
0000000001049eb9	vmovdqu	-0x40(%rsi), %ymm1
0000000001049ebe	vmovdqu	-0x60(%rsi), %ymm2
0000000001049ec3	vmovdqu	-0x80(%rsi), %ymm3
0000000001049ec8	subq	$0x80, %rsi
0000000001049ecf	vmovntdq	%ymm0, -0x20(%rdi)
0000000001049ed4	vmovntdq	%ymm1, -0x40(%rdi)
0000000001049ed9	vmovntdq	%ymm2, -0x60(%rdi)
0000000001049ede	vmovntdq	%ymm3, -0x80(%rdi)
0000000001049ee3	subq	$0x80, %rdi
0000000001049eea	subq	$0x80, %rbx
0000000001049ef1	ja	0x1049ea6
0000000001049ef3	sfence
0000000001049ef6	vmovdqu	%ymm4, (%r10)
0000000001049efb	vzeroupper
0000000001049efe	movdqu	%xmm5, (%rax)
0000000001049f02	movdqu	%xmm6, 0x10(%rax)
0000000001049f07	movdqu	%xmm7, 0x20(%rax)
0000000001049f0c	movdqu	%xmm8, 0x30(%rax)
0000000001049f12	movdqu	%xmm9, 0x40(%rax)
0000000001049f18	movdqu	%xmm10, 0x50(%rax)
0000000001049f1e	movdqu	%xmm11, 0x60(%rax)
0000000001049f24	movdqu	%xmm12, 0x70(%rax)
0000000001049f2a	retq
0000000001049f2b	int3
0000000001049f2c	int3
0000000001049f2d	int3
0000000001049f2e	int3
0000000001049f2f	int3
__rt0_amd64_darwin:
0000000001049f30	jmp	__rt0_amd64
0000000001049f35	int3
0000000001049f36	int3
0000000001049f37	int3
0000000001049f38	int3
0000000001049f39	int3
0000000001049f3a	int3
0000000001049f3b	int3
0000000001049f3c	int3
0000000001049f3d	int3
0000000001049f3e	int3
0000000001049f3f	int3
runtime.exit_trampoline:
0000000001049f40	pushq	%rbp
0000000001049f41	movq	%rsp, %rbp
0000000001049f44	movl	(%rdi), %edi
0000000001049f46	callq	0x10774a0 ## symbol stub for: _exit
0000000001049f4b	movl	$0xf1, 0xf1
0000000001049f56	popq	%rbp
0000000001049f57	retq
0000000001049f58	int3
0000000001049f59	int3
0000000001049f5a	int3
0000000001049f5b	int3
0000000001049f5c	int3
0000000001049f5d	int3
0000000001049f5e	int3
0000000001049f5f	int3
runtime.open_trampoline:
0000000001049f60	pushq	%rbp
0000000001049f61	movq	%rsp, %rbp
0000000001049f64	movl	0x8(%rdi), %esi
0000000001049f67	movl	0xc(%rdi), %edx
0000000001049f6a	movq	(%rdi), %rdi
0000000001049f6d	callq	0x10774a6 ## symbol stub for: _open
0000000001049f72	popq	%rbp
0000000001049f73	retq
0000000001049f74	int3
0000000001049f75	int3
0000000001049f76	int3
0000000001049f77	int3
0000000001049f78	int3
0000000001049f79	int3
0000000001049f7a	int3
0000000001049f7b	int3
0000000001049f7c	int3
0000000001049f7d	int3
0000000001049f7e	int3
0000000001049f7f	int3
runtime.close_trampoline:
0000000001049f80	pushq	%rbp
0000000001049f81	movq	%rsp, %rbp
0000000001049f84	movl	(%rdi), %edi
0000000001049f86	callq	0x10774ac ## symbol stub for: _close
0000000001049f8b	popq	%rbp
0000000001049f8c	retq
0000000001049f8d	int3
0000000001049f8e	int3
0000000001049f8f	int3
runtime.read_trampoline:
0000000001049f90	pushq	%rbp
0000000001049f91	movq	%rsp, %rbp
0000000001049f94	movq	0x8(%rdi), %rsi
0000000001049f98	movl	0x10(%rdi), %edx
0000000001049f9b	movl	(%rdi), %edi
0000000001049f9d	callq	0x10774b2 ## symbol stub for: _read
0000000001049fa2	popq	%rbp
0000000001049fa3	retq
0000000001049fa4	int3
0000000001049fa5	int3
0000000001049fa6	int3
0000000001049fa7	int3
0000000001049fa8	int3
0000000001049fa9	int3
0000000001049faa	int3
0000000001049fab	int3
0000000001049fac	int3
0000000001049fad	int3
0000000001049fae	int3
0000000001049faf	int3
runtime.write_trampoline:
0000000001049fb0	pushq	%rbp
0000000001049fb1	movq	%rsp, %rbp
0000000001049fb4	movq	0x8(%rdi), %rsi
0000000001049fb8	movl	0x10(%rdi), %edx
0000000001049fbb	movq	(%rdi), %rdi
0000000001049fbe	callq	0x10774b8 ## symbol stub for: _write
0000000001049fc3	popq	%rbp
0000000001049fc4	retq
0000000001049fc5	int3
0000000001049fc6	int3
0000000001049fc7	int3
0000000001049fc8	int3
0000000001049fc9	int3
0000000001049fca	int3
0000000001049fcb	int3
0000000001049fcc	int3
0000000001049fcd	int3
0000000001049fce	int3
0000000001049fcf	int3
runtime.setitimer_trampoline:
0000000001049fd0	pushq	%rbp
0000000001049fd1	movq	%rsp, %rbp
0000000001049fd4	movq	0x8(%rdi), %rsi
0000000001049fd8	movq	0x10(%rdi), %rdx
0000000001049fdc	movl	(%rdi), %edi
0000000001049fde	callq	0x10774be ## symbol stub for: _setitimer
0000000001049fe3	popq	%rbp
0000000001049fe4	retq
0000000001049fe5	int3
0000000001049fe6	int3
0000000001049fe7	int3
0000000001049fe8	int3
0000000001049fe9	int3
0000000001049fea	int3
0000000001049feb	int3
0000000001049fec	int3
0000000001049fed	int3
0000000001049fee	int3
0000000001049fef	int3
runtime.madvise_trampoline:
0000000001049ff0	pushq	%rbp
0000000001049ff1	movq	%rsp, %rbp
0000000001049ff4	movq	0x8(%rdi), %rsi
0000000001049ff8	movl	0x10(%rdi), %edx
0000000001049ffb	movq	(%rdi), %rdi
0000000001049ffe	callq	0x10774c4 ## symbol stub for: _madvise
000000000104a003	popq	%rbp
000000000104a004	retq
000000000104a005	int3
000000000104a006	int3
000000000104a007	int3
000000000104a008	int3
000000000104a009	int3
000000000104a00a	int3
000000000104a00b	int3
000000000104a00c	int3
000000000104a00d	int3
000000000104a00e	int3
000000000104a00f	int3
runtime.nanotime_trampoline:
000000000104a010	pushq	%rbp
000000000104a011	movq	%rsp, %rbp
000000000104a014	movq	%rdi, %rbx
000000000104a017	callq	0x10774ca ## symbol stub for: _mach_absolute_time
000000000104a01c	movq	%rax, (%rbx)
000000000104a01f	movl	_timebase(%rip), %esi
000000000104a025	movl	0x8abf9(%rip), %edi
000000000104a02b	testl	%edi, %edi
000000000104a02d	jne	0x104a054
000000000104a02f	subq	$0x10, %rsp
000000000104a033	movq	%rsp, %rdi
000000000104a036	callq	0x10774d0 ## symbol stub for: _mach_timebase_info
000000000104a03b	movl	(%rsp), %esi
000000000104a03e	movl	0x4(%rsp), %edi
000000000104a042	addq	$0x10, %rsp
000000000104a046	movl	%esi, _timebase(%rip)
000000000104a04c	movl	%edi, %eax
000000000104a04e	xchgl	%eax, 0x8abd0(%rip)
000000000104a054	movl	%esi, 0x8(%rbx)
000000000104a057	movl	%edi, 0xc(%rbx)
000000000104a05a	movq	%rbp, %rsp
000000000104a05d	popq	%rbp
000000000104a05e	retq
000000000104a05f	int3
runtime.walltime_trampoline:
000000000104a060	pushq	%rbp
000000000104a061	movq	%rsp, %rbp
000000000104a064	xorl	%esi, %esi
000000000104a066	callq	0x10774d6 ## symbol stub for: _gettimeofday
000000000104a06b	popq	%rbp
000000000104a06c	retq
000000000104a06d	int3
000000000104a06e	int3
000000000104a06f	int3
runtime.sigaction_trampoline:
000000000104a070	pushq	%rbp
000000000104a071	movq	%rsp, %rbp
000000000104a074	movq	0x8(%rdi), %rsi
000000000104a078	movq	0x10(%rdi), %rdx
000000000104a07c	movl	(%rdi), %edi
000000000104a07e	callq	0x10774dc ## symbol stub for: _sigaction
000000000104a083	testl	%eax, %eax
000000000104a085	je	0x104a092
000000000104a087	movl	$0xf1, 0xf1
000000000104a092	popq	%rbp
000000000104a093	retq
000000000104a094	int3
000000000104a095	int3
000000000104a096	int3
000000000104a097	int3
000000000104a098	int3
000000000104a099	int3
000000000104a09a	int3
000000000104a09b	int3
000000000104a09c	int3
000000000104a09d	int3
000000000104a09e	int3
000000000104a09f	int3
runtime.sigprocmask_trampoline:
000000000104a0a0	pushq	%rbp
000000000104a0a1	movq	%rsp, %rbp
000000000104a0a4	movq	0x8(%rdi), %rsi
000000000104a0a8	movq	0x10(%rdi), %rdx
000000000104a0ac	movl	(%rdi), %edi
000000000104a0ae	callq	0x10774e2 ## symbol stub for: _pthread_sigmask
000000000104a0b3	testl	%eax, %eax
000000000104a0b5	je	0x104a0c2
000000000104a0b7	movl	$0xf1, 0xf1
000000000104a0c2	popq	%rbp
000000000104a0c3	retq
000000000104a0c4	int3
000000000104a0c5	int3
000000000104a0c6	int3
000000000104a0c7	int3
000000000104a0c8	int3
000000000104a0c9	int3
000000000104a0ca	int3
000000000104a0cb	int3
000000000104a0cc	int3
000000000104a0cd	int3
000000000104a0ce	int3
000000000104a0cf	int3
runtime.sigaltstack_trampoline:
000000000104a0d0	pushq	%rbp
000000000104a0d1	movq	%rsp, %rbp
000000000104a0d4	movq	0x8(%rdi), %rsi
000000000104a0d8	movq	(%rdi), %rdi
000000000104a0db	callq	0x10774e8 ## symbol stub for: _sigaltstack
000000000104a0e0	testq	%rax, %rax
000000000104a0e3	je	0x104a0f0
000000000104a0e5	movl	$0xf1, 0xf1
000000000104a0f0	popq	%rbp
000000000104a0f1	retq
000000000104a0f2	int3
000000000104a0f3	int3
000000000104a0f4	int3
000000000104a0f5	int3
000000000104a0f6	int3
000000000104a0f7	int3
000000000104a0f8	int3
000000000104a0f9	int3
000000000104a0fa	int3
000000000104a0fb	int3
000000000104a0fc	int3
000000000104a0fd	int3
000000000104a0fe	int3
000000000104a0ff	int3
runtime.raiseproc_trampoline:
000000000104a100	pushq	%rbp
000000000104a101	movq	%rsp, %rbp
000000000104a104	movl	(%rdi), %ebx
000000000104a106	callq	0x10774ee ## symbol stub for: _getpid
000000000104a10b	movl	%eax, %edi
000000000104a10d	movl	%ebx, %esi
000000000104a10f	callq	0x10774f4 ## symbol stub for: _kill
000000000104a114	popq	%rbp
000000000104a115	retq
000000000104a116	int3
000000000104a117	int3
000000000104a118	int3
000000000104a119	int3
000000000104a11a	int3
000000000104a11b	int3
000000000104a11c	int3
000000000104a11d	int3
000000000104a11e	int3
000000000104a11f	int3
runtime.sigfwd:
000000000104a120	movq	0x8(%rsp), %rax
000000000104a125	movl	0x10(%rsp), %edi
000000000104a129	movq	0x18(%rsp), %rsi
000000000104a12e	movq	0x20(%rsp), %rdx
000000000104a133	pushq	%rbp
000000000104a134	movq	%rsp, %rbp
000000000104a137	andq	$-0x10, %rsp
000000000104a13b	callq	*%rax
000000000104a13d	movq	%rbp, %rsp
000000000104a140	popq	%rbp
000000000104a141	retq
000000000104a142	int3
000000000104a143	int3
000000000104a144	int3
000000000104a145	int3
000000000104a146	int3
000000000104a147	int3
000000000104a148	int3
000000000104a149	int3
000000000104a14a	int3
000000000104a14b	int3
000000000104a14c	int3
000000000104a14d	int3
000000000104a14e	int3
000000000104a14f	int3
runtime.sigtramp:
000000000104a150	pushq	%rbp
000000000104a151	movq	%rsp, %rbp
000000000104a154	subq	$0x40, %rsp
000000000104a158	movq	%rbx, 0x18(%rsp)
000000000104a15d	movq	%r12, 0x20(%rsp)
000000000104a162	movq	%r13, 0x28(%rsp)
000000000104a167	movq	%r14, 0x30(%rsp)
000000000104a16c	movq	%r15, 0x38(%rsp)
000000000104a171	movl	%edi, (%rsp)
000000000104a174	movq	%rsi, 0x8(%rsp)
000000000104a179	movq	%rdx, 0x10(%rsp)
000000000104a17e	callq	runtime.sigtrampgo
000000000104a183	movq	0x18(%rsp), %rbx
000000000104a188	movq	0x20(%rsp), %r12
000000000104a18d	movq	0x28(%rsp), %r13
000000000104a192	movq	0x30(%rsp), %r14
000000000104a197	movq	0x38(%rsp), %r15
000000000104a19c	movq	%rbp, %rsp
000000000104a19f	popq	%rbp
000000000104a1a0	retq
000000000104a1a1	int3
000000000104a1a2	int3
000000000104a1a3	int3
000000000104a1a4	int3
000000000104a1a5	int3
000000000104a1a6	int3
000000000104a1a7	int3
000000000104a1a8	int3
000000000104a1a9	int3
000000000104a1aa	int3
000000000104a1ab	int3
000000000104a1ac	int3
000000000104a1ad	int3
000000000104a1ae	int3
000000000104a1af	int3
runtime.cgoSigtramp:
000000000104a1b0	movq	runtime.cgoTraceback(%rip), %rax
000000000104a1b7	testq	%rax, %rax
000000000104a1ba	je	0x104a22b
000000000104a1bc	movq	runtime.bss(%rip), %rax
000000000104a1c3	testq	%rax, %rax
000000000104a1c6	je	0x104a22b
000000000104a1c8	movq	%gs:0x30, %rax
000000000104a1d1	testq	%rax, %rax
000000000104a1d4	je	0x104a230
000000000104a1d6	movq	0x30(%rax), %rax
000000000104a1da	testq	%rax, %rax
000000000104a1dd	je	0x104a22b
000000000104a1df	movl	0x130(%rax), %ecx
000000000104a1e5	testl	%ecx, %ecx
000000000104a1e7	je	0x104a22b
000000000104a1e9	movq	0xc0(%rax), %rcx
000000000104a1f0	testq	%rcx, %rcx
000000000104a1f3	je	0x104a22b
000000000104a1f5	movq	0x70(%rcx), %rcx
000000000104a1f9	testq	%rcx, %rcx
000000000104a1fc	je	0x104a22b
000000000104a1fe	movq	0x138(%rax), %r8
000000000104a205	testq	%r8, %r8
000000000104a208	je	0x104a22b
000000000104a20a	movl	0x134(%rax), %ecx
000000000104a210	testl	%ecx, %ecx
000000000104a212	jne	0x104a22b
000000000104a214	movq	runtime.cgoTraceback(%rip), %rcx
000000000104a21b	leaq	runtime.sigtramp(%rip), %r9
000000000104a222	movq	runtime.bss(%rip), %rax
000000000104a229	jmpq	*%rax
000000000104a22b	jmp	runtime.sigtramp
000000000104a230	cmpl	$0x1b, %edi
000000000104a233	jne	0x104a22b
000000000104a235	movl	$0x0, %eax
000000000104a23a	movl	$0x1, %ecx
000000000104a23f	leaq	runtime.sigprofCallersUse(%rip), %r11
000000000104a246	lock
000000000104a247	cmpxchgl	%ecx, (%r11)
000000000104a24b	jne	0x104a22b
000000000104a24d	movq	runtime.cgoTraceback(%rip), %rcx
000000000104a254	leaq	runtime.sigprofCallers(%rip), %r8
000000000104a25b	leaq	runtime.sigprofNonGo(%rip), %r9
000000000104a262	movq	runtime.bss(%rip), %rax
000000000104a269	jmpq	*%rax
000000000104a26b	int3
000000000104a26c	int3
000000000104a26d	int3
000000000104a26e	int3
000000000104a26f	int3
runtime.mmap_trampoline:
000000000104a270	pushq	%rbp
000000000104a271	movq	%rsp, %rbp
000000000104a274	movq	%rdi, %rbx
000000000104a277	movq	(%rbx), %rdi
000000000104a27a	movq	0x8(%rbx), %rsi
000000000104a27e	movl	0x10(%rbx), %edx
000000000104a281	movl	0x14(%rbx), %ecx
000000000104a284	movl	0x18(%rbx), %r8d
000000000104a288	movl	0x1c(%rbx), %r9d
000000000104a28c	callq	0x10774fa ## symbol stub for: _mmap
000000000104a291	xorl	%edx, %edx
000000000104a293	cmpq	$-0x1, %rax
000000000104a297	jne	0x104a2a3
000000000104a299	callq	0x1077500 ## symbol stub for: ___error
000000000104a29e	movslq	(%rax), %rdx
000000000104a2a1	xorl	%eax, %eax
000000000104a2a3	movq	%rax, 0x20(%rbx)
000000000104a2a7	movq	%rdx, 0x28(%rbx)
000000000104a2ab	popq	%rbp
000000000104a2ac	retq
000000000104a2ad	int3
000000000104a2ae	int3
000000000104a2af	int3
runtime.munmap_trampoline:
000000000104a2b0	pushq	%rbp
000000000104a2b1	movq	%rsp, %rbp
000000000104a2b4	movq	0x8(%rdi), %rsi
000000000104a2b8	movq	(%rdi), %rdi
000000000104a2bb	callq	0x1077506 ## symbol stub for: _munmap
000000000104a2c0	testq	%rax, %rax
000000000104a2c3	je	0x104a2d0
000000000104a2c5	movl	$0xf1, 0xf1
000000000104a2d0	popq	%rbp
000000000104a2d1	retq
000000000104a2d2	int3
000000000104a2d3	int3
000000000104a2d4	int3
000000000104a2d5	int3
000000000104a2d6	int3
000000000104a2d7	int3
000000000104a2d8	int3
000000000104a2d9	int3
000000000104a2da	int3
000000000104a2db	int3
000000000104a2dc	int3
000000000104a2dd	int3
000000000104a2de	int3
000000000104a2df	int3
runtime.usleep_trampoline:
000000000104a2e0	pushq	%rbp
000000000104a2e1	movq	%rsp, %rbp
000000000104a2e4	movl	(%rdi), %edi
000000000104a2e6	callq	0x107750c ## symbol stub for: _usleep
000000000104a2eb	popq	%rbp
000000000104a2ec	retq
000000000104a2ed	int3
000000000104a2ee	int3
000000000104a2ef	int3
runtime.settls:
000000000104a2f0	subq	$0x28, %rsp
000000000104a2f4	movq	%rbp, 0x20(%rsp)
000000000104a2f9	leaq	0x20(%rsp), %rbp
000000000104a2fe	movq	0x20(%rsp), %rbp
000000000104a303	addq	$0x28, %rsp
000000000104a307	retq
000000000104a308	int3
000000000104a309	int3
000000000104a30a	int3
000000000104a30b	int3
000000000104a30c	int3
000000000104a30d	int3
000000000104a30e	int3
000000000104a30f	int3
runtime.sysctl_trampoline:
000000000104a310	pushq	%rbp
000000000104a311	movq	%rsp, %rbp
000000000104a314	movl	0x8(%rdi), %esi
000000000104a317	movq	0x10(%rdi), %rdx
000000000104a31b	movq	0x18(%rdi), %rcx
000000000104a31f	movq	0x20(%rdi), %r8
000000000104a323	movq	0x28(%rdi), %r9
000000000104a327	movq	(%rdi), %rdi
000000000104a32a	callq	0x1077512 ## symbol stub for: _sysctl
000000000104a32f	popq	%rbp
000000000104a330	retq
000000000104a331	int3
000000000104a332	int3
000000000104a333	int3
000000000104a334	int3
000000000104a335	int3
000000000104a336	int3
000000000104a337	int3
000000000104a338	int3
000000000104a339	int3
000000000104a33a	int3
000000000104a33b	int3
000000000104a33c	int3
000000000104a33d	int3
000000000104a33e	int3
000000000104a33f	int3
runtime.kevent_trampoline:
000000000104a340	pushq	%rbp
000000000104a341	movq	%rsp, %rbp
000000000104a344	movq	0x8(%rdi), %rsi
000000000104a348	movl	0x10(%rdi), %edx
000000000104a34b	movq	0x18(%rdi), %rcx
000000000104a34f	movl	0x20(%rdi), %r8d
000000000104a353	movq	0x28(%rdi), %r9
000000000104a357	movl	(%rdi), %edi
000000000104a359	callq	0x1077518 ## symbol stub for: _kevent
000000000104a35e	cmpq	$-0x1, %rax
000000000104a362	jne	0x104a36f
000000000104a364	callq	0x1077500 ## symbol stub for: ___error
000000000104a369	movslq	(%rax), %rax
000000000104a36c	negq	%rax
000000000104a36f	popq	%rbp
000000000104a370	retq
000000000104a371	int3
000000000104a372	int3
000000000104a373	int3
000000000104a374	int3
000000000104a375	int3
000000000104a376	int3
000000000104a377	int3
000000000104a378	int3
000000000104a379	int3
000000000104a37a	int3
000000000104a37b	int3
000000000104a37c	int3
000000000104a37d	int3
000000000104a37e	int3
000000000104a37f	int3
runtime.mstart_stub:
000000000104a380	subq	$0x28, %rsp
000000000104a384	movq	%rbx, (%rsp)
000000000104a388	movq	%r12, 0x8(%rsp)
000000000104a38d	movq	%r13, 0x10(%rsp)
000000000104a392	movq	%r14, 0x18(%rsp)
000000000104a397	movq	%r15, 0x20(%rsp)
000000000104a39c	movq	(%rdi), %rdx
000000000104a39f	movq	%rdx, %gs:0x30
000000000104a3a8	cld
000000000104a3a9	callq	runtime.mstart
000000000104a3ae	movq	(%rsp), %rbx
000000000104a3b2	movq	0x8(%rsp), %r12
000000000104a3b7	movq	0x10(%rsp), %r13
000000000104a3bc	movq	0x18(%rsp), %r14
000000000104a3c1	movq	0x20(%rsp), %r15
000000000104a3c6	xorl	%eax, %eax
000000000104a3c8	addq	$0x28, %rsp
000000000104a3cc	retq
000000000104a3cd	int3
000000000104a3ce	int3
000000000104a3cf	int3
runtime.pthread_attr_init_trampoline:
000000000104a3d0	pushq	%rbp
000000000104a3d1	movq	%rsp, %rbp
000000000104a3d4	movq	(%rdi), %rdi
000000000104a3d7	callq	0x107751e ## symbol stub for: _pthread_attr_init
000000000104a3dc	popq	%rbp
000000000104a3dd	retq
000000000104a3de	int3
000000000104a3df	int3
runtime.pthread_attr_setstacksize_trampoline:
000000000104a3e0	pushq	%rbp
000000000104a3e1	movq	%rsp, %rbp
000000000104a3e4	movq	0x8(%rdi), %rsi
000000000104a3e8	movq	(%rdi), %rdi
000000000104a3eb	callq	0x1077524 ## symbol stub for: _pthread_attr_setstacksize
000000000104a3f0	popq	%rbp
000000000104a3f1	retq
000000000104a3f2	int3
000000000104a3f3	int3
000000000104a3f4	int3
000000000104a3f5	int3
000000000104a3f6	int3
000000000104a3f7	int3
000000000104a3f8	int3
000000000104a3f9	int3
000000000104a3fa	int3
000000000104a3fb	int3
000000000104a3fc	int3
000000000104a3fd	int3
000000000104a3fe	int3
000000000104a3ff	int3
runtime.pthread_attr_setdetachstate_trampoline:
000000000104a400	pushq	%rbp
000000000104a401	movq	%rsp, %rbp
000000000104a404	movq	0x8(%rdi), %rsi
000000000104a408	movq	(%rdi), %rdi
000000000104a40b	callq	0x107752a ## symbol stub for: _pthread_attr_setdetachstate
000000000104a410	popq	%rbp
000000000104a411	retq
000000000104a412	int3
000000000104a413	int3
000000000104a414	int3
000000000104a415	int3
000000000104a416	int3
000000000104a417	int3
000000000104a418	int3
000000000104a419	int3
000000000104a41a	int3
000000000104a41b	int3
000000000104a41c	int3
000000000104a41d	int3
000000000104a41e	int3
000000000104a41f	int3
runtime.pthread_create_trampoline:
000000000104a420	pushq	%rbp
000000000104a421	movq	%rsp, %rbp
000000000104a424	subq	$0x10, %rsp
000000000104a428	movq	(%rdi), %rsi
000000000104a42b	movq	0x8(%rdi), %rdx
000000000104a42f	movq	0x10(%rdi), %rcx
000000000104a433	movq	%rsp, %rdi
000000000104a436	callq	0x1077530 ## symbol stub for: _pthread_create
000000000104a43b	movq	%rbp, %rsp
000000000104a43e	popq	%rbp
000000000104a43f	retq
runtime.raise_trampoline:
000000000104a440	pushq	%rbp
000000000104a441	movq	%rsp, %rbp
000000000104a444	movl	(%rdi), %edi
000000000104a446	callq	0x1077536 ## symbol stub for: _raise
000000000104a44b	popq	%rbp
000000000104a44c	retq
000000000104a44d	int3
000000000104a44e	int3
000000000104a44f	int3
runtime.pthread_mutex_init_trampoline:
000000000104a450	pushq	%rbp
000000000104a451	movq	%rsp, %rbp
000000000104a454	movq	0x8(%rdi), %rsi
000000000104a458	movq	(%rdi), %rdi
000000000104a45b	callq	0x107753c ## symbol stub for: _pthread_mutex_init
000000000104a460	popq	%rbp
000000000104a461	retq
000000000104a462	int3
000000000104a463	int3
000000000104a464	int3
000000000104a465	int3
000000000104a466	int3
000000000104a467	int3
000000000104a468	int3
000000000104a469	int3
000000000104a46a	int3
000000000104a46b	int3
000000000104a46c	int3
000000000104a46d	int3
000000000104a46e	int3
000000000104a46f	int3
runtime.pthread_mutex_lock_trampoline:
000000000104a470	pushq	%rbp
000000000104a471	movq	%rsp, %rbp
000000000104a474	movq	(%rdi), %rdi
000000000104a477	callq	0x1077542 ## symbol stub for: _pthread_mutex_lock
000000000104a47c	popq	%rbp
000000000104a47d	retq
000000000104a47e	int3
000000000104a47f	int3
runtime.pthread_mutex_unlock_trampoline:
000000000104a480	pushq	%rbp
000000000104a481	movq	%rsp, %rbp
000000000104a484	movq	(%rdi), %rdi
000000000104a487	callq	0x1077548 ## symbol stub for: _pthread_mutex_unlock
000000000104a48c	popq	%rbp
000000000104a48d	retq
000000000104a48e	int3
000000000104a48f	int3
runtime.pthread_cond_init_trampoline:
000000000104a490	pushq	%rbp
000000000104a491	movq	%rsp, %rbp
000000000104a494	movq	0x8(%rdi), %rsi
000000000104a498	movq	(%rdi), %rdi
000000000104a49b	callq	0x107754e ## symbol stub for: _pthread_cond_init
000000000104a4a0	popq	%rbp
000000000104a4a1	retq
000000000104a4a2	int3
000000000104a4a3	int3
000000000104a4a4	int3
000000000104a4a5	int3
000000000104a4a6	int3
000000000104a4a7	int3
000000000104a4a8	int3
000000000104a4a9	int3
000000000104a4aa	int3
000000000104a4ab	int3
000000000104a4ac	int3
000000000104a4ad	int3
000000000104a4ae	int3
000000000104a4af	int3
runtime.pthread_cond_wait_trampoline:
000000000104a4b0	pushq	%rbp
000000000104a4b1	movq	%rsp, %rbp
000000000104a4b4	movq	0x8(%rdi), %rsi
000000000104a4b8	movq	(%rdi), %rdi
000000000104a4bb	callq	0x1077554 ## symbol stub for: _pthread_cond_wait
000000000104a4c0	popq	%rbp
000000000104a4c1	retq
000000000104a4c2	int3
000000000104a4c3	int3
000000000104a4c4	int3
000000000104a4c5	int3
000000000104a4c6	int3
000000000104a4c7	int3
000000000104a4c8	int3
000000000104a4c9	int3
000000000104a4ca	int3
000000000104a4cb	int3
000000000104a4cc	int3
000000000104a4cd	int3
000000000104a4ce	int3
000000000104a4cf	int3
runtime.pthread_cond_timedwait_relative_np_trampoline:
000000000104a4d0	pushq	%rbp
000000000104a4d1	movq	%rsp, %rbp
000000000104a4d4	movq	0x8(%rdi), %rsi
000000000104a4d8	movq	0x10(%rdi), %rdx
000000000104a4dc	movq	(%rdi), %rdi
000000000104a4df	callq	0x107755a ## symbol stub for: _pthread_cond_timedwait_relative_np
000000000104a4e4	popq	%rbp
000000000104a4e5	retq
000000000104a4e6	int3
000000000104a4e7	int3
000000000104a4e8	int3
000000000104a4e9	int3
000000000104a4ea	int3
000000000104a4eb	int3
000000000104a4ec	int3
000000000104a4ed	int3
000000000104a4ee	int3
000000000104a4ef	int3
runtime.pthread_cond_signal_trampoline:
000000000104a4f0	pushq	%rbp
000000000104a4f1	movq	%rsp, %rbp
000000000104a4f4	movq	(%rdi), %rdi
000000000104a4f7	callq	0x1077560 ## symbol stub for: _pthread_cond_signal
000000000104a4fc	popq	%rbp
000000000104a4fd	retq
000000000104a4fe	int3
000000000104a4ff	int3
runtime.(*itabTableType).add-fm:
000000000104a500	movq	%gs:0x30, %rcx
000000000104a509	cmpq	0x10(%rcx), %rsp
000000000104a50d	jbe	0x104a53e
000000000104a50f	subq	$0x18, %rsp
000000000104a513	movq	%rbp, 0x10(%rsp)
000000000104a518	leaq	0x10(%rsp), %rbp
000000000104a51d	movq	0x8(%rdx), %rax
000000000104a521	movq	%rax, (%rsp)
000000000104a525	movq	0x20(%rsp), %rax
000000000104a52a	movq	%rax, 0x8(%rsp)
000000000104a52f	callq	"runtime.(*itabTableType).add"
000000000104a534	movq	0x10(%rsp), %rbp
000000000104a539	addq	$0x18, %rsp
000000000104a53d	retq
000000000104a53e	callq	runtime.morestack
000000000104a543	jmp	"runtime.(*itabTableType).add-fm"
000000000104a545	int3
000000000104a546	int3
000000000104a547	int3
000000000104a548	int3
000000000104a549	int3
000000000104a54a	int3
000000000104a54b	int3
000000000104a54c	int3
000000000104a54d	int3
000000000104a54e	int3
000000000104a54f	int3
type..hash.runtime.uncommontype:
000000000104a550	movq	%gs:0x30, %rcx
000000000104a559	cmpq	0x10(%rcx), %rsp
000000000104a55d	jbe	0x104a5a2
000000000104a55f	subq	$0x28, %rsp
000000000104a563	movq	%rbp, 0x20(%rsp)
000000000104a568	leaq	0x20(%rsp), %rbp
000000000104a56d	movq	0x30(%rsp), %rax
000000000104a572	movq	%rax, (%rsp)
000000000104a576	movq	0x38(%rsp), %rax
000000000104a57b	movq	%rax, 0x8(%rsp)
000000000104a580	movq	$0xc, 0x10(%rsp)
000000000104a589	callq	runtime.memhash
000000000104a58e	movq	0x18(%rsp), %rax
000000000104a593	movq	%rax, 0x40(%rsp)
000000000104a598	movq	0x20(%rsp), %rbp
000000000104a59d	addq	$0x28, %rsp
000000000104a5a1	retq
000000000104a5a2	callq	runtime.morestack_noctxt
000000000104a5a7	jmp	type..hash.runtime.uncommontype
000000000104a5a9	int3
000000000104a5aa	int3
000000000104a5ab	int3
000000000104a5ac	int3
000000000104a5ad	int3
000000000104a5ae	int3
000000000104a5af	int3
type..eq.runtime.uncommontype:
000000000104a5b0	movq	%gs:0x30, %rcx
000000000104a5b9	cmpq	0x10(%rcx), %rsp
000000000104a5bd	jbe	0x104a601
000000000104a5bf	subq	$0x28, %rsp
000000000104a5c3	movq	%rbp, 0x20(%rsp)
000000000104a5c8	leaq	0x20(%rsp), %rbp
000000000104a5cd	movq	0x38(%rsp), %rax
000000000104a5d2	movq	%rax, 0x8(%rsp)
000000000104a5d7	movq	0x30(%rsp), %rax
000000000104a5dc	movq	%rax, (%rsp)
000000000104a5e0	movq	$0xc, 0x10(%rsp)
000000000104a5e9	callq	runtime.memequal
000000000104a5ee	movzbl	0x18(%rsp), %eax
000000000104a5f3	movb	%al, 0x40(%rsp)
000000000104a5f7	movq	0x20(%rsp), %rbp
000000000104a5fc	addq	$0x28, %rsp
000000000104a600	retq
000000000104a601	callq	runtime.morestack_noctxt
000000000104a606	jmp	type..eq.runtime.uncommontype
000000000104a608	int3
000000000104a609	int3
000000000104a60a	int3
000000000104a60b	int3
000000000104a60c	int3
000000000104a60d	int3
000000000104a60e	int3
000000000104a60f	int3
type..hash.runtime.itab:
000000000104a610	movq	%gs:0x30, %rcx
000000000104a619	cmpq	0x10(%rcx), %rsp
000000000104a61d	jbe	0x104a687
000000000104a61f	subq	$0x28, %rsp
000000000104a623	movq	%rbp, 0x20(%rsp)
000000000104a628	leaq	0x20(%rsp), %rbp
000000000104a62d	movq	0x30(%rsp), %rax
000000000104a632	movq	%rax, (%rsp)
000000000104a636	movq	0x38(%rsp), %rcx
000000000104a63b	movq	%rcx, 0x8(%rsp)
000000000104a640	movq	$0x14, 0x10(%rsp)
000000000104a649	callq	runtime.memhash
000000000104a64e	movq	0x18(%rsp), %rax
000000000104a653	movq	0x30(%rsp), %rcx
000000000104a658	addq	$0x18, %rcx
000000000104a65c	movq	%rcx, (%rsp)
000000000104a660	movq	%rax, 0x8(%rsp)
000000000104a665	movq	$0x8, 0x10(%rsp)
000000000104a66e	callq	runtime.memhash
000000000104a673	movq	0x18(%rsp), %rax
000000000104a678	movq	%rax, 0x40(%rsp)
000000000104a67d	movq	0x20(%rsp), %rbp
000000000104a682	addq	$0x28, %rsp
000000000104a686	retq
000000000104a687	callq	runtime.morestack_noctxt
000000000104a68c	jmp	type..hash.runtime.itab
000000000104a68e	int3
000000000104a68f	int3
type..eq.runtime.itab:
000000000104a690	movq	%gs:0x30, %rcx
000000000104a699	cmpq	0x10(%rcx), %rsp
000000000104a69d	jbe	0x104a6ff
000000000104a69f	subq	$0x28, %rsp
000000000104a6a3	movq	%rbp, 0x20(%rsp)
000000000104a6a8	leaq	0x20(%rsp), %rbp
000000000104a6ad	movq	0x38(%rsp), %rax
000000000104a6b2	movq	%rax, 0x8(%rsp)
000000000104a6b7	movq	0x30(%rsp), %rcx
000000000104a6bc	movq	%rcx, (%rsp)
000000000104a6c0	movq	$0x14, 0x10(%rsp)
000000000104a6c9	callq	runtime.memequal
000000000104a6ce	leaq	0x18(%rsp), %rax
000000000104a6d3	cmpb	$0x0, (%rax)
000000000104a6d6	je	0x104a6fb
000000000104a6d8	movq	0x38(%rsp), %rax
000000000104a6dd	movq	0x18(%rax), %rax
000000000104a6e1	movq	0x30(%rsp), %rcx
000000000104a6e6	cmpq	%rax, 0x18(%rcx)
000000000104a6ea	sete	%al
000000000104a6ed	movb	%al, 0x40(%rsp)
000000000104a6f1	movq	0x20(%rsp), %rbp
000000000104a6f6	addq	$0x28, %rsp
000000000104a6fa	retq
000000000104a6fb	xorl	%eax, %eax
000000000104a6fd	jmp	0x104a6ed
000000000104a6ff	callq	runtime.morestack_noctxt
000000000104a704	jmp	type..eq.runtime.itab
000000000104a706	int3
000000000104a707	int3
000000000104a708	int3
000000000104a709	int3
000000000104a70a	int3
000000000104a70b	int3
000000000104a70c	int3
000000000104a70d	int3
000000000104a70e	int3
000000000104a70f	int3
type..hash.runtime.modulehash:
000000000104a710	movq	%gs:0x30, %rcx
000000000104a719	cmpq	0x10(%rcx), %rsp
000000000104a71d	jbe	0x104a79a
000000000104a71f	subq	$0x28, %rsp
000000000104a723	movq	%rbp, 0x20(%rsp)
000000000104a728	leaq	0x20(%rsp), %rbp
000000000104a72d	movq	0x30(%rsp), %rax
000000000104a732	movq	%rax, (%rsp)
000000000104a736	movq	0x38(%rsp), %rcx
000000000104a73b	movq	%rcx, 0x8(%rsp)
000000000104a740	callq	runtime.strhash
000000000104a745	movq	0x10(%rsp), %rax
000000000104a74a	movq	0x30(%rsp), %rcx
000000000104a74f	leaq	0x10(%rcx), %rdx
000000000104a753	movq	%rdx, (%rsp)
000000000104a757	movq	%rax, 0x8(%rsp)
000000000104a75c	callq	runtime.strhash
000000000104a761	movq	0x10(%rsp), %rax
000000000104a766	movq	0x30(%rsp), %rcx
000000000104a76b	addq	$0x20, %rcx
000000000104a76f	movq	%rcx, (%rsp)
000000000104a773	movq	%rax, 0x8(%rsp)
000000000104a778	movq	$0x8, 0x10(%rsp)
000000000104a781	callq	runtime.memhash
000000000104a786	movq	0x18(%rsp), %rax
000000000104a78b	movq	%rax, 0x40(%rsp)
000000000104a790	movq	0x20(%rsp), %rbp
000000000104a795	addq	$0x28, %rsp
000000000104a799	retq
000000000104a79a	callq	runtime.morestack_noctxt
000000000104a79f	jmp	type..hash.runtime.modulehash
000000000104a7a4	int3
000000000104a7a5	int3
000000000104a7a6	int3
000000000104a7a7	int3
000000000104a7a8	int3
000000000104a7a9	int3
000000000104a7aa	int3
000000000104a7ab	int3
000000000104a7ac	int3
000000000104a7ad	int3
000000000104a7ae	int3
000000000104a7af	int3
type..eq.runtime.modulehash:
000000000104a7b0	movq	%gs:0x30, %rcx
000000000104a7b9	cmpq	0x10(%rcx), %rsp
000000000104a7bd	jbe	0x104a87b
000000000104a7c3	subq	$0x28, %rsp
000000000104a7c7	movq	%rbp, 0x20(%rsp)
000000000104a7cc	leaq	0x20(%rsp), %rbp
000000000104a7d1	movq	0x38(%rsp), %rax
000000000104a7d6	movq	0x8(%rax), %rcx
000000000104a7da	movq	0x30(%rsp), %rdx
000000000104a7df	movq	0x8(%rdx), %rbx
000000000104a7e3	movq	(%rdx), %rsi
000000000104a7e6	movq	(%rax), %rdi
000000000104a7e9	cmpq	%rbx, %rcx
000000000104a7ec	je	0x104a854
000000000104a7ee	xorl	%ecx, %ecx
000000000104a7f0	testb	%cl, %cl
000000000104a7f2	je	0x104a850
000000000104a7f4	movq	0x18(%rax), %rcx
000000000104a7f8	movq	0x18(%rdx), %rbx
000000000104a7fc	movq	0x10(%rdx), %rsi
000000000104a800	movq	0x10(%rax), %rdi
000000000104a804	cmpq	%rcx, %rbx
000000000104a807	je	0x104a82c
000000000104a809	xorl	%ecx, %ecx
000000000104a80b	testb	%cl, %cl
000000000104a80d	je	0x104a828
000000000104a80f	movq	0x20(%rax), %rax
000000000104a813	cmpq	%rax, 0x20(%rdx)
000000000104a817	sete	%al
000000000104a81a	movb	%al, 0x40(%rsp)
000000000104a81e	movq	0x20(%rsp), %rbp
000000000104a823	addq	$0x28, %rsp
000000000104a827	retq
000000000104a828	xorl	%eax, %eax
000000000104a82a	jmp	0x104a81a
000000000104a82c	movq	%rsi, (%rsp)
000000000104a830	movq	%rdi, 0x8(%rsp)
000000000104a835	movq	%rbx, 0x10(%rsp)
000000000104a83a	callq	runtime.memequal
000000000104a83f	movzbl	0x18(%rsp), %ecx
000000000104a844	movq	0x38(%rsp), %rax
000000000104a849	movq	0x30(%rsp), %rdx
000000000104a84e	jmp	0x104a80b
000000000104a850	xorl	%ecx, %ecx
000000000104a852	jmp	0x104a80b
000000000104a854	movq	%rsi, (%rsp)
000000000104a858	movq	%rdi, 0x8(%rsp)
000000000104a85d	movq	%rbx, 0x10(%rsp)
000000000104a862	callq	runtime.memequal
000000000104a867	movzbl	0x18(%rsp), %ecx
000000000104a86c	movq	0x38(%rsp), %rax
000000000104a871	movq	0x30(%rsp), %rdx
000000000104a876	jmp	0x104a7f0
000000000104a87b	callq	runtime.morestack_noctxt
000000000104a880	jmp	type..eq.runtime.modulehash
000000000104a885	int3
000000000104a886	int3
000000000104a887	int3
000000000104a888	int3
000000000104a889	int3
000000000104a88a	int3
000000000104a88b	int3
000000000104a88c	int3
000000000104a88d	int3
000000000104a88e	int3
000000000104a88f	int3
type..hash.runtime.bitvector:
000000000104a890	movq	%gs:0x30, %rcx
000000000104a899	cmpq	0x10(%rcx), %rsp
000000000104a89d	jbe	0x104a907
000000000104a89f	subq	$0x28, %rsp
000000000104a8a3	movq	%rbp, 0x20(%rsp)
000000000104a8a8	leaq	0x20(%rsp), %rbp
000000000104a8ad	movq	0x30(%rsp), %rax
000000000104a8b2	movq	%rax, (%rsp)
000000000104a8b6	movq	0x38(%rsp), %rcx
000000000104a8bb	movq	%rcx, 0x8(%rsp)
000000000104a8c0	movq	$0x4, 0x10(%rsp)
000000000104a8c9	callq	runtime.memhash
000000000104a8ce	movq	0x18(%rsp), %rax
000000000104a8d3	movq	0x30(%rsp), %rcx
000000000104a8d8	addq	$0x8, %rcx
000000000104a8dc	movq	%rcx, (%rsp)
000000000104a8e0	movq	%rax, 0x8(%rsp)
000000000104a8e5	movq	$0x8, 0x10(%rsp)
000000000104a8ee	callq	runtime.memhash
000000000104a8f3	movq	0x18(%rsp), %rax
000000000104a8f8	movq	%rax, 0x40(%rsp)
000000000104a8fd	movq	0x20(%rsp), %rbp
000000000104a902	addq	$0x28, %rsp
000000000104a906	retq
000000000104a907	callq	runtime.morestack_noctxt
000000000104a90c	jmp	type..hash.runtime.bitvector
000000000104a90e	int3
000000000104a90f	int3
type..eq.runtime.bitvector:
000000000104a910	movq	0x10(%rsp), %rax
000000000104a915	movl	(%rax), %ecx
000000000104a917	movq	0x8(%rsp), %rdx
000000000104a91c	cmpl	%ecx, (%rdx)
000000000104a91e	jne	0x104a930
000000000104a920	movq	0x8(%rax), %rax
000000000104a924	cmpq	%rax, 0x8(%rdx)
000000000104a928	sete	%al
000000000104a92b	movb	%al, 0x18(%rsp)
000000000104a92f	retq
000000000104a930	xorl	%eax, %eax
000000000104a932	jmp	0x104a92b
000000000104a934	int3
000000000104a935	int3
000000000104a936	int3
000000000104a937	int3
000000000104a938	int3
000000000104a939	int3
000000000104a93a	int3
000000000104a93b	int3
000000000104a93c	int3
000000000104a93d	int3
000000000104a93e	int3
000000000104a93f	int3
type..hash.runtime.TypeAssertionError:
000000000104a940	movq	%gs:0x30, %rcx
000000000104a949	cmpq	0x10(%rcx), %rsp
000000000104a94d	jbe	0x104a9ae
000000000104a94f	subq	$0x28, %rsp
000000000104a953	movq	%rbp, 0x20(%rsp)
000000000104a958	leaq	0x20(%rsp), %rbp
000000000104a95d	movq	0x30(%rsp), %rax
000000000104a962	movq	%rax, (%rsp)
000000000104a966	movq	0x38(%rsp), %rcx
000000000104a96b	movq	%rcx, 0x8(%rsp)
000000000104a970	movq	$0x18, 0x10(%rsp)
000000000104a979	callq	runtime.memhash
000000000104a97e	movq	0x18(%rsp), %rax
000000000104a983	movq	0x30(%rsp), %rcx
000000000104a988	addq	$0x18, %rcx
000000000104a98c	movq	%rcx, (%rsp)
000000000104a990	movq	%rax, 0x8(%rsp)
000000000104a995	callq	runtime.strhash
000000000104a99a	movq	0x10(%rsp), %rax
000000000104a99f	movq	%rax, 0x40(%rsp)
000000000104a9a4	movq	0x20(%rsp), %rbp
000000000104a9a9	addq	$0x28, %rsp
000000000104a9ad	retq
000000000104a9ae	callq	runtime.morestack_noctxt
000000000104a9b3	jmp	type..hash.runtime.TypeAssertionError
000000000104a9b5	int3
000000000104a9b6	int3
000000000104a9b7	int3
000000000104a9b8	int3
000000000104a9b9	int3
000000000104a9ba	int3
000000000104a9bb	int3
000000000104a9bc	int3
000000000104a9bd	int3
000000000104a9be	int3
000000000104a9bf	int3
type..eq.runtime.TypeAssertionError:
000000000104a9c0	movq	%gs:0x30, %rcx
000000000104a9c9	cmpq	0x10(%rcx), %rsp
000000000104a9cd	jbe	0x104aa59
000000000104a9d3	subq	$0x28, %rsp
000000000104a9d7	movq	%rbp, 0x20(%rsp)
000000000104a9dc	leaq	0x20(%rsp), %rbp
000000000104a9e1	movq	0x38(%rsp), %rax
000000000104a9e6	movq	%rax, 0x8(%rsp)
000000000104a9eb	movq	0x30(%rsp), %rcx
000000000104a9f0	movq	%rcx, (%rsp)
000000000104a9f4	movq	$0x18, 0x10(%rsp)
000000000104a9fd	callq	runtime.memequal
000000000104aa02	leaq	0x18(%rsp), %rax
000000000104aa07	cmpb	$0x0, (%rax)
000000000104aa0a	je	0x104aa55
000000000104aa0c	movq	0x38(%rsp), %rax
000000000104aa11	movq	0x20(%rax), %rcx
000000000104aa15	movq	0x18(%rax), %rax
000000000104aa19	movq	0x30(%rsp), %rdx
000000000104aa1e	movq	0x20(%rdx), %rbx
000000000104aa22	movq	0x18(%rdx), %rdx
000000000104aa26	cmpq	%rcx, %rbx
000000000104aa29	je	0x104aa3b
000000000104aa2b	xorl	%eax, %eax
000000000104aa2d	movb	%al, 0x40(%rsp)
000000000104aa31	movq	0x20(%rsp), %rbp
000000000104aa36	addq	$0x28, %rsp
000000000104aa3a	retq
000000000104aa3b	movq	%rdx, (%rsp)
000000000104aa3f	movq	%rax, 0x8(%rsp)
000000000104aa44	movq	%rbx, 0x10(%rsp)
000000000104aa49	callq	runtime.memequal
000000000104aa4e	movzbl	0x18(%rsp), %eax
000000000104aa53	jmp	0x104aa2d
000000000104aa55	xorl	%eax, %eax
000000000104aa57	jmp	0x104aa2d
000000000104aa59	callq	runtime.morestack_noctxt
000000000104aa5e	jmp	type..eq.runtime.TypeAssertionError
000000000104aa63	int3
000000000104aa64	int3
000000000104aa65	int3
000000000104aa66	int3
000000000104aa67	int3
000000000104aa68	int3
000000000104aa69	int3
000000000104aa6a	int3
000000000104aa6b	int3
000000000104aa6c	int3
000000000104aa6d	int3
000000000104aa6e	int3
000000000104aa6f	int3
type..hash.runtime._panic:
000000000104aa70	movq	%gs:0x30, %rcx
000000000104aa79	cmpq	0x10(%rcx), %rsp
000000000104aa7d	jbe	0x104ab07
000000000104aa83	subq	$0x28, %rsp
000000000104aa87	movq	%rbp, 0x20(%rsp)
000000000104aa8c	leaq	0x20(%rsp), %rbp
000000000104aa91	movq	0x30(%rsp), %rax
000000000104aa96	movq	%rax, (%rsp)
000000000104aa9a	movq	0x38(%rsp), %rcx
000000000104aa9f	movq	%rcx, 0x8(%rsp)
000000000104aaa4	movq	$0x8, 0x10(%rsp)
000000000104aaad	callq	runtime.memhash
000000000104aab2	movq	0x18(%rsp), %rax
000000000104aab7	movq	0x30(%rsp), %rcx
000000000104aabc	leaq	0x8(%rcx), %rdx
000000000104aac0	movq	%rdx, (%rsp)
000000000104aac4	movq	%rax, 0x8(%rsp)
000000000104aac9	callq	runtime.nilinterhash
000000000104aace	movq	0x10(%rsp), %rax
000000000104aad3	movq	0x30(%rsp), %rcx
000000000104aad8	addq	$0x18, %rcx
000000000104aadc	movq	%rcx, (%rsp)
000000000104aae0	movq	%rax, 0x8(%rsp)
000000000104aae5	movq	$0xa, 0x10(%rsp)
000000000104aaee	callq	runtime.memhash
000000000104aaf3	movq	0x18(%rsp), %rax
000000000104aaf8	movq	%rax, 0x40(%rsp)
000000000104aafd	movq	0x20(%rsp), %rbp
000000000104ab02	addq	$0x28, %rsp
000000000104ab06	retq
000000000104ab07	callq	runtime.morestack_noctxt
000000000104ab0c	jmp	type..hash.runtime._panic
000000000104ab11	int3
000000000104ab12	int3
000000000104ab13	int3
000000000104ab14	int3
000000000104ab15	int3
000000000104ab16	int3
000000000104ab17	int3
000000000104ab18	int3
000000000104ab19	int3
000000000104ab1a	int3
000000000104ab1b	int3
000000000104ab1c	int3
000000000104ab1d	int3
000000000104ab1e	int3
000000000104ab1f	int3
type..eq.runtime._panic:
000000000104ab20	movq	%gs:0x30, %rcx
000000000104ab29	cmpq	0x10(%rcx), %rsp
000000000104ab2d	jbe	0x104abcc
000000000104ab33	subq	$0x28, %rsp
000000000104ab37	movq	%rbp, 0x20(%rsp)
000000000104ab3c	leaq	0x20(%rsp), %rbp
000000000104ab41	movq	0x38(%rsp), %rax
000000000104ab46	movq	(%rax), %rcx
000000000104ab49	movq	0x30(%rsp), %rdx
000000000104ab4e	cmpq	%rcx, (%rdx)
000000000104ab51	jne	0x104abc8
000000000104ab53	movq	0x10(%rax), %rcx
000000000104ab57	movq	0x8(%rax), %rbx
000000000104ab5b	movq	0x10(%rdx), %rsi
000000000104ab5f	movq	0x8(%rdx), %rdi
000000000104ab63	cmpq	%rbx, %rdi
000000000104ab66	je	0x104aba4
000000000104ab68	xorl	%ecx, %ecx
000000000104ab6a	testb	%cl, %cl
000000000104ab6c	jne	0x104ab7e
000000000104ab6e	xorl	%eax, %eax
000000000104ab70	movb	%al, 0x40(%rsp)
000000000104ab74	movq	0x20(%rsp), %rbp
000000000104ab79	addq	$0x28, %rsp
000000000104ab7d	retq
000000000104ab7e	addq	$0x18, %rax
000000000104ab82	movq	%rax, 0x8(%rsp)
000000000104ab87	leaq	0x18(%rdx), %rax
000000000104ab8b	movq	%rax, (%rsp)
000000000104ab8f	movq	$0xa, 0x10(%rsp)
000000000104ab98	callq	runtime.memequal
000000000104ab9d	movzbl	0x18(%rsp), %eax
000000000104aba2	jmp	0x104ab70
000000000104aba4	movq	%rdi, (%rsp)
000000000104aba8	movq	%rsi, 0x8(%rsp)
000000000104abad	movq	%rcx, 0x10(%rsp)
000000000104abb2	callq	runtime.efaceeq
000000000104abb7	movzbl	0x18(%rsp), %ecx
000000000104abbc	movq	0x38(%rsp), %rax
000000000104abc1	movq	0x30(%rsp), %rdx
000000000104abc6	jmp	0x104ab6a
000000000104abc8	xorl	%ecx, %ecx
000000000104abca	jmp	0x104ab6a
000000000104abcc	callq	runtime.morestack_noctxt
000000000104abd1	jmp	type..eq.runtime._panic
000000000104abd6	int3
000000000104abd7	int3
000000000104abd8	int3
000000000104abd9	int3
000000000104abda	int3
000000000104abdb	int3
000000000104abdc	int3
000000000104abdd	int3
000000000104abde	int3
000000000104abdf	int3
type..hash.runtime._defer:
000000000104abe0	movq	%gs:0x30, %rcx
000000000104abe9	cmpq	0x10(%rcx), %rsp
000000000104abed	jbe	0x104ac57
000000000104abef	subq	$0x28, %rsp
000000000104abf3	movq	%rbp, 0x20(%rsp)
000000000104abf8	leaq	0x20(%rsp), %rbp
000000000104abfd	movq	0x30(%rsp), %rax
000000000104ac02	movq	%rax, (%rsp)
000000000104ac06	movq	0x38(%rsp), %rcx
000000000104ac0b	movq	%rcx, 0x8(%rsp)
000000000104ac10	movq	$0x5, 0x10(%rsp)
000000000104ac19	callq	runtime.memhash
000000000104ac1e	movq	0x18(%rsp), %rax
000000000104ac23	movq	0x30(%rsp), %rcx
000000000104ac28	addq	$0x8, %rcx
000000000104ac2c	movq	%rcx, (%rsp)
000000000104ac30	movq	%rax, 0x8(%rsp)
000000000104ac35	movq	$0x28, 0x10(%rsp)
000000000104ac3e	callq	runtime.memhash
000000000104ac43	movq	0x18(%rsp), %rax
000000000104ac48	movq	%rax, 0x40(%rsp)
000000000104ac4d	movq	0x20(%rsp), %rbp
000000000104ac52	addq	$0x28, %rsp
000000000104ac56	retq
000000000104ac57	callq	runtime.morestack_noctxt
000000000104ac5c	jmp	type..hash.runtime._defer
000000000104ac5e	int3
000000000104ac5f	int3
type..eq.runtime._defer:
000000000104ac60	movq	%gs:0x30, %rcx
000000000104ac69	cmpq	0x10(%rcx), %rsp
000000000104ac6d	jbe	0x104acd0
000000000104ac6f	subq	$0x28, %rsp
000000000104ac73	movq	%rbp, 0x20(%rsp)
000000000104ac78	leaq	0x20(%rsp), %rbp
000000000104ac7d	movq	0x38(%rsp), %rax
000000000104ac82	movl	(%rax), %ecx
000000000104ac84	movq	0x30(%rsp), %rdx
000000000104ac89	cmpl	%ecx, (%rdx)
000000000104ac8b	jne	0x104accc
000000000104ac8d	movzbl	0x4(%rax), %ecx
000000000104ac91	cmpb	%cl, 0x4(%rdx)
000000000104ac94	je	0x104aca6
000000000104ac96	xorl	%eax, %eax
000000000104ac98	movb	%al, 0x40(%rsp)
000000000104ac9c	movq	0x20(%rsp), %rbp
000000000104aca1	addq	$0x28, %rsp
000000000104aca5	retq
000000000104aca6	addq	$0x8, %rax
000000000104acaa	movq	%rax, 0x8(%rsp)
000000000104acaf	leaq	0x8(%rdx), %rax
000000000104acb3	movq	%rax, (%rsp)
000000000104acb7	movq	$0x28, 0x10(%rsp)
000000000104acc0	callq	runtime.memequal
000000000104acc5	movzbl	0x18(%rsp), %eax
000000000104acca	jmp	0x104ac98
000000000104accc	xorl	%eax, %eax
000000000104acce	jmp	0x104ac98
000000000104acd0	callq	runtime.morestack_noctxt
000000000104acd5	jmp	type..eq.runtime._defer
000000000104acd7	int3
000000000104acd8	int3
000000000104acd9	int3
000000000104acda	int3
000000000104acdb	int3
000000000104acdc	int3
000000000104acdd	int3
000000000104acde	int3
000000000104acdf	int3
type..hash.runtime.arenaHint:
000000000104ace0	movq	%gs:0x30, %rcx
000000000104ace9	cmpq	0x10(%rcx), %rsp
000000000104aced	jbe	0x104ad57
000000000104acef	subq	$0x28, %rsp
000000000104acf3	movq	%rbp, 0x20(%rsp)
000000000104acf8	leaq	0x20(%rsp), %rbp
000000000104acfd	movq	0x30(%rsp), %rax
000000000104ad02	movq	%rax, (%rsp)
000000000104ad06	movq	0x38(%rsp), %rcx
000000000104ad0b	movq	%rcx, 0x8(%rsp)
000000000104ad10	movq	$0x9, 0x10(%rsp)
000000000104ad19	callq	runtime.memhash
000000000104ad1e	movq	0x18(%rsp), %rax
000000000104ad23	movq	0x30(%rsp), %rcx
000000000104ad28	addq	$0x10, %rcx
000000000104ad2c	movq	%rcx, (%rsp)
000000000104ad30	movq	%rax, 0x8(%rsp)
000000000104ad35	movq	$0x8, 0x10(%rsp)
000000000104ad3e	callq	runtime.memhash
000000000104ad43	movq	0x18(%rsp), %rax
000000000104ad48	movq	%rax, 0x40(%rsp)
000000000104ad4d	movq	0x20(%rsp), %rbp
000000000104ad52	addq	$0x28, %rsp
000000000104ad56	retq
000000000104ad57	callq	runtime.morestack_noctxt
000000000104ad5c	jmp	type..hash.runtime.arenaHint
000000000104ad5e	int3
000000000104ad5f	int3
type..eq.runtime.arenaHint:
000000000104ad60	movq	0x10(%rsp), %rax
000000000104ad65	movq	(%rax), %rcx
000000000104ad68	movq	0x8(%rsp), %rdx
000000000104ad6d	cmpq	%rcx, (%rdx)
000000000104ad70	jne	0x104ad8f
000000000104ad72	movzbl	0x8(%rax), %ecx
000000000104ad76	cmpb	%cl, 0x8(%rdx)
000000000104ad79	jne	0x104ad8b
000000000104ad7b	movq	0x10(%rax), %rax
000000000104ad7f	cmpq	%rax, 0x10(%rdx)
000000000104ad83	sete	%al
000000000104ad86	movb	%al, 0x18(%rsp)
000000000104ad8a	retq
000000000104ad8b	xorl	%eax, %eax
000000000104ad8d	jmp	0x104ad86
000000000104ad8f	xorl	%eax, %eax
000000000104ad91	jmp	0x104ad86
000000000104ad93	int3
000000000104ad94	int3
000000000104ad95	int3
000000000104ad96	int3
000000000104ad97	int3
000000000104ad98	int3
000000000104ad99	int3
000000000104ad9a	int3
000000000104ad9b	int3
000000000104ad9c	int3
000000000104ad9d	int3
000000000104ad9e	int3
000000000104ad9f	int3
type..hash.runtime.sysmontick:
000000000104ada0	movq	%gs:0x30, %rcx
000000000104ada9	cmpq	0x10(%rcx), %rsp
000000000104adad	jbe	0x104ae40
000000000104adb3	subq	$0x28, %rsp
000000000104adb7	movq	%rbp, 0x20(%rsp)
000000000104adbc	leaq	0x20(%rsp), %rbp
000000000104adc1	movq	0x30(%rsp), %rax
000000000104adc6	movq	%rax, (%rsp)
000000000104adca	movq	0x38(%rsp), %rcx
000000000104adcf	movq	%rcx, 0x8(%rsp)
000000000104add4	movq	$0x4, 0x10(%rsp)
000000000104addd	callq	runtime.memhash
000000000104ade2	movq	0x18(%rsp), %rax
000000000104ade7	movq	0x30(%rsp), %rcx
000000000104adec	leaq	0x8(%rcx), %rdx
000000000104adf0	movq	%rdx, (%rsp)
000000000104adf4	movq	%rax, 0x8(%rsp)
000000000104adf9	movq	$0xc, 0x10(%rsp)
000000000104ae02	callq	runtime.memhash
000000000104ae07	movq	0x18(%rsp), %rax
000000000104ae0c	movq	0x30(%rsp), %rcx
000000000104ae11	addq	$0x18, %rcx
000000000104ae15	movq	%rcx, (%rsp)
000000000104ae19	movq	%rax, 0x8(%rsp)
000000000104ae1e	movq	$0x8, 0x10(%rsp)
000000000104ae27	callq	runtime.memhash
000000000104ae2c	movq	0x18(%rsp), %rax
000000000104ae31	movq	%rax, 0x40(%rsp)
000000000104ae36	movq	0x20(%rsp), %rbp
000000000104ae3b	addq	$0x28, %rsp
000000000104ae3f	retq
000000000104ae40	callq	runtime.morestack_noctxt
000000000104ae45	jmp	type..hash.runtime.sysmontick
000000000104ae4a	int3
000000000104ae4b	int3
000000000104ae4c	int3
000000000104ae4d	int3
000000000104ae4e	int3
000000000104ae4f	int3
type..eq.runtime.sysmontick:
000000000104ae50	movq	0x10(%rsp), %rax
000000000104ae55	movl	(%rax), %ecx
000000000104ae57	movq	0x8(%rsp), %rdx
000000000104ae5c	cmpl	%ecx, (%rdx)
000000000104ae5e	jne	0x104ae8a
000000000104ae60	movq	0x8(%rdx), %rcx
000000000104ae64	cmpq	%rcx, 0x8(%rax)
000000000104ae68	jne	0x104ae86
000000000104ae6a	movl	0x10(%rax), %ecx
000000000104ae6d	cmpl	%ecx, 0x10(%rdx)
000000000104ae70	jne	0x104ae82
000000000104ae72	movq	0x18(%rdx), %rcx
000000000104ae76	cmpq	%rcx, 0x18(%rax)
000000000104ae7a	sete	%al
000000000104ae7d	movb	%al, 0x18(%rsp)
000000000104ae81	retq
000000000104ae82	xorl	%eax, %eax
000000000104ae84	jmp	0x104ae7d
000000000104ae86	xorl	%eax, %eax
000000000104ae88	jmp	0x104ae7d
000000000104ae8a	xorl	%eax, %eax
000000000104ae8c	jmp	0x104ae7d
000000000104ae8e	int3
000000000104ae8f	int3
type..hash.runtime.special:
000000000104ae90	movq	%gs:0x30, %rcx
000000000104ae99	cmpq	0x10(%rcx), %rsp
000000000104ae9d	jbe	0x104aee2
000000000104ae9f	subq	$0x28, %rsp
000000000104aea3	movq	%rbp, 0x20(%rsp)
000000000104aea8	leaq	0x20(%rsp), %rbp
000000000104aead	movq	0x30(%rsp), %rax
000000000104aeb2	movq	%rax, (%rsp)
000000000104aeb6	movq	0x38(%rsp), %rax
000000000104aebb	movq	%rax, 0x8(%rsp)
000000000104aec0	movq	$0xb, 0x10(%rsp)
000000000104aec9	callq	runtime.memhash
000000000104aece	movq	0x18(%rsp), %rax
000000000104aed3	movq	%rax, 0x40(%rsp)
000000000104aed8	movq	0x20(%rsp), %rbp
000000000104aedd	addq	$0x28, %rsp
000000000104aee1	retq
000000000104aee2	callq	runtime.morestack_noctxt
000000000104aee7	jmp	type..hash.runtime.special
000000000104aee9	int3
000000000104aeea	int3
000000000104aeeb	int3
000000000104aeec	int3
000000000104aeed	int3
000000000104aeee	int3
000000000104aeef	int3
type..eq.runtime.special:
000000000104aef0	movq	%gs:0x30, %rcx
000000000104aef9	cmpq	0x10(%rcx), %rsp
000000000104aefd	jbe	0x104af41
000000000104aeff	subq	$0x28, %rsp
000000000104af03	movq	%rbp, 0x20(%rsp)
000000000104af08	leaq	0x20(%rsp), %rbp
000000000104af0d	movq	0x38(%rsp), %rax
000000000104af12	movq	%rax, 0x8(%rsp)
000000000104af17	movq	0x30(%rsp), %rax
000000000104af1c	movq	%rax, (%rsp)
000000000104af20	movq	$0xb, 0x10(%rsp)
000000000104af29	callq	runtime.memequal
000000000104af2e	movzbl	0x18(%rsp), %eax
000000000104af33	movb	%al, 0x40(%rsp)
000000000104af37	movq	0x20(%rsp), %rbp
000000000104af3c	addq	$0x28, %rsp
000000000104af40	retq
000000000104af41	callq	runtime.morestack_noctxt
000000000104af46	jmp	type..eq.runtime.special
000000000104af48	int3
000000000104af49	int3
000000000104af4a	int3
000000000104af4b	int3
000000000104af4c	int3
000000000104af4d	int3
000000000104af4e	int3
000000000104af4f	int3
type..hash.runtime.markBits:
000000000104af50	movq	%gs:0x30, %rcx
000000000104af59	cmpq	0x10(%rcx), %rsp
000000000104af5d	jbe	0x104afc7
000000000104af5f	subq	$0x28, %rsp
000000000104af63	movq	%rbp, 0x20(%rsp)
000000000104af68	leaq	0x20(%rsp), %rbp
000000000104af6d	movq	0x30(%rsp), %rax
000000000104af72	movq	%rax, (%rsp)
000000000104af76	movq	0x38(%rsp), %rcx
000000000104af7b	movq	%rcx, 0x8(%rsp)
000000000104af80	movq	$0x9, 0x10(%rsp)
000000000104af89	callq	runtime.memhash
000000000104af8e	movq	0x18(%rsp), %rax
000000000104af93	movq	0x30(%rsp), %rcx
000000000104af98	addq	$0x10, %rcx
000000000104af9c	movq	%rcx, (%rsp)
000000000104afa0	movq	%rax, 0x8(%rsp)
000000000104afa5	movq	$0x8, 0x10(%rsp)
000000000104afae	callq	runtime.memhash
000000000104afb3	movq	0x18(%rsp), %rax
000000000104afb8	movq	%rax, 0x40(%rsp)
000000000104afbd	movq	0x20(%rsp), %rbp
000000000104afc2	addq	$0x28, %rsp
000000000104afc6	retq
000000000104afc7	callq	runtime.morestack_noctxt
000000000104afcc	jmp	type..hash.runtime.markBits
000000000104afce	int3
000000000104afcf	int3
type..eq.runtime.markBits:
000000000104afd0	movq	0x10(%rsp), %rax
000000000104afd5	movq	(%rax), %rcx
000000000104afd8	movq	0x8(%rsp), %rdx
000000000104afdd	cmpq	%rcx, (%rdx)
000000000104afe0	jne	0x104afff
000000000104afe2	movzbl	0x8(%rax), %ecx
000000000104afe6	cmpb	%cl, 0x8(%rdx)
000000000104afe9	jne	0x104affb
000000000104afeb	movq	0x10(%rax), %rax
000000000104afef	cmpq	%rax, 0x10(%rdx)
000000000104aff3	sete	%al
000000000104aff6	movb	%al, 0x18(%rsp)
000000000104affa	retq
000000000104affb	xorl	%eax, %eax
000000000104affd	jmp	0x104aff6
000000000104afff	xorl	%eax, %eax
000000000104b001	jmp	0x104aff6
000000000104b003	int3
000000000104b004	int3
000000000104b005	int3
000000000104b006	int3
000000000104b007	int3
000000000104b008	int3
000000000104b009	int3
000000000104b00a	int3
000000000104b00b	int3
000000000104b00c	int3
000000000104b00d	int3
000000000104b00e	int3
000000000104b00f	int3
type..hash.runtime.mcache:
000000000104b010	movq	%gs:0x30, %rcx
000000000104b019	cmpq	0x10(%rcx), %rsp
000000000104b01d	jbe	0x104b087
000000000104b01f	subq	$0x28, %rsp
000000000104b023	movq	%rbp, 0x20(%rsp)
000000000104b028	leaq	0x20(%rsp), %rbp
000000000104b02d	movq	0x30(%rsp), %rax
000000000104b032	movq	%rax, (%rsp)
000000000104b036	movq	0x38(%rsp), %rcx
000000000104b03b	movq	%rcx, 0x8(%rsp)
000000000104b040	movq	$0x4, 0x10(%rsp)
000000000104b049	callq	runtime.memhash
000000000104b04e	movq	0x18(%rsp), %rax
000000000104b053	movq	0x30(%rsp), %rcx
000000000104b058	addq	$0x8, %rcx
000000000104b05c	movq	%rcx, (%rsp)
000000000104b060	movq	%rax, 0x8(%rsp)
000000000104b065	movq	$0x6b8, 0x10(%rsp)
000000000104b06e	callq	runtime.memhash
000000000104b073	movq	0x18(%rsp), %rax
000000000104b078	movq	%rax, 0x40(%rsp)
000000000104b07d	movq	0x20(%rsp), %rbp
000000000104b082	addq	$0x28, %rsp
000000000104b086	retq
000000000104b087	callq	runtime.morestack_noctxt
000000000104b08c	jmp	type..hash.runtime.mcache
000000000104b08e	int3
000000000104b08f	int3
type..eq.runtime.mcache:
000000000104b090	movq	%gs:0x30, %rcx
000000000104b099	cmpq	0x10(%rcx), %rsp
000000000104b09d	jbe	0x104b0f3
000000000104b09f	subq	$0x28, %rsp
000000000104b0a3	movq	%rbp, 0x20(%rsp)
000000000104b0a8	leaq	0x20(%rsp), %rbp
000000000104b0ad	movq	0x38(%rsp), %rax
000000000104b0b2	movl	(%rax), %ecx
000000000104b0b4	movq	0x30(%rsp), %rdx
000000000104b0b9	cmpl	%ecx, (%rdx)
000000000104b0bb	je	0x104b0cd
000000000104b0bd	xorl	%eax, %eax
000000000104b0bf	movb	%al, 0x40(%rsp)
000000000104b0c3	movq	0x20(%rsp), %rbp
000000000104b0c8	addq	$0x28, %rsp
000000000104b0cc	retq
000000000104b0cd	addq	$0x8, %rax
000000000104b0d1	movq	%rax, 0x8(%rsp)
000000000104b0d6	leaq	0x8(%rdx), %rax
000000000104b0da	movq	%rax, (%rsp)
000000000104b0de	movq	$0x6b8, 0x10(%rsp)
000000000104b0e7	callq	runtime.memequal
000000000104b0ec	movzbl	0x18(%rsp), %eax
000000000104b0f1	jmp	0x104b0bf
000000000104b0f3	callq	runtime.morestack_noctxt
000000000104b0f8	jmp	type..eq.runtime.mcache
000000000104b0fa	int3
000000000104b0fb	int3
000000000104b0fc	int3
000000000104b0fd	int3
000000000104b0fe	int3
000000000104b0ff	int3
type..hash.runtime.hchan:
000000000104b100	movq	%gs:0x30, %rcx
000000000104b109	cmpq	0x10(%rcx), %rsp
000000000104b10d	jbe	0x104b177
000000000104b10f	subq	$0x28, %rsp
000000000104b113	movq	%rbp, 0x20(%rsp)
000000000104b118	leaq	0x20(%rsp), %rbp
000000000104b11d	movq	0x30(%rsp), %rax
000000000104b122	movq	%rax, (%rsp)
000000000104b126	movq	0x38(%rsp), %rcx
000000000104b12b	movq	%rcx, 0x8(%rsp)
000000000104b130	movq	$0x1a, 0x10(%rsp)
000000000104b139	callq	runtime.memhash
000000000104b13e	movq	0x18(%rsp), %rax
000000000104b143	movq	0x30(%rsp), %rcx
000000000104b148	addq	$0x1c, %rcx
000000000104b14c	movq	%rcx, (%rsp)
000000000104b150	movq	%rax, 0x8(%rsp)
000000000104b155	movq	$0x44, 0x10(%rsp)
000000000104b15e	callq	runtime.memhash
000000000104b163	movq	0x18(%rsp), %rax
000000000104b168	movq	%rax, 0x40(%rsp)
000000000104b16d	movq	0x20(%rsp), %rbp
000000000104b172	addq	$0x28, %rsp
000000000104b176	retq
000000000104b177	callq	runtime.morestack_noctxt
000000000104b17c	jmp	type..hash.runtime.hchan
000000000104b17e	int3
000000000104b17f	int3
type..eq.runtime.hchan:
000000000104b180	movq	%gs:0x30, %rcx
000000000104b189	cmpq	0x10(%rcx), %rsp
000000000104b18d	jbe	0x104b208
000000000104b18f	subq	$0x28, %rsp
000000000104b193	movq	%rbp, 0x20(%rsp)
000000000104b198	leaq	0x20(%rsp), %rbp
000000000104b19d	movq	0x38(%rsp), %rax
000000000104b1a2	movq	%rax, 0x8(%rsp)
000000000104b1a7	movq	0x30(%rsp), %rcx
000000000104b1ac	movq	%rcx, (%rsp)
000000000104b1b0	movq	$0x1a, 0x10(%rsp)
000000000104b1b9	callq	runtime.memequal
000000000104b1be	leaq	0x18(%rsp), %rax
000000000104b1c3	cmpb	$0x0, (%rax)
000000000104b1c6	jne	0x104b1d8
000000000104b1c8	xorl	%eax, %eax
000000000104b1ca	movb	%al, 0x40(%rsp)
000000000104b1ce	movq	0x20(%rsp), %rbp
000000000104b1d3	addq	$0x28, %rsp
000000000104b1d7	retq
000000000104b1d8	movq	0x38(%rsp), %rax
000000000104b1dd	addq	$0x1c, %rax
000000000104b1e1	movq	%rax, 0x8(%rsp)
000000000104b1e6	movq	0x30(%rsp), %rax
000000000104b1eb	addq	$0x1c, %rax
000000000104b1ef	movq	%rax, (%rsp)
000000000104b1f3	movq	$0x44, 0x10(%rsp)
000000000104b1fc	callq	runtime.memequal
000000000104b201	movzbl	0x18(%rsp), %eax
000000000104b206	jmp	0x104b1ca
000000000104b208	callq	runtime.morestack_noctxt
000000000104b20d	jmp	type..eq.runtime.hchan
000000000104b212	int3
000000000104b213	int3
000000000104b214	int3
000000000104b215	int3
000000000104b216	int3
000000000104b217	int3
000000000104b218	int3
000000000104b219	int3
000000000104b21a	int3
000000000104b21b	int3
000000000104b21c	int3
000000000104b21d	int3
000000000104b21e	int3
000000000104b21f	int3
type..hash.runtime.sudog:
000000000104b220	movq	%gs:0x30, %rcx
000000000104b229	cmpq	0x10(%rcx), %rsp
000000000104b22d	jbe	0x104b2c0
000000000104b233	subq	$0x28, %rsp
000000000104b237	movq	%rbp, 0x20(%rsp)
000000000104b23c	leaq	0x20(%rsp), %rbp
000000000104b241	movq	0x30(%rsp), %rax
000000000104b246	movq	%rax, (%rsp)
000000000104b24a	movq	0x38(%rsp), %rcx
000000000104b24f	movq	%rcx, 0x8(%rsp)
000000000104b254	movq	$0x9, 0x10(%rsp)
000000000104b25d	callq	runtime.memhash
000000000104b262	movq	0x18(%rsp), %rax
000000000104b267	movq	0x30(%rsp), %rcx
000000000104b26c	leaq	0x10(%rcx), %rdx
000000000104b270	movq	%rdx, (%rsp)
000000000104b274	movq	%rax, 0x8(%rsp)
000000000104b279	movq	$0x2c, 0x10(%rsp)
000000000104b282	callq	runtime.memhash
000000000104b287	movq	0x18(%rsp), %rax
000000000104b28c	movq	0x30(%rsp), %rcx
000000000104b291	addq	$0x40, %rcx
000000000104b295	movq	%rcx, (%rsp)
000000000104b299	movq	%rax, 0x8(%rsp)
000000000104b29e	movq	$0x20, 0x10(%rsp)
000000000104b2a7	callq	runtime.memhash
000000000104b2ac	movq	0x18(%rsp), %rax
000000000104b2b1	movq	%rax, 0x40(%rsp)
000000000104b2b6	movq	0x20(%rsp), %rbp
000000000104b2bb	addq	$0x28, %rsp
000000000104b2bf	retq
000000000104b2c0	callq	runtime.morestack_noctxt
000000000104b2c5	jmp	type..hash.runtime.sudog
000000000104b2ca	int3
000000000104b2cb	int3
000000000104b2cc	int3
000000000104b2cd	int3
000000000104b2ce	int3
000000000104b2cf	int3
type..eq.runtime.sudog:
000000000104b2d0	movq	%gs:0x30, %rcx
000000000104b2d9	cmpq	0x10(%rcx), %rsp
000000000104b2dd	jbe	0x104b37c
000000000104b2e3	subq	$0x28, %rsp
000000000104b2e7	movq	%rbp, 0x20(%rsp)
000000000104b2ec	leaq	0x20(%rsp), %rbp
000000000104b2f1	movq	0x38(%rsp), %rax
000000000104b2f6	movq	(%rax), %rcx
000000000104b2f9	movq	0x30(%rsp), %rdx
000000000104b2fe	cmpq	%rcx, (%rdx)
000000000104b301	jne	0x104b378
000000000104b303	movzbl	0x8(%rax), %ecx
000000000104b307	cmpb	%cl, 0x8(%rdx)
000000000104b30a	je	0x104b348
000000000104b30c	xorl	%ecx, %ecx
000000000104b30e	testb	%cl, %cl
000000000104b310	jne	0x104b322
000000000104b312	xorl	%eax, %eax
000000000104b314	movb	%al, 0x40(%rsp)
000000000104b318	movq	0x20(%rsp), %rbp
000000000104b31d	addq	$0x28, %rsp
000000000104b321	retq
000000000104b322	addq	$0x40, %rax
000000000104b326	movq	%rax, 0x8(%rsp)
000000000104b32b	leaq	0x40(%rdx), %rax
000000000104b32f	movq	%rax, (%rsp)
000000000104b333	movq	$0x20, 0x10(%rsp)
000000000104b33c	callq	runtime.memequal
000000000104b341	movzbl	0x18(%rsp), %eax
000000000104b346	jmp	0x104b314
000000000104b348	leaq	0x10(%rax), %rcx
000000000104b34c	movq	%rcx, 0x8(%rsp)
000000000104b351	leaq	0x10(%rdx), %rcx
000000000104b355	movq	%rcx, (%rsp)
000000000104b359	movq	$0x2c, 0x10(%rsp)
000000000104b362	callq	runtime.memequal
000000000104b367	movzbl	0x18(%rsp), %ecx
000000000104b36c	movq	0x38(%rsp), %rax
000000000104b371	movq	0x30(%rsp), %rdx
000000000104b376	jmp	0x104b30e
000000000104b378	xorl	%ecx, %ecx
000000000104b37a	jmp	0x104b30e
000000000104b37c	callq	runtime.morestack_noctxt
000000000104b381	jmp	type..eq.runtime.sudog
000000000104b386	int3
000000000104b387	int3
000000000104b388	int3
000000000104b389	int3
000000000104b38a	int3
000000000104b38b	int3
000000000104b38c	int3
000000000104b38d	int3
000000000104b38e	int3
000000000104b38f	int3
type..hash.runtime.mOS:
000000000104b390	movq	%gs:0x30, %rcx
000000000104b399	cmpq	0x10(%rcx), %rsp
000000000104b39d	jbe	0x104b407
000000000104b39f	subq	$0x28, %rsp
000000000104b3a3	movq	%rbp, 0x20(%rsp)
000000000104b3a8	leaq	0x20(%rsp), %rbp
000000000104b3ad	movq	0x30(%rsp), %rax
000000000104b3b2	movq	%rax, (%rsp)
000000000104b3b6	movq	0x38(%rsp), %rcx
000000000104b3bb	movq	%rcx, 0x8(%rsp)
000000000104b3c0	movq	$0x1, 0x10(%rsp)
000000000104b3c9	callq	runtime.memhash
000000000104b3ce	movq	0x18(%rsp), %rax
000000000104b3d3	movq	0x30(%rsp), %rcx
000000000104b3d8	addq	$0x8, %rcx
000000000104b3dc	movq	%rcx, (%rsp)
000000000104b3e0	movq	%rax, 0x8(%rsp)
000000000104b3e5	movq	$0x78, 0x10(%rsp)
000000000104b3ee	callq	runtime.memhash
000000000104b3f3	movq	0x18(%rsp), %rax
000000000104b3f8	movq	%rax, 0x40(%rsp)
000000000104b3fd	movq	0x20(%rsp), %rbp
000000000104b402	addq	$0x28, %rsp
000000000104b406	retq
000000000104b407	callq	runtime.morestack_noctxt
000000000104b40c	jmp	type..hash.runtime.mOS
000000000104b40e	int3
000000000104b40f	int3
type..eq.runtime.mOS:
000000000104b410	movq	%gs:0x30, %rcx
000000000104b419	cmpq	0x10(%rcx), %rsp
000000000104b41d	jbe	0x104b474
000000000104b41f	subq	$0x28, %rsp
000000000104b423	movq	%rbp, 0x20(%rsp)
000000000104b428	leaq	0x20(%rsp), %rbp
000000000104b42d	movq	0x38(%rsp), %rax
000000000104b432	movzbl	(%rax), %ecx
000000000104b435	movq	0x30(%rsp), %rdx
000000000104b43a	cmpb	%cl, (%rdx)
000000000104b43c	je	0x104b44e
000000000104b43e	xorl	%eax, %eax
000000000104b440	movb	%al, 0x40(%rsp)
000000000104b444	movq	0x20(%rsp), %rbp
000000000104b449	addq	$0x28, %rsp
000000000104b44d	retq
000000000104b44e	addq	$0x8, %rax
000000000104b452	movq	%rax, 0x8(%rsp)
000000000104b457	leaq	0x8(%rdx), %rax
000000000104b45b	movq	%rax, (%rsp)
000000000104b45f	movq	$0x78, 0x10(%rsp)
000000000104b468	callq	runtime.memequal
000000000104b46d	movzbl	0x18(%rsp), %eax
000000000104b472	jmp	0x104b440
000000000104b474	callq	runtime.morestack_noctxt
000000000104b479	jmp	type..eq.runtime.mOS
000000000104b47b	int3
000000000104b47c	int3
000000000104b47d	int3
000000000104b47e	int3
000000000104b47f	int3
runtime.(*waitReason).String:
000000000104b480	movq	%gs:0x30, %rcx
000000000104b489	cmpq	0x10(%rcx), %rsp
000000000104b48d	jbe	0x104b4e0
000000000104b48f	subq	$0x20, %rsp
000000000104b493	movq	%rbp, 0x18(%rsp)
000000000104b498	leaq	0x18(%rsp), %rbp
000000000104b49d	movq	0x20(%rcx), %rbx
000000000104b4a1	testq	%rbx, %rbx
000000000104b4a4	jne	0x104b4e7
000000000104b4a6	movq	0x28(%rsp), %rax
000000000104b4ab	testq	%rax, %rax
000000000104b4ae	je	0x104b4d9
000000000104b4b0	movzbl	(%rax), %eax
000000000104b4b3	movb	%al, (%rsp)
000000000104b4b6	callq	runtime.waitReason.String
000000000104b4bb	movq	0x10(%rsp), %rax
000000000104b4c0	movq	0x8(%rsp), %rcx
000000000104b4c5	movq	%rcx, 0x30(%rsp)
000000000104b4ca	movq	%rax, 0x38(%rsp)
000000000104b4cf	movq	0x18(%rsp), %rbp
000000000104b4d4	addq	$0x20, %rsp
000000000104b4d8	retq
000000000104b4d9	callq	runtime.panicwrap
000000000104b4de	ud2
000000000104b4e0	callq	runtime.morestack_noctxt
000000000104b4e5	jmp	"runtime.(*waitReason).String"
000000000104b4e7	leaq	0x28(%rsp), %rdi
000000000104b4ec	cmpq	%rdi, (%rbx)
000000000104b4ef	jne	0x104b4a6
000000000104b4f1	movq	%rsp, (%rbx)
000000000104b4f4	jmp	0x104b4a6
000000000104b4f6	int3
000000000104b4f7	int3
000000000104b4f8	int3
000000000104b4f9	int3
000000000104b4fa	int3
000000000104b4fb	int3
000000000104b4fc	int3
000000000104b4fd	int3
000000000104b4fe	int3
000000000104b4ff	int3
type..hash.runtime.cpuProfile:
000000000104b500	movq	%gs:0x30, %rcx
000000000104b509	cmpq	0x10(%rcx), %rsp
000000000104b50d	jbe	0x104b577
000000000104b50f	subq	$0x28, %rsp
000000000104b513	movq	%rbp, 0x20(%rsp)
000000000104b518	leaq	0x20(%rsp), %rbp
000000000104b51d	movq	0x30(%rsp), %rax
000000000104b522	movq	%rax, (%rsp)
000000000104b526	movq	0x38(%rsp), %rcx
000000000104b52b	movq	%rcx, 0x8(%rsp)
000000000104b530	movq	$0x9, 0x10(%rsp)
000000000104b539	callq	runtime.memhash
000000000104b53e	movq	0x18(%rsp), %rax
000000000104b543	movq	0x30(%rsp), %rcx
000000000104b548	addq	$0x10, %rcx
000000000104b54c	movq	%rcx, (%rsp)
000000000104b550	movq	%rax, 0x8(%rsp)
000000000104b555	movq	$0x1f58, 0x10(%rsp)
000000000104b55e	callq	runtime.memhash
000000000104b563	movq	0x18(%rsp), %rax
000000000104b568	movq	%rax, 0x40(%rsp)
000000000104b56d	movq	0x20(%rsp), %rbp
000000000104b572	addq	$0x28, %rsp
000000000104b576	retq
000000000104b577	callq	runtime.morestack_noctxt
000000000104b57c	jmp	type..hash.runtime.cpuProfile
000000000104b57e	int3
000000000104b57f	int3
type..eq.runtime.cpuProfile:
000000000104b580	movq	%gs:0x30, %rcx
000000000104b589	cmpq	0x10(%rcx), %rsp
000000000104b58d	jbe	0x104b5f2
000000000104b58f	subq	$0x28, %rsp
000000000104b593	movq	%rbp, 0x20(%rsp)
000000000104b598	leaq	0x20(%rsp), %rbp
000000000104b59d	movq	0x38(%rsp), %rax
000000000104b5a2	movq	(%rax), %rcx
000000000104b5a5	movq	0x30(%rsp), %rdx
000000000104b5aa	cmpq	%rcx, (%rdx)
000000000104b5ad	jne	0x104b5ee
000000000104b5af	movzbl	0x8(%rax), %ecx
000000000104b5b3	cmpb	%cl, 0x8(%rdx)
000000000104b5b6	je	0x104b5c8
000000000104b5b8	xorl	%eax, %eax
000000000104b5ba	movb	%al, 0x40(%rsp)
000000000104b5be	movq	0x20(%rsp), %rbp
000000000104b5c3	addq	$0x28, %rsp
000000000104b5c7	retq
000000000104b5c8	addq	$0x10, %rax
000000000104b5cc	movq	%rax, 0x8(%rsp)
000000000104b5d1	leaq	0x10(%rdx), %rax
000000000104b5d5	movq	%rax, (%rsp)
000000000104b5d9	movq	$0x1f58, 0x10(%rsp)
000000000104b5e2	callq	runtime.memequal
000000000104b5e7	movzbl	0x18(%rsp), %eax
000000000104b5ec	jmp	0x104b5ba
000000000104b5ee	xorl	%eax, %eax
000000000104b5f0	jmp	0x104b5ba
000000000104b5f2	callq	runtime.morestack_noctxt
000000000104b5f7	jmp	type..eq.runtime.cpuProfile
000000000104b5f9	int3
000000000104b5fa	int3
000000000104b5fb	int3
000000000104b5fc	int3
000000000104b5fd	int3
000000000104b5fe	int3
000000000104b5ff	int3
type..hash.runtime.dbgVar:
000000000104b600	movq	%gs:0x30, %rcx
000000000104b609	cmpq	0x10(%rcx), %rsp
000000000104b60d	jbe	0x104b66e
000000000104b60f	subq	$0x28, %rsp
000000000104b613	movq	%rbp, 0x20(%rsp)
000000000104b618	leaq	0x20(%rsp), %rbp
000000000104b61d	movq	0x30(%rsp), %rax
000000000104b622	movq	%rax, (%rsp)
000000000104b626	movq	0x38(%rsp), %rcx
000000000104b62b	movq	%rcx, 0x8(%rsp)
000000000104b630	callq	runtime.strhash
000000000104b635	movq	0x10(%rsp), %rax
000000000104b63a	movq	0x30(%rsp), %rcx
000000000104b63f	addq	$0x10, %rcx
000000000104b643	movq	%rcx, (%rsp)
000000000104b647	movq	%rax, 0x8(%rsp)
000000000104b64c	movq	$0x8, 0x10(%rsp)
000000000104b655	callq	runtime.memhash
000000000104b65a	movq	0x18(%rsp), %rax
000000000104b65f	movq	%rax, 0x40(%rsp)
000000000104b664	movq	0x20(%rsp), %rbp
000000000104b669	addq	$0x28, %rsp
000000000104b66d	retq
000000000104b66e	callq	runtime.morestack_noctxt
000000000104b673	jmp	type..hash.runtime.dbgVar
000000000104b675	int3
000000000104b676	int3
000000000104b677	int3
000000000104b678	int3
000000000104b679	int3
000000000104b67a	int3
000000000104b67b	int3
000000000104b67c	int3
000000000104b67d	int3
000000000104b67e	int3
000000000104b67f	int3
type..eq.runtime.dbgVar:
000000000104b680	movq	%gs:0x30, %rcx
000000000104b689	cmpq	0x10(%rcx), %rsp
000000000104b68d	jbe	0x104b701
000000000104b68f	subq	$0x28, %rsp
000000000104b693	movq	%rbp, 0x20(%rsp)
000000000104b698	leaq	0x20(%rsp), %rbp
000000000104b69d	movq	0x38(%rsp), %rax
000000000104b6a2	movq	0x8(%rax), %rcx
000000000104b6a6	movq	0x30(%rsp), %rdx
000000000104b6ab	movq	0x8(%rdx), %rbx
000000000104b6af	movq	(%rdx), %rsi
000000000104b6b2	movq	(%rax), %rdi
000000000104b6b5	cmpq	%rcx, %rbx
000000000104b6b8	je	0x104b6dd
000000000104b6ba	xorl	%ecx, %ecx
000000000104b6bc	testb	%cl, %cl
000000000104b6be	je	0x104b6d9
000000000104b6c0	movq	0x10(%rax), %rax
000000000104b6c4	cmpq	%rax, 0x10(%rdx)
000000000104b6c8	sete	%al
000000000104b6cb	movb	%al, 0x40(%rsp)
000000000104b6cf	movq	0x20(%rsp), %rbp
000000000104b6d4	addq	$0x28, %rsp
000000000104b6d8	retq
000000000104b6d9	xorl	%eax, %eax
000000000104b6db	jmp	0x104b6cb
000000000104b6dd	movq	%rsi, (%rsp)
000000000104b6e1	movq	%rdi, 0x8(%rsp)
000000000104b6e6	movq	%rbx, 0x10(%rsp)
000000000104b6eb	callq	runtime.memequal
000000000104b6f0	movzbl	0x18(%rsp), %ecx
000000000104b6f5	movq	0x38(%rsp), %rax
000000000104b6fa	movq	0x30(%rsp), %rdx
000000000104b6ff	jmp	0x104b6bc
000000000104b701	callq	runtime.morestack_noctxt
000000000104b706	jmp	type..eq.runtime.dbgVar
000000000104b70b	int3
000000000104b70c	int3
000000000104b70d	int3
000000000104b70e	int3
000000000104b70f	int3
runtime.(*errorString).Error:
000000000104b710	movq	%gs:0x30, %rcx
000000000104b719	cmpq	0x10(%rcx), %rsp
000000000104b71d	jbe	0x104b77a
000000000104b71f	subq	$0x28, %rsp
000000000104b723	movq	%rbp, 0x20(%rsp)
000000000104b728	leaq	0x20(%rsp), %rbp
000000000104b72d	movq	0x20(%rcx), %rbx
000000000104b731	testq	%rbx, %rbx
000000000104b734	jne	0x104b781
000000000104b736	movq	0x30(%rsp), %rax
000000000104b73b	testq	%rax, %rax
000000000104b73e	je	0x104b773
000000000104b740	movq	0x8(%rax), %rcx
000000000104b744	movq	(%rax), %rax
000000000104b747	movq	%rax, (%rsp)
000000000104b74b	movq	%rcx, 0x8(%rsp)
000000000104b750	callq	runtime.errorString.Error
000000000104b755	movq	0x10(%rsp), %rax
000000000104b75a	movq	0x18(%rsp), %rcx
000000000104b75f	movq	%rax, 0x38(%rsp)
000000000104b764	movq	%rcx, 0x40(%rsp)
000000000104b769	movq	0x20(%rsp), %rbp
000000000104b76e	addq	$0x28, %rsp
000000000104b772	retq
000000000104b773	callq	runtime.panicwrap
000000000104b778	ud2
000000000104b77a	callq	runtime.morestack_noctxt
000000000104b77f	jmp	"runtime.(*errorString).Error"
000000000104b781	leaq	0x30(%rsp), %rdi
000000000104b786	cmpq	%rdi, (%rbx)
000000000104b789	jne	0x104b736
000000000104b78b	movq	%rsp, (%rbx)
000000000104b78e	jmp	0x104b736
type..hash.runtime.finblock:
000000000104b790	movq	%gs:0x30, %rcx
000000000104b799	cmpq	0x10(%rcx), %rsp
000000000104b79d	jbe	0x104b807
000000000104b79f	subq	$0x28, %rsp
000000000104b7a3	movq	%rbp, 0x20(%rsp)
000000000104b7a8	leaq	0x20(%rsp), %rbp
000000000104b7ad	movq	0x30(%rsp), %rax
000000000104b7b2	movq	%rax, (%rsp)
000000000104b7b6	movq	0x38(%rsp), %rcx
000000000104b7bb	movq	%rcx, 0x8(%rsp)
000000000104b7c0	movq	$0x14, 0x10(%rsp)
000000000104b7c9	callq	runtime.memhash
000000000104b7ce	movq	0x18(%rsp), %rax
000000000104b7d3	movq	0x30(%rsp), %rcx
000000000104b7d8	addq	$0x18, %rcx
000000000104b7dc	movq	%rcx, (%rsp)
000000000104b7e0	movq	%rax, 0x8(%rsp)
000000000104b7e5	movq	$0xfc8, 0x10(%rsp)
000000000104b7ee	callq	runtime.memhash
000000000104b7f3	movq	0x18(%rsp), %rax
000000000104b7f8	movq	%rax, 0x40(%rsp)
000000000104b7fd	movq	0x20(%rsp), %rbp
000000000104b802	addq	$0x28, %rsp
000000000104b806	retq
000000000104b807	callq	runtime.morestack_noctxt
000000000104b80c	jmp	type..hash.runtime.finblock
000000000104b80e	int3
000000000104b80f	int3
type..eq.runtime.finblock:
000000000104b810	movq	%gs:0x30, %rcx
000000000104b819	cmpq	0x10(%rcx), %rsp
000000000104b81d	jbe	0x104b898
000000000104b81f	subq	$0x28, %rsp
000000000104b823	movq	%rbp, 0x20(%rsp)
000000000104b828	leaq	0x20(%rsp), %rbp
000000000104b82d	movq	0x38(%rsp), %rax
000000000104b832	movq	%rax, 0x8(%rsp)
000000000104b837	movq	0x30(%rsp), %rcx
000000000104b83c	movq	%rcx, (%rsp)
000000000104b840	movq	$0x14, 0x10(%rsp)
000000000104b849	callq	runtime.memequal
000000000104b84e	leaq	0x18(%rsp), %rax
000000000104b853	cmpb	$0x0, (%rax)
000000000104b856	jne	0x104b868
000000000104b858	xorl	%eax, %eax
000000000104b85a	movb	%al, 0x40(%rsp)
000000000104b85e	movq	0x20(%rsp), %rbp
000000000104b863	addq	$0x28, %rsp
000000000104b867	retq
000000000104b868	movq	0x30(%rsp), %rax
000000000104b86d	addq	$0x18, %rax
000000000104b871	movq	%rax, (%rsp)
000000000104b875	movq	0x38(%rsp), %rax
000000000104b87a	addq	$0x18, %rax
000000000104b87e	movq	%rax, 0x8(%rsp)
000000000104b883	movq	$0xfc8, 0x10(%rsp)
000000000104b88c	callq	runtime.memequal
000000000104b891	movzbl	0x18(%rsp), %eax
000000000104b896	jmp	0x104b85a
000000000104b898	callq	runtime.morestack_noctxt
000000000104b89d	jmp	type..eq.runtime.finblock
000000000104b8a2	int3
000000000104b8a3	int3
000000000104b8a4	int3
000000000104b8a5	int3
000000000104b8a6	int3
000000000104b8a7	int3
000000000104b8a8	int3
000000000104b8a9	int3
000000000104b8aa	int3
000000000104b8ab	int3
000000000104b8ac	int3
000000000104b8ad	int3
000000000104b8ae	int3
000000000104b8af	int3
type..hash.runtime.forcegcstate:
000000000104b8b0	movq	%gs:0x30, %rcx
000000000104b8b9	cmpq	0x10(%rcx), %rsp
000000000104b8bd	jbe	0x104b902
000000000104b8bf	subq	$0x28, %rsp
000000000104b8c3	movq	%rbp, 0x20(%rsp)
000000000104b8c8	leaq	0x20(%rsp), %rbp
000000000104b8cd	movq	0x30(%rsp), %rax
000000000104b8d2	movq	%rax, (%rsp)
000000000104b8d6	movq	0x38(%rsp), %rax
000000000104b8db	movq	%rax, 0x8(%rsp)
000000000104b8e0	movq	$0x14, 0x10(%rsp)
000000000104b8e9	callq	runtime.memhash
000000000104b8ee	movq	0x18(%rsp), %rax
000000000104b8f3	movq	%rax, 0x40(%rsp)
000000000104b8f8	movq	0x20(%rsp), %rbp
000000000104b8fd	addq	$0x28, %rsp
000000000104b901	retq
000000000104b902	callq	runtime.morestack_noctxt
000000000104b907	jmp	type..hash.runtime.forcegcstate
000000000104b909	int3
000000000104b90a	int3
000000000104b90b	int3
000000000104b90c	int3
000000000104b90d	int3
000000000104b90e	int3
000000000104b90f	int3
type..eq.runtime.forcegcstate:
000000000104b910	movq	%gs:0x30, %rcx
000000000104b919	cmpq	0x10(%rcx), %rsp
000000000104b91d	jbe	0x104b961
000000000104b91f	subq	$0x28, %rsp
000000000104b923	movq	%rbp, 0x20(%rsp)
000000000104b928	leaq	0x20(%rsp), %rbp
000000000104b92d	movq	0x38(%rsp), %rax
000000000104b932	movq	%rax, 0x8(%rsp)
000000000104b937	movq	0x30(%rsp), %rax
000000000104b93c	movq	%rax, (%rsp)
000000000104b940	movq	$0x14, 0x10(%rsp)
000000000104b949	callq	runtime.memequal
000000000104b94e	movzbl	0x18(%rsp), %eax
000000000104b953	movb	%al, 0x40(%rsp)
000000000104b957	movq	0x20(%rsp), %rbp
000000000104b95c	addq	$0x28, %rsp
000000000104b960	retq
000000000104b961	callq	runtime.morestack_noctxt
000000000104b966	jmp	type..eq.runtime.forcegcstate
000000000104b968	int3
000000000104b969	int3
000000000104b96a	int3
000000000104b96b	int3
000000000104b96c	int3
000000000104b96d	int3
000000000104b96e	int3
000000000104b96f	int3
type..hash.runtime.gcControllerState:
000000000104b970	movq	%gs:0x30, %rcx
000000000104b979	cmpq	0x10(%rcx), %rsp
000000000104b97d	jbe	0x104ba1a
000000000104b983	subq	$0x28, %rsp
000000000104b987	movq	%rbp, 0x20(%rsp)
000000000104b98c	leaq	0x20(%rsp), %rbp
000000000104b991	movq	0x30(%rsp), %rax
000000000104b996	movq	%rax, (%rsp)
000000000104b99a	movq	0x38(%rsp), %rcx
000000000104b99f	movq	%rcx, 0x8(%rsp)
000000000104b9a4	movq	$0x40, 0x10(%rsp)
000000000104b9ad	callq	runtime.memhash
000000000104b9b2	movq	0x18(%rsp), %rax
000000000104b9b7	movq	0x30(%rsp), %rcx
000000000104b9bc	leaq	0x40(%rcx), %rdx
000000000104b9c0	movq	%rdx, (%rsp)
000000000104b9c4	movq	%rax, 0x8(%rsp)
000000000104b9c9	callq	runtime.f64hash
000000000104b9ce	movq	0x10(%rsp), %rax
000000000104b9d3	movq	0x30(%rsp), %rcx
000000000104b9d8	leaq	0x48(%rcx), %rdx
000000000104b9dc	movq	%rdx, (%rsp)
000000000104b9e0	movq	%rax, 0x8(%rsp)
000000000104b9e5	callq	runtime.f64hash
000000000104b9ea	movq	0x10(%rsp), %rax
000000000104b9ef	movq	0x30(%rsp), %rcx
000000000104b9f4	addq	$0x50, %rcx
000000000104b9f8	movq	%rcx, (%rsp)
000000000104b9fc	movq	%rax, 0x8(%rsp)
000000000104ba01	callq	runtime.f64hash
000000000104ba06	movq	0x10(%rsp), %rax
000000000104ba0b	movq	%rax, 0x40(%rsp)
000000000104ba10	movq	0x20(%rsp), %rbp
000000000104ba15	addq	$0x28, %rsp
000000000104ba19	retq
000000000104ba1a	callq	runtime.morestack_noctxt
000000000104ba1f	jmp	type..hash.runtime.gcControllerState
000000000104ba24	int3
000000000104ba25	int3
000000000104ba26	int3
000000000104ba27	int3
000000000104ba28	int3
000000000104ba29	int3
000000000104ba2a	int3
000000000104ba2b	int3
000000000104ba2c	int3
000000000104ba2d	int3
000000000104ba2e	int3
000000000104ba2f	int3
type..eq.runtime.gcControllerState:
000000000104ba30	movq	%gs:0x30, %rcx
000000000104ba39	cmpq	0x10(%rcx), %rsp
000000000104ba3d	jbe	0x104bada
000000000104ba43	subq	$0x28, %rsp
000000000104ba47	movq	%rbp, 0x20(%rsp)
000000000104ba4c	leaq	0x20(%rsp), %rbp
000000000104ba51	movq	0x38(%rsp), %rax
000000000104ba56	movq	%rax, 0x8(%rsp)
000000000104ba5b	movq	0x30(%rsp), %rcx
000000000104ba60	movq	%rcx, (%rsp)
000000000104ba64	movq	$0x40, 0x10(%rsp)
000000000104ba6d	callq	runtime.memequal
000000000104ba72	leaq	0x18(%rsp), %rax
000000000104ba77	cmpb	$0x0, (%rax)
000000000104ba7a	je	0x104bad6
000000000104ba7c	movq	0x30(%rsp), %rax
000000000104ba81	movsd	0x40(%rax), %xmm0
000000000104ba86	movq	0x38(%rsp), %rcx
000000000104ba8b	movsd	0x40(%rcx), %xmm1
000000000104ba90	ucomisd	%xmm1, %xmm0
000000000104ba94	jne	0x104bad2
000000000104ba96	jp	0x104bad2
000000000104ba98	movsd	0x48(%rcx), %xmm0
000000000104ba9d	movsd	0x48(%rax), %xmm1
000000000104baa2	ucomisd	%xmm0, %xmm1
000000000104baa6	jne	0x104bace
000000000104baa8	jp	0x104bace
000000000104baaa	movsd	0x50(%rcx), %xmm0
000000000104baaf	movsd	0x50(%rax), %xmm1
000000000104bab4	ucomisd	%xmm1, %xmm0
000000000104bab8	sete	%cl
000000000104babb	setnp	%al
000000000104babe	andl	%eax, %ecx
000000000104bac0	movb	%cl, 0x40(%rsp)
000000000104bac4	movq	0x20(%rsp), %rbp
000000000104bac9	addq	$0x28, %rsp
000000000104bacd	retq
000000000104bace	xorl	%ecx, %ecx
000000000104bad0	jmp	0x104bac0
000000000104bad2	xorl	%ecx, %ecx
000000000104bad4	jmp	0x104bac0
000000000104bad6	xorl	%ecx, %ecx
000000000104bad8	jmp	0x104bac0
000000000104bada	callq	runtime.morestack_noctxt
000000000104badf	jmp	type..eq.runtime.gcControllerState
000000000104bae4	int3
000000000104bae5	int3
000000000104bae6	int3
000000000104bae7	int3
000000000104bae8	int3
000000000104bae9	int3
000000000104baea	int3
000000000104baeb	int3
000000000104baec	int3
000000000104baed	int3
000000000104baee	int3
000000000104baef	int3
type..hash.runtime.gcSweepBuf:
000000000104baf0	movq	%gs:0x30, %rcx
000000000104baf9	cmpq	0x10(%rcx), %rsp
000000000104bafd	jbe	0x104bb42
000000000104baff	subq	$0x28, %rsp
000000000104bb03	movq	%rbp, 0x20(%rsp)
000000000104bb08	leaq	0x20(%rsp), %rbp
000000000104bb0d	movq	0x30(%rsp), %rax
000000000104bb12	movq	%rax, (%rsp)
000000000104bb16	movq	0x38(%rsp), %rax
000000000104bb1b	movq	%rax, 0x8(%rsp)
000000000104bb20	movq	$0x24, 0x10(%rsp)
000000000104bb29	callq	runtime.memhash
000000000104bb2e	movq	0x18(%rsp), %rax
000000000104bb33	movq	%rax, 0x40(%rsp)
000000000104bb38	movq	0x20(%rsp), %rbp
000000000104bb3d	addq	$0x28, %rsp
000000000104bb41	retq
000000000104bb42	callq	runtime.morestack_noctxt
000000000104bb47	jmp	type..hash.runtime.gcSweepBuf
000000000104bb49	int3
000000000104bb4a	int3
000000000104bb4b	int3
000000000104bb4c	int3
000000000104bb4d	int3
000000000104bb4e	int3
000000000104bb4f	int3
type..eq.runtime.gcSweepBuf:
000000000104bb50	movq	%gs:0x30, %rcx
000000000104bb59	cmpq	0x10(%rcx), %rsp
000000000104bb5d	jbe	0x104bba1
000000000104bb5f	subq	$0x28, %rsp
000000000104bb63	movq	%rbp, 0x20(%rsp)
000000000104bb68	leaq	0x20(%rsp), %rbp
000000000104bb6d	movq	0x38(%rsp), %rax
000000000104bb72	movq	%rax, 0x8(%rsp)
000000000104bb77	movq	0x30(%rsp), %rax
000000000104bb7c	movq	%rax, (%rsp)
000000000104bb80	movq	$0x24, 0x10(%rsp)
000000000104bb89	callq	runtime.memequal
000000000104bb8e	movzbl	0x18(%rsp), %eax
000000000104bb93	movb	%al, 0x40(%rsp)
000000000104bb97	movq	0x20(%rsp), %rbp
000000000104bb9c	addq	$0x28, %rsp
000000000104bba0	retq
000000000104bba1	callq	runtime.morestack_noctxt
000000000104bba6	jmp	type..eq.runtime.gcSweepBuf
000000000104bba8	int3
000000000104bba9	int3
000000000104bbaa	int3
000000000104bbab	int3
000000000104bbac	int3
000000000104bbad	int3
000000000104bbae	int3
000000000104bbaf	int3
type..hash.runtime.gcTrigger:
000000000104bbb0	movq	%gs:0x30, %rcx
000000000104bbb9	cmpq	0x10(%rcx), %rsp
000000000104bbbd	jbe	0x104bc02
000000000104bbbf	subq	$0x28, %rsp
000000000104bbc3	movq	%rbp, 0x20(%rsp)
000000000104bbc8	leaq	0x20(%rsp), %rbp
000000000104bbcd	movq	0x30(%rsp), %rax
000000000104bbd2	movq	%rax, (%rsp)
000000000104bbd6	movq	0x38(%rsp), %rax
000000000104bbdb	movq	%rax, 0x8(%rsp)
000000000104bbe0	movq	$0x14, 0x10(%rsp)
000000000104bbe9	callq	runtime.memhash
000000000104bbee	movq	0x18(%rsp), %rax
000000000104bbf3	movq	%rax, 0x40(%rsp)
000000000104bbf8	movq	0x20(%rsp), %rbp
000000000104bbfd	addq	$0x28, %rsp
000000000104bc01	retq
000000000104bc02	callq	runtime.morestack_noctxt
000000000104bc07	jmp	type..hash.runtime.gcTrigger
000000000104bc09	int3
000000000104bc0a	int3
000000000104bc0b	int3
000000000104bc0c	int3
000000000104bc0d	int3
000000000104bc0e	int3
000000000104bc0f	int3
type..eq.runtime.gcTrigger:
000000000104bc10	movq	%gs:0x30, %rcx
000000000104bc19	cmpq	0x10(%rcx), %rsp
000000000104bc1d	jbe	0x104bc61
000000000104bc1f	subq	$0x28, %rsp
000000000104bc23	movq	%rbp, 0x20(%rsp)
000000000104bc28	leaq	0x20(%rsp), %rbp
000000000104bc2d	movq	0x38(%rsp), %rax
000000000104bc32	movq	%rax, 0x8(%rsp)
000000000104bc37	movq	0x30(%rsp), %rax
000000000104bc3c	movq	%rax, (%rsp)
000000000104bc40	movq	$0x14, 0x10(%rsp)
000000000104bc49	callq	runtime.memequal
000000000104bc4e	movzbl	0x18(%rsp), %eax
000000000104bc53	movb	%al, 0x40(%rsp)
000000000104bc57	movq	0x20(%rsp), %rbp
000000000104bc5c	addq	$0x28, %rsp
000000000104bc60	retq
000000000104bc61	callq	runtime.morestack_noctxt
000000000104bc66	jmp	type..eq.runtime.gcTrigger
000000000104bc68	int3
000000000104bc69	int3
000000000104bc6a	int3
000000000104bc6b	int3
000000000104bc6c	int3
000000000104bc6d	int3
000000000104bc6e	int3
000000000104bc6f	int3
type..hash.runtime.treapNode:
000000000104bc70	movq	%gs:0x30, %rcx
000000000104bc79	cmpq	0x10(%rcx), %rsp
000000000104bc7d	jbe	0x104bcc2
000000000104bc7f	subq	$0x28, %rsp
000000000104bc83	movq	%rbp, 0x20(%rsp)
000000000104bc88	leaq	0x20(%rsp), %rbp
000000000104bc8d	movq	0x30(%rsp), %rax
000000000104bc92	movq	%rax, (%rsp)
000000000104bc96	movq	0x38(%rsp), %rax
000000000104bc9b	movq	%rax, 0x8(%rsp)
000000000104bca0	movq	$0x2c, 0x10(%rsp)
000000000104bca9	callq	runtime.memhash
000000000104bcae	movq	0x18(%rsp), %rax
000000000104bcb3	movq	%rax, 0x40(%rsp)
000000000104bcb8	movq	0x20(%rsp), %rbp
000000000104bcbd	addq	$0x28, %rsp
000000000104bcc1	retq
000000000104bcc2	callq	runtime.morestack_noctxt
000000000104bcc7	jmp	type..hash.runtime.treapNode
000000000104bcc9	int3
000000000104bcca	int3
000000000104bccb	int3
000000000104bccc	int3
000000000104bccd	int3
000000000104bcce	int3
000000000104bccf	int3
type..eq.runtime.treapNode:
000000000104bcd0	movq	%gs:0x30, %rcx
000000000104bcd9	cmpq	0x10(%rcx), %rsp
000000000104bcdd	jbe	0x104bd21
000000000104bcdf	subq	$0x28, %rsp
000000000104bce3	movq	%rbp, 0x20(%rsp)
000000000104bce8	leaq	0x20(%rsp), %rbp
000000000104bced	movq	0x38(%rsp), %rax
000000000104bcf2	movq	%rax, 0x8(%rsp)
000000000104bcf7	movq	0x30(%rsp), %rax
000000000104bcfc	movq	%rax, (%rsp)
000000000104bd00	movq	$0x2c, 0x10(%rsp)
000000000104bd09	callq	runtime.memequal
000000000104bd0e	movzbl	0x18(%rsp), %eax
000000000104bd13	movb	%al, 0x40(%rsp)
000000000104bd17	movq	0x20(%rsp), %rbp
000000000104bd1c	addq	$0x28, %rsp
000000000104bd20	retq
000000000104bd21	callq	runtime.morestack_noctxt
000000000104bd26	jmp	type..eq.runtime.treapNode
000000000104bd28	int3
000000000104bd29	int3
000000000104bd2a	int3
000000000104bd2b	int3
000000000104bd2c	int3
000000000104bd2d	int3
000000000104bd2e	int3
000000000104bd2f	int3
type..hash.runtime.mcentral:
000000000104bd30	movq	%gs:0x30, %rcx
000000000104bd39	cmpq	0x10(%rcx), %rsp
000000000104bd3d	jbe	0x104bda7
000000000104bd3f	subq	$0x28, %rsp
000000000104bd43	movq	%rbp, 0x20(%rsp)
000000000104bd48	leaq	0x20(%rsp), %rbp
000000000104bd4d	movq	0x30(%rsp), %rax
000000000104bd52	movq	%rax, (%rsp)
000000000104bd56	movq	0x38(%rsp), %rcx
000000000104bd5b	movq	%rcx, 0x8(%rsp)
000000000104bd60	movq	$0x9, 0x10(%rsp)
000000000104bd69	callq	runtime.memhash
000000000104bd6e	movq	0x18(%rsp), %rax
000000000104bd73	movq	0x30(%rsp), %rcx
000000000104bd78	addq	$0x10, %rcx
000000000104bd7c	movq	%rcx, (%rsp)
000000000104bd80	movq	%rax, 0x8(%rsp)
000000000104bd85	movq	$0x28, 0x10(%rsp)
000000000104bd8e	callq	runtime.memhash
000000000104bd93	movq	0x18(%rsp), %rax
000000000104bd98	movq	%rax, 0x40(%rsp)
000000000104bd9d	movq	0x20(%rsp), %rbp
000000000104bda2	addq	$0x28, %rsp
000000000104bda6	retq
000000000104bda7	callq	runtime.morestack_noctxt
000000000104bdac	jmp	type..hash.runtime.mcentral
000000000104bdae	int3
000000000104bdaf	int3
type..eq.runtime.mcentral:
000000000104bdb0	movq	%gs:0x30, %rcx
000000000104bdb9	cmpq	0x10(%rcx), %rsp
000000000104bdbd	jbe	0x104be22
000000000104bdbf	subq	$0x28, %rsp
000000000104bdc3	movq	%rbp, 0x20(%rsp)
000000000104bdc8	leaq	0x20(%rsp), %rbp
000000000104bdcd	movq	0x38(%rsp), %rax
000000000104bdd2	movq	(%rax), %rcx
000000000104bdd5	movq	0x30(%rsp), %rdx
000000000104bdda	cmpq	%rcx, (%rdx)
000000000104bddd	jne	0x104be1e
000000000104bddf	movzbl	0x8(%rax), %ecx
000000000104bde3	cmpb	%cl, 0x8(%rdx)
000000000104bde6	je	0x104bdf8
000000000104bde8	xorl	%eax, %eax
000000000104bdea	movb	%al, 0x40(%rsp)
000000000104bdee	movq	0x20(%rsp), %rbp
000000000104bdf3	addq	$0x28, %rsp
000000000104bdf7	retq
000000000104bdf8	addq	$0x10, %rax
000000000104bdfc	movq	%rax, 0x8(%rsp)
000000000104be01	leaq	0x10(%rdx), %rax
000000000104be05	movq	%rax, (%rsp)
000000000104be09	movq	$0x28, 0x10(%rsp)
000000000104be12	callq	runtime.memequal
000000000104be17	movzbl	0x18(%rsp), %eax
000000000104be1c	jmp	0x104bdea
000000000104be1e	xorl	%eax, %eax
000000000104be20	jmp	0x104bdea
000000000104be22	callq	runtime.morestack_noctxt
000000000104be27	jmp	type..eq.runtime.mcentral
000000000104be29	int3
000000000104be2a	int3
000000000104be2b	int3
000000000104be2c	int3
000000000104be2d	int3
000000000104be2e	int3
000000000104be2f	int3
type..hash.[2]runtime.gcSweepBuf:
000000000104be30	movq	%gs:0x30, %rcx
000000000104be39	cmpq	0x10(%rcx), %rsp
000000000104be3d	jbe	0x104be98
000000000104be3f	subq	$0x28, %rsp
000000000104be43	movq	%rbp, 0x20(%rsp)
000000000104be48	leaq	0x20(%rsp), %rbp
000000000104be4d	xorl	%eax, %eax
000000000104be4f	movq	0x38(%rsp), %rcx
000000000104be54	jmp	0x104be83
000000000104be56	movq	%rax, 0x18(%rsp)
000000000104be5b	leaq	(%rax,%rax,4), %rdx
000000000104be5f	movq	0x30(%rsp), %rbx
000000000104be64	leaq	(%rbx,%rdx,8), %rdx
000000000104be68	movq	%rdx, (%rsp)
000000000104be6c	movq	%rcx, 0x8(%rsp)
000000000104be71	callq	type..hash.runtime.gcSweepBuf
000000000104be76	movq	0x10(%rsp), %rcx
000000000104be7b	movq	0x18(%rsp), %rax
000000000104be80	incq	%rax
000000000104be83	cmpq	$0x2, %rax
000000000104be87	jl	0x104be56
000000000104be89	movq	%rcx, 0x40(%rsp)
000000000104be8e	movq	0x20(%rsp), %rbp
000000000104be93	addq	$0x28, %rsp
000000000104be97	retq
000000000104be98	callq	runtime.morestack_noctxt
000000000104be9d	jmp	"type..hash.[2]runtime.gcSweepBuf"
000000000104be9f	int3
type..eq.[2]runtime.gcSweepBuf:
000000000104bea0	movq	%gs:0x30, %rcx
000000000104bea9	cmpq	0x10(%rcx), %rsp
000000000104bead	jbe	0x104bf23
000000000104beaf	subq	$0x28, %rsp
000000000104beb3	movq	%rbp, 0x20(%rsp)
000000000104beb8	leaq	0x20(%rsp), %rbp
000000000104bebd	xorl	%eax, %eax
000000000104bebf	jmp	0x104becc
000000000104bec1	movq	0x18(%rsp), %rcx
000000000104bec6	incq	%rcx
000000000104bec9	movq	%rcx, %rax
000000000104becc	cmpq	$0x2, %rax
000000000104bed0	jge	0x104bf14
000000000104bed2	movq	%rax, 0x18(%rsp)
000000000104bed7	leaq	(%rax,%rax,4), %rcx
000000000104bedb	movq	0x30(%rsp), %rdx
000000000104bee0	leaq	(%rdx,%rcx,8), %rbx
000000000104bee4	movq	%rbx, (%rsp)
000000000104bee8	movq	0x38(%rsp), %rbx
000000000104beed	leaq	(%rbx,%rcx,8), %rcx
000000000104bef1	movq	%rcx, 0x8(%rsp)
000000000104bef6	callq	type..eq.runtime.gcSweepBuf
000000000104befb	leaq	0x10(%rsp), %rax
000000000104bf00	cmpb	$0x0, (%rax)
000000000104bf03	jne	0x104bec1
000000000104bf05	movb	$0x0, 0x40(%rsp)
000000000104bf0a	movq	0x20(%rsp), %rbp
000000000104bf0f	addq	$0x28, %rsp
000000000104bf13	retq
000000000104bf14	movb	$0x1, 0x40(%rsp)
000000000104bf19	movq	0x20(%rsp), %rbp
000000000104bf1e	addq	$0x28, %rsp
000000000104bf22	retq
000000000104bf23	callq	runtime.morestack_noctxt
000000000104bf28	jmp	"type..eq.[2]runtime.gcSweepBuf"
000000000104bf2d	int3
000000000104bf2e	int3
000000000104bf2f	int3
type..hash.struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }:
000000000104bf30	movq	%gs:0x30, %rcx
000000000104bf39	cmpq	0x10(%rcx), %rsp
000000000104bf3d	jbe	0x104bf9e
000000000104bf3f	subq	$0x28, %rsp
000000000104bf43	movq	%rbp, 0x20(%rsp)
000000000104bf48	leaq	0x20(%rsp), %rbp
000000000104bf4d	movq	0x30(%rsp), %rax
000000000104bf52	movq	%rax, (%rsp)
000000000104bf56	movq	0x38(%rsp), %rcx
000000000104bf5b	movq	%rcx, 0x8(%rsp)
000000000104bf60	callq	type..hash.runtime.mcentral
000000000104bf65	movq	0x10(%rsp), %rax
000000000104bf6a	movq	0x30(%rsp), %rcx
000000000104bf6f	addq	$0x38, %rcx
000000000104bf73	movq	%rcx, (%rsp)
000000000104bf77	movq	%rax, 0x8(%rsp)
000000000104bf7c	movq	$0x8, 0x10(%rsp)
000000000104bf85	callq	runtime.memhash
000000000104bf8a	movq	0x18(%rsp), %rax
000000000104bf8f	movq	%rax, 0x40(%rsp)
000000000104bf94	movq	0x20(%rsp), %rbp
000000000104bf99	addq	$0x28, %rsp
000000000104bf9d	retq
000000000104bf9e	callq	runtime.morestack_noctxt
000000000104bfa3	jmp	"type..hash.struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }"
000000000104bfa5	int3
000000000104bfa6	int3
000000000104bfa7	int3
000000000104bfa8	int3
000000000104bfa9	int3
000000000104bfaa	int3
000000000104bfab	int3
000000000104bfac	int3
000000000104bfad	int3
000000000104bfae	int3
000000000104bfaf	int3
type..eq.struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }:
000000000104bfb0	movq	%gs:0x30, %rcx
000000000104bfb9	cmpq	0x10(%rcx), %rsp
000000000104bfbd	jbe	0x104c016
000000000104bfbf	subq	$0x20, %rsp
000000000104bfc3	movq	%rbp, 0x18(%rsp)
000000000104bfc8	leaq	0x18(%rsp), %rbp
000000000104bfcd	movq	0x28(%rsp), %rax
000000000104bfd2	movq	%rax, (%rsp)
000000000104bfd6	movq	0x30(%rsp), %rcx
000000000104bfdb	movq	%rcx, 0x8(%rsp)
000000000104bfe0	callq	type..eq.runtime.mcentral
000000000104bfe5	leaq	0x10(%rsp), %rax
000000000104bfea	cmpb	$0x0, (%rax)
000000000104bfed	je	0x104c012
000000000104bfef	movq	0x30(%rsp), %rax
000000000104bff4	movq	0x38(%rax), %rax
000000000104bff8	movq	0x28(%rsp), %rcx
000000000104bffd	cmpq	%rax, 0x38(%rcx)
000000000104c001	sete	%al
000000000104c004	movb	%al, 0x38(%rsp)
000000000104c008	movq	0x18(%rsp), %rbp
000000000104c00d	addq	$0x20, %rsp
000000000104c011	retq
000000000104c012	xorl	%eax, %eax
000000000104c014	jmp	0x104c004
000000000104c016	callq	runtime.morestack_noctxt
000000000104c01b	jmp	"type..eq.struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }"
000000000104c01d	int3
000000000104c01e	int3
000000000104c01f	int3
type..hash.[134]struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }:
000000000104c020	movq	%gs:0x30, %rcx
000000000104c029	cmpq	0x10(%rcx), %rsp
000000000104c02d	jbe	0x104c089
000000000104c02f	subq	$0x28, %rsp
000000000104c033	movq	%rbp, 0x20(%rsp)
000000000104c038	leaq	0x20(%rsp), %rbp
000000000104c03d	xorl	%eax, %eax
000000000104c03f	movq	0x38(%rsp), %rcx
000000000104c044	jmp	0x104c072
000000000104c046	movq	%rax, 0x18(%rsp)
000000000104c04b	shlq	$0x6, %rax
000000000104c04f	movq	0x30(%rsp), %rbx
000000000104c054	addq	%rbx, %rax
000000000104c057	movq	%rax, (%rsp)
000000000104c05b	movq	%rcx, 0x8(%rsp)
000000000104c060	callq	"type..hash.struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }"
000000000104c065	movq	0x10(%rsp), %rcx
000000000104c06a	movq	0x18(%rsp), %rax
000000000104c06f	incq	%rax
000000000104c072	cmpq	$0x86, %rax
000000000104c078	jl	0x104c046
000000000104c07a	movq	%rcx, 0x40(%rsp)
000000000104c07f	movq	0x20(%rsp), %rbp
000000000104c084	addq	$0x28, %rsp
000000000104c088	retq
000000000104c089	callq	runtime.morestack_noctxt
000000000104c08e	jmp	"type..hash.[134]struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }"
type..eq.[134]struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }:
000000000104c090	movq	%gs:0x30, %rcx
000000000104c099	cmpq	0x10(%rcx), %rsp
000000000104c09d	jbe	0x104c114
000000000104c09f	subq	$0x28, %rsp
000000000104c0a3	movq	%rbp, 0x20(%rsp)
000000000104c0a8	leaq	0x20(%rsp), %rbp
000000000104c0ad	xorl	%eax, %eax
000000000104c0af	jmp	0x104c0bc
000000000104c0b1	movq	0x18(%rsp), %rcx
000000000104c0b6	incq	%rcx
000000000104c0b9	movq	%rcx, %rax
000000000104c0bc	cmpq	$0x86, %rax
000000000104c0c2	jge	0x104c105
000000000104c0c4	movq	%rax, 0x18(%rsp)
000000000104c0c9	shlq	$0x6, %rax
000000000104c0cd	movq	0x30(%rsp), %rdx
000000000104c0d2	leaq	(%rax,%rdx), %rbx
000000000104c0d6	movq	%rbx, (%rsp)
000000000104c0da	movq	0x38(%rsp), %rbx
000000000104c0df	addq	%rbx, %rax
000000000104c0e2	movq	%rax, 0x8(%rsp)
000000000104c0e7	callq	"type..eq.struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }"
000000000104c0ec	leaq	0x10(%rsp), %rax
000000000104c0f1	cmpb	$0x0, (%rax)
000000000104c0f4	jne	0x104c0b1
000000000104c0f6	movb	$0x0, 0x40(%rsp)
000000000104c0fb	movq	0x20(%rsp), %rbp
000000000104c100	addq	$0x28, %rsp
000000000104c104	retq
000000000104c105	movb	$0x1, 0x40(%rsp)
000000000104c10a	movq	0x20(%rsp), %rbp
000000000104c10f	addq	$0x28, %rsp
000000000104c113	retq
000000000104c114	callq	runtime.morestack_noctxt
000000000104c119	jmp	"type..eq.[134]struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }"
000000000104c11e	int3
000000000104c11f	int3
type..hash.runtime.specialfinalizer:
000000000104c120	movq	%gs:0x30, %rcx
000000000104c129	cmpq	0x10(%rcx), %rsp
000000000104c12d	jbe	0x104c18e
000000000104c12f	subq	$0x28, %rsp
000000000104c133	movq	%rbp, 0x20(%rsp)
000000000104c138	leaq	0x20(%rsp), %rbp
000000000104c13d	movq	0x30(%rsp), %rax
000000000104c142	movq	%rax, (%rsp)
000000000104c146	movq	0x38(%rsp), %rcx
000000000104c14b	movq	%rcx, 0x8(%rsp)
000000000104c150	callq	type..hash.runtime.special
000000000104c155	movq	0x10(%rsp), %rax
000000000104c15a	movq	0x30(%rsp), %rcx
000000000104c15f	addq	$0x10, %rcx
000000000104c163	movq	%rcx, (%rsp)
000000000104c167	movq	%rax, 0x8(%rsp)
000000000104c16c	movq	$0x20, 0x10(%rsp)
000000000104c175	callq	runtime.memhash
000000000104c17a	movq	0x18(%rsp), %rax
000000000104c17f	movq	%rax, 0x40(%rsp)
000000000104c184	movq	0x20(%rsp), %rbp
000000000104c189	addq	$0x28, %rsp
000000000104c18d	retq
000000000104c18e	callq	runtime.morestack_noctxt
000000000104c193	jmp	type..hash.runtime.specialfinalizer
000000000104c195	int3
000000000104c196	int3
000000000104c197	int3
000000000104c198	int3
000000000104c199	int3
000000000104c19a	int3
000000000104c19b	int3
000000000104c19c	int3
000000000104c19d	int3
000000000104c19e	int3
000000000104c19f	int3
type..eq.runtime.specialfinalizer:
000000000104c1a0	movq	%gs:0x30, %rcx
000000000104c1a9	cmpq	0x10(%rcx), %rsp
000000000104c1ad	jbe	0x104c220
000000000104c1af	subq	$0x28, %rsp
000000000104c1b3	movq	%rbp, 0x20(%rsp)
000000000104c1b8	leaq	0x20(%rsp), %rbp
000000000104c1bd	movq	0x38(%rsp), %rax
000000000104c1c2	movq	(%rax), %rcx
000000000104c1c5	movq	0x30(%rsp), %rdx
000000000104c1ca	cmpq	%rcx, (%rdx)
000000000104c1cd	jne	0x104c21c
000000000104c1cf	movzwl	0x8(%rax), %ecx
000000000104c1d3	cmpw	%cx, 0x8(%rdx)
000000000104c1d7	jne	0x104c218
000000000104c1d9	movzbl	0xa(%rax), %ecx
000000000104c1dd	cmpb	%cl, 0xa(%rdx)
000000000104c1e0	je	0x104c1f2
000000000104c1e2	xorl	%eax, %eax
000000000104c1e4	movb	%al, 0x40(%rsp)
000000000104c1e8	movq	0x20(%rsp), %rbp
000000000104c1ed	addq	$0x28, %rsp
000000000104c1f1	retq
000000000104c1f2	addq	$0x10, %rax
000000000104c1f6	movq	%rax, 0x8(%rsp)
000000000104c1fb	leaq	0x10(%rdx), %rax
000000000104c1ff	movq	%rax, (%rsp)
000000000104c203	movq	$0x20, 0x10(%rsp)
000000000104c20c	callq	runtime.memequal
000000000104c211	movzbl	0x18(%rsp), %eax
000000000104c216	jmp	0x104c1e4
000000000104c218	xorl	%eax, %eax
000000000104c21a	jmp	0x104c1e4
000000000104c21c	xorl	%eax, %eax
000000000104c21e	jmp	0x104c1e4
000000000104c220	callq	runtime.morestack_noctxt
000000000104c225	jmp	type..eq.runtime.specialfinalizer
000000000104c22a	int3
000000000104c22b	int3
000000000104c22c	int3
000000000104c22d	int3
000000000104c22e	int3
000000000104c22f	int3
type..hash.struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }:
000000000104c230	movq	%gs:0x30, %rcx
000000000104c239	cmpq	0x10(%rcx), %rsp
000000000104c23d	jbe	0x104c2a7
000000000104c23f	subq	$0x28, %rsp
000000000104c243	movq	%rbp, 0x20(%rsp)
000000000104c248	leaq	0x20(%rsp), %rbp
000000000104c24d	movq	0x30(%rsp), %rax
000000000104c252	movq	%rax, (%rsp)
000000000104c256	movq	0x38(%rsp), %rcx
000000000104c25b	movq	%rcx, 0x8(%rsp)
000000000104c260	movq	$0x4, 0x10(%rsp)
000000000104c269	callq	runtime.memhash
000000000104c26e	movq	0x18(%rsp), %rax
000000000104c273	movq	0x30(%rsp), %rcx
000000000104c278	addq	$0x8, %rcx
000000000104c27c	movq	%rcx, (%rsp)
000000000104c280	movq	%rax, 0x8(%rsp)
000000000104c285	movq	$0x10, 0x10(%rsp)
000000000104c28e	callq	runtime.memhash
000000000104c293	movq	0x18(%rsp), %rax
000000000104c298	movq	%rax, 0x40(%rsp)
000000000104c29d	movq	0x20(%rsp), %rbp
000000000104c2a2	addq	$0x28, %rsp
000000000104c2a6	retq
000000000104c2a7	callq	runtime.morestack_noctxt
000000000104c2ac	jmp	"type..hash.struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }"
000000000104c2ae	int3
000000000104c2af	int3
type..eq.struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }:
000000000104c2b0	movq	0x10(%rsp), %rax
000000000104c2b5	movl	(%rax), %ecx
000000000104c2b7	movq	0x8(%rsp), %rdx
000000000104c2bc	cmpl	%ecx, (%rdx)
000000000104c2be	jne	0x104c2de
000000000104c2c0	movq	0x8(%rax), %rcx
000000000104c2c4	cmpq	%rcx, 0x8(%rdx)
000000000104c2c8	jne	0x104c2da
000000000104c2ca	movq	0x10(%rdx), %rcx
000000000104c2ce	cmpq	%rcx, 0x10(%rax)
000000000104c2d2	sete	%al
000000000104c2d5	movb	%al, 0x18(%rsp)
000000000104c2d9	retq
000000000104c2da	xorl	%eax, %eax
000000000104c2dc	jmp	0x104c2d5
000000000104c2de	xorl	%eax, %eax
000000000104c2e0	jmp	0x104c2d5
000000000104c2e2	int3
000000000104c2e3	int3
000000000104c2e4	int3
000000000104c2e5	int3
000000000104c2e6	int3
000000000104c2e7	int3
000000000104c2e8	int3
000000000104c2e9	int3
000000000104c2ea	int3
000000000104c2eb	int3
000000000104c2ec	int3
000000000104c2ed	int3
000000000104c2ee	int3
000000000104c2ef	int3
type..hash.[67]struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }:
000000000104c2f0	movq	%gs:0x30, %rcx
000000000104c2f9	cmpq	0x10(%rcx), %rsp
000000000104c2fd	jbe	0x104c358
000000000104c2ff	subq	$0x28, %rsp
000000000104c303	movq	%rbp, 0x20(%rsp)
000000000104c308	leaq	0x20(%rsp), %rbp
000000000104c30d	xorl	%eax, %eax
000000000104c30f	movq	0x38(%rsp), %rcx
000000000104c314	jmp	0x104c343
000000000104c316	movq	%rax, 0x18(%rsp)
000000000104c31b	leaq	(%rax,%rax,2), %rdx
000000000104c31f	movq	0x30(%rsp), %rbx
000000000104c324	leaq	(%rbx,%rdx,8), %rdx
000000000104c328	movq	%rdx, (%rsp)
000000000104c32c	movq	%rcx, 0x8(%rsp)
000000000104c331	callq	"type..hash.struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }"
000000000104c336	movq	0x10(%rsp), %rcx
000000000104c33b	movq	0x18(%rsp), %rax
000000000104c340	incq	%rax
000000000104c343	cmpq	$0x43, %rax
000000000104c347	jl	0x104c316
000000000104c349	movq	%rcx, 0x40(%rsp)
000000000104c34e	movq	0x20(%rsp), %rbp
000000000104c353	addq	$0x28, %rsp
000000000104c357	retq
000000000104c358	callq	runtime.morestack_noctxt
000000000104c35d	jmp	"type..hash.[67]struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }"
000000000104c35f	int3
type..eq.[67]struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }:
000000000104c360	movq	0x8(%rsp), %rax
000000000104c365	movq	0x10(%rsp), %rcx
000000000104c36a	xorl	%edx, %edx
000000000104c36c	jmp	0x104c371
000000000104c36e	incq	%rdx
000000000104c371	cmpq	$0x43, %rdx
000000000104c375	jge	0x104c3a9
000000000104c377	leaq	(%rdx,%rdx,2), %rbx
000000000104c37b	movl	(%rax,%rbx,8), %esi
000000000104c37e	movl	(%rcx,%rbx,8), %edi
000000000104c381	cmpl	%edi, %esi
000000000104c383	jne	0x104c3a3
000000000104c385	movq	0x8(%rax,%rbx,8), %rsi
000000000104c38a	movq	0x8(%rcx,%rbx,8), %rdi
000000000104c38f	cmpq	%rdi, %rsi
000000000104c392	jne	0x104c3a3
000000000104c394	movq	0x10(%rcx,%rbx,8), %rsi
000000000104c399	movq	0x10(%rax,%rbx,8), %rbx
000000000104c39e	cmpq	%rbx, %rsi
000000000104c3a1	je	0x104c36e
000000000104c3a3	movb	$0x0, 0x18(%rsp)
000000000104c3a8	retq
000000000104c3a9	movb	$0x1, 0x18(%rsp)
000000000104c3ae	retq
000000000104c3af	int3
type..hash.runtime.mstats:
000000000104c3b0	movq	%gs:0x30, %rcx
000000000104c3b9	cmpq	0x10(%rcx), %rsp
000000000104c3bd	jbe	0x104c4db
000000000104c3c3	subq	$0x28, %rsp
000000000104c3c7	movq	%rbp, 0x20(%rsp)
000000000104c3cc	leaq	0x20(%rsp), %rbp
000000000104c3d1	movq	0x30(%rsp), %rax
000000000104c3d6	movq	%rax, (%rsp)
000000000104c3da	movq	0x38(%rsp), %rcx
000000000104c3df	movq	%rcx, 0x8(%rsp)
000000000104c3e4	movq	$0x10c8, 0x10(%rsp)
000000000104c3ed	callq	runtime.memhash
000000000104c3f2	movq	0x18(%rsp), %rax
000000000104c3f7	movq	0x30(%rsp), %rcx
000000000104c3fc	leaq	0x10c8(%rcx), %rdx
000000000104c403	movq	%rdx, (%rsp)
000000000104c407	movq	%rax, 0x8(%rsp)
000000000104c40c	callq	runtime.f64hash
000000000104c411	movq	0x10(%rsp), %rax
000000000104c416	movq	0x30(%rsp), %rcx
000000000104c41b	leaq	0x10d0(%rcx), %rdx
000000000104c422	movq	%rdx, (%rsp)
000000000104c426	movq	%rax, 0x8(%rsp)
000000000104c42b	movq	$0x2, 0x10(%rsp)
000000000104c434	callq	runtime.memhash
000000000104c439	movq	0x18(%rsp), %rax
000000000104c43e	movq	0x30(%rsp), %rcx
000000000104c443	leaq	0x10d8(%rcx), %rdx
000000000104c44a	movq	%rdx, (%rsp)
000000000104c44e	movq	%rax, 0x8(%rsp)
000000000104c453	callq	"type..hash.[67]struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }"
000000000104c458	movq	0x10(%rsp), %rax
000000000104c45d	movq	0x30(%rsp), %rcx
000000000104c462	leaq	0x1720(%rcx), %rdx
000000000104c469	movq	%rdx, (%rsp)
000000000104c46d	movq	%rax, 0x8(%rsp)
000000000104c472	movq	$0x10, 0x10(%rsp)
000000000104c47b	callq	runtime.memhash
000000000104c480	movq	0x18(%rsp), %rax
000000000104c485	movq	0x30(%rsp), %rcx
000000000104c48a	leaq	0x1730(%rcx), %rdx
000000000104c491	movq	%rdx, (%rsp)
000000000104c495	movq	%rax, 0x8(%rsp)
000000000104c49a	callq	runtime.f64hash
000000000104c49f	movq	0x10(%rsp), %rax
000000000104c4a4	movq	0x30(%rsp), %rcx
000000000104c4a9	addq	$0x1738, %rcx
000000000104c4b0	movq	%rcx, (%rsp)
000000000104c4b4	movq	%rax, 0x8(%rsp)
000000000104c4b9	movq	$0x20, 0x10(%rsp)
000000000104c4c2	callq	runtime.memhash
000000000104c4c7	movq	0x18(%rsp), %rax
000000000104c4cc	movq	%rax, 0x40(%rsp)
000000000104c4d1	movq	0x20(%rsp), %rbp
000000000104c4d6	addq	$0x28, %rsp
000000000104c4da	retq
000000000104c4db	callq	runtime.morestack_noctxt
000000000104c4e0	jmp	type..hash.runtime.mstats
000000000104c4e5	int3
000000000104c4e6	int3
000000000104c4e7	int3
000000000104c4e8	int3
000000000104c4e9	int3
000000000104c4ea	int3
000000000104c4eb	int3
000000000104c4ec	int3
000000000104c4ed	int3
000000000104c4ee	int3
000000000104c4ef	int3
type..eq.runtime.mstats:
000000000104c4f0	movq	%gs:0x30, %rcx
000000000104c4f9	cmpq	0x10(%rcx), %rsp
000000000104c4fd	jbe	0x104c664
000000000104c503	subq	$0x28, %rsp
000000000104c507	movq	%rbp, 0x20(%rsp)
000000000104c50c	leaq	0x20(%rsp), %rbp
000000000104c511	movq	0x38(%rsp), %rax
000000000104c516	movq	%rax, 0x8(%rsp)
000000000104c51b	movq	0x30(%rsp), %rcx
000000000104c520	movq	%rcx, (%rsp)
000000000104c524	movq	$0x10c8, 0x10(%rsp)
000000000104c52d	callq	runtime.memequal
000000000104c532	leaq	0x18(%rsp), %rax
000000000104c537	cmpb	$0x0, (%rax)
000000000104c53a	je	0x104c653
000000000104c540	movq	0x30(%rsp), %rax
000000000104c545	movsd	0x10c8(%rax), %xmm0
000000000104c54d	movq	0x38(%rsp), %rcx
000000000104c552	movsd	0x10c8(%rcx), %xmm1
000000000104c55a	ucomisd	%xmm0, %xmm1
000000000104c55e	jne	0x104c64c
000000000104c564	jp	0x104c64c
000000000104c56a	movzbl	0x10d0(%rax), %edx
000000000104c571	cmpb	%dl, 0x10d0(%rcx)
000000000104c577	jne	0x104c645
000000000104c57d	movzbl	0x10d1(%rax), %edx
000000000104c584	cmpb	%dl, 0x10d1(%rcx)
000000000104c58a	je	0x104c615
000000000104c590	xorl	%edx, %edx
000000000104c592	testb	%dl, %dl
000000000104c594	je	0x104c611
000000000104c596	movq	0x1720(%rcx), %rdx
000000000104c59d	cmpq	%rdx, 0x1720(%rax)
000000000104c5a4	jne	0x104c60d
000000000104c5a6	movq	0x1728(%rcx), %rdx
000000000104c5ad	cmpq	%rdx, 0x1728(%rax)
000000000104c5b4	jne	0x104c609
000000000104c5b6	movsd	0x1730(%rcx), %xmm0
000000000104c5be	movsd	0x1730(%rax), %xmm1
000000000104c5c6	ucomisd	%xmm1, %xmm0
000000000104c5ca	jne	0x104c5ce
000000000104c5cc	jnp	0x104c5de
000000000104c5ce	xorl	%eax, %eax
000000000104c5d0	movb	%al, 0x40(%rsp)
000000000104c5d4	movq	0x20(%rsp), %rbp
000000000104c5d9	addq	$0x28, %rsp
000000000104c5dd	retq
000000000104c5de	addq	$0x1738, %rcx
000000000104c5e5	movq	%rcx, 0x8(%rsp)
000000000104c5ea	addq	$0x1738, %rax
000000000104c5f0	movq	%rax, (%rsp)
000000000104c5f4	movq	$0x20, 0x10(%rsp)
000000000104c5fd	callq	runtime.memequal
000000000104c602	movzbl	0x18(%rsp), %eax
000000000104c607	jmp	0x104c5d0
000000000104c609	xorl	%eax, %eax
000000000104c60b	jmp	0x104c5d0
000000000104c60d	xorl	%eax, %eax
000000000104c60f	jmp	0x104c5d0
000000000104c611	xorl	%eax, %eax
000000000104c613	jmp	0x104c5d0
000000000104c615	leaq	0x10d8(%rax), %rdx
000000000104c61c	movq	%rdx, (%rsp)
000000000104c620	leaq	0x10d8(%rcx), %rdx
000000000104c627	movq	%rdx, 0x8(%rsp)
000000000104c62c	callq	"type..eq.[67]struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }"
000000000104c631	movzbl	0x10(%rsp), %edx
000000000104c636	movq	0x30(%rsp), %rax
000000000104c63b	movq	0x38(%rsp), %rcx
000000000104c640	jmp	0x104c592
000000000104c645	xorl	%edx, %edx
000000000104c647	jmp	0x104c592
000000000104c64c	xorl	%edx, %edx
000000000104c64e	jmp	0x104c592
000000000104c653	movq	0x30(%rsp), %rax
000000000104c658	movq	0x38(%rsp), %rcx
000000000104c65d	xorl	%edx, %edx
000000000104c65f	jmp	0x104c592
000000000104c664	callq	runtime.morestack_noctxt
000000000104c669	jmp	type..eq.runtime.mstats
000000000104c66e	int3
000000000104c66f	int3
runtime.(*plainError).Error:
000000000104c670	movq	%gs:0x30, %rcx
000000000104c679	cmpq	0x10(%rcx), %rsp
000000000104c67d	jbe	0x104c6da
000000000104c67f	subq	$0x28, %rsp
000000000104c683	movq	%rbp, 0x20(%rsp)
000000000104c688	leaq	0x20(%rsp), %rbp
000000000104c68d	movq	0x20(%rcx), %rbx
000000000104c691	testq	%rbx, %rbx
000000000104c694	jne	0x104c6e1
000000000104c696	movq	0x30(%rsp), %rax
000000000104c69b	testq	%rax, %rax
000000000104c69e	je	0x104c6d3
000000000104c6a0	movq	0x8(%rax), %rcx
000000000104c6a4	movq	(%rax), %rax
000000000104c6a7	movq	%rax, (%rsp)
000000000104c6ab	movq	%rcx, 0x8(%rsp)
000000000104c6b0	callq	runtime.plainError.Error
000000000104c6b5	movq	0x10(%rsp), %rax
000000000104c6ba	movq	0x18(%rsp), %rcx
000000000104c6bf	movq	%rax, 0x38(%rsp)
000000000104c6c4	movq	%rcx, 0x40(%rsp)
000000000104c6c9	movq	0x20(%rsp), %rbp
000000000104c6ce	addq	$0x28, %rsp
000000000104c6d2	retq
000000000104c6d3	callq	runtime.panicwrap
000000000104c6d8	ud2
000000000104c6da	callq	runtime.morestack_noctxt
000000000104c6df	jmp	"runtime.(*plainError).Error"
000000000104c6e1	leaq	0x30(%rsp), %rdi
000000000104c6e6	cmpq	%rdi, (%rbx)
000000000104c6e9	jne	0x104c696
000000000104c6eb	movq	%rsp, (%rbx)
000000000104c6ee	jmp	0x104c696
type..hash.runtime.rwmutex:
000000000104c6f0	movq	%gs:0x30, %rcx
000000000104c6f9	cmpq	0x10(%rcx), %rsp
000000000104c6fd	jbe	0x104c767
000000000104c6ff	subq	$0x28, %rsp
000000000104c703	movq	%rbp, 0x20(%rsp)
000000000104c708	leaq	0x20(%rsp), %rbp
000000000104c70d	movq	0x30(%rsp), %rax
000000000104c712	movq	%rax, (%rsp)
000000000104c716	movq	0x38(%rsp), %rcx
000000000104c71b	movq	%rcx, 0x8(%rsp)
000000000104c720	movq	$0x14, 0x10(%rsp)
000000000104c729	callq	runtime.memhash
000000000104c72e	movq	0x18(%rsp), %rax
000000000104c733	movq	0x30(%rsp), %rcx
000000000104c738	addq	$0x18, %rcx
000000000104c73c	movq	%rcx, (%rsp)
000000000104c740	movq	%rax, 0x8(%rsp)
000000000104c745	movq	$0x18, 0x10(%rsp)
000000000104c74e	callq	runtime.memhash
000000000104c753	movq	0x18(%rsp), %rax
000000000104c758	movq	%rax, 0x40(%rsp)
000000000104c75d	movq	0x20(%rsp), %rbp
000000000104c762	addq	$0x28, %rsp
000000000104c766	retq
000000000104c767	callq	runtime.morestack_noctxt
000000000104c76c	jmp	type..hash.runtime.rwmutex
000000000104c76e	int3
000000000104c76f	int3
type..eq.runtime.rwmutex:
000000000104c770	movq	%gs:0x30, %rcx
000000000104c779	cmpq	0x10(%rcx), %rsp
000000000104c77d	jbe	0x104c7f8
000000000104c77f	subq	$0x28, %rsp
000000000104c783	movq	%rbp, 0x20(%rsp)
000000000104c788	leaq	0x20(%rsp), %rbp
000000000104c78d	movq	0x38(%rsp), %rax
000000000104c792	movq	%rax, 0x8(%rsp)
000000000104c797	movq	0x30(%rsp), %rcx
000000000104c79c	movq	%rcx, (%rsp)
000000000104c7a0	movq	$0x14, 0x10(%rsp)
000000000104c7a9	callq	runtime.memequal
000000000104c7ae	leaq	0x18(%rsp), %rax
000000000104c7b3	cmpb	$0x0, (%rax)
000000000104c7b6	jne	0x104c7c8
000000000104c7b8	xorl	%eax, %eax
000000000104c7ba	movb	%al, 0x40(%rsp)
000000000104c7be	movq	0x20(%rsp), %rbp
000000000104c7c3	addq	$0x28, %rsp
000000000104c7c7	retq
000000000104c7c8	movq	0x38(%rsp), %rax
000000000104c7cd	addq	$0x18, %rax
000000000104c7d1	movq	%rax, 0x8(%rsp)
000000000104c7d6	movq	0x30(%rsp), %rax
000000000104c7db	addq	$0x18, %rax
000000000104c7df	movq	%rax, (%rsp)
000000000104c7e3	movq	$0x18, 0x10(%rsp)
000000000104c7ec	callq	runtime.memequal
000000000104c7f1	movzbl	0x18(%rsp), %eax
000000000104c7f6	jmp	0x104c7ba
000000000104c7f8	callq	runtime.morestack_noctxt
000000000104c7fd	jmp	type..eq.runtime.rwmutex
000000000104c802	int3
000000000104c803	int3
000000000104c804	int3
000000000104c805	int3
000000000104c806	int3
000000000104c807	int3
000000000104c808	int3
000000000104c809	int3
000000000104c80a	int3
000000000104c80b	int3
000000000104c80c	int3
000000000104c80d	int3
000000000104c80e	int3
000000000104c80f	int3
type..hash.runtime.semaRoot:
000000000104c810	movq	%gs:0x30, %rcx
000000000104c819	cmpq	0x10(%rcx), %rsp
000000000104c81d	jbe	0x104c862
000000000104c81f	subq	$0x28, %rsp
000000000104c823	movq	%rbp, 0x20(%rsp)
000000000104c828	leaq	0x20(%rsp), %rbp
000000000104c82d	movq	0x30(%rsp), %rax
000000000104c832	movq	%rax, (%rsp)
000000000104c836	movq	0x38(%rsp), %rax
000000000104c83b	movq	%rax, 0x8(%rsp)
000000000104c840	movq	$0x14, 0x10(%rsp)
000000000104c849	callq	runtime.memhash
000000000104c84e	movq	0x18(%rsp), %rax
000000000104c853	movq	%rax, 0x40(%rsp)
000000000104c858	movq	0x20(%rsp), %rbp
000000000104c85d	addq	$0x28, %rsp
000000000104c861	retq
000000000104c862	callq	runtime.morestack_noctxt
000000000104c867	jmp	type..hash.runtime.semaRoot
000000000104c869	int3
000000000104c86a	int3
000000000104c86b	int3
000000000104c86c	int3
000000000104c86d	int3
000000000104c86e	int3
000000000104c86f	int3
type..eq.runtime.semaRoot:
000000000104c870	movq	%gs:0x30, %rcx
000000000104c879	cmpq	0x10(%rcx), %rsp
000000000104c87d	jbe	0x104c8c1
000000000104c87f	subq	$0x28, %rsp
000000000104c883	movq	%rbp, 0x20(%rsp)
000000000104c888	leaq	0x20(%rsp), %rbp
000000000104c88d	movq	0x38(%rsp), %rax
000000000104c892	movq	%rax, 0x8(%rsp)
000000000104c897	movq	0x30(%rsp), %rax
000000000104c89c	movq	%rax, (%rsp)
000000000104c8a0	movq	$0x14, 0x10(%rsp)
000000000104c8a9	callq	runtime.memequal
000000000104c8ae	movzbl	0x18(%rsp), %eax
000000000104c8b3	movb	%al, 0x40(%rsp)
000000000104c8b7	movq	0x20(%rsp), %rbp
000000000104c8bc	addq	$0x28, %rsp
000000000104c8c0	retq
000000000104c8c1	callq	runtime.morestack_noctxt
000000000104c8c6	jmp	type..eq.runtime.semaRoot
000000000104c8c8	int3
000000000104c8c9	int3
000000000104c8ca	int3
000000000104c8cb	int3
000000000104c8cc	int3
000000000104c8cd	int3
000000000104c8ce	int3
000000000104c8cf	int3
type..hash.runtime.sigTabT:
000000000104c8d0	movq	%gs:0x30, %rcx
000000000104c8d9	cmpq	0x10(%rcx), %rsp
000000000104c8dd	jbe	0x104c93e
000000000104c8df	subq	$0x28, %rsp
000000000104c8e3	movq	%rbp, 0x20(%rsp)
000000000104c8e8	leaq	0x20(%rsp), %rbp
000000000104c8ed	movq	0x30(%rsp), %rax
000000000104c8f2	movq	%rax, (%rsp)
000000000104c8f6	movq	0x38(%rsp), %rcx
000000000104c8fb	movq	%rcx, 0x8(%rsp)
000000000104c900	movq	$0x4, 0x10(%rsp)
000000000104c909	callq	runtime.memhash
000000000104c90e	movq	0x18(%rsp), %rax
000000000104c913	movq	0x30(%rsp), %rcx
000000000104c918	addq	$0x8, %rcx
000000000104c91c	movq	%rcx, (%rsp)
000000000104c920	movq	%rax, 0x8(%rsp)
000000000104c925	callq	runtime.strhash
000000000104c92a	movq	0x10(%rsp), %rax
000000000104c92f	movq	%rax, 0x40(%rsp)
000000000104c934	movq	0x20(%rsp), %rbp
000000000104c939	addq	$0x28, %rsp
000000000104c93d	retq
000000000104c93e	callq	runtime.morestack_noctxt
000000000104c943	jmp	type..hash.runtime.sigTabT
000000000104c945	int3
000000000104c946	int3
000000000104c947	int3
000000000104c948	int3
000000000104c949	int3
000000000104c94a	int3
000000000104c94b	int3
000000000104c94c	int3
000000000104c94d	int3
000000000104c94e	int3
000000000104c94f	int3
type..eq.runtime.sigTabT:
000000000104c950	movq	%gs:0x30, %rcx
000000000104c959	cmpq	0x10(%rcx), %rsp
000000000104c95d	jbe	0x104c9c0
000000000104c95f	subq	$0x28, %rsp
000000000104c963	movq	%rbp, 0x20(%rsp)
000000000104c968	leaq	0x20(%rsp), %rbp
000000000104c96d	movq	0x38(%rsp), %rax
000000000104c972	movl	(%rax), %ecx
000000000104c974	movq	0x30(%rsp), %rdx
000000000104c979	cmpl	%ecx, (%rdx)
000000000104c97b	jne	0x104c9bc
000000000104c97d	movq	0x10(%rax), %rcx
000000000104c981	movq	0x8(%rax), %rax
000000000104c985	movq	0x10(%rdx), %rbx
000000000104c989	movq	0x8(%rdx), %rdx
000000000104c98d	cmpq	%rcx, %rbx
000000000104c990	je	0x104c9a2
000000000104c992	xorl	%eax, %eax
000000000104c994	movb	%al, 0x40(%rsp)
000000000104c998	movq	0x20(%rsp), %rbp
000000000104c99d	addq	$0x28, %rsp
000000000104c9a1	retq
000000000104c9a2	movq	%rdx, (%rsp)
000000000104c9a6	movq	%rax, 0x8(%rsp)
000000000104c9ab	movq	%rbx, 0x10(%rsp)
000000000104c9b0	callq	runtime.memequal
000000000104c9b5	movzbl	0x18(%rsp), %eax
000000000104c9ba	jmp	0x104c994
000000000104c9bc	xorl	%eax, %eax
000000000104c9be	jmp	0x104c994
000000000104c9c0	callq	runtime.morestack_noctxt
000000000104c9c5	jmp	type..eq.runtime.sigTabT
000000000104c9c7	int3
000000000104c9c8	int3
000000000104c9c9	int3
000000000104c9ca	int3
000000000104c9cb	int3
000000000104c9cc	int3
000000000104c9cd	int3
000000000104c9ce	int3
000000000104c9cf	int3
type..hash.runtime.stackmap:
000000000104c9d0	movq	%gs:0x30, %rcx
000000000104c9d9	cmpq	0x10(%rcx), %rsp
000000000104c9dd	jbe	0x104ca22
000000000104c9df	subq	$0x28, %rsp
000000000104c9e3	movq	%rbp, 0x20(%rsp)
000000000104c9e8	leaq	0x20(%rsp), %rbp
000000000104c9ed	movq	0x30(%rsp), %rax
000000000104c9f2	movq	%rax, (%rsp)
000000000104c9f6	movq	0x38(%rsp), %rax
000000000104c9fb	movq	%rax, 0x8(%rsp)
000000000104ca00	movq	$0x9, 0x10(%rsp)
000000000104ca09	callq	runtime.memhash
000000000104ca0e	movq	0x18(%rsp), %rax
000000000104ca13	movq	%rax, 0x40(%rsp)
000000000104ca18	movq	0x20(%rsp), %rbp
000000000104ca1d	addq	$0x28, %rsp
000000000104ca21	retq
000000000104ca22	callq	runtime.morestack_noctxt
000000000104ca27	jmp	type..hash.runtime.stackmap
000000000104ca29	int3
000000000104ca2a	int3
000000000104ca2b	int3
000000000104ca2c	int3
000000000104ca2d	int3
000000000104ca2e	int3
000000000104ca2f	int3
type..eq.runtime.stackmap:
000000000104ca30	movq	%gs:0x30, %rcx
000000000104ca39	cmpq	0x10(%rcx), %rsp
000000000104ca3d	jbe	0x104ca81
000000000104ca3f	subq	$0x28, %rsp
000000000104ca43	movq	%rbp, 0x20(%rsp)
000000000104ca48	leaq	0x20(%rsp), %rbp
000000000104ca4d	movq	0x38(%rsp), %rax
000000000104ca52	movq	%rax, 0x8(%rsp)
000000000104ca57	movq	0x30(%rsp), %rax
000000000104ca5c	movq	%rax, (%rsp)
000000000104ca60	movq	$0x9, 0x10(%rsp)
000000000104ca69	callq	runtime.memequal
000000000104ca6e	movzbl	0x18(%rsp), %eax
000000000104ca73	movb	%al, 0x40(%rsp)
000000000104ca77	movq	0x20(%rsp), %rbp
000000000104ca7c	addq	$0x28, %rsp
000000000104ca80	retq
000000000104ca81	callq	runtime.morestack_noctxt
000000000104ca86	jmp	type..eq.runtime.stackmap
000000000104ca88	int3
000000000104ca89	int3
000000000104ca8a	int3
000000000104ca8b	int3
000000000104ca8c	int3
000000000104ca8d	int3
000000000104ca8e	int3
000000000104ca8f	int3
type..hash.runtime.sweepdata:
000000000104ca90	movq	%gs:0x30, %rcx
000000000104ca99	cmpq	0x10(%rcx), %rsp
000000000104ca9d	jbe	0x104cb07
000000000104ca9f	subq	$0x28, %rsp
000000000104caa3	movq	%rbp, 0x20(%rsp)
000000000104caa8	leaq	0x20(%rsp), %rbp
000000000104caad	movq	0x30(%rsp), %rax
000000000104cab2	movq	%rax, (%rsp)
000000000104cab6	movq	0x38(%rsp), %rcx
000000000104cabb	movq	%rcx, 0x8(%rsp)
000000000104cac0	movq	$0x12, 0x10(%rsp)
000000000104cac9	callq	runtime.memhash
000000000104cace	movq	0x18(%rsp), %rax
000000000104cad3	movq	0x30(%rsp), %rcx
000000000104cad8	addq	$0x14, %rcx
000000000104cadc	movq	%rcx, (%rsp)
000000000104cae0	movq	%rax, 0x8(%rsp)
000000000104cae5	movq	$0x8, 0x10(%rsp)
000000000104caee	callq	runtime.memhash
000000000104caf3	movq	0x18(%rsp), %rax
000000000104caf8	movq	%rax, 0x40(%rsp)
000000000104cafd	movq	0x20(%rsp), %rbp
000000000104cb02	addq	$0x28, %rsp
000000000104cb06	retq
000000000104cb07	callq	runtime.morestack_noctxt
000000000104cb0c	jmp	type..hash.runtime.sweepdata
000000000104cb0e	int3
000000000104cb0f	int3
type..eq.runtime.sweepdata:
000000000104cb10	movq	%gs:0x30, %rcx
000000000104cb19	cmpq	0x10(%rcx), %rsp
000000000104cb1d	jbe	0x104cb89
000000000104cb1f	subq	$0x28, %rsp
000000000104cb23	movq	%rbp, 0x20(%rsp)
000000000104cb28	leaq	0x20(%rsp), %rbp
000000000104cb2d	movq	0x38(%rsp), %rax
000000000104cb32	movq	%rax, 0x8(%rsp)
000000000104cb37	movq	0x30(%rsp), %rcx
000000000104cb3c	movq	%rcx, (%rsp)
000000000104cb40	movq	$0x12, 0x10(%rsp)
000000000104cb49	callq	runtime.memequal
000000000104cb4e	leaq	0x18(%rsp), %rax
000000000104cb53	cmpb	$0x0, (%rax)
000000000104cb56	je	0x104cb85
000000000104cb58	movq	0x38(%rsp), %rax
000000000104cb5d	movl	0x14(%rax), %ecx
000000000104cb60	movq	0x30(%rsp), %rdx
000000000104cb65	cmpl	%ecx, 0x14(%rdx)
000000000104cb68	jne	0x104cb81
000000000104cb6a	movl	0x18(%rdx), %ecx
000000000104cb6d	cmpl	%ecx, 0x18(%rax)
000000000104cb70	sete	%al
000000000104cb73	movb	%al, 0x40(%rsp)
000000000104cb77	movq	0x20(%rsp), %rbp
000000000104cb7c	addq	$0x28, %rsp
000000000104cb80	retq
000000000104cb81	xorl	%eax, %eax
000000000104cb83	jmp	0x104cb73
000000000104cb85	xorl	%eax, %eax
000000000104cb87	jmp	0x104cb73
000000000104cb89	callq	runtime.morestack_noctxt
000000000104cb8e	jmp	type..eq.runtime.sweepdata
type..hash.runtime.traceStack:
000000000104cb90	movq	%gs:0x30, %rcx
000000000104cb99	cmpq	0x10(%rcx), %rsp
000000000104cb9d	jbe	0x104cc07
000000000104cb9f	subq	$0x28, %rsp
000000000104cba3	movq	%rbp, 0x20(%rsp)
000000000104cba8	leaq	0x20(%rsp), %rbp
000000000104cbad	movq	0x30(%rsp), %rax
000000000104cbb2	movq	%rax, (%rsp)
000000000104cbb6	movq	0x38(%rsp), %rcx
000000000104cbbb	movq	%rcx, 0x8(%rsp)
000000000104cbc0	movq	$0x14, 0x10(%rsp)
000000000104cbc9	callq	runtime.memhash
000000000104cbce	movq	0x18(%rsp), %rax
000000000104cbd3	movq	0x30(%rsp), %rcx
000000000104cbd8	addq	$0x18, %rcx
000000000104cbdc	movq	%rcx, (%rsp)
000000000104cbe0	movq	%rax, 0x8(%rsp)
000000000104cbe5	movq	$0x8, 0x10(%rsp)
000000000104cbee	callq	runtime.memhash
000000000104cbf3	movq	0x18(%rsp), %rax
000000000104cbf8	movq	%rax, 0x40(%rsp)
000000000104cbfd	movq	0x20(%rsp), %rbp
000000000104cc02	addq	$0x28, %rsp
000000000104cc06	retq
000000000104cc07	callq	runtime.morestack_noctxt
000000000104cc0c	jmp	type..hash.runtime.traceStack
000000000104cc0e	int3
000000000104cc0f	int3
type..eq.runtime.traceStack:
000000000104cc10	movq	%gs:0x30, %rcx
000000000104cc19	cmpq	0x10(%rcx), %rsp
000000000104cc1d	jbe	0x104cc87
000000000104cc1f	subq	$0x28, %rsp
000000000104cc23	movq	%rbp, 0x20(%rsp)
000000000104cc28	leaq	0x20(%rsp), %rbp
000000000104cc2d	movq	0x38(%rsp), %rax
000000000104cc32	movq	%rax, 0x8(%rsp)
000000000104cc37	movq	0x30(%rsp), %rcx
000000000104cc3c	movq	%rcx, (%rsp)
000000000104cc40	movq	$0x14, 0x10(%rsp)
000000000104cc49	callq	runtime.memequal
000000000104cc4e	leaq	0x18(%rsp), %rax
000000000104cc53	cmpb	$0x0, (%rax)
000000000104cc56	je	0x104cc83
000000000104cc58	movq	0x38(%rsp), %rax
000000000104cc5d	movq	0x18(%rax), %rax
000000000104cc61	movq	0x30(%rsp), %rcx
000000000104cc66	cmpq	%rax, 0x18(%rcx)
000000000104cc6a	jne	0x104cc7f
000000000104cc6c	movl	$0x1, %eax
000000000104cc71	movb	%al, 0x40(%rsp)
000000000104cc75	movq	0x20(%rsp), %rbp
000000000104cc7a	addq	$0x28, %rsp
000000000104cc7e	retq
000000000104cc7f	xorl	%eax, %eax
000000000104cc81	jmp	0x104cc71
000000000104cc83	xorl	%eax, %eax
000000000104cc85	jmp	0x104cc71
000000000104cc87	callq	runtime.morestack_noctxt
000000000104cc8c	jmp	type..eq.runtime.traceStack
000000000104cc8e	int3
000000000104cc8f	int3
type..hash.runtime.traceStackTable:
000000000104cc90	movq	%gs:0x30, %rcx
000000000104cc99	cmpq	0x10(%rcx), %rsp
000000000104cc9d	jbe	0x104cd07
000000000104cc9f	subq	$0x28, %rsp
000000000104cca3	movq	%rbp, 0x20(%rsp)
000000000104cca8	leaq	0x20(%rsp), %rbp
000000000104ccad	movq	0x30(%rsp), %rax
000000000104ccb2	movq	%rax, (%rsp)
000000000104ccb6	movq	0x38(%rsp), %rcx
000000000104ccbb	movq	%rcx, 0x8(%rsp)
000000000104ccc0	movq	$0xc, 0x10(%rsp)
000000000104ccc9	callq	runtime.memhash
000000000104ccce	movq	0x18(%rsp), %rax
000000000104ccd3	movq	0x30(%rsp), %rcx
000000000104ccd8	addq	$0x10, %rcx
000000000104ccdc	movq	%rcx, (%rsp)
000000000104cce0	movq	%rax, 0x8(%rsp)
000000000104cce5	movq	$0x10010, 0x10(%rsp)
000000000104ccee	callq	runtime.memhash
000000000104ccf3	movq	0x18(%rsp), %rax
000000000104ccf8	movq	%rax, 0x40(%rsp)
000000000104ccfd	movq	0x20(%rsp), %rbp
000000000104cd02	addq	$0x28, %rsp
000000000104cd06	retq
000000000104cd07	callq	runtime.morestack_noctxt
000000000104cd0c	jmp	type..hash.runtime.traceStackTable
000000000104cd0e	int3
000000000104cd0f	int3
type..eq.runtime.traceStackTable:
000000000104cd10	movq	%gs:0x30, %rcx
000000000104cd19	cmpq	0x10(%rcx), %rsp
000000000104cd1d	jbe	0x104cda6
000000000104cd23	subq	$0x28, %rsp
000000000104cd27	movq	%rbp, 0x20(%rsp)
000000000104cd2c	leaq	0x20(%rsp), %rbp
000000000104cd31	movq	0x38(%rsp), %rax
000000000104cd36	movq	(%rax), %rcx
000000000104cd39	movq	0x30(%rsp), %rdx
000000000104cd3e	cmpq	%rcx, (%rdx)
000000000104cd41	jne	0x104cda2
000000000104cd43	movl	0x8(%rax), %ecx
000000000104cd46	cmpl	%ecx, 0x8(%rdx)
000000000104cd49	jne	0x104cd9e
000000000104cd4b	movq	0x10(%rax), %rcx
000000000104cd4f	cmpq	%rcx, 0x10(%rdx)
000000000104cd53	jne	0x104cd9a
000000000104cd55	movq	0x18(%rdx), %rcx
000000000104cd59	cmpq	%rcx, 0x18(%rax)
000000000104cd5d	sete	%cl
000000000104cd60	testb	%cl, %cl
000000000104cd62	jne	0x104cd74
000000000104cd64	xorl	%eax, %eax
000000000104cd66	movb	%al, 0x40(%rsp)
000000000104cd6a	movq	0x20(%rsp), %rbp
000000000104cd6f	addq	$0x28, %rsp
000000000104cd73	retq
000000000104cd74	leaq	0x20(%rdx), %rcx
000000000104cd78	movq	%rcx, (%rsp)
000000000104cd7c	addq	$0x20, %rax
000000000104cd80	movq	%rax, 0x8(%rsp)
000000000104cd85	movq	$0x10000, 0x10(%rsp)
000000000104cd8e	callq	runtime.memequal
000000000104cd93	movzbl	0x18(%rsp), %eax
000000000104cd98	jmp	0x104cd66
000000000104cd9a	xorl	%ecx, %ecx
000000000104cd9c	jmp	0x104cd60
000000000104cd9e	xorl	%eax, %eax
000000000104cda0	jmp	0x104cd66
000000000104cda2	xorl	%eax, %eax
000000000104cda4	jmp	0x104cd66
000000000104cda6	callq	runtime.morestack_noctxt
000000000104cdab	jmp	type..eq.runtime.traceStackTable
type..hash.[15]runtime.dbgVar:
000000000104cdb0	movq	%gs:0x30, %rcx
000000000104cdb9	cmpq	0x10(%rcx), %rsp
000000000104cdbd	jbe	0x104ce18
000000000104cdbf	subq	$0x28, %rsp
000000000104cdc3	movq	%rbp, 0x20(%rsp)
000000000104cdc8	leaq	0x20(%rsp), %rbp
000000000104cdcd	xorl	%eax, %eax
000000000104cdcf	movq	0x38(%rsp), %rcx
000000000104cdd4	jmp	0x104ce03
000000000104cdd6	movq	%rax, 0x18(%rsp)
000000000104cddb	leaq	(%rax,%rax,2), %rdx
000000000104cddf	movq	0x30(%rsp), %rbx
000000000104cde4	leaq	(%rbx,%rdx,8), %rdx
000000000104cde8	movq	%rdx, (%rsp)
000000000104cdec	movq	%rcx, 0x8(%rsp)
000000000104cdf1	callq	type..hash.runtime.dbgVar
000000000104cdf6	movq	0x10(%rsp), %rcx
000000000104cdfb	movq	0x18(%rsp), %rax
000000000104ce00	incq	%rax
000000000104ce03	cmpq	$0xf, %rax
000000000104ce07	jl	0x104cdd6
000000000104ce09	movq	%rcx, 0x40(%rsp)
000000000104ce0e	movq	0x20(%rsp), %rbp
000000000104ce13	addq	$0x28, %rsp
000000000104ce17	retq
000000000104ce18	callq	runtime.morestack_noctxt
000000000104ce1d	jmp	"type..hash.[15]runtime.dbgVar"
000000000104ce1f	int3
type..eq.[15]runtime.dbgVar:
000000000104ce20	movq	%gs:0x30, %rcx
000000000104ce29	cmpq	0x10(%rcx), %rsp
000000000104ce2d	jbe	0x104cee5
000000000104ce33	subq	$0x38, %rsp
000000000104ce37	movq	%rbp, 0x30(%rsp)
000000000104ce3c	leaq	0x30(%rsp), %rbp
000000000104ce41	movq	0x48(%rsp), %rax
000000000104ce46	movq	0x40(%rsp), %rcx
000000000104ce4b	xorl	%edx, %edx
000000000104ce4d	jmp	0x104ce52
000000000104ce4f	incq	%rdx
000000000104ce52	cmpq	$0xf, %rdx
000000000104ce56	jge	0x104ced6
000000000104ce58	leaq	(%rdx,%rdx,2), %rbx
000000000104ce5c	movq	0x8(%rax,%rbx,8), %rsi
000000000104ce61	movq	0x8(%rcx,%rbx,8), %rdi
000000000104ce66	movq	(%rcx,%rbx,8), %r8
000000000104ce6a	movq	(%rax,%rbx,8), %r9
000000000104ce6e	cmpq	%rsi, %rdi
000000000104ce71	je	0x104ce9b
000000000104ce73	movl	$0x1, %esi
000000000104ce78	testb	%sil, %sil
000000000104ce7b	jne	0x104ce8c
000000000104ce7d	movq	0x10(%rcx,%rbx,8), %rsi
000000000104ce82	movq	0x10(%rax,%rbx,8), %rbx
000000000104ce87	cmpq	%rbx, %rsi
000000000104ce8a	je	0x104ce4f
000000000104ce8c	movb	$0x0, 0x50(%rsp)
000000000104ce91	movq	0x30(%rsp), %rbp
000000000104ce96	addq	$0x38, %rsp
000000000104ce9a	retq
000000000104ce9b	movq	%rdx, 0x20(%rsp)
000000000104cea0	movq	%rbx, 0x28(%rsp)
000000000104cea5	movq	%r8, (%rsp)
000000000104cea9	movq	%r9, 0x8(%rsp)
000000000104ceae	movq	%rdi, 0x10(%rsp)
000000000104ceb3	callq	runtime.memequal
000000000104ceb8	movzbl	0x18(%rsp), %esi
000000000104cebd	xorl	$0x1, %esi
000000000104cec0	movq	0x48(%rsp), %rax
000000000104cec5	movq	0x40(%rsp), %rcx
000000000104ceca	movq	0x20(%rsp), %rdx
000000000104cecf	movq	0x28(%rsp), %rbx
000000000104ced4	jmp	0x104ce78
000000000104ced6	movb	$0x1, 0x50(%rsp)
000000000104cedb	movq	0x30(%rsp), %rbp
000000000104cee0	addq	$0x38, %rsp
000000000104cee4	retq
000000000104cee5	callq	runtime.morestack_noctxt
000000000104ceea	jmp	"type..eq.[15]runtime.dbgVar"
000000000104ceef	int3
type..hash.[24]string:
000000000104cef0	movq	%gs:0x30, %rcx
000000000104cef9	cmpq	0x10(%rcx), %rsp
000000000104cefd	jbe	0x104cf57
000000000104ceff	subq	$0x28, %rsp
000000000104cf03	movq	%rbp, 0x20(%rsp)
000000000104cf08	leaq	0x20(%rsp), %rbp
000000000104cf0d	xorl	%eax, %eax
000000000104cf0f	movq	0x38(%rsp), %rcx
000000000104cf14	jmp	0x104cf42
000000000104cf16	movq	%rax, 0x18(%rsp)
000000000104cf1b	shlq	$0x4, %rax
000000000104cf1f	movq	0x30(%rsp), %rbx
000000000104cf24	addq	%rbx, %rax
000000000104cf27	movq	%rax, (%rsp)
000000000104cf2b	movq	%rcx, 0x8(%rsp)
000000000104cf30	callq	runtime.strhash
000000000104cf35	movq	0x10(%rsp), %rcx
000000000104cf3a	movq	0x18(%rsp), %rax
000000000104cf3f	incq	%rax
000000000104cf42	cmpq	$0x18, %rax
000000000104cf46	jl	0x104cf16
000000000104cf48	movq	%rcx, 0x40(%rsp)
000000000104cf4d	movq	0x20(%rsp), %rbp
000000000104cf52	addq	$0x28, %rsp
000000000104cf56	retq
000000000104cf57	callq	runtime.morestack_noctxt
000000000104cf5c	jmp	"type..hash.[24]string"
000000000104cf5e	int3
000000000104cf5f	int3
type..eq.[24]string:
000000000104cf60	movq	%gs:0x30, %rcx
000000000104cf69	cmpq	0x10(%rcx), %rsp
000000000104cf6d	jbe	0x104d00c
000000000104cf73	subq	$0x30, %rsp
000000000104cf77	movq	%rbp, 0x28(%rsp)
000000000104cf7c	leaq	0x28(%rsp), %rbp
000000000104cf81	movq	0x38(%rsp), %rax
000000000104cf86	movq	0x40(%rsp), %rcx
000000000104cf8b	xorl	%edx, %edx
000000000104cf8d	jmp	0x104cfa8
000000000104cf8f	movq	0x20(%rsp), %rbx
000000000104cf94	leaq	0x1(%rbx), %rdx
000000000104cf98	movq	0x38(%rsp), %rbx
000000000104cf9d	movq	0x40(%rsp), %rsi
000000000104cfa2	movq	%rbx, %rax
000000000104cfa5	movq	%rsi, %rcx
000000000104cfa8	cmpq	$0x18, %rdx
000000000104cfac	jge	0x104cffd
000000000104cfae	movq	%rdx, %rbx
000000000104cfb1	shlq	$0x4, %rdx
000000000104cfb5	movq	0x8(%rdx,%rcx), %rsi
000000000104cfba	movq	(%rdx,%rcx), %rdi
000000000104cfbe	movq	(%rdx,%rax), %r8
000000000104cfc2	movq	0x8(%rdx,%rax), %rdx
000000000104cfc7	cmpq	%rsi, %rdx
000000000104cfca	jne	0x104cfee
000000000104cfcc	movq	%rbx, 0x20(%rsp)
000000000104cfd1	movq	%r8, (%rsp)
000000000104cfd5	movq	%rdi, 0x8(%rsp)
000000000104cfda	movq	%rdx, 0x10(%rsp)
000000000104cfdf	callq	runtime.memequal
000000000104cfe4	leaq	0x18(%rsp), %rax
000000000104cfe9	cmpb	$0x0, (%rax)
000000000104cfec	jne	0x104cf8f
000000000104cfee	movb	$0x0, 0x48(%rsp)
000000000104cff3	movq	0x28(%rsp), %rbp
000000000104cff8	addq	$0x30, %rsp
000000000104cffc	retq
000000000104cffd	movb	$0x1, 0x48(%rsp)
000000000104d002	movq	0x28(%rsp), %rbp
000000000104d007	addq	$0x30, %rsp
000000000104d00b	retq
000000000104d00c	callq	runtime.morestack_noctxt
000000000104d011	jmp	"type..eq.[24]string"
000000000104d016	int3
000000000104d017	int3
000000000104d018	int3
000000000104d019	int3
000000000104d01a	int3
000000000104d01b	int3
000000000104d01c	int3
000000000104d01d	int3
000000000104d01e	int3
000000000104d01f	int3
type..hash.struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }:
000000000104d020	movq	%gs:0x30, %rcx
000000000104d029	cmpq	0x10(%rcx), %rsp
000000000104d02d	jbe	0x104d08e
000000000104d02f	subq	$0x28, %rsp
000000000104d033	movq	%rbp, 0x20(%rsp)
000000000104d038	leaq	0x20(%rsp), %rbp
000000000104d03d	movq	0x30(%rsp), %rax
000000000104d042	movq	%rax, (%rsp)
000000000104d046	movq	0x38(%rsp), %rcx
000000000104d04b	movq	%rcx, 0x8(%rsp)
000000000104d050	callq	type..hash.runtime.semaRoot
000000000104d055	movq	0x10(%rsp), %rax
000000000104d05a	movq	0x30(%rsp), %rcx
000000000104d05f	addq	$0x18, %rcx
000000000104d063	movq	%rcx, (%rsp)
000000000104d067	movq	%rax, 0x8(%rsp)
000000000104d06c	movq	$0x28, 0x10(%rsp)
000000000104d075	callq	runtime.memhash
000000000104d07a	movq	0x18(%rsp), %rax
000000000104d07f	movq	%rax, 0x40(%rsp)
000000000104d084	movq	0x20(%rsp), %rbp
000000000104d089	addq	$0x28, %rsp
000000000104d08d	retq
000000000104d08e	callq	runtime.morestack_noctxt
000000000104d093	jmp	"type..hash.struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }"
000000000104d095	int3
000000000104d096	int3
000000000104d097	int3
000000000104d098	int3
000000000104d099	int3
000000000104d09a	int3
000000000104d09b	int3
000000000104d09c	int3
000000000104d09d	int3
000000000104d09e	int3
000000000104d09f	int3
type..eq.struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }:
000000000104d0a0	movq	%gs:0x30, %rcx
000000000104d0a9	cmpq	0x10(%rcx), %rsp
000000000104d0ad	jbe	0x104d11f
000000000104d0af	subq	$0x28, %rsp
000000000104d0b3	movq	%rbp, 0x20(%rsp)
000000000104d0b8	leaq	0x20(%rsp), %rbp
000000000104d0bd	movq	0x38(%rsp), %rax
000000000104d0c2	movq	(%rax), %rcx
000000000104d0c5	movq	0x30(%rsp), %rdx
000000000104d0ca	cmpq	%rcx, (%rdx)
000000000104d0cd	jne	0x104d11b
000000000104d0cf	movq	0x8(%rax), %rcx
000000000104d0d3	cmpq	%rcx, 0x8(%rdx)
000000000104d0d7	jne	0x104d117
000000000104d0d9	movl	0x10(%rax), %ecx
000000000104d0dc	cmpl	%ecx, 0x10(%rdx)
000000000104d0df	je	0x104d0f1
000000000104d0e1	xorl	%eax, %eax
000000000104d0e3	movb	%al, 0x40(%rsp)
000000000104d0e7	movq	0x20(%rsp), %rbp
000000000104d0ec	addq	$0x28, %rsp
000000000104d0f0	retq
000000000104d0f1	leaq	0x18(%rdx), %rcx
000000000104d0f5	movq	%rcx, (%rsp)
000000000104d0f9	addq	$0x18, %rax
000000000104d0fd	movq	%rax, 0x8(%rsp)
000000000104d102	movq	$0x28, 0x10(%rsp)
000000000104d10b	callq	runtime.memequal
000000000104d110	movzbl	0x18(%rsp), %eax
000000000104d115	jmp	0x104d0e3
000000000104d117	xorl	%eax, %eax
000000000104d119	jmp	0x104d0e3
000000000104d11b	xorl	%eax, %eax
000000000104d11d	jmp	0x104d0e3
000000000104d11f	callq	runtime.morestack_noctxt
000000000104d124	jmp	"type..eq.struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }"
000000000104d129	int3
000000000104d12a	int3
000000000104d12b	int3
000000000104d12c	int3
000000000104d12d	int3
000000000104d12e	int3
000000000104d12f	int3
type..hash.[251]struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }:
000000000104d130	movq	%gs:0x30, %rcx
000000000104d139	cmpq	0x10(%rcx), %rsp
000000000104d13d	jbe	0x104d199
000000000104d13f	subq	$0x28, %rsp
000000000104d143	movq	%rbp, 0x20(%rsp)
000000000104d148	leaq	0x20(%rsp), %rbp
000000000104d14d	xorl	%eax, %eax
000000000104d14f	movq	0x38(%rsp), %rcx
000000000104d154	jmp	0x104d182
000000000104d156	movq	%rax, 0x18(%rsp)
000000000104d15b	shlq	$0x6, %rax
000000000104d15f	movq	0x30(%rsp), %rbx
000000000104d164	addq	%rbx, %rax
000000000104d167	movq	%rax, (%rsp)
000000000104d16b	movq	%rcx, 0x8(%rsp)
000000000104d170	callq	"type..hash.struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }"
000000000104d175	movq	0x10(%rsp), %rcx
000000000104d17a	movq	0x18(%rsp), %rax
000000000104d17f	incq	%rax
000000000104d182	cmpq	$0xfb, %rax
000000000104d188	jl	0x104d156
000000000104d18a	movq	%rcx, 0x40(%rsp)
000000000104d18f	movq	0x20(%rsp), %rbp
000000000104d194	addq	$0x28, %rsp
000000000104d198	retq
000000000104d199	callq	runtime.morestack_noctxt
000000000104d19e	jmp	"type..hash.[251]struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }"
type..eq.[251]struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }:
000000000104d1a0	movq	%gs:0x30, %rcx
000000000104d1a9	cmpq	0x10(%rcx), %rsp
000000000104d1ad	jbe	0x104d224
000000000104d1af	subq	$0x28, %rsp
000000000104d1b3	movq	%rbp, 0x20(%rsp)
000000000104d1b8	leaq	0x20(%rsp), %rbp
000000000104d1bd	xorl	%eax, %eax
000000000104d1bf	jmp	0x104d1cc
000000000104d1c1	movq	0x18(%rsp), %rcx
000000000104d1c6	incq	%rcx
000000000104d1c9	movq	%rcx, %rax
000000000104d1cc	cmpq	$0xfb, %rax
000000000104d1d2	jge	0x104d215
000000000104d1d4	movq	%rax, 0x18(%rsp)
000000000104d1d9	shlq	$0x6, %rax
000000000104d1dd	movq	0x30(%rsp), %rdx
000000000104d1e2	leaq	(%rax,%rdx), %rbx
000000000104d1e6	movq	%rbx, (%rsp)
000000000104d1ea	movq	0x38(%rsp), %rbx
000000000104d1ef	addq	%rbx, %rax
000000000104d1f2	movq	%rax, 0x8(%rsp)
000000000104d1f7	callq	"type..eq.struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }"
000000000104d1fc	leaq	0x10(%rsp), %rax
000000000104d201	cmpb	$0x0, (%rax)
000000000104d204	jne	0x104d1c1
000000000104d206	movb	$0x0, 0x40(%rsp)
000000000104d20b	movq	0x20(%rsp), %rbp
000000000104d210	addq	$0x28, %rsp
000000000104d214	retq
000000000104d215	movb	$0x1, 0x40(%rsp)
000000000104d21a	movq	0x20(%rsp), %rbp
000000000104d21f	addq	$0x28, %rsp
000000000104d223	retq
000000000104d224	callq	runtime.morestack_noctxt
000000000104d229	jmp	"type..eq.[251]struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }"
000000000104d22e	int3
000000000104d22f	int3
type..hash.[2]string:
000000000104d230	movq	%gs:0x30, %rcx
000000000104d239	cmpq	0x10(%rcx), %rsp
000000000104d23d	jbe	0x104d297
000000000104d23f	subq	$0x28, %rsp
000000000104d243	movq	%rbp, 0x20(%rsp)
000000000104d248	leaq	0x20(%rsp), %rbp
000000000104d24d	xorl	%eax, %eax
000000000104d24f	movq	0x38(%rsp), %rcx
000000000104d254	jmp	0x104d282
000000000104d256	movq	%rax, 0x18(%rsp)
000000000104d25b	shlq	$0x4, %rax
000000000104d25f	movq	0x30(%rsp), %rbx
000000000104d264	addq	%rbx, %rax
000000000104d267	movq	%rax, (%rsp)
000000000104d26b	movq	%rcx, 0x8(%rsp)
000000000104d270	callq	runtime.strhash
000000000104d275	movq	0x10(%rsp), %rcx
000000000104d27a	movq	0x18(%rsp), %rax
000000000104d27f	incq	%rax
000000000104d282	cmpq	$0x2, %rax
000000000104d286	jl	0x104d256
000000000104d288	movq	%rcx, 0x40(%rsp)
000000000104d28d	movq	0x20(%rsp), %rbp
000000000104d292	addq	$0x28, %rsp
000000000104d296	retq
000000000104d297	callq	runtime.morestack_noctxt
000000000104d29c	jmp	"type..hash.[2]string"
000000000104d29e	int3
000000000104d29f	int3
type..eq.[2]string:
000000000104d2a0	movq	%gs:0x30, %rcx
000000000104d2a9	cmpq	0x10(%rcx), %rsp
000000000104d2ad	jbe	0x104d34c
000000000104d2b3	subq	$0x30, %rsp
000000000104d2b7	movq	%rbp, 0x28(%rsp)
000000000104d2bc	leaq	0x28(%rsp), %rbp
000000000104d2c1	movq	0x38(%rsp), %rax
000000000104d2c6	movq	0x40(%rsp), %rcx
000000000104d2cb	xorl	%edx, %edx
000000000104d2cd	jmp	0x104d2e8
000000000104d2cf	movq	0x20(%rsp), %rbx
000000000104d2d4	leaq	0x1(%rbx), %rdx
000000000104d2d8	movq	0x38(%rsp), %rbx
000000000104d2dd	movq	0x40(%rsp), %rsi
000000000104d2e2	movq	%rbx, %rax
000000000104d2e5	movq	%rsi, %rcx
000000000104d2e8	cmpq	$0x2, %rdx
000000000104d2ec	jge	0x104d33d
000000000104d2ee	movq	%rdx, %rbx
000000000104d2f1	shlq	$0x4, %rdx
000000000104d2f5	movq	0x8(%rdx,%rcx), %rsi
000000000104d2fa	movq	(%rdx,%rcx), %rdi
000000000104d2fe	movq	(%rdx,%rax), %r8
000000000104d302	movq	0x8(%rdx,%rax), %rdx
000000000104d307	cmpq	%rsi, %rdx
000000000104d30a	jne	0x104d32e
000000000104d30c	movq	%rbx, 0x20(%rsp)
000000000104d311	movq	%r8, (%rsp)
000000000104d315	movq	%rdi, 0x8(%rsp)
000000000104d31a	movq	%rdx, 0x10(%rsp)
000000000104d31f	callq	runtime.memequal
000000000104d324	leaq	0x18(%rsp), %rax
000000000104d329	cmpb	$0x0, (%rax)
000000000104d32c	jne	0x104d2cf
000000000104d32e	movb	$0x0, 0x48(%rsp)
000000000104d333	movq	0x28(%rsp), %rbp
000000000104d338	addq	$0x30, %rsp
000000000104d33c	retq
000000000104d33d	movb	$0x1, 0x48(%rsp)
000000000104d342	movq	0x28(%rsp), %rbp
000000000104d347	addq	$0x30, %rsp
000000000104d34b	retq
000000000104d34c	callq	runtime.morestack_noctxt
000000000104d351	jmp	"type..eq.[2]string"
000000000104d356	int3
000000000104d357	int3
000000000104d358	int3
000000000104d359	int3
000000000104d35a	int3
000000000104d35b	int3
000000000104d35c	int3
000000000104d35d	int3
000000000104d35e	int3
000000000104d35f	int3
type..hash.[32]runtime.sigTabT:
000000000104d360	movq	%gs:0x30, %rcx
000000000104d369	cmpq	0x10(%rcx), %rsp
000000000104d36d	jbe	0x104d3c8
000000000104d36f	subq	$0x28, %rsp
000000000104d373	movq	%rbp, 0x20(%rsp)
000000000104d378	leaq	0x20(%rsp), %rbp
000000000104d37d	xorl	%eax, %eax
000000000104d37f	movq	0x38(%rsp), %rcx
000000000104d384	jmp	0x104d3b3
000000000104d386	movq	%rax, 0x18(%rsp)
000000000104d38b	leaq	(%rax,%rax,2), %rdx
000000000104d38f	movq	0x30(%rsp), %rbx
000000000104d394	leaq	(%rbx,%rdx,8), %rdx
000000000104d398	movq	%rdx, (%rsp)
000000000104d39c	movq	%rcx, 0x8(%rsp)
000000000104d3a1	callq	type..hash.runtime.sigTabT
000000000104d3a6	movq	0x10(%rsp), %rcx
000000000104d3ab	movq	0x18(%rsp), %rax
000000000104d3b0	incq	%rax
000000000104d3b3	cmpq	$0x20, %rax
000000000104d3b7	jl	0x104d386
000000000104d3b9	movq	%rcx, 0x40(%rsp)
000000000104d3be	movq	0x20(%rsp), %rbp
000000000104d3c3	addq	$0x28, %rsp
000000000104d3c7	retq
000000000104d3c8	callq	runtime.morestack_noctxt
000000000104d3cd	jmp	"type..hash.[32]runtime.sigTabT"
000000000104d3cf	int3
type..eq.[32]runtime.sigTabT:
000000000104d3d0	movq	%gs:0x30, %rcx
000000000104d3d9	cmpq	0x10(%rcx), %rsp
000000000104d3dd	jbe	0x104d48e
000000000104d3e3	subq	$0x30, %rsp
000000000104d3e7	movq	%rbp, 0x28(%rsp)
000000000104d3ec	leaq	0x28(%rsp), %rbp
000000000104d3f1	movq	0x38(%rsp), %rax
000000000104d3f6	movq	0x40(%rsp), %rcx
000000000104d3fb	xorl	%edx, %edx
000000000104d3fd	jmp	0x104d402
000000000104d3ff	incq	%rdx
000000000104d402	cmpq	$0x20, %rdx
000000000104d406	jge	0x104d47f
000000000104d408	leaq	(%rdx,%rdx,2), %rbx
000000000104d40c	movl	(%rax,%rbx,8), %esi
000000000104d40f	movl	(%rcx,%rbx,8), %edi
000000000104d412	cmpl	%edi, %esi
000000000104d414	je	0x104d42e
000000000104d416	movl	$0x1, %ebx
000000000104d41b	testb	%bl, %bl
000000000104d41d	je	0x104d3ff
000000000104d41f	movb	$0x0, 0x48(%rsp)
000000000104d424	movq	0x28(%rsp), %rbp
000000000104d429	addq	$0x30, %rsp
000000000104d42d	retq
000000000104d42e	movq	0x8(%rax,%rbx,8), %rsi
000000000104d433	movq	0x10(%rax,%rbx,8), %rdi
000000000104d438	movq	0x10(%rcx,%rbx,8), %r8
000000000104d43d	movq	0x8(%rcx,%rbx,8), %rbx
000000000104d442	cmpq	%r8, %rdi
000000000104d445	je	0x104d44e
000000000104d447	movl	$0x1, %ebx
000000000104d44c	jmp	0x104d41b
000000000104d44e	movq	%rdx, 0x20(%rsp)
000000000104d453	movq	%rsi, (%rsp)
000000000104d457	movq	%rbx, 0x8(%rsp)
000000000104d45c	movq	%rdi, 0x10(%rsp)
000000000104d461	callq	runtime.memequal
000000000104d466	movzbl	0x18(%rsp), %ebx
000000000104d46b	xorl	$0x1, %ebx
000000000104d46e	movq	0x38(%rsp), %rax
000000000104d473	movq	0x40(%rsp), %rcx
000000000104d478	movq	0x20(%rsp), %rdx
000000000104d47d	jmp	0x104d41b
000000000104d47f	movb	$0x1, 0x48(%rsp)
000000000104d484	movq	0x28(%rsp), %rbp
000000000104d489	addq	$0x30, %rsp
000000000104d48d	retq
000000000104d48e	callq	runtime.morestack_noctxt
000000000104d493	jmp	"type..eq.[32]runtime.sigTabT"
000000000104d498	int3
000000000104d499	int3
000000000104d49a	int3
000000000104d49b	int3
000000000104d49c	int3
000000000104d49d	int3
000000000104d49e	int3
000000000104d49f	int3
type..hash.[33]float64:
000000000104d4a0	movq	%gs:0x30, %rcx
000000000104d4a9	cmpq	0x10(%rcx), %rsp
000000000104d4ad	jbe	0x104d504
000000000104d4af	subq	$0x28, %rsp
000000000104d4b3	movq	%rbp, 0x20(%rsp)
000000000104d4b8	leaq	0x20(%rsp), %rbp
000000000104d4bd	xorl	%eax, %eax
000000000104d4bf	movq	0x38(%rsp), %rcx
000000000104d4c4	jmp	0x104d4ef
000000000104d4c6	movq	%rax, 0x18(%rsp)
000000000104d4cb	movq	0x30(%rsp), %rdx
000000000104d4d0	leaq	(%rdx,%rax,8), %rbx
000000000104d4d4	movq	%rbx, (%rsp)
000000000104d4d8	movq	%rcx, 0x8(%rsp)
000000000104d4dd	callq	runtime.f64hash
000000000104d4e2	movq	0x10(%rsp), %rcx
000000000104d4e7	movq	0x18(%rsp), %rax
000000000104d4ec	incq	%rax
000000000104d4ef	cmpq	$0x21, %rax
000000000104d4f3	jl	0x104d4c6
000000000104d4f5	movq	%rcx, 0x40(%rsp)
000000000104d4fa	movq	0x20(%rsp), %rbp
000000000104d4ff	addq	$0x28, %rsp
000000000104d503	retq
000000000104d504	callq	runtime.morestack_noctxt
000000000104d509	jmp	"type..hash.[33]float64"
000000000104d50b	int3
000000000104d50c	int3
000000000104d50d	int3
000000000104d50e	int3
000000000104d50f	int3
type..eq.[33]float64:
000000000104d510	movq	0x8(%rsp), %rax
000000000104d515	movq	0x10(%rsp), %rcx
000000000104d51a	xorl	%edx, %edx
000000000104d51c	jmp	0x104d521
000000000104d51e	incq	%rdx
000000000104d521	cmpq	$0x21, %rdx
000000000104d525	jge	0x104d53f
000000000104d527	movsd	(%rax,%rdx,8), %xmm0
000000000104d52c	movsd	(%rcx,%rdx,8), %xmm1
000000000104d531	ucomisd	%xmm1, %xmm0
000000000104d535	jne	0x104d539
000000000104d537	jnp	0x104d51e
000000000104d539	movb	$0x0, 0x18(%rsp)
000000000104d53e	retq
000000000104d53f	movb	$0x1, 0x18(%rsp)
000000000104d544	retq
000000000104d545	int3
000000000104d546	int3
000000000104d547	int3
000000000104d548	int3
000000000104d549	int3
000000000104d54a	int3
000000000104d54b	int3
000000000104d54c	int3
000000000104d54d	int3
000000000104d54e	int3
000000000104d54f	int3
type..hash.[4]string:
000000000104d550	movq	%gs:0x30, %rcx
000000000104d559	cmpq	0x10(%rcx), %rsp
000000000104d55d	jbe	0x104d5b7
000000000104d55f	subq	$0x28, %rsp
000000000104d563	movq	%rbp, 0x20(%rsp)
000000000104d568	leaq	0x20(%rsp), %rbp
000000000104d56d	xorl	%eax, %eax
000000000104d56f	movq	0x38(%rsp), %rcx
000000000104d574	jmp	0x104d5a2
000000000104d576	movq	%rax, 0x18(%rsp)
000000000104d57b	shlq	$0x4, %rax
000000000104d57f	movq	0x30(%rsp), %rbx
000000000104d584	addq	%rbx, %rax
000000000104d587	movq	%rax, (%rsp)
000000000104d58b	movq	%rcx, 0x8(%rsp)
000000000104d590	callq	runtime.strhash
000000000104d595	movq	0x10(%rsp), %rcx
000000000104d59a	movq	0x18(%rsp), %rax
000000000104d59f	incq	%rax
000000000104d5a2	cmpq	$0x4, %rax
000000000104d5a6	jl	0x104d576
000000000104d5a8	movq	%rcx, 0x40(%rsp)
000000000104d5ad	movq	0x20(%rsp), %rbp
000000000104d5b2	addq	$0x28, %rsp
000000000104d5b6	retq
000000000104d5b7	callq	runtime.morestack_noctxt
000000000104d5bc	jmp	"type..hash.[4]string"
000000000104d5be	int3
000000000104d5bf	int3
type..eq.[4]string:
000000000104d5c0	movq	%gs:0x30, %rcx
000000000104d5c9	cmpq	0x10(%rcx), %rsp
000000000104d5cd	jbe	0x104d66c
000000000104d5d3	subq	$0x30, %rsp
000000000104d5d7	movq	%rbp, 0x28(%rsp)
000000000104d5dc	leaq	0x28(%rsp), %rbp
000000000104d5e1	movq	0x38(%rsp), %rax
000000000104d5e6	movq	0x40(%rsp), %rcx
000000000104d5eb	xorl	%edx, %edx
000000000104d5ed	jmp	0x104d608
000000000104d5ef	movq	0x20(%rsp), %rbx
000000000104d5f4	leaq	0x1(%rbx), %rdx
000000000104d5f8	movq	0x38(%rsp), %rbx
000000000104d5fd	movq	0x40(%rsp), %rsi
000000000104d602	movq	%rbx, %rax
000000000104d605	movq	%rsi, %rcx
000000000104d608	cmpq	$0x4, %rdx
000000000104d60c	jge	0x104d65d
000000000104d60e	movq	%rdx, %rbx
000000000104d611	shlq	$0x4, %rdx
000000000104d615	movq	0x8(%rdx,%rcx), %rsi
000000000104d61a	movq	(%rdx,%rcx), %rdi
000000000104d61e	movq	(%rdx,%rax), %r8
000000000104d622	movq	0x8(%rdx,%rax), %rdx
000000000104d627	cmpq	%rsi, %rdx
000000000104d62a	jne	0x104d64e
000000000104d62c	movq	%rbx, 0x20(%rsp)
000000000104d631	movq	%r8, (%rsp)
000000000104d635	movq	%rdi, 0x8(%rsp)
000000000104d63a	movq	%rdx, 0x10(%rsp)
000000000104d63f	callq	runtime.memequal
000000000104d644	leaq	0x18(%rsp), %rax
000000000104d649	cmpb	$0x0, (%rax)
000000000104d64c	jne	0x104d5ef
000000000104d64e	movb	$0x0, 0x48(%rsp)
000000000104d653	movq	0x28(%rsp), %rbp
000000000104d658	addq	$0x30, %rsp
000000000104d65c	retq
000000000104d65d	movb	$0x1, 0x48(%rsp)
000000000104d662	movq	0x28(%rsp), %rbp
000000000104d667	addq	$0x30, %rsp
000000000104d66b	retq
000000000104d66c	callq	runtime.morestack_noctxt
000000000104d671	jmp	"type..eq.[4]string"
000000000104d676	int3
000000000104d677	int3
000000000104d678	int3
000000000104d679	int3
000000000104d67a	int3
000000000104d67b	int3
000000000104d67c	int3
000000000104d67d	int3
000000000104d67e	int3
000000000104d67f	int3
type..hash.[6]string:
000000000104d680	movq	%gs:0x30, %rcx
000000000104d689	cmpq	0x10(%rcx), %rsp
000000000104d68d	jbe	0x104d6e7
000000000104d68f	subq	$0x28, %rsp
000000000104d693	movq	%rbp, 0x20(%rsp)
000000000104d698	leaq	0x20(%rsp), %rbp
000000000104d69d	xorl	%eax, %eax
000000000104d69f	movq	0x38(%rsp), %rcx
000000000104d6a4	jmp	0x104d6d2
000000000104d6a6	movq	%rax, 0x18(%rsp)
000000000104d6ab	shlq	$0x4, %rax
000000000104d6af	movq	0x30(%rsp), %rbx
000000000104d6b4	addq	%rbx, %rax
000000000104d6b7	movq	%rax, (%rsp)
000000000104d6bb	movq	%rcx, 0x8(%rsp)
000000000104d6c0	callq	runtime.strhash
000000000104d6c5	movq	0x10(%rsp), %rcx
000000000104d6ca	movq	0x18(%rsp), %rax
000000000104d6cf	incq	%rax
000000000104d6d2	cmpq	$0x6, %rax
000000000104d6d6	jl	0x104d6a6
000000000104d6d8	movq	%rcx, 0x40(%rsp)
000000000104d6dd	movq	0x20(%rsp), %rbp
000000000104d6e2	addq	$0x28, %rsp
000000000104d6e6	retq
000000000104d6e7	callq	runtime.morestack_noctxt
000000000104d6ec	jmp	"type..hash.[6]string"
000000000104d6ee	int3
000000000104d6ef	int3
type..eq.[6]string:
000000000104d6f0	movq	%gs:0x30, %rcx
000000000104d6f9	cmpq	0x10(%rcx), %rsp
000000000104d6fd	jbe	0x104d79c
000000000104d703	subq	$0x30, %rsp
000000000104d707	movq	%rbp, 0x28(%rsp)
000000000104d70c	leaq	0x28(%rsp), %rbp
000000000104d711	movq	0x38(%rsp), %rax
000000000104d716	movq	0x40(%rsp), %rcx
000000000104d71b	xorl	%edx, %edx
000000000104d71d	jmp	0x104d738
000000000104d71f	movq	0x20(%rsp), %rbx
000000000104d724	leaq	0x1(%rbx), %rdx
000000000104d728	movq	0x38(%rsp), %rbx
000000000104d72d	movq	0x40(%rsp), %rsi
000000000104d732	movq	%rbx, %rax
000000000104d735	movq	%rsi, %rcx
000000000104d738	cmpq	$0x6, %rdx
000000000104d73c	jge	0x104d78d
000000000104d73e	movq	%rdx, %rbx
000000000104d741	shlq	$0x4, %rdx
000000000104d745	movq	0x8(%rdx,%rcx), %rsi
000000000104d74a	movq	(%rdx,%rcx), %rdi
000000000104d74e	movq	(%rdx,%rax), %r8
000000000104d752	movq	0x8(%rdx,%rax), %rdx
000000000104d757	cmpq	%rsi, %rdx
000000000104d75a	jne	0x104d77e
000000000104d75c	movq	%rbx, 0x20(%rsp)
000000000104d761	movq	%r8, (%rsp)
000000000104d765	movq	%rdi, 0x8(%rsp)
000000000104d76a	movq	%rdx, 0x10(%rsp)
000000000104d76f	callq	runtime.memequal
000000000104d774	leaq	0x18(%rsp), %rax
000000000104d779	cmpb	$0x0, (%rax)
000000000104d77c	jne	0x104d71f
000000000104d77e	movb	$0x0, 0x48(%rsp)
000000000104d783	movq	0x28(%rsp), %rbp
000000000104d788	addq	$0x30, %rsp
000000000104d78c	retq
000000000104d78d	movb	$0x1, 0x48(%rsp)
000000000104d792	movq	0x28(%rsp), %rbp
000000000104d797	addq	$0x30, %rsp
000000000104d79b	retq
000000000104d79c	callq	runtime.morestack_noctxt
000000000104d7a1	jmp	"type..eq.[6]string"
000000000104d7a6	int3
000000000104d7a7	int3
000000000104d7a8	int3
000000000104d7a9	int3
000000000104d7aa	int3
000000000104d7ab	int3
000000000104d7ac	int3
000000000104d7ad	int3
000000000104d7ae	int3
000000000104d7af	int3
type..hash.[9]string:
000000000104d7b0	movq	%gs:0x30, %rcx
000000000104d7b9	cmpq	0x10(%rcx), %rsp
000000000104d7bd	jbe	0x104d817
000000000104d7bf	subq	$0x28, %rsp
000000000104d7c3	movq	%rbp, 0x20(%rsp)
000000000104d7c8	leaq	0x20(%rsp), %rbp
000000000104d7cd	xorl	%eax, %eax
000000000104d7cf	movq	0x38(%rsp), %rcx
000000000104d7d4	jmp	0x104d802
000000000104d7d6	movq	%rax, 0x18(%rsp)
000000000104d7db	shlq	$0x4, %rax
000000000104d7df	movq	0x30(%rsp), %rbx
000000000104d7e4	addq	%rbx, %rax
000000000104d7e7	movq	%rax, (%rsp)
000000000104d7eb	movq	%rcx, 0x8(%rsp)
000000000104d7f0	callq	runtime.strhash
000000000104d7f5	movq	0x10(%rsp), %rcx
000000000104d7fa	movq	0x18(%rsp), %rax
000000000104d7ff	incq	%rax
000000000104d802	cmpq	$0x9, %rax
000000000104d806	jl	0x104d7d6
000000000104d808	movq	%rcx, 0x40(%rsp)
000000000104d80d	movq	0x20(%rsp), %rbp
000000000104d812	addq	$0x28, %rsp
000000000104d816	retq
000000000104d817	callq	runtime.morestack_noctxt
000000000104d81c	jmp	"type..hash.[9]string"
000000000104d81e	int3
000000000104d81f	int3
type..eq.[9]string:
000000000104d820	movq	%gs:0x30, %rcx
000000000104d829	cmpq	0x10(%rcx), %rsp
000000000104d82d	jbe	0x104d8cc
000000000104d833	subq	$0x30, %rsp
000000000104d837	movq	%rbp, 0x28(%rsp)
000000000104d83c	leaq	0x28(%rsp), %rbp
000000000104d841	movq	0x38(%rsp), %rax
000000000104d846	movq	0x40(%rsp), %rcx
000000000104d84b	xorl	%edx, %edx
000000000104d84d	jmp	0x104d868
000000000104d84f	movq	0x20(%rsp), %rbx
000000000104d854	leaq	0x1(%rbx), %rdx
000000000104d858	movq	0x38(%rsp), %rbx
000000000104d85d	movq	0x40(%rsp), %rsi
000000000104d862	movq	%rbx, %rax
000000000104d865	movq	%rsi, %rcx
000000000104d868	cmpq	$0x9, %rdx
000000000104d86c	jge	0x104d8bd
000000000104d86e	movq	%rdx, %rbx
000000000104d871	shlq	$0x4, %rdx
000000000104d875	movq	0x8(%rdx,%rcx), %rsi
000000000104d87a	movq	(%rdx,%rcx), %rdi
000000000104d87e	movq	(%rdx,%rax), %r8
000000000104d882	movq	0x8(%rdx,%rax), %rdx
000000000104d887	cmpq	%rsi, %rdx
000000000104d88a	jne	0x104d8ae
000000000104d88c	movq	%rbx, 0x20(%rsp)
000000000104d891	movq	%r8, (%rsp)
000000000104d895	movq	%rdi, 0x8(%rsp)
000000000104d89a	movq	%rdx, 0x10(%rsp)
000000000104d89f	callq	runtime.memequal
000000000104d8a4	leaq	0x18(%rsp), %rax
000000000104d8a9	cmpb	$0x0, (%rax)
000000000104d8ac	jne	0x104d84f
000000000104d8ae	movb	$0x0, 0x48(%rsp)
000000000104d8b3	movq	0x28(%rsp), %rbp
000000000104d8b8	addq	$0x30, %rsp
000000000104d8bc	retq
000000000104d8bd	movb	$0x1, 0x48(%rsp)
000000000104d8c2	movq	0x28(%rsp), %rbp
000000000104d8c7	addq	$0x30, %rsp
000000000104d8cb	retq
000000000104d8cc	callq	runtime.morestack_noctxt
000000000104d8d1	jmp	"type..eq.[9]string"
000000000104d8d6	int3
000000000104d8d7	int3
000000000104d8d8	int3
000000000104d8d9	int3
000000000104d8da	int3
000000000104d8db	int3
000000000104d8dc	int3
000000000104d8dd	int3
000000000104d8de	int3
000000000104d8df	int3
type..hash.struct { runtime.cycle uint32; runtime.flushed bool }:
000000000104d8e0	movq	%gs:0x30, %rcx
000000000104d8e9	cmpq	0x10(%rcx), %rsp
000000000104d8ed	jbe	0x104d932
000000000104d8ef	subq	$0x28, %rsp
000000000104d8f3	movq	%rbp, 0x20(%rsp)
000000000104d8f8	leaq	0x20(%rsp), %rbp
000000000104d8fd	movq	0x30(%rsp), %rax
000000000104d902	movq	%rax, (%rsp)
000000000104d906	movq	0x38(%rsp), %rax
000000000104d90b	movq	%rax, 0x8(%rsp)
000000000104d910	movq	$0x5, 0x10(%rsp)
000000000104d919	callq	runtime.memhash
000000000104d91e	movq	0x18(%rsp), %rax
000000000104d923	movq	%rax, 0x40(%rsp)
000000000104d928	movq	0x20(%rsp), %rbp
000000000104d92d	addq	$0x28, %rsp
000000000104d931	retq
000000000104d932	callq	runtime.morestack_noctxt
000000000104d937	jmp	"type..hash.struct { runtime.cycle uint32; runtime.flushed bool }"
000000000104d939	int3
000000000104d93a	int3
000000000104d93b	int3
000000000104d93c	int3
000000000104d93d	int3
000000000104d93e	int3
000000000104d93f	int3
type..eq.struct { runtime.cycle uint32; runtime.flushed bool }:
000000000104d940	movq	0x10(%rsp), %rax
000000000104d945	movl	(%rax), %ecx
000000000104d947	movq	0x8(%rsp), %rdx
000000000104d94c	cmpl	%ecx, (%rdx)
000000000104d94e	jne	0x104d95f
000000000104d950	movzbl	0x4(%rax), %eax
000000000104d954	cmpb	%al, 0x4(%rdx)
000000000104d957	sete	%al
000000000104d95a	movb	%al, 0x18(%rsp)
000000000104d95e	retq
000000000104d95f	xorl	%eax, %eax
000000000104d961	jmp	0x104d95a
000000000104d963	int3
000000000104d964	int3
000000000104d965	int3
000000000104d966	int3
000000000104d967	int3
000000000104d968	int3
000000000104d969	int3
000000000104d96a	int3
000000000104d96b	int3
000000000104d96c	int3
000000000104d96d	int3
000000000104d96e	int3
000000000104d96f	int3
type..hash.struct { runtime.enabled bool; runtime.pad [3]uint8; runtime.needed bool; runtime.cgo bool; runtime.alignme uint64 }:
000000000104d970	movq	%gs:0x30, %rcx
000000000104d979	cmpq	0x10(%rcx), %rsp
000000000104d97d	jbe	0x104d9e7
000000000104d97f	subq	$0x28, %rsp
000000000104d983	movq	%rbp, 0x20(%rsp)
000000000104d988	leaq	0x20(%rsp), %rbp
000000000104d98d	movq	0x30(%rsp), %rax
000000000104d992	movq	%rax, (%rsp)
000000000104d996	movq	0x38(%rsp), %rcx
000000000104d99b	movq	%rcx, 0x8(%rsp)
000000000104d9a0	movq	$0x6, 0x10(%rsp)
000000000104d9a9	callq	runtime.memhash
000000000104d9ae	movq	0x18(%rsp), %rax
000000000104d9b3	movq	0x30(%rsp), %rcx
000000000104d9b8	addq	$0x8, %rcx
000000000104d9bc	movq	%rcx, (%rsp)
000000000104d9c0	movq	%rax, 0x8(%rsp)
000000000104d9c5	movq	$0x8, 0x10(%rsp)
000000000104d9ce	callq	runtime.memhash
000000000104d9d3	movq	0x18(%rsp), %rax
000000000104d9d8	movq	%rax, 0x40(%rsp)
000000000104d9dd	movq	0x20(%rsp), %rbp
000000000104d9e2	addq	$0x28, %rsp
000000000104d9e6	retq
000000000104d9e7	callq	runtime.morestack_noctxt
000000000104d9ec	jmp	"type..hash.struct { runtime.enabled bool; runtime.pad [3]uint8; runtime.needed bool; runtime.cgo bool; runtime.alignme uint64 }"
000000000104d9ee	int3
000000000104d9ef	int3
type..eq.struct { runtime.enabled bool; runtime.pad [3]uint8; runtime.needed bool; runtime.cgo bool; runtime.alignme uint64 }:
000000000104d9f0	movq	%gs:0x30, %rcx
000000000104d9f9	cmpq	0x10(%rcx), %rsp
000000000104d9fd	jbe	0x104da5f
000000000104d9ff	subq	$0x28, %rsp
000000000104da03	movq	%rbp, 0x20(%rsp)
000000000104da08	leaq	0x20(%rsp), %rbp
000000000104da0d	movq	0x38(%rsp), %rax
000000000104da12	movq	%rax, 0x8(%rsp)
000000000104da17	movq	0x30(%rsp), %rcx
000000000104da1c	movq	%rcx, (%rsp)
000000000104da20	movq	$0x6, 0x10(%rsp)
000000000104da29	callq	runtime.memequal
000000000104da2e	leaq	0x18(%rsp), %rax
000000000104da33	cmpb	$0x0, (%rax)
000000000104da36	je	0x104da5b
000000000104da38	movq	0x38(%rsp), %rax
000000000104da3d	movq	0x8(%rax), %rax
000000000104da41	movq	0x30(%rsp), %rcx
000000000104da46	cmpq	%rax, 0x8(%rcx)
000000000104da4a	sete	%al
000000000104da4d	movb	%al, 0x40(%rsp)
000000000104da51	movq	0x20(%rsp), %rbp
000000000104da56	addq	$0x28, %rsp
000000000104da5a	retq
000000000104da5b	xorl	%eax, %eax
000000000104da5d	jmp	0x104da4d
000000000104da5f	callq	runtime.morestack_noctxt
000000000104da64	jmp	"type..eq.struct { runtime.enabled bool; runtime.pad [3]uint8; runtime.needed bool; runtime.cgo bool; runtime.alignme uint64 }"
000000000104da66	int3
000000000104da67	int3
000000000104da68	int3
000000000104da69	int3
000000000104da6a	int3
000000000104da6b	int3
000000000104da6c	int3
000000000104da6d	int3
000000000104da6e	int3
000000000104da6f	int3
type..hash.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 [64]uint8; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.alldone runtime.note; runtime.helperDrainBlock bool; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.markrootDone bool; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.head runtime.guintptr; runtime.tail runtime.guintptr }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.head runtime.guintptr }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }:
000000000104da70	movq	%gs:0x30, %rcx
000000000104da79	cmpq	0x10(%rcx), %rsp
000000000104da7d	jbe	0x104dc06
000000000104da83	subq	$0x28, %rsp
000000000104da87	movq	%rbp, 0x20(%rsp)
000000000104da8c	leaq	0x20(%rsp), %rbp
000000000104da91	movq	0x30(%rsp), %rax
000000000104da96	movq	%rax, (%rsp)
000000000104da9a	movq	0x38(%rsp), %rcx
000000000104da9f	movq	%rcx, 0x8(%rsp)
000000000104daa4	movq	$0x78, 0x10(%rsp)
000000000104daad	callq	runtime.memhash
000000000104dab2	movq	0x18(%rsp), %rax
000000000104dab7	movq	0x30(%rsp), %rcx
000000000104dabc	leaq	0x80(%rcx), %rdx
000000000104dac3	movq	%rdx, (%rsp)
000000000104dac7	movq	%rax, 0x8(%rsp)
000000000104dacc	movq	$0x14, 0x10(%rsp)
000000000104dad5	callq	runtime.memhash
000000000104dada	movq	0x18(%rsp), %rax
000000000104dadf	movq	0x30(%rsp), %rcx
000000000104dae4	leaq	0x98(%rcx), %rdx
000000000104daeb	movq	%rdx, (%rsp)
000000000104daef	movq	%rax, 0x8(%rsp)
000000000104daf4	movq	$0x19, 0x10(%rsp)
000000000104dafd	callq	runtime.memhash
000000000104db02	movq	0x18(%rsp), %rax
000000000104db07	movq	0x30(%rsp), %rcx
000000000104db0c	leaq	0xb8(%rcx), %rdx
000000000104db13	movq	%rdx, (%rsp)
000000000104db17	movq	%rax, 0x8(%rsp)
000000000104db1c	movq	$0x29, 0x10(%rsp)
000000000104db25	callq	runtime.memhash
000000000104db2a	movq	0x18(%rsp), %rax
000000000104db2f	movq	0x30(%rsp), %rcx
000000000104db34	leaq	0xe4(%rcx), %rdx
000000000104db3b	movq	%rdx, (%rsp)
000000000104db3f	movq	%rax, 0x8(%rsp)
000000000104db44	movq	$0x8, 0x10(%rsp)
000000000104db4d	callq	runtime.memhash
000000000104db52	movq	0x18(%rsp), %rax
000000000104db57	movq	0x30(%rsp), %rcx
000000000104db5c	leaq	0xf0(%rcx), %rdx
000000000104db63	movq	%rdx, (%rsp)
000000000104db67	movq	%rax, 0x8(%rsp)
000000000104db6c	movq	$0xc, 0x10(%rsp)
000000000104db75	callq	runtime.memhash
000000000104db7a	movq	0x18(%rsp), %rax
000000000104db7f	movq	0x30(%rsp), %rcx
000000000104db84	leaq	0x100(%rcx), %rdx
000000000104db8b	movq	%rdx, (%rsp)
000000000104db8f	movq	%rax, 0x8(%rsp)
000000000104db94	movq	$0x9, 0x10(%rsp)
000000000104db9d	callq	runtime.memhash
000000000104dba2	movq	0x18(%rsp), %rax
000000000104dba7	movq	0x30(%rsp), %rcx
000000000104dbac	leaq	0x110(%rcx), %rdx
000000000104dbb3	movq	%rdx, (%rsp)
000000000104dbb7	movq	%rax, 0x8(%rsp)
000000000104dbbc	movq	$0x44, 0x10(%rsp)
000000000104dbc5	callq	runtime.memhash
000000000104dbca	movq	0x18(%rsp), %rax
000000000104dbcf	movq	0x30(%rsp), %rcx
000000000104dbd4	addq	$0x158, %rcx
000000000104dbdb	movq	%rcx, (%rsp)
000000000104dbdf	movq	%rax, 0x8(%rsp)
000000000104dbe4	movq	$0x50, 0x10(%rsp)
000000000104dbed	callq	runtime.memhash
000000000104dbf2	movq	0x18(%rsp), %rax
000000000104dbf7	movq	%rax, 0x40(%rsp)
000000000104dbfc	movq	0x20(%rsp), %rbp
000000000104dc01	addq	$0x28, %rsp
000000000104dc05	retq
000000000104dc06	callq	runtime.morestack_noctxt
000000000104dc0b	jmp	"type..hash.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 [64]uint8; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.alldone runtime.note; runtime.helperDrainBlock bool; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.markrootDone bool; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.head runtime.guintptr; runtime.tail runtime.guintptr }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.head runtime.guintptr }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }"
type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 [64]uint8; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.alldone runtime.note; runtime.helperDrainBlock bool; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.markrootDone bool; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.head runtime.guintptr; runtime.tail runtime.guintptr }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.head runtime.guintptr }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }:
000000000104dc10	movq	%gs:0x30, %rcx
000000000104dc19	cmpq	0x10(%rcx), %rsp
000000000104dc1d	jbe	0x104de45
000000000104dc23	subq	$0x28, %rsp
000000000104dc27	movq	%rbp, 0x20(%rsp)
000000000104dc2c	leaq	0x20(%rsp), %rbp
000000000104dc31	movq	0x38(%rsp), %rax
000000000104dc36	movq	%rax, 0x8(%rsp)
000000000104dc3b	movq	0x30(%rsp), %rcx
000000000104dc40	movq	%rcx, (%rsp)
000000000104dc44	movq	$0x78, 0x10(%rsp)
000000000104dc4d	callq	runtime.memequal
000000000104dc52	leaq	0x18(%rsp), %rax
000000000104dc57	cmpb	$0x0, (%rax)
000000000104dc5a	jne	0x104de0c
000000000104dc60	xorl	%eax, %eax
000000000104dc62	testb	%al, %al
000000000104dc64	jne	0x104ddd3
000000000104dc6a	xorl	%eax, %eax
000000000104dc6c	testb	%al, %al
000000000104dc6e	jne	0x104dd9a
000000000104dc74	xorl	%eax, %eax
000000000104dc76	testb	%al, %al
000000000104dc78	je	0x104dd89
000000000104dc7e	movq	0x30(%rsp), %rax
000000000104dc83	movl	0xe4(%rax), %ecx
000000000104dc89	movq	0x38(%rsp), %rdx
000000000104dc8e	cmpl	%ecx, 0xe4(%rdx)
000000000104dc94	jne	0x104dd82
000000000104dc9a	movl	0xe8(%rax), %ecx
000000000104dca0	cmpl	%ecx, 0xe8(%rdx)
000000000104dca6	jne	0x104dd7b
000000000104dcac	movq	0xf0(%rdx), %rcx
000000000104dcb3	cmpq	%rcx, 0xf0(%rax)
000000000104dcba	jne	0x104dd74
000000000104dcc0	movl	0xf8(%rax), %ecx
000000000104dcc6	cmpl	%ecx, 0xf8(%rdx)
000000000104dccc	jne	0x104dd70
000000000104dcd2	movq	0x100(%rdx), %rcx
000000000104dcd9	cmpq	%rcx, 0x100(%rax)
000000000104dce0	jne	0x104dd6c
000000000104dce6	movzbl	0x108(%rdx), %ecx
000000000104dced	cmpb	%cl, 0x108(%rax)
000000000104dcf3	je	0x104dd36
000000000104dcf5	xorl	%ecx, %ecx
000000000104dcf7	testb	%cl, %cl
000000000104dcf9	jne	0x104dd0b
000000000104dcfb	xorl	%eax, %eax
000000000104dcfd	movb	%al, 0x40(%rsp)
000000000104dd01	movq	0x20(%rsp), %rbp
000000000104dd06	addq	$0x28, %rsp
000000000104dd0a	retq
000000000104dd0b	leaq	0x158(%rdx), %rcx
000000000104dd12	movq	%rcx, 0x8(%rsp)
000000000104dd17	addq	$0x158, %rax
000000000104dd1d	movq	%rax, (%rsp)
000000000104dd21	movq	$0x50, 0x10(%rsp)
000000000104dd2a	callq	runtime.memequal
000000000104dd2f	movzbl	0x18(%rsp), %eax
000000000104dd34	jmp	0x104dcfd
000000000104dd36	leaq	0x110(%rdx), %rcx
000000000104dd3d	movq	%rcx, 0x8(%rsp)
000000000104dd42	leaq	0x110(%rax), %rcx
000000000104dd49	movq	%rcx, (%rsp)
000000000104dd4d	movq	$0x44, 0x10(%rsp)
000000000104dd56	callq	runtime.memequal
000000000104dd5b	movzbl	0x18(%rsp), %ecx
000000000104dd60	movq	0x30(%rsp), %rax
000000000104dd65	movq	0x38(%rsp), %rdx
000000000104dd6a	jmp	0x104dcf7
000000000104dd6c	xorl	%ecx, %ecx
000000000104dd6e	jmp	0x104dcf7
000000000104dd70	xorl	%ecx, %ecx
000000000104dd72	jmp	0x104dcf7
000000000104dd74	xorl	%ecx, %ecx
000000000104dd76	jmp	0x104dcf7
000000000104dd7b	xorl	%ecx, %ecx
000000000104dd7d	jmp	0x104dcf7
000000000104dd82	xorl	%ecx, %ecx
000000000104dd84	jmp	0x104dcf7
000000000104dd89	movq	0x30(%rsp), %rax
000000000104dd8e	movq	0x38(%rsp), %rdx
000000000104dd93	xorl	%ecx, %ecx
000000000104dd95	jmp	0x104dcf7
000000000104dd9a	movq	0x38(%rsp), %rax
000000000104dd9f	leaq	0xb8(%rax), %rcx
000000000104dda6	movq	%rcx, 0x8(%rsp)
000000000104ddab	movq	0x30(%rsp), %rcx
000000000104ddb0	leaq	0xb8(%rcx), %rdx
000000000104ddb7	movq	%rdx, (%rsp)
000000000104ddbb	movq	$0x29, 0x10(%rsp)
000000000104ddc4	callq	runtime.memequal
000000000104ddc9	movzbl	0x18(%rsp), %eax
000000000104ddce	jmp	0x104dc76
000000000104ddd3	movq	0x38(%rsp), %rax
000000000104ddd8	leaq	0x98(%rax), %rcx
000000000104dddf	movq	%rcx, 0x8(%rsp)
000000000104dde4	movq	0x30(%rsp), %rcx
000000000104dde9	leaq	0x98(%rcx), %rdx
000000000104ddf0	movq	%rdx, (%rsp)
000000000104ddf4	movq	$0x19, 0x10(%rsp)
000000000104ddfd	callq	runtime.memequal
000000000104de02	movzbl	0x18(%rsp), %eax
000000000104de07	jmp	0x104dc6c
000000000104de0c	movq	0x38(%rsp), %rax
000000000104de11	leaq	0x80(%rax), %rcx
000000000104de18	movq	%rcx, 0x8(%rsp)
000000000104de1d	movq	0x30(%rsp), %rcx
000000000104de22	leaq	0x80(%rcx), %rdx
000000000104de29	movq	%rdx, (%rsp)
000000000104de2d	movq	$0x14, 0x10(%rsp)
000000000104de36	callq	runtime.memequal
000000000104de3b	movzbl	0x18(%rsp), %eax
000000000104de40	jmp	0x104dc62
000000000104de45	callq	runtime.morestack_noctxt
000000000104de4a	jmp	"type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 [64]uint8; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.alldone runtime.note; runtime.helperDrainBlock bool; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.markrootDone bool; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.head runtime.guintptr; runtime.tail runtime.guintptr }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.head runtime.guintptr }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }"
000000000104de4f	int3
type..hash.struct { runtime.lock runtime.mutex; runtime.newm runtime.muintptr; runtime.waiting bool; runtime.wake runtime.note; runtime.haveTemplateThread uint32 }:
000000000104de50	movq	%gs:0x30, %rcx
000000000104de59	cmpq	0x10(%rcx), %rsp
000000000104de5d	jbe	0x104dec7
000000000104de5f	subq	$0x28, %rsp
000000000104de63	movq	%rbp, 0x20(%rsp)
000000000104de68	leaq	0x20(%rsp), %rbp
000000000104de6d	movq	0x30(%rsp), %rax
000000000104de72	movq	%rax, (%rsp)
000000000104de76	movq	0x38(%rsp), %rcx
000000000104de7b	movq	%rcx, 0x8(%rsp)
000000000104de80	movq	$0x11, 0x10(%rsp)
000000000104de89	callq	runtime.memhash
000000000104de8e	movq	0x18(%rsp), %rax
000000000104de93	movq	0x30(%rsp), %rcx
000000000104de98	addq	$0x18, %rcx
000000000104de9c	movq	%rcx, (%rsp)
000000000104dea0	movq	%rax, 0x8(%rsp)
000000000104dea5	movq	$0xc, 0x10(%rsp)
000000000104deae	callq	runtime.memhash
000000000104deb3	movq	0x18(%rsp), %rax
000000000104deb8	movq	%rax, 0x40(%rsp)
000000000104debd	movq	0x20(%rsp), %rbp
000000000104dec2	addq	$0x28, %rsp
000000000104dec6	retq
000000000104dec7	callq	runtime.morestack_noctxt
000000000104decc	jmp	"type..hash.struct { runtime.lock runtime.mutex; runtime.newm runtime.muintptr; runtime.waiting bool; runtime.wake runtime.note; runtime.haveTemplateThread uint32 }"
000000000104dece	int3
000000000104decf	int3
type..eq.struct { runtime.lock runtime.mutex; runtime.newm runtime.muintptr; runtime.waiting bool; runtime.wake runtime.note; runtime.haveTemplateThread uint32 }:
000000000104ded0	movq	%gs:0x30, %rcx
000000000104ded9	cmpq	0x10(%rcx), %rsp
000000000104dedd	jbe	0x104df4b
000000000104dedf	subq	$0x28, %rsp
000000000104dee3	movq	%rbp, 0x20(%rsp)
000000000104dee8	leaq	0x20(%rsp), %rbp
000000000104deed	movq	0x38(%rsp), %rax
000000000104def2	movq	%rax, 0x8(%rsp)
000000000104def7	movq	0x30(%rsp), %rcx
000000000104defc	movq	%rcx, (%rsp)
000000000104df00	movq	$0x11, 0x10(%rsp)
000000000104df09	callq	runtime.memequal
000000000104df0e	leaq	0x18(%rsp), %rax
000000000104df13	cmpb	$0x0, (%rax)
000000000104df16	je	0x104df47
000000000104df18	movq	0x38(%rsp), %rax
000000000104df1d	movq	0x18(%rax), %rcx
000000000104df21	movq	0x30(%rsp), %rdx
000000000104df26	cmpq	%rcx, 0x18(%rdx)
000000000104df2a	jne	0x104df43
000000000104df2c	movl	0x20(%rax), %eax
000000000104df2f	cmpl	%eax, 0x20(%rdx)
000000000104df32	sete	%al
000000000104df35	movb	%al, 0x40(%rsp)
000000000104df39	movq	0x20(%rsp), %rbp
000000000104df3e	addq	$0x28, %rsp
000000000104df42	retq
000000000104df43	xorl	%eax, %eax
000000000104df45	jmp	0x104df35
000000000104df47	xorl	%eax, %eax
000000000104df49	jmp	0x104df35
000000000104df4b	callq	runtime.morestack_noctxt
000000000104df50	jmp	"type..eq.struct { runtime.lock runtime.mutex; runtime.newm runtime.muintptr; runtime.waiting bool; runtime.wake runtime.note; runtime.haveTemplateThread uint32 }"
000000000104df55	int3
000000000104df56	int3
000000000104df57	int3
000000000104df58	int3
000000000104df59	int3
000000000104df5a	int3
000000000104df5b	int3
000000000104df5c	int3
000000000104df5d	int3
000000000104df5e	int3
000000000104df5f	int3
type..hash.struct { runtime.note runtime.note; runtime.mask [1]uint32; runtime.wanted [1]uint32; runtime.ignored [1]uint32; runtime.recv [1]uint32; runtime.state uint32; runtime.delivering uint32; runtime.inuse bool }:
000000000104df60	movq	%gs:0x30, %rcx
000000000104df69	cmpq	0x10(%rcx), %rsp
000000000104df6d	jbe	0x104dfb2
000000000104df6f	subq	$0x28, %rsp
000000000104df73	movq	%rbp, 0x20(%rsp)
000000000104df78	leaq	0x20(%rsp), %rbp
000000000104df7d	movq	0x30(%rsp), %rax
000000000104df82	movq	%rax, (%rsp)
000000000104df86	movq	0x38(%rsp), %rax
000000000104df8b	movq	%rax, 0x8(%rsp)
000000000104df90	movq	$0x21, 0x10(%rsp)
000000000104df99	callq	runtime.memhash
000000000104df9e	movq	0x18(%rsp), %rax
000000000104dfa3	movq	%rax, 0x40(%rsp)
000000000104dfa8	movq	0x20(%rsp), %rbp
000000000104dfad	addq	$0x28, %rsp
000000000104dfb1	retq
000000000104dfb2	callq	runtime.morestack_noctxt
000000000104dfb7	jmp	"type..hash.struct { runtime.note runtime.note; runtime.mask [1]uint32; runtime.wanted [1]uint32; runtime.ignored [1]uint32; runtime.recv [1]uint32; runtime.state uint32; runtime.delivering uint32; runtime.inuse bool }"
000000000104dfb9	int3
000000000104dfba	int3
000000000104dfbb	int3
000000000104dfbc	int3
000000000104dfbd	int3
000000000104dfbe	int3
000000000104dfbf	int3
type..eq.struct { runtime.note runtime.note; runtime.mask [1]uint32; runtime.wanted [1]uint32; runtime.ignored [1]uint32; runtime.recv [1]uint32; runtime.state uint32; runtime.delivering uint32; runtime.inuse bool }:
000000000104dfc0	movq	%gs:0x30, %rcx
000000000104dfc9	cmpq	0x10(%rcx), %rsp
000000000104dfcd	jbe	0x104e011
000000000104dfcf	subq	$0x28, %rsp
000000000104dfd3	movq	%rbp, 0x20(%rsp)
000000000104dfd8	leaq	0x20(%rsp), %rbp
000000000104dfdd	movq	0x38(%rsp), %rax
000000000104dfe2	movq	%rax, 0x8(%rsp)
000000000104dfe7	movq	0x30(%rsp), %rax
000000000104dfec	movq	%rax, (%rsp)
000000000104dff0	movq	$0x21, 0x10(%rsp)
000000000104dff9	callq	runtime.memequal
000000000104dffe	movzbl	0x18(%rsp), %eax
000000000104e003	movb	%al, 0x40(%rsp)
000000000104e007	movq	0x20(%rsp), %rbp
000000000104e00c	addq	$0x28, %rsp
000000000104e010	retq
000000000104e011	callq	runtime.morestack_noctxt
000000000104e016	jmp	"type..eq.struct { runtime.note runtime.note; runtime.mask [1]uint32; runtime.wanted [1]uint32; runtime.ignored [1]uint32; runtime.recv [1]uint32; runtime.state uint32; runtime.delivering uint32; runtime.inuse bool }"
000000000104e018	int3
000000000104e019	int3
000000000104e01a	int3
000000000104e01b	int3
000000000104e01c	int3
000000000104e01d	int3
000000000104e01e	int3
000000000104e01f	int3
main.main:
000000000104e020	movq	%gs:0x30, %rcx
000000000104e029	cmpq	0x10(%rcx), %rsp
000000000104e02d	jbe	0x104e0a4
000000000104e02f	subq	$0x18, %rsp
000000000104e033	movq	%rbp, 0x10(%rsp)
000000000104e038	leaq	0x10(%rsp), %rbp
000000000104e03d	callq	runtime.printlock
000000000104e042	movq	"github.com/wpxun/blog/sample/pkg.Id"(%rip), %rax
000000000104e049	movq	%rax, (%rsp)
000000000104e04d	callq	runtime.printint
000000000104e052	callq	runtime.printnl
000000000104e057	callq	runtime.printunlock
000000000104e05c	movq	"github.com/wpxun/blog/sample/pkg.Name"(%rip), %rax
000000000104e063	cmpq	$0x1, 0x68d3d(%rip)
000000000104e06b	jbe	0x104e09d
000000000104e06d	movzbl	0x1(%rax), %eax
000000000104e071	movq	%rax, 0x8(%rsp)
000000000104e076	callq	runtime.printlock
000000000104e07b	movq	0x8(%rsp), %rax
000000000104e080	movq	%rax, (%rsp)
000000000104e084	callq	runtime.printuint
000000000104e089	callq	runtime.printnl
000000000104e08e	callq	runtime.printunlock
000000000104e093	movq	0x10(%rsp), %rbp
000000000104e098	addq	$0x18, %rsp
000000000104e09c	retq
000000000104e09d	callq	runtime.panicindex
000000000104e0a2	ud2
000000000104e0a4	callq	runtime.morestack_noctxt
000000000104e0a9	jmp	main.main
000000000104e0ae	int3
000000000104e0af	int3
main.init:
000000000104e0b0	movq	%gs:0x30, %rcx
000000000104e0b9	cmpq	0x10(%rcx), %rsp
000000000104e0bd	jbe	0x104e0f9
000000000104e0bf	subq	$0x8, %rsp
000000000104e0c3	movq	%rbp, (%rsp)
000000000104e0c7	leaq	(%rsp), %rbp
000000000104e0cb	movzbl	main.initdone.(%rip), %eax
000000000104e0d2	cmpb	$0x1, %al
000000000104e0d5	jbe	0x104e0e0
000000000104e0d7	movq	(%rsp), %rbp
000000000104e0db	addq	$0x8, %rsp
000000000104e0df	retq
000000000104e0e0	jne	0x104e0e9
000000000104e0e2	callq	runtime.throwinit
000000000104e0e7	ud2
000000000104e0e9	movb	$0x2, "internal/cpu.debugOptions"(%rip)
000000000104e0f0	movq	(%rsp), %rbp
000000000104e0f4	addq	$0x8, %rsp
000000000104e0f8	retq
000000000104e0f9	callq	runtime.morestack_noctxt
000000000104e0fe	jmp	main.init
runtime.etext:
